00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000                            ; Ring managers-related stuff
00000000 =000001FF                  Max_Rings:	equ 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space:	equ (Max_Rings+1)*2
00000000                            
00000000 =FFFF8300                  Ring_Positions:	equ $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM:	equ Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM:	equ Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM:	equ Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left:		equ Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine:		equ Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  v_level_started_flag:		equ Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	while (__pos)
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 7400                       		moveq	#0,d2
00001D20 7000                       		moveq	#0,d0
00001D22 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D26 D040                       		add.w	d0,d0
00001D28 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D2C 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D30                            ; End of function PaletteCycle
00001D30                            
00001D30                            ; ===========================================================================
00001D30                            ; ---------------------------------------------------------------------------
00001D30                            ; Palette cycling routines
00001D30                            ; ---------------------------------------------------------------------------
00001D30 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D32 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D34 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D36 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D38 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D3C 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D3E                            
00001D3E                            
00001D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3E                            
00001D3E                            
00001D3E                            PCycle_Title:
00001D3E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D44 6000                       		bra.s	PCycGHZ_Go
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            PCycle_GHZ:
00001D46 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D4C                            
00001D4C                            PCycGHZ_Go:
00001D4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D50 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D52                            
00001D52 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D58 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D5C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D60 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D64 E748                       		lsl.w	#3,d0
00001D66 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D72                            
00001D72                            PCycGHZ_Skip:
00001D72 4E75                       		rts	
00001D74                            ; End of function PCycle_GHZ
00001D74                            
00001D74                            
00001D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D74                            
00001D74                            
00001D74                            PCycle_LZ:
00001D74                            ; Waterfalls
00001D74 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D78 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7A                            
00001D7A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D80 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D84 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D88 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D8C E748                       		lsl.w	#3,d0
00001D8E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D94 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D9C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA2                            
00001DA2                            	PCycLZ_NotSBZ3:
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DAE 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            PCycLZ_Skip1:
00001DBA                            ; Conveyor belts
00001DBA                            		;move.w	(v_framecount).w,d0
00001DBA                            		;andi.w	#7,d0
00001DBA                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBA                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBA                            		;moveq	#1,d1
00001DBA                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBA                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBA                            		;neg.w	d1
00001DBA                            
00001DBA                            	;PCycLZ_NoRev:
00001DBA                            		;move.w	(v_pal_buffer).w,d0
00001DBA                            		;andi.w	#3,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;cmpi.w	#3,d0
00001DBA                            		;bcs.s	loc_1A0A
00001DBA                            		;move.w	d0,d1
00001DBA                            		;moveq	#0,d0
00001DBA                            		;tst.w	d1
00001DBA                            		;bpl.s	loc_1A0A
00001DBA                            		;moveq	#2,d0
00001DBA                            
00001DBA                            ;loc_1A0A:
00001DBA                            		;move.w	d0,(v_pal_buffer).w
00001DBA                            		;add.w	d0,d0
00001DBA                            		;move.w	d0,d1
00001DBA                            		;add.w	d0,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;lea	(Pal_LZCyc2).l,a0
00001DBA                            		;lea	(v_pal_dry+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            		;lea	(Pal_LZCyc3).l,a0
00001DBA                            		;lea	(v_pal_water+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            ;PCycLZ_Skip2:
00001DBA 4E75                       		rts	
00001DBC                            ; End of function PCycle_LZ
00001DBC                            
00001DBC                            ; ===========================================================================
00001DBC 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC4                            ; ===========================================================================
00001DC4                            
00001DC4                            PCycle_MZ:
00001DC4 4E75                       		rts	
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            PalCycle_SLZ:
00001DC6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCA 6A00                       		bpl.s	locret_1A80
00001DCC 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DD6 5240                       		addq.w	#1,d0
00001DD8 0C40 0006                  		cmpi.w	#6,d0
00001DDC 6500                       		bcs.s	loc_1A60
00001DDE 7000                       		moveq	#0,d0
00001DE0                            
00001DE0                            loc_1A60:
00001DE0 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE4 3200                       		move.w	d0,d1
00001DE6 D241                       		add.w	d1,d1
00001DE8 D041                       		add.w	d1,d0
00001DEA D040                       		add.w	d0,d0
00001DEC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DF6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E00                            
00001E00                            locret_1A80:
00001E00 4E75                       		rts	
00001E02                            ; End of function PalCycle_SLZ
00001E02                            
00001E02                            
00001E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E02                            
00001E02                            
00001E02                            PalCycle_SYZ:
00001E02 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E06 6A00                       		bpl.s	locret_1AC6
00001E08 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E0E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E12 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E16 0240 0003                  		andi.w	#3,d0
00001E1A E548                       		lsl.w	#2,d0
00001E1C 3200                       		move.w	d0,d1
00001E1E D040                       		add.w	d0,d0
00001E20 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E26 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E2E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E32 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E38 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E3C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E40 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E46                            
00001E46                            locret_1AC6:
00001E46 4E75                       		rts	
00001E48                            ; End of function PalCycle_SYZ
00001E48                            
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            PalCycle_SBZ:
00001E48 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E4E 4A38 FE11                  		tst.b	(v_act).w
00001E52 6700                       		beq.s	loc_1ADA
00001E54 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5A                            
00001E5A                            loc_1ADA:
00001E5A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E5E 321A                       		move.w	(a2)+,d1
00001E60                            
00001E60                            loc_1AE0:
00001E60 5311                       		subq.b	#1,(a1)
00001E62 6B00                       		bmi.s	loc_1AEA
00001E64 5489                       		addq.l	#2,a1
00001E66 5C8A                       		addq.l	#6,a2
00001E68 6000                       		bra.s	loc_1B06
00001E6A                            ; ===========================================================================
00001E6A                            
00001E6A                            loc_1AEA:
00001E6A 12DA                       		move.b	(a2)+,(a1)+
00001E6C 1011                       		move.b	(a1),d0
00001E6E 5200                       		addq.b	#1,d0
00001E70 B01A                       		cmp.b	(a2)+,d0
00001E72 6500                       		bcs.s	loc_1AF6
00001E74 7000                       		moveq	#0,d0
00001E76                            
00001E76                            loc_1AF6:
00001E76 12C0                       		move.b	d0,(a1)+
00001E78 0240 000F                  		andi.w	#$F,d0
00001E7C D040                       		add.w	d0,d0
00001E7E 305A                       		movea.w	(a2)+,a0
00001E80 365A                       		movea.w	(a2)+,a3
00001E82 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E86                            
00001E86                            loc_1B06:
00001E86 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E8E 6A00                       		bpl.s	locret_1B64
00001E90 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E96 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E9C 4A38 FE11                  		tst.b	(v_act).w
00001EA0 6700                       		beq.s	loc_1B2E
00001EA2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EA8 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EAE                            
00001EAE                            loc_1B2E:
00001EAE 72FF                       		moveq	#-1,d1
00001EB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB4 6700                       		beq.s	loc_1B38
00001EB6 4441                       		neg.w	d1
00001EB8                            
00001EB8                            loc_1B38:
00001EB8 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EBC 0240 0003                  		andi.w	#3,d0
00001EC0 D041                       		add.w	d1,d0
00001EC2 0C40 0003                  		cmpi.w	#3,d0
00001EC6 6500                       		bcs.s	loc_1B52
00001EC8 3200                       		move.w	d0,d1
00001ECA 7000                       		moveq	#0,d0
00001ECC 4A41                       		tst.w	d1
00001ECE 6A00                       		bpl.s	loc_1B52
00001ED0 7002                       		moveq	#2,d0
00001ED2                            
00001ED2                            loc_1B52:
00001ED2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001ED6 D040                       		add.w	d0,d0
00001ED8 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EDC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE4                            
00001EE4                            locret_1B64:
00001EE4 4E75                       		rts	
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            
00001EE6                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001F06                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001F26                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001F46                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F58                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F6A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001FD2                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FF6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00002016                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00002026                            
00002026                            		include	"_inc\SBZ Palette Scripts.asm"
00002026                            ; ---------------------------------------------------------------------------
00002026                            ; Scrap Brain Zone palette cycling script
00002026                            ; ---------------------------------------------------------------------------
00002026                            
00002026                            mSBZp:	macro duration,colors,paladdress,ramaddress
00002026                            	dc.b duration, colors
00002026                            	dc.w paladdress, ramaddress
00002026                            	endm
00002026                            
00002026                            ; duration in frames, number of colors, palette address, RAM address
00002026                            
00002026                            Pal_SBZCycList1:
00002026 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00002028 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000202E 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002034 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
0000203A 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00002040 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002046 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
0000204C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002052 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002058 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000205E                            end_SBZCycList1:
0000205E                            	even
0000205E                            
0000205E                            Pal_SBZCycList2:
0000205E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002060 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002066 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000206C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002072 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002078 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000207E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002084 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000208A                            end_SBZCycList2:
0000208A                            	even
0000208A                            	even
0000208A                            
0000208A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000209A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
000020AA                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
000020BA                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
000020C6                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
000020D6                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
000020E6                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00002106                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002110                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002120                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            ; Subroutine to	fade in from black
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PaletteFadeIn:
0000212C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002132                            
00002132                            PalFadeIn_Alt:				; start position and size are already set
00002132 7000                       		moveq	#0,d0
00002134 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002138 1038 F626                  		move.b	(v_pfade_start).w,d0
0000213C D0C0                       		adda.w	d0,a0
0000213E 7200                       		moveq	#cBlack,d1
00002140 1038 F627                  		move.b	(v_pfade_size).w,d0
00002144                            
00002144                            	@fill:
00002144 30C1                       		move.w	d1,(a0)+
00002146 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
0000214A                            
0000214A 383C 0015                  		move.w	#$15,d4
0000214E                            
0000214E                            	@mainloop:
0000214E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002154 6100 0000                  		bsr.w	WaitForVBla
00002158 6100                       		bsr.s	FadeIn_FromBlack
0000215A 6100 F64A                  		bsr.w	RunPLC
0000215E 51CC FFEE                  		dbf	d4,@mainloop
00002162 4E75                       		rts	
00002164                            ; End of function PaletteFadeIn
00002164                            
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            FadeIn_FromBlack:
00002164 7000                       		moveq	#0,d0
00002166 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000216A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000216E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002172 D0C0                       		adda.w	d0,a0
00002174 D2C0                       		adda.w	d0,a1
00002176 1038 F627                  		move.b	(v_pfade_size).w,d0
0000217A                            
0000217A                            	@addcolour:
0000217A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000217C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002180                            
00002180 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002186 6600                       		bne.s	@exit		; if not, branch
00002188                            
00002188 7000                       		moveq	#0,d0
0000218A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000218E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002192 1038 F626                  		move.b	(v_pfade_start).w,d0
00002196 D0C0                       		adda.w	d0,a0
00002198 D2C0                       		adda.w	d0,a1
0000219A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000219E                            
0000219E                            	@addcolour2:
0000219E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
000021A0 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
000021A4                            
000021A4                            @exit:
000021A4 4E75                       		rts	
000021A6                            ; End of function FadeIn_FromBlack
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeIn_AddColour:
000021A6                            @addblue:
000021A6 3419                       		move.w	(a1)+,d2
000021A8 3610                       		move.w	(a0),d3
000021AA B642                       		cmp.w	d2,d3		; is colour already at threshold level?
000021AC 6700                       		beq.s	@next		; if yes, branch
000021AE 3203                       		move.w	d3,d1
000021B0 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000021B4 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000021B6 6200                       		bhi.s	@addgreen	; if yes, branch
000021B8 30C1                       		move.w	d1,(a0)+	; update palette
000021BA 4E75                       		rts	
000021BC                            ; ===========================================================================
000021BC                            
000021BC                            @addgreen:
000021BC 3203                       		move.w	d3,d1
000021BE 0641 0020                  		addi.w	#$20,d1		; increase green value
000021C2 B242                       		cmp.w	d2,d1
000021C4 6200                       		bhi.s	@addred
000021C6 30C1                       		move.w	d1,(a0)+	; update palette
000021C8 4E75                       		rts	
000021CA                            ; ===========================================================================
000021CA                            
000021CA                            @addred:
000021CA 5458                       		addq.w	#2,(a0)+	; increase red value
000021CC 4E75                       		rts	
000021CE                            ; ===========================================================================
000021CE                            
000021CE                            @next:
000021CE 5448                       		addq.w	#2,a0		; next colour
000021D0 4E75                       		rts	
000021D2                            ; End of function FadeIn_AddColour
000021D2                            
000021D2                            
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            ; Subroutine to fade out to black
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            
000021D2                            
000021D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D2                            
000021D2                            
000021D2                            PaletteFadeOut:
000021D2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000021D8 383C 0015                  		move.w	#$15,d4
000021DC                            
000021DC                            	@mainloop:
000021DC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000021E2 6100 0000                  		bsr.w	WaitForVBla
000021E6 6100                       		bsr.s	FadeOut_ToBlack
000021E8 6100 F5BC                  		bsr.w	RunPLC
000021EC 51CC FFEE                  		dbf	d4,@mainloop
000021F0 4E75                       		rts	
000021F2                            ; End of function PaletteFadeOut
000021F2                            
000021F2                            
000021F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F2                            
000021F2                            
000021F2                            FadeOut_ToBlack:
000021F2 7000                       		moveq	#0,d0
000021F4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021F8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021FC D0C0                       		adda.w	d0,a0
000021FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002202                            
00002202                            	@decolour:
00002202 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00002204 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002208                            
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000220E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 1038 F627                  		move.b	(v_pfade_size).w,d0
00002218                            
00002218                            	@decolour2:
00002218 6100                       		bsr.s	FadeOut_DecColour
0000221A 51C8 FFFC                  		dbf	d0,@decolour2
0000221E 4E75                       		rts	
00002220                            ; End of function FadeOut_ToBlack
00002220                            
00002220                            
00002220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002220                            
00002220                            
00002220                            FadeOut_DecColour:
00002220                            @dered:
00002220 3410                       		move.w	(a0),d2
00002222 6700                       		beq.s	@next
00002224 3202                       		move.w	d2,d1
00002226 0241 000E                  		andi.w	#$E,d1
0000222A 6700                       		beq.s	@degreen
0000222C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000222E 4E75                       		rts	
00002230                            ; ===========================================================================
00002230                            
00002230                            @degreen:
00002230 3202                       		move.w	d2,d1
00002232 0241 00E0                  		andi.w	#$E0,d1
00002236 6700                       		beq.s	@deblue
00002238 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000223C 4E75                       		rts	
0000223E                            ; ===========================================================================
0000223E                            
0000223E                            @deblue:
0000223E 3202                       		move.w	d2,d1
00002240 0241 0E00                  		andi.w	#$E00,d1
00002244 6700                       		beq.s	@next
00002246 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
0000224A 4E75                       		rts	
0000224C                            ; ===========================================================================
0000224C                            
0000224C                            @next:
0000224C 5448                       		addq.w	#2,a0
0000224E 4E75                       		rts	
00002250                            ; End of function FadeOut_DecColour
00002250                            
00002250                            ; ---------------------------------------------------------------------------
00002250                            ; Subroutine to	fade in from white (Special Stage)
00002250                            ; ---------------------------------------------------------------------------
00002250                            
00002250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002250                            
00002250                            
00002250                            PaletteWhiteIn:
00002250 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002256 7000                       		moveq	#0,d0
00002258 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000225C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002260 D0C0                       		adda.w	d0,a0
00002262 323C 0EEE                  		move.w	#cWhite,d1
00002266 1038 F627                  		move.b	(v_pfade_size).w,d0
0000226A                            
0000226A                            	@fill:
0000226A 30C1                       		move.w	d1,(a0)+
0000226C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002270                            
00002270 383C 0015                  		move.w	#$15,d4
00002274                            
00002274                            	@mainloop:
00002274 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000227A 6100 0000                  		bsr.w	WaitForVBla
0000227E 6100                       		bsr.s	WhiteIn_FromWhite
00002280 6100 F524                  		bsr.w	RunPLC
00002284 51CC FFEE                  		dbf	d4,@mainloop
00002288 4E75                       		rts	
0000228A                            ; End of function PaletteWhiteIn
0000228A                            
0000228A                            
0000228A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000228A                            
0000228A                            
0000228A                            WhiteIn_FromWhite:
0000228A 7000                       		moveq	#0,d0
0000228C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002290 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002294 1038 F626                  		move.b	(v_pfade_start).w,d0
00002298 D0C0                       		adda.w	d0,a0
0000229A D2C0                       		adda.w	d0,a1
0000229C 1038 F627                  		move.b	(v_pfade_size).w,d0
000022A0                            
000022A0                            	@decolour:
000022A0 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
000022A2 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000022A6                            
000022A6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
000022AC 6600                       		bne.s	@exit		; if not, branch
000022AE 7000                       		moveq	#0,d0
000022B0 41F8 FA80                  		lea	(v_pal_water).w,a0
000022B4 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
000022B8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022BC D0C0                       		adda.w	d0,a0
000022BE D2C0                       		adda.w	d0,a1
000022C0 1038 F627                  		move.b	(v_pfade_size).w,d0
000022C4                            
000022C4                            	@decolour2:
000022C4 6100                       		bsr.s	WhiteIn_DecColour
000022C6 51C8 FFFC                  		dbf	d0,@decolour2
000022CA                            
000022CA                            	@exit:
000022CA 4E75                       		rts	
000022CC                            ; End of function WhiteIn_FromWhite
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteIn_DecColour:
000022CC                            @deblue:
000022CC 3419                       		move.w	(a1)+,d2
000022CE 3610                       		move.w	(a0),d3
000022D0 B642                       		cmp.w	d2,d3
000022D2 6700                       		beq.s	@next
000022D4 3203                       		move.w	d3,d1
000022D6 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000022DA 6500                       		blo.s	@degreen
000022DC B242                       		cmp.w	d2,d1
000022DE 6500                       		blo.s	@degreen
000022E0 30C1                       		move.w	d1,(a0)+
000022E2 4E75                       		rts	
000022E4                            ; ===========================================================================
000022E4                            
000022E4                            @degreen:
000022E4 3203                       		move.w	d3,d1
000022E6 0441 0020                  		subi.w	#$20,d1		; decrease green value
000022EA 6500                       		blo.s	@dered
000022EC B242                       		cmp.w	d2,d1
000022EE 6500                       		blo.s	@dered
000022F0 30C1                       		move.w	d1,(a0)+
000022F2 4E75                       		rts	
000022F4                            ; ===========================================================================
000022F4                            
000022F4                            @dered:
000022F4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022F6 4E75                       		rts	
000022F8                            ; ===========================================================================
000022F8                            
000022F8                            @next:
000022F8 5448                       		addq.w	#2,a0
000022FA 4E75                       		rts	
000022FC                            ; End of function WhiteIn_DecColour
000022FC                            
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            ; Subroutine to fade to white (Special Stage)
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            PaletteWhiteOut:
000022FC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002302 383C 0015                  		move.w	#$15,d4
00002306                            
00002306                            	@mainloop:
00002306 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000230C 6100 0000                  		bsr.w	WaitForVBla
00002310 6100                       		bsr.s	WhiteOut_ToWhite
00002312 6100 F492                  		bsr.w	RunPLC
00002316 51CC FFEE                  		dbf	d4,@mainloop
0000231A 4E75                       		rts	
0000231C                            ; End of function PaletteWhiteOut
0000231C                            
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            WhiteOut_ToWhite:
0000231C 7000                       		moveq	#0,d0
0000231E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002322 1038 F626                  		move.b	(v_pfade_start).w,d0
00002326 D0C0                       		adda.w	d0,a0
00002328 1038 F627                  		move.b	(v_pfade_size).w,d0
0000232C                            
0000232C                            	@addcolour:
0000232C 6100                       		bsr.s	WhiteOut_AddColour
0000232E 51C8 FFFC                  		dbf	d0,@addcolour
00002332                            
00002332 7000                       		moveq	#0,d0
00002334 41F8 FA80                  		lea	(v_pal_water).w,a0
00002338 1038 F626                  		move.b	(v_pfade_start).w,d0
0000233C D0C0                       		adda.w	d0,a0
0000233E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002342                            
00002342                            	@addcolour2:
00002342 6100                       		bsr.s	WhiteOut_AddColour
00002344 51C8 FFFC                  		dbf	d0,@addcolour2
00002348 4E75                       		rts	
0000234A                            ; End of function WhiteOut_ToWhite
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            
0000234A                            WhiteOut_AddColour:
0000234A                            @addred:
0000234A 3410                       		move.w	(a0),d2
0000234C 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002350 6700                       		beq.s	@next
00002352 3202                       		move.w	d2,d1
00002354 0241 000E                  		andi.w	#$E,d1
00002358 0C41 000E                  		cmpi.w	#cRed,d1
0000235C 6700                       		beq.s	@addgreen
0000235E 5458                       		addq.w	#2,(a0)+	; increase red value
00002360 4E75                       		rts	
00002362                            ; ===========================================================================
00002362                            
00002362                            @addgreen:
00002362 3202                       		move.w	d2,d1
00002364 0241 00E0                  		andi.w	#$E0,d1
00002368 0C41 00E0                  		cmpi.w	#cGreen,d1
0000236C 6700                       		beq.s	@addblue
0000236E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002372 4E75                       		rts	
00002374                            ; ===========================================================================
00002374                            
00002374                            @addblue:
00002374 3202                       		move.w	d2,d1
00002376 0241 0E00                  		andi.w	#$E00,d1
0000237A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000237E 6700                       		beq.s	@next
00002380 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002384 4E75                       		rts	
00002386                            ; ===========================================================================
00002386                            
00002386                            @next:
00002386 5448                       		addq.w	#2,a0
00002388 4E75                       		rts	
0000238A                            ; End of function WhiteOut_AddColour
0000238A                            
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            ; Palette cycling routine - Sega logo
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            
0000238A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000238A                            
0000238A                            
0000238A                            PalCycle_Sega:
0000238A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000238E 6600                       		bne.s	loc_206A
00002390 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002394 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000239A 7205                       		moveq	#5,d1
0000239C 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023A0                            
000023A0                            loc_2020:
000023A0 6A00                       		bpl.s	loc_202A
000023A2 5448                       		addq.w	#2,a0
000023A4 5341                       		subq.w	#1,d1
000023A6 5440                       		addq.w	#2,d0
000023A8 60F6                       		bra.s	loc_2020
000023AA                            ; ===========================================================================
000023AA                            
000023AA                            loc_202A:
000023AA 3400                       		move.w	d0,d2
000023AC 0242 001E                  		andi.w	#$1E,d2
000023B0 6600                       		bne.s	loc_2034
000023B2 5440                       		addq.w	#2,d0
000023B4                            
000023B4                            loc_2034:
000023B4 0C40 0060                  		cmpi.w	#$60,d0
000023B8 6400                       		bhs.s	loc_203E
000023BA 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000023BE                            
000023BE                            loc_203E:
000023BE 5440                       		addq.w	#2,d0
000023C0 51C9 FFE8                  		dbf	d1,loc_202A
000023C4                            
000023C4 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023C8 5440                       		addq.w	#2,d0
000023CA 3400                       		move.w	d0,d2
000023CC 0242 001E                  		andi.w	#$1E,d2
000023D0 6600                       		bne.s	loc_2054
000023D2 5440                       		addq.w	#2,d0
000023D4                            
000023D4                            loc_2054:
000023D4 0C40 0064                  		cmpi.w	#$64,d0
000023D8 6D00                       		blt.s	loc_2062
000023DA 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
000023E0 70F4                       		moveq	#-$C,d0
000023E2                            
000023E2                            loc_2062:
000023E2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023E6 7001                       		moveq	#1,d0
000023E8 4E75                       		rts	
000023EA                            ; ===========================================================================
000023EA                            
000023EA                            loc_206A:
000023EA 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023EE 6A00                       		bpl.s	loc_20BC
000023F0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023F6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023FA 0640 000C                  		addi.w	#$C,d0
000023FE 0C40 0030                  		cmpi.w	#$30,d0
00002402 6500                       		blo.s	loc_2088
00002404 7000                       		moveq	#0,d0
00002406 4E75                       		rts	
00002408                            ; ===========================================================================
00002408                            
00002408                            loc_2088:
00002408 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000240C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002412 41F0 0000                  		lea	(a0,d0.w),a0
00002416 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
0000241A 22D8                       		move.l	(a0)+,(a1)+
0000241C 22D8                       		move.l	(a0)+,(a1)+
0000241E 3298                       		move.w	(a0)+,(a1)
00002420 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002424 7000                       		moveq	#0,d0
00002426 722C                       		moveq	#$2C,d1
00002428                            
00002428                            loc_20A8:
00002428 3400                       		move.w	d0,d2
0000242A 0242 001E                  		andi.w	#$1E,d2
0000242E 6600                       		bne.s	loc_20B2
00002430 5440                       		addq.w	#2,d0
00002432                            
00002432                            loc_20B2:
00002432 3390 0000                  		move.w	(a0),(a1,d0.w)
00002436 5440                       		addq.w	#2,d0
00002438 51C9 FFEE                  		dbf	d1,loc_20A8
0000243C                            
0000243C                            loc_20BC:
0000243C 7001                       		moveq	#1,d0
0000243E 4E75                       		rts	
00002440                            ; End of function PalCycle_Sega
00002440                            
00002440                            ; ===========================================================================
00002440                            
00002440                            Pal_Sega1:	incbin	"palette\Sega1.bin"
0000244C                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load palettes
0000247C                            
0000247C                            ; input:
0000247C                            ;	d0 = index number for palette
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load pallets
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            PalLoad1:
0000247C 1238 FE11                  		move.b ($FFFFFE11),d1
00002480 43F9 0000 0000             		lea (PalPointers).l,a1
00002486 0C01 0000                  		cmp.b #0,d1
0000248A 6700 0000                  		beq.w PalLoad1_Continue
0000248E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002494 0C01 0001                  		cmp.b #1,d1
00002498 6700 0000                  		beq.w PalLoad1_Continue
0000249C 43F9 0000 0000             		lea (PalPointers3).l,a1
000024A2                            
000024A2                            PalLoad1_Continue:
000024A2 E748                       		lsl.w #3,d0
000024A4 D2C0                       		adda.w d0,a1
000024A6 2459                       		movea.l (a1)+,a2
000024A8 3659                       		movea.w (a1)+,a3
000024AA D6FC 0080                  		adda.w #$80,a3
000024AE 3E19                       		move.w (a1)+,d7
000024B0                            
000024B0                            loc_2110:
000024B0 26DA                       		move.l (a2)+,(a3)+
000024B2 51CF FFFC                  		dbf d7,loc_2110
000024B6 4E75                       		rts
000024B8                             ; End of function PalLoad1
000024B8                            
000024B8                            
000024B8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024B8                            
000024B8                            PalLoad2:
000024B8 1238 FE11                  		move.b ($FFFFFE11),d1
000024BC 43F9 0000 0000             		lea (PalPointers).l,a1
000024C2 0C01 0000                  		cmp.b #0,d1
000024C6 6700 0000                  		beq.w PalLoad2_Continue
000024CA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024D0 0C01 0001                  		cmp.b #1,d1
000024D4 6700 0000                  		beq.w PalLoad2_Continue
000024D8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024DE                            
000024DE                            
000024DE                            PalLoad2_Continue:
000024DE E748                       		lsl.w #3,d0
000024E0 D2C0                       		adda.w d0,a1
000024E2 2459                       		movea.l (a1)+,a2
000024E4 3659                       		movea.w (a1)+,a3
000024E6 3E19                       		move.w (a1)+,d7
000024E8                            
000024E8                            loc_2128:
000024E8 26DA                       		move.l (a2)+,(a3)+
000024EA 51CF FFFC                  		dbf d7,loc_2128
000024EE 4E75                       		rts
000024F0                            ; End of function PalLoad2
000024F0                            
000024F0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024F0                            
000024F0                            
000024F0                            PalLoad_Loop: ;Quick load - TIS
000024F0                                    
000024F0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024F2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024F6 4E75                               rts
000024F8                            
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            ; Underwater pallet loading subroutine
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            
000024F8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024F8                            
000024F8                            PalLoad3_Water:
000024F8 1238 FE11                  		move.b ($FFFFFE11),d1
000024FC 43F9 0000 0000             		lea (PalPointers).l,a1
00002502 0C01 0000                  		cmp.b #0,d1
00002506 6700 0000                  		beq.w PalLoad3_Continue
0000250A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002510 0C01 0001                  		cmp.b #1,d1
00002514 6700 0000                  		beq.w PalLoad3_Continue
00002518 43F9 0000 0000             		lea (PalPointers3).l,a1
0000251E                            
0000251E                            PalLoad3_Continue:
0000251E E748                       		lsl.w #3,d0
00002520 D2C0                       		adda.w d0,a1
00002522 2459                       		movea.l (a1)+,a2
00002524 3659                       		movea.w (a1)+,a3
00002526 96FC 0080                  		suba.w #$80,a3
0000252A 3E19                       		move.w (a1)+,d7
0000252C                            
0000252C                            loc_2144:
0000252C 26DA                       		move.l (a2)+,(a3)+
0000252E 51CF FFFC                  		dbf d7,loc_2144
00002532 4E75                       		rts
00002534                            ; End of function PalLoad3_Water
00002534                            
00002534                            
00002534                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002534                            
00002534                            
00002534                            PalLoad4_Water:
00002534 1238 FE11                  		move.b ($FFFFFE11),d1
00002538 43F9 0000 0000             		lea (PalPointers).l,a1
0000253E 0C01 0000                  		cmp.b #0,d1
00002542 6700 0000                  		beq.w PalLoad4_Continue
00002546 43F9 0000 0000             		lea (PalPointers2).l,a1
0000254C 0C01 0001                  		cmp.b #1,d1
00002550 6700 0000                  		beq.w PalLoad4_Continue
00002554 43F9 0000 0000             		lea (PalPointers3).l,a1
0000255A                            
0000255A                            PalLoad4_Continue:
0000255A E748                       		lsl.w #3,d0
0000255C D2C0                       		adda.w d0,a1
0000255E 2459                       		movea.l (a1)+,a2
00002560 3659                       		movea.w (a1)+,a3
00002562 96FC 0100                  		suba.w #$100,a3
00002566 3E19                       		move.w (a1)+,d7
00002568                            loc_2160:
00002568 26DA                       		move.l (a2)+,(a3)+
0000256A 51CF FFFC                  		dbf d7,loc_2160
0000256E 4E75                       		rts
00002570                             ; End of function PalLoad4_Water
00002570                            
00002570                            ; ===========================================================================
00002570                            
00002570                            		include	"_inc\Palette Pointers.asm"
00002570                            ; ---------------------------------------------------------------------------
00002570                            ; Palette pointers
00002570                            ; ---------------------------------------------------------------------------
00002570                            
00002570                            palp:	macro paladdress,ramaddress,colors
00002570                            	dc.l paladdress
00002570                            	dc.w ramaddress, (colors>>1)-1
00002570                            	endm
00002570                            
00002570                            PalPointers:
00002570                            
00002570                            ; palette address, RAM address, colors
00002570                            
00002570 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002578 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002580 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002588 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002590                            Pal_Levels:
00002590 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002598 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000025A0 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000025A8 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000025B0 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000025B8 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025C0 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025C8 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000025D0 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000025D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000025E0 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000025E8 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025F8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002600 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002608 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002610 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002618 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002620 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
00002628 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002630 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
00002638 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002640 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
00002648 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002650 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002658 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002660 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002668 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002670 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002678 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002680 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002688 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002690 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002698 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000026A0 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000026A8 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000026B0 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000026B8 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000026C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000026C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000026D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
000026D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
000026E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
000026E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
000026F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
000026F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002700 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002708 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002710                            			even
00002710                            
00002710                            PalPointers2:
00002710                            
00002710                            ; palette address, RAM address, colors
00002710                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002710 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002718 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002720 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002728 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002730                            Pal_Levels_2:
00002730 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002738 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
00002740 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002748 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
00002750 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002758 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002760 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002768 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002770 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002778 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002780 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002788 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002790 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002798 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000027A0 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000027A8 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
000027B0 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000027B8 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000027E0 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000027E8 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000027F0 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000027F8 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002800 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002808 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002828 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002830 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002838 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002840 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002848 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002850 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002858 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002870 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002878 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002880 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002888 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002890 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002898 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
000028A0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
000028A8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
000028B0                            			even
000028B0                            			
000028B0                            PalPointers3:
000028B0                            			
000028B0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000028B0 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000028B8 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000028C0 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000028C8 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000028D0                            Pal_Levels_3:
000028D0 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
000028D8 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000028E0 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000028E8 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000028F0 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000028F8 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002900 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002908 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002910 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002918 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002920 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002928 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002930 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002938 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002940 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002948 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002950 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002958 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002960 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002968 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002970 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002978 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002980 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002988 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002990 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002998 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
000029A0 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000029A8 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000029B0 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000029B8 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000029C0 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000029C8 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000029D0 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000029D8 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000029E0 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000029E8 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000029F0 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000029F8 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002A00 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002A08 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002A10 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A18 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A20 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A28 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A30 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A38 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002A40 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002A48 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002A50                            			even
00002A50                            
00002A50                            
00002A50 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002A50 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002A50 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002A50 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002A50 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002A50 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002A50 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002A50 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002A50 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002A50 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002A50 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002A50 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002A50 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002A50 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002A50 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002A50 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002A50 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002A50 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002A50 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002A50 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002A50 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002A50 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002A50 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002A50 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002A50 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002A50 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002A50 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002A50 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002A50 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002A50 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002A50 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002A50 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002A50 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002A50 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002A50 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002A50 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002A50 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002A50 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002A50 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002A50 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002A50 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002A50 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002A50 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002A50 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002A50 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002A50 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002A50 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002A50 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002A50 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002A50 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002A50 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002A50 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002A50 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002A50 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002A50 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002A50 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002A50 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002A50 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002A50 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002A50 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002A50 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002A50 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002A50 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002A50 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002A50 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002A50 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002A50 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002A50                            		
00002A50                            		;include	"_inc\Palette Pointers2.asm"
00002A50                            		
00002A50                            		;include	"_inc\Palette Pointers3.asm"
00002A50                            		
00002A50                            
00002A50                            ; ---------------------------------------------------------------------------
00002A50                            ; Palette data
00002A50                            ; ---------------------------------------------------------------------------
00002A50                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002AD0                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002B50                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002BD0                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002BF0                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002C50                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002CB0                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002D10                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002D70                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002DD0                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002E30                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002EB0                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002F30                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002FB0                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003010                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00003070                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
000030D0                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003130                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003190                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
000031F0                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
00003250                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
000032B0                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003310                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
00003370                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
000033D0                            Pal_Special:	incbin	"palette\Special Stage.bin"
00003450                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
000034B0                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003530                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
00003550                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
00003570                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003590                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003610                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
00003650                            Pal_Ending:	incbin	"palette\Ending.bin"
000036D0                            Pal_Options:	incbin	"palette\Options.bin"
00003750                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
00003770                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003790                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
000037B0                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
000037D0                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
000037F0                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003810                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003830                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
00003850                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
00003870                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
00003890                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000038B0                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
000038D0                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
000038F0                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003910                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003930                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003950                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
00003970                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003990                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000039B0                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
000039D0                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
000039F0                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003A10                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003A30                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003A50                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003A70                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003A90                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003AB0                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003AD0                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003AF0                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003B10                            ; ---------------------------------------------------------------------------
00003B10                            ; Subroutine to	wait for VBlank routines to complete
00003B10                            ; ---------------------------------------------------------------------------
00003B10                            
00003B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B10                            
00003B10                            
00003B10                            WaitForVBla:
00003B10 46FC 2300                  		enable_ints
00003B14                            
00003B14                            	@wait:
00003B14 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003B18 66FA                       		bne.s	@wait		; if not, branch
00003B1A 4E75                       		rts	
00003B1C                            ; End of function WaitForVBla
00003B1C                            
00003B1C                            		include	"_incObj\sub RandomNumber.asm"
00003B1C                            ; ---------------------------------------------------------------------------
00003B1C                            ; Subroutine to	generate a pseudo-random number	in d0
00003B1C                            ; ---------------------------------------------------------------------------
00003B1C                            
00003B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B1C                            
00003B1C                            
00003B1C                            RandomNumber:
00003B1C 2238 F636                  		move.l	(v_random).w,d1
00003B20 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003B22 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003B28                            
00003B28                            	@scramble:
00003B28 2001                       		move.l	d1,d0
00003B2A E581                       		asl.l	#2,d1
00003B2C D280                       		add.l	d0,d1
00003B2E E781                       		asl.l	#3,d1
00003B30 D280                       		add.l	d0,d1
00003B32 3001                       		move.w	d1,d0
00003B34 4841                       		swap	d1
00003B36 D041                       		add.w	d1,d0
00003B38 3200                       		move.w	d0,d1
00003B3A 4841                       		swap	d1
00003B3C 21C1 F636                  		move.l	d1,(v_random).w
00003B40 4E75                       		rts	
00003B40 4E75                       		rts	
00003B42                            		include	"_incObj\sub CalcSine.asm"
00003B42                            ; ---------------------------------------------------------------------------
00003B42                            ; Subroutine calculate a sine
00003B42                            
00003B42                            ; input:
00003B42                            ;	d0 = angle
00003B42                            
00003B42                            ; output:
00003B42                            ;	d0 = sine
00003B42                            ;	d1 = cosine
00003B42                            ; ---------------------------------------------------------------------------
00003B42                            
00003B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B42                            
00003B42                            
00003B42                            CalcSine:
00003B42 0240 00FF                          andi.w  #$FF,d0
00003B46 5040                               addq.w  #8,d0
00003B48 D040                               add.w   d0,d0
00003B4A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003B4E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003B52 4E75                               rts
00003B54                            ; End of function CalcSine
00003B54                            
00003B54                            ; ===========================================================================
00003B54                            
00003B54                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003DD4                            
00003DD4                            ; ===========================================================================
00003DD4                            ; ===========================================================================
00003DD4                            		include	"_incObj\sub CalcAngle.asm"
00003DD4                            ; ---------------------------------------------------------------------------
00003DD4                            ; Subroutine calculate an angle
00003DD4                            
00003DD4                            ; input:
00003DD4                            ;	d1 = x-axis distance
00003DD4                            ;	d2 = y-axis distance
00003DD4                            
00003DD4                            ; output:
00003DD4                            ;	d0 = angle
00003DD4                            ; ---------------------------------------------------------------------------
00003DD4                            
00003DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003DD4                            
00003DD4                            
00003DD4                            CalcAngle:
00003DD4 48E7 1800                  		movem.l	d3-d4,-(sp)
00003DD8 7600                       		moveq	#0,d3
00003DDA 7800                       		moveq	#0,d4
00003DDC 3601                       		move.w	d1,d3
00003DDE 3802                       		move.w	d2,d4
00003DE0 8843                       		or.w	d3,d4
00003DE2 6700                       		beq.s	loc_2D04
00003DE4 3802                       		move.w	d2,d4
00003DE6 4A43                       		tst.w	d3
00003DE8 6A00 0000                  		bpl.w	loc_2CC2
00003DEC 4443                       		neg.w	d3
00003DEE                            
00003DEE                            loc_2CC2:
00003DEE 4A44                       		tst.w	d4
00003DF0 6A00 0000                  		bpl.w	loc_2CCA
00003DF4 4444                       		neg.w	d4
00003DF6                            
00003DF6                            loc_2CCA:
00003DF6 B843                       		cmp.w	d3,d4
00003DF8 6400 0000                  		bcc.w	loc_2CDC
00003DFC E18C                       		lsl.l	#8,d4
00003DFE 88C3                       		divu.w	d3,d4
00003E00 7000                       		moveq	#0,d0
00003E02 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003E06 6000                       		bra.s	loc_2CE6
00003E08                            ; ===========================================================================
00003E08                            
00003E08                            loc_2CDC:
00003E08 E18B                       		lsl.l	#8,d3
00003E0A 86C4                       		divu.w	d4,d3
00003E0C 7040                       		moveq	#$40,d0
00003E0E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003E12                            
00003E12                            loc_2CE6:
00003E12 4A41                       		tst.w	d1
00003E14 6A00 0000                  		bpl.w	loc_2CF2
00003E18 4440                       		neg.w	d0
00003E1A 0640 0080                  		addi.w	#$80,d0
00003E1E                            
00003E1E                            loc_2CF2:
00003E1E 4A42                       		tst.w	d2
00003E20 6A00 0000                  		bpl.w	loc_2CFE
00003E24 4440                       		neg.w	d0
00003E26 0640 0100                  		addi.w	#$100,d0
00003E2A                            
00003E2A                            loc_2CFE:
00003E2A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E2E 4E75                       		rts	
00003E30                            ; ===========================================================================
00003E30                            
00003E30                            loc_2D04:
00003E30 303C 0040                  		move.w	#$40,d0
00003E34 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E38 4E75                       		rts	
00003E3A                            ; End of function CalcAngle
00003E3A                            
00003E3A                            ; ===========================================================================
00003E3A                            
00003E3A                            Angle_Data:	incbin	"misc\angles.bin"
00003F3C                            
00003F3C                            ; ===========================================================================
00003F3C                            ; ===========================================================================
00003F3C                            
00003F3C                            ; ---------------------------------------------------------------------------
00003F3C                            ; Sega screen
00003F3C                            ; ---------------------------------------------------------------------------
00003F3C                            
00003F3C                            GM_Sega:
00003F44 6100 D852                  		bsr.w	ClearPLC
00003F48 6100 E288                  		bsr.w	PaletteFadeOut
00003F4C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F52 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003F56 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F5A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F5E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003F62 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003F66 4238 F64E                  		clr.b	(f_wtr_state).w
00003F6A 46FC 2700                  		disable_ints
00003F6E 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F72 0200 00BF                  		andi.b	#$BF,d0
00003F76 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F7C 6100 D252                  		bsr.w	ClearScreen
00003F8A 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003F90 6100 D3BC                  		bsr.w	NemDec
00003F94 43F9 00FF 0000             		lea	($FF0000).l,a1
00003F9A 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003FA0 303C 0000                  		move.w	#0,d0
00003FA4 6100 D932                  		bsr.w	EniDec
00003FA8                            
00003FA8 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003FBC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003FD0                            
00003FD0 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003FD4 6B00                       			bmi.s   @loadpal
00003FD6 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003FEA                            
00003FEA                            	@loadpal:
00003FEA 7000                       		moveq	#palid_SegaBG,d0
00003FEC 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00003FF0 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003FF6 7E3F                               moveq    #$3F,d7
00003FF8                             
00003FF8                                .loop:
00003FF8 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003FFC 51CF FFFA                          dbf        d7,.loop
00004000 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
00004004 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
0000400A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004010 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00004016 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
0000401C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004020 0000 0040                  		ori.b	#$40,d0
00004024 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000402A                            
0000402A                            Sega_WaitPal:
0000402A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004030 6100 FADE                  		bsr.w	WaitForVBla
00004034 6100 E354                  		bsr.w	PalCycle_Sega
00004038 66F0                       		bne.s	Sega_WaitPal
0000403A                            
00004042 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00004048 6100 FAC6                  		bsr.w	WaitForVBla
0000404C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004052                            
00004052                            Sega_WaitEnd:
00004052 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004058 6100 FAB6                  		bsr.w	WaitForVBla
0000405C 4A78 F614                  		tst.w	(v_demolength).w
00004060 6700                       		beq.s	Sega_GotoTitle
00004062 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004068 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000406A                            
0000406A                            Sega_GotoTitle:
0000406A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004070 4E75                       		rts	
00004072                            ; ===========================================================================
00004072                            
00004072                            ; ---------------------------------------------------------------------------
00004072                            ; Title	screen
00004072                            ; ---------------------------------------------------------------------------
00004072                            
00004072                            GM_Title:
0000407A 6100 D71C                  		bsr.w	ClearPLC
0000407E 6100 E152                  		bsr.w	PaletteFadeOut
00004082 46FC 2700                  		disable_ints
00004086 6100 D1CE                  		bsr.w	SoundDriverLoad
0000408A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004090 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00004094 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004098 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
0000409C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000040A0 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000040A4 3CBC 8B03                  		move.w	#$8B03,(a6)
000040A8 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
000040AC 4238 F64E                  		clr.b	(f_wtr_state).w
000040B0 6100 D11E                  		bsr.w	ClearScreen
000040B4                            		;jsr		SHC2022 
000040B4                            
000040B4 43F8 D000                  		lea	(v_objspace).w,a1
000040B8 7000                       		moveq	#0,d0
000040BA 323C 07FF                  		move.w	#$7FF,d1
000040BE                            
000040BE                            	Tit_ClrObj1:
000040BE 22C0                       		move.l	d0,(a1)+
000040C0 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
000040C4                            
000040CE 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000040D4 6100 D278                  		bsr.w	NemDec
000040E2 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000040E8 6100 D264                  		bsr.w	NemDec
000040EC 43F9 00FF 0000             		lea	($FF0000).l,a1
000040F2 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000040F8 303C 0000                  		move.w	#0,d0
000040FC 6100 D7DA                  		bsr.w	EniDec
00004100                            
00004100 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
00004114                            
00004114 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00004118 7000                       		moveq	#cBlack,d0
0000411A 323C 001F                  		move.w	#$1F,d1
0000411E                            
0000411E                            	Tit_ClrPal:
0000411E 22C0                       		move.l	d0,(a1)+
00004120 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00004124                            
00004124 4EB9 0000 0000             		jsr		LoadPlayerPal
0000412A 6100 E350                  		bsr.w	PalLoad1
0000412E 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
00004134 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000413A 4EB9 0000 0000             		jsr	(BuildSprites).l
00004140 6100 DFEA                  		bsr.w	PaletteFadeIn
00004144 46FC 2700                  		disable_ints
00004152 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004158 6100 D1F4                  		bsr.w	NemDec
00004166 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000416C 6100 D1E0                  		bsr.w	NemDec
0000417A 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00004180 6100 D1CC                  		bsr.w 	NemDec
00004184 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004192 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
00004198 323C 028F                  		move.w	#$28F,d1
0000419C                            
0000419C                            	Tit_LoadText:
0000419C 3C9D                       		move.w	(a5)+,(a6)
0000419E 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000041A2                            
000041A2 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000041A8 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000041AE 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000041B4 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000041BA 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000041C0 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000041C6 6100 0000                  		bsr.w	LevelSizeLoad
000041CA 6100 0000                  		bsr.w	DeformLayers
000041CE 43F8 B000                  		lea	(v_16x16).w,a1
000041D2 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000041D8 303C 0000                  		move.w	#0,d0
000041DC 6100 D6FA                  		bsr.w	EniDec
000041E0 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000041E6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000041EC 6100 D868                  		bsr.w	KosDec
000041F0 6100 0000                  		bsr.w	LevelLayoutLoad
000041F4 6100 DFDC                  		bsr.w	PaletteFadeOut
000041F8 46FC 2700                  		disable_ints
000041FC 6100 CFD2                  		bsr.w	ClearScreen
00004200 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004206 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000420C 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00004210 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00004214 343C 6000                  		move.w	#$6000,d2
00004218 6100 0000                  		bsr.w	DrawChunks
0000421C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004222 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004228 303C 0000                  		move.w	#0,d0
0000422C 6100 D6AA                  		bsr.w	EniDec
00004230                            
00004230 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004244                            
0000424E 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004254 6100 D0F8                  		bsr.w	NemDec
00004258 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000425A 6100 E220                  		bsr.w	PalLoad1
00004266 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
0000426C 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004272 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004276 7000                       		moveq	#0,d0
00004278 323C 0007                  		move.w	#7,d1
0000427C                            
0000427C                            	Tit_ClrObj2:
0000427C 22C0                       		move.l	d0,(a1)+
0000427E 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004282                            
00004282 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004288 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
0000428E 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004292                            
00004292 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004296 6A00                       			bpl.s   @isjap		; if yes, branch
00004298                            
00004298 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
0000429E 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000042A4                            	@isjap:
000042A4 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000042AA 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000042B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000042B6 6100 0000                  		bsr.w	DeformLayers
000042BA 4EB9 0000 0000             		jsr	(BuildSprites).l
000042C0 7000                       		moveq	#plcid_Main,d0
000042C2 6100 D4A8                  		bsr.w	NewPLC
000042C6 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000042CC 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000042D2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000042D6 0000 0040                  		ori.b	#$40,d0
000042DA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000042E0 6100 DE4A                  		bsr.w	PaletteFadeIn
000042E4                            
000042E4                            Tit_MainLoop:
000042E4 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042EA 6100 F824                  		bsr.w	WaitForVBla
000042EE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000042F4 6100 0000                  		bsr.w	DeformLayers
000042F8 4EB9 0000 0000             		jsr	(BuildSprites).l
000042FE 6100 DA3E                  		bsr.w	PCycle_Title
00004302 6100 D4A2                  		bsr.w	RunPLC
00004306 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000430A 5440                       		addq.w	#2,d0
0000430C 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00004310 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
00004314 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004316                            
00004316 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
0000431C 4E75                       		rts	
0000431E                            ; ===========================================================================
0000431E                            
0000431E                            Tit_ChkRegion:
0000431E 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004322 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004324                            
00004324 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000432A 6000                       		bra.s	Tit_EnterCheat
0000432C                            
0000432C                            	Tit_RegionJap:
0000432C 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004332                            
00004332                            Tit_EnterCheat:
00004332 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004336 D0C0                       		adda.w	d0,a0
00004338 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
0000433C 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004340 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004342 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004344 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004348 4A00                       		tst.b	d0
0000434A 6600                       		bne.s	Tit_CountC
0000434C 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004350 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004354 E249                       		lsr.w	#1,d1
00004356 0241 0003                  		andi.w	#3,d1
0000435A 6700                       		beq.s	Tit_PlayRing
0000435C 4A38 FFF8                  		tst.b	(v_megadrive).w
00004360 6A00                       		bpl.s	Tit_PlayRing
00004362 7201                       		moveq	#1,d1
00004364 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004368                            
00004368                            	Tit_PlayRing:
00004368 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004376 6000                       		bra.s	Tit_CountC
00004378                            ; ===========================================================================
00004378                            
00004378                            Tit_ResetCheat:
00004378 4A00                       		tst.b	d0
0000437A 6700                       		beq.s	Tit_CountC
0000437C 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004382 6700                       		beq.s	Tit_CountC
00004384 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000438A                            
0000438A                            Tit_CountC:
0000438A 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000438E 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004392 6700                       		beq.s	loc_3230	; if not, branch
00004394 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
00004398                            		
00004398                            loc_3230:
00004398 4A78 F614                  		tst.w	(v_demolength).w
0000439C 6700 0000                  		beq.w	GotoDemo
000043A0 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000043A6 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000043AA                            
000043AA                            Tit_ChkLevSel:
000043AA 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000043AE 6700 0000                  		beq.w	@cont	; if not, play level
000043B2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000043B8 6700 0000                  		beq.w	@cont	; if not, play level
000043BC 6000 0000                  		bra.w	Tit_LevelSelect
000043C0                            
000043C0                            	@cont:		
000043C0 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000043C6 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000043CA 7400                       		moveq	#0,d2
000043CC 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000043D0 D442                       		add.w	d2,d2            ; multiply by 2
000043D2 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000043D6 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000043DA                            
000043DA                            ; ===========================================================================
000043DA                            Tit_Menu_Choice:
000043DA 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000043DC 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000043DE                            ; ===========================================================================
000043DE                            
000043DE                            Menu_Options:
000043DE 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000043E4 4E75                       		rts
000043E6                            
000043E6                            Tit_LevelSelect:	
000043E6 7002                       		moveq	#palid_LevelSel,d0
000043E8 6100 E0CE                  		bsr.w	PalLoad2	; load level select palette
000043EC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000043F0 7000                       		moveq	#0,d0
000043F2 323C 00DF                  		move.w	#$DF,d1
000043F6                            
000043F6                            	Tit_ClrScroll1:
000043F6 22C0                       		move.l	d0,(a1)+
000043F8 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000043FC                            
000043FC 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004400 46FC 2700                  		disable_ints
00004404 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004414 323C 03FF                  		move.w	#$3FF,d1
00004418                            
00004418                            	Tit_ClrScroll2:
00004418 2C80                       		move.l	d0,(a6)
0000441A 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000441E                            
0000441E 6100 0000                  		bsr.w	LevSelTextLoad
00004422                            
00004422                            ; ---------------------------------------------------------------------------
00004422                            ; Level	Select
00004422                            ; ---------------------------------------------------------------------------
00004422                            
00004422                            LevelSelect:
00004422 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004428 6100 F6E6                  		bsr.w	WaitForVBla
0000442C 6100 0000                  		bsr.w	LevSelControls
00004430 6100 D374                  		bsr.w	RunPLC
00004434 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004438 66E8                       		bne.s	LevelSelect
0000443A 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
00004440 67E0                       		beq.s	LevelSelect	; if not, branch
00004442 3038 FF82                  		move.w	(v_levselitem).w,d0
00004446 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000444A 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000444C 3038 FF84                  		move.w	(v_levselsound).w,d0
00004450 0640 0080                  		addi.w	#$80,d0
00004454                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004454                            		;beq.s	LevSel_Ending	; if yes, branch
00004454                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004454                            		;beq.s	LevSel_Credits	; if yes, branch
00004454                            
00004454                            LevSel_PlaySnd:
00004454 6100 CE4A                  		bsr.w	PlaySound_Special
00004458 60C8                       		bra.s	LevelSelect
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            LevSel_Ending:
0000445A 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004460 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
00004466 4E75                       		rts	
00004468                            ; ===========================================================================
00004468                            
00004468                            LevSel_Credits:
00004468 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
00004476 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
0000447C 4E75                       		rts	
0000447E                            ; ===========================================================================
0000447E                            
0000447E                            LevSel_Level_SS:
0000447E D040                       		add.w	d0,d0
00004480 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004484 6B00 FF9C                  		bmi.w	LevelSelect
00004488 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
0000448C 6600                       		bne.s	LevSel_Level	; if not, branch
0000448E 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004494 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00004498 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000449E 7000                       		moveq	#0,d0
000044A0 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044A4 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044A8 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044AC 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044B4 4E75                       		rts	
000044B6                            ; ===========================================================================
000044B6                            
000044B6                            LevSel_Level:
000044B6 0240 3FFF                  		andi.w	#$3FFF,d0
000044BA 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000044BE                            
000044BE                            PlayLevel:
000044BE 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000044C4 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044CA 7000                       		moveq	#0,d0
000044CC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044D0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044D4 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044D8 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000044DC 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000044E0 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000044E4 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000044E8 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000044EE 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044FE 4E75                       		rts	
00004500                            ; ===========================================================================
00004500                            ; ---------------------------------------------------------------------------
00004500                            ; Level	select - level pointers
00004500                            ; ---------------------------------------------------------------------------
00004500                            		; correct level order
00004500 0000                       		dc.b id_GHZ, 0
00004502 0001                       		dc.b id_GHZ, 1
00004504 0002                       		dc.b id_GHZ, 2
00004506 0200                       		dc.b id_MZ, 0
00004508 0201                       		dc.b id_MZ, 1
0000450A 0202                       		dc.b id_MZ, 2
0000450C 0400                       		dc.b id_SYZ, 0
0000450E 0401                       		dc.b id_SYZ, 1
00004510 0402                       		dc.b id_SYZ, 2
00004512 0100                       		dc.b id_LZ, 0
00004514 0101                       		dc.b id_LZ, 1
00004516 0102                       		dc.b id_LZ, 2
00004518 0300                       		dc.b id_SLZ, 0
0000451A 0301                       		dc.b id_SLZ, 1
0000451C 0302                       		dc.b id_SLZ, 2
0000451E 0500                       		dc.b id_SBZ, 0
00004520 0501                       		dc.b id_SBZ, 1
00004522 0103                       		dc.b id_LZ, 3
00004524 0502                       		dc.b id_SBZ, 2
00004526 0700                       		dc.b id_SS, 0		; Special Stage
00004528 8000                       		dc.w $8000		; Sound Test
0000452A                            		even
0000452A                            ; ---------------------------------------------------------------------------
0000452A                            ; Level	select codes
0000452A                            ; ---------------------------------------------------------------------------
0000452A 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004532                            		even
00004532                            
00004532 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
00004538                            		even
00004538                            ; ===========================================================================
00004538                            
00004538                            ; ---------------------------------------------------------------------------
00004538                            ; Demo mode
00004538                            ; ---------------------------------------------------------------------------
00004538                            
00004538                            GotoDemo:
00004538 31FC 001E F614             		move.w	#$1E,(v_demolength).w
0000453E                            
0000453E                            loc_33B6:
0000453E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004544 6100 F5CA                  		bsr.w	WaitForVBla
00004548 6100 0000                  		bsr.w	DeformLayers
0000454C 6100 D7D0                  		bsr.w	PaletteCycle
00004550 6100 D254                  		bsr.w	RunPLC
00004554 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004558 5440                       		addq.w	#2,d0
0000455A 31C0 D008                  		move.w	d0,(v_objspace+obX).w
0000455E 0C40 1C00                  		cmpi.w	#$1C00,d0
00004562 6500                       		blo.s	loc_33E4
00004564 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000456A 4E75                       		rts	
0000456C                            ; ===========================================================================
0000456C                            
0000456C                            loc_33E4:
0000456C 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004572 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
00004576 4A78 F614                  		tst.w	(v_demolength).w
0000457A 6600 FFC2                  		bne.w	loc_33B6
00004586 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
0000458A 0240 0007                  		andi.w	#7,d0
0000458E D040                       		add.w	d0,d0
00004590 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004594 31C0 FE10                  		move.w	d0,(v_zone).w
00004598 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
0000459C 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000045A2 6500                       		blo.s	loc_3422	; if yes, branch
000045A4 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000045AA                            
000045AA                            loc_3422:
000045AA 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000045B0 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000045B6 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000045BA 6600                       		bne.s	Demo_Level	; if not, branch
000045BC 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045C2 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000045C6 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000045CA                            
000045CA                            Demo_Level:
000045CA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045D0 7000                       		moveq	#0,d0
000045D2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045D6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045DA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045DE 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045E6 4E75                       		rts	
000045E8                            ; ===========================================================================
000045E8                            ; ---------------------------------------------------------------------------
000045E8                            ; Levels used in demos
000045E8                            ; ---------------------------------------------------------------------------
000045E8                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000045F0                            		even
000045F0                            
000045F0                            ; ---------------------------------------------------------------------------
000045F0                            ; Subroutine to	change what you're selecting in the level select
000045F0                            ; ---------------------------------------------------------------------------
000045F0                            
000045F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F0                            
000045F0                            
000045F0                            LevSelControls:
000045F0 1238 F605                  		move.b	(v_jpadpress1).w,d1
000045F4 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000045F8 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000045FA 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000045FE 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004600                            
00004600                            LevSel_UpDown:
00004600 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004606 1238 F604                  		move.b	(v_jpadhold1).w,d1
0000460A 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
0000460E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004610 3038 FF82                  		move.w	(v_levselitem).w,d0
00004614 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00004618 6700                       		beq.s	LevSel_Down	; if not, branch
0000461A 5340                       		subq.w	#1,d0		; move up 1 selection
0000461C 6400                       		bhs.s	LevSel_Down
0000461E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004620                            
00004620                            LevSel_Down:
00004620 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004624 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004626 5240                       		addq.w	#1,d0		; move down 1 selection
00004628 0C40 0015                  		cmpi.w	#$15,d0
0000462C 6500                       		blo.s	LevSel_Refresh
0000462E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004630                            
00004630                            LevSel_Refresh:
00004630 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004634 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004638 4E75                       		rts	
0000463A                            ; ===========================================================================
0000463A                            
0000463A                            LevSel_SndTest:
0000463A 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004640 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004642 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004646 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
0000464A 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000464C 3038 FF84                  		move.w	(v_levselsound).w,d0
00004650 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004654 6700                       		beq.s	LevSel_Right	; if not, branch
00004656 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00004658 6400                       		bhs.s	LevSel_Right
0000465A 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
0000465C                            
0000465C                            LevSel_Right:
0000465C 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004660 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004662 5240                       		addq.w	#1,d0		; add 1	to sound test
00004664 0C40 0056                  		cmpi.w	#$56,d0
00004668 6500                       		blo.s	LevSel_Refresh2
0000466A 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
0000466C                            
0000466C                            LevSel_Refresh2:
0000466C 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004670 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004674                            
00004674                            LevSel_NoMove:
00004674 4E75                       		rts	
00004676                            ; End of function LevSelControls
00004676                            
00004676                            ; ---------------------------------------------------------------------------
00004676                            ; Subroutine to load level select text
00004676                            ; ---------------------------------------------------------------------------
00004676                            
00004676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004676                            
00004676                            
00004676                            LevSelTextLoad:
00004676                            
00004676 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
00004676                            					; $E210 is a VRAM address
00004676                            
00004676 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000467C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004682 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00004688 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
0000468C 7214                       		moveq	#$14,d1		; number of lines of text
0000468E                            
0000468E                            	LevSel_DrawAll:
0000468E 2D44 0004                  		move.l	d4,4(a6)
00004692 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00004696 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
0000469C 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000046A0                            
000046A0 7000                       		moveq	#0,d0
000046A2 3038 FF82                  		move.w	(v_levselitem).w,d0
000046A6 3200                       		move.w	d0,d1
000046A8 283C 6210 0003             		move.l	#textpos,d4
000046AE EF48                       		lsl.w	#7,d0
000046B0 4840                       		swap	d0
000046B2 D880                       		add.l	d0,d4
000046B4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000046BA E749                       		lsl.w	#3,d1
000046BC 3001                       		move.w	d1,d0
000046BE D241                       		add.w	d1,d1
000046C0 D240                       		add.w	d0,d1
000046C2 D2C1                       		adda.w	d1,a1
000046C4 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000046C8 2D44 0004                  		move.l	d4,4(a6)
000046CC 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000046D0 363C E680                  		move.w	#$E680,d3
000046D4 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000046DA 6600                       		bne.s	LevSel_DrawSnd
000046DC 363C C680                  		move.w	#$C680,d3
000046E0                            
000046E0                            LevSel_DrawSnd:
000046EA 3038 FF84                  		move.w	(v_levselsound).w,d0
000046EE 0640 0080                  		addi.w	#$80,d0
000046F2 1400                       		move.b	d0,d2
000046F4 E808                       		lsr.b	#4,d0
000046F6 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000046FA 1002                       		move.b	d2,d0
000046FC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
00004700 4E75                       		rts	
00004702                            ; End of function LevSelTextLoad
00004702                            
00004702                            
00004702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004702                            
00004702                            
00004702                            LevSel_ChgSnd:
00004702 0240 000F                  		andi.w	#$F,d0
00004706 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
0000470A 6500                       		blo.s	LevSel_Numb	; if not, branch
0000470C 5E00                       		addi.b	#7,d0		; use alpha characters
0000470E                            
0000470E                            	LevSel_Numb:
0000470E D043                       		add.w	d3,d0
00004710 3C80                       		move.w	d0,(a6)
00004712 4E75                       		rts	
00004714                            ; End of function LevSel_ChgSnd
00004714                            
00004714                            
00004714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004714                            
00004714                            
00004714                            LevSel_ChgLine:
00004714 7417                       		moveq	#$17,d2		; number of characters per line
00004716                            
00004716                            	LevSel_LineLoop:
00004716 7000                       		moveq	#0,d0
00004718 1019                       		move.b	(a1)+,d0	; get character
0000471A 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000471C 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004720 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004724 4E75                       		rts	
00004726                            
00004726                            
00004726                            	LevSel_CharOk:
00004726 D043                       		add.w	d3,d0		; combine char with VRAM setting
00004728 3C80                       		move.w	d0,(a6)		; send to VRAM
0000472A 51CA FFEA                  		dbf	d2,LevSel_LineLoop
0000472E 4E75                       		rts	
00004730                            ; End of function LevSel_ChgLine
00004730                            
00004730                            ; ===========================================================================
00004730                            ; ---------------------------------------------------------------------------
00004730                            ; Level	select menu text
00004730                            ; ---------------------------------------------------------------------------
00004730                            		incbin	"misc\Level Select Text (JP1).bin"
00004928                            		even
00004928                            ; ---------------------------------------------------------------------------
00004928                            ; Music	playlist
00004928                            ; ---------------------------------------------------------------------------
00004928                            MusicList:
00004928 00                         			dc.b bgm_GHZ    ; GHZ1
00004929 00                                 	dc.b bgm_LZ    ; GHZ2
0000492A 00                                 	dc.b bgm_Seaside   ; GHZ3
0000492B 00                                 	dc.b bgm_LZ    ; GHZ4
0000492C 00                                 	dc.b bgm_Stop    ; LZ1
0000492D 00                                 	dc.b bgm_Stop   ; LZ2
0000492E 00                                 	dc.b bgm_Stop    ; LZ3
0000492F 00                                 	dc.b bgm_SBZ3    ; LZ4
00004930 00                                 	dc.b bgm_MZ    ; MZ1
00004931 00                                 	dc.b bgm_SBZ    ; MZ2
00004932 00                                 	dc.b bgm_RRZ2   ; MZ3
00004933 00                                 	dc.b bgm_SBZ    ; MZ4
00004934 00                                 	dc.b bgm_LZ    ; SLZ1
00004935 00                                 	dc.b bgm_LZ    ; SLZ2
00004936 00                                 	dc.b bgm_LZ    ; SLZ3
00004937 00                                 	dc.b bgm_LZ    ; SLZ4
00004938 00                                 	dc.b bgm_SYZ    ; SYZ1
00004939 00                                 	dc.b bgm_SLZ    ; SYZ2
0000493A 00                                 	dc.b bgm_SLZ    ; SYZ3
0000493B 00                                 	dc.b bgm_SLZ    ; SYZ4
0000493C 00                                 	dc.b bgm_SBZ    ; SBZ1
0000493D 00                                 	dc.b bgm_SBZ    ; SBZ2
0000493E 00                                 	dc.b bgm_FZ		; SBZ3
0000493F 00                                 	dc.b bgm_SBZ    ; SBZ4
00004940 00                                 	dc.b bgm_GHZ    ; GHZ1
00004941 00                                 	dc.b bgm_GHZ    ; GHZ1
00004942 00                                 	dc.b bgm_GHZ    ; GHZ1
00004943 00                                 	dc.b bgm_GHZ    ; GHZ1
00004944                                    	even
00004944                            ; ===========================================================================
00004944                            
00004944                            ; ---------------------------------------------------------------------------
00004944                            ; Level
00004944                            ; ---------------------------------------------------------------------------
00004944                            
00004944                            GM_Level:
00004944 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
0000494A                            
0000494A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004950 4A78 FFF0                  		tst.w	(f_demo).w
00004954 6B00                       		bmi.s	Level_NoMusicFade
0000495E                            
0000495E                            	Level_NoMusicFade:
0000495E 6100 CE38                  		bsr.w	ClearPLC
00004962 6100 D86E                  		bsr.w	PaletteFadeOut
00004966 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000496A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000496C 46FC 2700                  		disable_ints
0000497A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004980 6100 C9CC                  		bsr.w	NemDec
00004984 46FC 2300                  		enable_ints
00004988 7000                       		moveq	#0,d0
0000498A 1038 FE10                  		move.b	(v_zone).w,d0
0000498E E948                       		lsl.w	#4,d0
00004990 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004996 45F2 0000                  		lea	(a2,d0.w),a2
0000499A 7000                       		moveq	#0,d0
0000499C 1012                       		move.b	(a2),d0
0000499E 6700                       		beq.s	loc_37FC
000049A0 6100 CD98                  		bsr.w	AddPLC		; load level patterns
000049A4                            
000049A4                            loc_37FC:
000049A4 7000                       		moveq	#plcid_Main2,d0
000049A6 6100 CD92                  		bsr.w	AddPLC		; load standard	patterns
000049AA                            
000049AA                            Level_ClrRam:
000049AA 43F8 D000                  		lea	(v_objspace).w,a1
000049AE 7000                       		moveq	#0,d0
000049B0 323C 07FF                  		move.w	#$7FF,d1
000049B4                            
000049B4                            	Level_ClrObjRam:
000049B4 22C0                       		move.l	d0,(a1)+
000049B6 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000049BA                            
000049BA 43F8 F628                  		lea	($FFFFF628).w,a1
000049BE 7000                       		moveq	#0,d0
000049C0 323C 0015                  		move.w	#$15,d1
000049C4                            
000049C4                            	Level_ClrVars1:
000049C4 22C0                       		move.l	d0,(a1)+
000049C6 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000049CA                            
000049CA 43F8 F700                  		lea	(v_screenposx).w,a1
000049CE 7000                       		moveq	#0,d0
000049D0 323C 003F                  		move.w	#$3F,d1
000049D4                            
000049D4                            	Level_ClrVars2:
000049D4 22C0                       		move.l	d0,(a1)+
000049D6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000049DA                            
000049DA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000049DE 7000                       		moveq	#0,d0
000049E0 323C 0047                  		move.w	#$47,d1
000049E4                            
000049E4                            	Level_ClrVars3:
000049E4 22C0                       		move.l	d0,(a1)+
000049E6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000049EA                            
000049EA 46FC 2700                  		disable_ints
000049EE 6100 C7E0                  		bsr.w	ClearScreen
000049F2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000049F8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000049FC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00004A00 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004A04 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004A08 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004A0C 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004A10 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004A14 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004A1A 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004A1E 31FC C800 C8FC             		ResetDMAQueue	
00004A24 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A2A 6600                       		bne.s	Level_LoadPal	; if not, branch
00004A2C                            
00004A2C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004A30 7000                       		moveq	#0,d0
00004A32 1038 FE11                  		move.b	(v_act).w,d0
00004A36 D040                       		add.w	d0,d0
00004A38 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004A3E 3031 0000                  		move.w	(a1,d0.w),d0
00004A42 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004A46 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004A4A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004A4E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004A52 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004A56 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004A5C                            
00004A5C                            Level_LoadPal:
00004A5C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004A62 46FC 2300                  		move	#$2300,sr
00004A66 4EB9 0000 0000             		jsr		LoadPlayerPal
00004A6C 6100 DA4A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004A70 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004A76 6600                       		bne.s	Level_GetBgm	; if not, branch
00004A78 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004A7E 6100 DA78                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004A82 4A38 FE30                  		tst.b	($FFFFFE30).w
00004A86 6700                       		beq.s	Level_GetBgm
00004A88 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004A8E                            
00004A8E                            	Level_GetBgm:
00004A8E 4A78 FFF0                  		tst.w	(f_demo).w
00004A92 6B00                               	bmi.s	Level_SkipTtlCard
00004A94 7000                               	moveq	#0,d0
00004A96 3038 FE10                  		move.w	(v_zone).w,d0
00004A9A E418                       		ror.b	#2,d0
00004A9C EC48                       		lsr.w   #6,d0
00004A9E 43F9 0000 4928                     	lea	(MusicList).l,a1 ; load    music playlist
00004AA4 1031 0000                          	move.b	(a1,d0.w),d0
00004AA8 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004AAC 6100 C7EC                          	bsr.w	PlaySound    ; play music
00004AB0 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004AB6                            
00004AB6                            
00004AB6                            Level_TtlCardLoop:
00004AB6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004ABC 6100 F052                  		bsr.w	WaitForVBla
00004AC0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004AC6 4EB9 0000 0000             		jsr	(BuildSprites).l
00004ACC 6100 CCD8                  		bsr.w	RunPLC
00004AD0 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004AD4 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004AD8 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004ADA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004ADE 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004AE0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004AE6                            
00004AE6                            	Level_SkipTtlCard:
00004AE6 4EB9 0000 0000             		jsr		LoadPlayerPal
00004AEC 6100 D98E                  		bsr.w	PalLoad1	; load Sonic's palette
00004AF0 6100 0000                  		bsr.w	LevelSizeLoad
00004AF4 6100 0000                  		bsr.w	DeformLayers
00004AF8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004AFE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004B02 6100 0000                  		bsr.w	LoadTilesFromStart
00004B06 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004B0C 6100 0000                  		bsr.w	ColIndexLoad
00004B10 6100 0000                  		bsr.w	LZWaterFeatures
00004B14 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004B1A 4A78 FFF0                  		tst.w	(f_demo).w
00004B1E 6B00                       		bmi.s	Level_ChkDebug
00004B20 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004B26                            
00004B26                            Level_ChkDebug:
00004B26 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004B2A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B2C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004B32 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B34 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004B3A                            
00004B3A                            Level_ChkWater:
00004B3A 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004B40 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004B46 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B4C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004B4E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004B54 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004B5A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004B60 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004B66                            
00004B66                            Level_LoadObj:
00004B66 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B72 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B78 7000                       		moveq	#0,d0
00004B7A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004B7E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004B80 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004B84 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004B88 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004B8C                            
00004B8C                            	Level_SkipClr:
00004B8C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004B90 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004B94 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004B98 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004B9C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004BA0 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004BA4 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004BA8 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004BAC 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004BB0 31C0 FE02                  		move.w	d0,(f_restart).w
00004BB4 31C0 FE04                  		move.w	d0,(v_framecount).w
00004BB8 6100 0000                  		bsr.w	OscillateNumInit
00004BBC 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004BC2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004BC8 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004BCE 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004BD4 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004BDA 7000                       		moveq	#0,d0
00004BDC 1038 FE10                  		move.b	(v_zone).w,d0
00004BE0 E548                       		lsl.w	#2,d0
00004BE2 2271 0000                  		movea.l	(a1,d0.w),a1
00004BE6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004BEA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004BEC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004BF2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004BF6 5340                       		subq.w	#1,d0
00004BF8 E548                       		lsl.w	#2,d0
00004BFA 2271 0000                  		movea.l	(a1,d0.w),a1
00004BFE                            
00004BFE                            Level_Demo:
00004BFE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004C04 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004C08 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004C0E 4A78 FFF0                  		tst.w	(f_demo).w
00004C12 6A00                       		bpl.s	Level_ChkWaterPal
00004C14 31FC 021C F614             		move.w	#540,(v_demolength).w
00004C1A 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004C20 6600                       		bne.s	Level_ChkWaterPal
00004C22 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004C28                            
00004C28                            Level_ChkWaterPal:
00004C28 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004C2E 6600                       		bne.s	Level_Delay	; if not, branch
00004C30 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004C32 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004C38 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004C3A 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004C3C                            
00004C3C                            	Level_WtrNotSbz:
00004C3C 6100 D8F6                  		bsr.w	PalLoad4_Water
00004C40                            
00004C40                            Level_Delay:
00004C40 323C 0003                  		move.w	#3,d1
00004C44                            
00004C44                            	Level_DelayLoop:
00004C44 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C4A 6100 EEC4                  		bsr.w	WaitForVBla
00004C4E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004C52                            
00004C52 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004C58 6100 D4D8                  		bsr.w	PalFadeIn_Alt
00004C5C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004C60 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004C62 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004C66 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004C6A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004C6E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004C72 6000                       		bra.s	Level_StartGame
00004C74                            ; ===========================================================================
00004C74                            
00004C74                            Level_ClrCardArt:
00004C74 7000                       		moveq	#plcid_Explode,d0
00004C76 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004C7C 7000                       		moveq	#0,d0
00004C7E 1038 FE10                  		move.b	(v_zone).w,d0
00004C82 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004C86 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004C8C                            
00004C8C                            Level_StartGame:
00004C8C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004C92                            
00004C92                            ; ---------------------------------------------------------------------------
00004C92                            ; Main level loop (when	all title card and loading sequences are finished)
00004C92                            ; ---------------------------------------------------------------------------
00004C92                            
00004C92                            Level_MainLoop:
00004C92 6100 C618                  		bsr.w	PauseGame
00004C96 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C9C 6100 EE72                  		bsr.w	WaitForVBla
00004CA0 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004CA4 6100 0000                  		bsr.w	MoveSonicInDemo
00004CA8 6100 0000                  		bsr.w	LZWaterFeatures
00004CAC 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004CB2 4A78 FE02                  			tst.w   (f_restart).w
00004CB6 6600 FC8C                  			bne     GM_Level
00004CBA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004CBE 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004CC0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004CC6 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004CC8                            
00004CC8                            	Level_DoScroll:
00004CC8 6100 0000                  		bsr.w	DeformLayers
00004CCC                            
00004CCC                            	Level_SkipScroll:
00004CCC 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CD2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CD8 6100 D044                  		bsr.w	PaletteCycle
00004CDC 6100 CAC8                  		bsr.w	RunPLC
00004CE0 6100 0000                  		bsr.w	OscillateNumDo
00004CE4 6100 0000                  		bsr.w	SynchroAnimate
00004CE8 6100 0000                  		bsr.w	SignpostArtLoad
00004CEC                            
00004CEC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004CF2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004CF4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004CFA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004CFE 4E75                       		rts	
00004D00                            ; ===========================================================================
00004D00                            
00004D00                            Level_ChkDemo:
00004D00 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004D04 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004D06 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004D0A 6700                       		beq.s	Level_EndDemo	; if not, branch
00004D0C 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D12 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004D16 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D1C 4E75                       		rts	
00004D1E                            ; ===========================================================================
00004D1E                            
00004D1E                            Level_EndDemo:
00004D1E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D24 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004D26 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D2C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004D30 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004D32 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004D38                            
00004D38                            Level_FadeDemo:
00004D38 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004D3E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004D44 4278 F794                  		clr.w	(v_palchgspeed).w
00004D48                            
00004D48                            	Level_FDLoop:
00004D48 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D4E 6100 EDC0                  		bsr.w	WaitForVBla
00004D52 6100 0000                  		bsr.w	MoveSonicInDemo
00004D56 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004D5C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004D62 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004D68 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004D6C 6A00                       		bpl.s	loc_3BC8
00004D6E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004D74 6100 D47C                  		bsr.w	FadeOut_ToBlack
00004D78                            
00004D78                            loc_3BC8:
00004D78 4A78 F614                  		tst.w	(v_demolength).w
00004D7C 66CA                       		bne.s	Level_FDLoop
00004D7E 4E75                       		rts	
00004D80                            ; ===========================================================================
00004D80                            
00004D80                            		include	"_inc\LZWaterFeatures.asm"
00004D80                            ; ---------------------------------------------------------------------------
00004D80                            ; Subroutine to	do special water effects in Labyrinth Zone
00004D80                            ; ---------------------------------------------------------------------------
00004D80                            
00004D80                            LZWaterFeatures:
00004D80 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004D86 6600                       		bne.s	@notlabyrinth	; if not, branch
00004D88 4A38 F744                  			tst.b   (f_nobgscroll).w
00004D8C 6600                       			bne.s	@setheight
00004D8E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004D94 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004D96                            
00004D96 6100 0000                  		bsr.w	LZWindTunnels
00004D9A 6100 0000                  		bsr.w	LZWaterSlides
00004D9E 6100 0000                  		bsr.w	LZDynamicWater
00004DA2                            
00004DA2                            @setheight:
00004DA2 4238 F64E                  		clr.b	(f_wtr_state).w
00004DA6 7000                       		moveq	#0,d0
00004DA8 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004DAC E248                       		lsr.w	#1,d0
00004DAE D078 F648                  		add.w	(v_waterpos2).w,d0
00004DB2 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004DB6 3038 F646                  		move.w	(v_waterpos1).w,d0
00004DBA 9078 F704                  		sub.w	(v_screenposy).w,d0
00004DBE 6400                       		bcc.s	@isbelow
00004DC0 4A40                       		tst.w	d0
00004DC2 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004DC4                            
00004DC4 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004DCA 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004DD0                            
00004DD0                            	@isbelow:
00004DD0 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004DD4 6500                       		bcs.s	@isvisible	; if yes, branch
00004DD6 303C 00DF                  		move.w	#223,d0
00004DDA                            
00004DDA                            	@isvisible:
00004DDA 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004DDE                            
00004DDE                            @notlabyrinth:
00004DDE 4E75                       		rts	
00004DE0                            ; ===========================================================================
00004DE0                            ; ---------------------------------------------------------------------------
00004DE0                            ; Initial water heights
00004DE0                            ; ---------------------------------------------------------------------------
00004DE0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004DE2 0328                       		dc.w $328	; Labyrinth 2
00004DE4 0900                       		dc.w $900	; Labyrinth 3
00004DE6 0228                       		dc.w $228	; Scrap Brain 3
00004DE8                            		even
00004DE8                            ; ===========================================================================
00004DE8                            
00004DE8                            ; ---------------------------------------------------------------------------
00004DE8                            ; Labyrinth dynamic water routines
00004DE8                            ; ---------------------------------------------------------------------------
00004DE8                            
00004DE8                            LZDynamicWater:
00004DE8 7000                       		moveq	#0,d0
00004DEA 1038 FE11                  		move.b	(v_act).w,d0
00004DEE D040                       		add.w	d0,d0
00004DF0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004DF4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004DF8 7200                       		moveq	#0,d1
00004DFA 1238 F64C                  		move.b	(f_water).w,d1
00004DFE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004E02 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004E06 6700                       		beq.s	@exit		; if water level is correct, branch
00004E08 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004E0A 4441                       		neg.w	d1		; set water to move up instead
00004E0C                            
00004E0C                            	@movewater:
00004E0C D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004E10                            
00004E10                            	@exit:
00004E10 4E75                       		rts	
00004E12                            ; ===========================================================================
00004E12 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004E14 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004E16 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004E18 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004E1A                            ; ===========================================================================
00004E1A                            
00004E1A                            DynWater_LZ1:
00004E1A 4E75                       		rts	
00004E1C                            ; ===========================================================================
00004E1C                            
00004E1C                            DynWater_LZ2:
00004E1C 3038 F700                  		move.w	(v_screenposx).w,d0
00004E20 323C 0328                  		move.w	#$328,d1
00004E24 0C40 0500                  		cmpi.w	#$500,d0
00004E28 6500                       		bcs.s	@setwater
00004E2A 323C 03C8                  		move.w	#$3C8,d1
00004E2E 0C40 0B00                  		cmpi.w	#$B00,d0
00004E32 6500                       		bcs.s	@setwater
00004E34 323C 0428                  		move.w	#$428,d1
00004E38                            
00004E38                            	@setwater:
00004E38 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E3C 4E75                       		rts	
00004E3E                            ; ===========================================================================
00004E3E                            
00004E3E                            DynWater_LZ3:
00004E3E 3038 F700                  		move.w	(v_screenposx).w,d0
00004E42 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004E46 6600                       		bne.s	@routine2
00004E48                            
00004E48 323C 0900                  		move.w	#$900,d1
00004E4C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004E50 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004E52 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004E58 6500                       		bcs.s	@setwaterlz3
00004E5A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004E60 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004E62                            
00004E62 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004E66 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004E6C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004E7A                            
00004E7A                            	@setwaterlz3:
00004E7A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E7E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004E82 4E75                       		rts	
00004E84                            ; ===========================================================================
00004E84                            
00004E84                            @routine2:
00004E84 5302                       		subq.b	#1,d2
00004E86 6600                       		bne.s	@routine3
00004E88 323C 04C8                  		move.w	#$4C8,d1
00004E8C 0C40 0770                  		cmpi.w	#$770,d0
00004E90 6500                       		bcs.s	@setwater2
00004E92 323C 0308                  		move.w	#$308,d1
00004E96 0C40 1400                  		cmpi.w	#$1400,d0
00004E9A 6500                       		bcs.s	@setwater2
00004E9C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004EA2 6700                       		beq.s	@sonicislow
00004EA4 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004EAA 6400                       		bcc.s	@sonicislow	; if yes, branch
00004EAC 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004EB2 6400                       		bcc.s	@setwater2
00004EB4                            
00004EB4                            @sonicislow:
00004EB4 323C 0508                  		move.w	#$508,d1
00004EB8 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004EBC 0C40 1770                  		cmpi.w	#$1770,d0
00004EC0 6500                       		bcs.s	@setwater2
00004EC2 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004EC8                            
00004EC8                            	@setwater2:
00004EC8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004ECC 4E75                       		rts	
00004ECE                            ; ===========================================================================
00004ECE                            
00004ECE                            @routine3:
00004ECE 5302                       		subq.b	#1,d2
00004ED0 6600                       		bne.s	@routine4
00004ED2 323C 0508                  		move.w	#$508,d1
00004ED6 0C40 1860                  		cmpi.w	#$1860,d0
00004EDA 6500                       		bcs.s	@setwater3
00004EDC 323C 0188                  		move.w	#$188,d1
00004EE0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004EE4 6400                       		bcc.s	@loc_3DC6
00004EE6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004EEA 6600                       		bne.s	@setwater3
00004EEC                            
00004EEC                            	@loc_3DC6:
00004EEC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004EF2                            
00004EF2                            	@setwater3:
00004EF2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EF6 4E75                       		rts	
00004EF8                            ; ===========================================================================
00004EF8                            
00004EF8                            @routine4:
00004EF8 5302                       		subq.b	#1,d2
00004EFA 6600                       		bne.s	@routine5
00004EFC 323C 0188                  		move.w	#$188,d1
00004F00 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004F04 6500                       		bcs.s	@setwater4
00004F06 323C 0900                  		move.w	#$900,d1
00004F0A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004F0E 6500                       		bcs.s	@setwater4
00004F10 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004F16 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004F1C 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004F22 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004F28 4E75                       		rts	
00004F2A                            ; ===========================================================================
00004F2A                            
00004F2A                            @setwater4:
00004F2A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F2E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004F32 4E75                       		rts	
00004F34                            ; ===========================================================================
00004F34                            
00004F34                            @routine5:
00004F34 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004F38 6500                       		bcs.s	@dontset	; if not, branch
00004F3A 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004F40                            
00004F40                            	@dontset:
00004F40 4E75                       		rts	
00004F42                            ; ===========================================================================
00004F42                            
00004F42                            DynWater_SBZ3:
00004F42                            	;	move.w	#$228,d1
00004F42                            	;	cmpi.w	#$F00,(v_screenposx).w
00004F42                            	;	bcs.s	@setwater
00004F42                            	;	move.w	#$4C8,d1
00004F42                            
00004F42                            	;@setwater:
00004F42                            		;move.w	d1,(v_waterpos3).w
00004F42 4E75                       		rts
00004F44                            
00004F44                            ; ---------------------------------------------------------------------------
00004F44                            ; Labyrinth Zone "wind tunnels"	subroutine
00004F44                            ; ---------------------------------------------------------------------------
00004F44                            
00004F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F44                            
00004F44                            
00004F44                            LZWindTunnels:
00004F44 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004F48 6600 0000                  		bne.w	@quit	; if yes, branch
00004F4C 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004F52 7000                       		moveq	#0,d0
00004F54 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004F58 E748                       		lsl.w	#3,d0		; multiply by 8
00004F5A D4C0                       		adda.w	d0,a2		; add to address for data
00004F5C 7200                       		moveq	#0,d1
00004F5E 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004F62 6600                       		bne.s	@notact1	; if not, branch
00004F64 7201                       		moveq	#1,d1
00004F66 514A                       		subq.w	#8,a2		; use different data for act 1
00004F68                            
00004F68                            	@notact1:
00004F68 43F8 D000                  		lea	(v_player).w,a1
00004F6C                            
00004F6C                            @chksonic:
00004F6C 3029 0008                  		move.w	obX(a1),d0
00004F70 B052                       		cmp.w	(a2),d0
00004F72 6500 0000                  		bcs.w	@chknext
00004F76 B06A 0004                  		cmp.w	4(a2),d0
00004F7A 6400 0000                  		bcc.w	@chknext
00004F7E 3429 000C                  		move.w	obY(a1),d2
00004F82 B46A 0002                  		cmp.w	2(a2),d2
00004F86 6500                       		bcs.s	@chknext
00004F88 B46A 0006                  		cmp.w	6(a2),d2
00004F8C 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004F8E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F92 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004F96 6600                       		bne.s	@skipsound	; if not, branch
00004FA2                            
00004FA2                            	@skipsound:
00004FA2 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004FA6 6600 0000                  		bne.w	@quit	; if yes, branch
00004FAA 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004FB0 6400                       		bcc.s	@clrquit	; if yes, branch
00004FB2 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004FB8 0440 0080                  		subi.w	#$80,d0
00004FBC B052                       		cmp.w	(a2),d0
00004FBE 6400                       		bcc.s	@movesonic
00004FC0 7002                       		moveq	#2,d0
00004FC2 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004FC8 6600                       		bne.s	@notact2	; if not, branch
00004FCA 4440                       		neg.w	d0
00004FCC                            
00004FCC                            	@notact2:
00004FCC D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004FD0                            
00004FD0                            @movesonic:
00004FD0 5869 0008                  		addq.w	#4,obX(a1)
00004FD4 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004FDA 337C 0000 0012             		move.w	#0,obVelY(a1)
00004FE0 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004FE6 08E9 0001 0022             		bset	#1,obStatus(a1)
00004FEC 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004FF2 6700                       		beq.s	@down		; if not, branch
00004FF4 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004FF8                            
00004FF8                            	@down:
00004FF8 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004FFE 6700                       		beq.s	@end		; if not, branch
00005000 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00005004                            
00005004                            	@end:
00005004 4E75                       		rts	
00005006                            ; ===========================================================================
00005006                            
00005006                            @chknext:
00005006 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00005008 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
0000500C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00005010 6700                       		beq.s	@quit		; if yes, branch
00005012 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00005018                            
00005018                            @clrquit:
00005018 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
0000501C                            
0000501C                            @quit:
0000501C 4E75                       		rts	
0000501E                            ; End of function LZWindTunnels
0000501E                            
0000501E                            ; ===========================================================================
0000501E                            
0000501E                            		;    left, top,  right, bottom boundaries
0000501E 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005026 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
0000502E 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005036 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
0000503E 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005046                            		even
00005046                            
00005046                            ; ---------------------------------------------------------------------------
00005046                            ; Labyrinth Zone water slide subroutine
00005046                            ; ---------------------------------------------------------------------------
00005046                            
00005046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005046                            
00005046                            
00005046                            LZWaterSlides:
00005046 43F8 D000                  		lea	(v_player).w,a1
0000504A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00005050 6600                       		bne.s	loc_3F6A	; if not, branch
00005052 3029 000C                  		move.w	obY(a1),d0
00005056 E248                       		lsr.w	#1,d0
00005058 0240 0380                  		andi.w	#$380,d0
0000505C 1229 0008                  		move.b	obX(a1),d1
00005060 0241 007F                  		andi.w	#$7F,d1
00005064 D041                       		add.w	d1,d0
00005066 45F8 A400                  		lea	(v_lvllayout).w,a2
0000506A 1032 0000                  		move.b	(a2,d0.w),d0
0000506E 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00005072 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00005074                            
00005074                            loc_3F62:
00005074 B022                       		cmp.b	-(a2),d0
00005076 57C9 FFFC                  		dbeq	d1,loc_3F62
0000507A 6700                       		beq.s	LZSlide_Move
0000507C                            
0000507C                            loc_3F6A:
0000507C 4A38 F7CA                  		tst.b	(f_jumponly).w
00005080 6700                       		beq.s	locret_3F7A
00005082 337C 0005 003E             		move.w	#5,$3E(a1)
00005088 4238 F7CA                  		clr.b	(f_jumponly).w
0000508C                            
0000508C                            locret_3F7A:
0000508C 4E75                       		rts	
0000508E                            ; ===========================================================================
0000508E                            
0000508E                            LZSlide_Move:
0000508E 0C41 0003                  		cmpi.w	#3,d1
00005092 6400                       		bcc.s	loc_3F84
00005094 4E71                       		nop	
00005096                            
00005096                            loc_3F84:
00005096 08A9 0000 0022             		bclr	#0,obStatus(a1)
0000509C 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
000050A0 1340 0020                  		move.b	d0,obInertia(a1)
000050A4 6A00                       		bpl.s	loc_3F9A
000050A6 08E9 0000 0022             		bset	#0,obStatus(a1)
000050AC                            
000050AC                            loc_3F9A:
000050AC 4229 0021                  		clr.b	obInertia+1(a1)
000050B0 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000050B6 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000050BC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050C0 0200 001F                  		andi.b	#$1F,d0
000050C4 6600                       		bne.s	locret_3FBE
000050D0                            
000050D0                            locret_3FBE:
000050D0 4E75                       		rts	
000050D2                            ; End of function LZWaterSlides
000050D2                            
000050D2                            ; ===========================================================================
000050D2                            ; byte_3FC0:
000050D2                            Slide_Speeds:
000050D2 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000050DA 00                         		even
000050DA                            
000050DA                            Slide_Chunks:
000050DA 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000050DB                            ; byte_3FCF
000050DB                            Slide_Chunks_End
000050DC 00                         		even
000050DC 00                         		even
000050DC                            		include	"_inc\MoveSonicInDemo.asm"
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            ; Subroutine to	move Sonic in demo mode
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            
000050DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050DC                            
000050DC                            
000050DC                            MoveSonicInDemo:
000050DC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000050E0 6600                       		bne.s	MDemo_On	; if yes, branch
000050E2 4E75                       		rts	
000050E4                            ; ===========================================================================
000050E4                            
000050E4                            ; This is an unused subroutine for recording a demo
000050E4                            
000050E4                            DemoRecorder:
000050E4 43F9 0008 0000             		lea	($80000).l,a1
000050EA 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000050EE D2C0                       		adda.w	d0,a1
000050F0 1038 F604                  		move.b	(v_jpadhold1).w,d0
000050F4 B011                       		cmp.b	(a1),d0
000050F6 6600                       		bne.s	@next
000050F8 5229 0001                  		addq.b	#1,1(a1)
000050FC 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005102 6700                       		beq.s	@next
00005104 4E75                       		rts	
00005106                            
00005106                            	@next:
00005106 1340 0002                  		move.b	d0,2(a1)
0000510A 137C 0000 0003             		move.b	#0,3(a1)
00005110 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005114 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000511A 4E75                       		rts	
0000511C                            ; ===========================================================================
0000511C                            
0000511C                            MDemo_On:
0000511C 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005120 6A00                       		bpl.s	@dontquit	; if not, branch
00005122 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005126 6B00                       		bmi.s	@dontquit	; if yes, branch
00005128 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
0000512E                            
0000512E                            	@dontquit:
0000512E 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005134 7000                       		moveq	#0,d0
00005136 1038 FE10                  		move.b	(v_zone).w,d0
0000513A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005140 6600                       		bne.s	@notspecial	; if not, branch
00005142 7006                       		moveq	#6,d0		; use demo #6
00005144                            
00005144                            	@notspecial:
00005144 E548                       		lsl.w	#2,d0
00005146 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000514A 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000514E 6A00                       		bpl.s	@notcredits	; if not, branch
00005150 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005156 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000515A 5340                       		subq.w	#1,d0
0000515C E548                       		lsl.w	#2,d0
0000515E 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005162                            
00005162                            	@notcredits:
00005162 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005166 D2C0                       		adda.w	d0,a1
00005168 1011                       		move.b	(a1),d0
0000516A 41F8 F604                  		lea	(v_jpadhold1).w,a0
0000516E 1200                       		move.b	d0,d1
00005170 7400                       			moveq	#0,d2
00005172 B500                       		eor.b	d2,d0
00005174 10C1                       		move.b	d1,(a0)+
00005176 C001                       		and.b	d1,d0
00005178 10C0                       		move.b	d0,(a0)+
0000517A 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
0000517E 6400                       		bcc.s	@end
00005180 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005186 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000518A                            
0000518A                            	@end:
0000518A 4E75                       		rts	
0000518C                            ; End of function MoveSonicInDemo
0000518C                            
0000518C                            ; ===========================================================================
0000518C                            ; ---------------------------------------------------------------------------
0000518C                            ; Demo sequence	pointers
0000518C                            ; ---------------------------------------------------------------------------
0000518C 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005190 0000 0000                  		dc.l Demo_GHZ
00005194 0000 0000                  		dc.l Demo_MZ
00005198 0000 0000                  		dc.l Demo_MZ
0000519C 0000 0000                  		dc.l Demo_SYZ
000051A0 0000 0000                  		dc.l Demo_SYZ
000051A4 0000 0000                  		dc.l Demo_SS
000051A8 0000 0000                  		dc.l Demo_SS
000051AC                            
000051AC 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000051B0 0000 0000                  		dc.l Demo_EndMZ
000051B4 0000 0000                  		dc.l Demo_EndSYZ
000051B8 0000 0000                  		dc.l Demo_EndLZ
000051BC 0000 0000                  		dc.l Demo_EndSLZ
000051C0 0000 0000                  		dc.l Demo_EndSBZ1
000051C4 0000 0000                  		dc.l Demo_EndSBZ2
000051C8 0000 0000                  		dc.l Demo_EndGHZ2
000051CC                            
000051CC 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000051DC 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000051EC 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000051FC                            		even
000051FC                            		even
000051FC                            
000051FC                            ; ---------------------------------------------------------------------------
000051FC                            ; Collision index pointer loading subroutine
000051FC                            ; ---------------------------------------------------------------------------
000051FC                            
000051FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051FC                            
000051FC                            
000051FC                            ColIndexLoad:
000051FC 7000                       		moveq	#0,d0
000051FE 1038 FE10                  		move.b	(v_zone).w,d0
00005202 E548                       		lsl.w	#2,d0
00005204 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000520A 4E75                       		rts	
0000520C                            ; End of function ColIndexLoad
0000520C                            
0000520C                            ; ===========================================================================
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Collision index pointers
0000520C                            ; ---------------------------------------------------------------------------
0000520C 0000 0000                  ColPointers:	dc.l Col_GHZ
00005210 0000 0000                  		dc.l Col_LZ
00005214 0000 0000                  		dc.l Col_MZ
00005218 0000 0000                  		dc.l Col_SLZ
0000521C 0000 0000                  		dc.l Col_SYZ
00005220 0000 0000                  		dc.l Col_SBZ
00005224                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005224                            
00005224                            		include	"_inc\Oscillatory Routines.asm"
00005224                            ; ---------------------------------------------------------------------------
00005224                            ; Oscillating number subroutines
00005224                            ; ---------------------------------------------------------------------------
00005224                            
00005224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005224                            
00005224                            ; Initialise the values
00005224                            
00005224                            OscillateNumInit:
00005224 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005228 45F9 0000 0000             		lea	(@baselines).l,a2
0000522E 7220                       		moveq	#$20,d1
00005230                            
00005230                            	@loop:
00005230 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005232 51C9 FFFC                  		dbf	d1,@loop
00005236 4E75                       		rts	
00005238                            
00005238                            
00005238                            ; ===========================================================================
00005238 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000523A 0080 0000                  		dc.w $80, 0
0000523E 0080 0000                  		dc.w $80, 0
00005242 0080 0000                  		dc.w $80, 0
00005246 0080 0000                  		dc.w $80, 0
0000524A 0080 0000                  		dc.w $80, 0
0000524E 0080 0000                  		dc.w $80, 0
00005252 0080 0000                  		dc.w $80, 0
00005256 0080 0000                  		dc.w $80, 0
0000525A 0080 0000                  		dc.w $80, 0
0000525E 50F0 011E                  		dc.w $50F0, $11E
00005262 2080 00B4                  		dc.w $2080, $B4
00005266 3080 010E                  		dc.w $3080, $10E
0000526A 5080 01C2                  		dc.w $5080, $1C2
0000526E 7080 0276                  		dc.w $7080, $276
00005272 0080 0000                  		dc.w $80, 0
00005276 0080 0000                  		dc.w $80, 0
0000527A                            		even
0000527A                            
0000527A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000527A                            
0000527A                            ; Oscillate values
0000527A                            
0000527A                            OscillateNumDo:
0000527A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005280 6400                       		bcc.s	@end		; if yes, branch
00005282 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005286 45F9 0000 0000             		lea	(@settings).l,a2
0000528C 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
0000528E 720F                       		moveq	#$F,d1
00005290                            
00005290                            @loop:
00005290 341A                       		move.w	(a2)+,d2	; get frequency
00005292 381A                       		move.w	(a2)+,d4	; get amplitude
00005294 0303                       		btst	d1,d3		; check oscillation direction
00005296 6600                       		bne.s	@down		; branch if 1
00005298                            
00005298                            	@up:
00005298 3029 0002                  		move.w	2(a1),d0	; get current rate
0000529C D042                       		add.w	d2,d0		; add frequency
0000529E 3340 0002                  		move.w	d0,2(a1)
000052A2 D151                       		add.w	d0,0(a1)	; add rate to value
000052A4 B811                       		cmp.b	0(a1),d4
000052A6 6200                       		bhi.s	@next
000052A8 03C3                       		bset	d1,d3
000052AA 6000                       		bra.s	@next
000052AC                            
000052AC                            	@down:
000052AC 3029 0002                  		move.w	2(a1),d0
000052B0 9042                       		sub.w	d2,d0
000052B2 3340 0002                  		move.w	d0,2(a1)
000052B6 D151                       		add.w	d0,0(a1)
000052B8 B811                       		cmp.b	0(a1),d4
000052BA 6300                       		bls.s	@next
000052BC 0383                       		bclr	d1,d3
000052BE                            
000052BE                            	@next:
000052BE 5849                       		addq.w	#4,a1
000052C0 51C9 FFCE                  		dbf	d1,@loop
000052C4 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000052C8                            
000052C8                            @end:
000052C8 4E75                       		rts	
000052CA                            ; End of function OscillateNumDo
000052CA                            
000052CA                            ; ===========================================================================
000052CA 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000052CE 0002 0018                  		dc.w 2,	$18
000052D2 0002 0020                  		dc.w 2,	$20
000052D6 0002 0030                  		dc.w 2,	$30
000052DA 0004 0020                  		dc.w 4,	$20
000052DE 0008 0008                  		dc.w 8,	8
000052E2 0008 0040                  		dc.w 8,	$40
000052E6 0004 0040                  		dc.w 4,	$40
000052EA 0002 0050                  		dc.w 2,	$50
000052EE 0002 0050                  		dc.w 2,	$50
000052F2 0002 0020                  		dc.w 2,	$20
000052F6 0003 0030                  		dc.w 3,	$30
000052FA 0005 0050                  		dc.w 5,	$50
000052FE 0007 0070                  		dc.w 7,	$70
00005302 0002 0010                  		dc.w 2,	$10
00005306 0002 0010                  		dc.w 2,	$10
0000530A                            		even
0000530A                            		even
0000530A                            
0000530A                            ; ---------------------------------------------------------------------------
0000530A                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000530A                            ; ---------------------------------------------------------------------------
0000530A                            
0000530A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000530A                            
0000530A                            
0000530A                            SynchroAnimate:
0000530A                            
0000530A                            ; Used for GHZ spiked log
0000530A                            Sync1:
0000530A 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
0000530E 6A00                       		bpl.s	Sync2		; if not, branch
00005310 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005316 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000531A 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005320                            
00005320                            ; Used for rings and giant rings
00005320                            Sync2:
00005320 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005324 6A00                       		bpl.s	Sync3
00005326 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000532C 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005330 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005336                            
00005336                            ; Used for nothing
00005336                            Sync3:
00005336 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000533A 6A00                       		bpl.s	Sync4
0000533C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005342 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005346 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
0000534C 6500                       		blo.s	Sync4
0000534E 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005354                            
00005354                            ; Used for bouncing rings
00005354                            Sync4:
00005354 4A38 FEC6                  		tst.b	(v_ani3_time).w
00005358 6700                       		beq.s	SyncEnd
0000535A 7000                       		moveq	#0,d0
0000535C 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005360 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005364 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00005368 EF58                       		rol.w	#7,d0
0000536A 0240 0003                  		andi.w	#3,d0
0000536E 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005372 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005376                            
00005376                            SyncEnd:
00005376 4E75                       		rts	
00005378                            ; End of function SynchroAnimate
00005378                            
00005378                            ; ---------------------------------------------------------------------------
00005378                            ; End-of-act signpost pattern loading subroutine
00005378                            ; ---------------------------------------------------------------------------
00005378                            
00005378                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005378                            
00005378                            
00005378                            SignpostArtLoad:
00005378 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0000537C 6600 0000                  		bne.w	@exit		; if yes, branch
00005380 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005386 6700                       		beq.s	@exit		; if yes, branch
00005388                            
00005388 3038 F700                  		move.w	(v_screenposx).w,d0
0000538C 3238 F72A                  		move.w	(v_limitright2).w,d1
00005390 0441 0100                  		subi.w	#$100,d1
00005394 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005396 6D00                       		blt.s	@exit		; if not, branch
00005398 4A38 FE1E                  		tst.b	(f_timecount).w
0000539C 6700                       		beq.s	@exit
0000539E B278 F728                  		cmp.w	(v_limitleft2).w,d1
000053A2 6700                       		beq.s	@exit
000053A4 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000053A8 7000                       		moveq	#plcid_Signpost,d0
000053AA 6000 C3C0                  		bra.w	NewPLC		; load signpost	patterns
000053AE                            
000053AE                            	@exit:
000053AE 4E75                       		rts	
000053B0                            ; End of function SignpostArtLoad
000053B0                            
000053B0                            ; ===========================================================================
000053B0                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005430                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005560                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000055E0                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000056E0                            ; ===========================================================================
000056E0                            
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            ; Special Stage
000056E0                            ; ---------------------------------------------------------------------------
000056E0                            
000056E0                            GM_Special:
000056E8 6100 CC12                  		bsr.w	PaletteWhiteOut
000056EC 46FC 2700                  		disable_ints
000056F0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000056F6 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000056FA 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000056FE 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005704 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005708 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000570C 0200 00BF                  		andi.b	#$BF,d0
00005710 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005716 6100 BAB8                  		bsr.w	ClearScreen
0000571A 46FC 2300                  		enable_ints
0000571E 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005740                            
00005740                            	SS_WaitForDMA:
00005740 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005742 0801 0001                  		btst	#1,d1		; is DMA running?
00005746 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
00005748 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
0000574C 6100 0000                  		bsr.w	SS_BGLoad
00005750 7000                       		moveq	#plcid_SpecialStage,d0
00005752 6100 C152                  		bsr.w	QuickPLC	; load special stage patterns
00005756                            
00005756 43F8 D000                  		lea	(v_objspace).w,a1
0000575A 7000                       		moveq	#0,d0
0000575C 323C 07FF                  		move.w	#$7FF,d1
00005760                            	SS_ClrObjRam:
00005760 22C0                       		move.l	d0,(a1)+
00005762 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005766                            
00005766 43F8 F700                  		lea	(v_screenposx).w,a1
0000576A 7000                       		moveq	#0,d0
0000576C 323C 003F                  		move.w	#$3F,d1
00005770                            	SS_ClrRam1:
00005770 22C0                       		move.l	d0,(a1)+
00005772 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005776                            
00005776 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000577A 7000                       		moveq	#0,d0
0000577C 323C 0027                  		move.w	#$27,d1
00005780                            	SS_ClrRam2:
00005780 22C0                       		move.l	d0,(a1)+
00005782 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005786                            
00005786 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000578A 7000                       		moveq	#0,d0
0000578C 323C 007F                  		move.w	#$7F,d1
00005790                            	SS_ClrNemRam:
00005790 22C0                       		move.l	d0,(a1)+
00005792 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005796                            
00005796 4238 F64E                  		clr.b	(f_wtr_state).w
0000579A 4278 FE02                  		clr.w	(f_restart).w
0000579E 700A                       		moveq	#palid_Special,d0
000057A0 6100 CCDA                  		bsr.w	PalLoad1	; load special stage palette
000057A4 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000057AA 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000057B2 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000057BA 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000057C0 6100 0000                  		bsr.w	PalCycle_SS
000057C4 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000057C8 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000057D6 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000057DC 43F9 0000 518C             		lea	(DemoDataPtr).l,a1
000057E2 7006                       		moveq	#6,d0
000057E4 E548                       		lsl.w	#2,d0
000057E6 2271 0000                  		movea.l	(a1,d0.w),a1
000057EA 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000057F0 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000057F4 4278 FE20                  		clr.w	(v_rings).w
000057F8 4238 FE1B                  		clr.b	(v_lifecount).w
000057FC 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005802 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005808 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000580C 6700                       		beq.s	SS_NoDebug	; if not, branch
0000580E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005814 6700                       		beq.s	SS_NoDebug	; if not, branch
00005816 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000581C                            
0000581C                            	SS_NoDebug:
0000581C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005820 0000 0040                  		ori.b	#$40,d0
00005824 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000582A 6100 CA24                  		bsr.w	PaletteWhiteIn
0000582E                            
0000582E                            ; ---------------------------------------------------------------------------
0000582E                            ; Main Special Stage loop
0000582E                            ; ---------------------------------------------------------------------------
0000582E                            
0000582E                            SS_MainLoop:
0000582E 6100 BA7C                  		bsr.w	PauseGame
00005832 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00005838 6100 E2D6                  		bsr.w	WaitForVBla
0000583C 6100 F89E                  		bsr.w	MoveSonicInDemo
00005840 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005846 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000584C 4EB9 0000 0000             		jsr	(BuildSprites).l
00005852 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005858 6100 0000                  		bsr.w	SS_BGAnimate
0000585C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005860 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005862 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005866 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000586A                            
0000586A                            	SS_ChkEnd:
0000586A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005870 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005874                            
00005874 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005878 6600 0000                  		bne.w	SS_ToLevel
0000587C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005882 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005888 6500                       		blo.s	SS_Finish	; if not, branch
0000588A 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000588E                            
0000588E                            SS_Finish:
0000588E 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005894 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000589A 4278 F794                  		clr.w	(v_palchgspeed).w
0000589E                            
0000589E                            	SS_FinLoop:
0000589E 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000058A4 6100 E26A                  		bsr.w	WaitForVBla
000058A8 6100 F832                  		bsr.w	MoveSonicInDemo
000058AC 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000058B2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000058B8 4EB9 0000 0000             		jsr	(BuildSprites).l
000058BE 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000058C4 6100 0000                  		bsr.w	SS_BGAnimate
000058C8 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000058CC 6A00                       		bpl.s	loc_47D4
000058CE 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000058D4 6100 CA46                  		bsr.w	WhiteOut_ToWhite
000058D8                            
000058D8                            loc_47D4:
000058D8 4A78 F614                  		tst.w	(v_demolength).w
000058DC 66C0                       		bne.s	SS_FinLoop
000058DE                            
000058DE 46FC 2700                  		disable_ints
000058E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000058E8 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000058EC 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000058F0 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000058F4 6100 B8DA                  		bsr.w	ClearScreen
00005902 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005908 6100 BA44                  		bsr.w	NemDec
0000590C 4EB9 0000 0000             		jsr	(Hud_Base).l
00005912 31FC C800 C8FC             		ResetDMAQueue	
00005918 46FC 2300                  		enable_ints
0000591C 7011                       		moveq	#palid_SSResult,d0
0000591E 6100 CB98                  		bsr.w	PalLoad2	; load results screen palette
00005922 7000                       		moveq	#plcid_Main,d0
00005924 6100 BE46                  		bsr.w	NewPLC
00005928 7000                       		moveq	#plcid_SSResult,d0
0000592A 6100 BE0E                  		bsr.w	AddPLC		; load results screen patterns
0000592E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005934 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000593A 3038 FE20                  		move.w	(v_rings).w,d0
0000593E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005942 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005950                            
00005950 43F8 D000                  		lea	(v_objspace).w,a1
00005954 7000                       		moveq	#0,d0
00005956 323C 07FF                  		move.w	#$7FF,d1
0000595A                            	SS_EndClrObjRam:
0000595A 22C0                       		move.l	d0,(a1)+
0000595C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005960                            
00005960 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005966                            
00005966                            SS_NormalExit:
00005966 6100 B944                  		bsr.w	PauseGame
0000596A 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005970 6100 E19E                  		bsr.w	WaitForVBla
00005974 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000597A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005980 6100 BE24                  		bsr.w	RunPLC
00005984 4A78 FE02                  		tst.w	(f_restart).w
00005988 67DC                       		beq.s	SS_NormalExit
0000598A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000598E 66D6                       		bne.s	SS_NormalExit
00005998 6100 C962                  		bsr.w	PaletteWhiteOut
0000599C 4E75                       		rts	
0000599E                            ; ===========================================================================
0000599E                            
0000599E                            SS_ToSegaScreen:
0000599E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000059A4 4E75                       		rts
000059A6                            
000059A6 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000059AC 67F0                       		beq.s	SS_ToSegaScreen
000059AE 4E75                       		rts
000059B0                            
000059B0                            ; ---------------------------------------------------------------------------
000059B0                            ; Special stage	background loading subroutine
000059B0                            ; ---------------------------------------------------------------------------
000059B0                            
000059B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B0                            
000059B0                            
000059B0                            SS_BGLoad:
000059B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000059B6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000059BC 303C 4051                  		move.w	#$4051,d0
000059C0 6100 BF16                  		bsr.w	EniDec
000059C4 263C 5000 0001             		move.l	#$50000001,d3
000059CA 45F9 00FF 0080             		lea	($FF0080).l,a2
000059D0 7E06                       		moveq	#6,d7
000059D2                            
000059D2                            loc_48BE:
000059D2 2003                       		move.l	d3,d0
000059D4 7C03                       		moveq	#3,d6
000059D6 7800                       		moveq	#0,d4
000059D8 0C47 0003                  		cmpi.w	#3,d7
000059DC 6400                       		bhs.s	loc_48CC
000059DE 7801                       		moveq	#1,d4
000059E0                            
000059E0                            loc_48CC:
000059E0 7A07                       		moveq	#7,d5
000059E2                            
000059E2                            loc_48CE:
000059E2 224A                       		movea.l	a2,a1
000059E4 0A04 0001                  		eori.b	#1,d4
000059E8 6600                       		bne.s	loc_48E2
000059EA 0C47 0006                  		cmpi.w	#6,d7
000059EE 6600                       		bne.s	loc_48F2
000059F0 43F9 00FF 0000             		lea	($FF0000).l,a1
000059F6                            
000059F6                            loc_48E2:
000059F6 48E7 F800                  		movem.l	d0-d4,-(sp)
000059FA 7207                       		moveq	#7,d1
000059FC 7407                       		moveq	#7,d2
000059FE 6100 B924                  		bsr.w	TilemapToVRAM
00005A02 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005A06                            
00005A06                            loc_48F2:
00005A06 0680 0010 0000             		addi.l	#$100000,d0
00005A0C 51CD FFD4                  		dbf	d5,loc_48CE
00005A10 0680 0380 0000             		addi.l	#$3800000,d0
00005A16 0A04 0001                  		eori.b	#1,d4
00005A1A 51CE FFC4                  		dbf	d6,loc_48CC
00005A1E 0683 1000 0000             		addi.l	#$10000000,d3
00005A24 6A00                       		bpl.s	loc_491C
00005A26 4843                       		swap	d3
00005A28 0683 0000 C000             		addi.l	#$C000,d3
00005A2E 4843                       		swap	d3
00005A30                            
00005A30                            loc_491C:
00005A30 D4FC 0080                  		adda.w	#$80,a2
00005A34 51CF FF9C                  		dbf	d7,loc_48BE
00005A38 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A3E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005A44 303C 4000                  		move.w	#$4000,d0
00005A48 6100 BE8E                  		bsr.w	EniDec
00005A4C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A52 203C 4000 0003             		move.l	#$40000003,d0
00005A58 723F                       		moveq	#$3F,d1
00005A5A 741F                       		moveq	#$1F,d2
00005A5C 6100 B8C6                  		bsr.w	TilemapToVRAM
00005A60 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A66 203C 5000 0003             		move.l	#$50000003,d0
00005A6C 723F                       		moveq	#$3F,d1
00005A6E 743F                       		moveq	#$3F,d2
00005A70 6100 B8B2                  		bsr.w	TilemapToVRAM
00005A74 4E75                       		rts	
00005A76                            ; End of function SS_BGLoad
00005A76                            
00005A76                            ; ---------------------------------------------------------------------------
00005A76                            ; Palette cycling routine - special stage
00005A76                            ; ---------------------------------------------------------------------------
00005A76                            
00005A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A76                            
00005A76                            
00005A76                            PalCycle_SS:
00005A76 4A78 F63A                  		tst.w	(f_pause).w
00005A7A 6600                       		bne.s	locret_49E6
00005A7C 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005A80 6A00                       		bpl.s	locret_49E6
00005A82 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A88 3038 F79A                  		move.w	(v_palss_num).w,d0
00005A8C 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005A90 0240 001F                  		andi.w	#$1F,d0
00005A94 E548                       		lsl.w	#2,d0
00005A96 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005A9C D0C0                       		adda.w	d0,a0
00005A9E 1018                       		move.b	(a0)+,d0
00005AA0 6A00                       		bpl.s	loc_4992
00005AA2 303C 01FF                  		move.w	#$1FF,d0
00005AA6                            
00005AA6                            loc_4992:
00005AA6 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005AAA 7000                       		moveq	#0,d0
00005AAC 1018                       		move.b	(a0)+,d0
00005AAE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005AB2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005AB8 43F1 0000                  		lea	(a1,d0.w),a1
00005ABC 303C 8200                  		move.w	#-$7E00,d0
00005AC0 1019                       		move.b	(a1)+,d0
00005AC2 3C80                       		move.w	d0,(a6)
00005AC4 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005AC8 303C 8400                  		move.w	#-$7C00,d0
00005ACC 1018                       		move.b	(a0)+,d0
00005ACE 3C80                       		move.w	d0,(a6)
00005AD0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005ADA 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005AE2 7000                       		moveq	#0,d0
00005AE4 1018                       		move.b	(a0)+,d0
00005AE6 6B00                       		bmi.s	loc_49E8
00005AE8 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005AEE D2C0                       		adda.w	d0,a1
00005AF0 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005AF4 24D9                       		move.l	(a1)+,(a2)+
00005AF6 24D9                       		move.l	(a1)+,(a2)+
00005AF8 24D9                       		move.l	(a1)+,(a2)+
00005AFA                            
00005AFA                            locret_49E6:
00005AFA 4E75                       		rts	
00005AFC                            ; ===========================================================================
00005AFC                            
00005AFC                            loc_49E8:
00005AFC 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005B00 0C40 008A                  		cmpi.w	#$8A,d0
00005B04 6500                       		blo.s	loc_49F4
00005B06 5241                       		addq.w	#1,d1
00005B08                            
00005B08                            loc_49F4:
00005B08 C2FC 002A                  		mulu.w	#$2A,d1
00005B0C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005B12 D2C1                       		adda.w	d1,a1
00005B14 0240 007F                  		andi.w	#$7F,d0
00005B18 0880 0000                  		bclr	#0,d0
00005B1C 6700                       		beq.s	loc_4A18
00005B1E 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005B22 24D1                       		move.l	(a1),(a2)+
00005B24 24E9 0004                  		move.l	4(a1),(a2)+
00005B28 24E9 0008                  		move.l	8(a1),(a2)+
00005B2C                            
00005B2C                            loc_4A18:
00005B2C D2FC 000C                  		adda.w	#$C,a1
00005B30 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005B34 0C40 000A                  		cmpi.w	#$A,d0
00005B38 6500                       		blo.s	loc_4A2E
00005B3A 0440 000A                  		subi.w	#$A,d0
00005B3E 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005B42                            
00005B42                            loc_4A2E:
00005B42 3200                       		move.w	d0,d1
00005B44 D040                       		add.w	d0,d0
00005B46 D041                       		add.w	d1,d0
00005B48 D2C0                       		adda.w	d0,a1
00005B4A 24D9                       		move.l	(a1)+,(a2)+
00005B4C 34D9                       		move.w	(a1)+,(a2)+
00005B4E 4E75                       		rts	
00005B50                            ; End of function PalCycle_SS
00005B50                            
00005B50                            ; ===========================================================================
00005B50 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005B60                            
00005B60 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005B70 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005B80 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005B90 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005BA0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005BB0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005BC0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005BD0                            		even
00005BD0 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005BDE                            		even
00005BDE                            
00005BDE                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005C26                            		even
00005C26                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005CF8                            		even
00005CF8                            
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            ; Subroutine to	make the special stage background animated
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            
00005CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CF8                            
00005CF8                            
00005CF8                            SS_BGAnimate:
00005CF8 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005CFC 6600                       		bne.s	loc_4BF6
00005CFE 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005D04 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D0A                            
00005D0A                            loc_4BF6:
00005D0A 0C40 0008                  		cmpi.w	#8,d0
00005D0E 6400                       		bhs.s	loc_4C4E
00005D10 0C40 0006                  		cmpi.w	#6,d0
00005D14 6600                       		bne.s	loc_4C10
00005D16 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005D1A 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005D1E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D24                            
00005D24                            loc_4C10:
00005D24 7000                       		moveq	#0,d0
00005D26 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005D2A 4440                       		neg.w	d0
00005D2C 4840                       		swap	d0
00005D2E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005D34 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D38 7609                       		moveq	#9,d3
00005D3A                            
00005D3A                            loc_4C26:
00005D3A 302B 0002                  		move.w	2(a3),d0
00005D3E 6100 DE02                  		bsr.w	CalcSine
00005D42 7400                       		moveq	#0,d2
00005D44 1419                       		move.b	(a1)+,d2
00005D46 C1C2                       		muls.w	d2,d0
00005D48 E080                       		asr.l	#8,d0
00005D4A 36C0                       		move.w	d0,(a3)+
00005D4C 1419                       		move.b	(a1)+,d2
00005D4E 4882                       		ext.w	d2
00005D50 D55B                       		add.w	d2,(a3)+
00005D52 51CB FFE6                  		dbf	d3,loc_4C26
00005D56 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D5A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005D60 6000                       		bra.s	loc_4C7E
00005D62                            ; ===========================================================================
00005D62                            
00005D62                            loc_4C4E:
00005D62 0C40 000C                  		cmpi.w	#$C,d0
00005D66 6600                       		bne.s	loc_4C74
00005D68 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005D6C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005D70 243C 0001 8000             		move.l	#$18000,d2
00005D76 7206                       		moveq	#6,d1
00005D78                            
00005D78                            loc_4C64:
00005D78 2013                       		move.l	(a3),d0
00005D7A 9082                       		sub.l	d2,d0
00005D7C 26C0                       		move.l	d0,(a3)+
00005D7E 0482 0000 2000             		subi.l	#$2000,d2
00005D84 51C9 FFF2                  		dbf	d1,loc_4C64
00005D88                            
00005D88                            loc_4C74:
00005D88 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005D8C 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005D92                            
00005D92                            loc_4C7E:
00005D92 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005D96 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005D9A 4440                       		neg.w	d0
00005D9C 4840                       		swap	d0
00005D9E 7600                       		moveq	#0,d3
00005DA0 161A                       		move.b	(a2)+,d3
00005DA2 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005DA6 4442                       		neg.w	d2
00005DA8 0242 00FF                  		andi.w	#$FF,d2
00005DAC E54A                       		lsl.w	#2,d2
00005DAE                            
00005DAE                            loc_4C9A:
00005DAE 301B                       		move.w	(a3)+,d0
00005DB0 544B                       		addq.w	#2,a3
00005DB2 7200                       		moveq	#0,d1
00005DB4 121A                       		move.b	(a2)+,d1
00005DB6 5341                       		subq.w	#1,d1
00005DB8                            
00005DB8                            loc_4CA4:
00005DB8 2380 2000                  		move.l	d0,(a1,d2.w)
00005DBC 5842                       		addq.w	#4,d2
00005DBE 0242 03FC                  		andi.w	#$3FC,d2
00005DC2 51C9 FFF4                  		dbf	d1,loc_4CA4
00005DC6 51CB FFE6                  		dbf	d3,loc_4C9A
00005DCA 4E75                       		rts	
00005DCC                            ; End of function SS_BGAnimate
00005DCC                            
00005DCC                            ; ===========================================================================
00005DCC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005DD8                            		even
00005DD8 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005DE0                            		even
00005DE0 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005DF4                            		even
00005DF4                            
00005DF4                            ; ===========================================================================
00005DF4                            
00005DF4                            ; ---------------------------------------------------------------------------
00005DF4                            ; Continue screen
00005DF4                            ; ---------------------------------------------------------------------------
00005DF4                            
00005DF4                            GM_Continue:
00005DF4 6100 C3DC                  		bsr.w	PaletteFadeOut
00005DF8 46FC 2700                  		disable_ints
00005DFC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005E00 0200 00BF                  		andi.b	#$BF,d0
00005E04 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005E0A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005E10 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005E14 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005E18 6100 B3B6                  		bsr.w	ClearScreen
00005E1C 31FC C800 C8FC             		ResetDMAQueue
00005E22 43F8 D000                  		lea	(v_objspace).w,a1
00005E26 7000                       		moveq	#0,d0
00005E28 323C 07FF                  		move.w	#$7FF,d1
00005E2C                            	Cont_ClrObjRam:
00005E2C 22C0                       		move.l	d0,(a1)+
00005E2E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005E32                            
00005E3C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005E42 6100 B50A                  		bsr.w	NemDec
00005E50 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005E56 6100 B4F6                  		bsr.w	NemDec
00005E64 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005E6A 6100 B4E2                  		bsr.w	NemDec
00005E6E 720A                       		moveq	#10,d1
00005E70 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005E76 7012                       		moveq	#palid_Continue,d0
00005E78 6100 C602                  		bsr.w	PalLoad1	; load continue	screen palette
00005E84 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005E8A 42B8 F700                  		clr.l	(v_screenposx).w
00005E8E 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005E96 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005E9C 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005EA2 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005EA8 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005EAE 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005EB4 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005EBA 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005EC0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005EC6 4EB9 0000 0000             		jsr	(BuildSprites).l
00005ECC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005ED0 0000 0040                  		ori.b	#$40,d0
00005ED4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005EDA 6100 C250                  		bsr.w	PaletteFadeIn
00005EDE                            
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            ; Continue screen main loop
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            
00005EDE                            Cont_MainLoop:
00005EDE 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005EE4 6100 DC2A                  		bsr.w	WaitForVBla
00005EE8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005EEE 6400                       		bhs.s	loc_4DF2
00005EF0 46FC 2700                  		disable_ints
00005EF4 3238 F614                  		move.w	(v_demolength).w,d1
00005EF8 82FC 003C                  		divu.w	#$3C,d1
00005EFC 0281 0000 000F             		andi.l	#$F,d1
00005F02 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005F08 46FC 2300                  		enable_ints
00005F0C                            
00005F0C                            loc_4DF2:
00005F0C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005F12 4EB9 0000 0000             		jsr	(BuildSprites).l
00005F18 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005F1E 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005F20 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005F26 64B6                       		bhs.s	Cont_MainLoop
00005F28 4A78 F614                  		tst.w	(v_demolength).w
00005F2C 6600 FFB0                  		bne.w	Cont_MainLoop
00005F30 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005F36 4E75                       		rts	
00005F38                            ; ===========================================================================
00005F38                            
00005F38                            Cont_GotoLevel:
00005F38 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005F3E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005F44 7000                       		moveq	#0,d0
00005F46 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005F4A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005F4E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005F52 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005F56 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005F5A 4E75                       		rts	
00005F5C                            ; ===========================================================================
00005F5C                            
00005F5C                            		include	"_incObj\80 Continue Screen Elements.asm"
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            ; Object 80 - Continue screen elements
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            
00005F5C                            ContScrItem:
00005F5C 7000                       		moveq	#0,d0
00005F5E 1028 0024                  		move.b	$24(a0),d0
00005F62 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005F66 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005F6A                            ; ===========================================================================
00005F6A 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005F6C 0000                       		dc.w CSI_Display-CSI_Index
00005F6E 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005F70 0000                       		dc.w CSI_ChkDel-CSI_Index
00005F72                            ; ===========================================================================
00005F72                            
00005F72                            CSI_Main:	; Routine 0
00005F72 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F76 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005F7E 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005F84 117C 0000 0001             		move.b	#0,obRender(a0)
00005F8A 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005F90 317C 0120 0008             		move.w	#$120,obX(a0)
00005F96 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005F9C 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005FA2                            
00005FA2                            CSI_Display:	; Routine 2
00005FA2 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005FA8                            ; ===========================================================================
00005FA8                            
00005FA8                            	CSI_MiniSonicPos:
00005FA8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005FBA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005FC6                            
00005FC6                            CSI_MakeMiniSonic:
00005FC6                            		; Routine 4
00005FC6 2248                       		movea.l	a0,a1
00005FC8 45F9 0000 5FA8             		lea	(CSI_MiniSonicPos).l,a2
00005FCE 7200                       		moveq	#0,d1
00005FD0 1238 FE18                  		move.b	(v_continues).w,d1
00005FD4 5501                       		subq.b	#2,d1
00005FD6 6400                       		bcc.s	CSI_MoreThan1
00005FD8 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005FDE                            
00005FDE                            	CSI_MoreThan1:
00005FDE 7601                       		moveq	#1,d3
00005FE0 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005FE4 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005FE6                            
00005FE6 7600                       		moveq	#0,d3
00005FE8 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005FEA                            
00005FEA                            	CSI_FewerThan16:
00005FEA 1401                       		move.b	d1,d2
00005FEC 0202 0001                  		andi.b	#1,d2
00005FF0                            
00005FF0                            CSI_MiniSonicLoop:
00005FF0 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005FF4 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005FF8 4A02                       		tst.b	d2		; do you have an even number of continues?
00005FFA 6700                       		beq.s	CSI_Even	; if yes, branch
00005FFC 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00006002                            
00006002                            	CSI_Even:
00006002 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00006008 137C 0006 001A             		move.b	#6,obFrame(a1)
0000600E 137C 0006 0024             		move.b	#6,obRoutine(a1)
00006014 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
0000601C 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00006022 137C 0000 0001             		move.b	#0,obRender(a1)
00006028 43E9 0040                  		lea	$40(a1),a1
0000602C 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00006030                            
00006030 43E9 FFC0                  		lea	-$40(a1),a1
00006034 1343 0028                  		move.b	d3,obSubtype(a1)
00006038                            
00006038                            CSI_ChkDel:	; Routine 6
00006038 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
0000603C 6700                       		beq.s	CSI_Animate	; if yes, branch
0000603E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00006044 6500                       		bcs.s	CSI_Animate	; if not, branch
00006046 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000604A 0200 0001                  		andi.b	#1,d0
0000604E 6600                       		bne.s	CSI_Animate
00006050 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00006054 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006056 4E75                       		rts	
00006058                            
00006058                            CSI_Animate:
00006058 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000605C 0200 000F                  		andi.b	#$F,d0
00006060 6600                       		bne.s	CSI_Display2
00006062 0868 0000 001A             		bchg	#0,obFrame(a0)
00006068                            
00006068                            	CSI_Display2:
00006068 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000606E                            ; ===========================================================================
0000606E                            
0000606E                            CSI_Delete:
0000606E 4EF9 0000 0000             		jmp	(DeleteObject).l
0000606E 4EF9 0000 0000             		jmp	(DeleteObject).l
00006074                            		include	"_incObj\81 Continue Screen Sonic.asm"
00006074                            ; ---------------------------------------------------------------------------
00006074                            ; Object 81 - Sonic on the continue screen
00006074                            ; ---------------------------------------------------------------------------
00006074                            
00006074                            ContSonic:
00006074 7000                       		moveq	#0,d0
00006076 1028 0024                  		move.b	obRoutine(a0),d0
0000607A 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
0000607E 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00006082 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006088                            ; ===========================================================================
00006088 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
0000608A 0000                       		dc.w CSon_ChkLand-CSon_Index
0000608C 0000                       		dc.w CSon_Animate-CSon_Index
0000608E 0000                       		dc.w CSon_Run-CSon_Index
00006090                            ; ===========================================================================
00006090                            
00006090                            CSon_Main:	; Routine 0
00006090 5428 0024                  		addq.b	#2,obRoutine(a0)
00006094 317C 00A0 0008             		move.w	#$A0,obX(a0)
0000609A 317C 00C0 000C             		move.w	#$C0,obY(a0)
000060A0 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000060A8 317C 0780 0002             		move.w	#$780,obGfx(a0)
000060AE 117C 0004 0001             		move.b	#4,obRender(a0)
000060B4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000060BA 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000060C0 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000060C6                            
000060C6                            CSon_ChkLand:	; Routine 2
000060C6 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000060CC 6600                       		bne.s	CSon_ShowFall	; if not, branch
000060CE                            
000060CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000060D2 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000060D6 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000060DE 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000060E4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000060EA 6000                       		bra.s	CSon_Animate
000060EC                            
000060EC                            CSon_ShowFall:
000060EC 4EB9 0000 0000             		jsr	(SpeedToPos).l
000060F2 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000060F8 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060FE                            ; ===========================================================================
000060FE                            
000060FE                            CSon_Animate:	; Routine 4
000060FE 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006102 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006104 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000610A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006110                            
00006110                            CSon_GetUp:
00006110 5428 0024                  		addq.b	#2,obRoutine(a0)
00006114 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000611C 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006122 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006128 4268 0020                  		clr.w	obInertia(a0)
0000612C 5168 000C                  		subq.w	#8,obY(a0)
00006138                            
00006138                            CSon_Run:	; Routine 6
00006138 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000613E 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00006140 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006146 6000                       		bra.s	CSon_ShowRun
00006148                            
00006148                            CSon_AddInertia:
00006148 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
0000614E                            
0000614E                            CSon_ShowRun:
0000614E 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006154 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000615A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000615A 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006160                            		include	"_anim\Continue Screen Sonic.asm"
00006160                            ; ---------------------------------------------------------------------------
00006160                            ; Animation script - Sonic on the continue screen
00006160                            ; ---------------------------------------------------------------------------
00006160 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006162 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
0000616C                            		even
0000616C                            		even
0000616C                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000616C                            ; --------------------------------------------------------------------------------
0000616C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000616C                            ; --------------------------------------------------------------------------------
0000616C                            
0000616C                            SME_phED7:	
0000616C 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
00006170 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
00006174 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00006178 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
0000617C 0B                         SME_phED7_10:	dc.b $B	
0000617D F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
00006182 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006187 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
0000618C F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
00006191 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
00006196 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
0000619B F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
000061A0 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
000061A5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
000061AA 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
000061AF 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
000061B4 03                         SME_phED7_48:	dc.b 3	
000061B5 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000061BA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061BF F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061C4 03                         SME_phED7_58:	dc.b 3	
000061C5 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000061CA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061CF F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061D4 03                         SME_phED7_68:	dc.b 3	
000061D5 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000061DA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061DF F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061E4 02                         SME_phED7_78:	dc.b 2	
000061E5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000061EA 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
000061EF 01                         SME_phED7_83:	dc.b 1	
000061F0 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000061F5 01                         SME_phED7_89:	dc.b 1	
000061F6 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000061FB 01                         SME_phED7_8F:	dc.b 1	
000061FC 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006202 00                         		even
00006202 00                         		even
00006202                            
00006202                            ; ===========================================================================
00006202                            ; ---------------------------------------------------------------------------
00006202                            ; Ending sequence in Green Hill	Zone
00006202                            ; ---------------------------------------------------------------------------
00006202                            
00006202                            GM_Ending:
0000620A 6100 BFC6                  		bsr.w	PaletteFadeOut
0000620E                            
0000620E 43F8 D000                  		lea	(v_objspace).w,a1
00006212 7000                       		moveq	#0,d0
00006214 323C 07FF                  		move.w	#$7FF,d1
00006218                            	End_ClrObjRam:
00006218 22C0                       		move.l	d0,(a1)+
0000621A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000621E                            
0000621E 43F8 F628                  		lea	($FFFFF628).w,a1
00006222 7000                       		moveq	#0,d0
00006224 323C 0015                  		move.w	#$15,d1
00006228                            	End_ClrRam1:
00006228 22C0                       		move.l	d0,(a1)+
0000622A 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
0000622E                            
0000622E 43F8 F700                  		lea	(v_screenposx).w,a1
00006232 7000                       		moveq	#0,d0
00006234 323C 003F                  		move.w	#$3F,d1
00006238                            	End_ClrRam2:
00006238 22C0                       		move.l	d0,(a1)+
0000623A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000623E                            
0000623E 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00006242 7000                       		moveq	#0,d0
00006244 323C 0047                  		move.w	#$47,d1
00006248                            	End_ClrRam3:
00006248 22C0                       		move.l	d0,(a1)+
0000624A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000624E                            
0000624E 46FC 2700                  		disable_ints
00006252 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006256 0200 00BF                  		andi.b	#$BF,d0
0000625A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006260 6100 AF6E                  		bsr.w	ClearScreen
00006264 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000626A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000626E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00006272 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006276 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000627A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000627E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00006282 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006286 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000628C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00006290 31FC 001E FE14             		move.w	#30,(v_air).w
00006296 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
0000629C 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
000062A2 6700                       		beq.s	End_LoadData	; if yes, branch
000062A4 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000062AA                            
000062AA                            End_LoadData:
000062AA 7000                       		moveq	#plcid_Ending,d0
000062AC 6100 B5F8                  		bsr.w	QuickPLC	; load ending sequence patterns
000062B0 4EB9 0000 0000             		jsr	(Hud_Base).l
000062B6 6100 0000                  		bsr.w	LevelSizeLoad
000062BA 6100 0000                  		bsr.w	DeformLayers
000062BE 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000062C4 6100 0000                  		bsr.w	LevelDataLoad
000062C8 6100 0000                  		bsr.w	LoadTilesFromStart
000062CC 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000062D4 46FC 2300                  		enable_ints
000062D8 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000062DE 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000062E2 6100 B772                  		bsr.w	KosDec
000062E6 4EB9 0000 0000             		jsr		LoadPlayerPal
000062EC 6100 C18E                  		bsr.w	PalLoad1	; load Sonic's palette
000062F8 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000062FE 6700                       		beq.s	End_LoadSonic	; if not, branch
00006300 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006306                            
00006306                            End_LoadSonic:
00006306 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000630C 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006312 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00006318 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
0000631E 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
00006324 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000632A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006330 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006336 4EB9 0000 0000             		jsr	(BuildSprites).l
0000633C 7000                       		moveq	#0,d0
0000633E 31C0 FE20                  		move.w	d0,(v_rings).w
00006342 21C0 FE22                  		move.l	d0,(v_time).w
00006346 11C0 FE1B                  		move.b	d0,(v_lifecount).w
0000634A 11C0 FE2C                  		move.b	d0,(v_shield).w
0000634E 11C0 FE2D                  		move.b	d0,(v_invinc).w
00006352 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006356 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000635A 31C0 FE08                  		move.w	d0,(v_debuguse).w
0000635E 31C0 FE02                  		move.w	d0,(f_restart).w
00006362 31C0 FE04                  		move.w	d0,(v_framecount).w
00006366 6100 EEBC                  		bsr.w	OscillateNumInit
0000636A 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
00006370 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006376 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
0000637C 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00006382 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006388 6100 D786                  		bsr.w	WaitForVBla
0000638C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006390 0000 0040                  		ori.b	#$40,d0
00006394 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000639A 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000063A0 6100 BD8A                  		bsr.w	PaletteFadeIn
000063A4                            
000063A4                            ; ---------------------------------------------------------------------------
000063A4                            ; Main ending sequence loop
000063A4                            ; ---------------------------------------------------------------------------
000063A4                            
000063A4                            End_MainLoop:
000063A4 6100 AF06                  		bsr.w	PauseGame
000063A8 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000063AE 6100 D760                  		bsr.w	WaitForVBla
000063B2 5278 FE04                  		addq.w	#1,(v_framecount).w
000063B6 6100 0000                  		bsr.w	End_MoveSonic
000063BA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000063C0 6100 0000                  		bsr.w	DeformLayers
000063C4 4EB9 0000 0000             		jsr	(BuildSprites).l
000063CA 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000063D0 6100 B94C                  		bsr.w	PaletteCycle
000063D4 6100 EEA4                  		bsr.w	OscillateNumDo
000063D8 6100 EF30                  		bsr.w	SynchroAnimate
000063DC 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000063E2 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000063E4                            
000063E4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000063EA 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000063F0 4E75                       		rts	
000063F2                            ; ===========================================================================
000063F2                            
000063F2                            End_ChkEmerald:
000063F2 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000063F6 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
000063FA                            
000063FA 4278 FE02                  		clr.w	(f_restart).w
000063FE 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006404 4278 F794                  		clr.w	(v_palchgspeed).w
00006408                            
00006408                            	End_AllEmlds:
00006408 6100 AEA2                  		bsr.w	PauseGame
0000640C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006412 6100 D6FC                  		bsr.w	WaitForVBla
00006416 5278 FE04                  		addq.w	#1,(v_framecount).w
0000641A 6100 0000                  		bsr.w	End_MoveSonic
0000641E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006424 6100 0000                  		bsr.w	DeformLayers
00006428 4EB9 0000 0000             		jsr	(BuildSprites).l
0000642E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006434 6100 EE44                  		bsr.w	OscillateNumDo
00006438 6100 EED0                  		bsr.w	SynchroAnimate
0000643C 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006440 6A00                       		bpl.s	End_SlowFade
00006442 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006448 6100 BED2                  		bsr.w	WhiteOut_ToWhite
0000644C                            
0000644C                            	End_SlowFade:
0000644C 4A78 FE02                  		tst.w	(f_restart).w
00006450 6700 FFB6                  		beq.w	End_AllEmlds
00006454 4278 FE02                  		clr.w	(f_restart).w
00006458 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
0000645E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006464 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000646A 47F8 F700                  		lea	(v_screenposx).w,a3
0000646E 49F8 A400                  		lea	(v_lvllayout).w,a4
00006472 343C 4000                  		move.w	#$4000,d2
00006476 6100 0000                  		bsr.w	DrawChunks
0000647A 7015                       		moveq	#palid_Ending,d0
0000647C 6100 BFFE                  		bsr.w	PalLoad1	; load ending palette
00006480 6100 BDCE                  		bsr.w	PaletteWhiteIn
00006484 6000 FF1E                  		bra.w	End_MainLoop
00006488                            
00006488                            ; ---------------------------------------------------------------------------
00006488                            ; Subroutine controlling Sonic on the ending sequence
00006488                            ; ---------------------------------------------------------------------------
00006488                            
00006488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006488                            
00006488                            
00006488                            End_MoveSonic:
00006488 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000648C 6600                       		bne.s	End_MoveSon2
0000648E 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006494 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006496                            
00006496 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000649A 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000064A0 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000064A6 4E75                       		rts	
000064A8                            ; ===========================================================================
000064A8                            
000064A8                            End_MoveSon2:
000064A8 5500                       		subq.b	#2,d0
000064AA 6600                       		bne.s	End_MoveSon3
000064AC 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000064B2 6500                       		blo.s	End_MoveSonExit	; if not, branch
000064B4                            
000064B4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000064B8 7000                       		moveq	#0,d0
000064BA 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000064BE 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000064C2 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000064C6 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000064CC 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000064D2 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000064D8 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000064DE 4E75                       		rts	
000064E0                            ; ===========================================================================
000064E0                            
000064E0                            End_MoveSon3:
000064E0 5500                       		subq.b	#2,d0
000064E2 6600                       		bne.s	End_MoveSonExit
000064E4 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000064E8 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000064EE 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000064F4 4278 D024                  		clr.w	(v_player+obRoutine).w
000064F8                            
000064F8                            End_MoveSonExit:
000064F8 4E75                       		rts	
000064FA                            ; End of function End_MoveSonic
000064FA                            
000064FA                            ; ===========================================================================
000064FA                            
000064FA                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            ; Object 87 - Sonic on ending sequence
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            
000064FA                            EndSonic:
000064FA 7000                       		moveq	#0,d0
000064FC 1028 0025                  		move.b	ob2ndRout(a0),d0
00006500 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006504 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006508 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000650E                            ; ===========================================================================
0000650E 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006512 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006516 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000651A 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
0000651E 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006522                            
00006522 =00000030                  eson_time:	equ $30	; time to wait between events
00006522                            ; ===========================================================================
00006522                            
00006522                            ESon_Main:	; Routine 0
00006522 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006528 6700                       		beq.s	ESon_Main2	; if yes, branch
0000652A 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006530 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006536 4E75                       		rts	
00006538                            ; ===========================================================================
00006538                            
00006538                            ESon_Main2:
00006538 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000653C 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006544 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000654A 117C 0004 0001             		move.b	#4,obRender(a0)
00006550 4228 0022                  		clr.b	obStatus(a0)
00006554 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000655A 117C 0000 001A             		move.b	#0,obFrame(a0)
00006560 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006566                            
00006566                            ESon_MakeEmeralds:
00006566                            		; Routine 2
00006566 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000656A 6600                       		bne.s	ESon_Wait
0000656C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006570 317C 0001 001C             		move.w	#1,obAnim(a0)
00006576 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000657C                            
0000657C                            	ESon_Wait:
0000657C 4E75                       		rts	
0000657E                            ; ===========================================================================
0000657E                            
0000657E                            Obj87_LookUp:	; Routine 6
0000657E 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006586 6600                       		bne.s	locret_5480
00006588 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
0000658E 317C 005A 0030             		move.w	#90,eson_time(a0)
00006594 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006598                            
00006598                            locret_5480:
00006598 4E75                       		rts	
0000659A                            ; ===========================================================================
0000659A                            
0000659A                            Obj87_ClrObjRam:
0000659A                            		; Routine 8
0000659A 5368 0030                  		subq.w	#1,eson_time(a0)
0000659E 6600                       		bne.s	ESon_Wait2
000065A0 43F8 D400                  		lea	(v_objspace+$400).w,a1
000065A4 323C 00FF                  		move.w	#$FF,d1
000065A8                            
000065A8                            Obj87_ClrLoop:
000065A8 4299                       		clr.l	(a1)+
000065AA 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000065AE 31FC 0001 FE02             		move.w	#1,(f_restart).w
000065B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065B8 117C 0001 001C             		move.b	#1,obAnim(a0)
000065BE 317C 003C 0030             		move.w	#60,eson_time(a0)
000065C4                            
000065C4                            ESon_Wait2:
000065C4 4E75                       		rts	
000065C6                            ; ===========================================================================
000065C6                            
000065C6                            Obj87_MakeLogo:	; Routine $C
000065C6 5368 0030                  		subq.w	#1,eson_time(a0)
000065CA 6600                       		bne.s	ESon_Wait3
000065CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065D0 317C 00B4 0030             		move.w	#180,eson_time(a0)
000065D6 117C 0002 001C             		move.b	#2,obAnim(a0)
000065DC 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000065E2                            
000065E2                            ESon_Wait3:
000065E2 4E75                       		rts	
000065E4                            ; ===========================================================================
000065E4                            
000065E4                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000065E4 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000065EA 4EF9 0000 0000             		jmp	(AnimateSprite).l
000065F0                            ; ===========================================================================
000065F0                            
000065F0                            Obj87_Leap:	; Routine $10
000065F0 5368 0030                  		subq.w	#1,eson_time(a0)
000065F4 6600                       		bne.s	ESon_Wait4
000065F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065FA 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006602 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006608 117C 0004 0001             		move.b	#4,obRender(a0)
0000660E 4228 0022                  		clr.b	obStatus(a0)
00006612 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006618 117C 0005 001A             		move.b	#5,obFrame(a0)
0000661E 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006624 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000662A 60B8                       		bra.s	Obj87_Animate
0000662C                            ; ===========================================================================
0000662C                            
0000662C                            ESon_Wait4:
0000662C 4E75                       		rts	
0000662C 4E75                       		rts	
0000662E                            		include "_anim\Ending Sequence Sonic.asm"
0000662E                            ; ---------------------------------------------------------------------------
0000662E                            ; Animation script - Sonic on the ending sequence
0000662E                            ; ---------------------------------------------------------------------------
0000662E 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006630 0000                       		dc.w byte_552A-AniScript_ESon
00006632 0000                       		dc.w byte_5534-AniScript_ESon
00006634 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006642 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000664C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006654                            		even
00006654                            		even
00006654                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006654                            ; ---------------------------------------------------------------------------
00006654                            ; Object 88 - chaos emeralds on	the ending sequence
00006654                            ; ---------------------------------------------------------------------------
00006654                            
00006654                            EndChaos:
00006654 7000                       		moveq	#0,d0
00006656 1028 0024                  		move.b	obRoutine(a0),d0
0000665A 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
0000665E 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006662 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006668                            ; ===========================================================================
00006668 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000666A 0000                       		dc.w ECha_Move-ECha_Index
0000666C                            
0000666C =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000666C =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000666C =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000666C =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000666C                            ; ===========================================================================
0000666C                            
0000666C                            ECha_Main:	; Routine 0
0000666C 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006672 6700                       		beq.s	ECha_CreateEms
00006674 588F                       		addq.l	#4,sp
00006676 4E75                       		rts	
00006678                            ; ===========================================================================
00006678                            
00006678                            ECha_CreateEms:
00006678 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
0000667E 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006684 2248                       		movea.l	a0,a1
00006686 7600                       		moveq	#0,d3
00006688 7401                       		moveq	#1,d2
0000668A 7205                       		moveq	#5,d1
0000668C                            
0000668C                            	ECha_LoadLoop:
0000668C 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006690 5429 0024                  		addq.b	#2,obRoutine(a1)
00006694 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000669C 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000066A2 137C 0004 0001             		move.b	#4,obRender(a1)
000066A8 337C 0080 0018             		move.w	#$80,obPriority(a1)
000066AE 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000066B4 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000066BA 1342 001C                  		move.b	d2,obAnim(a1)
000066BE 1342 001A                  		move.b	d2,obFrame(a1)
000066C2 5202                       		addq.b	#1,d2
000066C4 1343 0026                  		move.b	d3,obAngle(a1)
000066C8 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000066CC 43E9 0040                  		lea	$40(a1),a1
000066D0 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000066D4                            
000066D4                            ECha_Move:	; Routine 2
000066D4 3028 003E                  		move.w	echa_angle(a0),d0
000066D8 D168 0026                  		add.w	d0,obAngle(a0)
000066DC 1028 0026                  		move.b	obAngle(a0),d0
000066E0 4EB9 0000 3B42             		jsr	(CalcSine).l
000066E6 7800                       		moveq	#0,d4
000066E8 1828 003C                  		move.b	echa_radius(a0),d4
000066EC C3C4                       		muls.w	d4,d1
000066EE E081                       		asr.l	#8,d1
000066F0 C1C4                       		muls.w	d4,d0
000066F2 E080                       		asr.l	#8,d0
000066F4 D268 0038                  		add.w	echa_origX(a0),d1
000066F8 D068 003A                  		add.w	echa_origY(a0),d0
000066FC 3141 0008                  		move.w	d1,obX(a0)
00006700 3140 000C                  		move.w	d0,obY(a0)
00006704                            
00006704                            	ECha_Expand:
00006704 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000670A 6700                       		beq.s	ECha_Rotate
0000670C 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006712                            
00006712                            	ECha_Rotate:
00006712 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006718 6700                       		beq.s	ECha_Rise
0000671A 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006720                            
00006720                            	ECha_Rise:
00006720 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006726 6700                       		beq.s	ECha_End
00006728 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000672C                            
0000672C                            ECha_End:
0000672C 4E75                       		rts	
0000672C 4E75                       		rts	
0000672E                            		include	"_incObj\89 Ending Sequence STH.asm"
0000672E                            ; ---------------------------------------------------------------------------
0000672E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000672E                            ; ---------------------------------------------------------------------------
0000672E                            
0000672E                            EndSTH:
0000672E 7000                       		moveq	#0,d0
00006730 1028 0024                  		move.b	$24(a0),d0
00006734 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006738 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000673C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006742                            ; ===========================================================================
00006742 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006744 0000                       		dc.w ESth_Move-ESth_Index
00006746 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006748                            
00006748 =00000030                  esth_time:	equ $30		; time until exit
00006748                            ; ===========================================================================
00006748                            
00006748                            ESth_Main:	; Routine 0
00006748 5428 0024                  		addq.b	#2,obRoutine(a0)
0000674C 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006752 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006758 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006760 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006766 117C 0000 0001             		move.b	#0,obRender(a0)
0000676C 317C 0000 0018             		move.w	#0,obPriority(a0)
00006772                            
00006772                            ESth_Move:	; Routine 2
00006772 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006778 6700                       		beq.s	ESth_Delay	; if yes, branch
0000677A 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006780 4E75                       		rts
00006782                            
00006782                            ESth_Delay:
00006782 5428 0024                  		addq.b	#2,obRoutine(a0)
00006786 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000678C                            
0000678C                            ESth_GotoCredits:
0000678C                            		; Routine 4
0000678C 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006790 6A00                       		bpl.s	ESth_Wait
00006792 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006798                            
00006798                            	ESth_Wait:
00006798 4E75                       		rts
0000679A                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            ; Sprite mappings - Sonic on the ending	sequence
0000679A                            ; ---------------------------------------------------------------------------
0000679A                            Map_ESon_internal:
0000679A 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000679C 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
0000679E 0000                       		dc.w M_ESon_Up-Map_ESon_internal
000067A0 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
000067A2 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
000067A4 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
000067A6 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
000067A8 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
000067AA 02                         M_ESon_Hold1:	dc.b 2
000067AB EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000067B0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000067B5 03                         M_ESon_Hold2:	dc.b 3
000067B6 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000067BB EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000067C0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000067C5 02                         M_ESon_Up:	dc.b 2
000067C6 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000067CB FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000067D0 02                         M_ESon_Conf1:	dc.b 2
000067D1 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000067D6 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000067DB 02                         M_ESon_Conf2:	dc.b 2
000067DC EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000067E1 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000067E6 03                         M_ESon_Leap1:	dc.b 3
000067E7 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000067EC EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000067F1 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000067F6 07                         M_ESon_Leap2:	dc.b 7
000067F7 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000067FC BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006801 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006806 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000680B DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006810 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006815 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000681A 18                         M_ESon_Leap3:	dc.b $18
0000681B 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006820 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006825 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000682A 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000682F A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006834 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006839 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000683E A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006843 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006848 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000684D A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006852 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006857 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000685C B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006861 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006866 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000686B D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006870 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006875 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000687A E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000687F D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006884 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00006889 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000688E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006894 00                         		even
00006894 00                         		even
00006894                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006894                            ; --------------------------------------------------------------------------------
00006894                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006894                            ; --------------------------------------------------------------------------------
00006894                            
00006894                            SME_0ZTmS:	
00006894 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006898 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000689C 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000068A0 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000068A2 01                         SME_0ZTmS_E:	dc.b 1	
000068A3 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000068A8 01                         SME_0ZTmS_14:	dc.b 1	
000068A9 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000068AE 01                         SME_0ZTmS_1A:	dc.b 1	
000068AF F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000068B4 01                         SME_0ZTmS_20:	dc.b 1	
000068B5 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000068BA 01                         SME_0ZTmS_26:	dc.b 1	
000068BB F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000068C0 01                         SME_0ZTmS_2C:	dc.b 1	
000068C1 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000068C6 01                         SME_0ZTmS_32:	dc.b 1	
000068C7 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000068CC                            		even
000068CC                            		even
000068CC                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000068CC                            ; ---------------------------------------------------------------------------
000068CC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000068CC                            ; ---------------------------------------------------------------------------
000068CC                            Map_ESth_internal:
000068CC 0000                       		dc.w M_ESth_1-Map_ESth_internal
000068CE 03                         M_ESth_1:	dc.b 3
000068CF F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000068D4 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000068D9 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000068DE                            		even
000068DE                            		even
000068DE                            
000068DE                            ; ===========================================================================
000068DE                            ; ---------------------------------------------------------------------------
000068DE                            ; Credits ending sequence
000068DE                            ; ---------------------------------------------------------------------------
000068DE                            
000068DE                            GM_Credits:
000068DE                            		
000068DE 6100 AEB8                  		bsr.w	ClearPLC
000068E2 6100 B8EE                  		bsr.w	PaletteFadeOut
000068E6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000068EC 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000068F0 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000068F4 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000068F8 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000068FC 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006900 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006904 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006908 4238 F64E                  		clr.b	(f_wtr_state).w
0000690C 6100 A8C2                  		bsr.w	ClearScreen
00006910                            
00006910 43F8 D000                  		lea	(v_objspace).w,a1
00006914 7000                       		moveq	#0,d0
00006916 323C 07FF                  		move.w	#$7FF,d1
0000691A                            	TryAg_ClrObjRam:
0000691A 22C0                       		move.l	d0,(a1)+
0000691C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006920                            
00006920 7000                       		moveq	#plcid_TryAgain,d0
00006922 6100 AF82                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006926                            
00006926 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000692A 7000                       		moveq	#0,d0
0000692C 323C 001F                  		move.w	#$1F,d1
00006930                            	TryAg_ClrPal:
00006930 22C0                       		move.l	d0,(a1)+
00006932 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006936                            
00006936 7015                       		moveq	#palid_Ending,d0
00006938 6100 BB42                  		bsr.w	PalLoad1	; load ending palette
0000693C 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006940 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006946 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000694C 4EB9 0000 0000             		jsr	(BuildSprites).l
00006952 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006958 6100 B7D2                  		bsr.w	PaletteFadeIn
0000695C                            
0000695C                            ; ---------------------------------------------------------------------------
0000695C                            ; "TRY AGAIN" and "END"	screen main loop
0000695C                            ; ---------------------------------------------------------------------------
0000695C                            TryAg_MainLoop:
0000695C 6100 A94E                  		bsr.w	PauseGame
00006960 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006966 6100 D1A8                  		bsr.w	WaitForVBla
0000696A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006970 4EB9 0000 0000             		jsr	(BuildSprites).l
00006976 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000697C 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000697E 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006982 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006984 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000698A 67D0                       		beq.s	TryAg_MainLoop
0000698C                            
0000698C                            TryAg_Exit:
0000698C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006992 4E75                       		rts	
00006994                            
00006994                            ; ===========================================================================
00006994                            
00006994                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006994                            ; ---------------------------------------------------------------------------
00006994                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006994                            ; ---------------------------------------------------------------------------
00006994                            
00006994                            EndEggman:
00006994 7000                       		moveq	#0,d0
00006996 1028 0024                  		move.b	obRoutine(a0),d0
0000699A 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
0000699E 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000069A2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000069A8                            ; ===========================================================================
000069A8 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000069AA 0000                       		dc.w EEgg_Animate-EEgg_Index
000069AC 0000                       		dc.w EEgg_Juggle-EEgg_Index
000069AE 0000                       		dc.w EEgg_Wait-EEgg_Index
000069B0                            
000069B0 =00000030                  eegg_time:	equ $30		; time between juggle motions
000069B0                            ; ===========================================================================
000069B0                            
000069B0                            EEgg_Main:	; Routine 0
000069B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000069B4 317C 0120 0008             		move.w	#$120,obX(a0)
000069BA 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000069C0 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000069C8 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000069CE 117C 0000 0001             		move.b	#0,obRender(a0)
000069D4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000069DA 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000069E0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000069E6 6700                       		beq.s	EEgg_Animate	; if yes, branch
000069E8                            
000069E8 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000069EE 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000069F4 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000069FA 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006A00                            
00006A00                            EEgg_Animate:	; Routine 2
00006A00 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006A06 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006A0C                            ; ===========================================================================
00006A0C                            
00006A0C                            EEgg_Juggle:	; Routine 4
00006A0C 5428 0024                  		addq.b	#2,obRoutine(a0)
00006A10 7002                       		moveq	#2,d0
00006A12 0828 0000 001C             		btst	#0,obAnim(a0)
00006A18 6700                       		beq.s	@noflip
00006A1A 4440                       		neg.w	d0
00006A1C                            
00006A1C                            	@noflip:
00006A1C 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006A20 7205                       		moveq	#5,d1
00006A22                            
00006A22                            @emeraldloop:
00006A22 1340 003E                  		move.b	d0,$3E(a1)
00006A26 3400                       		move.w	d0,d2
00006A28 E742                       		asl.w	#3,d2
00006A2A D529 0026                  		add.b	d2,obAngle(a1)
00006A2E 43E9 0040                  		lea	$40(a1),a1
00006A32 51C9 FFEE                  		dbf	d1,@emeraldloop
00006A36 5228 001A                  		addq.b	#1,obFrame(a0)
00006A3A 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006A40                            
00006A40                            EEgg_Wait:	; Routine 6
00006A40 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006A44 6A00                       		bpl.s	@nochg		; branch if time remains
00006A46 0868 0000 001C             		bchg	#0,obAnim(a0)
00006A4C 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006A52                            
00006A52                            	@nochg:
00006A52 4E75                       		rts	
00006A52 4E75                       		rts	
00006A54                            		include "_anim\Try Again & End Eggman.asm"
00006A54                            ; ---------------------------------------------------------------------------
00006A54                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006A54                            ; ---------------------------------------------------------------------------
00006A54 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006A56 0000                       		dc.w @tryagain2-Ani_EEgg
00006A58 0000                       		dc.w @end-Ani_EEgg
00006A5A 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006A5E 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006A62 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006A74                            		even
00006A74                            		even
00006A74                            		include	"_incObj\8C Try Again Emeralds.asm"
00006A74                            ; ---------------------------------------------------------------------------
00006A74                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006A74                            ; ---------------------------------------------------------------------------
00006A74                            
00006A74                            TryChaos:
00006A74 7000                       		moveq	#0,d0
00006A76 1028 0024                  		move.b	obRoutine(a0),d0
00006A7A 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006A7E 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006A82 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006A88                            ; ===========================================================================
00006A88 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006A8A 0000                       		dc.w TCha_Move-TCha_Index
00006A8C                            ; ===========================================================================
00006A8C                            
00006A8C                            TCha_Main:	; Routine 0
00006A8C 2248                       		movea.l	a0,a1
00006A8E 7400                       		moveq	#0,d2
00006A90 7600                       		moveq	#0,d3
00006A92 7205                       		moveq	#5,d1
00006A94 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006A98                            
00006A98                            @makeemerald:
00006A98 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006A9C 5429 0024                  		addq.b	#2,obRoutine(a1)
00006AA0 237C 0000 6894 0004        		move.l	#Map_ECha,obMap(a1)
00006AA8 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006AAE 137C 0000 0001             		move.b	#0,obRender(a1)
00006AB4 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006ABA 337C 0104 0008             		move.w	#$104,obX(a1)
00006AC0 337C 0120 0038             		move.w	#$120,$38(a1)
00006AC6 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006ACC 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006AD2 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006AD8 47F8 FE58                  		lea	(v_emldlist).w,a3
00006ADC                            
00006ADC                            	@chkemerald:
00006ADC 7000                       		moveq	#0,d0
00006ADE 1038 FE57                  		move.b	(v_emeralds).w,d0
00006AE2 5340                       		subq.w	#1,d0
00006AE4 6500                       		bcs.s	@loc_5B42
00006AE6                            
00006AE6                            	@chkloop:
00006AE6 B433 0000                  		cmp.b	(a3,d0.w),d2
00006AEA 6600                       		bne.s	@notgot
00006AEC 5202                       		addq.b	#1,d2
00006AEE 60EC                       		bra.s	@chkemerald
00006AF0                            ; ===========================================================================
00006AF0                            
00006AF0                            	@notgot:
00006AF0 51C8 FFF4                  		dbf	d0,@chkloop
00006AF4                            
00006AF4                            @loc_5B42:
00006AF4 1342 001A                  		move.b	d2,obFrame(a1)
00006AF8 5229 001A                  		addq.b	#1,obFrame(a1)
00006AFC 5202                       		addq.b	#1,d2
00006AFE 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006B04 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006B08 1343 001F                  		move.b	d3,obDelayAni(a1)
00006B0C 0643 000A                  		addi.w	#10,d3
00006B10 43E9 0040                  		lea	$40(a1),a1
00006B14 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006B18                            
00006B18                            TCha_Move:	; Routine 2
00006B18 4A68 003E                  		tst.w	$3E(a0)
00006B1C 6700                       		beq.s	locret_5BBA
00006B1E 4A28 001E                  		tst.b	obTimeFrame(a0)
00006B22 6700                       		beq.s	loc_5B78
00006B24 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006B28 6600                       		bne.s	loc_5B80
00006B2A                            
00006B2A                            loc_5B78:
00006B2A 3028 003E                  		move.w	$3E(a0),d0
00006B2E D168 0026                  		add.w	d0,obAngle(a0)
00006B32                            
00006B32                            loc_5B80:
00006B32 1028 0026                  		move.b	obAngle(a0),d0
00006B36 6700                       		beq.s	loc_5B8C
00006B38 0C00 0080                  		cmpi.b	#$80,d0
00006B3C 6600                       		bne.s	loc_5B96
00006B3E                            
00006B3E                            loc_5B8C:
00006B3E 4268 003E                  		clr.w	$3E(a0)
00006B42 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006B48                            
00006B48                            loc_5B96:
00006B48 4EB9 0000 3B42             		jsr	(CalcSine).l
00006B4E 7800                       		moveq	#0,d4
00006B50 1828 003C                  		move.b	$3C(a0),d4
00006B54 C3C4                       		muls.w	d4,d1
00006B56 E081                       		asr.l	#8,d1
00006B58 C1C4                       		muls.w	d4,d0
00006B5A E080                       		asr.l	#8,d0
00006B5C D268 0038                  		add.w	$38(a0),d1
00006B60 D068 003A                  		add.w	$3A(a0),d0
00006B64 3141 0008                  		move.w	d1,obX(a0)
00006B68 3140 000A                  		move.w	d0,obScreenY(a0)
00006B6C                            
00006B6C                            locret_5BBA:
00006B6C 4E75                       		rts	
00006B6C 4E75                       		rts	
00006B6E                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006B6E                            ; ---------------------------------------------------------------------------
00006B6E                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006B6E                            ; ---------------------------------------------------------------------------
00006B6E                            Map_EEgg_internal:
00006B6E 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006B70 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006B72 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006B74 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006B76 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006B78 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006B7A 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006B7C 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006B7E 08                         M_EEgg_Try1:	dc.b 8
00006B7F E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006B84 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006B89 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006B8E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006B93 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006B98 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006B9D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BA2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BA7 08                         M_EEgg_Try2:	dc.b 8
00006BA8 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006BAD F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006BB2 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006BB7 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006BBC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006BC1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006BC6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BCB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BD0 08                         M_EEgg_Try3:	dc.b 8
00006BD1 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006BD6 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006BDB E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006BE0 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006BE5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006BEA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006BEF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BF4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BF9 08                         M_EEgg_Try4:	dc.b 8
00006BFA E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006BFF F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006C04 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006C09 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006C0E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006C13 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006C18 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C1D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C22 0C                         M_EEgg_End1:	dc.b $C
00006C23 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006C28 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006C2D 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006C32 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006C37 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006C3C F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006C41 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006C46 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006C4B 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006C50 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006C55 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C5A 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C5F 0A                         M_EEgg_End2:	dc.b $A
00006C60 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006C65 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006C6A F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006C6F D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006C74 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006C79 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006C7E 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006C83 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006C88 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006C8D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006C92 0A                         M_EEgg_End3:	dc.b $A
00006C93 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006C98 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006C9D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006CA2 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006CA7 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006CAC EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006CB1 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006CB6 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006CBB 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006CC0 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006CC5 0C                         M_EEgg_End4:	dc.b $C
00006CC6 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006CCB FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006CD0 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006CD5 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006CDA F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006CDF FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006CE4 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006CE9 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006CEE 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006CF3 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006CF8 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006CFD 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D02                            		even
00006D02                            		even
00006D02                            
00006D02                            ; ---------------------------------------------------------------------------
00006D02                            ; Ending sequence demos
00006D02                            ; ---------------------------------------------------------------------------
00006D02                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006D30                            		even
00006D30                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006D70                            		even
00006D70                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006DA0                            		even
00006DA0                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006DD0                            		even
00006DD0                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006DF0                            		even
00006DF0                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006E10                            		even
00006E10                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006E40                            		even
00006E40                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006E70                            		even
00006E70                            
00006E70                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006E70                            ; ---------------------------------------------------------------------------
00006E70                            ; Subroutine to	load level boundaries and start	locations
00006E70                            ; ---------------------------------------------------------------------------
00006E70                            
00006E70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E70                            
00006E70                            
00006E70                            LevelSizeLoad:
00006E70 7000                       		moveq	#0,d0
00006E72 11C0 F740                  		move.b	d0,($FFFFF740).w
00006E76 11C0 F741                  		move.b	d0,($FFFFF741).w
00006E7A 11C0 F746                  		move.b	d0,($FFFFF746).w
00006E7E 11C0 F748                  		move.b	d0,($FFFFF748).w
00006E82 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006E86 3038 FE10                  		move.w	(v_zone).w,d0
00006E8A ED08                       		lsl.b	#6,d0
00006E8C E848                       		lsr.w	#4,d0
00006E8E 3200                       		move.w	d0,d1
00006E90 D040                       		add.w	d0,d0
00006E92 D041                       		add.w	d1,d0
00006E94 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006E98 3018                       		move.w	(a0)+,d0
00006E9A 31C0 F730                  		move.w	d0,($FFFFF730).w
00006E9E 2018                       		move.l	(a0)+,d0
00006EA0 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006EA4 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006EA8 2018                       		move.l	(a0)+,d0
00006EAA 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006EAE 21C0 F724                  		move.l	d0,(v_limittop1).w
00006EB2 3038 F728                  		move.w	(v_limitleft2).w,d0
00006EB6 0640 0240                  		addi.w	#$240,d0
00006EBA 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006EBE 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006EC4 3018                       		move.w	(a0)+,d0
00006EC6 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006ECA 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006ED0 6000 0000                  		bra.w	LevSz_ChkLamp
00006ED4                            
00006ED4                            ; ===========================================================================
00006ED4                            ; ---------------------------------------------------------------------------
00006ED4                            ; Level size array
00006ED4                            ; ---------------------------------------------------------------------------
00006ED4                            LevelSizeArray:
00006ED4                            		; GHZ
00006ED4 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006EE0 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006EEC 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006EF8 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006F04                            		; LZ
00006F04 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006F10 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006F1C 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006F28 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006F34                            		; MZ
00006F34 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006F40 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006F4C 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006F58 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006F64                            		; SLZ
00006F64 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006F70 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006F7C 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006F88 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006F94                            		; SYZ
00006F94 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
00006FA0 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
00006FAC 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006FB8 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006FC4                            		; SBZ
00006FC4 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006FD0 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006FDC 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006FE8 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006FF4                            		; Ending
00006FF4 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00007000 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
0000700C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00007018 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00007024                            
00007024                            ; ---------------------------------------------------------------------------
00007024                            ; Ending start location array
00007024                            ; ---------------------------------------------------------------------------
00007024                            EndingStLocArray:
00007024                            		include	"_inc\Start Location Array - Ending.asm"
00007024                            ; ---------------------------------------------------------------------------
00007024                            ; Ending start location array
00007024                            ; ---------------------------------------------------------------------------
00007024                            
00007024                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00007028                            		incbin	"startpos\mz2 (Credits demo).bin"
0000702C                            		incbin	"startpos\syz3 (Credits demo).bin"
00007030                            		incbin	"startpos\lz3 (Credits demo).bin"
00007034                            		incbin	"startpos\slz3 (Credits demo).bin"
00007038                            		incbin	"startpos\sbz1 (Credits demo).bin"
0000703C                            		incbin	"startpos\sbz2 (Credits demo).bin"
00007040                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00007044                            		even
00007044                            		even
00007044                            
00007044                            ; ===========================================================================
00007044                            
00007044                            LevSz_ChkLamp:
00007044 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00007048 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000704A                            
0000704A 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00007050 3238 D008                  		move.w	(v_player+obX).w,d1
00007054 3038 D00C                  		move.w	(v_player+obY).w,d0
00007058 6000                       		bra.s	LevSz_SkipStartPos
0000705A                            ; ===========================================================================
0000705A                            
0000705A                            LevSz_StartLoc:
0000705A 3038 FE10                  		move.w	(v_zone).w,d0
0000705E ED08                       		lsl.b	#6,d0
00007060 E848                       		lsr.w	#4,d0
00007062 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00007066 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
0000706A 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000706C                            
0000706C 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00007070 5340                       		subq.w	#1,d0
00007072 E548                       		lsl.w	#2,d0
00007074 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007078                            
00007078                            LevSz_SonicPos:
00007078 7200                       		moveq	#0,d1
0000707A 3219                       		move.w	(a1)+,d1
0000707C 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00007080 7000                       		moveq	#0,d0
00007082 3011                       		move.w	(a1),d0
00007084 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00007088                            
00007088                            SetScreen:
00007088                            	LevSz_SkipStartPos:
00007088 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
0000708C 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00007090 743F                       		moveq #63,d2 ; begin a 64-step loop 
00007092                            @looppoint: 
00007092 34C1                       		move.w d1,(a2)+ ; fill in X 
00007094 34C0                       		move.w d0,(a2)+ ; fill in Y 
00007096 51CA FFFA                  		dbf d2,@looppoint ; loop	
0000709A 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
0000709E 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000070A0 7200                       		moveq	#0,d1
000070A2                            
000070A2                            	SetScr_WithinLeft:
000070A2 3438 F72A                  		move.w	(v_limitright2).w,d2
000070A6 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000070A8 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000070AA 3202                       		move.w	d2,d1
000070AC                            
000070AC                            	SetScr_WithinRight:
000070AC 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000070B0                            
000070B0 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000070B4 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000070B6 7000                       		moveq	#0,d0
000070B8                            
000070B8                            	SetScr_WithinTop:
000070B8 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000070BC 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000070BE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000070C2                            
000070C2                            	SetScr_WithinBottom:
000070C2 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000070C6 6100 0000                  		bsr.w	BgScrollSpeed
000070CA 7000                       		moveq	#0,d0
000070CC 1038 FE10                  		move.b	(v_zone).w,d0
000070D0 E508                       		lsl.b	#2,d0
000070D2 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000070D8 4E75                       		rts
000070DA                            ; ===========================================================================
000070DA                            ; ---------------------------------------------------------------------------
000070DA                            ; Sonic start location array
000070DA                            ; ---------------------------------------------------------------------------
000070DA                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
000070DA                            ; ---------------------------------------------------------------------------
000070DA                            ; Sonic start location array
000070DA                            ; ---------------------------------------------------------------------------
000070DA                            
000070DA                            		incbin	"startpos\ghz1.bin"
000070DE                            		incbin	"startpos\ghz2.bin"
000070E2                            		incbin	"startpos\ghz3.bin"
000070E6 0080 00A8                  		dc.w	$80,$A8
000070EA                            
000070EA                            		incbin	"startpos\lz1.bin"
000070EE                            		incbin	"startpos\lz2.bin"
000070F2                            		incbin	"startpos\lz3.bin"
000070F6                            		incbin	"startpos\sbz3.bin"
000070FA                            
000070FA                            		incbin	"startpos\mz1.bin"
000070FE                            		incbin	"startpos\mz2.bin"
00007102                            		incbin	"startpos\mz3.bin"
00007106 0080 00A8                  		dc.w	$80,$A8
0000710A                            
0000710A                            		incbin	"startpos\slz1.bin"
0000710E                            		incbin	"startpos\slz2.bin"
00007112                            		incbin	"startpos\slz3.bin"
00007116 0080 00A8                  		dc.w	$80,$A8
0000711A                            
0000711A                            		incbin	"startpos\syz1.bin"
0000711E                            		incbin	"startpos\syz2.bin"
00007122                            		incbin	"startpos\syz3.bin"
00007126 0080 00A8                  		dc.w	$80,$A8
0000712A                            
0000712A                            		incbin	"startpos\sbz1.bin"
0000712E                            		incbin	"startpos\sbz2.bin"
00007132                            		incbin	"startpos\fz.bin"
00007136 0080 00A8                  		dc.w	$80,$A8
0000713A                            
0000713A                            
0000713A                            		incbin	"startpos\end1.bin"
0000713E                            		incbin	"startpos\end2.bin"
00007142 0080 00A8                  		dc.w	$80,$A8
00007146 0080 00A8                  		dc.w	$80,$A8
0000714A                            
0000714A                            		even
0000714A                            		even
0000714A                            
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            ; Which	256x256	tiles contain loops or roll-tunnels
0000714A                            ; ---------------------------------------------------------------------------
0000714A                            
0000714A                            LoopTileNums:
0000714A                            
0000714A                            ; 		loop	loop	tunnel	tunnel
0000714A                            
0000714A B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000714E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007152 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007156 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000715A 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000715E 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007162 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007166                            
00007166                            		even
00007166                            
00007166                            ; ---------------------------------------------------------------------------
00007166                            ; Subroutine to	set scroll speed of some backgrounds
00007166                            ; ---------------------------------------------------------------------------
00007166                            
00007166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007166                            
00007166                            
00007166                            BgScrollSpeed:
00007166 4A38 FE30                  		tst.b	(v_lastlamp).w
0000716A 6600                       		bne.s	loc_6206
0000716C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007170 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007174 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007178 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000717C 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007180                            
00007180                            loc_6206:
00007180 7400                       		moveq	#0,d2
00007182 1438 FE10                  		move.b	(v_zone).w,d2
00007186 D442                       		add.w	d2,d2
00007188 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000718C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007190                            ; End of function BgScrollSpeed
00007190                            
00007190                            ; ===========================================================================
00007190 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007194 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007198 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000719C 0000                       		dc.w BgScroll_End-BgScroll_Index
0000719E                            ; ===========================================================================
0000719E                            
0000719E                            BgScroll_GHZ:
0000719E 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071A2 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000071A6 42B8 F714                  		clr.l	(v_bg2screenposy).w
000071AA 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000071AE 45F8 A800                  		lea	($FFFFA800).w,a2
000071B2 429A                       		clr.l	(a2)+
000071B4 429A                       		clr.l	(a2)+
000071B6 429A                       		clr.l	(a2)+
000071B8 4E75                       		rts
000071BA                            ; ===========================================================================
000071BA                            
000071BA                            BgScroll_LZ:
000071BA E280                       		asr.l	#1,d0
000071BC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071C0 4E75                       		rts	
000071C2                            ; ===========================================================================
000071C2                            
000071C2                            BgScroll_MZ:
000071C2 4E75                       		rts	
000071C4                            ; ===========================================================================
000071C4                            
000071C4                            BgScroll_SLZ:
000071C4 E280                       		asr.l	#1,d0
000071C6 0640 00C0                  		addi.w	#$C0,d0
000071CA 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071CE 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071D2 4E75                       		rts	
000071D4                            ; ===========================================================================
000071D4                            
000071D4                            BgScroll_SYZ:
000071D4 E980                       		asl.l	#4,d0
000071D6 2400                       		move.l	d0,d2
000071D8 E380                       		asl.l	#1,d0
000071DA D082                       		add.l	d2,d0
000071DC E080                       		asr.l	#8,d0
000071DE 5240                       		addq.w	#1,d0
000071E0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071E4 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071E8 4E75                       		rts	
000071EA                            ; ===========================================================================
000071EA                            
000071EA                            BgScroll_SBZ:
000071EA 0240 07F8                  		andi.w	#$7F8,d0
000071EE E640                       		asr.w	#3,d0
000071F0 5240                       		addq.w	#1,d0
000071F2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071F6 4E75                       		rts	
000071F8                            ; ===========================================================================
000071F8                            
000071F8                            BgScroll_End:
000071F8 3038 F700                  		move.w	(v_screenposx).w,d0
000071FC E240                       		asr.w	#1,d0
000071FE 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007202 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007206 E440                       		asr.w	#2,d0
00007208 3200                       		move.w	d0,d1
0000720A D040                       		add.w	d0,d0
0000720C D041                       		add.w	d1,d0
0000720E 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007212 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007216 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000721A 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000721E 45F8 A800                  		lea	($FFFFA800).w,a2
00007222 429A                       		clr.l	(a2)+
00007224 429A                       		clr.l	(a2)+
00007226 429A                       		clr.l	(a2)+
00007228 4E75                       		rts
00007228 4E75                       		rts
0000722A                            		include	"_inc\DeformLayers (JP1).asm"
0000722A                            ; ---------------------------------------------------------------------------
0000722A                            ; Background layer deformation subroutines
0000722A                            ; ---------------------------------------------------------------------------
0000722A                            
0000722A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000722A                            
0000722A                            
0000722A                            DeformLayers:
0000722A 4A38 F744                  		tst.b	(f_nobgscroll).w
0000722E 6700                       		beq.s	@bgscroll
00007230 4E75                       		rts	
00007232                            ; ===========================================================================
00007232                            
00007232                            	@bgscroll:
00007232 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007236 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000723A 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
0000723E 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007242 6100 0000                  		bsr.w	ScrollHoriz
00007246 6100 0000                  		bsr.w	ScrollVertical
0000724A 6100 0000                  		bsr.w	DynamicLevelEvents
0000724E 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007254 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000725A 7000                       		moveq	#0,d0
0000725C 1038 FE10                  		move.b	(v_zone).w,d0
00007260 D040                       		add.w	d0,d0
00007262 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007266 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000726A                            ; End of function DeformLayers
0000726A                            
0000726A                            ; ===========================================================================
0000726A                            ; ---------------------------------------------------------------------------
0000726A                            ; Offset index for background layer deformation	code
0000726A                            ; ---------------------------------------------------------------------------
0000726A 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000726E 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007272 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007276 0000                       		dc.w Deform_GHZ-Deform_Index
00007278                            ; ---------------------------------------------------------------------------
00007278                            ; Green	Hill Zone background layer deformation code
00007278                            ; ---------------------------------------------------------------------------
00007278                            
00007278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007278                            
00007278                            
00007278                            Deform_GHZ:
00007278                            	;cmpi.b    #id_Title,(v_gamemode).w
00007278                            	;beq.w    Deform_Title
00007278                            
00007278                            ;Deform_GHZ_Stage:
00007278                            	; block 3 - distant mountains
00007278 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000727C 48C4                       		ext.l	d4
0000727E EB84                       		asl.l	#5,d4
00007280 2204                       		move.l	d4,d1
00007282 E384                       		asl.l	#1,d4
00007284 D881                       		add.l	d1,d4
00007286 7C00                       		moveq	#0,d6
00007288 6100 0000                  		bsr.w	BGScroll_Block3
0000728C                            	; block 2 - hills & waterfalls
0000728C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007290 48C4                       		ext.l	d4
00007292 EF84                       		asl.l	#7,d4
00007294 7C00                       		moveq	#0,d6
00007296 6100 0000                  		bsr.w	BGScroll_Block2
0000729A                            	; calculate Y position
0000729A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000729E 3038 F704                  		move.w	(v_screenposy).w,d0
000072A2 0240 07FF                  		andi.w	#$7FF,d0
000072A6 EA48                       		lsr.w	#5,d0
000072A8 4440                       		neg.w	d0
000072AA 0640 0020                  		addi.w	#$20,d0
000072AE 6A00                       		bpl.s	@limitY
000072B0 7000                       		moveq	#0,d0
000072B2                            	@limitY:
000072B2 3800                       		move.w	d0,d4
000072B4 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000072B8 3038 F700                  		move.w	(v_screenposx).w,d0
000072BC 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072C2 6600                       		bne.s	@notTitle
000072C4 7000                       		moveq	#0,d0	; reset foreground position in title screen
000072C6                            	@notTitle:
000072C6 4440                       		neg.w	d0
000072C8 4840                       		swap	d0
000072CA                            	; auto-scroll clouds
000072CA 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000072CE 069A 0001 0000             		addi.l	#$10000,(a2)+
000072D4 069A 0000 C000             		addi.l	#$C000,(a2)+
000072DA 069A 0000 8000             		addi.l	#$8000,(a2)+
000072E0                            	; calculate background scroll	
000072E0 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000072E4 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000072E8 4440                       		neg.w	d0
000072EA 323C 001F                  		move.w	#$1F,d1
000072EE 9244                       		sub.w	d4,d1
000072F0 6500                       		bcs.s	@gotoCloud2
000072F2                            	@cloudLoop1:		; upper cloud (32px)
000072F2 22C0                       		move.l	d0,(a1)+
000072F4 51C9 FFFC                  		dbf	d1,@cloudLoop1
000072F8                            
000072F8                            	@gotoCloud2:
000072F8 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000072FC D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007300 4440                       		neg.w	d0
00007302 323C 000F                  		move.w	#$F,d1
00007306                            	@cloudLoop2:		; middle cloud (16px)
00007306 22C0                       		move.l	d0,(a1)+
00007308 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000730C                            
0000730C 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007310 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007314 4440                       		neg.w	d0
00007316 323C 000F                  		move.w	#$F,d1
0000731A                            	@cloudLoop3:		; lower cloud (16px)
0000731A 22C0                       		move.l	d0,(a1)+
0000731C 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007320                            
00007320 323C 002F                  		move.w	#$2F,d1
00007324 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007328 4440                       		neg.w	d0
0000732A                            	@mountainLoop:		; distant mountains (48px)
0000732A 22C0                       		move.l	d0,(a1)+
0000732C 51C9 FFFC                  		dbf	d1,@mountainLoop
00007330                            
00007330 323C 0027                  		move.w	#$27,d1
00007334 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007338 4440                       		neg.w	d0
0000733A                            	@hillLoop:			; hills & waterfalls (40px)
0000733A 22C0                       		move.l	d0,(a1)+
0000733C 51C9 FFFC                  		dbf	d1,@hillLoop
00007340                            
00007340 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007344 3438 F700                  		move.w	(v_screenposx).w,d2
00007348 9440                       		sub.w	d0,d2
0000734A 48C2                       		ext.l	d2
0000734C E182                       		asl.l	#8,d2
0000734E 85FC 0068                  		divs.w	#$68,d2
00007352 48C2                       		ext.l	d2
00007354 E182                       		asl.l	#8,d2
00007356 7600                       		moveq	#0,d3
00007358 3600                       		move.w	d0,d3
0000735A 323C 0047                  		move.w	#$47,d1
0000735E D244                       		add.w	d4,d1
00007360                            	@waterLoop:			; water deformation
00007360 3003                       		move.w	d3,d0
00007362 4440                       		neg.w	d0
00007364 22C0                       		move.l	d0,(a1)+
00007366 4843                       		swap	d3
00007368 D682                       		add.l	d2,d3
0000736A 4843                       		swap	d3
0000736C 51C9 FFF2                  		dbf	d1,@waterLoop
00007370 4E75                       		rts
00007372                            ; End of function Deform_GHZ
00007372                            
00007372                            Deform_Title:
00007372 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007376 48C4                       		ext.l	d4
00007378 EB84                       		asl.l	#5,d4
0000737A 2204                       		move.l	d4,d1
0000737C E384                       		asl.l	#1,d4
0000737E D881                       		add.l	d1,d4
00007380 7A00                       		moveq	#0,d5
00007382 6100 0000                  		bsr.w	BGScroll_Block1
00007386 6100 0000                  		bsr.w	BGScroll_Block3
0000738A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000738E 3038 F704                  		move.w	(v_screenposy).w,d0
00007392 0240 07FF                  		andi.w	#$7FF,d0
00007396 EA48                       		lsr.w	#5,d0
00007398 4440                       		neg.w	d0
0000739A 0640 0026                  		addi.w	#$26,d0
0000739E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000073A2 3800                       		move.w	d0,d4
000073A4 6100 0000                  		bsr.w	BGScroll_Block3
000073A8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000073AE 323C 006F                  		move.w	#$6F,d1
000073B2 9244                       		sub.w	d4,d1
000073B4 3038 F700                  		move.w	(v_screenposx).w,d0
000073B8 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073BE 6600                       		bne.s	loc_633C
000073C0 7000                       		moveq	#0,d0
000073C2                            
000073C2                            loc_633C:
000073C2 4440                       		neg.w	d0
000073C4 4840                       		swap	d0
000073C6 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000073CA 4440                       		neg.w	d0
000073CC                            
000073CC                            loc_6346:
000073CC 22C0                       		move.l	d0,(a1)+
000073CE 51C9 FFFC                  		dbf	d1,loc_6346
000073D2 323C 0027                  		move.w	#$27,d1
000073D6 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073DA 4440                       		neg.w	d0
000073DC                            
000073DC                            loc_6356:
000073DC 22C0                       		move.l	d0,(a1)+
000073DE 51C9 FFFC                  		dbf	d1,loc_6356
000073E2 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073E6 0640 0000                  		addi.w	#0,d0
000073EA 3438 F700                  		move.w	(v_screenposx).w,d2
000073EE 0642 FE00                  		addi.w	#-$200,d2
000073F2 9440                       		sub.w	d0,d2
000073F4 48C2                       		ext.l	d2
000073F6 E182                       		asl.l	#8,d2
000073F8 85FC 0068                  		divs.w	#$68,d2
000073FC 48C2                       		ext.l	d2
000073FE E182                       		asl.l	#8,d2
00007400 7600                       		moveq	#0,d3
00007402 3600                       		move.w	d0,d3
00007404 323C 0047                  		move.w	#$47,d1
00007408 D244                       		add.w	d4,d1
0000740A                            
0000740A                            loc_6384:
0000740A 3003                       		move.w	d3,d0
0000740C 4440                       		neg.w	d0
0000740E 22C0                       		move.l	d0,(a1)+
00007410 4843                       		swap	d3
00007412 D682                       		add.l	d2,d3
00007414 4843                       		swap	d3
00007416 51C9 FFF2                  		dbf	d1,loc_6384
0000741A 4E75                       		rts	
0000741C                            
0000741C                            ; ===========================================================================
0000741C                            ; ---------------------------------------------------------------------------
0000741C                            ; Labyrinth Zone background layer deformation code
0000741C                            ; ---------------------------------------------------------------------------
0000741C                            
0000741C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000741C                            
0000741C                            
0000741C                            Deform_LZ:
0000741C                            	; plain background scroll
0000741C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007420 48C4                       		ext.l	d4
00007422 EF84                       		asl.l	#7,d4
00007424 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007428 48C5                       		ext.l	d5
0000742A EF85                       		asl.l	#7,d5
0000742C 6100 0000                  		bsr.w	BGScroll_XY
00007430                            
00007430 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007436 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
0000743C 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007442 1438 F7D8                  		move.b	(v_lz_deform).w,d2
00007446 1602                       		move.b	d2,d3
00007448 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
0000744E                            
0000744E D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007452 0242 00FF                  		andi.w	#$FF,d2
00007456 D678 F704                  		add.w	(v_screenposy).w,d3
0000745A 0243 00FF                  		andi.w	#$FF,d3
0000745E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007462 323C 00DF                  		move.w	#$DF,d1
00007466 3038 F700                  		move.w	(v_screenposx).w,d0
0000746A 4440                       		neg.w	d0
0000746C 3C00                       		move.w	d0,d6
0000746E 4840                       		swap	d0
00007470 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007474 4440                       		neg.w	d0
00007476 3838 F646                  		move.w	(v_waterpos1).w,d4
0000747A 3A38 F704                  		move.w	(v_screenposy).w,d5
0000747E                            	; write normal scroll before meeting water position
0000747E                            	@normalLoop:		
0000747E BA44                       		cmp.w	d4,d5	; is current y >= water y?
00007480 6C00                       		bge.s	@underwaterLoop	; if yes, branch
00007482 22C0                       		move.l	d0,(a1)+
00007484 5245                       		addq.w	#1,d5
00007486 5202                       		addq.b	#1,d2
00007488 5203                       		addq.b	#1,d3
0000748A 51C9 FFF2                  		dbf	d1,@normalLoop
0000748E 4E75                       		rts
00007490                            	; apply water deformation when underwater
00007490                            	@underwaterLoop:
00007490 1833 3000                  		move.b	(a3,d3),d4
00007494 4884                       		ext.w	d4
00007496 D846                       		add.w	d6,d4
00007498 32C4                       		move.w	d4,(a1)+
0000749A 1832 2000                  		move.b	(a2,d2),d4
0000749E 4884                       		ext.w	d4
000074A0 D840                       		add.w	d0,d4
000074A2 32C4                       		move.w	d4,(a1)+
000074A4 5202                       		addq.b	#1,d2
000074A6 5203                       		addq.b	#1,d3
000074A8 51C9 FFE6                  		dbf	d1,@underwaterLoop
000074AC 4E75                       		rts
000074AE                            
000074AE                            Lz_Scroll_Data:
000074AE 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000074BE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074CE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074DE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074EE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074FE 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000750E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000751E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000752E FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
0000753E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000754E 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
0000755E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000756E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000757E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000758E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000759E 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075AE                            ; End of function Deform_LZ
000075AE                            
000075AE                            ; ---------------------------------------------------------------------------
000075AE                            ; Marble Zone background layer deformation code
000075AE                            ; ---------------------------------------------------------------------------
000075AE                            
000075AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075AE                            
000075AE                            
000075AE                            Deform_MZ:
000075AE                            	; block 1 - dungeon interior
000075AE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075B2 48C4                       		ext.l	d4
000075B4 ED84                       		asl.l	#6,d4
000075B6 2204                       		move.l	d4,d1
000075B8 E384                       		asl.l	#1,d4
000075BA D881                       		add.l	d1,d4
000075BC 7C02                       		moveq	#2,d6
000075BE 6100 0000                  		bsr.w	BGScroll_Block1
000075C2                            	; block 3 - mountains
000075C2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075C6 48C4                       		ext.l	d4
000075C8 ED84                       		asl.l	#6,d4
000075CA 7C06                       		moveq	#6,d6
000075CC 6100 0000                  		bsr.w	BGScroll_Block3
000075D0                            	; block 2 - bushes & antique buildings
000075D0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075D4 48C4                       		ext.l	d4
000075D6 EF84                       		asl.l	#7,d4
000075D8 7C04                       		moveq	#4,d6
000075DA 6100 0000                  		bsr.w	BGScroll_Block2
000075DE                            	; calculate y-position of background
000075DE 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
000075E2 3238 F704                  		move.w	(v_screenposy).w,d1
000075E6 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
000075EA 6500                       		bcs.s	@noYscroll
000075EC 3401                       		move.w	d1,d2
000075EE D241                       		add.w	d1,d1
000075F0 D242                       		add.w	d2,d1
000075F2 E441                       		asr.w	#2,d1
000075F4 D041                       		add.w	d1,d0
000075F6                            	@noYscroll:
000075F6 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000075FA 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
000075FE 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007602 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007608                            	; do something with redraw flags
00007608 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
0000760C 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007610 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007614 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007618 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
0000761C                            	; calculate background scroll buffer
0000761C 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007620 3438 F700                  		move.w	(v_screenposx).w,d2
00007624 4442                       		neg.w	d2
00007626 3002                       		move.w	d2,d0
00007628 E440                       		asr.w	#2,d0
0000762A 9042                       		sub.w	d2,d0
0000762C 48C0                       		ext.l	d0
0000762E E780                       		asl.l	#3,d0
00007630 81FC 0005                  		divs.w	#5,d0
00007634 48C0                       		ext.l	d0
00007636 E980                       		asl.l	#4,d0
00007638 E180                       		asl.l	#8,d0
0000763A 7600                       		moveq	#0,d3
0000763C 3602                       		move.w	d2,d3
0000763E E243                       		asr.w	#1,d3
00007640 323C 0004                  		move.w	#4,d1
00007644                            	@cloudLoop:		
00007644 32C3                       		move.w	d3,(a1)+
00007646 4843                       		swap	d3
00007648 D680                       		add.l	d0,d3
0000764A 4843                       		swap	d3
0000764C 51C9 FFF6                  		dbf	d1,@cloudLoop
00007650                            
00007650 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007654 4440                       		neg.w	d0
00007656 323C 0001                  		move.w	#1,d1
0000765A                            	@mountainLoop:		
0000765A 32C0                       		move.w	d0,(a1)+
0000765C 51C9 FFFC                  		dbf	d1,@mountainLoop
00007660                            
00007660 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007664 4440                       		neg.w	d0
00007666 323C 0008                  		move.w	#8,d1
0000766A                            	@bushLoop:		
0000766A 32C0                       		move.w	d0,(a1)+
0000766C 51C9 FFFC                  		dbf	d1,@bushLoop
00007670                            
00007670 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007674 4440                       		neg.w	d0
00007676 323C 000F                  		move.w	#$F,d1
0000767A                            	@interiorLoop:		
0000767A 32C0                       		move.w	d0,(a1)+
0000767C 51C9 FFFC                  		dbf	d1,@interiorLoop
00007680                            
00007680 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007684 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007688 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
0000768C 3400                       		move.w	d0,d2
0000768E 0C40 0100                  		cmpi.w	#$100,d0
00007692 6500                       		bcs.s	@limitY
00007694 303C 0100                  		move.w	#$100,d0
00007698                            	@limitY:
00007698 0240 01F0                  		andi.w	#$1F0,d0
0000769C E648                       		lsr.w	#3,d0
0000769E 45F2 0000                  		lea	(a2,d0),a2
000076A2 6000 0000                  		bra.w	Bg_Scroll_X
000076A6                            ; End of function Deform_MZ
000076A6                            
000076A6                            ; ---------------------------------------------------------------------------
000076A6                            ; Star Light Zone background layer deformation code
000076A6                            ; ---------------------------------------------------------------------------
000076A6                            
000076A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076A6                            
000076A6                            
000076A6                            Deform_SLZ:
000076A6                            	; vertical scrolling
000076A6 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000076AA 48C5                       		ext.l	d5
000076AC EF85                       		asl.l	#7,d5
000076AE 6100 0000                  		bsr.w	Bg_Scroll_Y
000076B2 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000076B8                            	; calculate background scroll buffer
000076B8 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000076BC 3438 F700                  		move.w	(v_screenposx).w,d2
000076C0 4442                       		neg.w	d2
000076C2 3002                       		move.w	d2,d0
000076C4 E640                       		asr.w	#3,d0
000076C6 9042                       		sub.w	d2,d0
000076C8 48C0                       		ext.l	d0
000076CA E980                       		asl.l	#4,d0
000076CC 81FC 001C                  		divs.w	#$1C,d0
000076D0 48C0                       		ext.l	d0
000076D2 E980                       		asl.l	#4,d0
000076D4 E180                       		asl.l	#8,d0
000076D6 7600                       		moveq	#0,d3
000076D8 3602                       		move.w	d2,d3
000076DA 323C 001B                  		move.w	#$1B,d1
000076DE                            	@starLoop:		
000076DE 32C3                       		move.w	d3,(a1)+
000076E0 4843                       		swap	d3
000076E2 D680                       		add.l	d0,d3
000076E4 4843                       		swap	d3
000076E6 51C9 FFF6                  		dbf	d1,@starLoop
000076EA                            
000076EA 3002                       		move.w	d2,d0
000076EC E640                       		asr.w	#3,d0
000076EE 3200                       		move.w	d0,d1
000076F0 E241                       		asr.w	#1,d1
000076F2 D041                       		add.w	d1,d0
000076F4 323C 0004                  		move.w	#4,d1
000076F8                            	@buildingLoop1:		; distant black buildings
000076F8 32C0                       		move.w	d0,(a1)+
000076FA 51C9 FFFC                  		dbf	d1,@buildingLoop1
000076FE                            
000076FE 3002                       		move.w	d2,d0
00007700 E440                       		asr.w	#2,d0
00007702 323C 0004                  		move.w	#4,d1
00007706                            	@buildingLoop2:		; closer buildings
00007706 32C0                       		move.w	d0,(a1)+
00007708 51C9 FFFC                  		dbf	d1,@buildingLoop2
0000770C                            
0000770C 3002                       		move.w	d2,d0
0000770E E240                       		asr.w	#1,d0
00007710 323C 001D                  		move.w	#$1D,d1
00007714                            	@bottomLoop:		; bottom part of background
00007714 32C0                       		move.w	d0,(a1)+
00007716 51C9 FFFC                  		dbf	d1,@bottomLoop
0000771A                            
0000771A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000771E 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007722 3400                       		move.w	d0,d2
00007724 0440 00C0                  		subi.w	#$C0,d0
00007728 0240 03F0                  		andi.w	#$3F0,d0
0000772C E648                       		lsr.w	#3,d0
0000772E 45F2 0000                  		lea	(a2,d0),a2
00007732                            ;-------------------------------------------------------------------------------
00007732                            ;-------------------------------------------------------------------------------
00007732                            Bg_Scroll_X:
00007732 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007736 323C 000E                  		move.w	#$E,d1
0000773A 3038 F700                  		move.w	(v_screenposx).w,d0
0000773E 4440                       		neg.w	d0
00007740 4840                       		swap	d0
00007742 0242 000F                  		andi.w	#$F,d2
00007746 D442                       		add.w	d2,d2
00007748 301A                       		move.w	(a2)+,d0
0000774A 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
0000774E                            	@blockLoop:
0000774E 301A                       		move.w	(a2)+,d0
00007750                            	@pixelJump:		
00007750 22C0                       		move.l	d0,(a1)+
00007752 22C0                       		move.l	d0,(a1)+
00007754 22C0                       		move.l	d0,(a1)+
00007756 22C0                       		move.l	d0,(a1)+
00007758 22C0                       		move.l	d0,(a1)+
0000775A 22C0                       		move.l	d0,(a1)+
0000775C 22C0                       		move.l	d0,(a1)+
0000775E 22C0                       		move.l	d0,(a1)+
00007760 22C0                       		move.l	d0,(a1)+
00007762 22C0                       		move.l	d0,(a1)+
00007764 22C0                       		move.l	d0,(a1)+
00007766 22C0                       		move.l	d0,(a1)+
00007768 22C0                       		move.l	d0,(a1)+
0000776A 22C0                       		move.l	d0,(a1)+
0000776C 22C0                       		move.l	d0,(a1)+
0000776E 22C0                       		move.l	d0,(a1)+
00007770 51C9 FFDC                  		dbf	d1,@blockLoop
00007774 4E75                       		rts
00007776                            
00007776                            ; ---------------------------------------------------------------------------
00007776                            ; Spring Yard Zone background layer deformation	code
00007776                            ; ---------------------------------------------------------------------------
00007776                            
00007776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007776                            
00007776                            
00007776                            Deform_SYZ:
00007776                            	; vertical scrolling
00007776 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000777A 48C5                       		ext.l	d5
0000777C E985                       		asl.l	#4,d5
0000777E 2205                       		move.l	d5,d1
00007780 E385                       		asl.l	#1,d5
00007782 DA81                       		add.l	d1,d5
00007784 6100 0000                  		bsr.w	Bg_Scroll_Y
00007788 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000778E                            	; calculate background scroll buffer
0000778E 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007792 3438 F700                  		move.w	(v_screenposx).w,d2
00007796 4442                       		neg.w	d2
00007798 3002                       		move.w	d2,d0
0000779A E640                       		asr.w	#3,d0
0000779C 9042                       		sub.w	d2,d0
0000779E 48C0                       		ext.l	d0
000077A0 E780                       		asl.l	#3,d0
000077A2 81FC 0008                  		divs.w	#8,d0
000077A6 48C0                       		ext.l	d0
000077A8 E980                       		asl.l	#4,d0
000077AA E180                       		asl.l	#8,d0
000077AC 7600                       		moveq	#0,d3
000077AE 3602                       		move.w	d2,d3
000077B0 E243                       		asr.w	#1,d3
000077B2 323C 0007                  		move.w	#7,d1
000077B6                            	@cloudLoop:		
000077B6 32C3                       		move.w	d3,(a1)+
000077B8 4843                       		swap	d3
000077BA D680                       		add.l	d0,d3
000077BC 4843                       		swap	d3
000077BE 51C9 FFF6                  		dbf	d1,@cloudLoop
000077C2                            
000077C2 3002                       		move.w	d2,d0
000077C4 E640                       		asr.w	#3,d0
000077C6 323C 0004                  		move.w	#4,d1
000077CA                            	@mountainLoop:		
000077CA 32C0                       		move.w	d0,(a1)+
000077CC 51C9 FFFC                  		dbf	d1,@mountainLoop
000077D0                            
000077D0 3002                       		move.w	d2,d0
000077D2 E440                       		asr.w	#2,d0
000077D4 323C 0005                  		move.w	#5,d1
000077D8                            	@buildingLoop:		
000077D8 32C0                       		move.w	d0,(a1)+
000077DA 51C9 FFFC                  		dbf	d1,@buildingLoop
000077DE                            
000077DE 3002                       		move.w	d2,d0
000077E0 3202                       		move.w	d2,d1
000077E2 E241                       		asr.w	#1,d1
000077E4 9041                       		sub.w	d1,d0
000077E6 48C0                       		ext.l	d0
000077E8 E980                       		asl.l	#4,d0
000077EA 81FC 000E                  		divs.w	#$E,d0
000077EE 48C0                       		ext.l	d0
000077F0 E980                       		asl.l	#4,d0
000077F2 E180                       		asl.l	#8,d0
000077F4 7600                       		moveq	#0,d3
000077F6 3602                       		move.w	d2,d3
000077F8 E243                       		asr.w	#1,d3
000077FA 323C 000D                  		move.w	#$D,d1
000077FE                            	@bushLoop:		
000077FE 32C3                       		move.w	d3,(a1)+
00007800 4843                       		swap	d3
00007802 D680                       		add.l	d0,d3
00007804 4843                       		swap	d3
00007806 51C9 FFF6                  		dbf	d1,@bushLoop
0000780A                            
0000780A 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000780E 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007812 3400                       		move.w	d0,d2
00007814 0240 01F0                  		andi.w	#$1F0,d0
00007818 E648                       		lsr.w	#3,d0
0000781A 45F2 0000                  		lea	(a2,d0),a2
0000781E 6000 FF12                  		bra.w	Bg_Scroll_X
00007822                            ; End of function Deform_SYZ
00007822                            
00007822                            ; ---------------------------------------------------------------------------
00007822                            ; Scrap	Brain Zone background layer deformation	code
00007822                            ; ---------------------------------------------------------------------------
00007822                            
00007822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007822                            
00007822                            
00007822                            Deform_SBZ:
00007822 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007826 48C4                       		ext.l	d4
00007828 ED84                       		asl.l	#6,d4
0000782A 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000782E 48C5                       		ext.l	d5
00007830 E985                       		asl.l	#4,d5
00007832 E385                       		asl.l	#1,d5
00007834 6100 0000                  		bsr.w	BGScroll_XY
00007838 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000783E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007842 323C 00DF                  		move.w	#223,d1
00007846 3038 F700                  		move.w	(v_screenposx).w,d0
0000784A 4440                       		neg.w	d0
0000784C 4840                       		swap	d0
0000784E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007852 4440                       		neg.w	d0
00007854                            
00007854                            loc_6576:
00007854 22C0                       		move.l	d0,(a1)+
00007856 51C9 FFFC                  		dbf	d1,loc_6576
0000785A 4E75                       		rts	
0000785C                            ;-------------------------------------------------------------------------------
0000785C                            Deform_SBZ2:;loc_68A2:
0000785C 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007860 48C4                       		ext.l	d4
00007862 ED84                       		asl.l	#6,d4
00007864 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007868 48C5                       		ext.l	d5
0000786A E985                       		asl.l	#4,d5
0000786C E385                       		asl.l	#1,d5
0000786E 6100 0000                  		bsr.w	BGScroll_XY
00007872 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007878 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000787C 323C 00DF                  		move.w	#223,d1
00007880 3038 F700                  		move.w	(v_screenposx).w,d0
00007884 4440                       		neg.w	d0
00007886 4840                       		swap	d0
00007888 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000788C 4440                       		neg.w	d0
0000788E                            
0000788E                            loc_6577:
0000788E 22C0                       		move.l	d0,(a1)+
00007890 51C9 FFFC                  		dbf	d1,loc_6577
00007894 4E75                       		rts	
00007896                            
00007896                            ; ---------------------------------------------------------------------------
00007896                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007896                            ; ---------------------------------------------------------------------------
00007896                            
00007896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007896                            
00007896                            
00007896                            ScrollHoriz:
00007896 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
0000789A 6100                       		bsr.s	MoveScreenHoriz
0000789C 3038 F700                  		move.w	(v_screenposx).w,d0
000078A0 0240 0010                  		andi.w	#$10,d0
000078A4 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000078A8 B300                       		eor.b	d1,d0
000078AA 6600                       		bne.s	@return
000078AC 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000078B2 3038 F700                  		move.w	(v_screenposx).w,d0
000078B6 9044                       		sub.w	d4,d0		; compare new with old screen position
000078B8 6A00                       		bpl.s	@scrollRight
000078BA                            
000078BA 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000078C0 4E75                       		rts	
000078C2                            
000078C2                            	@scrollRight:
000078C2 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000078C8                            
000078C8                            	@return:
000078C8 4E75                       		rts	
000078CA                            ; End of function ScrollHoriz
000078CA                            
000078CA                            
000078CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078CA                            
000078CA                            MoveScreenHoriz:
000078CA 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000078CE 6700 0000                  		beq.w	@cont		
000078D2 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000078D8                            		
000078D8                            	@cont:		
000078D8 3238 C904                  		move.w	($FFFFC904).w,d1
000078DC 6700                       		beq.s	@cont1
000078DE 0441 0100                  		sub.w	#$100,d1
000078E2 31C1 C904                  		move.w	d1,($FFFFC904).w
000078E6 7200                       		moveq	#0,d1
000078E8 1238 C904                  		move.b	($FFFFC904).w,d1
000078EC E509                       		lsl.b	#2,d1
000078EE 5801                       		addq.b	#4,d1
000078F0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000078F4 9001                       		sub.b	d1,d0
000078F6 43F8 CB00                  		lea	($FFFFCB00).w,a1
000078FA 3031 0000                  		move.w	(a1,d0.w),d0
000078FE 0240 3FFF                  		and.w	#$3FFF,d0
00007902 6000                       		bra.s	@cont2
00007904                            		
00007904                            @cont1:
00007904 3038 D008                  		move.w	($FFFFD008).w,d0
00007908                            		
00007908                            @cont2:
00007908 9078 F700                  		sub.w	($FFFFF700).w,d0
0000790C 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007910 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007912 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007916 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007918 4278 F73A                          clr.w    (v_scrshiftx).w
0000791C 4E75                               rts 
0000791E                            ; ===========================================================================
0000791E                            
0000791E                            SH_AheadOfMid:
0000791E 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007922 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007924 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007928                            
00007928                                SH_Ahead16:
00007928 D078 F700                          add.w    (v_screenposx).w,d0
0000792C B078 F72A                          cmp.w    (v_limitright2).w,d0
00007930 6D00                               blt.s    SH_SetScreen
00007932 3038 F72A                          move.w    (v_limitright2).w,d0
00007936                            
00007936                            SH_SetScreen:
00007936 3200                               move.w    d0,d1
00007938 9278 F700                          sub.w    (v_screenposx).w,d1
0000793C E141                               asl.w    #8,d1
0000793E 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007942 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007946 4E75                               rts 
00007948                            ; ===========================================================================
00007948                            
00007948                            SH_BehindMid:
00007948 0C40 FFF0                  		cmpi.w	#-$10,d0
0000794C 6400                       		bcc.s	@cont
0000794E 303C FFF0                  		move.w	#-$10,d0	
00007952                            
00007952                            @cont:
00007952 D078 F700                  		add.w	(v_screenposx).w,d0
00007956 B078 F728                  		cmp.w	(v_limitleft2).w,d0
0000795A 6EDA                       		bgt.s	SH_SetScreen
0000795C 3038 F728                  		move.w	(v_limitleft2).w,d0
00007960 60D4                       		bra.s	SH_SetScreen
00007962                            ; End of function MoveScreenHoriz
00007962                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007962                            
00007962                            MoveScreenHorizEXT:
00007962 3238 C904                  		move.w	($FFFFC904).w,d1
00007966 6700                       		beq.s	@cont1
00007968 0441 0100                  		sub.w	#$100,d1
0000796C 31C1 C904                  		move.w	d1,($FFFFC904).w
00007970 7200                       		moveq	#0,d1
00007972 1238 C904                  		move.b	($FFFFC904).w,d1
00007976 E509                       		lsl.b	#2,d1
00007978 5801                       		addq.b	#4,d1
0000797A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000797E 9001                       		sub.b	d1,d0
00007980 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007984 3031 0000                  		move.w	(a1,d0.w),d0
00007988 0240 3FFF                  		and.w	#$3FFF,d0
0000798C 6000                       		bra.s	@cont2
0000798E                            		
0000798E                            @cont1:
0000798E 3038 D008                  		move.w	($FFFFD008).w,d0
00007992                            		
00007992                            @cont2:
00007992 9078 F700                  		sub.w	($FFFFF700).w,d0
00007996 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
0000799A 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
0000799C 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
0000799E 6000                               bra.s    SHEXT_AheadOfMid    ; branch
000079A0                            ; ===========================================================================
000079A0                            
000079A0                            SHEXT_ProperlyFramed:
000079A0 4278 F73A                          clr.w    (v_scrshiftx).w
000079A4 4E75                               rts 
000079A6                            ; ===========================================================================
000079A6                            
000079A6                            SHEXT_AheadOfMid:
000079A6 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
000079AA 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
000079AC 303C 0010                          move.w    #16,d0        ; set to 16 if greater
000079B0                            
000079B0                            SHEXT_Ahead16:
000079B0 D078 F700                          add.w    (v_screenposx).w,d0
000079B4 B078 F72A                          cmp.w    (v_limitright2).w,d0
000079B8 6D00                               blt.s    SHEXT_SetScreen
000079BA 3038 F72A                          move.w    (v_limitright2).w,d0
000079BE                            
000079BE                            SHEXT_SetScreen:
000079BE 3200                               move.w    d0,d1
000079C0 9278 F700                          sub.w    (v_screenposx).w,d1
000079C4 E141                               asl.w    #8,d1
000079C6 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
000079CA 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
000079CE 4E75                               rts
000079D0                            
000079D0                            ; ===========================================================================
000079D0                            
000079D0                            SHEXT_BehindMid:
000079D0 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
000079D4 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
000079D6 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
000079DA                            
000079DA                            SHEXT_Behind16:
000079DA D078 F700                          add.w    (v_screenposx).w,d0
000079DE B078 F728                          cmp.w    (v_limitleft2).w,d0
000079E2 6EDA                               bgt.s    SHEXT_SetScreen
000079E4 3038 F728                          move.w    (v_limitleft2).w,d0
000079E8 60D4                               bra.s    SHEXT_SetScreen
000079EA                                  
000079EA                            ; End of function MoveScreenHoriz
000079EA                            
000079EA                            
000079EA                            ; ---------------------------------------------------------------------------
000079EA                            ; Subroutine to	scroll the level vertically as Sonic moves
000079EA                            ; ---------------------------------------------------------------------------
000079EA                            
000079EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079EA                            
000079EA                            
000079EA                            ScrollVertical:
000079EA 7200                       		moveq	#0,d1
000079EC 3038 D00C                  		move.w	(v_player+obY).w,d0
000079F0 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
000079F4 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
000079FA 6700                       		beq.s	SV_NotRolling	; if not, branch
000079FC 5B40                       		subq.w	#5,d0
000079FE                            
000079FE                            	SV_NotRolling:
000079FE 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007A04 6700                       		beq.s	loc_664A	; if not, branch
00007A06                            
00007A06 0640 0020                  		addi.w	#32,d0
00007A0A 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A0E 6500                       		bcs.s	loc_6696
00007A10 0440 0040                  		subi.w	#64,d0
00007A14 6400                       		bcc.s	loc_6696
00007A16 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A1A 6600                       		bne.s	loc_66A8
00007A1C 6000                       		bra.s	loc_6656
00007A1E                            ; ===========================================================================
00007A1E                            
00007A1E                            loc_664A:
00007A1E 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A22 6600                       		bne.s	loc_665C
00007A24 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A28 6600                       		bne.s	loc_66A8
00007A2A                            
00007A2A                            loc_6656:
00007A2A 4278 F73C                  		clr.w	(v_scrshifty).w
00007A2E 4E75                       		rts	
00007A30                            ; ===========================================================================
00007A30                            
00007A30                            loc_665C:
00007A30 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007A36 6600                       		bne.s	loc_6684
00007A38 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007A3C 6A00                       		bpl.s	loc_666C
00007A3E 4441                       		neg.w	d1
00007A40                            
00007A40                            loc_666C:
00007A40 0C41 0800                  		cmpi.w	#$800,d1
00007A44 6400                       		bcc.s	loc_6696
00007A46 323C 0600                  		move.w	#$600,d1
00007A4A 0C40 0006                  		cmpi.w	#6,d0
00007A4E 6E00                       		bgt.s	loc_66F6
00007A50 0C40 FFFA                  		cmpi.w	#-6,d0
00007A54 6D00                       		blt.s	loc_66C0
00007A56 6000                       		bra.s	loc_66AE
00007A58                            ; ===========================================================================
00007A58                            
00007A58                            loc_6684:
00007A58 323C 0200                  		move.w	#$200,d1
00007A5C 0C40 0002                  		cmpi.w	#2,d0
00007A60 6E00                       		bgt.s	loc_66F6
00007A62 0C40 FFFE                  		cmpi.w	#-2,d0
00007A66 6D00                       		blt.s	loc_66C0
00007A68 6000                       		bra.s	loc_66AE
00007A6A                            ; ===========================================================================
00007A6A                            
00007A6A                            loc_6696:
00007A6A 323C 1000                  		move.w	#$1000,d1
00007A6E 0C40 0010                  		cmpi.w	#$10,d0
00007A72 6E00                       		bgt.s	loc_66F6
00007A74 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A78 6D00                       		blt.s	loc_66C0
00007A7A 6000                       		bra.s	loc_66AE
00007A7C                            ; ===========================================================================
00007A7C                            
00007A7C                            loc_66A8:
00007A7C 7000                       		moveq	#0,d0
00007A7E 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007A82                            
00007A82                            loc_66AE:
00007A82 7200                       		moveq	#0,d1
00007A84 3200                       		move.w	d0,d1
00007A86 D278 F704                  		add.w	(v_screenposy).w,d1
00007A8A 4A40                       		tst.w	d0
00007A8C 6A00 0000                  		bpl.w	loc_6700
00007A90 6000 0000                  		bra.w	loc_66CC
00007A94                            ; ===========================================================================
00007A94                            
00007A94                            loc_66C0:
00007A94 4441                       		neg.w	d1
00007A96 48C1                       		ext.l	d1
00007A98 E181                       		asl.l	#8,d1
00007A9A D2B8 F704                  		add.l	(v_screenposy).w,d1
00007A9E 4841                       		swap	d1
00007AA0                            
00007AA0                            loc_66CC:
00007AA0 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007AA4 6E00                       		bgt.s	loc_6724
00007AA6 0C41 FF00                  		cmpi.w	#-$100,d1
00007AAA 6E00                       		bgt.s	loc_66F0
00007AAC 0241 07FF                  		andi.w	#$7FF,d1
00007AB0 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007AB6 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007ABC 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007AC2 6000                       		bra.s	loc_6724
00007AC4                            ; ===========================================================================
00007AC4                            
00007AC4                            loc_66F0:
00007AC4 3238 F72C                  		move.w	(v_limittop2).w,d1
00007AC8 6000                       		bra.s	loc_6724
00007ACA                            ; ===========================================================================
00007ACA                            
00007ACA                            loc_66F6:
00007ACA 48C1                       		ext.l	d1
00007ACC E181                       		asl.l	#8,d1
00007ACE D2B8 F704                  		add.l	(v_screenposy).w,d1
00007AD2 4841                       		swap	d1
00007AD4                            
00007AD4                            loc_6700:
00007AD4 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007AD8 6D00                       		blt.s	loc_6724
00007ADA 0441 0800                  		subi.w	#$800,d1
00007ADE 6500                       		bcs.s	loc_6720
00007AE0 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007AE6 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007AEC 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007AF2 6000                       		bra.s	loc_6724
00007AF4                            ; ===========================================================================
00007AF4                            
00007AF4                            loc_6720:
00007AF4 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007AF8                            
00007AF8                            loc_6724:
00007AF8 3838 F704                  		move.w	(v_screenposy).w,d4
00007AFC 4841                       		swap	d1
00007AFE 2601                       		move.l	d1,d3
00007B00 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007B04 E09B                       		ror.l	#8,d3
00007B06 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007B0A 21C1 F704                  		move.l	d1,(v_screenposy).w
00007B0E 3038 F704                  		move.w	(v_screenposy).w,d0
00007B12 0240 0010                  		andi.w	#$10,d0
00007B16 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007B1A B300                       		eor.b	d1,d0
00007B1C 6600                       		bne.s	@return
00007B1E 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007B24 3038 F704                  		move.w	(v_screenposy).w,d0
00007B28 9044                       		sub.w	d4,d0
00007B2A 6A00                       		bpl.s	@scrollBottom
00007B2C 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007B32 4E75                       		rts	
00007B34                            ; ===========================================================================
00007B34                            
00007B34                            	@scrollBottom:
00007B34 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007B3A                            
00007B3A                            	@return:
00007B3A 4E75                       		rts	
00007B3C                            ; End of function ScrollVertical
00007B3C                            
00007B3C                            
00007B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B3C                            ; Scrolls background and sets redraw flags.
00007B3C                            ; d4 - background x offset * $10000
00007B3C                            ; d5 - background y offset * $10000
00007B3C                            
00007B3C                            BGScroll_XY:
00007B3C 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007B40 2002                       		move.l	d2,d0
00007B42 D084                       		add.l	d4,d0
00007B44 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007B48 2200                       		move.l	d0,d1
00007B4A 4841                       		swap	d1
00007B4C 0241 0010                  		andi.w	#$10,d1
00007B50 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007B54 B701                       		eor.b	d3,d1
00007B56 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007B58 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007B5E 9082                       		sub.l	d2,d0	; new - old
00007B60 6A00                       		bpl.s	@scrollRight
00007B62 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007B68 6000                       		bra.s	BGScroll_YRelative
00007B6A                            	@scrollRight:
00007B6A 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007B70                            BGScroll_YRelative:
00007B70 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007B74 2003                       		move.l	d3,d0
00007B76 D085                       		add.l	d5,d0
00007B78 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007B7C 2200                       		move.l	d0,d1
00007B7E 4841                       		swap	d1
00007B80 0241 0010                  		andi.w	#$10,d1
00007B84 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007B88 B501                       		eor.b	d2,d1
00007B8A 6600                       		bne.s	@return
00007B8C 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007B92 9083                       		sub.l	d3,d0
00007B94 6A00                       		bpl.s	@scrollBottom
00007B96 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007B9C 4E75                       		rts
00007B9E                            	@scrollBottom:
00007B9E 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007BA4                            	@return:
00007BA4 4E75                       		rts
00007BA6                            ; End of function BGScroll_XY
00007BA6                            
00007BA6                            Bg_Scroll_Y:
00007BA6 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007BAA 2003                       		move.l	d3,d0
00007BAC D085                       		add.l	d5,d0
00007BAE 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007BB2 2200                       		move.l	d0,d1
00007BB4 4841                       		swap	d1
00007BB6 0241 0010                  		andi.w	#$10,d1
00007BBA 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007BBE B501                       		eor.b	d2,d1
00007BC0 6600                       		bne.s	@return
00007BC2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007BC8 9083                       		sub.l	d3,d0
00007BCA 6A00                       		bpl.s	@scrollBottom
00007BCC 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007BD2 4E75                       		rts
00007BD4                            	@scrollBottom:
00007BD4 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007BDA                            	@return:
00007BDA 4E75                       		rts
00007BDC                            
00007BDC                            
00007BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BDC                            
00007BDC                            
00007BDC                            BGScroll_YAbsolute:
00007BDC 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007BE0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007BE4 3200                       		move.w	d0,d1
00007BE6 0241 0010                  		andi.w	#$10,d1
00007BEA 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007BEE B501                       		eor.b	d2,d1
00007BF0 6600                       		bne.s	@return
00007BF2 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007BF8 9043                       		sub.w	d3,d0
00007BFA 6A00                       		bpl.s	@scrollBottom
00007BFC 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007C02 4E75                       		rts
00007C04                            	@scrollBottom:
00007C04 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007C0A                            	@return:
00007C0A 4E75                       		rts
00007C0C                            ; End of function BGScroll_YAbsolute
00007C0C                            
00007C0C                            
00007C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C0C                            ; d6 - bit to set for redraw
00007C0C                            
00007C0C                            BGScroll_Block1:
00007C0C 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C10 2002                       		move.l	d2,d0
00007C12 D084                       		add.l	d4,d0
00007C14 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C18 2200                       		move.l	d0,d1
00007C1A 4841                       		swap	d1
00007C1C 0241 0010                  		andi.w	#$10,d1
00007C20 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C24 B701                       		eor.b	d3,d1
00007C26 6600                       		bne.s	@return
00007C28 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C2E 9082                       		sub.l	d2,d0
00007C30 6A00                       		bpl.s	@scrollRight
00007C32 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007C36 6000                       		bra.s	@return
00007C38                            	@scrollRight:
00007C38 5206                       		addq.b	#1,d6
00007C3A 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007C3E                            	@return:
00007C3E 4E75                       		rts
00007C40                            ; End of function BGScroll_Block1
00007C40                            
00007C40                            
00007C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C40                            
00007C40                            
00007C40                            BGScroll_Block2:
00007C40 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007C44 2002                       		move.l	d2,d0
00007C46 D084                       		add.l	d4,d0
00007C48 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007C4C 2200                       		move.l	d0,d1
00007C4E 4841                       		swap	d1
00007C50 0241 0010                  		andi.w	#$10,d1
00007C54 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007C58 B701                       		eor.b	d3,d1
00007C5A 6600                       		bne.s	@return
00007C5C 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007C62 9082                       		sub.l	d2,d0
00007C64 6A00                       		bpl.s	@scrollRight
00007C66 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007C6A 6000                       		bra.s	@return
00007C6C                            	@scrollRight:
00007C6C 5206                       		addq.b	#1,d6
00007C6E 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007C72                            	@return:
00007C72 4E75                       		rts
00007C74                            ;-------------------------------------------------------------------------------
00007C74                            BGScroll_Block3:
00007C74 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007C78 2002                       		move.l	d2,d0
00007C7A D084                       		add.l	d4,d0
00007C7C 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007C80 2200                       		move.l	d0,d1
00007C82 4841                       		swap	d1
00007C84 0241 0010                  		andi.w	#$10,d1
00007C88 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007C8C B701                       		eor.b	d3,d1
00007C8E 6600                       		bne.s	@return
00007C90 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007C96 9082                       		sub.l	d2,d0
00007C98 6A00                       		bpl.s	@scrollRight
00007C9A 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007C9E 6000                       		bra.s	@return
00007CA0                            	@scrollRight:
00007CA0 5206                       		addq.b	#1,d6
00007CA2 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007CA6                            	@return:
00007CA6 4E75                       		rts
00007CA6 4E75                       		rts
00007CA8                            
00007CA8                            
00007CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CA8                            
00007CA8                            ; sub_6886:
00007CA8                            LoadTilesAsYouMove_BGOnly:
00007CA8 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007CAE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007CB4 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007CB8 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007CBC 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007CC0 343C 6000                  		move.w	#$6000,d2
00007CC4 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007CC8 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007CCC 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007CD0 6000 0000                  		bra.w	DrawBGScrollBlock2
00007CD4                            ; End of function sub_6886
00007CD4                            
00007CD4                            ; ---------------------------------------------------------------------------
00007CD4                            ; Subroutine to	display	correct	tiles as you move
00007CD4                            ; ---------------------------------------------------------------------------
00007CD4                            
00007CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CD4                            
00007CD4                            
00007CD4                            LoadTilesAsYouMove:
00007CD4 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007CDA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007CE0                            		; First, update the background
00007CE0 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007CE4 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007CE8 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007CEC 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007CF0 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007CF4 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007CF8 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007CFC 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007D00                            		; REV01 added a third scroll block, though, technically,
00007D00                            		; the RAM for it was already there in REV00
00007D00 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007D04 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007D08 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007D0C                            		; Then, update the foreground
00007D0C 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007D10 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007D14 49F8 A400                  		lea	(v_lvllayout).w,a4
00007D18 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007D1C                            		; The FG's update function is inlined here
00007D1C 4A12                       		tst.b	(a2)
00007D1E 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007D20 0892 0000                  		bclr	#0,(a2)
00007D24 6700                       		beq.s	loc_6908
00007D26                            		; Draw new tiles at the top
00007D26 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007D28 7AF0                       		moveq	#-16,d5 ; X coordinate
00007D2A 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D2E 78F0                       		moveq	#-16,d4 ; Y coordinate
00007D30 7AF0                       		moveq	#-16,d5 ; X coordinate
00007D32 6100 0000                  		bsr.w	DrawBlocks_LR
00007D36                            
00007D36                            loc_6908:
00007D36 0892 0001                  		bclr	#1,(a2)
00007D3A 6700                       		beq.s	loc_6922
00007D3C                            		; Draw new tiles at the bottom
00007D3C 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007D40 7AF0                       		moveq	#-16,d5
00007D42 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D46 383C 00E0                  		move.w	#224,d4
00007D4A 7AF0                       		moveq	#-16,d5
00007D4C 6100 0000                  		bsr.w	DrawBlocks_LR
00007D50                            
00007D50                            loc_6922:
00007D50 0892 0002                  		bclr	#2,(a2)
00007D54 6700                       		beq.s	loc_6938
00007D56                            		; Draw new tiles on the left
00007D56 78F0                       		moveq	#-16,d4
00007D58 7AF0                       		moveq	#-16,d5
00007D5A 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D5E 78F0                       		moveq	#-16,d4
00007D60 7AF0                       		moveq	#-16,d5
00007D62 6100 0000                  		bsr.w	DrawBlocks_TB
00007D66                            
00007D66                            loc_6938:
00007D66 0892 0003                  		bclr	#3,(a2)
00007D6A 6700                       		beq.s	locret_6952
00007D6C                            		; Draw new tiles on the right
00007D6C 78F0                       		moveq	#-16,d4
00007D6E 3A3C 0140                  		move.w	#320,d5
00007D72 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D76 78F0                       		moveq	#-16,d4
00007D78 3A3C 0140                  		move.w	#320,d5
00007D7C 6100 0000                  		bsr.w	DrawBlocks_TB
00007D80                            
00007D80                            locret_6952:
00007D80 4E75                       		rts	
00007D82                            ; End of function LoadTilesAsYouMove
00007D82                            
00007D82                            
00007D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D82                            
00007D82                            ; sub_6954:
00007D82                            DrawBGScrollBlock1:
00007D82 4A12                       		tst.b	(a2)
00007D84 6700 0000                  		beq.w	locret_69F2
00007D88 0892 0000                  		bclr	#0,(a2)
00007D8C 6700                       		beq.s	loc_6972
00007D8E                            		; Draw new tiles at the top
00007D8E 78F0                       		moveq	#-16,d4
00007D90 7AF0                       		moveq	#-16,d5
00007D92 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D96 78F0                       		moveq	#-16,d4
00007D98 7AF0                       		moveq	#-16,d5
00007D9A 6100 0000                  			bsr.w	DrawBlocks_LR
00007D9E                            
00007D9E                            loc_6972:
00007D9E 0892 0001                  		bclr	#1,(a2)
00007DA2 6700                       		beq.s	loc_698E
00007DA4                            		; Draw new tiles at the top
00007DA4 383C 00E0                  		move.w	#224,d4
00007DA8 7AF0                       		moveq	#-16,d5
00007DAA 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DAE 383C 00E0                  		move.w	#224,d4
00007DB2 7AF0                       		moveq	#-16,d5
00007DB4 6100 0000                  			bsr.w	DrawBlocks_LR
00007DB8                            
00007DB8                            loc_698E:
00007DB8 0892 0002                  		bclr	#2,(a2)
00007DBC                            
00007DBC                            
00007DBC 6700                       			beq.s	locj_6D56
00007DBE                            			; Draw new tiles on the left
00007DBE 78F0                       			moveq	#-16,d4
00007DC0 7AF0                       			moveq	#-16,d5
00007DC2 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007DC6 78F0                       			moveq	#-16,d4
00007DC8 7AF0                       			moveq	#-16,d5
00007DCA 6100 0000                  			bsr.w	DrawBlocks_TB
00007DCE                            	locj_6D56:
00007DCE                            
00007DCE 0892 0003                  			bclr	#3,(a2)
00007DD2 6700                       			beq.s	locj_6D70
00007DD4                            			; Draw new tiles on the right
00007DD4 78F0                       			moveq	#-16,d4
00007DD6 3A3C 0140                  			move.w	#320,d5
00007DDA 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007DDE 78F0                       			moveq	#-16,d4
00007DE0 3A3C 0140                  			move.w	#320,d5
00007DE4 6100 0000                  			bsr.w	DrawBlocks_TB
00007DE8                            	locj_6D70:
00007DE8                            
00007DE8 0892 0004                  			bclr	#4,(a2)
00007DEC 6700                       			beq.s	locj_6D88
00007DEE                            			; Draw entire row at the top
00007DEE 78F0                       			moveq	#-16,d4
00007DF0 7A00                       			moveq	#0,d5
00007DF2 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007DF6 78F0                       			moveq	#-16,d4
00007DF8 7A00                       			moveq	#0,d5
00007DFA 7C1F                       			moveq	#(512/16)-1,d6
00007DFC 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E00                            	locj_6D88:
00007E00                            
00007E00 0892 0005                  			bclr	#5,(a2)
00007E04 6700                       			beq.s	locret_69F2
00007E06                            			; Draw entire row at the bottom
00007E06 383C 00E0                  			move.w	#224,d4
00007E0A 7A00                       			moveq	#0,d5
00007E0C 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007E10 383C 00E0                  			move.w	#224,d4
00007E14 7A00                       			moveq	#0,d5
00007E16 7C1F                       			moveq	#(512/16)-1,d6
00007E18 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E1C                            
00007E1C                            locret_69F2:
00007E1C 4E75                       		rts	
00007E1E                            ; End of function DrawBGScrollBlock1
00007E1E                            
00007E1E                            
00007E1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E1E                            
00007E1E                            ; Essentially, this draws everything that isn't scroll block 1
00007E1E                            ; sub_69F4:
00007E1E                            DrawBGScrollBlock2:
00007E1E                            
00007E1E 4A12                       			tst.b	(a2)
00007E20 6700 0000                  			beq.w	locj_6DF2
00007E24 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007E2A 6700 0000                  			beq.w	Draw_SBz
00007E2E 0892 0000                  			bclr	#0,(a2)
00007E32 6700                       			beq.s	locj_6DD2
00007E34                            			; Draw new tiles on the left
00007E34 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007E38 7AF0                       			moveq	#-16,d5
00007E3A 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E3E 383C 0070                  			move.w	#224/2,d4
00007E42 7AF0                       			moveq	#-16,d5
00007E44 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007E46 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007E4A                            	locj_6DD2:
00007E4A 0892 0001                  			bclr	#1,(a2)
00007E4E 6700                       			beq.s	locj_6DF2
00007E50                            			; Draw new tiles on the right
00007E50 383C 0070                  			move.w	#224/2,d4
00007E54 3A3C 0140                  			move.w	#320,d5
00007E58 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E5C 383C 0070                  			move.w	#224/2,d4
00007E60 3A3C 0140                  			move.w	#320,d5
00007E64 7C02                       			moveq	#3-1,d6
00007E66 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007E6A                            	locj_6DF2:
00007E6A 4E75                       			rts
00007E6C                            ;===============================================================================
00007E6C                            	locj_6DF4:
00007E6C 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007E7C 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007E8C 0200                       			dc.b $02,$00						
00007E8E                            ;===============================================================================
00007E8E                            	Draw_SBz:
00007E8E 78F0                       			moveq	#-16,d4
00007E90 0892 0000                  			bclr	#0,(a2)
00007E94 6600                       			bne.s	locj_6E28
00007E96 0892 0001                  			bclr	#1,(a2)
00007E9A 6700                       			beq.s	locj_6E72
00007E9C 383C 00E0                  			move.w	#224,d4
00007EA0                            	locj_6E28:
00007EA0 41F9 0000 7E6D             			lea	(locj_6DF4+1).l,a0
00007EA6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007EAA D044                       			add.w	d4,d0
00007EAC 0240 01F0                  			andi.w	#$1F0,d0
00007EB0 E848                       			lsr.w	#4,d0
00007EB2 1030 0000                  			move.b	(a0,d0.w),d0
00007EB6 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007EBC 3673 0000                  			movea.w	(a3,d0.w),a3
00007EC0 6700                       			beq.s	locj_6E5E
00007EC2 7AF0                       			moveq	#-16,d5
00007EC4 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007EC8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007ECC 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007ED0 6100 0000                  			bsr.w	DrawBlocks_LR
00007ED4 6000                       			bra.s	locj_6E72
00007ED6                            ;===============================================================================
00007ED6                            	locj_6E5E:
00007ED6 7A00                       			moveq	#0,d5
00007ED8 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007EDC 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007EE0 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007EE4 7C1F                       			moveq	#(512/16)-1,d6
00007EE6 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007EEA                            	locj_6E72:
00007EEA 4A12                       			tst.b	(a2)
00007EEC 6600                       			bne.s	locj_6E78
00007EEE 4E75                       			rts
00007EF0                            ;===============================================================================			
00007EF0                            	locj_6E78:
00007EF0 78F0                       			moveq	#-16,d4
00007EF2 7AF0                       			moveq	#-16,d5
00007EF4 1012                       			move.b	(a2),d0
00007EF6 0200 00A8                  			andi.b	#$A8,d0
00007EFA 6700                       			beq.s	locj_6E8C
00007EFC E208                       			lsr.b	#1,d0
00007EFE 1480                       			move.b	d0,(a2)
00007F00 3A3C 0140                  			move.w	#320,d5
00007F04                            	locj_6E8C:
00007F04 41F9 0000 7E6C             			lea	(locj_6DF4).l,a0
00007F0A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007F0E 0240 01F0                  			andi.w	#$1F0,d0
00007F12 E848                       			lsr.w	#4,d0
00007F14 41F0 0000                  			lea	(a0,d0.w),a0
00007F18 6000 0000                  			bra.w	locj_6FEC						
00007F1C                            ;===============================================================================
00007F1C                            
00007F1C                            
00007F1C                            	; locj_6EA4:
00007F1C                            	DrawBGScrollBlock3:
00007F1C 4A12                       			tst.b	(a2)
00007F1E 6700 0000                  			beq.w	locj_6EF0
00007F22 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00007F28 6700 0000                  			beq.w	Draw_Mz
00007F2C 0892 0000                  			bclr	#0,(a2)
00007F30 6700                       			beq.s	locj_6ED0
00007F32                            			; Draw new tiles on the left
00007F32 383C 0040                  			move.w	#$40,d4
00007F36 7AF0                       			moveq	#-16,d5
00007F38 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F3C 383C 0040                  			move.w	#$40,d4
00007F40 7AF0                       			moveq	#-16,d5
00007F42 7C02                       			moveq	#3-1,d6
00007F44 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F48                            	locj_6ED0:
00007F48 0892 0001                  			bclr	#1,(a2)
00007F4C 6700                       			beq.s	locj_6EF0
00007F4E                            			; Draw new tiles on the right
00007F4E 383C 0040                  			move.w	#$40,d4
00007F52 3A3C 0140                  			move.w	#320,d5
00007F56 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F5A 383C 0040                  			move.w	#$40,d4
00007F5E 3A3C 0140                  			move.w	#320,d5
00007F62 7C02                       			moveq	#3-1,d6
00007F64 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F68                            	locj_6EF0:
00007F68 4E75                       			rts
00007F6A                            	locj_6EF2:
00007F6A 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00007F7A 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007F8A 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007F9A 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FAA 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FBA 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FCA 0200                       			dc.b $02,$00
00007FCC                            ;===============================================================================
00007FCC                            	Draw_Mz:
00007FCC 78F0                       			moveq	#-16,d4
00007FCE 0892 0000                  			bclr	#0,(a2)
00007FD2 6600                       			bne.s	locj_6F66
00007FD4 0892 0001                  			bclr	#1,(a2)
00007FD8 6700                       			beq.s	locj_6FAE
00007FDA 383C 00E0                  			move.w	#224,d4
00007FDE                            	locj_6F66:
00007FDE 41F9 0000 7F6B             			lea	(locj_6EF2+1).l,a0
00007FE4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FE8 0440 0200                  			subi.w	#$200,d0
00007FEC D044                       			add.w	d4,d0
00007FEE 0240 07F0                  			andi.w	#$7F0,d0
00007FF2 E848                       			lsr.w	#4,d0
00007FF4 1030 0000                  			move.b	(a0,d0.w),d0
00007FF8 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00007FFC 6700                       			beq.s	locj_6F9A
00007FFE 7AF0                       			moveq	#-16,d5
00008000 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008004 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008008 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000800C 6100 0000                  			bsr.w	DrawBlocks_LR
00008010 6000                       			bra.s	locj_6FAE
00008012                            ;===============================================================================
00008012                            	locj_6F9A:
00008012 7A00                       			moveq	#0,d5
00008014 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008018 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000801C 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008020 7C1F                       			moveq	#(512/16)-1,d6
00008022 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008026                            	locj_6FAE:
00008026 4A12                       			tst.b	(a2)
00008028 6600                       			bne.s	locj_6FB4
0000802A 4E75                       			rts
0000802C                            ;===============================================================================			
0000802C                            	locj_6FB4:
0000802C 78F0                       			moveq	#-16,d4
0000802E 7AF0                       			moveq	#-16,d5
00008030 1012                       			move.b	(a2),d0
00008032 0200 00A8                  			andi.b	#$A8,d0
00008036 6700                       			beq.s	locj_6FC8
00008038 E208                       			lsr.b	#1,d0
0000803A 1480                       			move.b	d0,(a2)
0000803C 3A3C 0140                  			move.w	#320,d5
00008040                            	locj_6FC8:
00008040 41F9 0000 7F6A             			lea	(locj_6EF2).l,a0
00008046 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000804A 0440 0200                  			subi.w	#$200,d0
0000804E 0240 07F0                  			andi.w	#$7F0,d0
00008052 E848                       			lsr.w	#4,d0
00008054 41F0 0000                  			lea	(a0,d0.w),a0
00008058 6000 0000                  			bra.w	locj_6FEC
0000805C                            ;===============================================================================			
0000805C                            	locj_6FE4:
0000805C FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008064                            	locj_6FEC:
00008064 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008066 2E3C 0080 0000             			move.l	#$800000,d7
0000806C                            	locj_6FF4:			
0000806C 7000                       			moveq	#0,d0
0000806E 1018                       			move.b	(a0)+,d0
00008070 0112                       			btst	d0,(a2)
00008072 6700                       			beq.s	locj_701C
00008074 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008078 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
0000807C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008080 6100 0000                  			bsr.w	GetBlockData
00008084 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008088 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000808C 6100 0000                  			bsr.w	DrawBlock
00008090 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008094                            	locj_701C:
00008094 0644 0010                  			addi.w	#16,d4
00008098 51CE FFD2                  			dbf	d6,locj_6FF4
0000809C 4212                       			clr.b	(a2)
0000809E 4E75                       			rts			
000080A0                            
000080A0                            
000080A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A0                            
000080A0                            ; Don't be fooled by the name: this function's for drawing from left to right
000080A0                            ; when the camera's moving up or down
000080A0                            ; DrawTiles_LR:
000080A0                            DrawBlocks_LR:
000080A0 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000080A2                            ; DrawTiles_LR_2:
000080A2                            DrawBlocks_LR_2:
000080A2 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000080A8 2200                       		move.l	d0,d1
000080AA                            
000080AA                            	@loop:
000080AA 48E7 0C00                  		movem.l	d4-d5,-(sp)
000080AE 6100 0000                  		bsr.w	GetBlockData
000080B2 2001                       		move.l	d1,d0
000080B4 6100 0000                  		bsr.w	DrawBlock
000080B8 5801                       		addq.b	#4,d1		; Two tiles ahead
000080BA 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000080BE 4CDF 0030                  		movem.l	(sp)+,d4-d5
000080C2 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000080C6 51CE FFE2                  		dbf	d6,@loop
000080CA 4E75                       		rts
000080CC                            ; End of function DrawBlocks_LR
000080CC                            
000080CC                            ; DrawTiles_LR_3:
000080CC                            DrawBlocks_LR_3:
000080CC 2E3C 0080 0000             		move.l	#$800000,d7
000080D2 2200                       		move.l	d0,d1
000080D4                            
000080D4                            	@loop:
000080D4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000080D8 6100 0000                  		bsr.w	GetBlockData_2
000080DC 2001                       		move.l	d1,d0
000080DE 6100 0000                  		bsr.w	DrawBlock
000080E2 5801                       		addq.b	#4,d1
000080E4 0201 007F                  		andi.b	#$7F,d1
000080E8 4CDF 0030                  		movem.l	(sp)+,d4-d5
000080EC 0645 0010                  		addi.w	#16,d5
000080F0 51CE FFE2                  		dbf	d6,@loop
000080F4 4E75                       		rts	
000080F6                            ; End of function DrawBlocks_LR_3
000080F6                            
000080F6                            
000080F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080F6                            
000080F6                            ; Don't be fooled by the name: this function's for drawing from top to bottom
000080F6                            ; when the camera's moving left or right
000080F6                            ; DrawTiles_TB:
000080F6                            DrawBlocks_TB:
000080F6 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
000080F8                            ; DrawTiles_TB_2:
000080F8                            DrawBlocks_TB_2:
000080F8 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000080FE 2200                       		move.l	d0,d1
00008100                            
00008100                            	@loop:
00008100 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008104 6100 0000                  		bsr.w	GetBlockData
00008108 2001                       		move.l	d1,d0
0000810A 6100 0000                  		bsr.w	DrawBlock
0000810E 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008112 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
00008116 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000811A 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
0000811E 51CE FFE0                  		dbf	d6,@loop
00008122 4E75                       		rts	
00008124                            ; End of function DrawBlocks_TB_2
00008124                            
00008124                            
00008124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008124                            
00008124                            ; Draws a block's worth of tiles
00008124                            ; Parameters:
00008124                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008124                            ; a1 = Pointer to block
00008124                            ; a5 = Pointer to VDP command port
00008124                            ; a6 = Pointer to VDP data port
00008124                            ; d0 = VRAM command to access plane
00008124                            ; d2 = VRAM plane A/B specifier
00008124                            ; d7 = Plane row delta
00008124                            ; DrawTiles:
00008124                            DrawBlock:
00008124 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008126 4840                       		swap	d0
00008128 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
0000812C 6600                       		bne.s	DrawFlipY
0000812E 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008132 6600                       		bne.s	DrawFlipX
00008134 2A80                       		move.l	d0,(a5)
00008136 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008138 D087                       		add.l	d7,d0		; Next row
0000813A 2A80                       		move.l	d0,(a5)
0000813C 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
0000813E 4E75                       		rts	
00008140                            ; ===========================================================================
00008140                            
00008140                            DrawFlipX:
00008140 2A80                       		move.l	d0,(a5)
00008142 2819                       		move.l	(a1)+,d4
00008144 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
0000814A 4844                       		swap	d4		; Swap the tiles around
0000814C 2C84                       		move.l	d4,(a6)		; Write top two tiles
0000814E D087                       		add.l	d7,d0		; Next row
00008150 2A80                       		move.l	d0,(a5)
00008152 2819                       		move.l	(a1)+,d4
00008154 0A84 0800 0800             		eori.l	#$8000800,d4
0000815A 4844                       		swap	d4
0000815C 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
0000815E 4E75                       		rts	
00008160                            ; ===========================================================================
00008160                            
00008160                            DrawFlipY:
00008160 0810 0003                  		btst	#3,(a0)
00008164 6600                       		bne.s	DrawFlipXY
00008166 2A80                       		move.l	d0,(a5)
00008168 2A19                       		move.l	(a1)+,d5
0000816A 2819                       		move.l	(a1)+,d4
0000816C 0A84 1000 1000             		eori.l	#$10001000,d4
00008172 2C84                       		move.l	d4,(a6)
00008174 D087                       		add.l	d7,d0
00008176 2A80                       		move.l	d0,(a5)
00008178 0A85 1000 1000             		eori.l	#$10001000,d5
0000817E 2C85                       		move.l	d5,(a6)
00008180 4E75                       		rts	
00008182                            ; ===========================================================================
00008182                            
00008182                            DrawFlipXY:
00008182 2A80                       		move.l	d0,(a5)
00008184 2A19                       		move.l	(a1)+,d5
00008186 2819                       		move.l	(a1)+,d4
00008188 0A84 1800 1800             		eori.l	#$18001800,d4
0000818E 4844                       		swap	d4
00008190 2C84                       		move.l	d4,(a6)
00008192 D087                       		add.l	d7,d0
00008194 2A80                       		move.l	d0,(a5)
00008196 0A85 1800 1800             		eori.l	#$18001800,d5
0000819C 4845                       		swap	d5
0000819E 2C85                       		move.l	d5,(a6)
000081A0 4E75                       		rts	
000081A2                            ; End of function DrawBlocks
000081A2                            
000081A2                            ; ===========================================================================
000081A2                            ; unused garbage
000081A2                            
000081A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A2                            
000081A2                            ; Gets address of block at a certain coordinate
000081A2                            ; Parameters:
000081A2                            ; a4 = Pointer to level layout
000081A2                            ; d4 = Relative Y coordinate
000081A2                            ; d5 = Relative X coordinate
000081A2                            ; Returns:
000081A2                            ; a0 = Address of block metadata
000081A2                            ; a1 = Address of block
000081A2                            ; DrawBlocks:
000081A2                            GetBlockData:
000081A2 DA53                       			add.w	(a3),d5
000081A4                            	GetBlockData_2:
000081A4 D86B 0004                  			add.w	4(a3),d4
000081A8 43F8 B000                  			lea	(v_16x16).w,a1
000081AC                            		; Turn Y coordinate into index into level layout
000081AC 3604                       		move.w	d4,d3
000081AE E24B                       		lsr.w	#1,d3
000081B0 0243 0380                  		andi.w	#$380,d3
000081B4                            		; Turn X coordinate into index into level layout
000081B4 E64D                       		lsr.w	#3,d5
000081B6 3005                       		move.w	d5,d0
000081B8 EA48                       		lsr.w	#5,d0
000081BA 0240 007F                  		andi.w	#$7F,d0
000081BE                            		; Get chunk from level layout
000081BE D043                       		add.w	d3,d0
000081C0 76FF                       		moveq	#-1,d3
000081C2 1634 0000                  		move.b	(a4,d0.w),d3
000081C6 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000081C8                            		; Turn chunk ID into index into chunk table
000081C8 5303                       		subq.b	#1,d3
000081CA 0243 007F                  		andi.w	#$7F,d3
000081CE EE5B                       		ror.w	#7,d3
000081D0                            		; Turn Y coordinate into index into chunk
000081D0 D844                       		add.w	d4,d4
000081D2 0244 01E0                  		andi.w	#$1E0,d4
000081D6                            		; Turn X coordinate into index into chunk
000081D6 0245 001E                  		andi.w	#$1E,d5
000081DA                            		; Get block metadata from chunk
000081DA D644                       		add.w	d4,d3
000081DC D645                       		add.w	d5,d3
000081DE 2043                       		movea.l	d3,a0
000081E0 3610                       		move.w	(a0),d3
000081E2                            		; Turn block ID into address
000081E2 0243 03FF                  		andi.w	#$3FF,d3
000081E6 E74B                       		lsl.w	#3,d3
000081E8 D2C3                       		adda.w	d3,a1
000081EA                            
000081EA                            locret_6C1E:
000081EA 4E75                       		rts	
000081EC                            ; End of function GetBlockData
000081EC                            
000081EC                            
000081EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081EC                            
000081EC                            ; Produces a VRAM plane access command from coordinates
000081EC                            ; Parameters:
000081EC                            ; d4 = Relative Y coordinate
000081EC                            ; d5 = Relative X coordinate
000081EC                            ; Returns VDP command in d0
000081EC                            Calc_VRAM_Pos:
000081EC DA53                       			add.w	(a3),d5
000081EE                            	Calc_VRAM_Pos_2:
000081EE D86B 0004                  			add.w	4(a3),d4
000081F2                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000081F2                            		; Also note that this wraps the value to the size of the plane:
000081F2                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000081F2 0244 00F0                  		andi.w	#$F0,d4
000081F6 0245 01F0                  		andi.w	#$1F0,d5
000081FA                            		; Transform the adjusted coordinates into a VDP command
000081FA E94C                       		lsl.w	#4,d4
000081FC E44D                       		lsr.w	#2,d5
000081FE D845                       		add.w	d5,d4
00008200 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008202 4840                       		swap	d0
00008204 3004                       		move.w	d4,d0
00008206 4E75                       		rts	
00008208                            ; End of function Calc_VRAM_Pos
00008208                            
00008208                            
00008208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008208                            ; not used
00008208                            
00008208                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008208                            ; VRAM layout: the only difference is the high bits of the
00008208                            ; plane's VRAM address, which are 10 instead of 11.
00008208                            ; Both the foreground and background are at $C000 and $E000
00008208                            ; respectively, so this one starting at $8000 makes no sense.
00008208                            ; sub_6C3C:
00008208                            Calc_VRAM_Pos_Unknown:
00008208 D86B 0004                  		add.w	4(a3),d4
0000820C DA53                       		add.w	(a3),d5
0000820E 0244 00F0                  		andi.w	#$F0,d4
00008212 0245 01F0                  		andi.w	#$1F0,d5
00008216 E94C                       		lsl.w	#4,d4
00008218 E44D                       		lsr.w	#2,d5
0000821A D845                       		add.w	d5,d4
0000821C 7002                       		moveq	#2,d0
0000821E 4840                       		swap	d0
00008220 3004                       		move.w	d4,d0
00008222 4E75                       		rts	
00008224                            ; End of function Calc_VRAM_Pos_Unknown
00008224                            
00008224                            ; ---------------------------------------------------------------------------
00008224                            ; Subroutine to	load tiles as soon as the level	appears
00008224                            ; ---------------------------------------------------------------------------
00008224                            
00008224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008224                            
00008224                            
00008224                            LoadTilesFromStart:
00008224 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000822A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008230 47F8 F700                  		lea	(v_screenposx).w,a3
00008234 49F8 A400                  		lea	(v_lvllayout).w,a4
00008238 343C 4000                  		move.w	#$4000,d2
0000823C 6100                       		bsr.s	DrawChunks
0000823E 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008242 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008246 343C 6000                  		move.w	#$6000,d2
0000824A 4A38 FE10                  			tst.b	(v_zone).w
0000824E 6700 0000                  			beq.w	Draw_GHz_Bg
00008252 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008258 6700 0000                  			beq.w	Draw_Mz_Bg
0000825C 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008262 6700 0000                  			beq.w	Draw_SBz_Bg
00008266 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
0000826C 6700 0000                  			beq.w	Draw_GHz_Bg
00008270                            ; End of function LoadTilesFromStart
00008270                            
00008270                            
00008270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008270                            
00008270                            
00008270                            DrawChunks:
00008270 78F0                       		moveq	#-16,d4
00008272 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008274                            
00008274                            	@loop:
00008274 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008278 7A00                       		moveq	#0,d5
0000827A 3204                       		move.w	d4,d1
0000827C 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00008280 3801                       		move.w	d1,d4
00008282 7A00                       		moveq	#0,d5
00008284 7C1F                       		moveq	#(512/16)-1,d6
00008286 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
0000828A 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000828E 0644 0010                  		addi.w	#16,d4
00008292 51CE FFE0                  		dbf	d6,@loop
00008296 4E75                       		rts	
00008298                            ; End of function DrawChunks
00008298                            
00008298                            	Draw_GHz_Bg:
00008298 7800                       			moveq	#0,d4
0000829A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000829C                            	locj_7224:			
0000829C 48E7 0E00                  			movem.l	d4-d6,-(sp)
000082A0 41F9 0000 0000             			lea	(locj_724a),a0
000082A6 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000082AA D044                       			add.w	d4,d0
000082AC 0240 00F0                  			andi.w	#$F0,d0
000082B0 6100 0000                  			bsr.w	locj_72Ba
000082B4 4CDF 0070                  			movem.l	(sp)+,d4-d6
000082B8 0644 0010                  			addi.w	#16,d4
000082BC 51CE FFDE                  			dbf	d6,locj_7224
000082C0 4E75                       			rts
000082C2                            	locj_724a:
000082C2 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000082D2                            ;-------------------------------------------------------------------------------
000082D2                            	Draw_Mz_Bg:;locj_725a:
000082D2 78F0                       			moveq	#-16,d4
000082D4 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000082D6                            	locj_725E:			
000082D6 48E7 0E00                  			movem.l	d4-d6,-(sp)
000082DA 41F8 7F6B                  			lea	(locj_6EF2+1),a0
000082DE 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000082E2 0440 0200                  			subi.w	#$200,d0
000082E6 D044                       			add.w	d4,d0
000082E8 0240 07F0                  			andi.w	#$7F0,d0
000082EC 6100 0000                  			bsr.w	locj_72Ba
000082F0 4CDF 0070                  			movem.l	(sp)+,d4-d6
000082F4 0644 0010                  			addi.w	#16,d4
000082F8 51CE FFDC                  			dbf	d6,locj_725E
000082FC 4E75                       			rts
000082FE                            ;-------------------------------------------------------------------------------
000082FE                            	Draw_SBz_Bg:;locj_7288:
000082FE 78F0                       			moveq	#-16,d4
00008300 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008302                            	locj_728C:			
00008302 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008306 41F8 7E6D                  			lea	(locj_6DF4+1),a0
0000830A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000830E D044                       			add.w	d4,d0
00008310 0240 01F0                  			andi.w	#$1F0,d0
00008314 6100 0000                  			bsr.w	locj_72Ba
00008318 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000831C 0644 0010                  			addi.w	#16,d4
00008320 51CE FFE0                  			dbf	d6,locj_728C
00008324 4E75                       			rts
00008326                            ;-------------------------------------------------------------------------------
00008326                            	locj_72B2:
00008326 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
0000832E                            	locj_72Ba:
0000832E E848                       			lsr.w	#4,d0
00008330 1030 0000                  			move.b	(a0,d0.w),d0
00008334 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008338 6700                       			beq.s	locj_72da
0000833A 7AF0                       			moveq	#-16,d5
0000833C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008340 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
00008344 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008348 6100 FD56                  			bsr.w	DrawBlocks_LR
0000834C 6000                       			bra.s	locj_72EE
0000834E                            	locj_72da:
0000834E 7A00                       			moveq	#0,d5
00008350 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008354 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008358 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000835C 7C1F                       			moveq	#(512/16)-1,d6
0000835E 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008362                            	locj_72EE:
00008362 4E75                       			rts
00008364                            
00008364                            ; ---------------------------------------------------------------------------
00008364                            ; Subroutine to load basic level data
00008364                            ; ---------------------------------------------------------------------------
00008364                            
00008364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008364                            
00008364                            
00008364                            LevelDataLoad:
00008364 7000                       		moveq	#0,d0
00008366 1038 FE10                  		move.b	(v_zone).w,d0
0000836A E948                       		lsl.w	#4,d0
0000836C 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008372 45F2 0000                  		lea	(a2,d0.w),a2
00008376 2F0A                       		move.l	a2,-(sp)
00008378 588A                       		addq.l	#4,a2
0000837A 205A                       		movea.l	(a2)+,a0
0000837C 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
00008380 303C 0000                  		move.w	#0,d0
00008384 6100 9552                  		bsr.w	EniDec
00008388 205A                       		movea.l	(a2)+,a0
0000838A 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
00008390 6100 96C4                  		bsr.w	KosDec
00008394 6100 0000                  		bsr.w	LevelLayoutLoad
00008398 301A                       		move.w	(a2)+,d0
0000839A 3012                       		move.w	(a2),d0
0000839C 0240 00FF                  		andi.w	#$FF,d0
000083A0 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000083A6 6600                       		bne.s	@notSBZ3	; if not, branch
000083A8 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000083AA                            
000083AA                            	@notSBZ3:
000083AA 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000083B0 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000083B2 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000083B8 6600                       		bne.s	@normalpal	; if not, branch
000083BA                            
000083BA                            	@isSBZorFZ:
000083BA 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000083BC                            
000083BC                            	@normalpal:
000083BC 6100 A0BE                  		bsr.w	PalLoad1	; load palette (based on d0)
000083C0 245F                       		movea.l	(sp)+,a2
000083C2 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000083C4 7000                       		moveq	#0,d0
000083C6 1012                       		move.b	(a2),d0
000083C8 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000083CA 6100 936E                  		bsr.w	AddPLC		; load pattern load cues
000083CE                            
000083CE                            	@skipPLC:
000083CE 4E75                       		rts	
000083D0                            ; End of function LevelDataLoad
000083D0                            
000083D0                            ; ---------------------------------------------------------------------------
000083D0                            ; Level	layout loading subroutine
000083D0                            ; ---------------------------------------------------------------------------
000083D0                            
000083D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083D0                            
000083D0                            
000083D0                            LevelLayoutLoad:
000083D0 47F8 A400                  		lea	(v_lvllayout).w,a3
000083D4 323C 01FF                  		move.w	#$1FF,d1
000083D8 7000                       		moveq	#0,d0
000083DA                            
000083DA                            LevLoad_ClrRam:
000083DA 26C0                       		move.l	d0,(a3)+
000083DC 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000083E0                            
000083E0 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000083E4 7200                       		moveq	#0,d1
000083E6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000083EA 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
000083EE 7202                       		moveq	#2,d1
000083F0                            ; End of function LevelLayoutLoad
000083F0                            
000083F0                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000083F0                            
000083F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083F0                            
000083F0                            
000083F0                            LevelLayoutLoad2:
000083F0 3038 FE10                  		move.w	(v_zone).w,d0
000083F4 ED08                       		lsl.b	#6,d0
000083F6 EA48                       		lsr.w	#5,d0
000083F8 3400                       		move.w	d0,d2
000083FA D040                       		add.w	d0,d0
000083FC D042                       		add.w	d2,d0
000083FE D041                       		add.w	d1,d0
00008400 43F9 0000 0000             		lea	(Level_Index).l,a1
00008406 3031 0000                  		move.w	(a1,d0.w),d0
0000840A 43F1 0000                  		lea	(a1,d0.w),a1
0000840E 7200                       		moveq	#0,d1
00008410 3401                       		move.w	d1,d2
00008412 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008414 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008416                            
00008416                            LevLoad_NumRows:
00008416 3001                       		move.w	d1,d0
00008418 204B                       		movea.l	a3,a0
0000841A                            
0000841A                            LevLoad_Row:
0000841A 10D9                       		move.b	(a1)+,(a0)+
0000841C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008420 47EB 0080                  		lea	$80(a3),a3	; do next row
00008424 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008428 4E75                       		rts	
0000842A                            ; End of function LevelLayoutLoad2
0000842A                            
0000842A                            		include	"_inc\DynamicLevelEvents.asm"
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            ; Dynamic level events
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            
0000842A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842A                            
0000842A                            
0000842A                            DynamicLevelEvents:
0000842A 7000                       		moveq	#0,d0
0000842C 1038 FE10                  		move.b	(v_zone).w,d0
00008430 D040                       		add.w	d0,d0
00008432 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008436 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
0000843A 7202                       		moveq	#2,d1
0000843C 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008440 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008444 6700                       		beq.s	DLE_NoChg	; if not, branch
00008446 6400                       		bcc.s	loc_6DAC
00008448                            
00008448 4441                       		neg.w	d1
0000844A 3038 F704                  		move.w	(v_screenposy).w,d0
0000844E B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008452 6300                       		bls.s	loc_6DA0
00008454 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008458 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
0000845E                            
0000845E                            loc_6DA0:
0000845E D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008462 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008468                            
00008468                            DLE_NoChg:
00008468 4E75                       		rts	
0000846A                            ; ===========================================================================
0000846A                            
0000846A                            loc_6DAC:
0000846A 3038 F704                  		move.w	(v_screenposy).w,d0
0000846E 5040                       		addq.w	#8,d0
00008470 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008474 6500                       		bcs.s	loc_6DC4
00008476 0838 0001 D022             		btst	#1,(v_player+obStatus).w
0000847C 6700                       		beq.s	loc_6DC4
0000847E D241                       		add.w	d1,d1
00008480 D241                       		add.w	d1,d1
00008482                            
00008482                            loc_6DC4:
00008482 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008486 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000848C 4E75                       		rts	
0000848E                            ; End of function DynamicLevelEvents
0000848E                            
0000848E                            ; ===========================================================================
0000848E                            ; ---------------------------------------------------------------------------
0000848E                            ; Offset index for dynamic level events
0000848E                            ; ---------------------------------------------------------------------------
0000848E 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008492 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008496 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
0000849A 0000                       		dc.w DLE_Ending-DLE_Index
0000849C                            ; ===========================================================================
0000849C                            ; ---------------------------------------------------------------------------
0000849C                            ; Green	Hill Zone dynamic level events
0000849C                            ; ---------------------------------------------------------------------------
0000849C                            
0000849C                            DLE_GHZ:
0000849C 7000                       		moveq	#0,d0
0000849E 1038 FE11                  		move.b	(v_act).w,d0
000084A2 D040                       		add.w	d0,d0
000084A4 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000084A8 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000084AC                            ; ===========================================================================
000084AC 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000084AE 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000084B0 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000084B2                            ; ===========================================================================
000084B2                            
000084B2                            DLE_GHZ1:
000084B2 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000084B8 6600                       		bne.s	gohere
000084BA 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000084C0 4E75                       		rts
000084C2                            gohere:
000084C2 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000084C8 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000084CE 6500                       		bcs.s	locret_6E08	; if not, branch
000084D0 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000084D6                            
000084D6                            locret_6E08:
000084D6 4E75                       		rts	
000084D8                            ; ===========================================================================
000084D8                            
000084D8                            DLE_GHZ2:
000084D8 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000084DE 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000084E4 6500                       		bcs.s	locret_6E3A
000084E6 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
000084EC 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000084F2 6500                       		bcs.s	locret_6E3A
000084F4 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000084FA 6500                       		bcs.s	loc_6E9A
000084FC 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008502 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008508 6400                       		bcc.s	loc_6E8F
0000850A 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008510 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008516                            
00008516                            loc_6E8F:
00008516 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000851C 6400                       		bcc.s	loc_6E9A
0000851E                            
0000851E                            locret_6E3A:
0000851E 4E75                       		rts	
00008520                            ; ===========================================================================
00008520                            
00008520                            loc_6E9A:
00008520 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008526 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000852A 4E75                       		rts		
0000852C                            ; ===========================================================================
0000852C                            
0000852C                            DLE_GHZ3:
0000852C 7000                       		moveq	#0,d0
0000852E 1038 F742                  		move.b	(v_dle_routine).w,d0
00008532 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008536 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000853A                            ; ===========================================================================
0000853A 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
0000853C 0000                       		dc.w DLE_GHZ3boss-off_6E4A
0000853E 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008540                            ; ===========================================================================
00008540                            
00008540                            DLE_GHZ3main:
00008540 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008546 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000854C 6500                       		bcs.s	locret_6E96
0000854E 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008554 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
0000855A 6500                       		bcs.s	locret_6E96
0000855C 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008562 6500                       		bcs.s	loc_6E98
00008564 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
0000856A 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008570 6400                       		bcc.s	loc_6E8E
00008572 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008578 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000857E                            
0000857E                            loc_6E8E:
0000857E 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
00008584 6400                       		bcc.s	loc_6E98
00008586                            
00008586                            locret_6E96:
00008586 4E75                       		rts	
00008588                            ; ===========================================================================
00008588                            
00008588                            loc_6E98:
00008588 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000858E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008592 4E75                       		rts	
00008594                            ; ===========================================================================
00008594                            
00008594                            DLE_GHZ3boss:
00008594 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
0000859A 6400                       		bcc.s	loc_6EB0
0000859C 5538 F742                  		subq.b	#2,(v_dle_routine).w
000085A0                            
000085A0                            loc_6EB0:
000085A0 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000085A6 6500                       		bcs.s	locret_6EE8
000085A8 6100 0000                  		bsr.w	FindFreeObj
000085AC 6600                       		bne.s	loc_6ED0
000085AE 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000085B2 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000085B8 337C 0280 000C             		move.w	#$280,obY(a1)
000085BE                            
000085BE                            loc_6ED0:
000085C6 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000085CC 5438 F742                  		addq.b	#2,(v_dle_routine).w
000085D0 7000                       		moveq	#plcid_Boss,d0
000085D2 6000 9166                  		bra.w	AddPLC		; load boss patterns
000085D6                            ; ===========================================================================
000085D6                            
000085D6                            locret_6EE8:
000085D6 4E75                       		rts	
000085D8                            ; ===========================================================================
000085D8                            
000085D8                            DLE_GHZ3end:
000085D8 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000085DE 4E75                       		rts	
000085E0                            ; ===========================================================================
000085E0                            ; ---------------------------------------------------------------------------
000085E0                            ; Labyrinth Zone dynamic level events
000085E0                            ; ---------------------------------------------------------------------------
000085E0                            
000085E0                            DLE_LZ:
000085E0 7000                       		moveq	#0,d0
000085E2 1038 FE11                  		move.b	(v_act).w,d0
000085E6 D040                       		add.w	d0,d0
000085E8 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
000085EC 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
000085F0                            ; ===========================================================================
000085F0 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
000085F2 0000                       		dc.w DLE_LZ12-DLE_LZx
000085F4 0000                       		dc.w DLE_LZ3-DLE_LZx
000085F6 0000                       		dc.w DLE_SBZ3-DLE_LZx
000085F8                            ; ===========================================================================
000085F8                            
000085F8                            DLE_LZ12:
000085F8 4E75                       		rts	
000085FA                            ; ===========================================================================
000085FA                            
000085FA                            DLE_LZ3:
000085FA 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
000085FE 6700                       		beq.s	loc_6F28	; if not, branch
00008600 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008604 0C11 0007                  		cmpi.b	#7,(a1)
00008608 6700                       		beq.s	loc_6F28
0000860A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008616                            
00008616                            loc_6F28:
00008616 4A38 F742                  		tst.b	(v_dle_routine).w
0000861A 6600                       		bne.s	locret_6F64
0000861C 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008622 6500                       		bcs.s	locret_6F62
00008624 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
0000862A 6400                       		bcc.s	locret_6F62
0000862C 6100 0000                  		bsr.w	FindFreeObj
00008630 6600                       		bne.s	loc_6F4A
00008632 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008636                            
00008636                            loc_6F4A:
0000863E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008644 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008648 7000                       		moveq	#plcid_Boss,d0
0000864A 6000 90EE                  		bra.w	AddPLC		; load boss patterns
0000864E                            ; ===========================================================================
0000864E                            
0000864E                            locret_6F62:
0000864E 4E75                       		rts	
00008650                            ; ===========================================================================
00008650                            
00008650                            locret_6F64:
00008650 4E75                       		rts	
00008652                            ; ===========================================================================
00008652                            
00008652                            DLE_SBZ3:
00008652 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008658 6500                       		bcs.s	locret_6F8C
0000865A 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008660 6400                       		bcc.s	locret_6F8C	; if not, branch
00008662 4238 FE30                  		clr.b	(v_lastlamp).w
00008666 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000866C 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008672 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008678                            
00008678                            locret_6F8C:
00008678 4E75                       		rts	
0000867A                            ; ===========================================================================
0000867A                            ; ---------------------------------------------------------------------------
0000867A                            ; Marble Zone dynamic level events
0000867A                            ; ---------------------------------------------------------------------------
0000867A                            
0000867A                            DLE_MZ:
0000867A 7000                       		moveq	#0,d0
0000867C 1038 FE11                  		move.b	(v_act).w,d0
00008680 D040                       		add.w	d0,d0
00008682 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008686 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
0000868A                            ; ===========================================================================
0000868A 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
0000868C 0000                       		dc.w DLE_MZ2-DLE_MZx
0000868E 0000                       		dc.w DLE_MZ3-DLE_MZx
00008690                            ; ===========================================================================
00008690                            
00008690                            DLE_MZ1:
00008690 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008696 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
0000869C 6500                       		bcs.s	locret_6FE8
0000869E 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000086A4                            
000086A4                            locret_6FE8:
000086A4 4E75                       		rts	
000086A6                            
000086A6                            ; ===========================================================================
000086A6                            
000086A6                            DLE_MZ2:
000086A6 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000086AC 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
000086B2 6500                       		bcs.s	locret_6FE9
000086B4 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000086BA                            		
000086BA                            locret_6FE9:
000086BA 4E75                       		rts	
000086BC                            ; ===========================================================================
000086BC                            
000086BC                            DLE_MZ3:
000086BC 7000                       		moveq	#0,d0
000086BE 1038 F742                  		move.b	(v_dle_routine).w,d0
000086C2 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000086C6 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000086CA                            ; ===========================================================================
000086CA 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
000086CC 0000                       		dc.w DLE_MZ3cutscene-off_7098
000086CE 0000                       		dc.w DLE_MZ3boss2-off_7098
000086D0 0000                       		dc.w DLE_MZ3end-off_7098
000086D2                            ; ===========================================================================
000086D2                            
000086D2                            DLE_MZ3boss:
000086D2 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086D8 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
000086DE 6500                       		bcs.s	locret_70E8
000086E0 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000086E6 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
000086EC 6500                       		bcs.s	locret_70E8
000086EE 6100 0000                  		bsr.w	FindFreeObj
000086F2 6600                       		bne.s	loc_70D0
000086F4 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
000086F8 337C 19F0 0008             		move.w	#$19F0,obX(a1)
000086FE 337C 022C 000C             		move.w	#$22C,obY(a1)
00008704                            
00008704                            loc_70D0:
0000870C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008712 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008716 7000                       		moveq	#plcid_Boss,d0
00008718 6000 9020                  		bra.w	AddPLC		; load boss patterns
0000871C                            ; ===========================================================================
0000871C                            
0000871C                            locret_70E8:
0000871C 4E75                       		rts	
0000871E                            		
0000871E                            DLE_MZ3cutscene:
0000871E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008724 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
0000872A 6500                       		bcs.s	locret_8298
0000872C 6100 0000                  		bsr.w	FindFreeObj
00008730 6600                       		bne.s	locret_8298
00008732 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008736 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000873A 7000                       		moveq	#plcid_EggmanSBZ2,d0
0000873C 6000 8FFC                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008740                            ; ===========================================================================
00008740                            
00008740                            locret_8298:
00008740 4E75                       		rts	
00008742                            ; ===========================================================================
00008742                            
00008742                            DLE_MZ3boss2:
00008742 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008748 6500                       		bcs.s	loc_72C6
0000874A 6100 0000                  		bsr.w	FindFreeObj
0000874E 6600                       		bne.s	loc_72C0
00008750 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008754 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008760                            
00008760                            loc_72C0:
00008760 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008766                            
00008766                            loc_72C6:
00008766 6000                       		bra.s	loc_72D2
00008768                            ; ===========================================================================
00008768                            
00008768                            DLE_MZ3end:
00008768 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
0000876E 6500                       		bcs.s	loc_72D2
00008770 4E75                       		rts	
00008772                            ; ===========================================================================
00008772                            
00008772                            loc_72D2:
00008772 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008778 4E75                       		rts
0000877A                            
0000877A                            
0000877A                            ; ===========================================================================
0000877A                            ; ---------------------------------------------------------------------------
0000877A                            ; Star Light Zone dynamic level events
0000877A                            ; ---------------------------------------------------------------------------
0000877A                            
0000877A                            DLE_SLZ:
0000877A 7000                       		moveq	#0,d0
0000877C 1038 FE11                  		move.b	(v_act).w,d0
00008780 D040                       		add.w	d0,d0
00008782 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008786 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
0000878A                            ; ===========================================================================
0000878A 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
0000878C 0000                       		dc.w DLE_SLZ12-DLE_SLZx
0000878E 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008790                            ; ===========================================================================
00008790                            
00008790                            DLE_SLZ12:
00008790 4E75                       		rts	
00008792                            ; ===========================================================================
00008792                            
00008792                            DLE_SLZ3:
00008792 7000                       		moveq	#0,d0
00008794 1038 F742                  		move.b	(v_dle_routine).w,d0
00008798 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000879C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000087A0                            ; ===========================================================================
000087A0 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000087A2 0000                       		dc.w DLE_SLZ3boss-off_7118
000087A4 0000                       		dc.w DLE_SLZ3end-off_7118
000087A6                            ; ===========================================================================
000087A6                            
000087A6                            DLE_SLZ3main:
000087A6 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000087AC 6500                       		bcs.s	locret_7130
000087AE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000087B4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087B8                            
000087B8                            locret_7130:
000087B8 4E75                       		rts	
000087BA                            ; ===========================================================================
000087BA                            
000087BA                            DLE_SLZ3boss:
000087BA 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000087C0 6500                       		bcs.s	locret_715C
000087C2 6100 0000                  		bsr.w	FindFreeObj
000087C6 6600                       		bne.s	loc_7144
000087C8 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
000087CC                            
000087CC                            loc_7144:
000087D4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087DA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087DE 7000                       		moveq	#plcid_Boss,d0
000087E0 6000 8F58                  		bra.w	AddPLC		; load boss patterns
000087E4                            ; ===========================================================================
000087E4                            
000087E4                            locret_715C:
000087E4 4E75                       		rts	
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            DLE_SLZ3end:
000087E6 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000087EC 4E75                       		rts
000087EE 4E75                       		rts
000087F0                            ; ===========================================================================
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            ; Spring Yard Zone dynamic level events
000087F0                            ; ---------------------------------------------------------------------------
000087F0                            
000087F0                            DLE_SYZ:
000087F0 7000                       		moveq	#0,d0
000087F2 1038 FE11                  		move.b	(v_act).w,d0
000087F6 D040                       		add.w	d0,d0
000087F8 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
000087FC 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008800                            ; ===========================================================================
00008800 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008802 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008804 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008806                            ; ===========================================================================
00008806                            
00008806                            DLE_SYZ1:
00008806 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000880C 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
00008812 6500                       		bcs.s	locret_71A2
00008814 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
0000881A 4E75                       		rts	
0000881C                            ; ===========================================================================
0000881C                            
0000881C                            DLE_SYZ2:
0000881C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008822 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008828 6500                       		bcs.s	locret_71A2
0000882A 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008830 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008836 6500                       		bcs.s	locret_71A2
00008838 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000883E                            
0000883E                            locret_71A2:
0000883E 4E75                       		rts	
00008840                            ; ===========================================================================
00008840                            
00008840                            DLE_SYZ3:
00008840 7000                       		moveq	#0,d0
00008842 1038 F742                  		move.b	(v_dle_routine).w,d0
00008846 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000884A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000884E                            ; ===========================================================================
0000884E 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008850 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008852 0000                       		dc.w DLE_SYZ3end-off_71B2
00008854                            ; ===========================================================================
00008854                            
00008854                            DLE_SYZ3main:
00008854 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000885A 6500                       		bcs.s	locret_71CE
0000885C 6100 0000                  		bsr.w	FindFreeObj
00008860 6600                       		bne.s	locret_71CE
00008862 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008866 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000886A                            
0000886A                            locret_71CE:
0000886A 4E75                       		rts	
0000886C                            ; ===========================================================================
0000886C                            
0000886C                            DLE_SYZ3boss:
0000886C 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008872 6500                       		bcs.s	locret_7200
00008874 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
0000887A 6100 0000                  		bsr.w	FindFreeObj
0000887E 6600                       		bne.s	loc_71EC
00008880 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008884 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008888                            
00008888                            loc_71EC:
00008890 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008896 7000                       		moveq	#plcid_Boss,d0
00008898 6000 8EA0                  		bra.w	AddPLC		; load boss patterns
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            locret_7200:
0000889C 4E75                       		rts	
0000889E                            ; ===========================================================================
0000889E                            
0000889E                            DLE_SYZ3end:
0000889E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088A4 4E75                       		rts	
000088A6                            ; ===========================================================================
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            ; Scrap	Brain Zone dynamic level events
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            
000088A6                            DLE_SBZ:
000088A6 7000                       		moveq	#0,d0
000088A8 1038 FE11                  		move.b	(v_act).w,d0
000088AC D040                       		add.w	d0,d0
000088AE 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000088B2 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000088B6                            ; ===========================================================================
000088B6 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000088B8 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000088BA 0000                       		dc.w DLE_FZ-DLE_SBZx
000088BC                            ; ===========================================================================
000088BC                            
000088BC                            DLE_SBZ1:
000088BC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000088C2 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
000088C8 6500                       		bcs.s	locret_7242
000088CA 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
000088D0 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000088D6 6500                       		bcs.s	locret_7242
000088D8 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
000088DE                            
000088DE                            locret_7242:
000088DE 4E75                       		rts	
000088E0                            ; ===========================================================================
000088E0                            
000088E0                            DLE_SBZ2:
000088E0 7000                       		moveq	#0,d0
000088E2 1038 F742                  		move.b	(v_dle_routine).w,d0
000088E6 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000088EA 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000088EE                            ; ===========================================================================
000088EE 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
000088F0 0000                       		dc.w DLE_SBZ2boss-off_7252
000088F2 0000                       		dc.w DLE_SBZ2boss2-off_7252
000088F4 0000                       		dc.w DLE_SBZ2end-off_7252
000088F6                            ; ===========================================================================
000088F6                            
000088F6                            DLE_SBZ2main:
000088F6 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
000088FC 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008902 6500                       		bcs.s	locret_727A
00008904 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
0000890A 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008910 6500                       		bcs.s	locret_727A
00008912 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008916                            
00008916                            locret_727A:
00008916 4E75                       		rts	
00008918                            ; ===========================================================================
00008918                            
00008918                            DLE_SBZ2boss:
00008918 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
0000891E 6500                       		bcs.s	locret_7298
00008920 6100 0000                  		bsr.w	FindFreeObj
00008924 6600                       		bne.s	locret_7298
00008926 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
0000892A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000892E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008930 6000 8E08                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008934                            ; ===========================================================================
00008934                            
00008934                            locret_7298:
00008934 4E75                       		rts	
00008936                            ; ===========================================================================
00008936                            
00008936                            DLE_SBZ2boss2:
00008936 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
0000893C 6500                       		bcs.s	loc_72B6
0000893E 6100 0000                  		bsr.w	FindFreeObj
00008942 6600                       		bne.s	loc_72B0
00008944 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008948 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000894C                            
0000894C                            loc_72B0:
0000894C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008952                            
00008952                            loc_72B6:
00008952 6000                       		bra.s	loc_72C2
00008954                            ; ===========================================================================
00008954                            
00008954                            DLE_SBZ2end:
00008954 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
0000895A 6500                       		bcs.s	loc_72C2
0000895C 4E75                       		rts	
0000895E                            ; ===========================================================================
0000895E                            
0000895E                            loc_72C2:
0000895E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008964 4E75                       		rts	
00008966                            ; ===========================================================================
00008966                            
00008966                            DLE_FZ:
00008966 7000                       		moveq	#0,d0
00008968 1038 F742                  		move.b	(v_dle_routine).w,d0
0000896C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008970 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008974                            ; ===========================================================================
00008974 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008978 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
0000897C 0000                       		dc.w DLE_FZend2-off_72D8
0000897E                            ; ===========================================================================
0000897E                            
0000897E                            DLE_FZmain:
0000897E 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008984 6500                       		bcs.s	loc_72F4
00008986 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000898A 7000                       		moveq	#plcid_FZBoss,d0
0000898C 6100 8DAC                  		bsr.w	AddPLC		; load FZ boss patterns
00008990                            
00008990                            loc_72F4:
00008990 60CC                       		bra.s	loc_72C2
00008992                            ; ===========================================================================
00008992                            
00008992                            DLE_FZboss:
00008992 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008998 6500                       		bcs.s	loc_7312
0000899A 6100 0000                  		bsr.w	FindFreeObj
0000899E 6600                       		bne.s	loc_7312
000089A0 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
000089A4 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089A8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089AE                            
000089AE                            loc_7312:
000089AE 60AE                       		bra.s	loc_72C2
000089B0                            ; ===========================================================================
000089B0                            
000089B0                            DLE_FZend:
000089B0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
000089B6 6500                       		bcs.s	loc_7320
000089B8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089BC                            
000089BC                            loc_7320:
000089BC 60A0                       		bra.s	loc_72C2
000089BE                            ; ===========================================================================
000089BE                            
000089BE                            locret_7322:
000089BE 4E75                       		rts	
000089C0                            ; ===========================================================================
000089C0                            
000089C0                            DLE_FZend2:
000089C0 609C                       		bra.s	loc_72C2
000089C2                            ; ===========================================================================
000089C2                            ; ---------------------------------------------------------------------------
000089C2                            ; Ending sequence dynamic level events (empty)
000089C2                            ; ---------------------------------------------------------------------------
000089C2                            
000089C2                            DLE_Ending:
000089C2 4E75                       		rts	
000089C2 4E75                       		rts	
000089C4                            
000089C4                            		include	"_incObj\11 Bridge (part 1).asm"
000089C4                            ; ---------------------------------------------------------------------------
000089C4                            ; Object 11 - GHZ bridge
000089C4                            ; ---------------------------------------------------------------------------
000089C4                            
000089C4                            Bridge:
000089C4 7000                       		moveq	#0,d0
000089C6 1028 0024                  		move.b	obRoutine(a0),d0
000089CA 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
000089CE 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
000089D2                            ; ===========================================================================
000089D2 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
000089D6 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
000089DA 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
000089DE                            ; ===========================================================================
000089DE                            
000089DE                            Bri_Main:	; Routine 0
000089DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000089E2 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
000089EA 317C 438E 0002             		move.w	#$438E,obGfx(a0)
000089F0 117C 0004 0001             		move.b	#4,obRender(a0)
000089F6 317C 0180 0018             		move.w	#$180,obPriority(a0)
000089FC 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008A02 3428 000C                  		move.w	obY(a0),d2
00008A06 3628 0008                  		move.w	obX(a0),d3
00008A0A 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008A0C 45E8 0028                  		lea	obSubtype(a0),a2
00008A10 7200                       		moveq	#0,d1
00008A12 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008A14 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008A18 3001                       		move.w	d1,d0
00008A1A E248                       		lsr.w	#1,d0
00008A1C E948                       		lsl.w	#4,d0
00008A1E 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008A20 5501                       		subq.b	#2,d1
00008A22 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008A24                            
00008A24                            @buildloop:
00008A24 6100 0000                  		bsr.w	FindFreeObj
00008A28 6600                       		bne.s	Bri_Action
00008A2A 5228 0028                  		addq.b	#1,obSubtype(a0)
00008A2E B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008A32 6600                       		bne.s	@notleftmost	; if not, branch
00008A34                            
00008A34 0643 0010                  		addi.w	#$10,d3
00008A38 3142 000C                  		move.w	d2,obY(a0)
00008A3C 3142 003C                  		move.w	d2,$3C(a0)
00008A40 3A08                       		move.w	a0,d5
00008A42 0445 D000                  		subi.w	#$D000,d5
00008A46 EC4D                       		lsr.w	#6,d5
00008A48 0245 007F                  		andi.w	#$7F,d5
00008A4C 14C5                       		move.b	d5,(a2)+
00008A4E 5228 0028                  		addq.b	#1,obSubtype(a0)
00008A52                            
00008A52                            	@notleftmost:
00008A52 3A09                       		move.w	a1,d5
00008A54 0445 D000                  		subi.w	#$D000,d5
00008A58 EC4D                       		lsr.w	#6,d5
00008A5A 0245 007F                  		andi.w	#$7F,d5
00008A5E 14C5                       		move.b	d5,(a2)+
00008A60 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008A66 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008A68 3342 000C                  		move.w	d2,obY(a1)
00008A6C 3342 003C                  		move.w	d2,$3C(a1)
00008A70 3343 0008                  		move.w	d3,obX(a1)
00008A74 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008A7C 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008A82 137C 0004 0001             		move.b	#4,obRender(a1)
00008A88 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008A8E 137C 0008 0014             		move.b	#8,obActWid(a1)
00008A94 0643 0010                  		addi.w	#$10,d3
00008A98 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008A9C                            
00008A9C                            Bri_Action:	; Routine 2
00008A9C 6100                       		bsr.s	Bri_Solid
00008A9E 4A28 003E                  		tst.b	$3E(a0)
00008AA2 6700                       		beq.s	@display
00008AA4 5928 003E                  		subq.b	#4,$3E(a0)
00008AA8 6100 0000                  		bsr.w	Bri_Bend
00008AAC                            
00008AAC                            	@display:
00008AAC 6100 0000                  		bsr.w	DisplaySprite
00008AB0 6000 0000                  		bra.w	Bri_ChkDel
00008AB4                            
00008AB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AB4                            
00008AB4                            
00008AB4                            Bri_Solid:
00008AB4 7200                       		moveq	#0,d1
00008AB6 1228 0028                  		move.b	obSubtype(a0),d1
00008ABA E749                       		lsl.w	#3,d1
00008ABC 3401                       		move.w	d1,d2
00008ABE 5041                       		addq.w	#8,d1
00008AC0 D442                       		add.w	d2,d2
00008AC2 43F8 D000                  		lea	(v_player).w,a1
00008AC6 4A69 0012                  		tst.w	obVelY(a1)
00008ACA 6B00 0000                  		bmi.w	Plat_Exit
00008ACE 3029 0008                  		move.w	obX(a1),d0
00008AD2 9068 0008                  		sub.w	obX(a0),d0
00008AD6 D041                       		add.w	d1,d0
00008AD8 6B00 0000                  		bmi.w	Plat_Exit
00008ADC B042                       		cmp.w	d2,d0
00008ADE 6400 0000                  		bcc.w	Plat_Exit
00008AE2 6000                       		bra.s	Plat_NoXCheck
00008AE4                            ; End of function Bri_Solid
00008AE4                            ; End of function Bri_Solid
00008AE4                            
00008AE4                            ; ---------------------------------------------------------------------------
00008AE4                            ; Platform subroutine
00008AE4                            ; ---------------------------------------------------------------------------
00008AE4                            
00008AE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AE4                            
00008AE4                            PlatformObject:
00008AE4 43F8 D000                  		lea	(v_player).w,a1
00008AE8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008AEC 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008AF0                            
00008AF0                            ;		perform x-axis range check
00008AF0 3029 0008                  		move.w	obX(a1),d0
00008AF4 9068 0008                  		sub.w	obX(a0),d0
00008AF8 D041                       		add.w	d1,d0
00008AFA 6B00 0000                  		bmi.w	Plat_Exit
00008AFE D241                       		add.w	d1,d1
00008B00 B041                       		cmp.w	d1,d0
00008B02 6400 0000                  		bhs.w	Plat_Exit
00008B06                            
00008B06                            	Plat_NoXCheck:
00008B06 3028 000C                  		move.w	obY(a0),d0
00008B0A 5140                       		subq.w	#8,d0
00008B0C                            
00008B0C                            Platform3:
00008B0C                            ;		perform y-axis range check
00008B0C 3429 000C                  		move.w	obY(a1),d2
00008B10 1229 0016                  		move.b	obHeight(a1),d1
00008B14 4881                       		ext.w	d1
00008B16 D242                       		add.w	d2,d1
00008B18 5841                       		addq.w	#4,d1
00008B1A 9041                       		sub.w	d1,d0
00008B1C 6200 0000                  		bhi.w	Plat_Exit
00008B20 0C40 FFF0                  		cmpi.w	#-$10,d0
00008B24 6500 0000                  		blo.w	Plat_Exit
00008B28                            
00008B28 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008B2C 6B00 0000                  		bmi.w	Plat_Exit
00008B30 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008B36 6400 0000                  		bhs.w	Plat_Exit
00008B3A D440                       		add.w	d0,d2
00008B3C 5642                       		addq.w	#3,d2
00008B3E 3342 000C                  		move.w	d2,obY(a1)
00008B42 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B46                            
00008B46                            loc_74AE:
00008B46 0829 0003 0022             		btst	#3,obStatus(a1)
00008B4C 6700                       		beq.s	loc_74DC
00008B4E 7000                       		moveq	#0,d0
00008B50 1029 003D                  		move.b	$3D(a1),d0
00008B54 ED48                       		lsl.w	#6,d0
00008B56 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008B5C 2440                       		movea.l	d0,a2
00008B5E 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008B64 422A 0025                  		clr.b	ob2ndRout(a2)
00008B68 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008B6E 6600                       		bne.s	loc_74DC
00008B70 552A 0024                  		subq.b	#2,obRoutine(a2)
00008B74                            
00008B74                            loc_74DC:
00008B74 3008                       		move.w	a0,d0
00008B76 0440 D000                  		subi.w	#-$3000,d0
00008B7A EC48                       		lsr.w	#6,d0
00008B7C 0240 007F                  		andi.w	#$7F,d0
00008B80 1340 003D                  		move.b	d0,$3D(a1)
00008B84 137C 0000 0026             		move.b	#0,obAngle(a1)
00008B8A 337C 0000 0012             		move.w	#0,obVelY(a1)
00008B90 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008B96 0829 0001 0022             		btst	#1,obStatus(a1)
00008B9C 6700                       		beq.s	loc_7512
00008B9E 2F08                       		move.l	a0,-(sp)
00008BA0 2049                       		movea.l	a1,a0
00008BA2 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008BA8 205F                       		movea.l	(sp)+,a0
00008BAA                            
00008BAA                            loc_7512:
00008BAA 08E9 0003 0022             		bset	#3,obStatus(a1)
00008BB0 08E8 0003 0022             		bset	#3,obStatus(a0)
00008BB6                            
00008BB6                            Plat_Exit:
00008BB6 4E75                       		rts	
00008BB8                            ; End of function PlatformObject
00008BB8                            
00008BB8                            ; ---------------------------------------------------------------------------
00008BB8                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008BB8                            ; ---------------------------------------------------------------------------
00008BB8                            
00008BB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BB8                            
00008BB8                            
00008BB8                            SlopeObject:
00008BB8 43F8 D000                  		lea	(v_player).w,a1
00008BBC 4A69 0012                  		tst.w	obVelY(a1)
00008BC0 6B00 FFF4                  		bmi.w	Plat_Exit
00008BC4 3029 0008                  		move.w	obX(a1),d0
00008BC8 9068 0008                  		sub.w	obX(a0),d0
00008BCC D041                       		add.w	d1,d0
00008BCE 6BE6                       		bmi.s	Plat_Exit
00008BD0 D241                       		add.w	d1,d1
00008BD2 B041                       		cmp.w	d1,d0
00008BD4 64E0                       		bhs.s	Plat_Exit
00008BD6 0828 0000 0001             		btst	#0,obRender(a0)
00008BDC 6700                       		beq.s	loc_754A
00008BDE 4640                       		not.w	d0
00008BE0 D041                       		add.w	d1,d0
00008BE2                            
00008BE2                            loc_754A:
00008BE2 E248                       		lsr.w	#1,d0
00008BE4 7600                       		moveq	#0,d3
00008BE6 1632 0000                  		move.b	(a2,d0.w),d3
00008BEA 3028 000C                  		move.w	obY(a0),d0
00008BEE 9043                       		sub.w	d3,d0
00008BF0 6000 FF1A                  		bra.w	Platform3
00008BF4                            ; End of function SlopeObject
00008BF4                            
00008BF4                            
00008BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BF4                            
00008BF4                            
00008BF4                            Swing_Solid:
00008BF4 43F8 D000                  		lea	(v_player).w,a1
00008BF8 4A69 0012                  		tst.w	obVelY(a1)
00008BFC 6B00 FFB8                  		bmi.w	Plat_Exit
00008C00 3029 0008                  		move.w	obX(a1),d0
00008C04 9068 0008                  		sub.w	obX(a0),d0
00008C08 D041                       		add.w	d1,d0
00008C0A 6B00 FFAA                  		bmi.w	Plat_Exit
00008C0E D241                       		add.w	d1,d1
00008C10 B041                       		cmp.w	d1,d0
00008C12 6400 FFA2                  		bhs.w	Plat_Exit
00008C16 3028 000C                  		move.w	obY(a0),d0
00008C1A 9043                       		sub.w	d3,d0
00008C1C 6000 FEEE                  		bra.w	Platform3
00008C20                            ; End of function Obj15_Solid
00008C20                            
00008C20                            ; ===========================================================================
00008C20                            
00008C20                            		include	"_incObj\11 Bridge (part 2).asm"
00008C20                            
00008C20                            Bri_Platform:	; Routine 4
00008C20 6100                       		bsr.s	Bri_WalkOff
00008C22 6100 0000                  		bsr.w	DisplaySprite
00008C26 6000 0000                  		bra.w	Bri_ChkDel
00008C2A                            
00008C2A                            ; ---------------------------------------------------------------------------
00008C2A                            ; Subroutine allowing Sonic to walk off a bridge
00008C2A                            ; ---------------------------------------------------------------------------
00008C2A                            
00008C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C2A                            
00008C2A                            
00008C2A                            Bri_WalkOff:
00008C2A 7200                       		moveq	#0,d1
00008C2C 1228 0028                  		move.b	obSubtype(a0),d1
00008C30 E749                       		lsl.w	#3,d1
00008C32 3401                       		move.w	d1,d2
00008C34 5041                       		addq.w	#8,d1
00008C36 6100                       		bsr.s	ExitPlatform2
00008C38 6400                       		bcc.s	locret_75BE
00008C3A E848                       		lsr.w	#4,d0
00008C3C 1140 003F                  		move.b	d0,$3F(a0)
00008C40 1028 003E                  		move.b	$3E(a0),d0
00008C44 0C00 0040                  		cmpi.b	#$40,d0
00008C48 6700                       		beq.s	loc_75B6
00008C4A 5828 003E                  		addq.b	#4,$3E(a0)
00008C4E                            
00008C4E                            loc_75B6:
00008C4E 6100 0000                  		bsr.w	Bri_Bend
00008C52 6100 0000                  		bsr.w	Bri_MoveSonic
00008C56                            
00008C56                            locret_75BE:
00008C56 4E75                       		rts	
00008C58                            ; End of function Bri_WalkOff
00008C58                            ; End of function Bri_WalkOff
00008C58                            
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            
00008C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C58                            
00008C58                            
00008C58                            ExitPlatform:
00008C58 3401                       		move.w	d1,d2
00008C5A                            
00008C5A                            ExitPlatform2:
00008C5A D442                       		add.w	d2,d2
00008C5C 43F8 D000                  		lea	(v_player).w,a1
00008C60 0829 0001 0022             		btst	#1,obStatus(a1)
00008C66 6600                       		bne.s	loc_75E0
00008C68 3029 0008                  		move.w	obX(a1),d0
00008C6C 9068 0008                  		sub.w	obX(a0),d0
00008C70 D041                       		add.w	d1,d0
00008C72 6B00                       		bmi.s	loc_75E0
00008C74 B042                       		cmp.w	d2,d0
00008C76 6500                       		blo.s	locret_75F2
00008C78                            
00008C78                            loc_75E0:
00008C78 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008C7E 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008C84 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008C8A                            
00008C8A                            locret_75F2:
00008C8A 4E75                       		rts	
00008C8C                            ; End of function ExitPlatform
00008C8C                            
00008C8C                            		include	"_incObj\11 Bridge (part 3).asm"
00008C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C8C                            
00008C8C                            
00008C8C                            Bri_MoveSonic:
00008C8C 7000                       		moveq	#0,d0
00008C8E 1028 003F                  		move.b	$3F(a0),d0
00008C92 1030 0029                  		move.b	$29(a0,d0.w),d0
00008C96 ED48                       		lsl.w	#6,d0
00008C98 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008C9E 2440                       		movea.l	d0,a2
00008CA0 43F8 D000                  		lea	(v_player).w,a1
00008CA4 302A 000C                  		move.w	obY(a2),d0
00008CA8 5140                       		subq.w	#8,d0
00008CAA 7200                       		moveq	#0,d1
00008CAC 1229 0016                  		move.b	obHeight(a1),d1
00008CB0 9041                       		sub.w	d1,d0
00008CB2 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008CB6 4E75                       		rts	
00008CB8                            ; End of function Bri_MoveSonic
00008CB8                            
00008CB8                            
00008CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CB8                            
00008CB8                            
00008CB8                            Bri_Bend:
00008CB8 1028 003E                  		move.b	$3E(a0),d0
00008CBC 6100 AE84                  		bsr.w	CalcSine
00008CC0 3800                       		move.w	d0,d4
00008CC2 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008CC8 7000                       		moveq	#0,d0
00008CCA 1028 0028                  		move.b	obSubtype(a0),d0
00008CCE E948                       		lsl.w	#4,d0
00008CD0 7600                       		moveq	#0,d3
00008CD2 1628 003F                  		move.b	$3F(a0),d3
00008CD6 3403                       		move.w	d3,d2
00008CD8 D640                       		add.w	d0,d3
00008CDA 7A00                       		moveq	#0,d5
00008CDC 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008CE2 1A35 3000                  		move.b	(a5,d3.w),d5
00008CE6 0243 000F                  		andi.w	#$F,d3
00008CEA E94B                       		lsl.w	#4,d3
00008CEC 47F4 3000                  		lea	(a4,d3.w),a3
00008CF0 45E8 0029                  		lea	$29(a0),a2
00008CF4                            
00008CF4                            loc_765C:
00008CF4 7000                       		moveq	#0,d0
00008CF6 101A                       		move.b	(a2)+,d0
00008CF8 ED48                       		lsl.w	#6,d0
00008CFA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D00 2240                       		movea.l	d0,a1
00008D02 7000                       		moveq	#0,d0
00008D04 101B                       		move.b	(a3)+,d0
00008D06 5240                       		addq.w	#1,d0
00008D08 C0C5                       		mulu.w	d5,d0
00008D0A C0C4                       		mulu.w	d4,d0
00008D0C 4840                       		swap	d0
00008D0E D069 003C                  		add.w	$3C(a1),d0
00008D12 3340 000C                  		move.w	d0,obY(a1)
00008D16 51CA FFDC                  		dbf	d2,loc_765C
00008D1A 7000                       		moveq	#0,d0
00008D1C 1028 0028                  		move.b	obSubtype(a0),d0
00008D20 7600                       		moveq	#0,d3
00008D22 1628 003F                  		move.b	$3F(a0),d3
00008D26 5203                       		addq.b	#1,d3
00008D28 9600                       		sub.b	d0,d3
00008D2A 4403                       		neg.b	d3
00008D2C 6B00                       		bmi.s	locret_76CA
00008D2E 3403                       		move.w	d3,d2
00008D30 E94B                       		lsl.w	#4,d3
00008D32 47F4 3000                  		lea	(a4,d3.w),a3
00008D36 D6C2                       		adda.w	d2,a3
00008D38 5342                       		subq.w	#1,d2
00008D3A 6500                       		bcs.s	locret_76CA
00008D3C                            
00008D3C                            loc_76A4:
00008D3C 7000                       		moveq	#0,d0
00008D3E 101A                       		move.b	(a2)+,d0
00008D40 ED48                       		lsl.w	#6,d0
00008D42 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D48 2240                       		movea.l	d0,a1
00008D4A 7000                       		moveq	#0,d0
00008D4C 1023                       		move.b	-(a3),d0
00008D4E 5240                       		addq.w	#1,d0
00008D50 C0C5                       		mulu.w	d5,d0
00008D52 C0C4                       		mulu.w	d4,d0
00008D54 4840                       		swap	d0
00008D56 D069 003C                  		add.w	$3C(a1),d0
00008D5A 3340 000C                  		move.w	d0,obY(a1)
00008D5E 51CA FFDC                  		dbf	d2,loc_76A4
00008D62                            
00008D62                            locret_76CA:
00008D62 4E75                       		rts	
00008D64                            ; End of function Bri_Bend
00008D64                            
00008D64                            ; ===========================================================================
00008D64                            ; ---------------------------------------------------------------------------
00008D64                            ; GHZ bridge-bending data
00008D64                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008D64                            ; ---------------------------------------------------------------------------
00008D64                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008E74                            		even
00008E74                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00008F74                            		even
00008F74                            
00008F74                            ; ===========================================================================
00008F74                            
00008F74                            Bri_ChkDel:
00008F92 4E75                       		rts	
00008F94                            ; ===========================================================================
00008F94                            
00008F94                            @deletebridge:
00008F94 7400                       		moveq	#0,d2
00008F96 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00008F9A 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008F9C 5302                       		subq.b	#1,d2		; subtract 1
00008F9E 6500                       		bcs.s	@delparent
00008FA0                            
00008FA0                            	@loop:
00008FA0 7000                       		moveq	#0,d0
00008FA2 101A                       		move.b	(a2)+,d0
00008FA4 ED48                       		lsl.w	#6,d0
00008FA6 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008FAC 2240                       		movea.l	d0,a1
00008FAE B048                       		cmp.w	a0,d0
00008FB0 6700                       		beq.s	@skipdel
00008FB2 6100 0000                  		bsr.w	DeleteChild
00008FB6                            
00008FB6                            	@skipdel:
00008FB6 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00008FBA                            
00008FBA                            @delparent:
00008FBA 6100 0000                  		bsr.w	DeleteObject
00008FBE 4E75                       		rts	
00008FC0                            ; ===========================================================================
00008FC0                            
00008FC0                            Bri_Delete:	; Routine 6, 8
00008FC0 6100 0000                  		bsr.w	DeleteObject
00008FC4 4E75                       		rts	
00008FC6                            ; ===========================================================================
00008FC6                            
00008FC6                            Bri_Display:	; Routine $A
00008FC6 6100 0000                  		bsr.w	DisplaySprite
00008FCA 4E75                       		rts	
00008FCA 4E75                       		rts	
00008FCC                            Map_Bri:	include	"_maps\Bridge.asm"
00008FCC                            ; ---------------------------------------------------------------------------
00008FCC                            ; Sprite mappings - GHZ	bridge
00008FCC                            ; ---------------------------------------------------------------------------
00008FCC                            Map_Bri_internal:
00008FCC 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00008FCE 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00008FD0 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00008FD2 01                         M_Bri_Log:	dc.b 1
00008FD3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00008FD8 02                         M_Bri_Stump:	dc.b 2
00008FD9 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00008FDE 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008FE3 01                         M_Bri_Rope:	dc.b 1
00008FE4 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00008FEA 00                         		even
00008FEA 00                         		even
00008FEA                            
00008FEA                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00008FEA                            ; ---------------------------------------------------------------------------
00008FEA                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008FEA                            ;	    - spiked ball on a chain (SBZ)
00008FEA                            ; ---------------------------------------------------------------------------
00008FEA                            
00008FEA                            SwingingPlatform:
00008FEA 7000                       		moveq	#0,d0
00008FEC 1028 0024                  		move.b	obRoutine(a0),d0
00008FF0 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00008FF4 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00008FF8                            ; ===========================================================================
00008FF8 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00008FFC 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009000 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009004 0000                       		dc.w Swing_Action-Swing_Index
00009006                            
00009006 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009006 =00000038                  swing_origY:	equ $38		; original y-axis position
00009006                            ; ===========================================================================
00009006                            
00009006                            Swing_Main:	; Routine 0
00009006 5428 0024                  		addq.b	#2,obRoutine(a0)
0000900A 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009012 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009018 117C 0004 0001             		move.b	#4,obRender(a0)
0000901E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009024 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000902A 117C 0008 0016             		move.b	#8,obHeight(a0)
00009030 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009036 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000903C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009042 6600                       		bne.s	@notSLZ
00009044                            
00009044 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000904C 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00009052 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009058 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000905E 117C 0099 0020             		move.b	#$99,obColType(a0)
00009064                            
00009064                            	@notSLZ:
00009064 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000906A 6600                       		bne.s	@length
0000906C                            
0000906C 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00009074 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000907A 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009080 117C 0018 0016             		move.b	#$18,obHeight(a0)
00009086 117C 0086 0020             		move.b	#$86,obColType(a0)
0000908C 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009092                            
00009092                            @length:
00009092 1810                       		move.b	0(a0),d4
00009094 7200                       		moveq	#0,d1
00009096 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
0000909A 1212                       		move.b	(a2),d1		; move a2 to d1
0000909C 3F01                       		move.w	d1,-(sp)
0000909E 0241 000F                  		andi.w	#$F,d1
000090A2 14FC 0000                  		move.b	#0,(a2)+
000090A6 3601                       		move.w	d1,d3
000090A8 E94B                       		lsl.w	#4,d3
000090AA 5003                       		addq.b	#8,d3
000090AC 1143 003C                  		move.b	d3,$3C(a0)
000090B0 5103                       		subq.b	#8,d3
000090B2 4A28 001A                  		tst.b	obFrame(a0)
000090B6 6700                       		beq.s	@makechain
000090B8 5003                       		addq.b	#8,d3
000090BA 5341                       		subq.w	#1,d1
000090BC                            
000090BC                            @makechain:
000090BC 6100 0000                  		bsr.w	FindFreeObj
000090C0 6600                       		bne.s	@fail
000090C2 5228 0028                  		addq.b	#1,obSubtype(a0)
000090C6 3A09                       		move.w	a1,d5
000090C8 0445 D000                  		subi.w	#$D000,d5
000090CC EC4D                       		lsr.w	#6,d5
000090CE 0245 007F                  		andi.w	#$7F,d5
000090D2 14C5                       		move.b	d5,(a2)+
000090D4 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000090DA 1284                       		move.b	d4,0(a1)	; load swinging	object
000090DC 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000090E2 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000090E8 08A9 0006 0002             		bclr	#6,obGfx(a1)
000090EE 137C 0004 0001             		move.b	#4,obRender(a1)
000090F4 337C 0200 0018             		move.w	#$200,obPriority(a1)
000090FA 137C 0008 0014             		move.b	#8,obActWid(a1)
00009100 137C 0001 001A             		move.b	#1,obFrame(a1)
00009106 1343 003C                  		move.b	d3,$3C(a1)
0000910A 0403 0010                  		subi.b	#$10,d3
0000910E 6400                       		bcc.s	@notanchor
00009110 137C 0002 001A             		move.b	#2,obFrame(a1)
00009116 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000911C 08E9 0006 0002             		bset	#6,obGfx(a1)
00009122                            
00009122                            	@notanchor:
00009122 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009126                            
00009126                            	@fail:
00009126 3A08                       		move.w	a0,d5
00009128 0445 D000                  		subi.w	#$D000,d5
0000912C EC4D                       		lsr.w	#6,d5
0000912E 0245 007F                  		andi.w	#$7F,d5
00009132 14C5                       		move.b	d5,(a2)+
00009134 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000913A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009140 321F                       		move.w	(sp)+,d1
00009142 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009146 6700                       		beq.s	@not1X	; if not, branch
00009148 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009150 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
00009156 117C 0001 001A             		move.b	#1,obFrame(a0)
0000915C 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009162 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00009168                            
00009168                            	@not1X:
00009168 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
0000916E 6700                       		beq.s	Swing_Action	; if yes, branch
00009170                            
00009170                            Swing_SetSolid:	; Routine 2
00009170 7200                       		moveq	#0,d1
00009172 1228 0014                  		move.b	obActWid(a0),d1
00009176 7600                       		moveq	#0,d3
00009178 1628 0016                  		move.b	obHeight(a0),d3
0000917C 6100 FA76                  		bsr.w	Swing_Solid
00009180                            
00009180                            Swing_Action:	; Routine $C
00009180 6100 0000                  		bsr.w	Swing_Move
00009184 6100 0000                  		bsr.w	DisplaySprite
00009188 6000 0000                  		bra.w	Swing_ChkDel
0000918C                            ; ===========================================================================
0000918C                            
0000918C                            Swing_Action2:	; Routine 4
0000918C 7200                       		moveq	#0,d1
0000918E 1228 0014                  		move.b	obActWid(a0),d1
00009192 6100 FAC4                  		bsr.w	ExitPlatform
00009196 3F28 0008                  		move.w	obX(a0),-(sp)
0000919A 6100 0000                  		bsr.w	Swing_Move
0000919E 341F                       		move.w	(sp)+,d2
000091A0 7600                       		moveq	#0,d3
000091A2 1628 0016                  		move.b	obHeight(a0),d3
000091A6 5203                       		addq.b	#1,d3
000091A8 6100 0000                  		bsr.w	MvSonicOnPtfm
000091AC 6100 0000                  		bsr.w	DisplaySprite
000091B0 6000 0000                  		bra.w	Swing_ChkDel
000091B4                            
000091B4 4E75                       		rts
000091B4 4E75                       		rts
000091B6                            
000091B6                            ; ---------------------------------------------------------------------------
000091B6                            ; Subroutine to	change Sonic's position with a platform
000091B6                            ; ---------------------------------------------------------------------------
000091B6                            
000091B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091B6                            
000091B6                            
000091B6                            MvSonicOnPtfm:
000091B6 43F8 D000                  		lea	(v_player).w,a1
000091BA 3028 000C                  		move.w	obY(a0),d0
000091BE 9043                       		sub.w	d3,d0
000091C0 6000                       		bra.s	MvSonic2
000091C2                            ; End of function MvSonicOnPtfm
000091C2                            
000091C2                            ; ---------------------------------------------------------------------------
000091C2                            ; Subroutine to	change Sonic's position with a platform
000091C2                            ; ---------------------------------------------------------------------------
000091C2                            
000091C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091C2                            
000091C2                            
000091C2                            MvSonicOnPtfm2:
000091C2 43F8 D000                  		lea	(v_player).w,a1
000091C6 3028 000C                  		move.w	obY(a0),d0
000091CA 0440 0009                  		subi.w	#9,d0
000091CE                            
000091CE                            MvSonic2:
000091CE 4A38 F7C8                  		tst.b	(f_lockmulti).w
000091D2 6B00                       		bmi.s	locret_7B62
000091D4 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000091DA 6400                       		bhs.s	locret_7B62
000091DC 4A78 FE08                  		tst.w	(v_debuguse).w
000091E0 6600                       		bne.s	locret_7B62
000091E2 7200                       		moveq	#0,d1
000091E4 1229 0016                  		move.b	obHeight(a1),d1
000091E8 9041                       		sub.w	d1,d0
000091EA 3340 000C                  		move.w	d0,obY(a1)
000091EE 9468 0008                  		sub.w	obX(a0),d2
000091F2 9569 0008                  		sub.w	d2,obX(a1)
000091F6                            
000091F6                            locret_7B62:
000091F6 4E75                       		rts	
000091F8                            ; End of function MvSonicOnPtfm2
000091F8                            
000091F8                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000091F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091F8                            
000091F8                            
000091F8                            Swing_Move:
000091F8 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000091FC 323C 0080                  		move.w	#$80,d1
00009200 0828 0000 0022             		btst	#0,obStatus(a0)
00009206 6700                       		beq.s	loc_7B78
00009208 4440                       		neg.w	d0
0000920A D041                       		add.w	d1,d0
0000920C                            
0000920C                            loc_7B78:
0000920C 6000                       		bra.s	Swing_Move2
0000920E                            ; End of function Swing_Move
0000920E                            
0000920E                            
0000920E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000920E                            
0000920E                            
0000920E                            Obj48_Move:
0000920E 4A28 003D                  		tst.b	$3D(a0)
00009212 6600                       		bne.s	loc_7B9C
00009214 3028 003E                  		move.w	$3E(a0),d0
00009218 5040                       		addq.w	#8,d0
0000921A 3140 003E                  		move.w	d0,$3E(a0)
0000921E D168 0026                  		add.w	d0,obAngle(a0)
00009222 0C40 0200                  		cmpi.w	#$200,d0
00009226 6600                       		bne.s	loc_7BB6
00009228 117C 0001 003D             		move.b	#1,$3D(a0)
0000922E 6000                       		bra.s	loc_7BB6
00009230                            ; ===========================================================================
00009230                            
00009230                            loc_7B9C:
00009230 3028 003E                  		move.w	$3E(a0),d0
00009234 5140                       		subq.w	#8,d0
00009236 3140 003E                  		move.w	d0,$3E(a0)
0000923A D168 0026                  		add.w	d0,obAngle(a0)
0000923E 0C40 FE00                  		cmpi.w	#-$200,d0
00009242 6600                       		bne.s	loc_7BB6
00009244 117C 0000 003D             		move.b	#0,$3D(a0)
0000924A                            
0000924A                            loc_7BB6:
0000924A 1028 0026                  		move.b	obAngle(a0),d0
0000924E                            ; End of function Obj48_Move
0000924E                            
0000924E                            
0000924E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000924E                            
0000924E                            
0000924E                            Swing_Move2:
0000924E 6100 A8F2                  		bsr.w	CalcSine
00009252 3428 0038                  		move.w	$38(a0),d2
00009256 3628 003A                  		move.w	$3A(a0),d3
0000925A 45E8 0028                  		lea	obSubtype(a0),a2
0000925E 7C00                       		moveq	#0,d6
00009260 1C1A                       		move.b	(a2)+,d6
00009262                            
00009262                            loc_7BCE:
00009262 7800                       		moveq	#0,d4
00009264 181A                       		move.b	(a2)+,d4
00009266 ED4C                       		lsl.w	#6,d4
00009268 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0000926E 2244                       		movea.l	d4,a1
00009270 7800                       		moveq	#0,d4
00009272 1829 003C                  		move.b	$3C(a1),d4
00009276 2A04                       		move.l	d4,d5
00009278 C9C0                       		muls.w	d0,d4
0000927A E084                       		asr.l	#8,d4
0000927C CBC1                       		muls.w	d1,d5
0000927E E085                       		asr.l	#8,d5
00009280 D842                       		add.w	d2,d4
00009282 DA43                       		add.w	d3,d5
00009284 3344 000C                  		move.w	d4,obY(a1)
00009288 3345 0008                  		move.w	d5,obX(a1)
0000928C 51CE FFD4                  		dbf	d6,loc_7BCE
00009290 4E75                       		rts	
00009292                            ; End of function Swing_Move2
00009292                            
00009292                            ; ===========================================================================
00009292                            
00009292                            Swing_ChkDel:
000092B0 4E75                       		rts	
000092B2                            ; ===========================================================================
000092B2                            
000092B2                            Swing_DelAll:
000092B2 7400                       		moveq	#0,d2
000092B4 45E8 0028                  		lea	obSubtype(a0),a2
000092B8 141A                       		move.b	(a2)+,d2
000092BA                            
000092BA                            Swing_DelLoop:
000092BA 7000                       		moveq	#0,d0
000092BC 101A                       		move.b	(a2)+,d0
000092BE ED48                       		lsl.w	#6,d0
000092C0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092C6 2240                       		movea.l	d0,a1
000092C8 6100 0000                  		bsr.w	DeleteChild
000092CC 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000092D0 4E75                       		rts	
000092D2                            ; ===========================================================================
000092D2                            
000092D2                            Swing_Delete:	; Routine 6, 8
000092D2 6100 0000                  		bsr.w	DeleteObject
000092D6 4E75                       		rts	
000092D8                            ; ===========================================================================
000092D8                            
000092D8                            Swing_Display:	; Routine $A
000092D8 6000 0000                  		bra.w	DisplaySprite
000092D8 6000 0000                  		bra.w	DisplaySprite
000092DC                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000092DC                            ; ---------------------------------------------------------------------------
000092DC                            Map_Swing_GHZ_internal:
000092DC 0000                       		dc.w @block-Map_Swing_GHZ_internal
000092DE 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000092E0 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000092E2 02                         @block:		dc.b 2
000092E3 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000092E8 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000092ED 01                         @chain:		dc.b 1
000092EE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000092F3 01                         @anchor:	dc.b 1
000092F4 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000092FA 00                         		even
000092FA 00                         		even
000092FA                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000092FA                            ; ---------------------------------------------------------------------------
000092FA                            ; Sprite mappings - SLZ	swinging platforms
000092FA                            ; ---------------------------------------------------------------------------
000092FA                            Map_Swing_SLZ_internal:
000092FA 0000                       		dc.w @block-Map_Swing_SLZ_internal
000092FC 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000092FE 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009300 08                         @block:		dc.b 8
00009301 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009306 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000930B F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009310 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009315 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000931A 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000931F 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009324 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009329 01                         @chain:		dc.b 1
0000932A F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000932F 01                         @anchor:	dc.b 1
00009330 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009336 00                         		even
00009336 00                         		even
00009336                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009336                            ; ---------------------------------------------------------------------------
00009336                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009336                            ; ---------------------------------------------------------------------------
00009336                            
00009336                            Helix:
00009336 7000                       		moveq	#0,d0
00009338 1028 0024                  		move.b	obRoutine(a0),d0
0000933C 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009340 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009344                            ; ===========================================================================
00009344 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009346 0000                       		dc.w Hel_Action-Hel_Index
00009348 0000                       		dc.w Hel_Action-Hel_Index
0000934A 0000                       		dc.w Hel_Delete-Hel_Index
0000934C 0000                       		dc.w Hel_Display-Hel_Index
0000934E                            
0000934E =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
0000934E                            
0000934E                            ;		$29-38 are used for child object addresses
0000934E                            ; ===========================================================================
0000934E                            
0000934E                            Hel_Main:	; Routine 0
0000934E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009352 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
0000935A 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009360 117C 0007 0022             		move.b	#7,obStatus(a0)
00009366 117C 0004 0001             		move.b	#4,obRender(a0)
0000936C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009372 117C 0008 0014             		move.b	#8,obActWid(a0)
00009378 3428 000C                  		move.w	obY(a0),d2
0000937C 3628 0008                  		move.w	obX(a0),d3
00009380 1810                       		move.b	0(a0),d4
00009382 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009386 7200                       		moveq	#0,d1
00009388 1212                       		move.b	(a2),d1		; move helix length to d1
0000938A 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
0000938E 3001                       		move.w	d1,d0
00009390 E248                       		lsr.w	#1,d0
00009392 E948                       		lsl.w	#4,d0
00009394 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00009396 5501                       		subq.b	#2,d1
00009398 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
0000939A 7C00                       		moveq	#0,d6
0000939C                            
0000939C                            Hel_Build:
0000939C 6100 0000                  		bsr.w	FindFreeObj
000093A0 6600                       		bne.s	Hel_Action
000093A2 5228 0028                  		addq.b	#1,obSubtype(a0)
000093A6 3A09                       		move.w	a1,d5
000093A8 0445 D000                  		subi.w	#$D000,d5
000093AC EC4D                       		lsr.w	#6,d5
000093AE 0245 007F                  		andi.w	#$7F,d5
000093B2 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000093B4 137C 0008 0024             		move.b	#8,obRoutine(a1)
000093BA 1284                       		move.b	d4,0(a1)
000093BC 3342 000C                  		move.w	d2,ObY(a1)
000093C0 3343 0008                  		move.w	d3,obX(a1)
000093C4 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000093CA 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000093D0 137C 0004 0001             		move.b	#4,obRender(a1)
000093D6 337C 0180 0018             		move.w	#$180,obPriority(a1)
000093DC 137C 0008 0014             		move.b	#8,obActWid(a1)
000093E2 1346 003E                  		move.b	d6,hel_frame(a1)
000093E6 5206                       		addq.b	#1,d6
000093E8 0206 0007                  		andi.b	#7,d6
000093EC 0643 0010                  		addi.w	#$10,d3
000093F0 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000093F4 6600                       		bne.s	Hel_NotCentre	; if not, branch
000093F6                            
000093F6 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000093FA 5206                       		addq.b	#1,d6
000093FC 0206 0007                  		andi.b	#7,d6
00009400 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009404 5228 0028                  		addq.b	#1,obSubtype(a0)
00009408                            
00009408                            	Hel_NotCentre:
00009408 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
0000940C                            
0000940C                            Hel_Action:	; Routine 2, 4
0000940C 6100 0000                  		bsr.w	Hel_RotateSpikes
00009410 6100 0000                  		bsr.w	DisplaySprite
00009414 6000 0000                  		bra.w	Hel_ChkDel
00009418                            
00009418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009418                            
00009418                            
00009418                            Hel_RotateSpikes:
00009418 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0000941C 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009422 D028 003E                  		add.b	hel_frame(a0),d0
00009426 0200 0007                  		andi.b	#7,d0
0000942A 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000942E 6600                       		bne.s	locret_7DA6
00009430 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009436                            
00009436                            locret_7DA6:
00009436 4E75                       		rts	
00009438                            ; End of function Hel_RotateSpikes
00009438                            
00009438                            ; ===========================================================================
00009438                            
00009438                            Hel_ChkDel:
00009456 4E75                       		rts	
00009458                            ; ===========================================================================
00009458                            
00009458                            Hel_DelAll:
00009458 7400                       		moveq	#0,d2
0000945A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000945E 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009460 5502                       		subq.b	#2,d2
00009462 6500                       		bcs.s	Hel_Delete
00009464                            
00009464                            	Hel_DelLoop:
00009464 7000                       		moveq	#0,d0
00009466 101A                       		move.b	(a2)+,d0
00009468 ED48                       		lsl.w	#6,d0
0000946A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009470 2240                       		movea.l	d0,a1		; get child address
00009472 6100 0000                  		bsr.w	DeleteChild	; delete object
00009476 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
0000947A                            
0000947A                            Hel_Delete:	; Routine 6
0000947A 6100 0000                  		bsr.w	DeleteObject
0000947E 4E75                       		rts	
00009480                            ; ===========================================================================
00009480                            
00009480                            Hel_Display:	; Routine 8
00009480 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009484 6000 0000                  		bra.w	DisplaySprite
00009484 6000 0000                  		bra.w	DisplaySprite
00009488                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009488                            ; ---------------------------------------------------------------------------
00009488                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009488                            ; ---------------------------------------------------------------------------
00009488                            Map_Hel_internal:
00009488 0000                       		dc.w byte_7E08-Map_Hel_internal
0000948A 0000                       		dc.w byte_7E0E-Map_Hel_internal
0000948C 0000                       		dc.w byte_7E14-Map_Hel_internal
0000948E 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009490 0000                       		dc.w byte_7E20-Map_Hel_internal
00009492 0000                       		dc.w byte_7E26-Map_Hel_internal
00009494 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009496 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009498 01                         byte_7E08:	dc.b 1
00009499 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
0000949E 01                         byte_7E0E:	dc.b 1
0000949F F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000094A4 01                         byte_7E14:	dc.b 1
000094A5 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000094AA 01                         byte_7E1A:	dc.b 1
000094AB FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000094B0 01                         byte_7E20:	dc.b 1
000094B1 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000094B6 01                         byte_7E26:	dc.b 1
000094B7 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000094BC 01                         byte_7E2C:	dc.b 1
000094BD F4                         		dc.b $F4
000094BE                            byte_7E2E:	; reads the 0 below	; not visible
000094BE 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000094C2                            		even
000094C2                            		even
000094C2                            		include	"_incObj\18 Platforms.asm"
000094C2                            ; ---------------------------------------------------------------------------
000094C2                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000094C2                            ; ---------------------------------------------------------------------------
000094C2                            
000094C2                            BasicPlatform:
000094C2 7000                       		moveq	#0,d0
000094C4 1028 0024                  		move.b	obRoutine(a0),d0
000094C8 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000094CC 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000094D0                            ; ===========================================================================
000094D0 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000094D2 0000                       		dc.w Plat_Solid-Plat_Index
000094D4 0000                       		dc.w Plat_Action2-Plat_Index
000094D6 0000                       		dc.w Plat_Delete-Plat_Index
000094D8 0000                       		dc.w Plat_Action-Plat_Index
000094DA                            ; ===========================================================================
000094DA                            
000094DA                            Plat_Main:	; Routine 0
000094DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000094DE 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000094E4 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
000094EC 117C 0020 0014             		move.b	#$20,obActWid(a0)
000094F2 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
000094F8 6600                       		bne.s	@notSYZ
000094FA                            
000094FA 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009502 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009508                            
00009508                            	@notSYZ:
00009508 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000950E 6600                       		bne.s	@notSLZ
00009510 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009518 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000951E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009524 117C 0003 0028             		move.b	#3,obSubtype(a0)
0000952A                            
0000952A                            	@notSLZ:
0000952A 117C 0004 0001             		move.b	#4,obRender(a0)
00009530 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009536 3168 000C 002C             		move.w	obY(a0),$2C(a0)
0000953C 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009542 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009548 317C 0080 0026             		move.w	#$80,obAngle(a0)
0000954E 7200                       		moveq	#0,d1
00009550 1028 0028                  		move.b	obSubtype(a0),d0
00009554 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009558 6600                       		bne.s	@setframe	; if not, branch
0000955A 5201                       		addq.b	#1,d1		; use frame #1
0000955C 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009562                            
00009562                            	@setframe:
00009562 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009566                            
00009566                            Plat_Solid:	; Routine 2
00009566 4A28 0038                  		tst.b	$38(a0)
0000956A 6700                       		beq.s	loc_7EE0
0000956C 5928 0038                  		subq.b	#4,$38(a0)
00009570                            
00009570                            	loc_7EE0:
00009570 7200                       		moveq	#0,d1
00009572 1228 0014                  		move.b	obActWid(a0),d1
00009576 6100 F56C                  		bsr.w	PlatformObject
0000957A                            
0000957A                            Plat_Action:	; Routine 8
0000957A 6100 0000                  		bsr.w	Plat_Move
0000957E 6100 0000                  		bsr.w	Plat_Nudge
00009582 6100 0000                  		bsr.w	DisplaySprite
00009586 6000 0000                  		bra.w	Plat_ChkDel
0000958A                            ; ===========================================================================
0000958A                            
0000958A                            Plat_Action2:	; Routine 4
0000958A 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009590 6700                       		beq.s	loc_7F06
00009592 5828 0038                  		addq.b	#4,$38(a0)
00009596                            
00009596                            	loc_7F06:
00009596 7200                       		moveq	#0,d1
00009598 1228 0014                  		move.b	obActWid(a0),d1
0000959C 6100 F6BA                  		bsr.w	ExitPlatform
000095A0 3F28 0008                  		move.w	obX(a0),-(sp)
000095A4 6100 0000                  		bsr.w	Plat_Move
000095A8 6100 0000                  		bsr.w	Plat_Nudge
000095AC 341F                       		move.w	(sp)+,d2
000095AE 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000095B2 6100 0000                  		bsr.w	DisplaySprite
000095B6 6000 0000                  		bra.w	Plat_ChkDel
000095BA                            
000095BA 4E75                       		rts
000095BC                            
000095BC                            ; ---------------------------------------------------------------------------
000095BC                            ; Subroutine to	move platform slightly when you	stand on it
000095BC                            ; ---------------------------------------------------------------------------
000095BC                            
000095BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095BC                            
000095BC                            
000095BC                            Plat_Nudge:
000095BC 1028 0038                  		move.b	$38(a0),d0
000095C0 6100 A580                  		bsr.w	CalcSine
000095C4 323C 0400                  		move.w	#$400,d1
000095C8 C1C1                       		muls.w	d1,d0
000095CA 4840                       		swap	d0
000095CC D068 002C                  		add.w	$2C(a0),d0
000095D0 3140 000C                  		move.w	d0,obY(a0)
000095D4 4E75                       		rts	
000095D6                            ; End of function Plat_Nudge
000095D6                            
000095D6                            ; ---------------------------------------------------------------------------
000095D6                            ; Subroutine to	move platforms
000095D6                            ; ---------------------------------------------------------------------------
000095D6                            
000095D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095D6                            
000095D6                            
000095D6                            Plat_Move:
000095D6 7000                       		moveq	#0,d0
000095D8 1028 0028                  		move.b	obSubtype(a0),d0
000095DC 0240 000F                  		andi.w	#$F,d0
000095E0 D040                       		add.w	d0,d0
000095E2 323B 0000                  		move.w	@index(pc,d0.w),d1
000095E6 4EFB 1000                  		jmp	@index(pc,d1.w)
000095EA                            ; End of function Plat_Move
000095EA                            
000095EA                            ; ===========================================================================
000095EA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000095EE 0000 0000                  		dc.w @type02-@index, @type03-@index
000095F2 0000 0000                  		dc.w @type04-@index, @type05-@index
000095F6 0000 0000                  		dc.w @type06-@index, @type07-@index
000095FA 0000 0000                  		dc.w @type08-@index, @type00-@index
000095FE 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009602 0000                       		dc.w @type0C-@index
00009604                            ; ===========================================================================
00009604                            
00009604                            @type00:
00009604 4E75                       		rts			; platform 00 doesn't move
00009606                            ; ===========================================================================
00009606                            
00009606                            @type05:
00009606 3028 0032                  		move.w	$32(a0),d0
0000960A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000960E 4401                       		neg.b	d1		; reverse platform-motion
00009610 0601 0040                  		addi.b	#$40,d1
00009614 6000                       		bra.s	@type01_move
00009616                            ; ===========================================================================
00009616                            
00009616                            @type01:
00009616 3028 0032                  		move.w	$32(a0),d0
0000961A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000961E 0401 0040                  		subi.b	#$40,d1
00009622                            
00009622                            	@type01_move:
00009622 4881                       		ext.w	d1
00009624 D041                       		add.w	d1,d0
00009626 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
0000962A 6000 0000                  		bra.w	@chgmotion
0000962E                            ; ===========================================================================
0000962E                            
0000962E                            @type0C:
0000962E 3028 0034                  		move.w	$34(a0),d0
00009632 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009636 4401                       		neg.b	d1		; reverse platform-motion
00009638 0601 0030                  		addi.b	#$30,d1
0000963C 6000                       		bra.s	@type02_move
0000963E                            ; ===========================================================================
0000963E                            
0000963E                            @type0B:
0000963E 3028 0034                  		move.w	$34(a0),d0
00009642 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009646 0401 0030                  		subi.b	#$30,d1
0000964A 6000                       		bra.s	@type02_move
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            @type06:
0000964C 3028 0034                  		move.w	$34(a0),d0
00009650 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009654 4401                       		neg.b	d1		; reverse platform-motion
00009656 0601 0040                  		addi.b	#$40,d1
0000965A 6000                       		bra.s	@type02_move
0000965C                            ; ===========================================================================
0000965C                            
0000965C                            @type02:
0000965C 3028 0034                  		move.w	$34(a0),d0
00009660 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009664 0401 0040                  		subi.b	#$40,d1
00009668                            
00009668                            	@type02_move:
00009668 4881                       		ext.w	d1
0000966A D041                       		add.w	d1,d0
0000966C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009670 6000 0000                  		bra.w	@chgmotion
00009674                            ; ===========================================================================
00009674                            
00009674                            @type03:
00009674 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009678 6600                       		bne.s	@type03_wait	; if yes, branch
0000967A 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009680 6700                       		beq.s	@type03_nomove	; if not, branch
00009682 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009688                            
00009688                            	@type03_nomove:
00009688 4E75                       		rts	
0000968A                            
0000968A                            	@type03_wait:
0000968A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000968E 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009690 317C 0020 003A             		move.w	#32,$3A(a0)
00009696 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
0000969A 4E75                       		rts	
0000969C                            ; ===========================================================================
0000969C                            
0000969C                            @type04:
0000969C 4A68 003A                  		tst.w	$3A(a0)
000096A0 6700                       		beq.s	@loc_8048
000096A2 5368 003A                  		subq.w	#1,$3A(a0)
000096A6 6600                       		bne.s	@loc_8048
000096A8 0828 0003 0022             		btst	#3,obStatus(a0)
000096AE 6700                       		beq.s	@loc_8042
000096B0 08E9 0001 0022             		bset	#1,obStatus(a1)
000096B6 08A9 0003 0022             		bclr	#3,obStatus(a1)
000096BC 137C 0002 0024             		move.b	#2,obRoutine(a1)
000096C2 08A8 0003 0022             		bclr	#3,obStatus(a0)
000096C8 4228 0025                  		clr.b	$25(a0)
000096CC 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
000096D2                            
000096D2                            	@loc_8042:
000096D2 117C 0008 0024             		move.b	#8,obRoutine(a0)
000096D8                            
000096D8                            	@loc_8048:
000096D8 2628 002C                  		move.l	$2C(a0),d3
000096DC 3028 0012                  		move.w	obVelY(a0),d0
000096E0 48C0                       		ext.l	d0
000096E2 E180                       		asl.l	#8,d0
000096E4 D680                       		add.l	d0,d3
000096E6 2143 002C                  		move.l	d3,$2C(a0)
000096EA 0668 0038 0012             		addi.w	#$38,obVelY(a0)
000096F0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000096F4 0640 00E0                  		addi.w	#$E0,d0
000096F8 B068 002C                  		cmp.w	$2C(a0),d0
000096FC 6400                       		bcc.s	@locret_8074
000096FE 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009704                            
00009704                            	@locret_8074:
00009704 4E75                       		rts	
00009706                            ; ===========================================================================
00009706                            
00009706                            @type07:
00009706 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000970A 6600                       		bne.s	@type07_wait	; if yes, branch
0000970C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009710 7000                       		moveq	#0,d0
00009712 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009716 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009718 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000971C 6700                       		beq.s	@type07_nomove	; if not, branch
0000971E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009724                            
00009724                            	@type07_nomove:
00009724 4E75                       		rts	
00009726                            
00009726                            	@type07_wait:
00009726 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000972A 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
0000972C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009730 4E75                       		rts	
00009732                            ; ===========================================================================
00009732                            
00009732                            @type08:
00009732 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009736 3028 0034                  		move.w	$34(a0),d0
0000973A 0440 0200                  		subi.w	#$200,d0
0000973E B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009742 6600                       		bne.s	@type08_nostop	; if not, branch
00009744 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009748                            
00009748                            	@type08_nostop:
00009748 4E75                       		rts	
0000974A                            ; ===========================================================================
0000974A                            
0000974A                            @type0A:
0000974A 3028 0034                  		move.w	$34(a0),d0
0000974E 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009752 0401 0040                  		subi.b	#$40,d1
00009756 4881                       		ext.w	d1
00009758 E241                       		asr.w	#1,d1
0000975A D041                       		add.w	d1,d0
0000975C 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009760                            
00009760                            @chgmotion:
00009760 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009766 4E75                       		rts	
00009768                            ; ===========================================================================
00009768                            
00009768                            Plat_ChkDel:
00009784 4E75                       		rts	
00009786                            ; ===========================================================================
00009786                            
00009786                            Plat_Delete:	; Routine 6
00009786 6000 0000                  		bra.w	DeleteObject
00009786 6000 0000                  		bra.w	DeleteObject
0000978A                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
0000978A                            ; ---------------------------------------------------------------------------
0000978A                            ; Sprite mappings - unused
0000978A                            ; ---------------------------------------------------------------------------
0000978A                            Map_Plat_Unused_internal:
0000978A 0000                       		dc.w @small-Map_Plat_Unused_internal
0000978C 0000                       		dc.w @large-Map_Plat_Unused_internal
0000978E 02                         @small:		dc.b 2
0000978F F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009794 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009799 0A                         @large:		dc.b $A
0000979A F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000979F 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000097A4 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000097A9 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000097AE 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000097B3 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000097B8 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000097BD 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000097C2 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000097C7 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000097CC                            		even
000097CC                            		even
000097CC                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
000097CC                            ; ---------------------------------------------------------------------------
000097CC                            ; Sprite mappings - GHZ	platforms
000097CC                            ; ---------------------------------------------------------------------------
000097CC                            Map_Plat_GHZ_internal:
000097CC 0000                       		dc.w @small-Map_Plat_GHZ_internal
000097CE 0000                       		dc.w @large-Map_Plat_GHZ_internal
000097D0 04                         @small:		dc.b 4
000097D1 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000097D6 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000097DB F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000097E0 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000097E5 0A                         @large:		dc.b $A
000097E6 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000097EB 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000097F0 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000097F5 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000097FA 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000097FF F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009804 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009809 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000980E 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009813 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009818                            		even
00009818                            		even
00009818                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009818                            ; ---------------------------------------------------------------------------
00009818                            ; Sprite mappings - SYZ	platforms
00009818                            ; ---------------------------------------------------------------------------
00009818                            Map_Plat_SYZ_internal:
00009818 0000                       		dc.w @platform-Map_Plat_SYZ_internal
0000981A 03                         @platform:	dc.b 3
0000981B F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009820 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009825 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000982A                            		even
0000982A                            		even
0000982A                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
0000982A                            ; ---------------------------------------------------------------------------
0000982A                            ; Sprite mappings - SLZ	platforms
0000982A                            ; ---------------------------------------------------------------------------
0000982A                            Map_Plat_SLZ_internal:
0000982A 0000                       		dc.w @platform-Map_Plat_SLZ_internal
0000982C 02                         @platform:	dc.b 2
0000982D F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009832 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009838 00                         		even
00009838 00                         		even
00009838                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009838                            ; ---------------------------------------------------------------------------
00009838                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009838                            ; ---------------------------------------------------------------------------
00009838                            Map_GBall_internal:
00009838 0000                       		dc.w @shiny-Map_GBall_internal
0000983A 0000                       		dc.w @check1-Map_GBall_internal
0000983C 0000                       		dc.w @check2-Map_GBall_internal
0000983E 0000                       		dc.w @check3-Map_GBall_internal
00009840 06                         @shiny:		dc.b 6
00009841 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009846 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000984B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009850 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009855 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000985A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000985F 04                         @check1:	dc.b 4
00009860 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009865 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000986A 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000986F 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009874 04                         @check2:	dc.b 4
00009875 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000987A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000987F 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009884 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009889 04                         @check3:	dc.b 4
0000988A E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000988F E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009894 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009899 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000989E                            		even
0000989E                            		even
0000989E                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 1A - GHZ collapsing ledge
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            CollapseLedge:
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	obRoutine(a0),d0
000098A4 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000098A8 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000098AC                            ; ===========================================================================
000098AC 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000098B0 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000098B4 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000098B8                            
000098B8 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000098B8 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000098B8                            ; ===========================================================================
000098B8                            
000098B8                            Ledge_Main:	; Routine 0
000098B8 5428 0024                  		addq.b	#2,obRoutine(a0)
000098BC 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
000098C4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000098CA 0028 0004 0001             		ori.b	#4,obRender(a0)
000098D0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000098D6 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
000098DC 117C 0064 0014             		move.b	#$64,obActWid(a0)
000098E2 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000098E8 117C 0038 0016             		move.b	#$38,obHeight(a0)
000098EE 08E8 0004 0001             		bset	#4,obRender(a0)
000098F4                            
000098F4                            Ledge_Touch:	; Routine 2
000098F4 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
000098F8 6700                       		beq.s	@slope		; if not, branch
000098FA 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
000098FE 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009902 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009906                            
00009906                            	@slope:
00009906 323C 0030                  		move.w	#$30,d1
0000990A 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009910 6100 F2A6                  		bsr.w	SlopeObject
00009914 6000 0000                  		bra.w	RememberState
00009918                            ; ===========================================================================
00009918                            
00009918                            Ledge_Collapse:	; Routine 4
00009918 4A28 0038                  		tst.b	ledge_timedelay(a0)
0000991C 6700 0000                  		beq.w	loc_847A
00009920 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009926 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
0000992A                            
0000992A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000992A                            
0000992A                            
0000992A                            Ledge_WalkOff:	; Routine $A
0000992A 323C 0030                  		move.w	#$30,d1
0000992E 6100 F328                  		bsr.w	ExitPlatform
00009932 323C 0030                  		move.w	#$30,d1
00009936 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
0000993C 3428 0008                  		move.w	obX(a0),d2
00009940 6100 0000                  		bsr.w	SlopeObject2
00009944 6000 0000                  		bra.w	RememberState
00009948                            ; End of function Ledge_WalkOff
00009948                            
00009948                            ; ===========================================================================
00009948                            
00009948                            Ledge_Display:	; Routine 6
00009948 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
0000994C 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
0000994E 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009952 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009956 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
0000995A 6000 0000                  		bra.w	DisplaySprite
0000995E                            ; ===========================================================================
0000995E                            
0000995E                            loc_82D0:
0000995E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009962 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009966 43F8 D000                  		lea	(v_player).w,a1
0000996A 0829 0003 0022             		btst	#3,obStatus(a1)
00009970 6700                       		beq.s	loc_82FC
00009972 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009976 6600                       		bne.s	locret_8308
00009978 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000997E 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009984 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000998A                            
0000998A                            loc_82FC:
0000998A 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009990 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009996                            
00009996                            locret_8308:
00009996 4E75                       		rts	
00009998                            ; ===========================================================================
00009998                            
00009998                            Ledge_TimeZero:
00009998 6100 0000                  		bsr.w	ObjectFall
0000999C 6100 0000                  		bsr.w	DisplaySprite
000099A0 4A28 0001                  		tst.b	obRender(a0)
000099A4 6A00                       		bpl.s	Ledge_Delete
000099A6 4E75                       		rts	
000099A8                            ; ===========================================================================
000099A8                            
000099A8                            Ledge_Delete:	; Routine 8
000099A8 6100 0000                  		bsr.w	DeleteObject
000099AC 4E75                       		rts	
000099AC 4E75                       		rts	
000099AE                            		include	"_incObj\53 Collapsing Floors.asm"
000099AE                            ; ---------------------------------------------------------------------------
000099AE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000099AE                            ; ---------------------------------------------------------------------------
000099AE                            
000099AE                            CollapseFloor:
000099AE 7000                       		moveq	#0,d0
000099B0 1028 0024                  		move.b	obRoutine(a0),d0
000099B4 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
000099B8 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
000099BC                            ; ===========================================================================
000099BC 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
000099C0 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
000099C4 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
000099C8                            
000099C8 =00000038                  cflo_timedelay:		equ $38
000099C8 =0000003A                  cflo_collapse_flag:	equ $3A
000099C8                            ; ===========================================================================
000099C8                            
000099C8                            CFlo_Main:	; Routine 0
000099C8 5428 0024                  		addq.b	#2,obRoutine(a0)
000099CC 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
000099D4 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000099DA 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000099E0 6600                       		bne.s	@notSLZ
000099E2                            
000099E2 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
000099E8 5428 001A                  		addq.b	#2,obFrame(a0)
000099EC                            
000099EC                            	@notSLZ:
000099EC 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
000099F2 6600                       		bne.s	@notSBZ
000099F4 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
000099FA                            
000099FA                            	@notSBZ:
000099FA 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A00 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A06 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009A0C 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009A12                            
00009A12                            CFlo_Touch:	; Routine 2
00009A12 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009A16 6700                       		beq.s	@solid		; if not, branch
00009A18 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009A1C 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009A20 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009A24                            
00009A24                            	@solid:
00009A24 323C 0020                  		move.w	#$20,d1
00009A28 6100 F0BA                  		bsr.w	PlatformObject
00009A2C 4A28 0028                  		tst.b	obSubtype(a0)
00009A30 6A00                       		bpl.s	@remstate
00009A32 0829 0003 0022             		btst	#3,obStatus(a1)
00009A38 6700                       		beq.s	@remstate
00009A3A 08A8 0000 0001             		bclr	#0,obRender(a0)
00009A40 3029 0008                  		move.w	obX(a1),d0
00009A44 9068 0008                  		sub.w	obX(a0),d0
00009A48 6400                       		bcc.s	@remstate
00009A4A 08E8 0000 0001             		bset	#0,obRender(a0)
00009A50                            
00009A50                            	@remstate:
00009A50 6000 0000                  		bra.w	RememberState
00009A54                            ; ===========================================================================
00009A54                            
00009A54                            CFlo_Collapse:	; Routine 4
00009A54 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009A58 6700 0000                  		beq.w	loc_8458
00009A5C 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009A62 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009A66                            
00009A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A66                            
00009A66                            
00009A66                            CFlo_WalkOff:	; Routine $A
00009A66 323C 0020                  		move.w	#$20,d1
00009A6A 6100 F1EC                  		bsr.w	ExitPlatform
00009A6E 3428 0008                  		move.w	obX(a0),d2
00009A72 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009A76 6000 0000                  		bra.w	RememberState
00009A7A                            ; End of function CFlo_WalkOff
00009A7A                            
00009A7A                            ; ===========================================================================
00009A7A                            
00009A7A                            CFlo_Display:	; Routine 6
00009A7A 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009A7E 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009A80 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009A84 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009A88 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009A8C 6000 0000                  		bra.w	DisplaySprite
00009A90                            ; ===========================================================================
00009A90                            
00009A90                            loc_8402:
00009A90 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009A94 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009A98 43F8 D000                  		lea	(v_player).w,a1
00009A9C 0829 0003 0022             		btst	#3,obStatus(a1)
00009AA2 6700                       		beq.s	loc_842E
00009AA4 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009AA8 6600                       		bne.s	locret_843A
00009AAA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009AB0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009AB6 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009ABC                            
00009ABC                            loc_842E:
00009ABC 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009AC2 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009AC8                            
00009AC8                            locret_843A:
00009AC8 4E75                       		rts	
00009ACA                            ; ===========================================================================
00009ACA                            
00009ACA                            CFlo_TimeZero:
00009ACA 6100 0000                  		bsr.w	ObjectFall
00009ACE 6100 0000                  		bsr.w	DisplaySprite
00009AD2 4A28 0001                  		tst.b	obRender(a0)
00009AD6 6A00                       		bpl.s	CFlo_Delete
00009AD8 4E75                       		rts	
00009ADA                            ; ===========================================================================
00009ADA                            
00009ADA                            CFlo_Delete:	; Routine 8
00009ADA 6100 0000                  		bsr.w	DeleteObject
00009ADE 4E75                       		rts	
00009AE0                            ; ===========================================================================
00009AE0                            
00009AE0                            CFlo_Fragment:
00009AE0 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009AE6                            
00009AE6                            loc_8458:
00009AE6 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009AEC 0828 0000 0028             		btst	#0,obSubtype(a0)
00009AF2 6700                       		beq.s	loc_846C
00009AF4 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009AFA                            
00009AFA                            loc_846C:
00009AFA 7207                       		moveq	#7,d1
00009AFC 5228 001A                  		addq.b	#1,obFrame(a0)
00009B00 6000                       		bra.s	loc_8486
00009B00 6000                       		bra.s	loc_8486
00009B02                            
00009B02                            ; ===========================================================================
00009B02                            
00009B02                            Ledge_Fragment:
00009B02 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009B08                            
00009B08                            loc_847A:
00009B08 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009B0E 7218                       		moveq	#$18,d1
00009B10 5428 001A                  		addq.b	#2,obFrame(a0)
00009B14                            
00009B14                            loc_8486:
00009B14 7000                       		moveq	#0,d0
00009B16 1028 001A                  		move.b	obFrame(a0),d0
00009B1A D040                       		add.w	d0,d0
00009B1C 2668 0004                  		movea.l	obMap(a0),a3
00009B20 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009B24 524B                       		addq.w	#1,a3
00009B26 08E8 0005 0001             		bset	#5,obRender(a0)
00009B2C 1810                       		move.b	0(a0),d4
00009B2E 1A28 0001                  		move.b	obRender(a0),d5
00009B32 2248                       		movea.l	a0,a1
00009B34 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009B3A 1284                       		move.b	d4,0(a1)
00009B3C 234B 0004                  		move.l	a3,obMap(a1)
00009B40 1345 0001                  		move.b	d5,obRender(a1)
00009B44 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009B4A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009B50 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009B56 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009B5C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009B62 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009B66 5341                       		subq.w	#1,d1
00009B68 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009B6C 303C 005F                  		move.w	#$5F,d0
00009B70                            ; ===========================================================================
00009B70                            
00009B70                            loc_84AA:
00009B70 4A11                       		tst.b	(a1)
00009B72 6700                       		beq.s	@cont		
00009B74 43E9 0040                  		lea		$40(a1),a1
00009B78 51C8 FFF6                  		dbf		d0,loc_84AA	
00009B7C 6600                       		bne.s	loc_84F2	
00009B7E                            	@cont:
00009B7E 5A4B                       		addq.w	#5,a3
00009B80                            
00009B80                            loc_84B2:
00009B80 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009B86 1284                       		move.b	d4,0(a1)
00009B88 234B 0004                  		move.l	a3,obMap(a1)
00009B8C 1345 0001                  		move.b	d5,obRender(a1)
00009B90 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009B96 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009B9C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009BA2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009BA8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009BAE 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009BB2 6100 0000                  		bsr.w	DisplaySprite1
00009BB6                            
00009BB6                            loc_84EE:
00009BB6 51C9 FFB8                  		dbf	d1,loc_84AA
00009BBA                            
00009BBA                            loc_84F2:
00009BBA 6100 0000                  		bsr.w	DisplaySprite
00009BC8                            ; ===========================================================================
00009BC8                            ; ---------------------------------------------------------------------------
00009BC8                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009BC8                            ; ---------------------------------------------------------------------------
00009BC8 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009BD8 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009BE2 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009BEA 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009BF2                            
00009BF2                            ; ---------------------------------------------------------------------------
00009BF2                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009BF2                            ; ---------------------------------------------------------------------------
00009BF2                            
00009BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009BF2                            
00009BF2                            
00009BF2                            SlopeObject2:
00009BF2 43F8 D000                  		lea	(v_player).w,a1
00009BF6 0829 0003 0022             		btst	#3,obStatus(a1)
00009BFC 6700                       		beq.s	locret_856E
00009BFE 3029 0008                  		move.w	obX(a1),d0
00009C02 9068 0008                  		sub.w	obX(a0),d0
00009C06 D041                       		add.w	d1,d0
00009C08 E248                       		lsr.w	#1,d0
00009C0A 0828 0000 0001             		btst	#0,obRender(a0)
00009C10 6700                       		beq.s	loc_854E
00009C12 4640                       		not.w	d0
00009C14 D041                       		add.w	d1,d0
00009C16                            
00009C16                            loc_854E:
00009C16 7200                       		moveq	#0,d1
00009C18 1232 0000                  		move.b	(a2,d0.w),d1
00009C1C 3028 000C                  		move.w	obY(a0),d0
00009C20 9041                       		sub.w	d1,d0
00009C22 7200                       		moveq	#0,d1
00009C24 1229 0016                  		move.b	obHeight(a1),d1
00009C28 9041                       		sub.w	d1,d0
00009C2A 3340 000C                  		move.w	d0,obY(a1)
00009C2E 9468 0008                  		sub.w	obX(a0),d2
00009C32 9569 0008                  		sub.w	d2,obX(a1)
00009C36                            
00009C36                            locret_856E:
00009C36 4E75                       		rts	
00009C38                            ; End of function SlopeObject2
00009C38                            
00009C38                            ; ===========================================================================
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            ; Collision data for GHZ collapsing ledge
00009C38                            ; ---------------------------------------------------------------------------
00009C38                            Ledge_SlopeData:
00009C38                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009C68                            		even
00009C68                            
00009C68                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009C68                            ; ---------------------------------------------------------------------------
00009C68                            ; Sprite mappings - GHZ	collapsing ledge
00009C68                            ; ---------------------------------------------------------------------------
00009C68                            Map_Ledge_internal:
00009C68 0000                       		dc.w @left-Map_Ledge_internal
00009C6A 0000                       		dc.w @right-Map_Ledge_internal
00009C6C 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009C6E 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009C70 10                         @left:		dc.b $10
00009C71 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009C76 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009C7B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009C80 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009C85 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009C8A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009C8F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009C94 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009C99 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009C9E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009CA3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009CA8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009CAD 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009CB2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009CB7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009CBC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009CC1 10                         @right:		dc.b $10
00009CC2 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009CC7 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009CCC E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009CD1 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009CD6 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009CDB D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009CE0 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009CE5 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009CEA F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009CEF F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009CF4 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009CF9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009CFE 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D03 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009D08 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009D0D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D12 19                         @leftsmash:	dc.b $19
00009D13 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009D18 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009D1D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009D22 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009D27 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009D2C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009D31 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009D36 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009D3B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D40 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009D45 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009D4A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009D4F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009D54 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009D59 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D5E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009D63 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009D68 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009D6D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D72 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009D77 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009D7C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009D81 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009D86 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009D8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D90 19                         @rightsmash:	dc.b $19
00009D91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009D96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009D9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009DA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009DA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009DAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009DAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009DB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009DB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DBE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009DC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009DC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009DCD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009DD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009DD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DDC F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009DE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009DE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009DEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009DF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009DF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009DFA 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009DFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E0E                            		even
00009E0E                            		even
00009E0E                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009E0E                            ; --------------------------------------------------------------------------------
00009E0E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009E0E                            ; --------------------------------------------------------------------------------
00009E0E                            
00009E0E                            SME_WNa9T:	
00009E0E 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009E12 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009E16 08                         SME_WNa9T_8:	dc.b 8	
00009E17 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E1C 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009E21 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009E26 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009E2B F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E30 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009E35 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009E3A 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009E3F 08                         SME_WNa9T_31:	dc.b 8	
00009E40 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E45 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009E4A F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009E4F 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009E54 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E59 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009E5E F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009E63 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009E68 04                         SME_WNa9T_5A:	dc.b 4	
00009E69 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009E6E 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009E73 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009E78 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009E7D 08                         SME_WNa9T_6F:	dc.b 8	
00009E7E F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E83 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009E88 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E8D F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009E92 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009E97 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009E9C 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009EA1 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009EA6                            		even
00009EA6                            		even
00009EA6                            
00009EA6                            		include	"_incObj\1C Scenery.asm"
00009EA6                            ; ---------------------------------------------------------------------------
00009EA6                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009EA6                            ; ---------------------------------------------------------------------------
00009EA6                            
00009EA6                            Scenery:
00009EA6 7000                       		moveq	#0,d0
00009EA8 1028 0024                  		move.b	obRoutine(a0),d0
00009EAC 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009EB0 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009EB4                            ; ===========================================================================
00009EB4 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009EB6 0000                       		dc.w Scen_ChkDel-Scen_Index
00009EB8                            ; ===========================================================================
00009EB8                            
00009EB8                            Scen_Main:	; Routine 0
00009EB8 5428 0024                  		addq.b	#2,obRoutine(a0)
00009EBC 7000                       		moveq	#0,d0
00009EBE 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
00009EC2 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009EC6 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
00009ECA 2159 0004                  		move.l	(a1)+,obMap(a0)
00009ECE 3159 0002                  		move.w	(a1)+,obGfx(a0)
00009ED2 0028 0004 0001             		ori.b	#4,obRender(a0)
00009ED8 1159 001A                  		move.b	(a1)+,obFrame(a0)
00009EDC 1159 0014                  		move.b	(a1)+,obActWid(a0)
00009EE0 1159 0018                  		move.b	(a1)+,obPriority(a0)
00009EE4 3028 0018                  		move.w obPriority(a0),d0 
00009EE8 E248                       		lsr.w #1,d0 
00009EEA 0240 0380                  		andi.w #$380,d0 
00009EEE 3140 0018                  		move.w d0,obPriority(a0)		
00009EF2 1159 0020                  		move.b	(a1)+,obColType(a0)
00009EF6                            
00009EF6                            Scen_ChkDel:	; Routine 2
00009F14 6000 0000                  		bra.w	DisplaySprite
00009F18                            ; ===========================================================================
00009F18                            ; ---------------------------------------------------------------------------
00009F18                            ; Variables for	object $1C are stored in an array
00009F18                            ; ---------------------------------------------------------------------------
00009F18 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
00009F1C 44D8                       		dc.w $44D8		; VRAM setting
00009F1E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009F22 0000 0000                  		dc.l Map_Scen
00009F26 44D8                       		dc.w $44D8
00009F28 0008 0200                  		dc.b 0,	8, 2, 0
00009F2C 0000 0000                  		dc.l Map_Scen
00009F30 44D8                       		dc.w $44D8
00009F32 0008 0200                  		dc.b 0,	8, 2, 0
00009F36 0000 8FCC                  		dc.l Map_Bri
00009F3A 438E                       		dc.w $438E
00009F3C 0110 0100                  		dc.b 1,	$10, 1,	0
00009F40                            		even
00009F40                            		even
00009F40                            Map_Scen:	include	"_maps\Scenery.asm"
00009F40                            ; ---------------------------------------------------------------------------
00009F40                            ; Sprite mappings - SLZ	lava thrower
00009F40                            ; ---------------------------------------------------------------------------
00009F40                            Map_Scen_internal:
00009F40 0000                       		dc.w byte_8858-Map_Scen_internal
00009F42 01                         byte_8858:	dc.b 1
00009F43 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009F48                            		even
00009F48                            		even
00009F48                            
00009F48                            		include	"_incObj\1D Unused Switch.asm"
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            ; Object 1D - switch that activates when Sonic touches it
00009F48                            ; (this	is not used anywhere in	the game)
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            
00009F48                            MagicSwitch:
00009F48 7000                       		moveq	#0,d0
00009F4A 1028 0024                  		move.b	obRoutine(a0),d0
00009F4E 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
00009F52 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
00009F56                            ; ===========================================================================
00009F56 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
00009F58 0000                       		dc.w Swi_Action-Swi_Index
00009F5A 0000                       		dc.w Swi_Delete-Swi_Index
00009F5C                            
00009F5C =00000030                  swi_origY:	equ $30		; original y-axis position
00009F5C                            ; ===========================================================================
00009F5C                            
00009F5C                            Swi_Main:	; Routine 0
00009F5C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F60 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
00009F68 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009F6E 117C 0004 0001             		move.b	#4,obRender(a0)
00009F74 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
00009F7A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00009F80 317C 0280 0018             		move.w	#$280,obPriority(a0)
00009F86                            
00009F86                            Swi_Action:	; Routine 2
00009F86 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
00009F8C 323C 0010                  		move.w	#$10,d1
00009F90 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
00009F94 6700                       		beq.s	Swi_ChkDel	; if not, branch
00009F96                            
00009F96 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
00009F9A 7001                       		moveq	#1,d0
00009F9C 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
00009FA0                            
00009FA0                            Swi_ChkDel:
00009FA0 6100 0000                  		bsr.w	DisplaySprite
00009FC2 4E75                       		rts	
00009FC4                            ; ===========================================================================
00009FC4                            
00009FC4                            Swi_Delete:	; Routine 4
00009FC4 6100 0000                  		bsr.w	DeleteObject
00009FC8 4E75                       		rts	
00009FCA                            
00009FCA                            ; ---------------------------------------------------------------------------
00009FCA                            ; Subroutine to	check if Sonic touches the object
00009FCA                            ; ---------------------------------------------------------------------------
00009FCA                            
00009FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FCA                            
00009FCA                            
00009FCA                            Swi_ChkTouch:
00009FCA 43F8 D000                  		lea	(v_player).w,a1
00009FCE 3029 0008                  		move.w	obX(a1),d0
00009FD2 9068 0008                  		sub.w	obX(a0),d0
00009FD6 D041                       		add.w	d1,d0
00009FD8 6B00                       		bmi.s	Swi_NoTouch
00009FDA D241                       		add.w	d1,d1
00009FDC B041                       		cmp.w	d1,d0
00009FDE 6400                       		bcc.s	Swi_NoTouch
00009FE0 3429 000C                  		move.w	obY(a1),d2
00009FE4 1229 0016                  		move.b	obHeight(a1),d1
00009FE8 4881                       		ext.w	d1
00009FEA D242                       		add.w	d2,d1
00009FEC 3028 000C                  		move.w	obY(a0),d0
00009FF0 0440 0010                  		subi.w	#$10,d0
00009FF4 9041                       		sub.w	d1,d0
00009FF6 6200                       		bhi.s	Swi_NoTouch
00009FF8 0C40 FFF0                  		cmpi.w	#-$10,d0
00009FFC 6500                       		bcs.s	Swi_NoTouch
00009FFE 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A000 4E75                       		rts	
0000A002                            ; ===========================================================================
0000A002                            
0000A002                            Swi_NoTouch:
0000A002 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A004 4E75                       		rts	
0000A006                            ; End of function Swi_ChkTouch
0000A006                            ; End of function Swi_ChkTouch
0000A006                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A006                            ; ---------------------------------------------------------------------------
0000A006                            ; Sprite mappings - Unused switch thingy
0000A006                            ; ---------------------------------------------------------------------------
0000A006                            Map_Swi_internal:
0000A006 0000                       		dc.w byte_891E-Map_Swi_internal
0000A008 04                         byte_891E:	dc.b 4
0000A009 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A00E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A013 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A018 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A01E 00                         		even
0000A01E 00                         		even
0000A01E                            
0000A01E                            		include	"_incObj\2A SBZ Small Door.asm"
0000A01E                            ; ---------------------------------------------------------------------------
0000A01E                            ; Object 2A - small vertical door (SBZ)
0000A01E                            ; ---------------------------------------------------------------------------
0000A01E                            
0000A01E                            AutoDoor:
0000A01E 7000                       		moveq	#0,d0
0000A020 1028 0024                  		move.b	obRoutine(a0),d0
0000A024 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A028 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A02C                            ; ===========================================================================
0000A02C 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A02E 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A030                            ; ===========================================================================
0000A030                            
0000A030                            ADoor_Main:	; Routine 0
0000A030 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A034 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A03C 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A042 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A048 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A04E                            		;move.b	#4,obPriority(a0)
0000A04E                            
0000A04E                            ADoor_OpenShut:	; Routine 2
0000A04E 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A052 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A056 3038 D008                  		move.w	(v_player+obX).w,d0
0000A05A D041                       		add.w	d1,d0
0000A05C B068 0008                  		cmp.w	obX(a0),d0
0000A060 6500                       		bcs.s	ADoor_Animate
0000A062 9041                       		sub.w	d1,d0
0000A064 9041                       		sub.w	d1,d0
0000A066 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A06A 6400                       		bcc.s	ADoor_Animate	; close door
0000A06C D041                       		add.w	d1,d0
0000A06E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A072 6400                       		bcc.s	loc_899A	; if yes, branch
0000A074 0828 0000 0022             		btst	#0,obStatus(a0)
0000A07A 6600                       		bne.s	ADoor_Animate
0000A07C 6000                       		bra.s	ADoor_Open
0000A07E                            ; ===========================================================================
0000A07E                            
0000A07E                            loc_899A:
0000A07E 0828 0000 0022             		btst	#0,obStatus(a0)
0000A084 6700                       		beq.s	ADoor_Animate
0000A086                            
0000A086                            ADoor_Open:
0000A086 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A08C                            
0000A08C                            ADoor_Animate:
0000A08C 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A092 6100 0000                  		bsr.w	AnimateSprite
0000A096 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A09A 6600                       		bne.s	@remember	; if yes, branch
0000A09C 323C 0011                  		move.w	#$11,d1
0000A0A0 343C 0020                  		move.w	#$20,d2
0000A0A4 3602                       		move.w	d2,d3
0000A0A6 5243                       		addq.w	#1,d3
0000A0A8 3828 0008                  		move.w	obX(a0),d4
0000A0AC 6100 0000                  		bsr.w	SolidObject
0000A0B0                            
0000A0B0                            	@remember:
0000A0B0 6000 0000                  		bra.w	RememberState
0000A0B0 6000 0000                  		bra.w	RememberState
0000A0B4                            		include	"_anim\SBZ Small Door.asm"
0000A0B4                            ; ---------------------------------------------------------------------------
0000A0B4                            ; Animation script - doors (SBZ)
0000A0B4                            ; ---------------------------------------------------------------------------
0000A0B4 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A0B6 0000                       		dc.w @open-Ani_ADoor
0000A0B8 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A0C4 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A0D0                            		even
0000A0D0                            		even
0000A0D0                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A0D0                            ; --------------------------------------------------------------------------------
0000A0D0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A0D0                            ; --------------------------------------------------------------------------------
0000A0D0                            
0000A0D0                            SME_YnmwF:	
0000A0D0 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A0D4 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A0D8 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A0DC 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A0E0 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A0E2 02                         SME_YnmwF_12:	dc.b 2	
0000A0E3 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A0E8 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A0ED 02                         SME_YnmwF_1D:	dc.b 2	
0000A0EE DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A0F3 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A0F8 02                         SME_YnmwF_28:	dc.b 2	
0000A0F9 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A0FE 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A103 02                         SME_YnmwF_33:	dc.b 2	
0000A104 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A109 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A10E 02                         SME_YnmwF_3E:	dc.b 2	
0000A10F D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A114 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A119 02                         SME_YnmwF_49:	dc.b 2	
0000A11A CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A11F 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A124 02                         SME_YnmwF_54:	dc.b 2	
0000A125 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A12A 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A12F 02                         SME_YnmwF_5F:	dc.b 2	
0000A130 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A135 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A13A 02                         SME_YnmwF_6A:	dc.b 2	
0000A13B C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A140 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A146 00                         		even
0000A146 00                         		even
0000A146                            
0000A146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A146                            
0000A146                            
0000A146                            Obj44_SolidWall:
0000A146 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A14A 6700                       		beq.s	loc_8AA8
0000A14C 6B00 0000                  		bmi.w	loc_8AC4
0000A150 4A40                       		tst.w	d0
0000A152 6700 0000                  		beq.w	loc_8A92
0000A156 6B00                       		bmi.s	loc_8A7C
0000A158 4A69 0010                  		tst.w	obVelX(a1)
0000A15C 6B00                       		bmi.s	loc_8A92
0000A15E 6000                       		bra.s	loc_8A82
0000A160                            ; ===========================================================================
0000A160                            
0000A160                            loc_8A7C:
0000A160 4A69 0010                  		tst.w	obVelX(a1)
0000A164 6A00                       		bpl.s	loc_8A92
0000A166                            
0000A166                            loc_8A82:
0000A166 9169 0008                  		sub.w	d0,obX(a1)
0000A16A 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A170 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A176                            
0000A176                            loc_8A92:
0000A176 0829 0001 0022             		btst	#1,obStatus(a1)
0000A17C 6600                       		bne.s	loc_8AB6
0000A17E 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A184 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A18A 4E75                       		rts	
0000A18C                            ; ===========================================================================
0000A18C                            
0000A18C                            loc_8AA8:
0000A18C 0828 0005 0022             		btst	#5,obStatus(a0)
0000A192 6700                       		beq.s	locret_8AC2
0000A194 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A19A                            
0000A19A                            loc_8AB6:
0000A19A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A1A0 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A1A6                            
0000A1A6                            locret_8AC2:
0000A1A6 4E75                       		rts	
0000A1A8                            ; ===========================================================================
0000A1A8                            
0000A1A8                            loc_8AC4:
0000A1A8 4A69 0012                  		tst.w	obVelY(a1)
0000A1AC 6A00                       		bpl.s	locret_8AD8
0000A1AE 4A43                       		tst.w	d3
0000A1B0 6A00                       		bpl.s	locret_8AD8
0000A1B2 9769 000C                  		sub.w	d3,obY(a1)
0000A1B6 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A1BC                            
0000A1BC                            locret_8AD8:
0000A1BC 4E75                       		rts	
0000A1BE                            ; End of function Obj44_SolidWall
0000A1BE                            
0000A1BE                            
0000A1BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1BE                            
0000A1BE                            
0000A1BE                            Obj44_SolidWall2:
0000A1BE 43F8 D000                  		lea	(v_player).w,a1
0000A1C2 3029 0008                  		move.w	obX(a1),d0
0000A1C6 9068 0008                  		sub.w	obX(a0),d0
0000A1CA D041                       		add.w	d1,d0
0000A1CC 6B00                       		bmi.s	loc_8B48
0000A1CE 3601                       		move.w	d1,d3
0000A1D0 D643                       		add.w	d3,d3
0000A1D2 B043                       		cmp.w	d3,d0
0000A1D4 6200                       		bhi.s	loc_8B48
0000A1D6 1629 0016                  		move.b	obHeight(a1),d3
0000A1DA 4883                       		ext.w	d3
0000A1DC D443                       		add.w	d3,d2
0000A1DE 3629 000C                  		move.w	obY(a1),d3
0000A1E2 9668 000C                  		sub.w	obY(a0),d3
0000A1E6 D642                       		add.w	d2,d3
0000A1E8 6B00                       		bmi.s	loc_8B48
0000A1EA 3802                       		move.w	d2,d4
0000A1EC D844                       		add.w	d4,d4
0000A1EE B644                       		cmp.w	d4,d3
0000A1F0 6400                       		bhs.s	loc_8B48
0000A1F2 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A1F6 6B00                       		bmi.s	loc_8B48
0000A1F8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A1FE 6400                       		bhs.s	loc_8B48
0000A200 4A78 FE08                  		tst.w	(v_debuguse).w
0000A204 6600                       		bne.s	loc_8B48
0000A206 3A00                       		move.w	d0,d5
0000A208 B240                       		cmp.w	d0,d1
0000A20A 6400                       		bhs.s	loc_8B30
0000A20C D241                       		add.w	d1,d1
0000A20E 9041                       		sub.w	d1,d0
0000A210 3A00                       		move.w	d0,d5
0000A212 4445                       		neg.w	d5
0000A214                            
0000A214                            loc_8B30:
0000A214 3203                       		move.w	d3,d1
0000A216 B443                       		cmp.w	d3,d2
0000A218 6400                       		bhs.s	loc_8B3C
0000A21A 9644                       		sub.w	d4,d3
0000A21C 3203                       		move.w	d3,d1
0000A21E 4441                       		neg.w	d1
0000A220                            
0000A220                            loc_8B3C:
0000A220 BA41                       		cmp.w	d1,d5
0000A222 6200                       		bhi.s	loc_8B44
0000A224 7801                       		moveq	#1,d4
0000A226 4E75                       		rts	
0000A228                            ; ===========================================================================
0000A228                            
0000A228                            loc_8B44:
0000A228 78FF                       		moveq	#-1,d4
0000A22A 4E75                       		rts	
0000A22C                            ; ===========================================================================
0000A22C                            
0000A22C                            loc_8B48:
0000A22C 7800                       		moveq	#0,d4
0000A22E 4E75                       		rts	
0000A230                            ; End of function Obj44_SolidWall2
0000A230                            
0000A230                            ; ===========================================================================
0000A230                            
0000A230                            		include	"_incObj\1E Ball Hog.asm"
0000A230                            ; ---------------------------------------------------------------------------
0000A230                            ; Object 1E - Ball Hog enemy (SBZ)
0000A230                            ; ---------------------------------------------------------------------------
0000A230                            
0000A230                            BallHog:
0000A230 7000                       		moveq	#0,d0
0000A232 1028 0024                  		move.b	obRoutine(a0),d0
0000A236 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A23A 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A23E                            ; ===========================================================================
0000A23E 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A240 0000                       		dc.w Hog_Action-Hog_Index
0000A242                            
0000A242 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A242                            ; ===========================================================================
0000A242                            
0000A242                            Hog_Main:	; Routine 0
0000A242 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A248 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A24E 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A256 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A25C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A262 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A268 117C 0005 0020             		move.b	#5,obColType(a0)
0000A26E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A274 6100 0000                  		bsr.w	ObjectFall
0000A278 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A27E 4A41                       		tst.w	d1
0000A280 6A00                       		bpl.s	@floornotfound
0000A282 D368 000C                  		add.w	d1,obY(a0)
0000A286 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A28C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A290                            
0000A290                            	@floornotfound:
0000A290 4E75                       		rts	
0000A292                            ; ===========================================================================
0000A292                            
0000A292                            Hog_Action:	; Routine 2
0000A292 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A298 6100 0000                  		bsr.w	AnimateSprite
0000A29C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A2A2 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A2A4 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A2A8 6700                       		beq.s	@makeball	; if yes, branch
0000A2AA 6000                       		bra.s	@remember
0000A2AC                            ; ===========================================================================
0000A2AC                            
0000A2AC                            @setlaunchflag:
0000A2AC 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A2B0                            
0000A2B0                            @remember:
0000A2B0 6000 0000                  		bra.w	RememberState
0000A2B4                            ; ===========================================================================
0000A2B4                            
0000A2B4                            @makeball:
0000A2B4 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A2BA 6100 0000                  		bsr.w	FindFreeObj
0000A2BE 6600                       		bne.s	@fail
0000A2C0 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A2C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A2CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A2D0 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A2D6 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A2DC 70FC                       		moveq	#-4,d0
0000A2DE 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A2E4 6700                       		beq.s	@noflip		; if not, branch
0000A2E6 4440                       		neg.w	d0
0000A2E8 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A2EC                            
0000A2EC                            	@noflip:
0000A2EC D169 0008                  		add.w	d0,obX(a1)
0000A2F0 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A2F6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A2FC                            
0000A2FC                            	@fail:
0000A2FC 60B2                       		bra.s	@remember
0000A2FC 60B2                       		bra.s	@remember
0000A2FE                            		include	"_incObj\20 Cannonball.asm"
0000A2FE                            ; ---------------------------------------------------------------------------
0000A2FE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A2FE                            ; ---------------------------------------------------------------------------
0000A2FE                            
0000A2FE                            Cannonball:
0000A2FE 7000                       		moveq	#0,d0
0000A300 1028 0024                  		move.b	obRoutine(a0),d0
0000A304 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A308 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A30C                            ; ===========================================================================
0000A30C 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A30E 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A310                            
0000A310 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A310                            ; ===========================================================================
0000A310                            
0000A310                            Cbal_Main:	; Routine 0
0000A310 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A314 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A31A 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A322 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A328 117C 0004 0001             		move.b	#4,obRender(a0)
0000A32E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A334 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A33A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A340 7000                       		moveq	#0,d0
0000A342 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A346 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A34A 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A34E 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A354                            
0000A354                            Cbal_Bounce:	; Routine 2
0000A354 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A35A 4A68 0012                  		tst.w	obVelY(a0)
0000A35E 6B00                       		bmi.s	Cbal_ChkExplode
0000A360 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A366 4A41                       		tst.w	d1		; has ball hit the floor?
0000A368 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A36A                            
0000A36A D368 000C                  		add.w	d1,obY(a0)
0000A36E 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A374 4A03                       		tst.b	d3
0000A376 6700                       		beq.s	Cbal_ChkExplode
0000A378 6B00                       		bmi.s	loc_8CA4
0000A37A 4A68 0010                  		tst.w	obVelX(a0)
0000A37E 6A00                       		bpl.s	Cbal_ChkExplode
0000A380 4468 0010                  		neg.w	obVelX(a0)
0000A384 6000                       		bra.s	Cbal_ChkExplode
0000A386                            ; ===========================================================================
0000A386                            
0000A386                            loc_8CA4:
0000A386 4A68 0010                  		tst.w	obVelX(a0)
0000A38A 6B00                       		bmi.s	Cbal_ChkExplode
0000A38C 4468 0010                  		neg.w	obVelX(a0)
0000A390                            
0000A390                            Cbal_ChkExplode:
0000A390 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A394 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A396                            
0000A396                            	Cbal_Explode:
0000A396 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A39A 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A39E 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A3A4 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A3A8                            ; ===========================================================================
0000A3A8                            
0000A3A8                            Cbal_Animate:
0000A3A8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A3AC 6A00                       		bpl.s	Cbal_Display
0000A3AE 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A3B4 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A3BA                            
0000A3BA                            Cbal_Display:
0000A3BA 6100 0000                  		bsr.w	DisplaySprite
0000A3BE 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A3C2 0640 00E0                  		addi.w	#$E0,d0
0000A3C6 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A3CA 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A3CE 4E75                       		rts	
0000A3CE 4E75                       		rts	
0000A3D0                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A3D0                            ; ---------------------------------------------------------------------------
0000A3D0                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A3D0                            ; ---------------------------------------------------------------------------
0000A3D0                            
0000A3D0                            MissileDissolve:
0000A3D0 7000                       		moveq	#0,d0
0000A3D2 1028 0024                  		move.b	obRoutine(a0),d0
0000A3D6 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A3DA 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A3DE                            ; ===========================================================================
0000A3DE 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A3E0 0000                       		dc.w MDis_Animate-MDis_Index
0000A3E2                            ; ===========================================================================
0000A3E2                            
0000A3E2                            MDis_Main:	; Routine 0
0000A3E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3E6 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A3EE 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A3F4 117C 0004 0001             		move.b	#4,obRender(a0)
0000A3FA 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A400 117C 0000 0020             		move.b	#0,obColType(a0)
0000A406 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A40C 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A412 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A422                            
0000A422                            MDis_Animate:	; Routine 2
0000A422 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A426 6A00                       		bpl.s	@display
0000A428 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A42E 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A432 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A438 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A43C                            
0000A43C                            	@display:
0000A43C 6000 0000                  		bra.w	DisplaySprite
0000A440                            ; ===========================================================================
0000A440                            
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            
0000A440                            ExplosionItem:
0000A440 7000                       		moveq	#0,d0
0000A442 1028 0024                  		move.b	obRoutine(a0),d0
0000A446 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A44A 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A44E                            ; ===========================================================================
0000A44E 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A450 0000                       		dc.w ExItem_Main-ExItem_Index
0000A452 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A454                            ; ===========================================================================
0000A454                            
0000A454                            ExItem_Animal:	; Routine 0
0000A454 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A458 6100 0000                  		bsr.w	FindFreeObj
0000A45C 6600                       		bne.s	ExItem_Main
0000A45E 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A462 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A468 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A46E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A474                            
0000A474                            ExItem_Main:	; Routine 2
0000A474 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A478 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A480 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A486 117C 0004 0001             		move.b	#4,obRender(a0)
0000A48C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A492 117C 0000 0020             		move.b	#0,obColType(a0)
0000A498 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A49E 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A4A4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A4B4                            
0000A4B4                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A4B4 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A4B8 6A00                       		bpl.s	@display
0000A4BA 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A4C0 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A4C4 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A4CA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A4CE                            
0000A4CE                            	@display:
0000A4CE 6000 0000                  		bra.w	DisplaySprite
0000A4D2                            ; ===========================================================================
0000A4D2                            ; ---------------------------------------------------------------------------
0000A4D2                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A4D2                            ; ---------------------------------------------------------------------------
0000A4D2                            
0000A4D2                            ExplosionBomb:
0000A4D2 7000                       		moveq	#0,d0
0000A4D4 1028 0024                  		move.b	obRoutine(a0),d0
0000A4D8 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A4DC 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A4E0                            ; ===========================================================================
0000A4E0 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A4E2 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A4E4                            ; ===========================================================================
0000A4E4                            
0000A4E4                            ExBom_Main:	; Routine 0
0000A4E4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4E8 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A4F0 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A4F6 117C 0004 0001             		move.b	#4,obRender(a0)
0000A4FC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A502 117C 0000 0020             		move.b	#0,obColType(a0)
0000A508 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A50E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A514 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A524                            		include	"_anim\Ball Hog.asm"
0000A524                            ; ---------------------------------------------------------------------------
0000A524                            ; Animation script - doors (SBZ)
0000A524                            ; ---------------------------------------------------------------------------
0000A524 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A526 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A53E 00                         		even
0000A53E 00                         		even
0000A53E                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A53E                            ; --------------------------------------------------------------------------------
0000A53E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A53E                            ; --------------------------------------------------------------------------------
0000A53E                            
0000A53E                            SME_ZER01:	
0000A53E 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A542 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A546 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A54A 02                         SME_ZER01_C:	dc.b 2	
0000A54B EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A550 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A555 02                         SME_ZER01_17:	dc.b 2	
0000A556 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A55B FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A560 02                         SME_ZER01_22:	dc.b 2	
0000A561 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A566 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A56B 02                         SME_ZER01_2D:	dc.b 2	
0000A56C E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A571 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A576 01                         SME_ZER01_38:	dc.b 1	
0000A577 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A57C 01                         SME_ZER01_3E:	dc.b 1	
0000A57D F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A582                            		even
0000A582                            		even
0000A582                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A582                            ; ---------------------------------------------------------------------------
0000A582                            ; Sprite mappings - buzz bomber missile vanishing
0000A582                            ; ---------------------------------------------------------------------------
0000A582                            Map_MisDissolve_internal:
0000A582 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A584 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A586 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A588 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A58A 01                         byte_8EAE:	dc.b 1
0000A58B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A590 01                         byte_8EB4:	dc.b 1
0000A591 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A596 01                         byte_8EBA:	dc.b 1
0000A597 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A59C 01                         byte_8EC0:	dc.b 1
0000A59D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A5A2                            		even
0000A5A2                            		even
0000A5A2                            		include	"_maps\Explosions.asm"
0000A5A2                            ; ---------------------------------------------------------------------------
0000A5A2                            ; Sprite mappings - explosion from a badnik or monitor
0000A5A2                            ; ---------------------------------------------------------------------------
0000A5A2 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A5A6 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A5AA 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A5AC 01                         byte_8ED0:	dc.b 1
0000A5AD F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A5B2 01                         byte_8ED6:	dc.b 1
0000A5B3 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A5B8 01                         byte_8EDC:	dc.b 1
0000A5B9 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A5BE 04                         byte_8EE2:	dc.b 4
0000A5BF EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A5C4 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A5C9 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A5CE FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A5D3 04                         byte_8EF7:	dc.b 4
0000A5D4 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A5D9 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A5DE 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A5E3 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A5E8                            		even
0000A5E8                            ; ---------------------------------------------------------------------------
0000A5E8                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A5E8                            ; ---------------------------------------------------------------------------
0000A5E8 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A5EA 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A5EC 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A5EE FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A5F0 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A5F2 01                         byte_8F16:	dc.b 1
0000A5F3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A5F8 01                         byte_8F1C:	dc.b 1
0000A5F9 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A5FE                            		even
0000A5FE                            		even
0000A5FE                            
0000A5FE                            		include	"_incObj\28 Animals.asm"
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            ; Object 28 - animals
0000A5FE                            ; ---------------------------------------------------------------------------
0000A5FE                            
0000A5FE                            Animals:
0000A5FE 7000                       		moveq	#0,d0
0000A600 1028 0024                  		move.b	obRoutine(a0),d0
0000A604 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A608 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A60C                            ; ===========================================================================
0000A60C 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A610 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A614 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A618 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A61C 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A620 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A624 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A628 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A62C 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A630 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A634 0000                       		dc.w loc_92D6-Anml_Index
0000A636                            
0000A636 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A642                            
0000A642 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A646 0000 0000                  		dc.l Map_Animal1
0000A64A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A64E 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A652 FE80 FD00                  		dc.w $FE80, $FD00
0000A656 0000 0000                  		dc.l Map_Animal1
0000A65A FEC0 FE80                  		dc.w $FEC0, $FE80
0000A65E 0000 0000                  		dc.l Map_Animal2
0000A662 FE40 FD00                  		dc.w $FE40, $FD00
0000A666 0000 0000                  		dc.l Map_Animal3
0000A66A FD00 FC00                  		dc.w $FD00, $FC00
0000A66E 0000 0000                  		dc.l Map_Animal2
0000A672 FD80 FC80                  		dc.w $FD80, $FC80
0000A676 0000 0000                  		dc.l Map_Animal3
0000A67A                            
0000A67A FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A68A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A69A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A6A6                            
0000A6A6 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A6BA 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A6CE 0000 0000                  		dc.l Map_Animal3
0000A6D2                            
0000A6D2 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A6E4 0565 05B3                  		dc.w $565, $5B3
0000A6E8                            ; ===========================================================================
0000A6E8                            
0000A6E8                            Anml_Ending:	; Routine 0
0000A6E8 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000A6EC 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000A6F0 7000                       		moveq	#0,d0
0000A6F2 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000A6F6 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A6F8 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000A6FC 0440 0014                  		subi.w	#$14,d0
0000A700 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000A706 D040                       		add.w	d0,d0
0000A708 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000A70E 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000A712 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A718 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000A71E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A724 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000A72A 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A730 117C 0004 0001             		move.b	#4,obRender(a0)
0000A736 08E8 0000 0001             		bset	#0,obRender(a0)
0000A73C 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A742 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A748 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A74E 6000 0000                  		bra.w	DisplaySprite
0000A752                            ; ===========================================================================
0000A752                            
0000A752                            Anml_FromEnemy:
0000A752 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A756 6100 93C4                  		bsr.w	RandomNumber
0000A75A 0240 0001                  		andi.w	#1,d0
0000A75E 7200                       		moveq	#0,d1
0000A760 1238 FE10                  		move.b	(v_zone).w,d1
0000A764 D241                       		add.w	d1,d1
0000A766 D240                       		add.w	d0,d1
0000A768 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000A76C 1031 1000                  		move.b	(a1,d1.w),d0
0000A770 1140 0030                  		move.b	d0,$30(a0)
0000A774 E748                       		lsl.w	#3,d0
0000A776 43FA FECA                  		lea	Anml_Variables(pc),a1
0000A77A D2C0                       		adda.w	d0,a1
0000A77C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A780 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A784 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000A788 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000A78E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A794 6700                       		beq.s	loc_90C0	; if yes, branch
0000A796 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000A79C                            
0000A79C                            loc_90C0:
0000A79C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A7A2 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7A8 08E8 0000 0001             		bset	#0,obRender(a0)
0000A7AE 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A7B4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A7BA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A7C0 117C 0002 001A             		move.b	#2,obFrame(a0)
0000A7C6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000A7CC 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A7D0 6600                       		bne.s	loc_911C
0000A7D2 6100 0000                  		bsr.w	FindFreeObj
0000A7D6 6600                       		bne.s	Anml_Display
0000A7D8 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000A7DC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7E2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A7E8 3028 003E                  		move.w	$3E(a0),d0
0000A7EC E248                       		lsr.w	#1,d0
0000A7EE 1340 001A                  		move.b	d0,obFrame(a1)
0000A7F2                            
0000A7F2                            Anml_Display:
0000A7F2 6000 0000                  		bra.w	DisplaySprite
0000A7F6                            ; ===========================================================================
0000A7F6                            
0000A7F6                            loc_911C:
0000A7F6 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000A7FC 4268 0010                  		clr.w	obVelX(a0)
0000A800 6000 0000                  		bra.w	DisplaySprite
0000A804                            ; ===========================================================================
0000A804                            
0000A804                            loc_912A:
0000A804 4A28 0001                  		tst.b	obRender(a0)
0000A808 6A00 0000                  		bpl.w	DeleteObject
0000A80C 6100 0000                  		bsr.w	ObjectFall
0000A810 4A68 0012                  		tst.w	obVelY(a0)
0000A814 6B00                       		bmi.s	loc_9180
0000A816 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A81C 4A41                       		tst.w	d1
0000A81E 6A00                       		bpl.s	loc_9180
0000A820 D368 000C                  		add.w	d1,obY(a0)
0000A824 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A82A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A830 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A836 1028 0030                  		move.b	$30(a0),d0
0000A83A D000                       		add.b	d0,d0
0000A83C 5800                       		addq.b	#4,d0
0000A83E 1140 0024                  		move.b	d0,obRoutine(a0)
0000A842 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A846 6700                       		beq.s	loc_9180
0000A848 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000A84E 6700                       		beq.s	loc_9180
0000A850 4468 0010                  		neg.w	obVelX(a0)
0000A854 0868 0000 0001             		bchg	#0,obRender(a0)
0000A85A                            
0000A85A                            loc_9180:
0000A85A 6000 0000                  		bra.w	DisplaySprite
0000A85E                            ; ===========================================================================
0000A85E                            
0000A85E                            loc_9184:
0000A85E 6100 0000                  		bsr.w	ObjectFall
0000A862 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A868 4A68 0012                  		tst.w	obVelY(a0)
0000A86C 6B00                       		bmi.s	loc_91AE
0000A86E 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A874 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A87A 4A41                       		tst.w	d1
0000A87C 6A00                       		bpl.s	loc_91AE
0000A87E D368 000C                  		add.w	d1,obY(a0)
0000A882 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A888                            
0000A888                            loc_91AE:
0000A888 4A28 0028                  		tst.b	obSubtype(a0)
0000A88C 6600                       		bne.s	loc_9224
0000A88E 4A28 0001                  		tst.b	obRender(a0)
0000A892 6A00 0000                  		bpl.w	DeleteObject
0000A896 6000 0000                  		bra.w	DisplaySprite
0000A89A                            ; ===========================================================================
0000A89A                            
0000A89A                            loc_91C0:
0000A89A 6100 0000                  		bsr.w	SpeedToPos
0000A89E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A8A4 4A68 0012                  		tst.w	obVelY(a0)
0000A8A8 6B00                       		bmi.s	loc_91FC
0000A8AA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8B0 4A41                       		tst.w	d1
0000A8B2 6A00                       		bpl.s	loc_91FC
0000A8B4 D368 000C                  		add.w	d1,obY(a0)
0000A8B8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A8BE 4A28 0028                  		tst.b	obSubtype(a0)
0000A8C2 6700                       		beq.s	loc_91FC
0000A8C4 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000A8CA 6700                       		beq.s	loc_91FC
0000A8CC 4468 0010                  		neg.w	obVelX(a0)
0000A8D0 0868 0000 0001             		bchg	#0,obRender(a0)
0000A8D6                            
0000A8D6                            loc_91FC:
0000A8D6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A8DA 6A00                       		bpl.s	loc_9212
0000A8DC 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A8E2 5228 001A                  		addq.b	#1,obFrame(a0)
0000A8E6 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A8EC                            
0000A8EC                            loc_9212:
0000A8EC 4A28 0028                  		tst.b	obSubtype(a0)
0000A8F0 6600                       		bne.s	loc_9224
0000A8F2 4A28 0001                  		tst.b	obRender(a0)
0000A8F6 6A00 0000                  		bpl.w	DeleteObject
0000A8FA 6000 0000                  		bra.w	DisplaySprite
0000A8FE                            ; ===========================================================================
0000A8FE                            
0000A8FE                            loc_9224:
0000A8FE 3028 0008                  		move.w	obX(a0),d0
0000A902 9078 D008                  		sub.w	(v_player+obX).w,d0
0000A906 6500                       		bcs.s	loc_923C
0000A908 0440 0180                  		subi.w	#$180,d0
0000A90C 6A00                       		bpl.s	loc_923C
0000A90E 4A28 0001                  		tst.b	obRender(a0)
0000A912 6A00 0000                  		bpl.w	DeleteObject
0000A916                            
0000A916                            loc_923C:
0000A916 6000 0000                  		bra.w	DisplaySprite
0000A91A                            ; ===========================================================================
0000A91A                            
0000A91A                            loc_9240:
0000A91A 4A28 0001                  		tst.b	obRender(a0)
0000A91E 6A00 0000                  		bpl.w	DeleteObject
0000A922 5368 0036                  		subq.w	#1,$36(a0)
0000A926 6600 0000                  		bne.w	loc_925C
0000A92A 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000A930 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A936                            
0000A936                            loc_925C:
0000A936 6000 0000                  		bra.w	DisplaySprite
0000A93A                            ; ===========================================================================
0000A93A                            
0000A93A                            loc_9260:
0000A93A 6100 0000                  		bsr.w	sub_9404
0000A93E 6400                       		bcc.s	loc_927C
0000A940 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A946 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A94C 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000A952 6000 FF46                  		bra.w	loc_91C0
0000A956                            ; ===========================================================================
0000A956                            
0000A956                            loc_927C:
0000A956 6000 FFA6                  		bra.w	loc_9224
0000A95A                            ; ===========================================================================
0000A95A                            
0000A95A                            loc_9280:
0000A95A 6100 0000                  		bsr.w	sub_9404
0000A95E 6A00                       		bpl.s	loc_92B6
0000A960 4268 0010                  		clr.w	obVelX(a0)
0000A964 4268 0032                  		clr.w	$32(a0)
0000A968 6100 0000                  		bsr.w	SpeedToPos
0000A96C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A972 6100 0000                  		bsr.w	loc_93C4
0000A976 6100 0000                  		bsr.w	loc_93EC
0000A97A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A97E 6A00                       		bpl.s	loc_92B6
0000A980 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A986 5228 001A                  		addq.b	#1,obFrame(a0)
0000A98A 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A990                            
0000A990                            loc_92B6:
0000A990 6000 FF6C                  		bra.w	loc_9224
0000A994                            ; ===========================================================================
0000A994                            
0000A994                            loc_92BA:
0000A994 6100 0000                  		bsr.w	sub_9404
0000A998 6A00                       		bpl.s	loc_9310
0000A99A 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A9A0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9A6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000A9AC 6000 FEB0                  		bra.w	loc_9184
0000A9B0                            ; ===========================================================================
0000A9B0                            
0000A9B0                            loc_92D6:
0000A9B0 6100 0000                  		bsr.w	ObjectFall
0000A9B4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A9BA 4A68 0012                  		tst.w	obVelY(a0)
0000A9BE 6B00                       		bmi.s	loc_9310
0000A9C0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9C6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9CC 4A41                       		tst.w	d1
0000A9CE 6A00                       		bpl.s	loc_9310
0000A9D0 4628 0029                  		not.b	$29(a0)
0000A9D4 6600                       		bne.s	loc_9306
0000A9D6 4468 0010                  		neg.w	obVelX(a0)
0000A9DA 0868 0000 0001             		bchg	#0,obRender(a0)
0000A9E0                            
0000A9E0                            loc_9306:
0000A9E0 D368 000C                  		add.w	d1,obY(a0)
0000A9E4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9EA                            
0000A9EA                            loc_9310:
0000A9EA 6000 FF12                  		bra.w	loc_9224
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            loc_9314:
0000A9EE 6100 0000                  		bsr.w	sub_9404
0000A9F2 6A00                       		bpl.s	loc_932E
0000A9F4 4268 0010                  		clr.w	obVelX(a0)
0000A9F8 4268 0032                  		clr.w	$32(a0)
0000A9FC 6100 0000                  		bsr.w	ObjectFall
0000AA00 6100 0000                  		bsr.w	loc_93C4
0000AA04 6100 0000                  		bsr.w	loc_93EC
0000AA08                            
0000AA08                            loc_932E:
0000AA08 6000 FEF4                  		bra.w	loc_9224
0000AA0C                            ; ===========================================================================
0000AA0C                            
0000AA0C                            loc_9332:
0000AA0C 6100 0000                  		bsr.w	sub_9404
0000AA10 6A00                       		bpl.s	loc_936C
0000AA12 6100 0000                  		bsr.w	ObjectFall
0000AA16 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AA1C 4A68 0012                  		tst.w	obVelY(a0)
0000AA20 6B00                       		bmi.s	loc_936C
0000AA22 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA28 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA2E 4A41                       		tst.w	d1
0000AA30 6A00                       		bpl.s	loc_936C
0000AA32 4468 0010                  		neg.w	obVelX(a0)
0000AA36 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA3C D368 000C                  		add.w	d1,obY(a0)
0000AA40 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA46                            
0000AA46                            loc_936C:
0000AA46 6000 FEB6                  		bra.w	loc_9224
0000AA4A                            ; ===========================================================================
0000AA4A                            
0000AA4A                            loc_9370:
0000AA4A 6100 0000                  		bsr.w	sub_9404
0000AA4E 6A00                       		bpl.s	loc_93C0
0000AA50 6100 0000                  		bsr.w	SpeedToPos
0000AA54 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AA5A 4A68 0012                  		tst.w	obVelY(a0)
0000AA5E 6B00                       		bmi.s	loc_93AA
0000AA60 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA66 4A41                       		tst.w	d1
0000AA68 6A00                       		bpl.s	loc_93AA
0000AA6A 4628 0029                  		not.b	$29(a0)
0000AA6E 6600                       		bne.s	loc_93A0
0000AA70 4468 0010                  		neg.w	obVelX(a0)
0000AA74 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA7A                            
0000AA7A                            loc_93A0:
0000AA7A D368 000C                  		add.w	d1,obY(a0)
0000AA7E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA84                            
0000AA84                            loc_93AA:
0000AA84 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AA88 6A00                       		bpl.s	loc_93C0
0000AA8A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AA90 5228 001A                  		addq.b	#1,obFrame(a0)
0000AA94 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AA9A                            
0000AA9A                            loc_93C0:
0000AA9A 6000 FE62                  		bra.w	loc_9224
0000AA9E                            ; ===========================================================================
0000AA9E                            
0000AA9E                            loc_93C4:
0000AA9E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AAA4 4A68 0012                  		tst.w	obVelY(a0)
0000AAA8 6B00                       		bmi.s	locret_93EA
0000AAAA 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAB0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AAB6 4A41                       		tst.w	d1
0000AAB8 6A00                       		bpl.s	locret_93EA
0000AABA D368 000C                  		add.w	d1,obY(a0)
0000AABE 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AAC4                            
0000AAC4                            locret_93EA:
0000AAC4 4E75                       		rts	
0000AAC6                            ; ===========================================================================
0000AAC6                            
0000AAC6                            loc_93EC:
0000AAC6 08E8 0000 0001             		bset	#0,obRender(a0)
0000AACC 3028 0008                  		move.w	obX(a0),d0
0000AAD0 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AAD4 6400                       		bcc.s	locret_9402
0000AAD6 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AADC                            
0000AADC                            locret_9402:
0000AADC 4E75                       		rts	
0000AADE                            
0000AADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AADE                            
0000AADE                            
0000AADE                            sub_9404:
0000AADE 3038 D008                  		move.w	(v_player+obX).w,d0
0000AAE2 9068 0008                  		sub.w	obX(a0),d0
0000AAE6 0440 00B8                  		subi.w	#$B8,d0
0000AAEA 4E75                       		rts	
0000AAEC                            ; End of function sub_9404
0000AAEC                            ; End of function sub_9404
0000AAEC                            		include	"_incObj\29 Points.asm"
0000AAEC                            ; ---------------------------------------------------------------------------
0000AAEC                            ; Object 29 - points that appear when you destroy something
0000AAEC                            ; ---------------------------------------------------------------------------
0000AAEC                            
0000AAEC                            Points:
0000AAEC 7000                       		moveq	#0,d0
0000AAEE 1028 0024                  		move.b	obRoutine(a0),d0
0000AAF2 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AAF6 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AAFA 6000 0000                  		bra.w	DisplaySprite
0000AAFE                            ; ===========================================================================
0000AAFE 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AB00 0000                       		dc.w Poi_Slower-Poi_Index
0000AB02                            ; ===========================================================================
0000AB02                            
0000AB02                            Poi_Main:	; Routine 0
0000AB02 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB06 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AB0E 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000AB14 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB1A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AB20 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB26 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AB2C                            
0000AB2C                            Poi_Slower:	; Routine 2
0000AB2C 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AB30 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AB34 6100 0000                  		bsr.w	SpeedToPos
0000AB38 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AB3E 4E75                       		rts	
0000AB3E 4E75                       		rts	
0000AB40                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40                            ; Sprite mappings - animals
0000AB40                            ; ---------------------------------------------------------------------------
0000AB40                            Map_Animal1_internal:
0000AB40 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AB42 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AB44 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AB46 01                         byte_946C:	dc.b 1
0000AB47 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB4C 01                         byte_9472:	dc.b 1
0000AB4D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AB52 01                         byte_9478:	dc.b 1
0000AB53 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AB58                            		even
0000AB58                            		even
0000AB58                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AB58                            ; ---------------------------------------------------------------------------
0000AB58                            ; Sprite mappings - animals
0000AB58                            ; ---------------------------------------------------------------------------
0000AB58                            Map_Animal2_internal:
0000AB58 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AB5A 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AB5C 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AB5E 01                         byte_9484:	dc.b 1
0000AB5F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB64 01                         byte_948A:	dc.b 1
0000AB65 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AB6A 01                         byte_9490:	dc.b 1
0000AB6B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AB70                            		even
0000AB70                            		even
0000AB70                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            ; Sprite mappings - animals
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            Map_Animal3_internal:
0000AB70 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AB72 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AB74 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AB76 01                         byte_949C:	dc.b 1
0000AB77 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB7C 01                         byte_94A2:	dc.b 1
0000AB7D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AB82 01                         byte_94A8:	dc.b 1
0000AB83 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000AB88                            		even
0000AB88                            		even
0000AB88                            Map_Poi:	include	"_maps\Points.asm"
0000AB88                            ; --------------------------------------------------------------------------------
0000AB88                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AB88                            ; --------------------------------------------------------------------------------
0000AB88                            
0000AB88                            SME_qLvsg:	
0000AB88 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000AB8C 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000AB90 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000AB94 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000AB96 01                         SME_qLvsg_E:	dc.b 1	
0000AB97 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000AB9C 01                         SME_qLvsg_14:	dc.b 1	
0000AB9D FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000ABA2 01                         SME_qLvsg_1A:	dc.b 1	
0000ABA3 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000ABA8 01                         SME_qLvsg_20:	dc.b 1	
0000ABA9 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000ABAE 01                         SME_qLvsg_26:	dc.b 1	
0000ABAF FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000ABB4 02                         SME_qLvsg_2C:	dc.b 2	
0000ABB5 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ABBA FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000ABBF 02                         SME_qLvsg_37:	dc.b 2	
0000ABC0 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ABC5 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000ABCA                            		even
0000ABCA                            		even
0000ABCA                            
0000ABCA                            		include	"_incObj\1F Crabmeat.asm"
0000ABCA                            ; ---------------------------------------------------------------------------
0000ABCA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000ABCA                            ; ---------------------------------------------------------------------------
0000ABCA                            
0000ABCA                            Crabmeat:
0000ABCA 7000                       		moveq	#0,d0
0000ABCC 1028 0024                  		move.b	obRoutine(a0),d0
0000ABD0 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000ABD4 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000ABD8                            ; ===========================================================================
0000ABD8                            Crab_Index:
0000ABD8 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000ABDA 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000ABDC 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000ABDE 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000ABE0 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000ABE2                            
0000ABE2 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000ABE2 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000ABE2 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000ABE2 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000ABE2 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000ABE2                            
0000ABE2 =00000030                  crab_timedelay:	equ $30
0000ABE2 =00000032                  crab_mode:	equ $32
0000ABE2                            ; ===========================================================================
0000ABE2                            
0000ABE2                            Crab_Main:	; Routine 0
0000ABE2 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000ABE8 117C 0008 0017             		move.b	#8,obWidth(a0)
0000ABEE 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000ABF6 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000ABFC 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC02 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AC08 117C 0006 0020             		move.b	#6,obColType(a0)
0000AC0E 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AC14 6100 0000                  		bsr.w	ObjectFall
0000AC18 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AC1E 4A41                       		tst.w	d1
0000AC20 6A00                       		bpl.s	@floornotfound
0000AC22 D368 000C                  		add.w	d1,obY(a0)
0000AC26 1143 0026                  		move.b	d3,obAngle(a0)
0000AC2A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AC30 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AC34                            
0000AC34                            	@floornotfound:
0000AC34 4E75                       		rts	
0000AC36                            ; ===========================================================================
0000AC36                            
0000AC36                            Crab_Action:	; Routine 2
0000AC36 7000                       		moveq	#0,d0
0000AC38 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AC3C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AC40 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AC44 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AC4A 6100 0000                  		bsr.w	AnimateSprite
0000AC4E 6000 0000                  		bra.w	RememberState
0000AC52                            ; ===========================================================================
0000AC52 0000                       @index:		dc.w @waittofire-@index
0000AC54 0000                       		dc.w @walkonfloor-@index
0000AC56                            ; ===========================================================================
0000AC56                            
0000AC56                            @waittofire:
0000AC56 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AC5A 6A00                       		bpl.s	@dontmove
0000AC5C 4A28 0001                  		tst.b	obRender(a0)
0000AC60 6A00                       		bpl.s	@movecrab
0000AC62 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AC68 6600                       		bne.s	@fire
0000AC6A                            
0000AC6A                            	@movecrab:
0000AC6A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AC6E 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AC74 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AC7A 6100 0000                  		bsr.w	Crab_SetAni
0000AC7E 5600                       		addq.b	#3,d0
0000AC80 1140 001C                  		move.b	d0,obAnim(a0)
0000AC84 0868 0000 0022             		bchg	#0,obStatus(a0)
0000AC8A 6600                       		bne.s	@noflip
0000AC8C 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000AC90                            
0000AC90                            	@dontmove:
0000AC90                            	@noflip:
0000AC90 4E75                       		rts	
0000AC92                            ; ===========================================================================
0000AC92                            
0000AC92                            @fire:
0000AC92 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AC98 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000AC9E 6100 0000                  		bsr.w	FindFreeObj
0000ACA2 6600                       		bne.s	@failleft
0000ACA4 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000ACA8 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ACAE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ACB4 0469 0010 0008             		subi.w	#$10,obX(a1)
0000ACBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ACC0 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000ACC6                            
0000ACC6                            	@failleft:
0000ACC6 6100 0000                  		bsr.w	FindFreeObj
0000ACCA 6600                       		bne.s	@failright
0000ACCC 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000ACD0 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ACD6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ACDC 0669 0010 0008             		addi.w	#$10,obX(a1)
0000ACE2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ACE8 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000ACEE                            
0000ACEE                            	@failright:
0000ACEE 4E75                       		rts	
0000ACF0                            ; ===========================================================================
0000ACF0                            
0000ACF0                            @walkonfloor:
0000ACF0 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000ACF4 6B00                       		bmi.s	loc_966E
0000ACF6 6100 0000                  		bsr.w	SpeedToPos
0000ACFA 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000AD00 6600                       		bne.s	loc_9654
0000AD02 3628 0008                  		move.w	obX(a0),d3
0000AD06 0643 0010                  		addi.w	#$10,d3
0000AD0A 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD10 6700                       		beq.s	loc_9640
0000AD12 0443 0020                  		subi.w	#$20,d3
0000AD16                            
0000AD16                            loc_9640:
0000AD16 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000AD1C 0C41 FFF8                  		cmpi.w	#-8,d1
0000AD20 6D00                       		blt.s	loc_966E
0000AD22 0C41 000C                  		cmpi.w	#$C,d1
0000AD26 6C00                       		bge.s	loc_966E
0000AD28 4E75                       		rts	
0000AD2A                            ; ===========================================================================
0000AD2A                            
0000AD2A                            loc_9654:
0000AD2A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD30 D368 000C                  		add.w	d1,obY(a0)
0000AD34 1143 0026                  		move.b	d3,obAngle(a0)
0000AD38 6100 0000                  		bsr.w	Crab_SetAni
0000AD3C 5600                       		addq.b	#3,d0
0000AD3E 1140 001C                  		move.b	d0,obAnim(a0)
0000AD42 4E75                       		rts	
0000AD44                            ; ===========================================================================
0000AD44                            
0000AD44                            loc_966E:
0000AD44 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000AD48 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AD4E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000AD54 6100 0000                  		bsr.w	Crab_SetAni
0000AD58 1140 001C                  		move.b	d0,obAnim(a0)
0000AD5C 4E75                       		rts	
0000AD5E                            ; ---------------------------------------------------------------------------
0000AD5E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000AD5E                            ; ---------------------------------------------------------------------------
0000AD5E                            
0000AD5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD5E                            
0000AD5E                            
0000AD5E                            Crab_SetAni:
0000AD5E 7000                       		moveq	#0,d0
0000AD60 1628 0026                  		move.b	obAngle(a0),d3
0000AD64 6B00                       		bmi.s	loc_96A4
0000AD66 0C03 0006                  		cmpi.b	#6,d3
0000AD6A 6500                       		bcs.s	locret_96A2
0000AD6C 7001                       		moveq	#1,d0
0000AD6E 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD74 6600                       		bne.s	locret_96A2
0000AD76 7002                       		moveq	#2,d0
0000AD78                            
0000AD78                            locret_96A2:
0000AD78 4E75                       		rts	
0000AD7A                            ; ===========================================================================
0000AD7A                            
0000AD7A                            loc_96A4:
0000AD7A 0C03 00FA                  		cmpi.b	#-6,d3
0000AD7E 6200                       		bhi.s	locret_96B6
0000AD80 7002                       		moveq	#2,d0
0000AD82 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD88 6600                       		bne.s	locret_96B6
0000AD8A 7001                       		moveq	#1,d0
0000AD8C                            
0000AD8C                            locret_96B6:
0000AD8C 4E75                       		rts	
0000AD8E                            ; End of function Crab_SetAni
0000AD8E                            
0000AD8E                            ; ===========================================================================
0000AD8E                            
0000AD8E                            Crab_Delete:	; Routine 4
0000AD8E 6100 0000                  		bsr.w	DeleteObject
0000AD92 4E75                       		rts	
0000AD94                            ; ===========================================================================
0000AD94                            ; ---------------------------------------------------------------------------
0000AD94                            ; Sub-object - missile that the	Crabmeat throws
0000AD94                            ; ---------------------------------------------------------------------------
0000AD94                            
0000AD94                            Crab_BallMain:	; Routine 6
0000AD94 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AD98 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000ADA0 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000ADA6 117C 0004 0001             		move.b	#4,obRender(a0)
0000ADAC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ADB2 117C 0087 0020             		move.b	#$87,obColType(a0)
0000ADB8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ADBE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000ADC4 117C 0007 001C             		move.b	#7,obAnim(a0)
0000ADCA                            
0000ADCA                            Crab_BallMove:	; Routine 8
0000ADCA 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000ADD0 6100 0000                  		bsr.w	AnimateSprite
0000ADD4 6100 0000                  		bsr.w	ObjectFall
0000ADD8 6100 0000                  		bsr.w	DisplaySprite
0000ADDC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000ADE0 0640 00E0                  		addi.w	#$E0,d0
0000ADE4 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000ADE8 6500                       		bcs.s	@delete		; if yes, branch
0000ADEA 4E75                       		rts	
0000ADEC                            
0000ADEC                            	@delete:
0000ADEC 6000 0000                  		bra.w	DeleteObject
0000ADEC 6000 0000                  		bra.w	DeleteObject
0000ADF0                            		include	"_anim\Crabmeat.asm"
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0                            ; Animation script - Crabmeat enemy
0000ADF0                            ; ---------------------------------------------------------------------------
0000ADF0 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000ADF6 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000ADFC 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000AE00 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000AE04 00                         		even
0000AE04 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000AE08 00                         		even
0000AE08 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000AE0C 00                         		even
0000AE0C 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000AE12 00                         		even
0000AE12 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000AE18 00                         		even
0000AE18 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000AE1E 00                         		even
0000AE1E 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000AE22 00                         		even
0000AE22 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000AE26                            		even
0000AE26                            		even
0000AE26                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000AE26                            ; ---------------------------------------------------------------------------
0000AE26                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AE26                            ; ---------------------------------------------------------------------------
0000AE26                            Map_Crab_internal:
0000AE26 0000                       		dc.w @stand-Map_Crab_internal
0000AE28 0000                       		dc.w @walk-Map_Crab_internal
0000AE2A 0000                       		dc.w @slope1-Map_Crab_internal
0000AE2C 0000                       		dc.w @slope2-Map_Crab_internal
0000AE2E 0000                       		dc.w @firing-Map_Crab_internal
0000AE30 0000                       		dc.w @ball1-Map_Crab_internal
0000AE32 0000                       		dc.w @ball2-Map_Crab_internal
0000AE34 04                         @stand:		dc.b 4
0000AE35 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000AE3A F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AE3F 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AE44 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AE49 04                         @walk:		dc.b 4
0000AE4A F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000AE4F F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AE54 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AE59 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AE5E 04                         @slope1:	dc.b 4
0000AE5F EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000AE64 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AE69 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AE6E FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AE73 04                         @slope2:	dc.b 4
0000AE74 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000AE79 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AE7E FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AE83 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AE88 06                         @firing:	dc.b 6
0000AE89 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000AE8E F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AE93 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AE98 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AE9D 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AEA2 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AEA7 01                         @ball1:		dc.b 1
0000AEA8 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000AEAD 01                         @ball2:		dc.b 1
0000AEAE F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000AEB4 00                         		even
0000AEB4 00                         		even
0000AEB4                            		include	"_incObj\06 Mozzietron.asm"
0000AEB4                            ; ===========================================================================
0000AEB4                            ; ---------------------------------------------------------------------------
0000AEB4                            ; Object 06 - Mozzietron enemy	(GHZ)
0000AEB4                            ; ---------------------------------------------------------------------------
0000AEB4                            
0000AEB4                            Mozzietron:					; XREF: Obj_Index
0000AEB4 7000                       		moveq	#0,d0
0000AEB6 1028 0024                  		move.b	$24(a0),d0
0000AEBA 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000AEBE 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000AEC2                            ; ===========================================================================
0000AEC2 0000                       MozIndex:	dc.w MozMain-MozIndex
0000AEC4 0000                       		dc.w MozAction-MozIndex
0000AEC6 0000                       		dc.w MozDelete-MozIndex
0000AEC8                            ; ===========================================================================
0000AEC8                            
0000AEC8                            MozMain:				; XREF: MozIndex
0000AEC8 5428 0024                  		addq.b	#2,$24(a0)
0000AECC 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000AED4 317C 0444 0002             		move.w	#$444,2(a0)
0000AEDA 117C 0004 0001             		move.b	#4,1(a0)
0000AEE0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AEE6 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000AEEC 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000AEF2                            MozAction:				; XREF: MozIndex
0000AEF2 7000                       		moveq	#0,d0
0000AEF4 1028 0025                  		move.b	$25(a0),d0
0000AEF8 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000AEFC 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000AF00 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000AF06 6100 0000                  		bsr.w	AnimateSprite
0000AF0A 6000 0000                  		bra.w	RememberState
0000AF0E                            ; ===========================================================================
0000AF0E 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000AF10 0000                       		dc.w MozChkNrSonic-MozIndex2
0000AF12 0000                       		dc.w MozPinned-MozIndex2
0000AF14                            ; ===========================================================================
0000AF14                            
0000AF14                            MozMove:				; XREF: MozIndex2
0000AF14 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF18 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AF1A 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AF20 6600                       		bne.s	MozFire	; if yes, branch
0000AF22 5428 0025                  		addq.b	#2,$25(a0)
0000AF26 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000AF2C 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000AF32 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000AF38 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AF3E 6600                       		bne.s	locret_986C	; if not, branch
0000AF40 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AF44                            
0000AF44                            locret_986C:
0000AF44 4E75                       		rts	
0000AF46                            ; ===========================================================================
0000AF46                            
0000AF46                            MozFire:				; XREF: MozMove
0000AF46 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000AF4C 6100 0000                  		bsr.w	ObjectFall
0000AF50 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000AF56 4A41                       		tst.w	d1 ; is floor distance positive? 
0000AF58 6A00                       		bpl.s   @return ; if yes, branch 
0000AF5A 303C 00B6                  		move.w    #$B6,d0
0000AF5E 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000AF64 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000AF6A D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000AF6E 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000AF72 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000AF76                            		@return:
0000AF76 4E75                       	    		rts
0000AF78                            		
0000AF78                            
0000AF78                            ; ===========================================================================
0000AF78                            
0000AF78                            MozPinned:
0000AF78 4E75                               rts
0000AF7A                                    
0000AF7A                            ; ===========================================================================
0000AF7A                            
0000AF7A                            MozChkDel:				; XREF: Obj55_DropFly
0000AF7A 4A28 0001                  		tst.b	1(a0)
0000AF7E 6A00 0000                  		bpl.w	DeleteObject
0000AF82 4E75                       		rts	
0000AF84                            ; ===========================================================================
0000AF84                            
0000AF84                            MozChkNrSonic:			; XREF: MozIndex2
0000AF84                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF84 6B00                       		bmi.s	MozChgDir
0000AF86 6100 0000                  		bsr.w	SpeedToPos
0000AF8A 4A28 0034                  		tst.b	$34(a0)
0000AF8E 6600                       		bne.s	locret_992A
0000AF90 3038 D008                  		move.w	($FFFFD008).w,d0
0000AF94 9068 0008                  		sub.w	8(a0),d0
0000AF98 6A00                       		bpl.s	MozSetNrSonic
0000AF9A 4440                       		neg.w	d0
0000AF9C                            
0000AF9C                            MozSetNrSonic:
0000AF9C 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000AFA0 6400                       		bcc.s	locret_992A	; if not, branch
0000AFA2 4A28 0001                  		tst.b	1(a0)
0000AFA6 6A00                       		bpl.s	locret_992A
0000AFA8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AFAE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AFB4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AFBA 6000                       		bra.s	MozStop
0000AFBC                            ; ===========================================================================
0000AFBC                            
0000AFBC                            MozChgDir:				; XREF: MozChkNrSonic
0000AFBC 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AFC2 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AFC8 317C 003B 0032             		move.w	#59,$32(a0)
0000AFCE                            
0000AFCE                            MozStop:				; XREF: MozSetNrSonic
0000AFCE 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000AFD2 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AFD8 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AFDE                            
0000AFDE                            locret_992A:
0000AFDE 4E75                       		rts	
0000AFE0                            ; ===========================================================================
0000AFE0                            
0000AFE0                            MozDelete:				; XREF: MozIndex
0000AFE0 6100 0000                  		bsr.w	DeleteObject
0000AFE4 4E75                       		rts	
0000AFE4 4E75                       		rts	
0000AFE6                            		include	"_incObj\22 Buzz Bomber.asm"
0000AFE6                            ; ===========================================================================
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            
0000AFE6                            BuzzBomber:
0000AFE6 7000                       		moveq	#0,d0
0000AFE8 1028 0024                  		move.b	obRoutine(a0),d0
0000AFEC 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000AFF0 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000AFF4                            ; ===========================================================================
0000AFF4 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000AFF6 0000                       		dc.w Buzz_Action-Buzz_Index
0000AFF8 0000                       		dc.w Buzz_Delete-Buzz_Index
0000AFFA                            
0000AFFA =00000032                  buzz_timedelay:	equ $32
0000AFFA =00000034                  buzz_buzzstatus:	equ $34
0000AFFA =0000003C                  buzz_parent:	equ $3C
0000AFFA                            ; ===========================================================================
0000AFFA                            
0000AFFA                            Buzz_Main:	; Routine 0
0000AFFA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AFFE 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B006 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B00C 117C 0004 0001             		move.b	#4,obRender(a0)
0000B012 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B018 117C 0008 0020             		move.b	#8,obColType(a0)
0000B01E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B024                            
0000B024                            Buzz_Action:	; Routine 2
0000B024 7000                       		moveq	#0,d0
0000B026 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B02A 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B02E 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B032 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B038 6100 0000                  		bsr.w	AnimateSprite
0000B03C 6000 0000                  		bra.w	RememberState
0000B040                            ; ===========================================================================
0000B040 0000                       @index:		dc.w @move-@index
0000B042 0000                       		dc.w @chknearsonic-@index
0000B044                            ; ===========================================================================
0000B044                            
0000B044                            @move:
0000B044 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B048 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B04A 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B050 6600                       		bne.s	@fire		; if yes, branch
0000B052 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B056 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B05C 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B062 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B068 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B06E 6600                       		bne.s	@noflip		; if not, branch
0000B070 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B074                            
0000B074                            	@noflip:
0000B074 4E75                       		rts	
0000B076                            ; ===========================================================================
0000B076                            
0000B076                            	@fire:
0000B076 6100 0000                  		bsr.w	FindFreeObj
0000B07A 6600                       		bne.s	@fail
0000B07C 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B080 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B086 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B08C 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B092 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B098 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B09E 303C 0018                  		move.w	#$18,d0
0000B0A2 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B0A8 6600                       		bne.s	@noflip2	; if not, branch
0000B0AA 4440                       		neg.w	d0
0000B0AC 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B0B0                            
0000B0B0                            	@noflip2:
0000B0B0 D169 0008                  		add.w	d0,obX(a1)
0000B0B4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B0BA 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B0C0 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B0C4 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B0CA 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B0D0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B0D6                            
0000B0D6                            	@fail:
0000B0D6 4E75                       		rts	
0000B0D8                            ; ===========================================================================
0000B0D8                            
0000B0D8                            @chknearsonic:
0000B0D8 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B0DC 6B00                       		bmi.s	@chgdirection
0000B0DE 6100 0000                  		bsr.w	SpeedToPos
0000B0E2 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B0E6 6600                       		bne.s	@keepgoing
0000B0E8 3038 D008                  		move.w	(v_player+obX).w,d0
0000B0EC 9068 0008                  		sub.w	obX(a0),d0
0000B0F0 6A00                       		bpl.s	@isleft
0000B0F2 4440                       		neg.w	d0
0000B0F4                            
0000B0F4                            	@isleft:
0000B0F4 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B0F8 6400                       		bcc.s	@keepgoing	; if not, branch
0000B0FA 4A28 0001                  		tst.b	obRender(a0)
0000B0FE 6A00                       		bpl.s	@keepgoing
0000B100 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B106 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B10C 6000                       		bra.s	@stop
0000B10E                            ; ===========================================================================
0000B10E                            
0000B10E                            	@chgdirection:
0000B10E 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B114 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B11A 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B120                            
0000B120                            	@stop:
0000B120 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B124 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B12A 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B130                            
0000B130                            @keepgoing:
0000B130 4E75                       		rts	
0000B132                            ; ===========================================================================
0000B132                            
0000B132                            Buzz_Delete:	; Routine 4
0000B132 6100 0000                  		bsr.w	DeleteObject
0000B136 4E75                       		rts	
0000B136 4E75                       		rts	
0000B138                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B138                            ; ---------------------------------------------------------------------------
0000B138                            ; Object 23 - missile that Buzz	Bomber throws
0000B138                            ; ---------------------------------------------------------------------------
0000B138                            
0000B138                            Missile:
0000B138 7000                       		moveq	#0,d0
0000B13A 1028 0024                  		move.b	obRoutine(a0),d0
0000B13E 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B142 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B146                            ; ===========================================================================
0000B146 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B148 0000                       		dc.w Msl_Animate-Msl_Index
0000B14A 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B14C 0000                       		dc.w Msl_Delete-Msl_Index
0000B14E 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B150                            
0000B150 =0000003C                  msl_parent:	equ $3C
0000B150                            ; ===========================================================================
0000B150                            
0000B150                            Msl_Main:	; Routine 0
0000B150 5368 0032                  		subq.w	#1,$32(a0)
0000B154 6A00                       		bpl.s	Msl_ChkCancel
0000B156 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B15A 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B162 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B168 117C 0004 0001             		move.b	#4,obRender(a0)
0000B16E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B174 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B17A 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B180 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B184 6700                       		beq.s	Msl_Animate	; if not, branch
0000B186                            
0000B186 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B18C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B192 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B198 6000                       		bra.s	Msl_Animate2
0000B19A                            ; ===========================================================================
0000B19A                            
0000B19A                            Msl_Animate:	; Routine 2
0000B19A 6100                       		bsr.s	Msl_ChkCancel
0000B19C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B1A2 6100 0000                  		bsr.w	AnimateSprite
0000B1A6 6000 0000                  		bra.w	DisplaySprite
0000B1AA                            
0000B1AA                            ; ---------------------------------------------------------------------------
0000B1AA                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B1AA                            ; destroyed, and if it has, then cancel	the missile
0000B1AA                            ; ---------------------------------------------------------------------------
0000B1AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1AA                            
0000B1AA                            
0000B1AA                            Msl_ChkCancel:
0000B1AA 2268 003C                  		movea.l	msl_parent(a0),a1
0000B1AE 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B1B2 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B1B4 4E75                       		rts	
0000B1B6                            ; End of function Msl_ChkCancel
0000B1B6                            
0000B1B6                            ; ===========================================================================
0000B1B6                            
0000B1B6                            Msl_FromBuzz:	; Routine 4
0000B1B6 0828 0007 0022             		btst	#7,obStatus(a0)
0000B1BC 6600                       		bne.s	@explode
0000B1BE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1C4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B1CA 6100 0000                  		bsr.w	SpeedToPos
0000B1CE 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B1D4 6100 0000                  		bsr.w	AnimateSprite
0000B1D8 6100 0000                  		bsr.w	DisplaySprite
0000B1DC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B1E0 0640 00E0                  		addi.w	#$E0,d0
0000B1E4 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B1E8 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B1EA 4E75                       		rts	
0000B1EC                            ; ===========================================================================
0000B1EC                            
0000B1EC                            	@explode:
0000B1EC 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B1F0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B1F6 6000 F1D8                  		bra.w	MissileDissolve
0000B1FA                            ; ===========================================================================
0000B1FA                            
0000B1FA                            Msl_Delete:	; Routine 6
0000B1FA 6100 0000                  		bsr.w	DeleteObject
0000B1FE 4E75                       		rts	
0000B200                            ; ===========================================================================
0000B200                            
0000B200                            Msl_FromNewt:	; Routine 8
0000B200 4A28 0001                  		tst.b	obRender(a0)
0000B204 6AF4                       		bpl.s	Msl_Delete
0000B206 6100 0000                  		bsr.w	SpeedToPos
0000B20A                            
0000B20A                            Msl_Animate2:
0000B20A 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B210 6100 0000                  		bsr.w	AnimateSprite
0000B214 6100 0000                  		bsr.w	DisplaySprite
0000B218 4E75                       		rts	
0000B218 4E75                       		rts	
0000B21A                            		include	"_anim\Mozzietron.asm"
0000B21A                            ; ---------------------------------------------------------------------------
0000B21A                            ; Animation script - Buzz Bomber enemy
0000B21A                            ; ---------------------------------------------------------------------------
0000B21A 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B21C 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B21E 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B220 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B224 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B228 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B230 00                         		even
0000B230 00                         		even
0000B230                            		include	"_anim\Buzz Bomber.asm"
0000B230                            ; ---------------------------------------------------------------------------
0000B230                            ; Animation script - Buzz Bomber enemy
0000B230                            ; ---------------------------------------------------------------------------
0000B230 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B232 0000                       		dc.w @fly2-Ani_Buzz
0000B234 0000                       		dc.w @fires-Ani_Buzz
0000B236 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B23A 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B23E 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B242                            		even
0000B242                            		even
0000B242                            		include	"_anim\Buzz Bomber Missile.asm"
0000B242                            ; ---------------------------------------------------------------------------
0000B242                            ; Animation script - missile that Buzz Bomber throws
0000B242                            ; ---------------------------------------------------------------------------
0000B242 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B244 0000                       		dc.w @missile-Ani_Missile
0000B246 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B24A 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B24E                            		even
0000B24E                            		even
0000B24E                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B24E                            ; --------------------------------------------------------------------------------
0000B24E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B24E                            ; --------------------------------------------------------------------------------
0000B24E                            
0000B24E                            SME_qvHIs:	
0000B24E 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B252 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B256 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B25A 02                         SME_qvHIs_C:	dc.b 2	
0000B25B FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B260 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B265 01                         SME_qvHIs_17:	dc.b 1	
0000B266 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B26B 02                         SME_qvHIs_1D:	dc.b 2	
0000B26C E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B271 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B276 03                         SME_qvHIs_28:	dc.b 3	
0000B277 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B27C E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B281 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B286 04                         SME_qvHIs_38:	dc.b 4	
0000B287 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B28C F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B291 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B296 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B29B 04                         SME_qvHIs_4D:	dc.b 4	
0000B29C E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B2A1 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B2A6 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B2AB F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B2B0                            		even
0000B2B0                            		even
0000B2B0                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B2B0                            ; --------------------------------------------------------------------------------
0000B2B0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B2B0                            ; --------------------------------------------------------------------------------
0000B2B0                            
0000B2B0                            SME_yccqJ:	
0000B2B0 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B2B4 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B2B8 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B2BC 06                         SME_yccqJ_C:	dc.b 6	
0000B2BD F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B2C2 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B2C7 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B2CC 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B2D1 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B2D6 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B2DB 06                         SME_yccqJ_2B:	dc.b 6	
0000B2DC F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B2E1 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B2E6 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B2EB 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B2F0 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B2F5 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B2FA 06                         SME_yccqJ_4A:	dc.b 6	
0000B2FB F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B300 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B305 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B30A 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B30F EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B314 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B319 06                         SME_yccqJ_69:	dc.b 6	
0000B31A F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B31F F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B324 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B329 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B32E F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B333 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B338 07                         SME_yccqJ_88:	dc.b 7	
0000B339 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B33E 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B343 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B348 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B34D 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B352 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B357 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B35C 04                         SME_yccqJ_AC:	dc.b 4	
0000B35D F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B362 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B367 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B36C 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B372 00                         		even
0000B372 00                         		even
0000B372                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B372                            ; ---------------------------------------------------------------------------
0000B372                            ; Sprite mappings - missile that Buzz Bomber throws
0000B372                            ; ---------------------------------------------------------------------------
0000B372                            Map_Missile_internal:
0000B372 0000                       		dc.w @Flare1-Map_Missile_internal
0000B374 0000                       		dc.w @Flare2-Map_Missile_internal
0000B376 0000                       		dc.w @Ball1-Map_Missile_internal
0000B378 0000                       		dc.w @Ball2-Map_Missile_internal
0000B37A 01                         @Flare1:	dc.b 1
0000B37B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B380 01                         @Flare2:	dc.b 1
0000B381 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B386 01                         @Ball1:		dc.b 1
0000B387 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B38C 01                         @Ball2:		dc.b 1
0000B38D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B392                            		even
0000B392                            		even
0000B392                            
0000B392                            		include	"_incObj\25 & 37 Rings.asm"
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            ; Object 25 - rings
0000B392                            ; ---------------------------------------------------------------------------
0000B392                            
0000B392                            Rings:
0000B392 7000                       		moveq	#0,d0
0000B394 1028 0024                  		move.b	obRoutine(a0),d0
0000B398 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B39C 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B3A0                            ; ===========================================================================
0000B3A0                            Ring_Index:
0000B3A0 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B3A2 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B3A4 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B3A6 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B3A8 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B3AA 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B3AC 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B3AE 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B3B0 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B3B2                            
0000B3B2 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B3B2 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B3B2 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B3B2 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B3B2 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B3B2 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B3B2 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B3B2 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B3B2 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B3B2                            ; ---------------------------------------------------------------------------
0000B3B2                            ; Distances between rings (format: horizontal, vertical)
0000B3B2                            ; ---------------------------------------------------------------------------
0000B3B2 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B3B4 1800                       		dc.b $18, 0		; horizontal normal
0000B3B6 2000                       		dc.b $20, 0		; horizontal wide
0000B3B8 0010                       		dc.b 0,	$10		; vertical tight
0000B3BA 0018                       		dc.b 0,	$18		; vertical normal
0000B3BC 0020                       		dc.b 0,	$20		; vertical wide
0000B3BE 1010                       		dc.b $10, $10		; diagonal
0000B3C0 1818                       		dc.b $18, $18
0000B3C2 2020                       		dc.b $20, $20
0000B3C4 F010                       		dc.b $F0, $10
0000B3C6 E818                       		dc.b $E8, $18
0000B3C8 E020                       		dc.b $E0, $20
0000B3CA 1008                       		dc.b $10, 8
0000B3CC 1810                       		dc.b $18, $10
0000B3CE F008                       		dc.b $F0, 8
0000B3D0 E810                       		dc.b $E8, $10
0000B3D2                            ; ===========================================================================
0000B3D2                            
0000B3D2                            Ring_Main:	; Routine 0
0000B3D2 45F8 FC00                  		lea	(v_objstate).w,a2
0000B3D6 7000                       		moveq	#0,d0
0000B3D8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B3DC 45F2 0002                  		lea	2(a2,d0.w),a2
0000B3E0 1812                       		move.b	(a2),d4
0000B3E2 1228 0028                  		move.b	obSubtype(a0),d1
0000B3E6 1001                       		move.b	d1,d0
0000B3E8 0241 0007                  		andi.w	#7,d1
0000B3EC 0C41 0007                  		cmpi.w	#7,d1
0000B3F0 6600                       		bne.s	loc_9B80
0000B3F2 7206                       		moveq	#6,d1
0000B3F4                            
0000B3F4                            	loc_9B80:
0000B3F4 4841                       		swap	d1
0000B3F6 323C 0000                  		move.w	#0,d1
0000B3FA E808                       		lsr.b	#4,d0
0000B3FC D040                       		add.w	d0,d0
0000B3FE 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B402 4885                       		ext.w	d5
0000B404 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B408 4886                       		ext.w	d6
0000B40A 2248                       		movea.l	a0,a1
0000B40C 3428 0008                  		move.w	obX(a0),d2
0000B410 3628 000C                  		move.w	obY(a0),d3
0000B414 E20C                       		lsr.b	#1,d4
0000B416 6500                       		bcs.s	loc_9C02
0000B418 0892 0007                  		bclr	#7,(a2)
0000B41C 6000                       		bra.s	loc_9BBA
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            Ring_MakeRings:
0000B41E 4841                       		swap	d1
0000B420 E20C                       		lsr.b	#1,d4
0000B422 6500                       		bcs.s	loc_9C02
0000B424 0892 0007                  		bclr	#7,(a2)
0000B428 6100 0000                  		bsr.w	FindFreeObj
0000B42C 6600                       		bne.s	loc_9C0E
0000B42E                            
0000B42E                            loc_9BBA:
0000B42E 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B432 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B436 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B43A 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B440 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B444 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B44C 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B452 137C 0004 0001             		move.b	#4,obRender(a1)
0000B458 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B45E 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B464 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B46A 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B470 1341 0034                  		move.b	d1,$34(a1)
0000B474                            
0000B474                            loc_9C02:
0000B474 5241                       		addq.w	#1,d1
0000B476 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B478 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B47A 4841                       		swap	d1
0000B47C 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B480                            
0000B480                            loc_9C0E:
0000B480 0812 0000                  		btst	#0,(a2)
0000B484 6600 0000                  		bne.w	DeleteObject
0000B488                            
0000B488                            Ring_Animate:	; Routine 2
0000B488 4A38 FE2C                  		tst.b	(v_shield).w
0000B48C 6700                       		beq.s	@skip
0000B48E 4A28 0001                  		tst.b	obRender(a0)
0000B492 6A00                       		bpl.s	@skip
0000B494                            		
0000B494 43F8 D000                  		lea (v_player).w,a1
0000B498                            		
0000B498 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B49C 9068 0008                  		sub.w	obX(a0),d0
0000B4A0 6A00                       		bpl.s	@a1
0000B4A2 4440                       		neg.w	d0
0000B4A4                            		
0000B4A4                            	@a1:
0000B4A4 0C40 0040                  		cmpi.w	#$40,d0
0000B4A8 6200                       		bhi.s	@skip
0000B4AA                            		
0000B4AA 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B4AE 9068 000C                  		sub.w	obY(a0),d0
0000B4B2 6A00                       		bpl.s	@a2
0000B4B4 4440                       		neg.w	d0
0000B4B6                            		
0000B4B6                            	@a2:
0000B4B6 0C40 0040                  		cmpi.w	#$40,d0
0000B4BA 6200                       		bhi.s	@skip
0000B4BC                            		
0000B4BC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B4C2 45F8 FC00                  		lea	(v_objstate).w,a2
0000B4C6 7000                       		moveq	#0,d0
0000B4C8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B4CC 1228 0034                  		move.b	$34(a0),d1
0000B4D0 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B4D4                            		
0000B4D4                            	@skip:
0000B4D4 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B4DA 6100 0000                  		bsr.w	DisplaySprite
0000B4FA 4E75                       		rts	
0000B4FC                            ; ===========================================================================
0000B4FC                            
0000B4FC                            Ring_Collect:	; Routine 4
0000B4FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B500 117C 0000 0020             		move.b	#0,obColType(a0)
0000B506 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B50C 6100 0000                  		bsr.w	CollectRing
0000B510 45F8 FC00                  		lea	(v_objstate).w,a2
0000B514 7000                       		moveq	#0,d0
0000B516 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B51A 1228 0034                  		move.b	$34(a0),d1
0000B51E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B522                            
0000B522                            Ring_Sparkle:	; Routine 6
0000B522 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B528 6100 0000                  		bsr.w	AnimateSprite
0000B52C 6000 0000                  		bra.w	DisplaySprite
0000B530                            ; ===========================================================================
0000B530                            
0000B530                            Ring_Delete:	; Routine 8
0000B530 6000 0000                  		bra.w	DeleteObject
0000B534                            
0000B534                            Ring_Attract:	; Routine $A
0000B534 4A38 FE2C                  		tst.b	(v_shield).w
0000B538 6600                       		bne.s	@skip
0000B53A 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B53E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B544 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B54A 6000                       		bra.s	@display
0000B54C                            		
0000B54C                            	@skip:
0000B54C 323C 0030                  		move.w	#$30,d1	; horizontal
0000B550 3038 D008                  		move.w	(v_player+obX).w,d0
0000B554 B068 0008                  		cmp.w	obX(a0),d0
0000B558 6400                       		bcc.s	@a1
0000B55A 4441                       		neg.w	d1
0000B55C 4A68 0010                  		tst.w	obVelX(a0)
0000B560 6B00                       		bmi.s	@a2
0000B562 D241                       		add.w	d1,d1
0000B564 D241                       		add.w	d1,d1
0000B566 6000                       		bra.s	@a2
0000B568                            
0000B568                            	@a1:
0000B568 4A68 0010                  		tst.w	obVelX(a0)
0000B56C 6A00                       		bpl.s	@a2
0000B56E D241                       		add.w	d1,d1
0000B570 D241                       		add.w	d1,d1
0000B572                            
0000B572                            	@a2:
0000B572 D368 0010                  		add.w	d1,obVelX(a0)
0000B576 323C 0030                  		move.w	#$30,d1	; vertical
0000B57A 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B57E B068 000C                  		cmp.w	obY(a0),d0
0000B582 6400                       		bcc.s	@a3
0000B584 4441                       		neg.w	d1
0000B586 4A68 0012                  		tst.w	obVelY(a0)
0000B58A 6B00                       		bmi.s	@a4
0000B58C D241                       		add.w	d1,d1
0000B58E D241                       		add.w	d1,d1
0000B590 6000                       		bra.s	@a4
0000B592                            
0000B592                            	@a3:
0000B592 4A68 0012                  		tst.w	obVelY(a0)
0000B596 6A00                       		bpl.s	@a4
0000B598 D241                       		add.w	d1,d1
0000B59A D241                       		add.w	d1,d1
0000B59C                            
0000B59C                            	@a4:
0000B59C D368 0012                  		add.w	d1,obVelY(a0)
0000B5A0 6100 0000                  		bsr.w	SpeedToPos
0000B5A4                            		
0000B5A4                            	@display:
0000B5A4 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B5AA 6000 0000                  		bra.w	DisplaySprite
0000B5AE                            
0000B5AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5AE                            
0000B5AE                            
0000B5AE                            CollectRing:
0000B5AE 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B5B2 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B5B8 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B5BC 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B5C2 6500                       		bcs.s	@playsnd	; if yes, branch
0000B5C4 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B5CA 6700                       		beq.s	@got100
0000B5CC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B5D2 6500                       		bcs.s	@playsnd	; if yes, branch
0000B5D4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B5DA 6600                       		bne.s	@playsnd
0000B5DC                            
0000B5DC                            	@got100:
0000B5DC 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B5E0 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B5E4 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B5E8                            		
0000B5E8                            
0000B5E8                            	@playsnd:
0000B5E8 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B5EE                            ; End of function CollectRing
0000B5EE                            
0000B5EE                            ; ===========================================================================
0000B5EE                            ; ---------------------------------------------------------------------------
0000B5EE                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B5EE                            ; ---------------------------------------------------------------------------
0000B5EE                            
0000B5EE                            RingLoss:
0000B5EE 7000                       		moveq	#0,d0
0000B5F0 1028 0024                  		move.b	obRoutine(a0),d0
0000B5F4 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B5F8 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B5FC                            ; ===========================================================================
0000B5FC 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B5FE 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B600 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B602 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B604 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B606                            ; ===========================================================================
0000B606                            
0000B606                            RLoss_Count:	; Routine 0
0000B606 2248                       		movea.l	a0,a1
0000B608 7A00                       		moveq	#0,d5
0000B60A 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B60E 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B614 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B616 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B61A 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B620 6700                               beq.s   @cont                       ; if not, branch
0000B622 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B628 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B62A                            @cont:
0000B62A BA40                               cmp.w   d0,d5
0000B62C 6500                               bcs.s   @belowmax
0000B62E 3A00                               move.w  d0,d5
0000B630                            
0000B630                            @belowmax:
0000B630 5345                               subq.w  #1,d5
0000B632 383C 0288                          move.w  #$288,d4
0000B636 6000                       		bra.s	@makerings
0000B638                            ; ===========================================================================
0000B638                            
0000B638                            	@loop:
0000B638 6100 0000                  		bsr.w	FindFreeObj
0000B63C 6600 0000                  		bne.w	@resetcounter
0000B640                            
0000B640                            @makerings:
0000B640 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B644 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B648 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B64E 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B654 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B65A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B660 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B668 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B66E 137C 0004 0001             		move.b	#4,obRender(a1)
0000B674 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B67A 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B680 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B684 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B686 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B68A BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B68E 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B690 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B692 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B694                            @skiphalvingvel:
0000B694 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B698 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B69C 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B6A0                            
0000B6A0                            @resetcounter:
0000B6A0 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B6A6 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B6AC 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B6B2 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B6B4 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B6B8 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B6C6                            
0000B6C6                            RLoss_Bounce:	; Routine 2
0000B6C6 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B6CC 6100 0000                  		bsr.w	SpeedToPos
0000B6D0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B6D6 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B6DA 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B6DC 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B6E0 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B6E4 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B6E6 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B6EC                            	@skipbounceslow:
0000B6EC 6B00                       		bmi.s	@chkdel
0000B6EE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000B6F2 D007                       		add.b	d7,d0
0000B6F4 0200 0003                  		andi.b	#3,d0
0000B6F8 6600                       		bne.s	@chkdel
0000B6FA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B700 4A41                       		tst.w	d1
0000B702 6A00                       		bpl.s	@chkdel
0000B704 D368 000C                  		add.w	d1,obY(a0)
0000B708 3028 0012                  		move.w	obVelY(a0),d0
0000B70C E440                       		asr.w	#2,d0
0000B70E 9168 0012                  		sub.w	d0,obVelY(a0)
0000B712 4468 0012                  		neg.w	obVelY(a0)
0000B716                            
0000B716                            	@chkdel:
0000B716 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B71A 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B71E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B722 0640 00E0                  		addi.w	#$E0,d0
0000B726 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000B72A 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000B72E 4A38 FE2C                  		tst.b	(v_shield).w
0000B732 6700                       		beq.s	@skip
0000B734 4A28 0001                  		tst.b	obRender(a0)
0000B738 6A00                       		bpl.s	@skip
0000B73A                            		
0000B73A 43F8 D000                  		lea (v_player).w,a1
0000B73E                            		
0000B73E 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B742 9068 0008                  		sub.w	obX(a0),d0
0000B746 6A00                       		bpl.s	@a1
0000B748 4440                       		neg.w	d0
0000B74A                            		
0000B74A                            	@a1:
0000B74A 0C40 00A0                  		cmpi.w	#$A0,d0
0000B74E 6200                       		bhi.s	@skip
0000B750                            		
0000B750 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B754 9068 000C                  		sub.w	obY(a0),d0
0000B758 6A00                       		bpl.s	@a2
0000B75A 4440                       		neg.w	d0
0000B75C                            		
0000B75C                            	@a2:
0000B75C 0C40 00A0                  		cmpi.w	#$A0,d0
0000B760 6200                       		bhi.s	@skip
0000B762                            		
0000B762 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B768 10BC 0000                  		move.b	#id_Rings,0(a0)
0000B76C                            		
0000B76C                            	@skip:		
0000B76C 43F8 AD80                          lea     v_spritequeue+$180,a1
0000B770 D2FC 0080                          adda.w  #$80,a1
0000B774 0C51 007E                          cmpi.w  #$7E,(a1)
0000B778 6400                               bcc.s   @cont
0000B77A 5451                               addq.w  #2,(a1)
0000B77C D2D1                               adda.w  (a1),a1
0000B77E 3288                               move.w  a0,(a1)
0000B780                            		
0000B780                            	@cont:
0000B780 4E75                               rts		
0000B782                            ; ===========================================================================
0000B782                            
0000B782                            RLoss_Collect:	; Routine 4
0000B782 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B786 117C 0000 0020             		move.b	#0,obColType(a0)
0000B78C 6100 FE20                  		bsr.w	CollectRing
0000B790                            
0000B790                            RLoss_Sparkle:	; Routine 6
0000B790 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B796 6100 0000                  		bsr.w	AnimateSprite
0000B79A 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000B79E 0C51 007E                          cmpi.w  #$7E,(a1)
0000B7A2 6400                               bcc.s   @cont
0000B7A4 5451                               addq.w  #2,(a1)
0000B7A6 D2D1                               adda.w  (a1),a1
0000B7A8 3288                               move.w  a0,(a1)
0000B7AA                            			
0000B7AA                            	@cont:
0000B7AA 4E75                               rts
0000B7AC                            ; ===========================================================================
0000B7AC                            
0000B7AC                            RLoss_Delete:	; Routine 8
0000B7AC 6000 0000                  		bra.w	DeleteObject
0000B7B0                            
0000B7B0                            ; ----------------------------------------------------------------------------------------------
0000B7B0                            ; Ring Spawn Array 
0000B7B0                            ; ----------------------------------------------------------------------------------------------
0000B7B0                            
0000B7B0 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000B7C0 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000B7D0 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000B7E0 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000B7F0 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000B800 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000B810 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000B820 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000B830                                            even
0000B830                            ; ===========================================================================
0000B830                            ; -------------------------------------------------------------------------------------
0000B830                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000B830                            ; -------------------------------------------------------------------------------------
0000B830                            
0000B830                            SpillRingData_Water:
0000B830 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000B840 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000B850 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000B860 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000B870 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000B880 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000B890 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000B8A0 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000B8B0                                            even
0000B8B0                            ; ===========================================================================				
0000B8B0                            ; ===========================================================================				
0000B8B0                            		include	"_incObj\4B Giant Ring.asm"
0000B8B0                            ; ---------------------------------------------------------------------------
0000B8B0                            ; Object 4B - giant ring for entry to special stage
0000B8B0                            ; ---------------------------------------------------------------------------
0000B8B0                            
0000B8B0                            GiantRing:
0000B8B0 7000                       		moveq	#0,d0
0000B8B2 1028 0024                  		move.b	obRoutine(a0),d0
0000B8B6 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000B8BA 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000B8BE                            ; ===========================================================================
0000B8BE 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000B8C0 0000                       		dc.w GRing_Animate-GRing_Index
0000B8C2 0000                       		dc.w GRing_Collect-GRing_Index
0000B8C4 0000                       		dc.w GRing_Delete-GRing_Index
0000B8C6                            ; ===========================================================================
0000B8C6                            
0000B8C6                            GRing_Main:    ; Routine 0
0000B8C6 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000B8CE 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000B8D4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B8DA 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000B8E0 4A28 0001                  		tst.b	obRender(a0)
0000B8E4 6A00                       		bpl.s	GRing_Animate
0000B8E6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000B8EC 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000B8F0 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000B8F6 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000B8F8                            
0000B8F8 4E75                       		rts    
0000B8FA                            ; ===========================================================================
0000B8FA                            
0000B8FA                            GRing_Okay:
0000B8FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B8FE 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000B904 117C 0052 0020             		move.b	#$52,obColType(a0)
0000B90A 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000B910                            
0000B910                            GRing_Animate:	; Routine 2
0000B910 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000B934 6000 0000                  		bra.w	DisplaySprite
0000B938                            ; ===========================================================================
0000B938                            
0000B938                            GRing_Collect:	; Routine 4
0000B938 5528 0024                  		subq.b	#2,obRoutine(a0)
0000B93C 117C 0000 0020             		move.b	#0,obColType(a0)
0000B942 6100 0000                  		bsr.w	FindFreeObj
0000B946 6600 0000                  		bne.w	GRing_PlaySnd
0000B94A 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000B94E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B954 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B95A 2348 003C                  		move.l	a0,$3C(a1)
0000B95E 3038 D008                  		move.w	(v_player+obX).w,d0
0000B962 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000B966 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000B968 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000B96E 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000B974 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000B97A                            		
0000B97A                            GRing_PlaySnd:
0000B984 608A                       		bra.s	GRing_Animate
0000B986                            ; ===========================================================================
0000B986                            
0000B986                            GRing_Delete:	; Routine 6
0000B986 6000 0000                  		bra.w	DeleteObject
0000B986 6000 0000                  		bra.w	DeleteObject
0000B98A                            		include	"_incObj\7C Ring Flash.asm"
0000B98A                            ; ---------------------------------------------------------------------------
0000B98A                            ; Object 7C - flash effect when	you collect the	giant ring
0000B98A                            ; ---------------------------------------------------------------------------
0000B98A                            
0000B98A                            RingFlash:
0000B98A 7000                       		moveq	#0,d0
0000B98C 1028 0024                  		move.b	obRoutine(a0),d0
0000B990 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000B994 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000B998                            ; ===========================================================================
0000B998 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000B99A 0000                       		dc.w Flash_ChkDel-Flash_Index
0000B99C 0000                       		dc.w Flash_Delete-Flash_Index
0000B99E                            ; ===========================================================================
0000B99E                            
0000B99E                            Flash_Main:	; Routine 0
0000B99E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B9A2 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000B9AA 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000B9B0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B9B6 317C 0000 0018             		move.w	#0,obPriority(a0)
0000B9BC 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000B9C2 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000B9C8                            
0000B9C8                            Flash_ChkDel:	; Routine 2
0000B9C8 6100                       		bsr.s	Flash_Collect
0000B9E8 6000 0000                  		bra.w	DisplaySprite
0000B9EC                            
0000B9EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9EC                            
0000B9EC                            
0000B9EC                            Flash_Collect:
0000B9EC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B9F0 6A00                       		bpl.s	locret_9F76
0000B9F2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B9F8 5228 001A                  		addq.b	#1,obFrame(a0)
0000B9FC 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BA02 6400                       		bcc.s	Flash_End	; if yes, branch
0000BA04 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BA0A 6600                       		bne.s	locret_9F76	; if not, branch
0000BA0C 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BA10 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BA16 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BA1C 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BA22 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BA26 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BA2A                            
0000BA2A                            locret_9F76:
0000BA2A 4E75                       		rts	
0000BA2C                            ; ===========================================================================
0000BA2C                            
0000BA2C                            Flash_End:
0000BA2C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA30 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BA36 588F                       		addq.l	#4,sp
0000BA38 4E75                       		rts	
0000BA3A                            ; End of function Flash_Collect
0000BA3A                            
0000BA3A                            ; ===========================================================================
0000BA3A                            
0000BA3A                            Flash_Delete:	; Routine 4
0000BA3A 6000 0000                  		bra.w	DeleteObject
0000BA3A 6000 0000                  		bra.w	DeleteObject
0000BA3E                            
0000BA3E                            		include	"_anim\Rings.asm"
0000BA3E                            ; ---------------------------------------------------------------------------
0000BA3E                            ; Animation script - ring
0000BA3E                            ; ---------------------------------------------------------------------------
0000BA3E 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BA40 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BA46                            		even
0000BA46                            		even
0000BA46                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BA46                            ; --------------------------------------------------------------------------------
0000BA46                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA46                            ; --------------------------------------------------------------------------------
0000BA46                            
0000BA46                            SME_aSMQh:	
0000BA46 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BA4A 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BA4E 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BA52 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BA56 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BA5A 01                         SME_aSMQh_14:	dc.b 1	
0000BA5B F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BA60 01                         SME_aSMQh_1A:	dc.b 1	
0000BA61 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BA66 01                         SME_aSMQh_20:	dc.b 1	
0000BA67 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BA6C 01                         SME_aSMQh_26:	dc.b 1	
0000BA6D F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BA72 01                         SME_aSMQh_2C:	dc.b 1	
0000BA73 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BA78 01                         SME_aSMQh_32:	dc.b 1	
0000BA79 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BA7E 01                         SME_aSMQh_38:	dc.b 1	
0000BA7F F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BA84 01                         SME_aSMQh_3E:	dc.b 1	
0000BA85 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BA8A 01                         SME_aSMQh_44:	dc.b 1	
0000BA8B F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BA90 01                         SME_aSMQh_4A:	dc.b 1	
0000BA91 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BA96                            		even
0000BA96                            		even
0000BA96                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BA96                            ; ---------------------------------------------------------------------------
0000BA96                            ; Sprite mappings - giant ring
0000BA96                            ; ---------------------------------------------------------------------------
0000BA96                            Map_GRing_internal:
0000BA96 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BA98 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BA9A 0000                       		dc.w byte_A036-Map_GRing_internal
0000BA9C 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BA9E 0A                         byte_9FDA:	dc.b $A
0000BA9F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BAA4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BAA9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BAAE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BAB3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BAB8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BABD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BAC2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BAC7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BACC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BAD1 08                         byte_A00D:	dc.b 8
0000BAD2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BAD7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BADC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BAE1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BAE6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BAEB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BAF0 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BAF5 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BAFA 04                         byte_A036:	dc.b 4
0000BAFB E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BB00 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BB05 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BB0A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BB0F 08                         byte_A04B:	dc.b 8
0000BB10 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BB15 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BB1A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BB1F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BB24 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BB29 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BB2E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BB33 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BB38                            		even
0000BB38                            		even
0000BB38                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BB38                            ; ---------------------------------------------------------------------------
0000BB38                            ; Sprite mappings - flash effect when you collect the giant ring
0000BB38                            ; ---------------------------------------------------------------------------
0000BB38                            Map_Flash_internal:
0000BB38 0000                       		dc.w byte_A084-Map_Flash_internal
0000BB3A 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BB3C 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BB3E 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BB40 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BB42 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BB44 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BB46 0000                       		dc.w byte_A103-Map_Flash_internal
0000BB48 02                         byte_A084:	dc.b 2
0000BB49 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BB4E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BB53 04                         byte_A08F:	dc.b 4
0000BB54 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BB59 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BB5E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BB63 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BB68 04                         byte_A0A4:	dc.b 4
0000BB69 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BB6E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BB73 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BB78 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BB7D 04                         byte_A0B9:	dc.b 4
0000BB7E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BB83 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BB88 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BB8D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BB92 04                         byte_A0CE:	dc.b 4
0000BB93 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BB98 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BB9D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BBA2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BBA7 04                         byte_A0E3:	dc.b 4
0000BBA8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BBAD E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BBB2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BBB7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BBBC 02                         byte_A0F8:	dc.b 2
0000BBBD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BBC2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BBC7 04                         byte_A103:	dc.b 4
0000BBC8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BBCD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BBD2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BBD7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BBDC                            		even
0000BBDC                            		even
0000BBDC                            		include	"_incObj\26 Monitor.asm"
0000BBDC                            ; ---------------------------------------------------------------------------
0000BBDC                            ; Object 26 - monitors
0000BBDC                            ; ---------------------------------------------------------------------------
0000BBDC                            
0000BBDC                            Monitor:
0000BBDC 7000                       		moveq	#0,d0
0000BBDE 1028 0024                  		move.b	obRoutine(a0),d0
0000BBE2 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BBE6 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BBEA                            ; ===========================================================================
0000BBEA 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BBEC 0000                       		dc.w Mon_Solid-Mon_Index
0000BBEE 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BBF0 0000                       		dc.w Mon_Animate-Mon_Index
0000BBF2 0000                       		dc.w Mon_Display-Mon_Index
0000BBF4                            ; ===========================================================================
0000BBF4                            
0000BBF4                            Mon_Main:	; Routine 0
0000BBF4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BBF8 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BBFE 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BC04 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BC0C 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BC12 117C 0004 0001             		move.b	#4,obRender(a0)
0000BC18 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BC1E 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BC24 45F8 FC00                  		lea	(v_objstate).w,a2
0000BC28 7000                       		moveq	#0,d0
0000BC2A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BC2E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BC34 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BC3A 6700                       		beq.s	@notbroken	; if not, branch
0000BC3C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BC42 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BC48 4E75                       		rts	
0000BC4A                            ; ===========================================================================
0000BC4A                            
0000BC4A                            	@notbroken:
0000BC4A 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BC50 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BC56                            
0000BC56                            Mon_Solid:	; Routine 2
0000BC56 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BC5A 6700                       		beq.s	@normal		; if not, branch
0000BC5C 5500                       		subq.b	#2,d0
0000BC5E 6600                       		bne.s	@fall
0000BC60                            
0000BC60                            		; 2nd Routine 2
0000BC60 7200                       		moveq	#0,d1
0000BC62 1228 0014                  		move.b	obActWid(a0),d1
0000BC66 0641 000B                  		addi.w	#$B,d1
0000BC6A 6100 CFEC                  		bsr.w	ExitPlatform
0000BC6E 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BC74 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BC78 4228 0025                  		clr.b	ob2ndRout(a0)
0000BC7C 6000 0000                  		bra.w	Mon_Animate
0000BC80                            ; ===========================================================================
0000BC80                            
0000BC80                            	@ontop:
0000BC80 363C 0010                  		move.w	#$10,d3
0000BC84 3428 0008                  		move.w	obX(a0),d2
0000BC88 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000BC8C 6000 0000                  		bra.w	Mon_Animate
0000BC90                            ; ===========================================================================
0000BC90                            
0000BC90                            @fall:		; 2nd Routine 4
0000BC90 6100 0000                  		bsr.w	ObjectFall
0000BC94 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BC9A 4A41                       		tst.w	d1
0000BC9C 6A00 0000                  		bpl.w	Mon_Animate
0000BCA0 D368 000C                  		add.w	d1,obY(a0)
0000BCA4 4268 0012                  		clr.w	obVelY(a0)
0000BCA8 4228 0025                  		clr.b	ob2ndRout(a0)
0000BCAC 6000 0000                  		bra.w	Mon_Animate
0000BCB0                            ; ===========================================================================
0000BCB0                            
0000BCB0                            @normal:	; 2nd Routine 0
0000BCB0 323C 001A                  		move.w	#$1A,d1
0000BCB4 343C 000F                  		move.w	#$F,d2
0000BCB8 6100 0000                  		bsr.w	Mon_SolidSides
0000BCBC 6700 0000                  		beq.w	loc_A25C
0000BCC0 4A69 0012                  		tst.w	obVelY(a1)
0000BCC4 6B00                       		bmi.s	loc_A20A
0000BCC6 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BCCC 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCCE 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BCD4 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCD6 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BCDC 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCDE                            
0000BCDE                            loc_A20A:
0000BCDE 4A41                       		tst.w	d1
0000BCE0 6A00                       		bpl.s	loc_A220
0000BCE2 9769 000C                  		sub.w	d3,obY(a1)
0000BCE6 6100 CE5E                  		bsr.w	loc_74AE
0000BCEA 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000BCF0 6000 0000                  		bra.w	Mon_Animate
0000BCF4                            ; ===========================================================================
0000BCF4                            
0000BCF4                            loc_A220:
0000BCF4 4A40                       		tst.w	d0
0000BCF6 6700 0000                  		beq.w	loc_A246
0000BCFA 6B00                       		bmi.s	loc_A230
0000BCFC 4A69 0010                  		tst.w	obVelX(a1)
0000BD00 6B00                       		bmi.s	loc_A246
0000BD02 6000                       		bra.s	loc_A236
0000BD04                            ; ===========================================================================
0000BD04                            
0000BD04                            loc_A230:
0000BD04 4A69 0010                  		tst.w	obVelX(a1)
0000BD08 6A00                       		bpl.s	loc_A246
0000BD0A                            
0000BD0A                            loc_A236:
0000BD0A 9169 0008                  		sub.w	d0,obX(a1)
0000BD0E 337C 0000 0020             		move.w	#0,obInertia(a1)
0000BD14 337C 0000 0010             		move.w	#0,obVelX(a1)
0000BD1A                            
0000BD1A                            loc_A246:
0000BD1A 0829 0001 0022             		btst	#1,obStatus(a1)
0000BD20 6600                       		bne.s	loc_A26A
0000BD22 08E9 0005 0022             		bset	#5,obStatus(a1)
0000BD28 08E8 0005 0022             		bset	#5,obStatus(a0)
0000BD2E 6000                       		bra.s	Mon_Animate
0000BD30                            ; ===========================================================================
0000BD30                            
0000BD30                            loc_A25C:
0000BD30 0828 0005 0022             		btst	#5,obStatus(a0)
0000BD36 6700                       		beq.s	Mon_Animate
0000BD38 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000BD3E 6700                       		beq.s	loc_A26A	; if so, branch
0000BD40 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000BD46                            
0000BD46                            loc_A26A:
0000BD46 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000BD4C 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000BD52                            
0000BD52                            Mon_Animate:	; Routine 6
0000BD52 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000BD58 6100 0000                  		bsr.w	AnimateSprite
0000BD5C                            
0000BD5C                            Mon_Display:	; Routine 8
0000BD5C 6100 0000                  		bsr.w	DisplaySprite
0000BD7E 4E75                       		rts	
0000BD80                            ; ===========================================================================
0000BD80                            
0000BD80                            Mon_BreakOpen:	; Routine 4
0000BD80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD84 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD8A 6100 0000                  		bsr.w	FindFreeObj
0000BD8E 6600                       		bne.s	Mon_Explode
0000BD90 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000BD94 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BD9A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BDA0 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000BDA6                            
0000BDA6                            Mon_Explode:
0000BDA6 6100 0000                  		bsr.w	FindFreeObj
0000BDAA 6600                       		bne.s	@fail
0000BDAC 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000BDB0 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000BDB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BDBA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BDC0                            
0000BDC0                            	@fail:
0000BDC0 45F8 FC00                  		lea	(v_objstate).w,a2
0000BDC4 7000                       		moveq	#0,d0
0000BDC6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BDCA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BDD0 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000BDD6 6000 0000                  		bra.w	DisplaySprite
0000BDD6 6000 0000                  		bra.w	DisplaySprite
0000BDDA                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000BDDA                            ; ---------------------------------------------------------------------------
0000BDDA                            ; Object 2E - contents of monitors
0000BDDA                            ; ---------------------------------------------------------------------------
0000BDDA                            
0000BDDA                            PowerUp:
0000BDDA 7000                       		moveq	#0,d0
0000BDDC 1028 0024                  		move.b	obRoutine(a0),d0
0000BDE0 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000BDE4 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000BDE8 6000 0000                  		bra.w	DisplaySprite
0000BDEC                            ; ===========================================================================
0000BDEC 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000BDEE 0000                       		dc.w Pow_Move-Pow_Index
0000BDF0 0000                       		dc.w Pow_Delete-Pow_Index
0000BDF2                            ; ===========================================================================
0000BDF2                            
0000BDF2                            Pow_Main:	; Routine 0
0000BDF2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDF6 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BDFC 117C 0024 0001             		move.b	#$24,obRender(a0)
0000BE02 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BE08 117C 0008 0014             		move.b	#8,obActWid(a0)
0000BE0E 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000BE14 7000                       		moveq	#0,d0
0000BE16 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000BE1A 5400                       		addq.b	#2,d0
0000BE1C 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000BE20 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000BE26 D000                       		add.b	d0,d0
0000BE28 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BE2C 5249                       		addq.w	#1,a1
0000BE2E 2149 0004                  		move.l	a1,obMap(a0)
0000BE32                            
0000BE32                            Pow_Move:	; Routine 2
0000BE32 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000BE36 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000BE3A 6100 0000                  		bsr.w	SpeedToPos
0000BE3E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000BE44 4E75                       		rts	
0000BE46                            ; ===========================================================================
0000BE46                            
0000BE46                            Pow_Checks:
0000BE46 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE4A 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000BE50                            
0000BE50                            Pow_ChkEggman:
0000BE50 1028 001C                  		move.b	obAnim(a0),d0
0000BE54 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000BE58 6600                       		bne.s	Pow_ChkSonic
0000BE5A                            		
0000BE5A 4EF9 0000 0000             		jmp	Spik_Hurt
0000BE60                            		
0000BE60 4E75                       		rts
0000BE62                            ; ===========================================================================
0000BE62                            
0000BE62                            Pow_ChkSonic:
0000BE62 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BE66 6600                       		bne.s	Pow_ChkShoes
0000BE68                            
0000BE68                            	ExtraLife:
0000BE68 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BE6C 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BE7A                            
0000BE7A                            ; ===========================================================================
0000BE7A                            
0000BE7A                            Pow_ChkShoes:
0000BE7A 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BE7E 6600                       		bne.s	Pow_ChkShield
0000BE80                            
0000BE80 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000BE86 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000BE8C 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000BE92 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000BE98 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000BE9E 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BEA2 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000BEA4 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BEAA 6300                       			bls.s	Pow_NoMus
0000BEB6                            ; ===========================================================================
0000BEB6                            
0000BEB6                            Pow_NoMus:
0000BEB6 4E75                       		rts	
0000BEB8                            ; ===========================================================================
0000BEB8                            
0000BEB8                            Pow_ChkShield:
0000BEB8 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000BEBC 6600                               bne.s    Pow_ChkInvinc
0000BEBE                            
0000BEBE 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000BEC4 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000BECA 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000BED0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000BED6 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000BEDC 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000BEE0 303C 0000                          move.w    #sfx_Shield,d0
0000BEE4 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000BEEA                            ; ===========================================================================
0000BEEA                            
0000BEEA                            Pow_ChkInvinc:
0000BEEA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BEEE 6600                       		bne.s	Pow_ChkRings
0000BEF0                            
0000BEF0 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000BEF6 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000BEFC 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000BF02 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000BF08 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000BF0E 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000BF14 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000BF1A 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000BF20 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000BF26 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000BF2C 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BF30 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000BF32 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BF38 6300                       			bls.s	Pow_NoMusic
0000BF44                            ; ===========================================================================
0000BF44                            
0000BF44                            Pow_NoMusic:
0000BF44 4E75                       		rts	
0000BF46                            ; ===========================================================================
0000BF46                            
0000BF46                            Pow_ChkRings:
0000BF46 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BF4A 6600                       		bne.s	Pow_ChkS
0000BF4C                            
0000BF4C 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000BF52 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000BF58 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BF5E 6500                       		bcs.s	Pow_RingSound
0000BF60 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BF66 6700 FF00                  		beq.w	ExtraLife
0000BF6A 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000BF70 6500                       		bcs.s	Pow_RingSound
0000BF72 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000BF78 6700 FEEE                  		beq.w	ExtraLife
0000BF7C                            
0000BF7C                            	Pow_RingSound:
0000BF86                            ; ===========================================================================
0000BF86                            
0000BF86                            Pow_ChkS:
0000BF86 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000BF8A 6600                       		bne.s	Pow_ChkSRing
0000BF8C                            		
0000BF8C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000BF92 6700                       		beq.s	PowS2	; if yes, branch
0000BF94 0404 003B                  		subi.b	#$3B,d4
0000BF98 7000                       		moveq	#0,d0
0000BF9A 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000BFA0 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000BFA6 6000                       		bra.s	PowSPlay
0000BFA8                            
0000BFA8                            PowS2:
0000BFA8 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000BFAE 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000BFB4 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000BFBA 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BFC0 6500                       		bcs.s	PowSPlay
0000BFC2 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BFC8 6700 FE9E                  		beq.w	ExtraLife
0000BFCC 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000BFD2 6500                       		bcs.s	PowSPlay
0000BFD4 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000BFDA 6700 FE8C                  		beq.w	ExtraLife	
0000BFDE                            
0000BFDE                            PowSPlay:
0000BFE8                            
0000BFE8                            		
0000BFE8                            
0000BFE8                            
0000BFE8                            Pow_ChkSRing:
0000BFE8 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000BFEC 6600                       		bne.s	Pow_ChkRShield
0000BFEE                            
0000BFEE                            		
0000BFEE 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000BFF4 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000BFFA 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C000 6500                       		bcs.s	Pow_ChkSRingSound
0000C002 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C008 6700 FE5E                  		beq.w	ExtraLife
0000C00C 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C012 6500                       		bcs.s	Pow_ChkSRingSound
0000C014 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C01A 6700 FE4C                  		beq.w	ExtraLife	
0000C01E                            
0000C01E                            Pow_ChkSRingSound:
0000C028                            
0000C028                            
0000C028                            Pow_ChkRShield:
0000C028 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C02C 6600                               bne.s    Pow_ChkGShield
0000C02E                            
0000C02E 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C034 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C03A 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C040 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C046 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C04C 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C050 303C 0000                          move.w    #sfx_FireShield,d0
0000C054 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C05A                            
0000C05A                            Pow_ChkGShield:
0000C05A 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C05E 6600                               bne.s    Pow_ChkSpShield
0000C060                            
0000C060 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C066 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C06C 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C072 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C078 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C07E 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C082 303C 0000                          move.w    #sfx_LightningShield,d0
0000C086 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C08C                            
0000C08C                            Pow_ChkSpShield:
0000C08C 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C090 66FA                               bne.s    Pow_ChkSpShield
0000C092                            
0000C092 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C098 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C09E 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C0A4 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C0AA 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C0B0 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C0B4 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C0B8 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C0BE                            
0000C0BE                            Pow_ChkEnd:
0000C0BE 4E75                       		rts
0000C0C0                            ; ===========================================================================
0000C0C0                            
0000C0C0                            Pow_Delete:	; Routine 4
0000C0C0 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C0C4 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C0C8 4E75                       		rts	
0000C0C8 4E75                       		rts	
0000C0CA                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C0CA                            ; ---------------------------------------------------------------------------
0000C0CA                            ; Subroutine to	make the sides of a monitor solid
0000C0CA                            ; ---------------------------------------------------------------------------
0000C0CA                            
0000C0CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0CA                            
0000C0CA                            
0000C0CA                            Mon_SolidSides:
0000C0CA 43F8 D000                  		lea	(v_player).w,a1
0000C0CE 3029 0008                  		move.w	obX(a1),d0
0000C0D2 9068 0008                  		sub.w	obX(a0),d0
0000C0D6 D041                       		add.w	d1,d0
0000C0D8 6B00                       		bmi.s	loc_A4E6
0000C0DA 3601                       		move.w	d1,d3
0000C0DC D643                       		add.w	d3,d3
0000C0DE B043                       		cmp.w	d3,d0
0000C0E0 6200                       		bhi.s	loc_A4E6
0000C0E2 1629 0016                  		move.b	obHeight(a1),d3
0000C0E6 4883                       		ext.w	d3
0000C0E8 D443                       		add.w	d3,d2
0000C0EA 3629 000C                  		move.w	obY(a1),d3
0000C0EE 9668 000C                  		sub.w	obY(a0),d3
0000C0F2 D642                       		add.w	d2,d3
0000C0F4 6B00                       		bmi.s	loc_A4E6
0000C0F6 D442                       		add.w	d2,d2
0000C0F8 B642                       		cmp.w	d2,d3
0000C0FA 6400                       		bcc.s	loc_A4E6
0000C0FC 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C100 6B00                       		bmi.s	loc_A4E6
0000C102 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C108 6400                       		bcc.s	loc_A4E6
0000C10A 4A78 FE08                  		tst.w	(v_debuguse).w
0000C10E 6600                       		bne.s	loc_A4E6
0000C110 B240                       		cmp.w	d0,d1
0000C112 6400                       		bcc.s	loc_A4DC
0000C114 D241                       		add.w	d1,d1
0000C116 9041                       		sub.w	d1,d0
0000C118                            
0000C118                            loc_A4DC:
0000C118 0C43 0010                  		cmpi.w	#$10,d3
0000C11C 6500                       		bcs.s	loc_A4EA
0000C11E                            
0000C11E                            loc_A4E2:
0000C11E 7201                       		moveq	#1,d1
0000C120 4E75                       		rts	
0000C122                            ; ===========================================================================
0000C122                            
0000C122                            loc_A4E6:
0000C122 7200                       		moveq	#0,d1
0000C124 4E75                       		rts	
0000C126                            ; ===========================================================================
0000C126                            
0000C126                            loc_A4EA:
0000C126 7200                       		moveq	#0,d1
0000C128 1228 0014                  		move.b	obActWid(a0),d1
0000C12C 5841                       		addq.w	#4,d1
0000C12E 3401                       		move.w	d1,d2
0000C130 D442                       		add.w	d2,d2
0000C132 D269 0008                  		add.w	obX(a1),d1
0000C136 9268 0008                  		sub.w	obX(a0),d1
0000C13A 6BE2                       		bmi.s	loc_A4E2
0000C13C B242                       		cmp.w	d2,d1
0000C13E 64DE                       		bcc.s	loc_A4E2
0000C140 72FF                       		moveq	#-1,d1
0000C142 4E75                       		rts	
0000C144                            ; End of function Obj26_SolidSides
0000C144                            ; End of function Obj26_SolidSides
0000C144                            		include	"_anim\Monitor.asm"
0000C144                            ; ---------------------------------------------------------------------------
0000C144                            ; Animation script - monitors
0000C144                            ; ---------------------------------------------------------------------------
0000C144 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C14A 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C150 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C156 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C15C 0000                       		dc.w @spshield-Ani_Monitor
0000C15E                            		
0000C15E 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C164 00                         		even
0000C164 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C170 00                         		even
0000C170 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C17C 00                         		even
0000C17C 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C188 00                         		even
0000C188 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C194 00                         		even
0000C194 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C1A0 00                         		even
0000C1A0 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C1AC 00                         		even
0000C1AC 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C1B8 00                         		even
0000C1B8 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C1C4 00                         		even
0000C1C4 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C1CC 00                         		even
0000C1CC 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C1D8 00                         		even
0000C1D8 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C1E4 00                         		even
0000C1E4 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C1F0 00                         		even
0000C1F0 00                         		even
0000C1F0                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C1F0                            ; --------------------------------------------------------------------------------
0000C1F0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C1F0                            ; --------------------------------------------------------------------------------
0000C1F0                            
0000C1F0                            SME_0IgQe:	
0000C1F0 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C1F4 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C1F8 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C1FC 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C200 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C204 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C208 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C20C 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C20E 01                         SME_0IgQe_1E:	dc.b 1	
0000C20F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C214 02                         SME_0IgQe_24:	dc.b 2	
0000C215 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C21A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C21F 02                         SME_0IgQe_2F:	dc.b 2	
0000C220 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C225 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C22A 02                         SME_0IgQe_3A:	dc.b 2	
0000C22B F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C230 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C235 02                         SME_0IgQe_45:	dc.b 2	
0000C236 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C23B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C240 02                         SME_0IgQe_50:	dc.b 2	
0000C241 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C246 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C24B 02                         SME_0IgQe_5B:	dc.b 2	
0000C24C F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C251 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C256 02                         SME_0IgQe_66:	dc.b 2	
0000C257 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C25C F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C261 02                         SME_0IgQe_71:	dc.b 2	
0000C262 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C267 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C26C 02                         SME_0IgQe_7C:	dc.b 2	
0000C26D F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C272 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C277 02                         SME_0IgQe_87:	dc.b 2	
0000C278 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C27D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C282 05                         SME_0IgQe_92:	dc.b 5	
0000C283 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C288 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C28D 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C292 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C297 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C29C 02                         SME_0IgQe_AC:	dc.b 2	
0000C29D F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C2A2 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2A7 02                         SME_0IgQe_B7:	dc.b 2	
0000C2A8 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C2AD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2B2 02                         SME_0IgQe_C2:	dc.b 2	
0000C2B3 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C2B8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2BE 00                         		even
0000C2BE 00                         		even
0000C2BE                            
0000C2BE                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C2BE                            ; ---------------------------------------------------------------------------
0000C2BE                            ; Object 0E - Sonic on the title screen
0000C2BE                            ; ---------------------------------------------------------------------------
0000C2BE                            
0000C2BE                            TitleSonic:
0000C2BE 7000                       		moveq	#0,d0
0000C2C0 1028 0024                  		move.b	obRoutine(a0),d0
0000C2C4 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C2C8 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C2CC                            ; ===========================================================================
0000C2CC 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C2CE 0000                       		dc.w TSon_Delay-TSon_Index
0000C2D0 0000                       		dc.w TSon_Move-TSon_Index
0000C2D2 0000                       		dc.w TSon_Animate-TSon_Index
0000C2D4                            ; ===========================================================================
0000C2D4                            
0000C2D4                            TSon_Main:	; Routine 0
0000C2D4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2D8 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C2DE 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C2E4 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C2EC 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C2F2 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C2F8 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C2FE 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C304 6100 0000                  		bsr.w	AnimateSprite
0000C308                            
0000C308                            TSon_Delay:	;Routine 2
0000C308 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C30C 6A00                       		bpl.s	@wait		; if time remains, branch
0000C30E 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C312 6000 0000                  		bra.w	DisplaySprite
0000C316                            
0000C316                            	@wait:
0000C316 4E75                       		rts	
0000C318                            ; ===========================================================================
0000C318                            
0000C318                            TSon_Move:	; Routine 4
0000C318 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C31C 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C322 6600                       		bne.s	@display	; if not, branch
0000C324 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C328                            
0000C328                            	@display:
0000C328 6000 0000                  		bra.w	DisplaySprite
0000C32C                            
0000C32C 4E75                       		rts	
0000C32E                            ; ===========================================================================
0000C32E                            
0000C32E                            TSon_Animate:	; Routine 6
0000C32E 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C334 6100 0000                  		bsr.w	AnimateSprite
0000C338 6000 0000                  		bra.w	DisplaySprite
0000C33C                            
0000C33C 4E75                       		rts	
0000C33C 4E75                       		rts	
0000C33E                            		include	"_incObj\0F Press Start and TM.asm"
0000C33E                            ; ---------------------------------------------------------------------------
0000C33E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C33E                            ; ---------------------------------------------------------------------------
0000C33E                            
0000C33E                            PSBTM:
0000C33E 7000                       		moveq	#0,d0
0000C340 1028 0024                  		move.b	obRoutine(a0),d0
0000C344 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C348 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C34C 6000 0000                  		bra.w	DisplaySprite
0000C350                            ; ===========================================================================
0000C350 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C352 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C354 0000                       		dc.w PSB_Exit-PSB_Index
0000C356 0000                       		dc.w PSB_Menu-PSB_Index		
0000C358                            ; ===========================================================================
0000C358                            
0000C358                            PSB_Main:	; Routine 0
0000C358 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C35C 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C362 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C368 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C370 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C376 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C37C 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C37E                            
0000C37E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C382 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C388 6600                       		bne.s	PSB_Exit	; if not, branch
0000C38A                            
0000C38A 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C390 317C 0170 0008             		move.w	#$170,obX(a0)
0000C396 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C39C                            
0000C39C                            PSB_Exit:	; Routine 4
0000C39C 4E75                       		rts	
0000C39E                            ; ===========================================================================
0000C39E                            
0000C39E                            PSB_PrsStart:	; Routine 2
0000C39E 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C3A4 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C3A6 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C3AA 303C 00A1                  		move.w   #$A1,d0 
0000C3AE 4EB8 12A0                  		jsr   PlaySound_Special
0000C3B2 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C3B8 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C3C0 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C3C6 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C3CC 4E75                       		rts
0000C3CE                            
0000C3CE                            PSB_PrsStart_Show:
0000C3CE 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C3D4 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C3D8                            
0000C3D8                            PSB_Menu:
0000C3D8 7400                             moveq   #0,d2
0000C3DA 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C3DE 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C3E2 0800 0000                        btst   #0,d0
0000C3E6 6700                             beq.s   MAIN2
0000C3E8 5302                             subq.b   #1,d2
0000C3EA 6400                             bcc.s   MAIN2
0000C3EC 143C 0001                        move.b   #1,d2
0000C3F0                            
0000C3F0                            MAIN2:
0000C3F0 0800 0001                        btst   #1,d0
0000C3F4 6700                             beq.s   MAIN3
0000C3F6 5202                             addq.b   #1,d2
0000C3F8 0C02 0002                        cmpi.b   #2,d2
0000C3FC 6500                             blo.s   MAIN3
0000C3FE 7400                             moveq   #0,d2
0000C400                            
0000C400                            MAIN3:
0000C400 1142 001A                        move.b   d2,$1A(a0)
0000C404 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C408 0200 0003                        andi.b   #3,d0
0000C40C 6700                             beq.s   MAIN4   
0000C40E 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C412 4EB8 12A0                        jsr   PlaySound_Special
0000C416                            
0000C416                            MAIN4:
0000C416 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C41C 6700                             beq.s   MENURTS   ; if not, branch
0000C41E 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C424                            
0000C424                            MENURTS:
0000C424 4E75                             rts															 
0000C426                            ; ===========================================================================
0000C426                            
0000C426                            
0000C426                            Map_TitleMenu:
0000C426                            		include "_maps\Title Screen Menu.asm"		
0000C426                            ; --------------------------------------------------------------------------------
0000C426                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C426                            ; --------------------------------------------------------------------------------
0000C426                            
0000C426                            SME_g2Qfx:	
0000C426 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C42A 10                         SME_g2Qfx_6:	dc.b $10	
0000C42B E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C430 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C435 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C43A E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C43F E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C444 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C449 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C44E E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C453 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C458 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C45D F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C462 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C467 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C46C F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C471 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C476 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C47B 10                         SME_g2Qfx_6B:	dc.b $10	
0000C47C E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C481 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C486 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C48B E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C490 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C495 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C49A E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C49F E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C4A4 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C4A9 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C4AE F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C4B3 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C4B8 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C4BD F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C4C2 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C4C7 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C4CC                            		even
0000C4CC                            		even
0000C4CC                            		even
0000C4CC                            
0000C4CC                            		include	"_anim\Title Screen Sonic.asm"
0000C4CC                            ; ---------------------------------------------------------------------------
0000C4CC                            ; Animation script - Sonic on the title screen
0000C4CC                            ; ---------------------------------------------------------------------------
0000C4CC 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C4CE 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C4DA 00                         		even
0000C4DA 00                         		even
0000C4DA                            		include	"_anim\Press Start and TM.asm"
0000C4DA                            ; ---------------------------------------------------------------------------
0000C4DA                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C4DA                            ; ---------------------------------------------------------------------------
0000C4DA 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C4DC 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C4E0                            		even
0000C4E0                            		even
0000C4E0                            
0000C4E0                            		include	"_incObj\sub AnimateSprite.asm"
0000C4E0                            ; ---------------------------------------------------------------------------
0000C4E0                            ; Subroutine to	animate	a sprite using an animation script
0000C4E0                            ; ---------------------------------------------------------------------------
0000C4E0                            
0000C4E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4E0                            
0000C4E0                            
0000C4E0                            AnimateSprite:
0000C4E0 7000                       		moveq	#0,d0
0000C4E2 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C4E6 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C4EA 6700                       		beq.s	Anim_Run	; if not, branch
0000C4EC                            
0000C4EC 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C4F0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C4F6 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C4FC                            
0000C4FC                            Anim_Run:
0000C4FC 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C500 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C502 D040                       		add.w	d0,d0
0000C504 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C508 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C50C 7200                       		moveq	#0,d1
0000C50E 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C512 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C516 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C518                            
0000C518                            Anim_Next:
0000C518 1200                       		move.b	d0,d1
0000C51A 0200 001F                  		andi.b	#$1F,d0
0000C51E 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C522 1028 0022                  		move.b	obStatus(a0),d0
0000C526 E719                       		rol.b	#3,d1
0000C528 B101                       		eor.b	d0,d1
0000C52A 0201 0003                  		andi.b	#3,d1
0000C52E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C534 8328 0001                  		or.b	d1,obRender(a0)
0000C538 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C53C                            
0000C53C                            Anim_Wait:
0000C53C 4E75                       		rts	
0000C53E                            ; ===========================================================================
0000C53E                            
0000C53E                            Anim_End_FF:
0000C53E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C540 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C542 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C548 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C54C 60CA                       		bra.s	Anim_Next
0000C54E                            ; ===========================================================================
0000C54E                            
0000C54E                            Anim_End_FE:
0000C54E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C550 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C552 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C556 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C55A 9200                       		sub.b	d0,d1
0000C55C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C560 60B6                       		bra.s	Anim_Next
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            Anim_End_FD:
0000C562 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C564 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C566 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C56C                            
0000C56C                            Anim_End_FC:
0000C56C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C56E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C570 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C574                            
0000C574                            Anim_End_FB:
0000C574 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C576 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C578 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C57E 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C582                            
0000C582                            Anim_End_FA:
0000C582 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C584 6600                       		bne.s	Anim_End	; if not, branch
0000C586 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C58A                            
0000C58A                            Anim_End:
0000C58A 4E75                       		rts	
0000C58C                            ; End of function AnimateSprite
0000C58C                            ; End of function AnimateSprite
0000C58C                            
0000C58C                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C58C                            ; ---------------------------------------------------------------------------
0000C58C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C58C                            ; ---------------------------------------------------------------------------
0000C58C                            Map_PSB_internal:
0000C58C 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C58E 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C590 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C592 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C594 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C595 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C59A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C59F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C5A4 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C5A9 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C5AE 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C5B3 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C5B4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5B9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5BE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5C3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5C8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5CD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5D2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5D7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5DC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5E1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5E6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C5EB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C5F0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C5F5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C5FA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C5FF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C604 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C609 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C60E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C613 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C618 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C61D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C622 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C627 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C62C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C631 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C636 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C63B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C640 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C645 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C64A 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C64B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C650                            		even
0000C650                            		even
0000C650                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C650                            ; ---------------------------------------------------------------------------
0000C650                            ; Sprite mappings - Sonic on the title screen
0000C650                            ; ---------------------------------------------------------------------------
0000C650                            Map_TSon_internal:
0000C650 0000                       		dc.w byte_A898-Map_TSon_internal
0000C652 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C654 0000                       		dc.w byte_A917-Map_TSon_internal
0000C656 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C658 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C65A 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C65C 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C65E 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C660 0A                         byte_A898:	dc.b $A
0000C661 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C666 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C66B 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C670 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C675 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C67A 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C67F 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C684 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C689 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C68E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C693 0F                         byte_A8CB:	dc.b $F
0000C694 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C699 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C69E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C6A3 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C6A8 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C6AD 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C6B2 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C6B7 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C6BC 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C6C1 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C6C6 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C6CB 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C6D0 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C6D5 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C6DA 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C6DF 11                         byte_A917:	dc.b $11
0000C6E0 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C6E5 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C6EA 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C6EF 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C6F4 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C6F9 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C6FE 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C703 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C708 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C70D 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C712 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C717 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C71C 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C721 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C726 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C72B 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C730 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C735 0D                         byte_A96D:	dc.b $D
0000C736 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C73B 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C740 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C745 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C74A 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C74F 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C754 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C759 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C75E 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C763 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C768 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C76D 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C772 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C777 0B                         byte_A9AF:	dc.b $B
0000C778 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C77D 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C782 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C787 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C78C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C791 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C796 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C79B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C7A0 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C7A5 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C7AA 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C7AF 13                         byte_A9E7:	dc.b $13
0000C7B0 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C7B5 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C7BA 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C7BF 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C7C4 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C7C9 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C7CE 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C7D3 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C7D8 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C7DD 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C7E2 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C7E7 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C7EC 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C7F1 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C7F6 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C7FB 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C800 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C805 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C80A 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C80F 15                         byte_AA47:	dc.b $15
0000C810 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C815 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C81A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C81F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C824 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C829 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C82E 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C833 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C838 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C83D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C842 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C847 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C84C 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C851 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C856 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C85B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C860 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C865 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C86A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C86F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C874 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C879 16                         byte_AAB1:	dc.b $16
0000C87A 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C87F 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C884 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C889 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C88E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C893 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C898 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C89D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C8A2 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C8A7 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C8AC 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C8B1 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C8B6 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C8BB 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C8C0 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C8C5 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C8CA 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C8CF 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C8D4 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C8D9 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C8DE 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C8E3 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C8E8                            		even
0000C8E8                            		even
0000C8E8                            
0000C8E8                            		include	"_incObj\2B Chopper.asm"
0000C8E8                            ; ---------------------------------------------------------------------------
0000C8E8                            ; Object 2B - Chopper enemy (GHZ)
0000C8E8                            ; ---------------------------------------------------------------------------
0000C8E8                            
0000C8E8                            Chopper:
0000C8E8 7000                       		moveq	#0,d0
0000C8EA 1028 0024                  		move.b	obRoutine(a0),d0
0000C8EE 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000C8F2 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000C8F6 6000 0000                  		bra.w	RememberState
0000C8FA                            ; ===========================================================================
0000C8FA 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000C8FC 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000C8FE                            
0000C8FE =00000030                  chop_origY:	equ $30
0000C8FE                            ; ===========================================================================
0000C8FE                            
0000C8FE                            Chop_Main:	; Routine 0
0000C8FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C902 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000C90A 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000C910 117C 0004 0001             		move.b	#4,obRender(a0)
0000C916 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C91C 117C 0009 0020             		move.b	#9,obColType(a0)
0000C922 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C928 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C92E 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000C934                            
0000C934                            Chop_ChgSpeed:	; Routine 2
0000C934 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000C93A 6100 FBA4                  		bsr.w	AnimateSprite
0000C93E 6100 0000                  		bsr.w	SpeedToPos
0000C942 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000C948 3028 0030                  		move.w	chop_origY(a0),d0
0000C94C B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000C950 6400                       		bcc.s	@chganimation	; if not, branch
0000C952 3140 000C                  		move.w	d0,obY(a0)
0000C956 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C95C                            
0000C95C                            	@chganimation:
0000C95C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000C962 0440 00C0                  		subi.w	#$C0,d0
0000C966 B068 000C                  		cmp.w	obY(a0),d0
0000C96A 6400                       		bcc.s	@nochg
0000C96C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000C972 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000C976 6B00                       		bmi.s	@nochg		; if not, branch
0000C978 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000C97E                            
0000C97E                            	@nochg:
0000C97E 4E75                       		rts	
0000C97E 4E75                       		rts	
0000C980                            		include	"_anim\Chopper.asm"
0000C980                            ; ---------------------------------------------------------------------------
0000C980                            ; Animation script - Chopper enemy
0000C980                            ; ---------------------------------------------------------------------------
0000C980 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000C982 0000                       		dc.w @fast-Ani_Chop
0000C984 0000                       		dc.w @still-Ani_Chop
0000C986 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000C98A 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000C98E 0700 FF                    @still:		dc.b 7,	0, afEnd
0000C992 00                         		even
0000C992 00                         		even
0000C992                            Map_Chop:	include	"_maps\Chopper.asm"
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            ; Sprite mappings - Chopper enemy (GHZ)
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            Map_Chop_internal:
0000C992 0000                       		dc.w @mouthshut-Map_Chop_internal
0000C994 0000                       		dc.w @mouthopen-Map_Chop_internal
0000C996 01                         @mouthshut:	dc.b 1
0000C997 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C99C 01                         @mouthopen:	dc.b 1
0000C99D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C9A2                            		even
0000C9A2                            		even
0000C9A2                            		include	"_incObj\2C Jaws.asm"
0000C9A2                            ; ---------------------------------------------------------------------------
0000C9A2                            ; Object 2C - Jaws enemy (LZ)
0000C9A2                            ; ---------------------------------------------------------------------------
0000C9A2                            
0000C9A2                            Jaws:
0000C9A2 7000                       		moveq	#0,d0
0000C9A4 1028 0024                  		move.b	obRoutine(a0),d0
0000C9A8 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000C9AC 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000C9B0                            ; ===========================================================================
0000C9B0 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000C9B2 0000                       		dc.w Jaws_Turn-Jaws_Index
0000C9B4                            
0000C9B4 =00000030                  jaws_timecount:	equ $30
0000C9B4 =00000032                  jaws_timedelay:	equ $32
0000C9B4                            ; ===========================================================================
0000C9B4                            
0000C9B4                            Jaws_Main:	; Routine 0
0000C9B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C9B8 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000C9C0 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000C9C6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000C9CC 117C 000A 0020             		move.b	#$A,obColType(a0)
0000C9D2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C9D8 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C9DE 7000                       		moveq	#0,d0
0000C9E0 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000C9E4 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C9E6 5340                       		subq.w	#1,d0
0000C9E8 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000C9EC 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000C9F0 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000C9F6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000C9FC 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000C9FE 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CA02                            
0000CA02                            Jaws_Turn:	; Routine 2
0000CA02 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CA06 6A00                       		bpl.s	@animate	; if time remains, branch
0000CA08 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CA0E 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CA12 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CA18 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CA1E                            
0000CA1E                            	@animate:
0000CA1E 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CA24 6100 FABA                  		bsr.w	AnimateSprite
0000CA28 6100 0000                  		bsr.w	SpeedToPos
0000CA2C 6000 0000                  		bra.w	RememberState
0000CA2C 6000 0000                  		bra.w	RememberState
0000CA30                            		include	"_anim\Jaws.asm"
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30                            ; Animation script - Jaws enemy
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CA32 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CA38                            		even
0000CA38                            		even
0000CA38                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CA38                            ; --------------------------------------------------------------------------------
0000CA38                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CA38                            ; --------------------------------------------------------------------------------
0000CA38                            
0000CA38                            SME_O5C0c:	
0000CA38 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CA3C 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CA40 02                         SME_O5C0c_8:	dc.b 2	
0000CA41 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CA46 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CA4B 02                         SME_O5C0c_13:	dc.b 2	
0000CA4C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CA51 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CA56 02                         SME_O5C0c_1E:	dc.b 2	
0000CA57 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CA5C F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CA61 02                         SME_O5C0c_29:	dc.b 2	
0000CA62 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CA67 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CA6C                            		even
0000CA6C                            		even
0000CA6C                            		include	"_incObj\2D Burrobot.asm"
0000CA6C                            ; ---------------------------------------------------------------------------
0000CA6C                            ; Object 2D - Burrobot enemy (LZ)
0000CA6C                            ; ---------------------------------------------------------------------------
0000CA6C                            
0000CA6C                            Burrobot:
0000CA6C 7000                       		moveq	#0,d0
0000CA6E 1028 0024                  		move.b	obRoutine(a0),d0
0000CA72 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CA76 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CA7A                            ; ===========================================================================
0000CA7A 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CA7C 0000                       		dc.w Burro_Action-Burro_Index
0000CA7E                            
0000CA7E =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CA7E                            ; ===========================================================================
0000CA7E                            
0000CA7E                            Burro_Main:	; Routine 0
0000CA7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CA82 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CA88 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CA8E 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CA96 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CA9C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CAA2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CAA8 117C 0005 0020             		move.b	#5,obColType(a0)
0000CAAE 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CAB4 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CAB8 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CABE                            
0000CABE                            Burro_Action:	; Routine 2
0000CABE 7000                       		moveq	#0,d0
0000CAC0 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CAC4 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CAC8 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CACC 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CAD2 6100 FA0C                  		bsr.w	AnimateSprite
0000CAD6 6000 0000                  		bra.w	RememberState
0000CADA                            ; ===========================================================================
0000CADA 0000                       @index:		dc.w @changedir-@index
0000CADC 0000                       		dc.w Burro_Move-@index
0000CADE 0000                       		dc.w Burro_Jump-@index
0000CAE0 0000                       		dc.w Burro_ChkSonic-@index
0000CAE2                            ; ===========================================================================
0000CAE2                            
0000CAE2                            @changedir:
0000CAE2 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CAE6 6A00                       		bpl.s	@nochg
0000CAE8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CAEC 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CAF2 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CAF8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CAFE 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CB04 6700                       		beq.s	@nochg
0000CB06 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CB0A                            
0000CB0A                            	@nochg:
0000CB0A 4E75                       		rts	
0000CB0C                            ; ===========================================================================
0000CB0C                            
0000CB0C                            Burro_Move:
0000CB0C 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CB10 6B00                       		bmi.s	loc_AD84
0000CB12 6100 0000                  		bsr.w	SpeedToPos
0000CB16 0868 0000 0032             		bchg	#0,$32(a0)
0000CB1C 6600                       		bne.s	loc_AD78
0000CB1E 3628 0008                  		move.w	obX(a0),d3
0000CB22 0643 000C                  		addi.w	#$C,d3
0000CB26 0828 0000 0022             		btst	#0,obStatus(a0)
0000CB2C 6600                       		bne.s	loc_AD6A
0000CB2E 0443 0018                  		subi.w	#$18,d3
0000CB32                            
0000CB32                            loc_AD6A:
0000CB32 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CB38 0C41 000C                  		cmpi.w	#$C,d1
0000CB3C 6C00                       		bge.s	loc_AD84
0000CB3E 4E75                       		rts	
0000CB40                            ; ===========================================================================
0000CB40                            
0000CB40                            loc_AD78:
0000CB40 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CB46 D368 000C                  		add.w	d1,obY(a0)
0000CB4A 4E75                       		rts	
0000CB4C                            ; ===========================================================================
0000CB4C                            
0000CB4C                            loc_AD84:
0000CB4C 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CB52 6700                       		beq.s	loc_ADA4
0000CB54 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CB58 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CB5E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CB64 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CB6A 4E75                       		rts	
0000CB6C                            ; ===========================================================================
0000CB6C                            
0000CB6C                            loc_ADA4:
0000CB6C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CB70 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CB76 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CB7C 4E75                       		rts	
0000CB7E                            ; ===========================================================================
0000CB7E                            
0000CB7E                            Burro_Jump:
0000CB7E 6100 0000                  		bsr.w	SpeedToPos
0000CB82 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CB88 6B00                       		bmi.s	locret_ADF0
0000CB8A 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CB90 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CB96 4A41                       		tst.w	d1
0000CB98 6A00                       		bpl.s	locret_ADF0
0000CB9A D368 000C                  		add.w	d1,obY(a0)
0000CB9E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CBA4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CBAA 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CBB0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBB4 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CBB8                            
0000CBB8                            locret_ADF0:
0000CBB8 4E75                       		rts	
0000CBBA                            ; ===========================================================================
0000CBBA                            
0000CBBA                            Burro_ChkSonic:
0000CBBA 343C 0060                  		move.w	#$60,d2
0000CBBE 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CBC2 6400                       		bcc.s	locret_AE20
0000CBC4 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CBC8 9068 000C                  		sub.w	obY(a0),d0
0000CBCC 6400                       		bcc.s	locret_AE20
0000CBCE 0C40 FF80                  		cmpi.w	#-$80,d0
0000CBD2 6500                       		bcs.s	locret_AE20
0000CBD4 4A78 FE08                  		tst.w	(v_debuguse).w
0000CBD8 6600                       		bne.s	locret_AE20
0000CBDA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBDE 3141 0010                  		move.w	d1,obVelX(a0)
0000CBE2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CBE8                            
0000CBE8                            locret_AE20:
0000CBE8 4E75                       		rts	
0000CBEA                            
0000CBEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CBEA                            
0000CBEA                            
0000CBEA                            Burro_ChkSonic2:
0000CBEA 323C 0080                  		move.w	#$80,d1
0000CBEE 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CBF4 3038 D008                  		move.w	(v_player+obX).w,d0
0000CBF8 9068 0008                  		sub.w	obX(a0),d0
0000CBFC 6400                       		bcc.s	loc_AE40
0000CBFE 4440                       		neg.w	d0
0000CC00 4441                       		neg.w	d1
0000CC02 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CC08                            
0000CC08                            loc_AE40:
0000CC08 B042                       		cmp.w	d2,d0
0000CC0A 4E75                       		rts	
0000CC0C                            ; End of function Burro_ChkSonic2
0000CC0C                            ; End of function Burro_ChkSonic2
0000CC0C                            		include	"_anim\Burrobot.asm"
0000CC0C                            ; ---------------------------------------------------------------------------
0000CC0C                            ; Animation script - Burrobot enemy
0000CC0C                            ; ---------------------------------------------------------------------------
0000CC0C 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CC0E 0000                       		dc.w @walk2-Ani_Burro
0000CC10 0000                       		dc.w @digging-Ani_Burro
0000CC12 0000                       		dc.w @fall-Ani_Burro
0000CC14 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CC18 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CC1C 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CC20 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CC24 00                         		even
0000CC24 00                         		even
0000CC24                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CC24                            ; --------------------------------------------------------------------------------
0000CC24                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CC24                            ; --------------------------------------------------------------------------------
0000CC24                            
0000CC24                            SME_Ag_86:	
0000CC24 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CC28 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CC2C 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CC30 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CC32 02                         SME_Ag_86_E:	dc.b 2	
0000CC33 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CC38 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CC3D 02                         SME_Ag_86_19:	dc.b 2	
0000CC3E EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CC43 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CC48 02                         SME_Ag_86_24:	dc.b 2	
0000CC49 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CC4E 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CC53 02                         SME_Ag_86_2F:	dc.b 2	
0000CC54 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CC59 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CC5E 02                         SME_Ag_86_3A:	dc.b 2	
0000CC5F E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CC64 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CC69 02                         SME_Ag_86_45:	dc.b 2	
0000CC6A F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CC6F F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CC74 02                         SME_Ag_86_50:	dc.b 2	
0000CC75 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CC7A 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CC80 00                         		even
0000CC80 00                         		even
0000CC80                            
0000CC80                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CC80                            ; ---------------------------------------------------------------------------
0000CC80                            ; Object 2F - large grass-covered platforms (MZ)
0000CC80                            ; ---------------------------------------------------------------------------
0000CC80                            
0000CC80                            LargeGrass:
0000CC80 7000                       		moveq	#0,d0
0000CC82 1028 0024                  		move.b	obRoutine(a0),d0
0000CC86 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CC8A 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CC8E                            ; ===========================================================================
0000CC8E 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CC90 0000                       		dc.w LGrass_Action-LGrass_Index
0000CC92                            
0000CC92 =0000002A                  lgrass_origX:	equ $2A
0000CC92 =0000002C                  lgrass_origY:	equ $2C
0000CC92                            
0000CC92 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CC94 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CC96 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CC98 0140                       		dc.b 1,	$40
0000CC9A 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CC9C 0220                       		dc.b 2,	$20
0000CC9E                            ; ===========================================================================
0000CC9E                            
0000CC9E                            LGrass_Main:	; Routine 0
0000CC9E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCA2 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CCAA 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CCB0 117C 0004 0001             		move.b	#4,obRender(a0)
0000CCB6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCBC 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CCC2 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CCC8 7000                       		moveq	#0,d0
0000CCCA 1028 0028                  		move.b	obSubtype(a0),d0
0000CCCE E448                       		lsr.w	#2,d0
0000CCD0 0240 001C                  		andi.w	#$1C,d0
0000CCD4 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CCD8 3019                       		move.w	(a1)+,d0
0000CCDA 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CCDE 214A 0030                  		move.l	a2,$30(a0)
0000CCE2 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CCE6 1151 0014                  		move.b	(a1),obActWid(a0)
0000CCEA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CCF0 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CCF6 08E8 0004 0001             		bset	#4,1(a0)
0000CCFC                            
0000CCFC                            LGrass_Action:	; Routine 2
0000CCFC 6100 0000                  		bsr.w	LGrass_Types
0000CD00 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CD04 6700                       		beq.s	LGrass_Solid
0000CD06 7200                       		moveq	#0,d1
0000CD08 1228 0014                  		move.b	obActWid(a0),d1
0000CD0C 0641 000B                  		addi.w	#$B,d1
0000CD10 6100 BF46                  		bsr.w	ExitPlatform
0000CD14 0829 0003 0022             		btst	#3,obStatus(a1)
0000CD1A 6600 0000                  		bne.w	LGrass_Slope
0000CD1E 4228 0025                  		clr.b	ob2ndRout(a0)
0000CD22 6000                       		bra.s	LGrass_Display
0000CD24                            ; ===========================================================================
0000CD24                            
0000CD24                            LGrass_Slope:
0000CD24 7200                       		moveq	#0,d1
0000CD26 1228 0014                  		move.b	obActWid(a0),d1
0000CD2A 0641 000B                  		addi.w	#$B,d1
0000CD2E 2468 0030                  		movea.l	$30(a0),a2
0000CD32 3428 0008                  		move.w	obX(a0),d2
0000CD36 6100 CEBA                  		bsr.w	SlopeObject2
0000CD3A 6000                       		bra.s	LGrass_Display
0000CD3C                            ; ===========================================================================
0000CD3C                            
0000CD3C                            LGrass_Solid:
0000CD3C 7200                       		moveq	#0,d1
0000CD3E 1228 0014                  		move.b	obActWid(a0),d1
0000CD42 0641 000B                  		addi.w	#$B,d1
0000CD46 343C 0020                  		move.w	#$20,d2
0000CD4A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000CD50 6600                       		bne.s	loc_AF8E
0000CD52 343C 0030                  		move.w	#$30,d2
0000CD56                            
0000CD56                            loc_AF8E:
0000CD56 2468 0030                  		movea.l	$30(a0),a2
0000CD5A 6100 0000                  		bsr.w	SolidObject2F
0000CD5E                            
0000CD5E                            LGrass_Display:
0000CD5E 6100 0000                  		bsr.w	DisplaySprite
0000CD62 6000 0000                  		bra.w	LGrass_ChkDel
0000CD66                            
0000CD66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD66                            
0000CD66                            
0000CD66                            LGrass_Types:
0000CD66 7000                       		moveq	#0,d0
0000CD68 1028 0028                  		move.b	obSubtype(a0),d0
0000CD6C 0240 0007                  		andi.w	#7,d0
0000CD70 D040                       		add.w	d0,d0
0000CD72 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000CD76 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000CD7A                            ; End of function LGrass_Types
0000CD7A                            
0000CD7A                            ; ===========================================================================
0000CD7A 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000CD7C 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000CD7E 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000CD80 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000CD82 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000CD84 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000CD86                            ; ===========================================================================
0000CD86                            
0000CD86                            LGrass_Type00:
0000CD86 4E75                       		rts			; type 00 platform doesn't move
0000CD88                            ; ===========================================================================
0000CD88                            
0000CD88                            LGrass_Type01:
0000CD88 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000CD8C 323C 0020                  		move.w	#$20,d1
0000CD90 6000                       		bra.s	LGrass_Move
0000CD92                            ; ===========================================================================
0000CD92                            
0000CD92                            LGrass_Type02:
0000CD92 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000CD96 323C 0030                  		move.w	#$30,d1
0000CD9A 6000                       		bra.s	LGrass_Move
0000CD9C                            ; ===========================================================================
0000CD9C                            
0000CD9C                            LGrass_Type03:
0000CD9C 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000CDA0 323C 0040                  		move.w	#$40,d1
0000CDA4 6000                       		bra.s	LGrass_Move
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            LGrass_Type04:
0000CDA6 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000CDAA 323C 0060                  		move.w	#$60,d1
0000CDAE                            
0000CDAE                            LGrass_Move:
0000CDAE 0828 0003 0028             		btst	#3,obSubtype(a0)
0000CDB4 6700                       		beq.s	loc_AFF2
0000CDB6 4440                       		neg.w	d0
0000CDB8 D041                       		add.w	d1,d0
0000CDBA                            
0000CDBA                            loc_AFF2:
0000CDBA 3228 002C                  		move.w	lgrass_origY(a0),d1
0000CDBE 9240                       		sub.w	d0,d1
0000CDC0 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000CDC4 4E75                       		rts	
0000CDC6                            ; ===========================================================================
0000CDC6                            
0000CDC6                            LGrass_Type05:
0000CDC6 1028 0034                  		move.b	$34(a0),d0
0000CDCA 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CDCE 6600                       		bne.s	loc_B010
0000CDD0 5500                       		subq.b	#2,d0
0000CDD2 6400                       		bcc.s	loc_B01C
0000CDD4 7000                       		moveq	#0,d0
0000CDD6 6000                       		bra.s	loc_B01C
0000CDD8                            ; ===========================================================================
0000CDD8                            
0000CDD8                            loc_B010:
0000CDD8 5800                       		addq.b	#4,d0
0000CDDA 0C00 0040                  		cmpi.b	#$40,d0
0000CDDE 6500                       		bcs.s	loc_B01C
0000CDE0 103C 0040                  		move.b	#$40,d0
0000CDE4                            
0000CDE4                            loc_B01C:
0000CDE4 1140 0034                  		move.b	d0,$34(a0)
0000CDE8 4EB9 0000 3B42             		jsr	(CalcSine).l
0000CDEE E848                       		lsr.w	#4,d0
0000CDF0 3200                       		move.w	d0,d1
0000CDF2 D068 002C                  		add.w	lgrass_origY(a0),d0
0000CDF6 3140 000C                  		move.w	d0,obY(a0)
0000CDFA 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CE00 6600                       		bne.s	loc_B07A
0000CE02 4A28 0035                  		tst.b	$35(a0)
0000CE06 6600                       		bne.s	loc_B07A
0000CE08 117C 0001 0035             		move.b	#1,$35(a0)
0000CE0E 6100 0000                  		bsr.w	FindNextFreeObj
0000CE12 6600                       		bne.s	loc_B07A
0000CE14 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000CE18 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000CE1E 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000CE24 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000CE28 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000CE2C 0469 0040 0008             		subi.w	#$40,obX(a1)
0000CE32 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CE38 2348 0038                  		move.l	a0,$38(a1)
0000CE3C 2448                       		movea.l	a0,a2
0000CE3E 6100                       		bsr.s	sub_B09C
0000CE40                            
0000CE40                            loc_B07A:
0000CE40 7400                       		moveq	#0,d2
0000CE42 45E8 0036                  		lea	$36(a0),a2
0000CE46 141A                       		move.b	(a2)+,d2
0000CE48 5302                       		subq.b	#1,d2
0000CE4A 6500                       		bcs.s	locret_B09A
0000CE4C                            
0000CE4C                            loc_B086:
0000CE4C 7000                       		moveq	#0,d0
0000CE4E 101A                       		move.b	(a2)+,d0
0000CE50 ED48                       		lsl.w	#6,d0
0000CE52 0640 D000                  		addi.w	#$D000,d0
0000CE56 3240                       		movea.w	d0,a1
0000CE58 3341 003C                  		move.w	d1,$3C(a1)
0000CE5C 51CA FFEE                  		dbf	d2,loc_B086
0000CE60                            
0000CE60                            locret_B09A:
0000CE60 4E75                       		rts	
0000CE62                            
0000CE62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE62                            
0000CE62                            
0000CE62                            sub_B09C:
0000CE62 45EA 0036                  		lea	$36(a2),a2
0000CE66 7000                       		moveq	#0,d0
0000CE68 1012                       		move.b	(a2),d0
0000CE6A 5212                       		addq.b	#1,(a2)
0000CE6C 45F2 0001                  		lea	1(a2,d0.w),a2
0000CE70 3009                       		move.w	a1,d0
0000CE72 0440 D000                  		subi.w	#$D000,d0
0000CE76 EC48                       		lsr.w	#6,d0
0000CE78 0240 007F                  		andi.w	#$7F,d0
0000CE7C 1480                       		move.b	d0,(a2)
0000CE7E 4E75                       		rts	
0000CE80                            ; End of function sub_B09C
0000CE80                            
0000CE80                            ; ===========================================================================
0000CE80                            
0000CE80                            LGrass_ChkDel:
0000CE80 4A28 0035                  		tst.b	$35(a0)
0000CE84 6700                       		beq.s	loc_B0C6
0000CE86 4A28 0001                  		tst.b	obRender(a0)
0000CE8A 6A00                       		bpl.s	LGrass_DelFlames
0000CE8C                            
0000CE8C                            loc_B0C6:
0000CEAA 4E75                       		rts	
0000CEAC                            ; ===========================================================================
0000CEAC                            
0000CEAC                            LGrass_DelFlames:
0000CEAC 7400                       		moveq	#0,d2
0000CEAE                            
0000CEAE                            loc_B0E8:
0000CEAE 45E8 0036                  		lea	$36(a0),a2
0000CEB2 1412                       		move.b	(a2),d2
0000CEB4 421A                       		clr.b	(a2)+
0000CEB6 5302                       		subq.b	#1,d2
0000CEB8 6500                       		bcs.s	locret_B116
0000CEBA                            
0000CEBA                            loc_B0F4:
0000CEBA 7000                       		moveq	#0,d0
0000CEBC 1012                       		move.b	(a2),d0
0000CEBE 421A                       		clr.b	(a2)+
0000CEC0 ED48                       		lsl.w	#6,d0
0000CEC2 0640 D000                  		addi.w	#$D000,d0
0000CEC6 3240                       		movea.w	d0,a1
0000CEC8 6100 0000                  		bsr.w	DeleteChild
0000CECC 51CA FFEC                  		dbf	d2,loc_B0F4
0000CED0 117C 0000 0035             		move.b	#0,$35(a0)
0000CED6 117C 0000 0034             		move.b	#0,$34(a0)
0000CEDC                            
0000CEDC                            locret_B116:
0000CEDC 4E75                       		rts	
0000CEDE                            ; ===========================================================================
0000CEDE                            ; ---------------------------------------------------------------------------
0000CEDE                            ; Collision data for large moving platforms (MZ)
0000CEDE                            ; ---------------------------------------------------------------------------
0000CEDE                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000CF2A                            		even
0000CF2A                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000CF56                            		even
0000CF56                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000CFA2                            		even
0000CFA2                            		even
0000CFA2                            		include	"_incObj\35 Burning Grass.asm"
0000CFA2                            ; ---------------------------------------------------------------------------
0000CFA2                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CFA2                            ; (appears when	you walk on sinking platforms)
0000CFA2                            ; ---------------------------------------------------------------------------
0000CFA2                            
0000CFA2                            GrassFire:
0000CFA2 7000                       		moveq	#0,d0
0000CFA4 1028 0024                  		move.b	obRoutine(a0),d0
0000CFA8 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000CFAC 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000CFB0                            ; ===========================================================================
0000CFB0 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000CFB2 0000                       		dc.w loc_B238-GFire_Index
0000CFB4 0000                       		dc.w GFire_Move-GFire_Index
0000CFB6                            
0000CFB6 =0000002A                  gfire_origX:	equ $2A
0000CFB6                            ; ===========================================================================
0000CFB6                            
0000CFB6                            GFire_Main:	; Routine 0
0000CFB6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFBA 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000CFC2 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000CFC8 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000CFCE 117C 0004 0001             		move.b	#4,obRender(a0)
0000CFD4 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000CFDA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000CFE0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000CFF0 4A28 0028                  		tst.b	obSubtype(a0)
0000CFF4 6700                       		beq.s	loc_B238
0000CFF6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFFA 6000 0000                  		bra.w	GFire_Move
0000CFFE                            ; ===========================================================================
0000CFFE                            
0000CFFE                            loc_B238:	; Routine 2
0000CFFE 2268 0030                  		movea.l	$30(a0),a1
0000D002 3228 0008                  		move.w	obX(a0),d1
0000D006 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D00A 0641 000C                  		addi.w	#$C,d1
0000D00E 3001                       		move.w	d1,d0
0000D010 E248                       		lsr.w	#1,d0
0000D012 1031 0000                  		move.b	(a1,d0.w),d0
0000D016 4440                       		neg.w	d0
0000D018 D068 002C                  		add.w	$2C(a0),d0
0000D01C 3400                       		move.w	d0,d2
0000D01E D068 003C                  		add.w	$3C(a0),d0
0000D022 3140 000C                  		move.w	d0,obY(a0)
0000D026 0C41 0084                  		cmpi.w	#$84,d1
0000D02A 6400                       		bcc.s	loc_B2B0
0000D02C 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D034 0C41 0080                  		cmpi.w	#$80,d1
0000D038 6400                       		bcc.s	loc_B2B0
0000D03A 2028 0008                  		move.l	obX(a0),d0
0000D03E 0680 0008 0000             		addi.l	#$80000,d0
0000D044 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D04A 6600                       		bne.s	loc_B2B0
0000D04C 6100 0000                  		bsr.w	FindNextFreeObj
0000D050 6600                       		bne.s	loc_B2B0
0000D052 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D056 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D05C 3342 002C                  		move.w	d2,$2C(a1)
0000D060 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D066 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D06C 2468 0038                  		movea.l	$38(a0),a2
0000D070 6100 FDF0                  		bsr.w	sub_B09C
0000D074                            
0000D074                            loc_B2B0:
0000D074 6000                       		bra.s	GFire_Animate
0000D076                            ; ===========================================================================
0000D076                            
0000D076                            GFire_Move:	; Routine 4
0000D076 3028 002C                  		move.w	$2C(a0),d0
0000D07A D068 003C                  		add.w	$3C(a0),d0
0000D07E 3140 000C                  		move.w	d0,obY(a0)
0000D082                            
0000D082                            GFire_Animate:
0000D082 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D088 6100 F456                  		bsr.w	AnimateSprite
0000D08C 6000 0000                  		bra.w	DisplaySprite
0000D08C 6000 0000                  		bra.w	DisplaySprite
0000D090                            		include	"_anim\Burning Grass.asm"
0000D090                            ; ---------------------------------------------------------------------------
0000D090                            ; Animation script - burning grass that sits on the floor (MZ)
0000D090                            ; ---------------------------------------------------------------------------
0000D090 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D092 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D098                            		even
0000D098                            		even
0000D098                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D098                            ; ---------------------------------------------------------------------------
0000D098                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D098                            ; ---------------------------------------------------------------------------
0000D098                            Map_LGrass_internal:
0000D098 0000                       		dc.w @wide-Map_LGrass_internal
0000D09A 0000                       		dc.w @sloped-Map_LGrass_internal
0000D09C 0000                       		dc.w @narrow-Map_LGrass_internal
0000D09E 0D                         @wide:		dc.b $D
0000D09F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D0A4 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D0A9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D0AE D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D0B3 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D0B8 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D0BD D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D0C2 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D0C7 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D0CC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D0D1 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D0D6 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D0DB F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D0E0 0A                         @sloped:	dc.b $A
0000D0E1 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D0E6 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D0EB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D0F0 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D0F5 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D0FA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D0FF C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D104 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D109 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D10E E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D113 06                         @narrow:	dc.b 6
0000D114 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D119 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D11E 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D123 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D128 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D12D 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D132                            		even
0000D132                            		even
0000D132                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D132                            ; --------------------------------------------------------------------------------
0000D132                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D132                            ; --------------------------------------------------------------------------------
0000D132                            
0000D132                            SME_gyvTV:	
0000D132 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D136 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D13A 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D13E 01                         SME_gyvTV_C:	dc.b 1	
0000D13F E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D144 01                         SME_gyvTV_12:	dc.b 1	
0000D145 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D14A 01                         SME_gyvTV_18:	dc.b 1	
0000D14B F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D150 01                         SME_gyvTV_1E:	dc.b 1	
0000D151 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D156 01                         SME_gyvTV_24:	dc.b 1	
0000D157 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D15C 01                         SME_gyvTV_2A:	dc.b 1	
0000D15D F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D162                            		even
0000D162                            		even
0000D162                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D162                            ; ---------------------------------------------------------------------------
0000D162                            ; Object 30 - large green glass blocks (MZ)
0000D162                            ; ---------------------------------------------------------------------------
0000D162                            
0000D162                            GlassBlock:
0000D162 7000                       		moveq	#0,d0
0000D164 1028 0024                  		move.b	obRoutine(a0),d0
0000D168 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D16C 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D18E 6000 0000                  		bra.w	DisplaySprite
0000D192                            ; ===========================================================================
0000D192                            
0000D192                            Glass_Delete:
0000D192 6000 0000                  		bra.w	DeleteObject
0000D196                            ; ===========================================================================
0000D196 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D198 0000                       		dc.w Glass_Block012-Glass_Index
0000D19A 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D19C 0000                       		dc.w Glass_Block34-Glass_Index
0000D19E 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D1A0                            
0000D1A0 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D1A0 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D1A0                            
0000D1A0 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D1A3 0400 01                    		dc.b 4,	0, 1
0000D1A6 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D1A9 0800 01                    		dc.b 8,	0, 1
0000D1AC                            ; ===========================================================================
0000D1AC                            
0000D1AC                            Glass_Main:	; Routine 0
0000D1AC 45F9 0000 D1A0             		lea	(Glass_Vars1).l,a2
0000D1B2 7201                       		moveq	#1,d1
0000D1B4 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D1BA 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D1C0 6500                       		bcs.s	@IsType012	; if yes, branch
0000D1C2                            
0000D1C2 45F9 0000 D1A6             		lea	(Glass_Vars2).l,a2
0000D1C8 7201                       		moveq	#1,d1
0000D1CA 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D1D0                            
0000D1D0                            	@IsType012:
0000D1D0 2248                       		movea.l	a0,a1
0000D1D2 6000                       		bra.s	@Load		; load main object
0000D1D4                            ; ===========================================================================
0000D1D4                            
0000D1D4                            	@Repeat:
0000D1D4 6100 0000                  		bsr.w	FindNextFreeObj
0000D1D8 6600                       		bne.s	@Fail
0000D1DA                            
0000D1DA                            @Load:
0000D1DA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D1DE 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D1E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D1E8 101A                       		move.b	(a2)+,d0
0000D1EA 4880                       		ext.w	d0
0000D1EC D068 000C                  		add.w	obY(a0),d0
0000D1F0 3340 000C                  		move.w	d0,obY(a1)
0000D1F4 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D1FC 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D202 137C 0004 0001             		move.b	#4,obRender(a1)
0000D208 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D20E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D214 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D21A 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D220 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D224 2348 003C                  		move.l	a0,glass_parent(a1)
0000D228 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D22C                            
0000D22C 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D232 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D238 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D23C 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D242                            
0000D242                            	@Fail:
0000D242 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D248 08E8 0004 0001             		bset	#4,obRender(a0)
0000D24E                            
0000D24E                            Glass_Block012:	; Routine 2
0000D24E 6100 0000                  		bsr.w	Glass_Types
0000D252 323C 002B                  		move.w	#$2B,d1
0000D256 343C 0048                  		move.w	#$48,d2
0000D25A 363C 0049                  		move.w	#$49,d3
0000D25E 3828 0008                  		move.w	obX(a0),d4
0000D262 6000 0000                  		bra.w	SolidObject
0000D266                            ; ===========================================================================
0000D266                            
0000D266                            Glass_Reflect012:
0000D266                            		; Routine 4
0000D266 2268 003C                  		movea.l	$3C(a0),a1
0000D26A 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D270 6000 0000                  		bra.w	Glass_Types
0000D274                            ; ===========================================================================
0000D274                            
0000D274                            Glass_Block34:	; Routine 6
0000D274 6100 0000                  		bsr.w	Glass_Types
0000D278 323C 002B                  		move.w	#$2B,d1
0000D27C 343C 0038                  		move.w	#$38,d2
0000D280 363C 0039                  		move.w	#$39,d3
0000D284 3828 0008                  		move.w	obX(a0),d4
0000D288 6000 0000                  		bra.w	SolidObject
0000D28C                            ; ===========================================================================
0000D28C                            
0000D28C                            Glass_Reflect34:
0000D28C                            		; Routine 8
0000D28C 2268 003C                  		movea.l	$3C(a0),a1
0000D290 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D296 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D29C 6000 0000                  		bra.w	Glass_Types
0000D2A0                            
0000D2A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2A0                            
0000D2A0                            
0000D2A0                            Glass_Types:
0000D2A0 7000                       		moveq	#0,d0
0000D2A2 1028 0028                  		move.b	obSubtype(a0),d0
0000D2A6 0240 0007                  		andi.w	#7,d0
0000D2AA D040                       		add.w	d0,d0
0000D2AC 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D2B0 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D2B4                            ; End of function Glass_Types
0000D2B4                            
0000D2B4                            ; ===========================================================================
0000D2B4 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D2B6 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D2B8 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D2BA 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D2BC 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D2BE                            ; ===========================================================================
0000D2BE                            
0000D2BE                            Glass_Type00:
0000D2BE 4E75                       		rts	
0000D2C0                            ; ===========================================================================
0000D2C0                            
0000D2C0                            Glass_Type01:
0000D2C0 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2C4 323C 0040                  		move.w	#$40,d1
0000D2C8 6000                       		bra.s	loc_B514
0000D2CA                            ; ===========================================================================
0000D2CA                            
0000D2CA                            Glass_Type02:
0000D2CA 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2CE 323C 0040                  		move.w	#$40,d1
0000D2D2 4440                       		neg.w	d0
0000D2D4 D041                       		add.w	d1,d0
0000D2D6                            
0000D2D6                            loc_B514:
0000D2D6 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D2DC 6700                       		beq.s	loc_B526
0000D2DE 4440                       		neg.w	d0
0000D2E0 D041                       		add.w	d1,d0
0000D2E2 E208                       		lsr.b	#1,d0
0000D2E4 0640 0020                  		addi.w	#$20,d0
0000D2E8                            
0000D2E8                            loc_B526:
0000D2E8 6000 0000                  		bra.w	loc_B5EE
0000D2EC                            ; ===========================================================================
0000D2EC                            
0000D2EC                            Glass_Type03:
0000D2EC 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D2F2 6700                       		beq.s	loc_B53E
0000D2F4 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2F8 0440 0010                  		subi.w	#$10,d0
0000D2FC 6000 0000                  		bra.w	loc_B5EE
0000D300                            ; ===========================================================================
0000D300                            
0000D300                            loc_B53E:
0000D300 0828 0003 0022             		btst	#3,obStatus(a0)
0000D306 6600                       		bne.s	loc_B54E
0000D308 08A8 0000 0034             		bclr	#0,$34(a0)
0000D30E 6000                       		bra.s	loc_B582
0000D310                            ; ===========================================================================
0000D310                            
0000D310                            loc_B54E:
0000D310 4A28 0034                  		tst.b	$34(a0)
0000D314 6600                       		bne.s	loc_B582
0000D316 117C 0001 0034             		move.b	#1,$34(a0)
0000D31C 08E8 0000 0035             		bset	#0,$35(a0)
0000D322 6700                       		beq.s	loc_B582
0000D324 08E8 0007 0034             		bset	#7,$34(a0)
0000D32A 317C 0010 0036             		move.w	#$10,$36(a0)
0000D330 117C 000A 0038             		move.b	#$A,$38(a0)
0000D336 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D33C 6600                       		bne.s	loc_B582
0000D33E 317C 0040 0036             		move.w	#$40,$36(a0)
0000D344                            
0000D344                            loc_B582:
0000D344 4A28 0034                  		tst.b	$34(a0)
0000D348 6A00                       		bpl.s	loc_B5AA
0000D34A 4A28 0038                  		tst.b	$38(a0)
0000D34E 6700                       		beq.s	loc_B594
0000D350 5328 0038                  		subq.b	#1,$38(a0)
0000D354 6600                       		bne.s	loc_B5AA
0000D356                            
0000D356                            loc_B594:
0000D356 4A68 0032                  		tst.w	glass_dist(a0)
0000D35A 6700                       		beq.s	loc_B5A4
0000D35C 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D360 5368 0036                  		subq.w	#1,$36(a0)
0000D364 6600                       		bne.s	loc_B5AA
0000D366                            
0000D366                            loc_B5A4:
0000D366 08A8 0007 0034             		bclr	#7,$34(a0)
0000D36C                            
0000D36C                            loc_B5AA:
0000D36C 3028 0032                  		move.w	glass_dist(a0),d0
0000D370 6000                       		bra.s	loc_B5EE
0000D372                            ; ===========================================================================
0000D372                            
0000D372                            Glass_Type04:
0000D372 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D378 6700                       		beq.s	Glass_ChkSwitch
0000D37A 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D37E 0440 0010                  		subi.w	#$10,d0
0000D382 6000                       		bra.s	loc_B5EE
0000D384                            ; ===========================================================================
0000D384                            
0000D384                            Glass_ChkSwitch:
0000D384 4A28 0034                  		tst.b	$34(a0)
0000D388 6600                       		bne.s	loc_B5E0
0000D38A 45F8 F7E0                  		lea	(f_switch).w,a2
0000D38E 7000                       		moveq	#0,d0
0000D390 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D394 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D396 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D39A 6700                       		beq.s	loc_B5EA	; if not, branch
0000D39C 117C 0001 0034             		move.b	#1,$34(a0)
0000D3A2                            
0000D3A2                            loc_B5E0:
0000D3A2 4A68 0032                  		tst.w	glass_dist(a0)
0000D3A6 6700                       		beq.s	loc_B5EA
0000D3A8 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D3AC                            
0000D3AC                            loc_B5EA:
0000D3AC 3028 0032                  		move.w	glass_dist(a0),d0
0000D3B0                            
0000D3B0                            loc_B5EE:
0000D3B0 3228 0030                  		move.w	$30(a0),d1
0000D3B4 9240                       		sub.w	d0,d1
0000D3B6 3141 000C                  		move.w	d1,obY(a0)
0000D3BA 4E75                       		rts	
0000D3BA 4E75                       		rts	
0000D3BC                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D3BC                            ; --------------------------------------------------------------------------------
0000D3BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D3BC                            ; --------------------------------------------------------------------------------
0000D3BC                            
0000D3BC                            SME_NEyTf:	
0000D3BC 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D3C0 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D3C2 0C                         SME_NEyTf_6:	dc.b $C	
0000D3C3 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D3C8 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D3CD C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D3D2 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D3D7 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D3DC E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D3E1 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D3E6 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D3EB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D3F0 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D3F5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D3FA 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D3FF 02                         SME_NEyTf_43:	dc.b 2	
0000D400 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D405 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D40A 0A                         SME_NEyTf_4E:	dc.b $A	
0000D40B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D410 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D415 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D41A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D41F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D424 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D429 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D42E 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D433 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D438 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D43E 00                         		even
0000D43E 00                         		even
0000D43E                            		include	"_incObj\31 Chained Stompers.asm"
0000D43E                            ; ---------------------------------------------------------------------------
0000D43E                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D43E                            ; ---------------------------------------------------------------------------
0000D43E                            
0000D43E                            ChainStomp:
0000D43E 7000                       		moveq	#0,d0
0000D440 1028 0024                  		move.b	obRoutine(a0),d0
0000D444 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D448 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D44C                            ; ===========================================================================
0000D44C 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D44E 0000                       		dc.w loc_B798-CStom_Index
0000D450 0000                       		dc.w loc_B7FE-CStom_Index
0000D452 0000                       		dc.w CStom_Display2-CStom_Index
0000D454 0000                       		dc.w loc_B7E2-CStom_Index
0000D456                            
0000D456 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D456                            
0000D456 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D458 0100                       		dc.b 1,	0
0000D45A                            
0000D45A 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D45D 041C 01                    		dc.b 4,	$1C, 1
0000D460 08CC 03                    		dc.b 8,	$CC, 3
0000D463 06F0 02                    		dc.b 6,	$F0, 2
0000D466                            
0000D466 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D46A 5000 7800                  		dc.w $5000, $7800
0000D46E 3800 5800                  		dc.w $3800, $5800
0000D472 B800                       		dc.w $B800
0000D474                            ; ===========================================================================
0000D474                            
0000D474                            CStom_Main:	; Routine 0
0000D474 7000                       		moveq	#0,d0
0000D476 1028 0028                  		move.b	obSubtype(a0),d0
0000D47A 6A00                       		bpl.s	loc_B6CE
0000D47C 0240 007F                  		andi.w	#$7F,d0
0000D480 D040                       		add.w	d0,d0
0000D482 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D486 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D48A 101A                       		move.b	(a2)+,d0
0000D48C 1140 0028                  		move.b	d0,obSubtype(a0)
0000D490                            
0000D490                            loc_B6CE:
0000D490 0200 000F                  		andi.b	#$F,d0
0000D494 D040                       		add.w	d0,d0
0000D496 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D49A 4A40                       		tst.w	d0
0000D49C 6600                       		bne.s	loc_B6E0
0000D49E 3142 0032                  		move.w	d2,$32(a0)
0000D4A2                            
0000D4A2                            loc_B6E0:
0000D4A2 45F9 0000 D45A             		lea	(CStom_Var).l,a2
0000D4A8 2248                       		movea.l	a0,a1
0000D4AA 7203                       		moveq	#3,d1
0000D4AC 6000                       		bra.s	CStom_MakeStomper
0000D4AE                            ; ===========================================================================
0000D4AE                            
0000D4AE                            CStom_Loop:
0000D4AE 6100 0000                  		bsr.w	FindNextFreeObj
0000D4B2 6600 0000                  		bne.w	CStom_SetSize
0000D4B6                            
0000D4B6                            CStom_MakeStomper:
0000D4B6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D4BA 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D4BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4C4 101A                       		move.b	(a2)+,d0
0000D4C6 4880                       		ext.w	d0
0000D4C8 D068 000C                  		add.w	obY(a0),d0
0000D4CC 3340 000C                  		move.w	d0,obY(a1)
0000D4D0 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D4D8 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D4DE 137C 0004 0001             		move.b	#4,obRender(a1)
0000D4E4 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D4EA 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D4F0 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D4F6 3342 0034                  		move.w	d2,$34(a1)
0000D4FA 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D500 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D504 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D50A 6600                       		bne.s	loc_B76A
0000D50C 5341                       		subq.w	#1,d1
0000D50E 1028 0028                  		move.b	obSubtype(a0),d0
0000D512 0240 00F0                  		andi.w	#$F0,d0
0000D516 0C40 0020                  		cmpi.w	#$20,d0
0000D51A 679A                       		beq.s	CStom_MakeStomper
0000D51C 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D522 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D528 5241                       		addq.w	#1,d1
0000D52A                            
0000D52A                            loc_B76A:
0000D52A 2348 003C                  		move.l	a0,$3C(a1)
0000D52E 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D532                            
0000D532 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D538                            
0000D538                            CStom_SetSize:
0000D538 7000                       		moveq	#0,d0
0000D53A 1028 0028                  		move.b	obSubtype(a0),d0
0000D53E E648                       		lsr.w	#3,d0
0000D540 0200 000E                  		andi.b	#$E,d0
0000D544 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D548 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D54C 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D550 6000                       		bra.s	loc_B798
0000D552                            ; ===========================================================================
0000D552 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D554 3009                       		dc.b $30, 9
0000D556 100A                       		dc.b $10, $A
0000D558                            ; ===========================================================================
0000D558                            
0000D558                            loc_B798:	; Routine 2
0000D558 6100 0000                  		bsr.w	CStom_Types
0000D55C 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D562 7200                       		moveq	#0,d1
0000D564 1228 0014                  		move.b	obActWid(a0),d1
0000D568 0641 000B                  		addi.w	#$B,d1
0000D56C 343C 000C                  		move.w	#$C,d2
0000D570 363C 000D                  		move.w	#$D,d3
0000D574 3828 0008                  		move.w	obX(a0),d4
0000D578 6100 0000                  		bsr.w	SolidObject
0000D57C 0828 0003 0022             		btst	#3,obStatus(a0)
0000D582 6700                       		beq.s	CStom_Display
0000D584 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D58A 6400                       		bcc.s	CStom_Display
0000D58C 2448                       		movea.l	a0,a2
0000D58E 41F8 D000                  		lea	(v_player).w,a0
0000D592 4EB9 0000 0000             		jsr	(KillSonic).l
0000D598 204A                       		movea.l	a2,a0
0000D59A                            
0000D59A                            CStom_Display:
0000D59A 6100 0000                  		bsr.w	DisplaySprite
0000D59E 6000 0000                  		bra.w	CStom_ChkDel
0000D5A2                            ; ===========================================================================
0000D5A2                            
0000D5A2                            loc_B7E2:	; Routine 8
0000D5A2 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D5A8 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5AE 2268 003C                  		movea.l	$3C(a0),a1
0000D5B2 1029 0032                  		move.b	$32(a1),d0
0000D5B6 EA08                       		lsr.b	#5,d0
0000D5B8 5600                       		addq.b	#3,d0
0000D5BA 1140 001A                  		move.b	d0,obFrame(a0)
0000D5BE                            
0000D5BE                            loc_B7FE:	; Routine 4
0000D5BE 2268 003C                  		movea.l	$3C(a0),a1
0000D5C2 7000                       		moveq	#0,d0
0000D5C4 1029 0032                  		move.b	$32(a1),d0
0000D5C8 D068 0030                  		add.w	$30(a0),d0
0000D5CC 3140 000C                  		move.w	d0,obY(a0)
0000D5D0                            
0000D5D0                            CStom_Display2:	; Routine 6
0000D5D0 6100 0000                  		bsr.w	DisplaySprite
0000D5D4                            
0000D5D4                            CStom_ChkDel:
0000D5F2 4E75                       		rts	
0000D5F4                            ; ===========================================================================
0000D5F4                            
0000D5F4                            CStom_Types:
0000D5F4 1028 0028                  		move.b	obSubtype(a0),d0
0000D5F8 0240 000F                  		andi.w	#$F,d0
0000D5FC D040                       		add.w	d0,d0
0000D5FE 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D602 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D606                            ; ===========================================================================
0000D606 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D608 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D60A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D60C 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D60E 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D610 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D612 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D614                            ; ===========================================================================
0000D614                            
0000D614                            CStom_Type00:
0000D614 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D618 7000                       		moveq	#0,d0
0000D61A 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D61E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D622 6700                       		beq.s	loc_B8A8	; if not, branch
0000D624 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D628 6A00                       		bpl.s	loc_B872
0000D62A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D630 6700                       		beq.s	loc_B8A0
0000D632                            
0000D632                            loc_B872:
0000D632 4A68 0032                  		tst.w	$32(a0)
0000D636 6700                       		beq.s	loc_B8A0
0000D638 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D63C 0200 000F                  		andi.b	#$F,d0
0000D640 6600                       		bne.s	loc_B892
0000D642 4A28 0001                  		tst.b	1(a0)
0000D646 6A00                       		bpl.s	loc_B892
0000D652                            
0000D652                            loc_B892:
0000D652 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D658 6400                       		bcc.s	CStom_Restart
0000D65A 317C 0000 0032             		move.w	#0,$32(a0)
0000D660                            
0000D660                            loc_B8A0:
0000D660 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D666 6000                       		bra.s	CStom_Restart
0000D668                            ; ===========================================================================
0000D668                            
0000D668                            loc_B8A8:
0000D668 3228 0034                  		move.w	$34(a0),d1
0000D66C B268 0032                  		cmp.w	$32(a0),d1
0000D670 6700                       		beq.s	CStom_Restart
0000D672 3028 0012                  		move.w	obVelY(a0),d0
0000D676 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D67C D168 0032                  		add.w	d0,$32(a0)
0000D680 B268 0032                  		cmp.w	$32(a0),d1
0000D684 6200                       		bhi.s	CStom_Restart
0000D686 3141 0032                  		move.w	d1,$32(a0)
0000D68A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D690 4A28 0001                  		tst.b	obRender(a0)
0000D694 6A00                       		bpl.s	CStom_Restart
0000D6A0                            
0000D6A0                            CStom_Restart:
0000D6A0 7000                       		moveq	#0,d0
0000D6A2 1028 0032                  		move.b	$32(a0),d0
0000D6A6 D068 0030                  		add.w	$30(a0),d0
0000D6AA 3140 000C                  		move.w	d0,obY(a0)
0000D6AE 4E75                       		rts	
0000D6B0                            ; ===========================================================================
0000D6B0                            
0000D6B0                            CStom_Type01:
0000D6B0 4A68 0036                  		tst.w	$36(a0)
0000D6B4 6700                       		beq.s	loc_B938
0000D6B6 4A68 0038                  		tst.w	$38(a0)
0000D6BA 6700                       		beq.s	loc_B902
0000D6BC 5368 0038                  		subq.w	#1,$38(a0)
0000D6C0 6000                       		bra.s	loc_B97C
0000D6C2                            ; ===========================================================================
0000D6C2                            
0000D6C2                            loc_B902:
0000D6C2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D6C6 0200 000F                  		andi.b	#$F,d0
0000D6CA 6600                       		bne.s	loc_B91C
0000D6CC 4A28 0001                  		tst.b	obRender(a0)
0000D6D0 6A00                       		bpl.s	loc_B91C
0000D6DC                            
0000D6DC                            loc_B91C:
0000D6DC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D6E2 6400                       		bcc.s	loc_B97C
0000D6E4 317C 0000 0032             		move.w	#0,$32(a0)
0000D6EA 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D6F0 317C 0000 0036             		move.w	#0,$36(a0)
0000D6F6 6000                       		bra.s	loc_B97C
0000D6F8                            ; ===========================================================================
0000D6F8                            
0000D6F8                            loc_B938:
0000D6F8 3228 0034                  		move.w	$34(a0),d1
0000D6FC B268 0032                  		cmp.w	$32(a0),d1
0000D700 6700                       		beq.s	loc_B97C
0000D702 3028 0012                  		move.w	obVelY(a0),d0
0000D706 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D70C D168 0032                  		add.w	d0,$32(a0)
0000D710 B268 0032                  		cmp.w	$32(a0),d1
0000D714 6200                       		bhi.s	loc_B97C
0000D716 3141 0032                  		move.w	d1,$32(a0)
0000D71A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D720 317C 0001 0036             		move.w	#1,$36(a0)
0000D726 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D72C 4A28 0001                  		tst.b	obRender(a0)
0000D730 6A00                       		bpl.s	loc_B97C
0000D73C                            
0000D73C                            loc_B97C:
0000D73C 6000 FF62                  		bra.w	CStom_Restart
0000D740                            ; ===========================================================================
0000D740                            
0000D740                            CStom_Type03:
0000D740 3038 D008                  		move.w	(v_player+obX).w,d0
0000D744 9068 0008                  		sub.w	obX(a0),d0
0000D748 6400                       		bcc.s	loc_B98C
0000D74A 4440                       		neg.w	d0
0000D74C                            
0000D74C                            loc_B98C:
0000D74C 0C40 0090                  		cmpi.w	#$90,d0
0000D750 6400                       		bcc.s	loc_B996
0000D752 5228 0028                  		addq.b	#1,obSubtype(a0)
0000D756                            
0000D756                            loc_B996:
0000D756 6000 FF48                  		bra.w	CStom_Restart
0000D756 6000 FF48                  		bra.w	CStom_Restart
0000D75A                            		include	"_incObj\45 Sideways Stomper.asm"
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            ; Object 45 - spiked metal block from beta version (MZ)
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            
0000D75A                            SideStomp:
0000D75A 7000                       		moveq	#0,d0
0000D75C 1028 0024                  		move.b	obRoutine(a0),d0
0000D760 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000D764 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000D768                            ; ===========================================================================
0000D768 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000D76A 0000                       		dc.w SStom_Solid-SStom_Index
0000D76C 0000                       		dc.w loc_BA8E-SStom_Index
0000D76E 0000                       		dc.w SStom_Display-SStom_Index
0000D770 0000                       		dc.w SStom_Pole-SStom_Index
0000D772                            
0000D772                            		;	routine		frame
0000D772                            		;		 xpos
0000D772 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000D775 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000D778 0834 03                    		dc.b	8,	 $34,	3	; pole
0000D77B 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000D77E                            
0000D77E                            ;word_B9BE:	; Note that this indicates three subtypes
0000D77E 3800                       SStom_Len:	dc.w $3800	; short
0000D780 A000                       		dc.w $A000	; long
0000D782 5000                       		dc.w $5000	; medium
0000D784                            ; ===========================================================================
0000D784                            
0000D784                            SStom_Main:	; Routine 0
0000D784 7000                       		moveq	#0,d0
0000D786 1028 0028                  		move.b	obSubtype(a0),d0
0000D78A D040                       		add.w	d0,d0
0000D78C 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000D790 45F9 0000 D772             		lea	(SStom_Var).l,a2
0000D796 2248                       		movea.l	a0,a1
0000D798 7203                       		moveq	#3,d1
0000D79A 6000                       		bra.s	@load
0000D79C                            
0000D79C                            	@loop:
0000D79C 6100 0000                  		bsr.w	FindNextFreeObj
0000D7A0 6600                       		bne.s	@fail
0000D7A2                            
0000D7A2                            	@load:
0000D7A2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D7A6 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000D7AA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000D7B0 101A                       		move.b	(a2)+,d0
0000D7B2 4880                       		ext.w	d0
0000D7B4 D068 0008                  		add.w	obX(a0),d0
0000D7B8 3340 0008                  		move.w	d0,obX(a1)
0000D7BC 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000D7C4 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D7CA 137C 0004 0001             		move.b	#4,obRender(a1)
0000D7D0 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000D7D6 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000D7DC 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D7E2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D7E8 3342 0034                  		move.w	d2,$34(a1)
0000D7EC 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D7F2 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000D7F6 6600                       		bne.s	@notspikes	; if not, branch
0000D7F8 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000D7FE                            
0000D7FE                            	@notspikes:
0000D7FE 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D802 2348 003C                  		move.l	a0,$3C(a1)
0000D806 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000D80A                            
0000D80A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D810                            
0000D810                            	@fail:
0000D810 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000D816                            
0000D816                            SStom_Solid:	; Routine 2
0000D816 3F28 0008                  		move.w	obX(a0),-(sp)
0000D81A 6100 0000                  		bsr.w	SStom_Move
0000D81E 323C 0017                  		move.w	#$17,d1
0000D822 343C 0020                  		move.w	#$20,d2
0000D826 363C 0020                  		move.w	#$20,d3
0000D82A 381F                       		move.w	(sp)+,d4
0000D82C 6100 0000                  		bsr.w	SolidObject
0000D830 6100 0000                  		bsr.w	DisplaySprite
0000D834 6000 0000                  		bra.w	SStom_ChkDel
0000D838                            ; ===========================================================================
0000D838                            
0000D838                            SStom_Pole:	; Routine 8
0000D838 2268 003C                  		movea.l	$3C(a0),a1
0000D83C 1029 0032                  		move.b	$32(a1),d0
0000D840 0600 0010                  		addi.b	#$10,d0
0000D844 EA08                       		lsr.b	#5,d0
0000D846 5600                       		addq.b	#3,d0
0000D848 1140 001A                  		move.b	d0,obFrame(a0)
0000D84C                            
0000D84C                            loc_BA8E:	; Routine 4
0000D84C 2268 003C                  		movea.l	$3C(a0),a1
0000D850 7000                       		moveq	#0,d0
0000D852 1029 0032                  		move.b	$32(a1),d0
0000D856 4440                       		neg.w	d0
0000D858 D068 0030                  		add.w	$30(a0),d0
0000D85C 3140 0008                  		move.w	d0,obX(a0)
0000D860                            
0000D860                            SStom_Display:	; Routine 6
0000D860 6100 0000                  		bsr.w	DisplaySprite
0000D864                            
0000D864                            SStom_ChkDel:
0000D882 4E75                       		rts	
0000D884                            
0000D884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D884                            
0000D884                            
0000D884                            SStom_Move:
0000D884 7000                       		moveq	#0,d0
0000D886 1028 0028                  		move.b	obSubtype(a0),d0
0000D88A D040                       		add.w	d0,d0
0000D88C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D890 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D894                            ; End of function SStom_Move
0000D894                            
0000D894                            ; ===========================================================================
0000D894                            		; This indicates only two subtypes... that do the same thing
0000D894                            		; Compare to SStom_Len. This breaks subtype 02
0000D894 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D896 0000                       		dc.w loc_BADA-off_BAD6
0000D898                            ; ===========================================================================
0000D898                            
0000D898                            loc_BADA:
0000D898 4A68 0036                  		tst.w	$36(a0)
0000D89C 6700                       		beq.s	loc_BB08
0000D89E 4A68 0038                  		tst.w	$38(a0)
0000D8A2 6700                       		beq.s	loc_BAEC
0000D8A4 5368 0038                  		subq.w	#1,$38(a0)
0000D8A8 6000                       		bra.s	loc_BB3C
0000D8AA                            ; ===========================================================================
0000D8AA                            
0000D8AA                            loc_BAEC:
0000D8AA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D8B0 6400                       		bcc.s	loc_BB3C
0000D8B2 317C 0000 0032             		move.w	#0,$32(a0)
0000D8B8 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D8BE 317C 0000 0036             		move.w	#0,$36(a0)
0000D8C4 6000                       		bra.s	loc_BB3C
0000D8C6                            ; ===========================================================================
0000D8C6                            
0000D8C6                            loc_BB08:
0000D8C6 3228 0034                  		move.w	$34(a0),d1
0000D8CA B268 0032                  		cmp.w	$32(a0),d1
0000D8CE 6700                       		beq.s	loc_BB3C
0000D8D0 3028 0010                  		move.w	obVelX(a0),d0
0000D8D4 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000D8DA D168 0032                  		add.w	d0,$32(a0)
0000D8DE B268 0032                  		cmp.w	$32(a0),d1
0000D8E2 6200                       		bhi.s	loc_BB3C
0000D8E4 3141 0032                  		move.w	d1,$32(a0)
0000D8E8 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D8EE 317C 0001 0036             		move.w	#1,$36(a0)
0000D8F4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D8FA                            
0000D8FA                            loc_BB3C:
0000D8FA 7000                       		moveq	#0,d0
0000D8FC 1028 0032                  		move.b	$32(a0),d0
0000D900 4440                       		neg.w	d0
0000D902 D068 0030                  		add.w	$30(a0),d0
0000D906 3140 0008                  		move.w	d0,obX(a0)
0000D90A 4E75                       		rts	
0000D90A 4E75                       		rts	
0000D90C                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D90C                            ; ---------------------------------------------------------------------------
0000D90C                            Map_CStom_internal:
0000D90C 0000                       		dc.w @wideblock-Map_CStom_internal
0000D90E 0000                       		dc.w @spikes-Map_CStom_internal
0000D910 0000                       		dc.w @ceiling-Map_CStom_internal
0000D912 0000                       		dc.w @chain1-Map_CStom_internal
0000D914 0000                       		dc.w @chain2-Map_CStom_internal
0000D916 0000                       		dc.w @chain3-Map_CStom_internal
0000D918 0000                       		dc.w @chain4-Map_CStom_internal
0000D91A 0000                       		dc.w @chain5-Map_CStom_internal
0000D91C 0000                       		dc.w @chain5-Map_CStom_internal
0000D91E 0000                       		dc.w @mediumblock-Map_CStom_internal
0000D920 0000                       		dc.w @smallblock-Map_CStom_internal
0000D922 05                         @wideblock:	dc.b 5
0000D923 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D928 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D92D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D932 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D937 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D93C 05                         @spikes:	dc.b 5
0000D93D F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D942 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D947 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D94C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D951 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D956 01                         @ceiling:	dc.b 1
0000D957 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D95C 02                         @chain1:	dc.b 2
0000D95D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D962 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D967 04                         @chain2:	dc.b 4
0000D968 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D96D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D972 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D977 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D97C 06                         @chain3:	dc.b 6
0000D97D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D982 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D987 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D98C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D991 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D996 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D99B 08                         @chain4:	dc.b 8
0000D99C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D9A1 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D9A6 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D9AB D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D9B0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9B5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D9BA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9BF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9C4 0A                         @chain5:	dc.b $A
0000D9C5 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D9CA 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D9CF A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D9D4 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D9D9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D9DE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D9E3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9E8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D9ED 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9F2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9F7 05                         @mediumblock:	dc.b 5
0000D9F8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000D9FD F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DA02 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DA07 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DA0C EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DA11 01                         @smallblock:	dc.b 1
0000DA12 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DA18 00                         		even
0000DA18 00                         		even
0000DA18                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DA18                            ; ---------------------------------------------------------------------------
0000DA18                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DA18                            ; ---------------------------------------------------------------------------
0000DA18                            Map_SStom_internal:
0000DA18 0000                       		dc.w @block-Map_SStom_internal
0000DA1A 0000                       		dc.w @spikes-Map_SStom_internal
0000DA1C 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DA1E 0000                       		dc.w @pole1-Map_SStom_internal
0000DA20 0000                       		dc.w @pole2-Map_SStom_internal
0000DA22 0000                       		dc.w @pole3-Map_SStom_internal
0000DA24 0000                       		dc.w @pole4-Map_SStom_internal
0000DA26 0000                       		dc.w @pole5-Map_SStom_internal
0000DA28 0000                       		dc.w @pole5-Map_SStom_internal
0000DA2A 03                         @block:		dc.b 3
0000DA2B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DA30 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DA35 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DA3A 03                         @spikes:	dc.b 3
0000DA3B E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DA40 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DA45 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DA4A 01                         @wallbracket:	dc.b 1
0000DA4B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DA50 02                         @pole1:		dc.b 2
0000DA51 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DA56 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA5B 04                         @pole2:		dc.b 4
0000DA5C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA61 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA66 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA6B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DA70 06                         @pole3:		dc.b 6
0000DA71 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA76 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA7B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA80 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DA85 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DA8A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DA8F 08                         @pole4:		dc.b 8
0000DA90 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA95 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA9A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA9F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DAA4 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DAA9 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAAE F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DAB3 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DAB8 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DAB9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DABE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DAC3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DAC8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DACD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DAD2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAD7 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DADC F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DAE1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DAE6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DAEB                            		; @pole6 should be here, but it isn't...
0000DAEC 00                         		even
0000DAEC 00                         		even
0000DAEC                            
0000DAEC                            		include	"_incObj\32 Button.asm"
0000DAEC                            ; ---------------------------------------------------------------------------
0000DAEC                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DAEC                            ; ---------------------------------------------------------------------------
0000DAEC                            
0000DAEC                            Button:
0000DAEC 7000                       		moveq	#0,d0
0000DAEE 1028 0024                  		move.b	obRoutine(a0),d0
0000DAF2 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DAF6 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DAFA                            ; ===========================================================================
0000DAFA 0000                       But_Index:	dc.w But_Main-But_Index
0000DAFC 0000                       		dc.w But_Pressed-But_Index
0000DAFE                            ; ===========================================================================
0000DAFE                            
0000DAFE                            But_Main:	; Routine 0
0000DAFE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DB02 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DB0A 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DB10 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DB16 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DB18                            
0000DB18 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DB1E                            
0000DB1E                            	But_IsMZ:
0000DB1E 117C 0004 0001             		move.b	#4,obRender(a0)
0000DB24 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB2A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DB30 5668 000C                  		addq.w	#3,obY(a0)
0000DB34                            
0000DB34                            But_Pressed:	; Routine 2
0000DB34 4A28 0001                  		tst.b	obRender(a0)
0000DB38 6A00                       		bpl.s	But_Display
0000DB3A 323C 001B                  		move.w	#$1B,d1
0000DB3E 343C 0005                  		move.w	#5,d2
0000DB42 363C 0005                  		move.w	#5,d3
0000DB46 3828 0008                  		move.w	obX(a0),d4
0000DB4A 6100 0000                  		bsr.w	SolidObject
0000DB4E 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DB54 1028 0028                  		move.b	obSubtype(a0),d0
0000DB58 0240 000F                  		andi.w	#$F,d0
0000DB5C 47F8 F7E0                  		lea	(f_switch).w,a3
0000DB60 47F3 0000                  		lea	(a3,d0.w),a3
0000DB64 7600                       		moveq	#0,d3
0000DB66 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DB6C 6700                       		beq.s	loc_BDB2
0000DB6E 7607                       		moveq	#7,d3
0000DB70                            
0000DB70                            loc_BDB2:
0000DB70 4A28 0028                  		tst.b	obSubtype(a0)
0000DB74 6A00                       		bpl.s	loc_BDBE
0000DB76 6100 0000                  		bsr.w	But_MZBlock
0000DB7A 6600                       		bne.s	loc_BDC8
0000DB7C                            
0000DB7C                            loc_BDBE:
0000DB7C 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DB80 6600                       		bne.s	loc_BDC8
0000DB82 0793                       		bclr	d3,(a3)
0000DB84 6000                       		bra.s	loc_BDDE
0000DB86                            ; ===========================================================================
0000DB86                            
0000DB86                            loc_BDC8:
0000DB86 4A13                       		tst.b	(a3)
0000DB88 6600                       		bne.s	loc_BDD6
0000DB94                            
0000DB94                            loc_BDD6:
0000DB94 07D3                       		bset	d3,(a3)
0000DB96 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DB9C                            
0000DB9C                            loc_BDDE:
0000DB9C 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DBA2 6700                       		beq.s	But_Display
0000DBA4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DBA8 6A00                       		bpl.s	But_Display
0000DBAA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DBB0 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DBB6                            
0000DBB6                            But_Display:
0000DBB6 6100 0000                  		bsr.w	DisplaySprite
0000DBD8 4E75                       		rts	
0000DBDA                            ; ===========================================================================
0000DBDA                            
0000DBDA                            But_Delete:
0000DBDA 6100 0000                  		bsr.w	DeleteObject
0000DBDE 4E75                       		rts	
0000DBE0                            
0000DBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBE0                            
0000DBE0                            
0000DBE0                            But_MZBlock:
0000DBE0 3F03                       		move.w	d3,-(sp)
0000DBE2 3428 0008                  		move.w	obX(a0),d2
0000DBE6 3628 000C                  		move.w	obY(a0),d3
0000DBEA 0442 0010                  		subi.w	#$10,d2
0000DBEE 5143                       		subq.w	#8,d3
0000DBF0 383C 0020                  		move.w	#$20,d4
0000DBF4 3A3C 0010                  		move.w	#$10,d5
0000DBF8 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DBFC 3C3C 005F                  		move.w	#$5F,d6
0000DC00                            
0000DC00                            But_MZLoop:
0000DC00 4A29 0001                  		tst.b	obRender(a1)
0000DC04 6A00                       		bpl.s	loc_BE4E
0000DC06 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DC0A 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DC0C                            
0000DC0C                            loc_BE4E:
0000DC0C 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DC10 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DC14                            
0000DC14 361F                       		move.w	(sp)+,d3
0000DC16 7000                       		moveq	#0,d0
0000DC18                            
0000DC18                            locret_BE5A:
0000DC18 4E75                       		rts	
0000DC1A                            ; ===========================================================================
0000DC1A 1010                       But_MZData:	dc.b $10, $10
0000DC1C                            ; ===========================================================================
0000DC1C                            
0000DC1C                            loc_BE5E:
0000DC1C 7001                       		moveq	#1,d0
0000DC1E 0240 003F                  		andi.w	#$3F,d0
0000DC22 D040                       		add.w	d0,d0
0000DC24 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DC28 121A                       		move.b	(a2)+,d1
0000DC2A 4881                       		ext.w	d1
0000DC2C 3029 0008                  		move.w	obX(a1),d0
0000DC30 9041                       		sub.w	d1,d0
0000DC32 9042                       		sub.w	d2,d0
0000DC34 6400                       		bcc.s	loc_BE80
0000DC36 D241                       		add.w	d1,d1
0000DC38 D041                       		add.w	d1,d0
0000DC3A 6500                       		bcs.s	loc_BE84
0000DC3C 60CE                       		bra.s	loc_BE4E
0000DC3E                            ; ===========================================================================
0000DC3E                            
0000DC3E                            loc_BE80:
0000DC3E B044                       		cmp.w	d4,d0
0000DC40 62CA                       		bhi.s	loc_BE4E
0000DC42                            
0000DC42                            loc_BE84:
0000DC42 121A                       		move.b	(a2)+,d1
0000DC44 4881                       		ext.w	d1
0000DC46 3029 000C                  		move.w	obY(a1),d0
0000DC4A 9041                       		sub.w	d1,d0
0000DC4C 9043                       		sub.w	d3,d0
0000DC4E 6400                       		bcc.s	loc_BE9A
0000DC50 D241                       		add.w	d1,d1
0000DC52 D041                       		add.w	d1,d0
0000DC54 6500                       		bcs.s	loc_BE9E
0000DC56 60B4                       		bra.s	loc_BE4E
0000DC58                            ; ===========================================================================
0000DC58                            
0000DC58                            loc_BE9A:
0000DC58 B045                       		cmp.w	d5,d0
0000DC5A 62B0                       		bhi.s	loc_BE4E
0000DC5C                            
0000DC5C                            loc_BE9E:
0000DC5C 361F                       		move.w	(sp)+,d3
0000DC5E 7001                       		moveq	#1,d0
0000DC60 4E75                       		rts	
0000DC62                            ; End of function But_MZBlock
0000DC62                            ; End of function But_MZBlock
0000DC62                            Map_But:	include	"_maps\Button.asm"
0000DC62                            ; ---------------------------------------------------------------------------
0000DC62                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DC62                            ; ---------------------------------------------------------------------------
0000DC62                            Map_But_internal:
0000DC62 0000                       		dc.w byte_BEAC-Map_But_internal
0000DC64 0000                       		dc.w byte_BEB7-Map_But_internal
0000DC66 0000                       		dc.w byte_BEC2-Map_But_internal
0000DC68 0000                       		dc.w byte_BEB7-Map_But_internal
0000DC6A 02                         byte_BEAC:	dc.b 2
0000DC6B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DC70 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DC75 02                         byte_BEB7:	dc.b 2
0000DC76 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DC7B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DC80 02                         byte_BEC2:	dc.b 2
0000DC81 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DC86 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DC8B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DC90                            		even
0000DC90                            		even
0000DC90                            
0000DC90                            		include	"_incObj\33 Pushable Blocks.asm"
0000DC90                            ; ---------------------------------------------------------------------------
0000DC90                            ; Object 33 - pushable blocks (MZ, LZ)
0000DC90                            ; ---------------------------------------------------------------------------
0000DC90                            
0000DC90                            PushBlock:
0000DC90 7000                       		moveq	#0,d0
0000DC92 1028 0024                  		move.b	obRoutine(a0),d0
0000DC96 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DC9A 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DC9E                            ; ===========================================================================
0000DC9E 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DCA0 0000                       		dc.w loc_BF6E-PushB_Index
0000DCA2 0000                       		dc.w loc_C02C-PushB_Index
0000DCA4                            
0000DCA4 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DCA6 4001                       		dc.b $40, 1
0000DCA8                            ; ===========================================================================
0000DCA8                            
0000DCA8                            PushB_Main:	; Routine 0
0000DCA8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DCAC 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DCB2 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DCB8 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DCC0 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DCC6 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DCCC 6600                       		bne.s	@notLZ
0000DCCE 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DCD4                            
0000DCD4                            	@notLZ:
0000DCD4 117C 0004 0001             		move.b	#4,obRender(a0)
0000DCDA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DCE0 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DCE6 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DCEC 7000                       		moveq	#0,d0
0000DCEE 1028 0028                  		move.b	obSubtype(a0),d0
0000DCF2 D040                       		add.w	d0,d0
0000DCF4 0240 000E                  		andi.w	#$E,d0
0000DCF8 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DCFC 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DD00 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DD04 4A28 0028                  		tst.b	obSubtype(a0)
0000DD08 6700                       		beq.s	@chkgone
0000DD0A 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DD10                            
0000DD10                            	@chkgone:
0000DD10 45F8 FC00                  		lea	(v_objstate).w,a2
0000DD14 7000                       		moveq	#0,d0
0000DD16 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DD1A 6700                       		beq.s	loc_BF6E
0000DD1C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DD22 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DD28 6600 0000                  		bne.w	DeleteObject
0000DD2C                            
0000DD2C                            loc_BF6E:	; Routine 2
0000DD2C 4A28 0032                  		tst.b	$32(a0)
0000DD30 6600 0000                  		bne.w	loc_C046
0000DD34 7200                       		moveq	#0,d1
0000DD36 1228 0014                  		move.b	obActWid(a0),d1
0000DD3A 0641 000B                  		addi.w	#$B,d1
0000DD3E 343C 0010                  		move.w	#$10,d2
0000DD42 363C 0011                  		move.w	#$11,d3
0000DD46 3828 0008                  		move.w	obX(a0),d4
0000DD4A 6100 0000                  		bsr.w	loc_C186
0000DD4E 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000DD54 6600                       		bne.s	loc_BFC6	; if not, branch
0000DD56 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000DD5C 3028 0008                  		move.w	obX(a0),d0
0000DD60 0C40 0A20                  		cmpi.w	#$A20,d0
0000DD64 6500                       		bcs.s	loc_BFC6
0000DD66 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000DD6A 6400                       		bcc.s	loc_BFC6
0000DD6C 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000DD70 0440 001C                  		subi.w	#$1C,d0
0000DD74 3140 000C                  		move.w	d0,obY(a0)
0000DD78 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000DD7E 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000DD84                            
0000DD84                            	loc_BFC6:
0000DDA0 6000 0000                  		bra.w	DisplaySprite
0000DDA4                            ; ===========================================================================
0000DDA4                            
0000DDA4                            loc_ppppp:
0000DDC0 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000DDC6 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000DDCC 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000DDD2 6000                       		bra.s	loc_C02C
0000DDD4                            ; ===========================================================================
0000DDD4                            
0000DDD4                            loc_C016:
0000DDD4 45F8 FC00                  		lea	(v_objstate).w,a2
0000DDD8 7000                       		moveq	#0,d0
0000DDDA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DDDE 6700                       		beq.s	loc_C028
0000DDE0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DDE6                            
0000DDE6                            loc_C028:
0000DDE6 6000 0000                  		bra.w	DeleteObject
0000DDEA                            ; ===========================================================================
0000DDEA                            
0000DDEA                            loc_C02C:	; Routine 4
0000DDEA 6100 0000                  		bsr.w	ChkPartiallyVisible
0000DDEE 6700                       		beq.s	locret_C044
0000DDF0 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000DDF6 4228 0032                  		clr.b	$32(a0)
0000DDFA 4268 0010                  		clr.w	obVelX(a0)
0000DDFE 4268 0012                  		clr.w	obVelY(a0)
0000DE02                            
0000DE02                            locret_C044:
0000DE02 4E75                       		rts	
0000DE04                            ; ===========================================================================
0000DE04                            
0000DE04                            loc_C046:
0000DE04 3F28 0008                  		move.w	obX(a0),-(sp)
0000DE08 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000DE0E 6400                       		bcc.s	loc_C056
0000DE10 6100 0000                  		bsr.w	SpeedToPos
0000DE14                            
0000DE14                            loc_C056:
0000DE14 0828 0001 0022             		btst	#1,obStatus(a0)
0000DE1A 6700                       		beq.s	loc_C0A0
0000DE1C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DE22 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DE28 4A41                       		tst.w	d1
0000DE2A 6A00 0000                  		bpl.w	loc_C09E
0000DE2E D368 000C                  		add.w	d1,obY(a0)
0000DE32 4268 0012                  		clr.w	obVelY(a0)
0000DE36 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000DE3C 3011                       		move.w	(a1),d0
0000DE3E 0240 03FF                  		andi.w	#$3FF,d0
0000DE42 0C40 016A                  		cmpi.w	#$16A,d0
0000DE46 6500                       		bcs.s	loc_C09E
0000DE48 3028 0030                  		move.w	$30(a0),d0
0000DE4C E640                       		asr.w	#3,d0
0000DE4E 3140 0010                  		move.w	d0,obVelX(a0)
0000DE52 117C 0001 0032             		move.b	#1,$32(a0)
0000DE58 4268 000E                  		clr.w	$E(a0)
0000DE5C                            
0000DE5C                            loc_C09E:
0000DE5C 6000                       		bra.s	loc_C0E6
0000DE5E                            ; ===========================================================================
0000DE5E                            
0000DE5E                            loc_C0A0:
0000DE5E 4A68 0010                  		tst.w	obVelX(a0)
0000DE62 6700 0000                  		beq.w	loc_C0D6
0000DE66 6B00                       		bmi.s	loc_C0BC
0000DE68 7600                       		moveq	#0,d3
0000DE6A 1628 0014                  		move.b	obActWid(a0),d3
0000DE6E 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000DE74 4A41                       		tst.w	d1		; has block touched a wall?
0000DE76 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DE78 6000                       		bra.s	loc_C0E6
0000DE7A                            ; ===========================================================================
0000DE7A                            
0000DE7A                            loc_C0BC:
0000DE7A 7600                       		moveq	#0,d3
0000DE7C 1628 0014                  		move.b	obActWid(a0),d3
0000DE80 4643                       		not.w	d3
0000DE82 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000DE88 4A41                       		tst.w	d1		; has block touched a wall?
0000DE8A 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DE8C 6000                       		bra.s	loc_C0E6
0000DE8E                            ; ===========================================================================
0000DE8E                            
0000DE8E                            PushB_StopPush:
0000DE8E 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000DE92 6000                       		bra.s	loc_C0E6
0000DE94                            ; ===========================================================================
0000DE94                            
0000DE94                            loc_C0D6:
0000DE94 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000DE9C 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000DEA2 6400                       		bcc.s	loc_C104
0000DEA4                            
0000DEA4                            loc_C0E6:
0000DEA4 7200                       		moveq	#0,d1
0000DEA6 1228 0014                  		move.b	obActWid(a0),d1
0000DEAA 0641 000B                  		addi.w	#$B,d1
0000DEAE 343C 0010                  		move.w	#$10,d2
0000DEB2 363C 0011                  		move.w	#$11,d3
0000DEB6 381F                       		move.w	(sp)+,d4
0000DEB8 6100 0000                  		bsr.w	loc_C186
0000DEBC 6100                       		bsr.s	PushB_ChkLava
0000DEBE 6000 FEC4                  		bra.w	loc_BFC6
0000DEC2                            ; ===========================================================================
0000DEC2                            
0000DEC2                            loc_C104:
0000DEC2 381F                       		move.w	(sp)+,d4
0000DEC4 43F8 D000                  		lea	(v_player).w,a1
0000DEC8 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000DECE 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000DED4 6000 FECE                  		bra.w	loc_ppppp
0000DED8                            ; ===========================================================================
0000DED8                            
0000DED8                            PushB_ChkLava:
0000DED8 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000DEDE 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000DEE0 343C FFE0                  		move.w	#-$20,d2
0000DEE4 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000DEEA 6700                       		beq.s	PushB_LoadLava
0000DEEC 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000DEF2 6700                       		beq.s	PushB_LoadLava
0000DEF4 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000DEFA 6700                       		beq.s	PushB_LoadLava
0000DEFC 4E75                       		rts	
0000DEFE                            ; ===========================================================================
0000DEFE                            
0000DEFE                            PushB_ChkLava2:
0000DEFE 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000DF04 6600                       		bne.s	PushB_NoLava	; if not, branch
0000DF06 343C 0020                  		move.w	#$20,d2
0000DF0A 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000DF10 6700                       		beq.s	PushB_LoadLava
0000DF12 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000DF18 6700                       		beq.s	PushB_LoadLava
0000DF1A                            
0000DF1A                            PushB_NoLava:
0000DF1A 4E75                       		rts	
0000DF1C                            ; ===========================================================================
0000DF1C                            
0000DF1C                            PushB_LoadLava:
0000DF1C 6100 0000                  		bsr.w	FindFreeObj
0000DF20 6600                       		bne.s	locret_C184
0000DF22 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000DF26 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DF2C D569 0008                  		add.w	d2,obX(a1)
0000DF30 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DF36 0669 0010 000C             		addi.w	#$10,obY(a1)
0000DF3C 2348 003C                  		move.l	a0,$3C(a1)
0000DF40                            
0000DF40                            locret_C184:
0000DF40 4E75                       		rts	
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            loc_C186:
0000DF42 1028 0025                  		move.b	ob2ndRout(a0),d0
0000DF46 6700 0000                  		beq.w	loc_C218
0000DF4A 5500                       		subq.b	#2,d0
0000DF4C 6600                       		bne.s	loc_C1AA
0000DF4E 6100 AD08                  		bsr.w	ExitPlatform
0000DF52 0829 0003 0022             		btst	#3,obStatus(a1)
0000DF58 6600                       		bne.s	loc_C1A4
0000DF5A 4228 0025                  		clr.b	ob2ndRout(a0)
0000DF5E 4E75                       		rts	
0000DF60                            ; ===========================================================================
0000DF60                            
0000DF60                            loc_C1A4:
0000DF60 3404                       		move.w	d4,d2
0000DF62 6000 B252                  		bra.w	MvSonicOnPtfm
0000DF66                            ; ===========================================================================
0000DF66                            
0000DF66                            loc_C1AA:
0000DF66 5500                       		subq.b	#2,d0
0000DF68 6600                       		bne.s	loc_C1F2
0000DF6A 6100 0000                  		bsr.w	SpeedToPos
0000DF6E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DF74 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DF7A 4A41                       		tst.w	d1
0000DF7C 6A00 0000                  		bpl.w	locret_C1F0
0000DF80 D368 000C                  		add.w	d1,obY(a0)
0000DF84 4268 0012                  		clr.w	obVelY(a0)
0000DF88 4228 0025                  		clr.b	ob2ndRout(a0)
0000DF8C 3011                       		move.w	(a1),d0
0000DF8E 0240 03FF                  		andi.w	#$3FF,d0
0000DF92 0C40 016A                  		cmpi.w	#$16A,d0
0000DF96 6500                       		bcs.s	locret_C1F0
0000DF98 3028 0030                  		move.w	$30(a0),d0
0000DF9C E640                       		asr.w	#3,d0
0000DF9E 3140 0010                  		move.w	d0,obVelX(a0)
0000DFA2 117C 0001 0032             		move.b	#1,$32(a0)
0000DFA8 4268 000E                  		clr.w	obY+2(a0)
0000DFAC                            
0000DFAC                            locret_C1F0:
0000DFAC 4E75                       		rts	
0000DFAE                            ; ===========================================================================
0000DFAE                            
0000DFAE                            loc_C1F2:
0000DFAE 6100 0000                  		bsr.w	SpeedToPos
0000DFB2 3028 0008                  		move.w	obX(a0),d0
0000DFB6 0240 000C                  		andi.w	#$C,d0
0000DFBA 6600 0000                  		bne.w	locret_C2E4
0000DFBE 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000DFC4 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000DFCA 4268 0010                  		clr.w	obVelX(a0)
0000DFCE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000DFD2 4E75                       		rts	
0000DFD4                            ; ===========================================================================
0000DFD4                            
0000DFD4                            loc_C218:
0000DFD4 6100 0000                  		bsr.w	Solid_ChkEnter
0000DFD8 4A44                       		tst.w	d4
0000DFDA 6700 0000                  		beq.w	locret_C2E4
0000DFDE 6B00 0000                  		bmi.w	locret_C2E4
0000DFE2 4A28 0032                  		tst.b	$32(a0)
0000DFE6 6700                       		beq.s	loc_C230
0000DFE8 6000 0000                  		bra.w	locret_C2E4
0000DFEC                            ; ===========================================================================
0000DFEC                            
0000DFEC                            loc_C230:
0000DFEC 4A40                       		tst.w	d0
0000DFEE 6700 0000                  		beq.w	locret_C2E4
0000DFF2 6B00                       		bmi.s	loc_C268
0000DFF4 0829 0000 0022             		btst	#0,obStatus(a1)
0000DFFA 6600 0000                  		bne.w	locret_C2E4
0000DFFE 3F00                       		move.w	d0,-(sp)
0000E000 7600                       		moveq	#0,d3
0000E002 1628 0014                  		move.b	obActWid(a0),d3
0000E006 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E00C 301F                       		move.w	(sp)+,d0
0000E00E 4A41                       		tst.w	d1
0000E010 6B00 0000                  		bmi.w	locret_C2E4
0000E014 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E01C 7001                       		moveq	#1,d0
0000E01E 323C 0040                  		move.w	#$40,d1
0000E022 6000                       		bra.s	loc_C294
0000E024                            ; ===========================================================================
0000E024                            
0000E024                            loc_C268:
0000E024 0829 0000 0022             		btst	#0,obStatus(a1)
0000E02A 6700                       		beq.s	locret_C2E4
0000E02C 3F00                       		move.w	d0,-(sp)
0000E02E 7600                       		moveq	#0,d3
0000E030 1628 0014                  		move.b	obActWid(a0),d3
0000E034 4643                       		not.w	d3
0000E036 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E03C 301F                       		move.w	(sp)+,d0
0000E03E 4A41                       		tst.w	d1
0000E040 6B00                       		bmi.s	locret_C2E4
0000E042 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E04A 70FF                       		moveq	#-1,d0
0000E04C 323C FFC0                  		move.w	#-$40,d1
0000E050                            
0000E050                            loc_C294:
0000E050 43F8 D000                  		lea	(v_player).w,a1
0000E054 D169 0008                  		add.w	d0,obX(a1)
0000E058 3341 0020                  		move.w	d1,obInertia(a1)
0000E05C 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E062 3F00                       		move.w	d0,-(sp)
0000E06E 301F                       		move.w	(sp)+,d0
0000E070 4A28 0028                  		tst.b	obSubtype(a0)
0000E074 6B00                       		bmi.s	locret_C2E4
0000E076 3F00                       		move.w	d0,-(sp)
0000E078 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E07E 301F                       		move.w	(sp)+,d0
0000E080 0C41 0004                  		cmpi.w	#4,d1
0000E084 6F00                       		ble.s	loc_C2E0
0000E086 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E08C 4A40                       		tst.w	d0
0000E08E 6A00                       		bpl.s	loc_C2D8
0000E090 4468 0010                  		neg.w	obVelX(a0)
0000E094                            
0000E094                            loc_C2D8:
0000E094 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E09A 6000                       		bra.s	locret_C2E4
0000E09C                            ; ===========================================================================
0000E09C                            
0000E09C                            loc_C2E0:
0000E09C D368 000C                  		add.w	d1,obY(a0)
0000E0A0                            
0000E0A0                            locret_C2E4:
0000E0A0 4E75                       		rts	
0000E0A0 4E75                       		rts	
0000E0A2                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E0A2                            ; ---------------------------------------------------------------------------
0000E0A2                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E0A2                            ; ---------------------------------------------------------------------------
0000E0A2                            Map_Push_internal:
0000E0A2 0000                       		dc.w @single-Map_Push_internal
0000E0A4 0000                       		dc.w @four-Map_Push_internal
0000E0A6 01                         @single:	dc.b 1
0000E0A7 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E0AC 04                         @four:		dc.b 4
0000E0AD F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E0B2 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E0B7 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E0BC F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E0C2 00                         		even
0000E0C2 00                         		even
0000E0C2                            
0000E0C2                            		include	"_incObj\34 Title Cards.asm"
0000E0C2                            ; ---------------------------------------------------------------------------
0000E0C2                            ; Object 34 - zone title cards
0000E0C2                            ; ---------------------------------------------------------------------------
0000E0C2                            
0000E0C2                            TitleCard:
0000E0C2 7000                       		moveq	#0,d0
0000E0C4 1028 0024                  		move.b	obRoutine(a0),d0
0000E0C8 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E0CC 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E0D0                            ; ===========================================================================
0000E0D0 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E0D2 0000                       		dc.w Card_ChkPos-Card_Index
0000E0D4 0000                       		dc.w Card_Wait-Card_Index
0000E0D6 0000                       		dc.w Card_Wait-Card_Index
0000E0D8                            
0000E0D8 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E0D8 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E0D8                            ; ===========================================================================
0000E0D8                            
0000E0D8                            Card_CheckSBZ3:	; Routine 0
0000E0D8 2248                       		movea.l	a0,a1
0000E0DA 7000                       		moveq	#0,d0
0000E0DC 1038 FE10                  		move.b	(v_zone).w,d0
0000E0E0 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E0E6 6600                       		bne.s	Card_CheckFZ
0000E0E8 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E0EA                            
0000E0EA                            	Card_CheckFZ:
0000E0EA 3400                       		move.w	d0,d2
0000E0EC 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E0F2 6600                       		bne.s	Card_LoadConfig
0000E0F4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E0F6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E0F8                            
0000E0F8                            	Card_LoadConfig:
0000E0F8 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E0FE E948                       		lsl.w	#4,d0
0000E100 D6C0                       		adda.w	d0,a3
0000E102 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E108 7203                       		moveq	#3,d1
0000E10A                            
0000E10A                            Card_Loop:
0000E10A 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E10E 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E112 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E116 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E11A 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E11E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E122 101A                       		move.b	(a2)+,d0
0000E124 6600                       		bne.s	Card_ActNumber
0000E126 1002                       		move.b	d2,d0
0000E128                            
0000E128                            	Card_ActNumber:
0000E128 0C00 0007                  		cmpi.b	#7,d0
0000E12C 6600                       		bne.s	Card_MakeSprite
0000E12E D038 FE11                  		add.b	(v_act).w,d0
0000E132 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E138 6600                       		bne.s	Card_MakeSprite
0000E13A 5300                       		subq.b	#1,d0
0000E13C                            
0000E13C                            	Card_MakeSprite:
0000E13C 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E140 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E148 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E14E 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E154 137C 0000 0001             		move.b	#0,obRender(a1)
0000E15A 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E160 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E166 43E9 0040                  		lea	$40(a1),a1	; next object
0000E16A 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E16E                            
0000E16E                            Card_ChkPos:	; Routine 2
0000E16E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E170 3028 0030                  		move.w	card_mainX(a0),d0
0000E174 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E178 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E17A 6C00                       		bge.s	Card_Move
0000E17C 4441                       		neg.w	d1
0000E17E                            
0000E17E                            Card_Move:
0000E17E D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E182                            
0000E182                            Card_NoMove:
0000E182 3028 0008                  		move.w	obX(a0),d0
0000E186 6B00                       		bmi.s	locret_C3D8
0000E188 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E18C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E18E 6000 0000                  		bra.w	DisplaySprite
0000E192                            ; ===========================================================================
0000E192                            
0000E192                            locret_C3D8:
0000E192 4E75                       		rts	
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            Card_Wait:	; Routine 4/6
0000E194 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E198 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E19A 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E19E 6000 0000                  		bra.w	DisplaySprite
0000E1A2                            ; ===========================================================================
0000E1A2                            
0000E1A2                            Card_ChkPos2:
0000E1A2 4A28 0001                  		tst.b	obRender(a0)
0000E1A6 6A00                       		bpl.s	Card_ChangeArt
0000E1A8 7220                       		moveq	#$20,d1
0000E1AA 3028 0032                  		move.w	card_finalX(a0),d0
0000E1AE B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E1B2 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E1B4 6C00                       		bge.s	Card_Move2
0000E1B6 4441                       		neg.w	d1
0000E1B8                            
0000E1B8                            Card_Move2:
0000E1B8 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E1BC 3028 0008                  		move.w	obX(a0),d0
0000E1C0 6B00                       		bmi.s	locret_C412
0000E1C2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E1C6 6400                       		bcc.s	locret_C412	; if yes, branch
0000E1C8 6000 0000                  		bra.w	DisplaySprite
0000E1CC                            ; ===========================================================================
0000E1CC                            
0000E1CC                            locret_C412:
0000E1CC 4E75                       		rts	
0000E1CE                            ; ===========================================================================
0000E1CE                            
0000E1CE                            Card_ChangeArt:
0000E1CE 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E1D4 6600                       		bne.s	Card_Delete
0000E1D6 7000                       		moveq	#plcid_Explode,d0
0000E1D8 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E1DE 7000                       		moveq	#0,d0
0000E1E0 1038 FE10                  		move.b	(v_zone).w,d0
0000E1E4 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E1E8 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E1EE                            
0000E1EE                            Card_Delete:
0000E1EE 6000 0000                  		bra.w	DeleteObject
0000E1F2                            ; ===========================================================================
0000E1F2 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E1F4 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E1F6 00E4                       		dc.w $E4
0000E1F8 0206                       		dc.b 2,	6
0000E1FA 00EA                       		dc.w $EA
0000E1FC 0207                       		dc.b 2,	7
0000E1FE 00E0                       		dc.w $E0
0000E200 020A                       		dc.b 2,	$A
0000E202                            ; ---------------------------------------------------------------------------
0000E202                            ; Title	card configuration data
0000E202                            ; Format:
0000E202                            ; 4 bytes per item (YYYY XXXX)
0000E202                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E202                            ; ---------------------------------------------------------------------------
0000E202 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E212 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E222 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E232 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E242 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E252 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E262 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E272                            ; ===========================================================================
0000E272                            ; ===========================================================================
0000E272                            		include	"_incObj\39 Game Over.asm"
0000E272                            ; ---------------------------------------------------------------------------
0000E272                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E272                            ; ---------------------------------------------------------------------------
0000E272                            
0000E272                            GameOverCard:
0000E272 7000                       		moveq	#0,d0
0000E274 1028 0024                  		move.b	obRoutine(a0),d0
0000E278 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E27C 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E280                            ; ===========================================================================
0000E280 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E282 0000                       		dc.w Over_Move-Over_Index
0000E284 0000                       		dc.w Over_Wait-Over_Index
0000E286                            ; ===========================================================================
0000E286                            
0000E286                            Over_ChkPLC:	; Routine 0
0000E286 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E28A 6700                       		beq.s	Over_Main	; if yes, branch
0000E28C 4E75                       		rts	
0000E28E                            ; ===========================================================================
0000E28E                            
0000E28E                            Over_Main:
0000E28E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E292 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E298 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E29E 6700                       		beq.s	Over_1stWord	; if not, branch
0000E2A0 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E2A6                            
0000E2A6                            	Over_1stWord:
0000E2A6 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E2AC 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E2B4 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E2BA 117C 0000 0001             		move.b	#0,obRender(a0)
0000E2C0 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E2C6                            
0000E2C6                            Over_Move:	; Routine 2
0000E2C6 7210                       		moveq	#$10,d1		; set horizontal speed
0000E2C8 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E2CE 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E2D0 6500                       		bcs.s	Over_UpdatePos
0000E2D2 4441                       		neg.w	d1
0000E2D4                            
0000E2D4                            	Over_UpdatePos:
0000E2D4 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E2D8 6000 0000                  		bra.w	DisplaySprite
0000E2DC                            ; ===========================================================================
0000E2DC                            
0000E2DC                            Over_SetWait:
0000E2DC 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E2E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2E6 4E75                       		rts	
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            Over_Wait:	; Routine 4
0000E2E8 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E2EC 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E2F0 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E2F2 0828 0000 001A             		btst	#0,obFrame(a0)
0000E2F8 6600                       		bne.s	Over_Display
0000E2FA 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E2FE 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E300 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E304 6000 0000                  		bra.w	DisplaySprite
0000E308                            ; ===========================================================================
0000E308                            
0000E308                            Over_ChgMode:
0000E308 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E30C 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E30E 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E314 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E318 6600                       		bne.s	Over_Display	; if yes, branch
0000E31A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E320 6000                       		bra.s	Over_Display
0000E322                            ; ===========================================================================
0000E322                            
0000E322                            Over_ResetLvl:
0000E322 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E326 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E32C                            
0000E32C                            Over_Display:
0000E32C 6000 0000                  		bra.w	DisplaySprite
0000E32C 6000 0000                  		bra.w	DisplaySprite
0000E330                            		include	"_incObj\3A Got Through Card.asm"
0000E330                            ; ---------------------------------------------------------------------------
0000E330                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E330                            ; ---------------------------------------------------------------------------
0000E330                            
0000E330                            GotThroughCard:
0000E330 7000                       		moveq	#0,d0
0000E332 1028 0024                  		move.b	obRoutine(a0),d0
0000E336 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E33A 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E33E                            ; ===========================================================================
0000E33E 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E340 0000                       		dc.w Got_Move-Got_Index
0000E342 0000                       		dc.w Got_Wait-Got_Index
0000E344 0000                       		dc.w Got_TimeBonus-Got_Index
0000E346 0000                       		dc.w Got_Wait-Got_Index
0000E348 0000                       		dc.w Got_NextLevel-Got_Index
0000E34A 0000                       		dc.w Got_Wait-Got_Index
0000E34C 0000                       		dc.w Got_Move2-Got_Index
0000E34E 0000                       		dc.w loc_C766-Got_Index
0000E350                            
0000E350 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E350 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E350                            ; ===========================================================================
0000E350                            
0000E350                            Got_ChkPLC:	; Routine 0
0000E350 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E354 6700                       		beq.s	Got_Main	; if yes, branch
0000E356 4E75                       		rts	
0000E358                            ; ===========================================================================
0000E358                            
0000E358                            Got_Main:
0000E358 2248                       		movea.l	a0,a1
0000E35A 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E360 7206                       		moveq	#6,d1
0000E362                            
0000E362                            Got_Loop:
0000E362 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E366 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E36A 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E36E 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E372 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E376 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E37A 101A                       		move.b	(a2)+,d0
0000E37C 0C00 0006                  		cmpi.b	#6,d0
0000E380 6600                       		bne.s	loc_C5CA
0000E382 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E386                            
0000E386                            	loc_C5CA:
0000E386 1340 001A                  		move.b	d0,obFrame(a1)
0000E38A 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E392 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E398 137C 0000 0001             		move.b	#0,obRender(a1)
0000E39E 43E9 0040                  		lea	$40(a1),a1
0000E3A2 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E3A6                            
0000E3A6                            Got_Move:	; Routine 2
0000E3A6 7210                       		moveq	#$10,d1		; set horizontal speed
0000E3A8 3028 0030                  		move.w	got_mainX(a0),d0
0000E3AC B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E3B0 6700                       		beq.s	loc_C61A	; if yes, branch
0000E3B2 6C00                       		bge.s	Got_ChgPos
0000E3B4 4441                       		neg.w	d1
0000E3B6                            
0000E3B6                            	Got_ChgPos:
0000E3B6 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E3BA                            
0000E3BA                            	loc_C5FE:
0000E3BA 3028 0008                  		move.w	obX(a0),d0
0000E3BE 6B00                       		bmi.s	locret_C60E
0000E3C0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E3C4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E3C6 6000 0000                  		bra.w	DisplaySprite
0000E3CA                            ; ===========================================================================
0000E3CA                            
0000E3CA                            locret_C60E:
0000E3CA 4E75                       		rts	
0000E3CC                            ; ===========================================================================
0000E3CC                            
0000E3CC                            loc_C610:
0000E3CC 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E3D2 6000 0000                  		bra.w	Got_Move2
0000E3D6                            ; ===========================================================================
0000E3D6                            
0000E3D6                            loc_C61A:
0000E3D6 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E3DC 67EE                       		beq.s	loc_C610
0000E3DE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E3E4 66D4                       		bne.s	loc_C5FE
0000E3E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E3EA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E3F0                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E3F0                            
0000E3F0                            Got_Wait:	; Routine 4, 8, $C
0000E3F0 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E3F4 6600                       		bne.s	Got_Display
0000E3F6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E3FA                            
0000E3FA                            Got_Display:
0000E3FA 6000 0000                  		bra.w	DisplaySprite
0000E3FE                            ; ===========================================================================
0000E3FE                            
0000E3FE                            Got_TimeBonus:	; Routine 6
0000E3FE 6100 0000                  		bsr.w	DisplaySprite
0000E402 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E408 7000                       		moveq	#0,d0
0000E40A 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E40E 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E410 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E414 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E41A                            
0000E41A                            Got_RingBonus:
0000E41A 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E41E 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E420 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E424 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E42A                            
0000E42A                            Got_ChkBonus:
0000E42A 4A40                       		tst.w	d0		; is there any bonus?
0000E42C 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E438 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E43C 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E442 6600                       		bne.s	Got_SetDelay
0000E444 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E448                            
0000E448                            Got_SetDelay:
0000E448 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E44E                            
0000E44E                            locret_C692:
0000E44E 4E75                       		rts	
0000E450                            ; ===========================================================================
0000E450                            
0000E450                            Got_AddBonus:
0000E450 4EB9 0000 0000             		jsr	(AddPoints).l
0000E456 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E45A 0200 0003                  		andi.b	#3,d0
0000E45E 66EE                       		bne.s	locret_C692
0000E46A                            ; ===========================================================================
0000E46A                            
0000E46A                            Got_NextLevel:	; Routine $A
0000E46A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E470 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E476 1038 FE10                  		move.b	(v_zone).w,d0
0000E47A 0240 0007                  		andi.w	#7,d0
0000E47E E748                       		lsl.w	#3,d0
0000E480 1238 FE11                  		move.b	(v_act).w,d1
0000E484 0241 0003                  		andi.w	#3,d1
0000E488 D241                       		add.w	d1,d1
0000E48A D041                       		add.w	d1,d0
0000E48C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E490 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E494 4A40                       		tst.w	d0
0000E496 6600                       		bne.s	Got_ChkSS
0000E498 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E49E 6000                       		bra.s	Got_Display2
0000E4A0                            ; ===========================================================================
0000E4A0                            
0000E4A0                            Got_ChkSS:	
0000E4A0 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E4A4                            		;tst.b	(f_emeraldm).w
0000E4A4                            		;beq.s	VBla_08A
0000E4A4                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E4A4                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E4A4                            		;bra.s	Got_Display2
0000E4A4 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E4AA                            		
0000E4AA                            ; ===========================================================================
0000E4AA                            
0000E4AA                            VBla_08A:
0000E4AA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E4B0                            
0000E4B0                            Got_Display2:
0000E4B0 6000 0000                  		bra.w	DisplaySprite
0000E4B4                            ; ===========================================================================
0000E4B4                            ; ---------------------------------------------------------------------------
0000E4B4                            ; Level	order array
0000E4B4                            ; ---------------------------------------------------------------------------
0000E4B4                            LevelOrder:
0000E4B4                            		; Green Hill Zone
0000E4B4 0001                       		dc.b id_GHZ, 1	; Act 2
0000E4B6 0002                       		dc.b id_GHZ, 2	; Act 2
0000E4B8 0400                       		dc.b id_SYZ, 0	; Act 3
0000E4BA 0000                       		dc.b 0, 0
0000E4BC                            
0000E4BC                            		; Labyrinth Zone
0000E4BC 0101                       		dc.b id_LZ, 1	; Act 1
0000E4BE 0102                       		dc.b id_LZ, 2	; Act 2
0000E4C0 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E4C2 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E4C4                            
0000E4C4                            		; Marble Zone
0000E4C4 0201                       		dc.b id_MZ, 1	; Act 1
0000E4C6 0202                       		dc.b id_MZ, 2	; Act 2
0000E4C8 0502                       		dc.b id_SBZ, 2	; Act 3
0000E4CA 0000                       		dc.b 0, 0
0000E4CC                            
0000E4CC                            		; Star Light Zone
0000E4CC 0301                       		dc.b id_SLZ, 1	; Act 1
0000E4CE 0302                       		dc.b id_SLZ, 2	; Act 2
0000E4D0 0500                       		dc.b id_SBZ, 0	; Act 3
0000E4D2 0000                       		dc.b 0, 0
0000E4D4                            
0000E4D4                            		; Spring Yard Zone
0000E4D4 0401                       		dc.b id_SYZ, 1	; Act 1
0000E4D6 0200                       		dc.b id_MZ,  0	; Act 2
0000E4D8 0200                       		dc.b id_MZ,	 0	; Act 3
0000E4DA 0000                       		dc.b 0, 0
0000E4DC                            
0000E4DC                            		; Scrap Brain Zone
0000E4DC 0501                       		dc.b id_SBZ, 1	; Act 1
0000E4DE 0103                       		dc.b id_LZ, 3	; Act 2
0000E4E0 0000                       		dc.b 0, 0	; Final Zone
0000E4E2 0000                       		dc.b 0, 0
0000E4E4                            		even
0000E4E4                            ; ===========================================================================
0000E4E4                            
0000E4E4                            Got_Move2:	; Routine $E
0000E4E4 7220                       		moveq	#$20,d1		; set horizontal speed
0000E4E6 3028 0032                  		move.w	got_finalX(a0),d0
0000E4EA B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E4EE 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E4F0 6C00                       		bge.s	Got_ChgPos2
0000E4F2 4441                       		neg.w	d1
0000E4F4                            
0000E4F4                            	Got_ChgPos2:
0000E4F4 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E4F8 3028 0008                  		move.w	obX(a0),d0
0000E4FC 6B00                       		bmi.s	locret_C748
0000E4FE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E502 6400                       		bcc.s	locret_C748	; if yes, branch
0000E504 6000 0000                  		bra.w	DisplaySprite
0000E508                            ; ===========================================================================
0000E508                            
0000E508                            locret_C748:
0000E508 4E75                       		rts	
0000E50A                            ; ===========================================================================
0000E50A                            
0000E50A                            Got_SBZ2:
0000E50A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E510 6600 0000                  		bne.w	DeleteObject
0000E514 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E518 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E51C 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E522                            ; ===========================================================================
0000E522                            
0000E522                            loc_C766:	; Routine $10
0000E522 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E526 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E52C 6700 0000                  		beq.w	DeleteObject
0000E530 4E75                       		rts	
0000E532                            ; ===========================================================================
0000E532                            		;    x-start,	x-main,	y-main,
0000E532                            		;				routine, frame number
0000E532                            
0000E532 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E538 0200                       		dc.b 				2,	0
0000E53A                            
0000E53A FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E540 0201                       		dc.b 				2,	1
0000E542                            
0000E542 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E548 0206                       		dc.b 				2,	6
0000E54A                            
0000E54A 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E550 0202                       		dc.b 				2,	2
0000E552                            
0000E552 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E558 0203                       		dc.b 				2,	3
0000E55A                            
0000E55A 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E560 0204                       		dc.b 				2,	4
0000E562                            
0000E562 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E568 0205                       		dc.b 				2,	5
0000E568 0205                       		dc.b 				2,	5
0000E56A                            		include	"_incObj\7E Special Stage Results.asm"
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A                            ; Object 7E - special stage results screen
0000E56A                            ; ---------------------------------------------------------------------------
0000E56A                            
0000E56A                            SSResult:
0000E56A 7000                       		moveq	#0,d0
0000E56C 1028 0024                  		move.b	obRoutine(a0),d0
0000E570 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E574 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E578                            ; ===========================================================================
0000E578 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E57A 0000                       		dc.w SSR_Move-SSR_Index
0000E57C 0000                       		dc.w SSR_Wait-SSR_Index
0000E57E 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E580 0000                       		dc.w SSR_Wait-SSR_Index
0000E582 0000                       		dc.w SSR_Exit-SSR_Index
0000E584 0000                       		dc.w SSR_Wait-SSR_Index
0000E586 0000                       		dc.w SSR_Continue-SSR_Index
0000E588 0000                       		dc.w SSR_Wait-SSR_Index
0000E58A 0000                       		dc.w SSR_Exit-SSR_Index
0000E58C 0000                       		dc.w loc_C91A-SSR_Index
0000E58E                            
0000E58E =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E58E                            ; ===========================================================================
0000E58E                            
0000E58E                            SSR_ChkPLC:	; Routine 0
0000E58E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E592 6700                       		beq.s	SSR_Main	; if yes, branch
0000E594 4E75                       		rts	
0000E596                            ; ===========================================================================
0000E596                            
0000E596                            SSR_Main:
0000E596 2248                       		movea.l	a0,a1
0000E598 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E59E 7203                       		moveq	#3,d1
0000E5A0 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E5A6 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E5A8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E5AA                            
0000E5AA                            	SSR_Loop:
0000E5AA 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E5AE 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E5B2 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E5B6 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E5BA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E5BE 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E5C2 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E5CA 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E5D0 137C 0000 0001             		move.b	#0,obRender(a1)
0000E5D6 43E9 0040                  		lea	$40(a1),a1
0000E5DA 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E5DE                            
0000E5DE 7007                       		moveq	#7,d0
0000E5E0 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E5E4 6700                       		beq.s	loc_C842
0000E5E6 7000                       		moveq	#0,d0
0000E5E8 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E5EC 6600                       		bne.s	loc_C842	; if not, branch
0000E5EE 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E5F0 317C 0018 0008             		move.w	#$18,obX(a0)
0000E5F6 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E5FC                            
0000E5FC                            loc_C842:
0000E5FC 1140 001A                  		move.b	d0,obFrame(a0)
0000E600                            
0000E600                            SSR_Move:	; Routine 2
0000E600 7210                       		moveq	#$10,d1		; set horizontal speed
0000E602 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E606 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E60A 6700                       		beq.s	loc_C86C	; if yes, branch
0000E60C 6C00                       		bge.s	SSR_ChgPos
0000E60E 4441                       		neg.w	d1
0000E610                            
0000E610                            SSR_ChgPos:
0000E610 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E614                            
0000E614                            loc_C85A:
0000E614 3028 0008                  		move.w	obX(a0),d0
0000E618 6B00                       		bmi.s	locret_C86A
0000E61A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E61E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E620 6000 0000                  		bra.w	DisplaySprite
0000E624                            ; ===========================================================================
0000E624                            
0000E624                            locret_C86A:
0000E624 4E75                       		rts	
0000E626                            ; ===========================================================================
0000E626                            
0000E626                            loc_C86C:
0000E626 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E62C 66E6                       		bne.s	loc_C85A
0000E62E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E632 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E638 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E63E                            
0000E63E                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E63E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E642 6600                       		bne.s	SSR_Display
0000E644 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E648                            
0000E648                            SSR_Display:
0000E648 6000 0000                  		bra.w	DisplaySprite
0000E64C                            ; ===========================================================================
0000E64C                            
0000E64C                            SSR_RingBonus:	; Routine 6
0000E64C 6100 0000                  		bsr.w	DisplaySprite
0000E650 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E656 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E65A 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E65C 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E662 700A                       		moveq	#10,d0		; add 10 to score
0000E664 4EB9 0000 0000             		jsr	(AddPoints).l
0000E66A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E66E 0200 0003                  		andi.b	#3,d0
0000E672 6600                       		bne.s	locret_C8EA
0000E67E                            ; ===========================================================================
0000E67E                            
0000E67E                            loc_C8C4:
0000E688 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E68C 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E692 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E698 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E69A 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E6A0 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E6A4                            
0000E6A4                            locret_C8EA:
0000E6A4 4E75                       		rts	
0000E6A6                            ; ===========================================================================
0000E6A6                            
0000E6A6                            SSR_Exit:	; Routine $A, $12
0000E6A6 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E6AC 6000 0000                  		bra.w	DisplaySprite
0000E6B0                            ; ===========================================================================
0000E6B0                            
0000E6B0                            SSR_Continue:	; Routine $E
0000E6B0 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E6B6 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E6C6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6CA 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E6D0 6000 0000                  		bra.w	DisplaySprite
0000E6D4                            ; ===========================================================================
0000E6D4                            
0000E6D4                            loc_C91A:	; Routine $14
0000E6D4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E6D8 0200 000F                  		andi.b	#$F,d0
0000E6DC 6600                       		bne.s	SSR_Display2
0000E6DE 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E6E4                            
0000E6E4                            SSR_Display2:
0000E6E4 6000 0000                  		bra.w	DisplaySprite
0000E6E8                            ; ===========================================================================
0000E6E8 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E6EE 0200                       		dc.b 2,	0		; rountine number, frame number
0000E6F0 0320 0120 0118             		dc.w $320, $120, $118
0000E6F6 0201                       		dc.b 2,	1
0000E6F8 0360 0120 0128             		dc.w $360, $120, $128
0000E6FE 0202                       		dc.b 2,	2
0000E700 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E706 0203                       		dc.b 2,	3
0000E708 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E70E 0206                       		dc.b 2,	6
0000E70E 0206                       		dc.b 2,	6
0000E710                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E710                            ; ---------------------------------------------------------------------------
0000E710                            ; Object 7F - chaos emeralds from the special stage results screen
0000E710                            ; ---------------------------------------------------------------------------
0000E710                            
0000E710                            SSRChaos:
0000E710 7000                       		moveq	#0,d0
0000E712 1028 0024                  		move.b	obRoutine(a0),d0
0000E716 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000E71A 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000E71E                            ; ===========================================================================
0000E71E 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000E720 0000                       		dc.w SSRC_Flash-SSRC_Index
0000E722                            
0000E722                            ; ---------------------------------------------------------------------------
0000E722                            ; X-axis positions for chaos emeralds
0000E722                            ; ---------------------------------------------------------------------------
0000E722 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E72E                            ; ===========================================================================
0000E72E                            
0000E72E                            SSRC_Main:	; Routine 0
0000E72E 2248                       		movea.l	a0,a1
0000E730 45F9 0000 E722             		lea	(SSRC_PosData).l,a2
0000E736 7400                       		moveq	#0,d2
0000E738 7200                       		moveq	#0,d1
0000E73A 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000E73E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E740 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E744                            
0000E744                            	SSRC_Loop:
0000E744 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000E748 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000E74C 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000E752 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000E756 1633 2000                  		move.b	(a3,d2.w),d3
0000E75A 1343 001A                  		move.b	d3,obFrame(a1)
0000E75E 1343 001C                  		move.b	d3,obAnim(a1)
0000E762 5202                       		addq.b	#1,d2
0000E764 5429 0024                  		addq.b	#2,obRoutine(a1)
0000E768 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000E770 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000E776 137C 0000 0001             		move.b	#0,obRender(a1)
0000E77C 43E9 0040                  		lea	$40(a1),a1	; next object
0000E780 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000E784                            
0000E784                            SSRC_Flash:	; Routine 2
0000E784 1028 001A                  		move.b	obFrame(a0),d0
0000E788 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000E78E 0C00 0006                  		cmpi.b	#6,d0
0000E792 6600                       		bne.s	SSRC_Display
0000E794 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000E79A                            
0000E79A                            	SSRC_Display:
0000E79A 6000 0000                  		bra.w	DisplaySprite
0000E79A 6000 0000                  		bra.w	DisplaySprite
0000E79E                            
0000E79E                            ; ---------------------------------------------------------------------------
0000E79E                            ; Sprite mappings - zone title cards
0000E79E                            ; ---------------------------------------------------------------------------
0000E79E 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000E7A0 0000                       		dc.w M_Card_LZ-Map_Card
0000E7A2 0000                       		dc.w M_Card_MZ-Map_Card
0000E7A4 0000                       		dc.w M_Card_SLZ-Map_Card
0000E7A6 0000                       		dc.w M_Card_SYZ-Map_Card
0000E7A8 0000                       		dc.w M_Card_SBZ-Map_Card
0000E7AA 0000                       		dc.w M_Card_Zone-Map_Card
0000E7AC 0000                       		dc.w M_Card_Act1-Map_Card
0000E7AE 0000                       		dc.w M_Card_Act2-Map_Card
0000E7B0 0000                       		dc.w M_Card_Act3-Map_Card
0000E7B2 0000                       		dc.w M_Card_Oval-Map_Card
0000E7B4 0000                       		dc.w M_Card_FZ-Map_Card
0000E7B6 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000E7B7 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000E7BC F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000E7C1 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000E7C6 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000E7CB F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E7D0 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000E7D5 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000E7DA F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000E7DF F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000E7E4                            		even
0000E7E4 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000E7E5 F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000E7EA F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000E7EF F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000E7F4 F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000E7F9 F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000E7FE F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000E803 F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000E808 F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000E80D F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000E812 F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000E817 F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000E81C F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000E821 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000E826 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000E827 F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000E82C F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000E831 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000E836 F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000E83B F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000E840 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000E845 F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000E84A F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000E84F F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000E854 F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000E859 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000E85E 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000E85F F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000E864 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000E869 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000E86E F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000E873 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000E878 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000E87D F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000E882 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000E887 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000E88C                            		even
0000E88C 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000E88D F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000E892 F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000E897 F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000E89C F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000E8A1 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000E8A6 F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000E8AB F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000E8B0 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000E8B5 F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000E8BA F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000E8BF 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000E8C0 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000E8C5 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000E8CA F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000E8CF F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000E8D4 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000E8D9 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000E8DE F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000E8E3 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000E8E8 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000E8ED F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000E8F2                            		even
0000E8F2 04                         M_Card_Zone:	dc.b 4			; ZONE
0000E8F3 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E8F8 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E8FD F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E902 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E908 00                         		even
0000E908 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000E909 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E90E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E913 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000E914 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E919 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E91E 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000E91F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E924 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E929 0D                         M_Card_Oval:	dc.b $D			; Oval
0000E92A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E92F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E934 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E939 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E93E 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E943 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E948 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E94D FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E952 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E957 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E95C FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E961 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E966 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E96C 00                         		even
0000E96C 05                         M_Card_FZ:	dc.b 5			; FINAL
0000E96D F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000E972 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000E977 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E97C F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000E981 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000E986                            		even
0000E986                            
0000E986                            Map_Over:	include	"_maps\Game Over.asm"
0000E986                            ; ---------------------------------------------------------------------------
0000E986                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E986                            ; ---------------------------------------------------------------------------
0000E986                            Map_Over_internal:
0000E986 0000                       		dc.w byte_CBAC-Map_Over_internal
0000E988 0000                       		dc.w byte_CBB7-Map_Over_internal
0000E98A 0000                       		dc.w byte_CBC2-Map_Over_internal
0000E98C 0000                       		dc.w byte_CBCD-Map_Over_internal
0000E98E 02                         byte_CBAC:	dc.b 2			; GAME
0000E98F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E994 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E999 02                         byte_CBB7:	dc.b 2			; OVER
0000E99A F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E99F F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E9A4 02                         byte_CBC2:	dc.b 2			; TIME
0000E9A5 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E9AA F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E9AF 02                         byte_CBCD:	dc.b 2			; OVER
0000E9B0 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E9B5 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E9BA                            		even
0000E9BA                            		even
0000E9BA                            
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E9BA                            ; ---------------------------------------------------------------------------
0000E9BA 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000E9BC 0000                       		dc.w M_Got_Passed-Map_Got
0000E9BE 0000                       		dc.w M_Got_Score-Map_Got
0000E9C0 0000                       		dc.w M_Got_TBonus-Map_Got
0000E9C2 0000                       		dc.w M_Got_RBonus-Map_Got
0000E9C4 FF6F                       		dc.w M_Card_Oval-Map_Got
0000E9C6 FF4E                       		dc.w M_Card_Act1-Map_Got
0000E9C8 FF59                       		dc.w M_Card_Act2-Map_Got
0000E9CA FF64                       		dc.w M_Card_Act3-Map_Got
0000E9CC 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000E9CD F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000E9D2 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000E9D7 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000E9DC F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000E9E1 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000E9E6 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000E9EB F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000E9F0 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000E9F5 06                         M_Got_Passed:	dc.b 6			; PASSED
0000E9F6 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000E9FB F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EA00 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EA05 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EA0A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EA0F F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EA14 06                         M_Got_Score:	dc.b 6			; SCORE
0000EA15 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EA1A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EA1F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EA24 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EA29 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EA2E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EA33 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EA34 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EA39 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EA3E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EA43 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EA48 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EA4D F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EA52 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EA57 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EA58 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EA5D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EA62 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EA67 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EA6C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EA71 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EA76 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EA7C 00                         		even
0000EA7C                            ; ---------------------------------------------------------------------------
0000EA7C                            ; Sprite mappings - special stage results screen
0000EA7C                            ; ---------------------------------------------------------------------------
0000EA7C 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EA7E 0000                       		dc.w M_SSR_Score-Map_SSR
0000EA80 0000                       		dc.w byte_CD0D-Map_SSR
0000EA82 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EA84 0000                       		dc.w byte_CD31-Map_SSR
0000EA86 0000                       		dc.w byte_CD46-Map_SSR
0000EA88 0000                       		dc.w byte_CD5B-Map_SSR
0000EA8A 0000                       		dc.w byte_CD6B-Map_SSR
0000EA8C 0000                       		dc.w byte_CDA8-Map_SSR
0000EA8E 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EA8F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EA94 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EA99 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EA9E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EAA3 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EAA8 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EAAD F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EAB2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EAB7 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EABC F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EAC1 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EAC6 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EACB F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EAD0 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EAD1 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EAD6 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EADB F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EAE0 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EAE5 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EAEA FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EAEF 07                         byte_CD0D:	dc.b 7
0000EAF0 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EAF5 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EAFA F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EAFF F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EB04 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EB09 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EB0E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EB13 04                         byte_CD31:	dc.b 4
0000EB14 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB19 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB1E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB23 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EB28 04                         byte_CD46:	dc.b 4
0000EB29 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB2E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB33 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB38 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EB3D 03                         byte_CD5B:	dc.b 3
0000EB3E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB43 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB48 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB4D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EB4E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EB53 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EB58 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EB5D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EB62 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EB67 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EB6C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EB71 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EB76 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EB7B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EB80 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EB85 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EB8A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EB8B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EB90 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EB95 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EB9A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EB9F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EBA4 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EBA9 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EBAE F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EBB3 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EBB8 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EBBD F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EBC2 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EBC7 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EBCC F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EBD1 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EBD6                            		even
0000EBD6                            
0000EBD6                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EBD6                            ; ---------------------------------------------------------------------------
0000EBD6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EBD6                            ; ---------------------------------------------------------------------------
0000EBD6                            Map_SSRC_internal:
0000EBD6 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EBD8 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EBDA 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EBDC 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EBDE 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EBE0 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EBE2 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EBE4 01                         byte_CE02:	dc.b 1
0000EBE5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EBEA 01                         byte_CE08:	dc.b 1
0000EBEB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EBF0 01                         byte_CE0E:	dc.b 1
0000EBF1 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EBF6 01                         byte_CE14:	dc.b 1
0000EBF7 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EBFC 01                         byte_CE1A:	dc.b 1
0000EBFD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EC02 01                         byte_CE20:	dc.b 1
0000EC03 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EC08 00                         byte_CE26:	dc.b 0			; Blank frame
0000EC0A 00                         		even
0000EC0A 00                         		even
0000EC0A                            
0000EC0A                            		include	"_incObj\36 Spikes.asm"
0000EC0A                            ; ---------------------------------------------------------------------------
0000EC0A                            ; Object 36 - spikes
0000EC0A                            ; ---------------------------------------------------------------------------
0000EC0A                            
0000EC0A                            Spikes:
0000EC0A 7000                       		moveq	#0,d0
0000EC0C 1028 0024                  		move.b	obRoutine(a0),d0
0000EC10 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EC14 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EC18                            ; ===========================================================================
0000EC18 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EC1A 0000                       		dc.w Spik_Solid-Spik_Index
0000EC1C                            
0000EC1C =00000030                  spik_origX:	equ $30		; start X position
0000EC1C =00000032                  spik_origY:	equ $32		; start Y position
0000EC1C                            
0000EC1C 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EC1E 0110                       		dc.b 1,	$10
0000EC20 0204                       		dc.b 2,	4
0000EC22 031C                       		dc.b 3,	$1C
0000EC24 0440                       		dc.b 4,	$40
0000EC26 0510                       		dc.b 5,	$10
0000EC28                            ; ===========================================================================
0000EC28                            
0000EC28                            Spik_Main:	; Routine 0
0000EC28 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC2C 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EC34 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EC3A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EC40 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EC46 1028 0028                  		move.b	obSubtype(a0),d0
0000EC4A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EC50 0240 00F0                  		andi.w	#$F0,d0
0000EC54 43F9 0000 EC1C             		lea	(Spik_Var).l,a1
0000EC5A E648                       		lsr.w	#3,d0
0000EC5C D2C0                       		adda.w	d0,a1
0000EC5E 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EC62 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EC66 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EC6C 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EC72                            
0000EC72                            Spik_Solid:	; Routine 2
0000EC72 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EC76 343C 0004                  		move.w	#4,d2
0000EC7A 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EC80 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EC82 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000EC88 6600                       		bne.s	Spik_Upright	; if not, branch
0000EC8A 343C 0014                  		move.w	#$14,d2
0000EC8E                            
0000EC8E                            ; Spikes types $1x and $5x face	sideways
0000EC8E                            
0000EC8E                            Spik_SideWays:
0000EC8E 323C 001B                  		move.w	#$1B,d1
0000EC92 3602                       		move.w	d2,d3
0000EC94 5243                       		addq.w	#1,d3
0000EC96 3828 0008                  		move.w	obX(a0),d4
0000EC9A 6100 0000                  		bsr.w	SolidObject
0000EC9E 0828 0003 0022             		btst	#3,obStatus(a0)
0000ECA4 6600                       		bne.s	Spik_Display
0000ECA6 0C44 0001                  		cmpi.w	#1,d4
0000ECAA 6700                       		beq.s	Spik_Hurt
0000ECAC 6000                       		bra.s	Spik_Display
0000ECAE                            ; ===========================================================================
0000ECAE                            
0000ECAE                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000ECAE                            
0000ECAE                            Spik_Upright:
0000ECAE 7200                       		moveq	#0,d1
0000ECB0 1228 0014                  		move.b	obActWid(a0),d1
0000ECB4 0641 000B                  		addi.w	#$B,d1
0000ECB8 343C 0010                  		move.w	#$10,d2
0000ECBC 363C 0011                  		move.w	#$11,d3
0000ECC0 3828 0008                  		move.w	obX(a0),d4
0000ECC4 6100 0000                  		bsr.w	SolidObject
0000ECC8 0828 0003 0022             		btst	#3,obStatus(a0)
0000ECCE 6600                       		bne.s	Spik_Hurt
0000ECD0 4A44                       		tst.w	d4
0000ECD2 6A00                       		bpl.s	Spik_Display
0000ECD4                            
0000ECD4                            Spik_Hurt:
0000ECD4 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000ECD8 6600                       		bne.s	Spik_Display	; if yes, branch
0000ECDA 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000ECDE 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000ECE0 2F08                       		move.l	a0,-(sp)
0000ECE2 2448                       		movea.l	a0,a2
0000ECE4 41F8 D000                  		lea	(v_player).w,a0
0000ECE8 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000ECEE 6400                       		bcc.s	loc_CF20
0000ECF0                            		; This fixes the infamous "spike bug"
0000ECF0 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000ECF4 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000ECF6 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000ECFC                            loc_D5A2:
0000ECFC 9680                       		sub.l	d0,d3
0000ECFE 2143 000C                  		move.l	d3,obY(a0)
0000ED02 4EB9 0000 0000             		jsr	(HurtSonic).l
0000ED08                            
0000ED08                            loc_CF20:
0000ED08 205F                       		movea.l	(sp)+,a0
0000ED0A                            
0000ED0A                            Spik_Display:
0000ED0A 6100 0000                  		bsr.w	DisplaySprite
0000ED2C 4E75                       		rts	
0000ED2E                            ; ===========================================================================
0000ED2E                            
0000ED2E                            Spik_Type0x:
0000ED2E 7000                       		moveq	#0,d0
0000ED30 1028 0028                  		move.b	obSubtype(a0),d0
0000ED34 D040                       		add.w	d0,d0
0000ED36 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000ED3A 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000ED3E                            ; ===========================================================================
0000ED3E 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000ED40 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000ED42 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000ED44                            ; ===========================================================================
0000ED44                            
0000ED44                            Spik_Type00:
0000ED44 4E75                       		rts			; don't move the object
0000ED46                            ; ===========================================================================
0000ED46                            
0000ED46                            Spik_Type01:
0000ED46 6100 0000                  		bsr.w	Spik_Wait
0000ED4A 7000                       		moveq	#0,d0
0000ED4C 1028 0034                  		move.b	$34(a0),d0
0000ED50 D068 0032                  		add.w	spik_origY(a0),d0
0000ED54 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000ED58 4E75                       		rts	
0000ED5A                            ; ===========================================================================
0000ED5A                            
0000ED5A                            Spik_Type02:
0000ED5A 6100 0000                  		bsr.w	Spik_Wait
0000ED5E 7000                       		moveq	#0,d0
0000ED60 1028 0034                  		move.b	$34(a0),d0
0000ED64 D068 0030                  		add.w	spik_origX(a0),d0
0000ED68 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000ED6C 4E75                       		rts	
0000ED6E                            ; ===========================================================================
0000ED6E                            
0000ED6E                            Spik_Wait:
0000ED6E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000ED72 6700                       		beq.s	loc_CFA4	; if yes, branch
0000ED74 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000ED78 6600                       		bne.s	locret_CFE6
0000ED7A 4A28 0001                  		tst.b	obRender(a0)
0000ED7E 6A00                       		bpl.s	locret_CFE6
0000ED8A 6000                       		bra.s	locret_CFE6
0000ED8C                            ; ===========================================================================
0000ED8C                            
0000ED8C                            loc_CFA4:
0000ED8C 4A68 0036                  		tst.w	$36(a0)
0000ED90 6700                       		beq.s	loc_CFC6
0000ED92 0468 0800 0034             		subi.w	#$800,$34(a0)
0000ED98 6400                       		bcc.s	locret_CFE6
0000ED9A 317C 0000 0034             		move.w	#0,$34(a0)
0000EDA0 317C 0000 0036             		move.w	#0,$36(a0)
0000EDA6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EDAC 6000                       		bra.s	locret_CFE6
0000EDAE                            ; ===========================================================================
0000EDAE                            
0000EDAE                            loc_CFC6:
0000EDAE 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EDB4 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EDBA 6500                       		bcs.s	locret_CFE6
0000EDBC 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EDC2 317C 0001 0036             		move.w	#1,$36(a0)
0000EDC8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EDCE                            
0000EDCE                            locret_CFE6:
0000EDCE 4E75                       		rts	
0000EDCE 4E75                       		rts	
0000EDD0                            Map_Spike:	include	"_maps\Spikes.asm"
0000EDD0                            ; --------------------------------------------------------------------------------
0000EDD0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000EDD0                            ; --------------------------------------------------------------------------------
0000EDD0                            
0000EDD0                            SME_XgeaQ:	
0000EDD0 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000EDD4 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000EDD8 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000EDDC 03                         SME_XgeaQ_C:	dc.b 3	
0000EDDD F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000EDE2 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EDE7 F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000EDEC 03                         SME_XgeaQ_1C:	dc.b 3	
0000EDED EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000EDF2 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EDF7 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000EDFC 01                         SME_XgeaQ_2C:	dc.b 1	
0000EDFD F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE02 03                         SME_XgeaQ_32:	dc.b 3	
0000EE03 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000EE08 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE0D F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000EE12 06                         SME_XgeaQ_42:	dc.b 6	
0000EE13 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000EE18 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000EE1D F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000EE22 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000EE27 F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000EE2C F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000EE31 01                         SME_XgeaQ_61:	dc.b 1	
0000EE32 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EE38 00                         		even
0000EE38 00                         		even
0000EE38                            		include	"_incObj\3B Purple Rock.asm"
0000EE38                            ; ---------------------------------------------------------------------------
0000EE38                            ; Object 3B - purple rock (GHZ)
0000EE38                            ; ---------------------------------------------------------------------------
0000EE38                            
0000EE38                            PurpleRock:
0000EE38 7000                       		moveq	#0,d0
0000EE3A 1028 0024                  		move.b	obRoutine(a0),d0
0000EE3E 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000EE42 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000EE46                            ; ===========================================================================
0000EE46 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000EE48 0000                       		dc.w Rock_Solid-Rock_Index
0000EE4A                            ; ===========================================================================
0000EE4A                            
0000EE4A                            Rock_Main:	; Routine 0
0000EE4A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EE4E 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000EE56 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000EE5C 117C 0004 0001             		move.b	#4,obRender(a0)
0000EE62 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000EE68 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EE6E                            
0000EE6E                            Rock_Solid:	; Routine 2
0000EE6E 323C 001B                  		move.w	#$1B,d1
0000EE72 343C 0010                  		move.w	#$10,d2
0000EE76 363C 0010                  		move.w	#$10,d3
0000EE7A 3828 0008                  		move.w	obX(a0),d4
0000EE7E 6100 0000                  		bsr.w	SolidObject
0000EE82 6100 0000                  		bsr.w	DisplaySprite
0000EEA4 4E75                       		rts	
0000EEA4 4E75                       		rts	
0000EEA6                            		include	"_incObj\49 Waterfall Sound.asm"
0000EEA6                            ; ---------------------------------------------------------------------------
0000EEA6                            ; Object 49 - waterfall	sound effect (GHZ)
0000EEA6                            ; ---------------------------------------------------------------------------
0000EEA6                            
0000EEA6                            WaterSound:
0000EEA6 7000                       		moveq	#0,d0
0000EEA8 1028 0024                  		move.b	obRoutine(a0),d0
0000EEAC 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000EEB0 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000EEB4                            ; ===========================================================================
0000EEB4 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000EEB6 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000EEB8                            ; ===========================================================================
0000EEB8                            
0000EEB8                            WSnd_Main:	; Routine 0
0000EEB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EEBC 117C 0004 0001             		move.b	#4,obRender(a0)
0000EEC2                            
0000EEC2                            WSnd_PlaySnd:	; Routine 2
0000EEC2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000EEC6 0200 003F                  		andi.b	#$3F,d0
0000EECA 6600                       		bne.s	WSnd_ChkDel
0000EED6                            
0000EED6                            	WSnd_ChkDel:
0000EEF4 4E75                       		rts	
0000EEF4 4E75                       		rts	
0000EEF6                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000EEF6                            ; ---------------------------------------------------------------------------
0000EEF6                            ; Sprite mappings - purple rock	(GHZ)
0000EEF6                            ; ---------------------------------------------------------------------------
0000EEF6                            Map_PRock_internal:
0000EEF6 0000                       		dc.w byte_D110-Map_PRock_internal
0000EEF8 02                         byte_D110:	dc.b 2
0000EEF9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EEFE F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EF04 00                         		even
0000EF04 00                         		even
0000EF04                            		include	"_incObj\3C Smashable Wall.asm"
0000EF04                            ; ---------------------------------------------------------------------------
0000EF04                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EF04                            ; ---------------------------------------------------------------------------
0000EF04                            
0000EF04                            SmashWall:
0000EF04 7000                       		moveq	#0,d0
0000EF06 1028 0024                  		move.b	obRoutine(a0),d0
0000EF0A 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000EF0E 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000EF12 6000 0000                  		bra.w	RememberState
0000EF16                            ; ===========================================================================
0000EF16 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000EF18 0000                       		dc.w Smash_Solid-Smash_Index
0000EF1A 0000                       		dc.w Smash_FragMove-Smash_Index
0000EF1C                            
0000EF1C =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000EF1C                            ; ===========================================================================
0000EF1C                            
0000EF1C                            Smash_Main:	; Routine 0
0000EF1C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF20 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000EF28 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000EF2E 117C 0004 0001             		move.b	#4,obRender(a0)
0000EF34 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000EF3A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF40 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000EF46                            
0000EF46                            Smash_Solid:	; Routine 2
0000EF46 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000EF4C 323C 001B                  		move.w	#$1B,d1
0000EF50 343C 0020                  		move.w	#$20,d2
0000EF54 363C 0020                  		move.w	#$20,d3
0000EF58 3828 0008                  		move.w	obX(a0),d4
0000EF5C 6100 0000                  		bsr.w	SolidObject	
0000EF60 4A04                       		tst.b	d4
0000EF62 6E00 0000                  		bgt.w	@chkroll	
0000EF66 6700 0000                  		beq.w	@donothing								
0000EF6A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000EF70 6700 0000                  		beq.w	@donothing	; if yes, branch
0000EF74                            ; ===========================================================================
0000EF74                            
0000EF74                            @chkroll:
0000EF74 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000EF7A 6600                       		bne.s	@donothing	; if not, branch	
0000EF7C 3028 0030                  		move.w	smash_speed(a0),d0
0000EF80 6A00                       		bpl.s	@chkspeed
0000EF82 4440                       		neg.w	d0
0000EF84                            
0000EF84                            	@chkspeed:
0000EF84 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EF88 6500                       		bcs.s	@donothing	; if not, branch	
0000EF8A                            		
0000EF8A                            	@continue:	
0000EF8A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000EF90 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000EF96 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000EF9C 3028 0008                  		move.w	obX(a0),d0
0000EFA0 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000EFA4 6500                       		bcs.s	@smash		; if yes, branch
0000EFA6 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000EFAC                            
0000EFAC                            	@smash:
0000EFAC 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000EFB2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000EFB8 7206                       		moveq	#6,d1		; load 7 fragments
0000EFBA 343C 0070                  		move.w	#$70,d2
0000EFBE 6100                       		bsr.s	SmashObject
0000EFC0                            
0000EFC0                            @donothing:
0000EFC0 4E75                       		rts	
0000EFC2                            
0000EFC2                            Smash_FragMove:	; Routine 4
0000EFC2 588F                       		addq.l	#4,sp
0000EFC4 6100 0000                  		bsr.w	SpeedToPos
0000EFC8 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000EFCE 4A28 0001                  		tst.b	obRender(a0)
0000EFD2 6A00 0000                  		bpl.w	DeleteObject
0000EFD6 6000 0000                  		bra.w	DisplaySprite
0000EFDA                            
0000EFDA                            
0000EFDA                            
0000EFDA                            		include	"_incObj\sub SmashObject.asm"
0000EFDA                            ; ---------------------------------------------------------------------------
0000EFDA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000EFDA                            ; ---------------------------------------------------------------------------
0000EFDA                            
0000EFDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFDA                            
0000EFDA                            
0000EFDA                            SmashObject:
0000EFDA 7000                       		moveq	#0,d0
0000EFDC 1028 001A                  		move.b	obFrame(a0),d0
0000EFE0 D040                       		add.w	d0,d0
0000EFE2 2668 0004                  		movea.l	obMap(a0),a3
0000EFE6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000EFEA 524B                       		addq.w	#1,a3
0000EFEC 08E8 0005 0001             		bset	#5,obRender(a0)
0000EFF2 1810                       		move.b	0(a0),d4
0000EFF4 1A28 0001                  		move.b	obRender(a0),d5
0000EFF8 2248                       		movea.l	a0,a1
0000EFFA 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F000 1284                       		move.b	d4,0(a1)
0000F002 234B 0004                  		move.l	a3,obMap(a1)
0000F006 1345 0001                  		move.b	d5,obRender(a1)
0000F00A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F010 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F016 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F01C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F022 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F028 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F02C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F030 5341                       		subq.w #1,d1
0000F032 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F036 303C 005F                  		move.w #$5F,d0
0000F03A                            ; ===========================================================================
0000F03A                            
0000F03A                            Smash_Loop:
0000F03A 4A11                       		tst.b	(a1)
0000F03C 6700                       		beq.s	@cont
0000F03E 43E9 0040                  		lea		$40(a1),a1
0000F042 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F046 6600                       		bne.s	Smash_PlaySnd
0000F048                            
0000F048                            	@cont:
0000F048 5A4B                       		addq.w #5,a3
0000F04A                            
0000F04A                            Smash_LoadFrag:				; XREF: SmashObject
0000F04A 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F050 1284                       		move.b	d4,0(a1)
0000F052 234B 0004                  		move.l	a3,obMap(a1)
0000F056 1345 0001                  		move.b	d5,obRender(a1)
0000F05A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F060 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F066 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F06C 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F072 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F078 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F07C 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F080 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F084                            
0000F084                            Smash_PlaySnd:
0000F084 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F088 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F08E                            
0000F08E                            ; End of function SmashObject
0000F08E                            ; End of function SmashObject
0000F08E                            
0000F08E                            ; ===========================================================================
0000F08E                            ; Smashed block	fragment speeds
0000F08E                            ;
0000F08E 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F092 0600 FF00                  		dc.w $600, -$100
0000F096 0600 0100                  		dc.w $600, $100
0000F09A 0400 0500                  		dc.w $400, $500
0000F09E 0600 FA00                  		dc.w $600, -$600
0000F0A2 0800 FE00                  		dc.w $800, -$200
0000F0A6 0800 0200                  		dc.w $800, $200
0000F0AA 0600 0600                  		dc.w $600, $600
0000F0AE                            
0000F0AE FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F0B2 F800 FE00                  		dc.w -$800, -$200
0000F0B6 F800 0200                  		dc.w -$800, $200
0000F0BA FA00 0600                  		dc.w -$600, $600
0000F0BE FC00 FB00                  		dc.w -$400, -$500
0000F0C2 FA00 FF00                  		dc.w -$600, -$100
0000F0C6 FA00 0100                  		dc.w -$600, $100
0000F0CA FC00 0500                  		dc.w -$400, $500
0000F0CE                            
0000F0CE                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F0CE                            ; ---------------------------------------------------------------------------
0000F0CE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F0CE                            ; ---------------------------------------------------------------------------
0000F0CE                            Map_Smash_internal:
0000F0CE 0000                       		dc.w @left-Map_Smash_internal
0000F0D0 0000                       		dc.w @middle-Map_Smash_internal
0000F0D2 0000                       		dc.w @right-Map_Smash_internal
0000F0D4 08                         @left:		dc.b 8
0000F0D5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F0DA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F0DF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F0E4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F0E9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F0EE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F0F3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F0F8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F0FD 08                         @middle:	dc.b 8
0000F0FE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F103 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F108 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F10D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F112 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F117 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F11C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F121 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F126 08                         @right:		dc.b 8
0000F127 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F12C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F131 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F136 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F13B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F140 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F145 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F14A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F150 00                         		even
0000F150 00                         		even
0000F150                            
0000F150                            ; ---------------------------------------------------------------------------
0000F150                            ; Object code execution subroutine
0000F150                            ; ---------------------------------------------------------------------------
0000F150                            
0000F150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F150                            
0000F150                            
0000F150                            
0000F150                            ExecuteObjects: ; XREF: GM_Title; et al
0000F150 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F154 7E7F                       		moveq #$7F,d7
0000F156 7000                       		moveq #0,d0
0000F158 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F15E 6400                       		bcc.s loc_D362
0000F160                            
0000F160                            loc_D348:
0000F160 1010                       		move.b (a0),d0 ; load object number from RAM
0000F162 6700                       		beq.s loc_D358
0000F164 D040                       		add.w d0,d0
0000F166 D040                       		add.w d0,d0
0000F168 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F16C 4E91                       		jsr (a1) ; run the object's code
0000F16E 7000                       		moveq #0,d0
0000F170                            
0000F170                            loc_D358:
0000F170 41E8 0040                  		lea $40(a0),a0 ; next object
0000F174 51CF FFEA                  		dbf d7,loc_D348
0000F178 4E75                       		rts
0000F17A                            ; ===========================================================================
0000F17A                            
0000F17A                            loc_D362:
0000F17A 7E1F                       		moveq #$1F,d7
0000F17C 61E2                       		bsr.s loc_D348
0000F17E 7E5F                       		moveq #$5F,d7
0000F180                            
0000F180                            loc_D368:
0000F180 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F182 1010                       		move.b (a0),d0 ; get the object's ID
0000F184 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F186 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F18A 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F18C 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F190 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F196 6700                       		beq.s loc_D378 ; if not, branch
0000F198 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F19C                            
0000F19C                            loc_D378:
0000F19C 6100 0000                  		bsr.w DisplaySprite2
0000F1A0                            		
0000F1A0                            loc_D37C:
0000F1A0 41E8 0040                  		lea $40(a0),a0
0000F1A4 51CF FFDA                  		dbf d7,loc_D368
0000F1A8 4E75                       		rts
0000F1AA                            ; End of function ExecuteObjects
0000F1AA                            
0000F1AA                            ; ===========================================================================
0000F1AA                            ; ---------------------------------------------------------------------------
0000F1AA                            ; Object pointers
0000F1AA                            ; ---------------------------------------------------------------------------
0000F1AA                            Obj_Index:
0000F1AA                            		include	"_inc\Object Pointers.asm"
0000F1AA                            ; ---------------------------------------------------------------------------
0000F1AA                            ; Object pointers
0000F1AA                            ; ---------------------------------------------------------------------------
0000F1AA 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F1AE 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F1B2 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F1B6 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F1BA 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F1BE 0000 AEB4                  ptr_Mozzietron:		dc.l Mozzietron
0000F1C2 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F1C6 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F1CA 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F1CE 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F1D2 0000 0000                  ptr_Pole:		dc.l Pole
0000F1D6 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F1DA 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F1DE 0000 C2BE                  ptr_TitleSonic:		dc.l TitleSonic
0000F1E2 0000 C33E                  ptr_PSBTM:		dc.l PSBTM
0000F1E6 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F1EA 0000 89C4                  ptr_Bridge:		dc.l Bridge
0000F1EE 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F1F2 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F1F6 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F1FA 0000 8FEA                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F1FE 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F202 0000 9336                  ptr_Helix:		dc.l Helix
0000F206 0000 94C2                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F20A 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F20E 0000 989E                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F212 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F216 0000 9EA6                  ptr_Scenery:		dc.l Scenery
0000F21A 0000 9F48                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F21E 0000 A230                  ptr_BallHog:		dc.l BallHog
0000F222 0000 ABCA                  ptr_Crabmeat:		dc.l Crabmeat
0000F226 0000 A2FE                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F22A 0000 0000                  ptr_HUD:		dc.l HUD
0000F22E 0000 AFE6                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F232 0000 B138                  ptr_Missile:		dc.l Missile
0000F236 0000 A3D0                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F23A 0000 B392                  ptr_Rings:		dc.l Rings
0000F23E 0000 BBDC                  ptr_Monitor:		dc.l Monitor
0000F242 0000 A440                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F246 0000 A5FE                  ptr_Animals:		dc.l Animals		; $28
0000F24A 0000 AAEC                  ptr_Points:		dc.l Points
0000F24E 0000 A01E                  ptr_AutoDoor:		dc.l AutoDoor
0000F252 0000 C8E8                  ptr_Chopper:		dc.l Chopper
0000F256 0000 C9A2                  ptr_Jaws:		dc.l Jaws
0000F25A 0000 CA6C                  ptr_Burrobot:		dc.l Burrobot
0000F25E 0000 BDDA                  ptr_PowerUp:		dc.l PowerUp
0000F262 0000 CC80                  ptr_LargeGrass:		dc.l LargeGrass
0000F266 0000 D162                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F26A 0000 D43E                  ptr_ChainStomp:		dc.l ChainStomp
0000F26E 0000 DAEC                  ptr_Button:		dc.l Button
0000F272 0000 DC90                  ptr_PushBlock:		dc.l PushBlock
0000F276 0000 E0C2                  ptr_TitleCard:		dc.l TitleCard
0000F27A 0000 CFA2                  ptr_GrassFire:		dc.l GrassFire
0000F27E 0000 EC0A                  ptr_Spikes:		dc.l Spikes
0000F282 0000 B5EE                  ptr_RingLoss:		dc.l RingLoss
0000F286 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F28A 0000 E272                  ptr_GameOverCard:	dc.l GameOverCard
0000F28E 0000 E330                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F292 0000 EE38                  ptr_PurpleRock:		dc.l PurpleRock
0000F296 0000 EF04                  ptr_SmashWall:		dc.l SmashWall
0000F29A 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F29E 0000 0000                  ptr_Prison:		dc.l Prison
0000F2A2 0000 A4D2                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F2A6 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F2AA 0000 0000                  ptr_Springs:		dc.l Springs
0000F2AE 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F2B2 0000 0000                  ptr_Roller:		dc.l Roller
0000F2B6 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F2BA 0000 D75A                  ptr_SideStomp:		dc.l SideStomp
0000F2BE 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F2C2 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F2C6 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F2CA 0000 EEA6                  ptr_WaterSound:		dc.l WaterSound
0000F2CE 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F2D2 0000 B8B0                  ptr_GiantRing:		dc.l GiantRing
0000F2D6 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F2DA 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F2DE 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F2E2 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F2E6 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F2EA 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F2EE 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F2F2 0000 99AE                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F2F6 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F2FA 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F2FE 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F302 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F306 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F30A 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F30E 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F312 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F316 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F31A 0000 0000                  ptr_Fan:		dc.l Fan
0000F31E 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F322 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F326 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F32A 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F32E 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F332 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F336 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F33A 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F33E 0000 0000                  ptr_Junction:		dc.l Junction
0000F342 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F346 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F34A 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F34E 0000 0000                  ptr_Saws:		dc.l Saws
0000F352 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F356 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F35A 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F35E 0000 0000                  ptr_Electro:		dc.l Electro
0000F362 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F366 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F36A 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F36E 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F372 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F376 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F37A 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F37E 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F382 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F386 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F38A 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F38E 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F392 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F396 0000 B98A                  ptr_RingFlash:		dc.l RingFlash
0000F39A 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F39E 0000 E56A                  ptr_SSResult:		dc.l SSResult
0000F3A2 0000 E710                  ptr_SSRChaos:		dc.l SSRChaos
0000F3A6 0000 5F5C                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F3AA 0000 6074                  ptr_ContSonic:		dc.l ContSonic
0000F3AE 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F3B2 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F3B6 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F3BA 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F3BE 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F3C2 0000 64FA                  ptr_EndSonic:		dc.l EndSonic
0000F3C6 0000 6654                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F3CA 0000 672E                  ptr_EndSTH:		dc.l EndSTH
0000F3CE 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F3D2 0000 6994                  ptr_EndEggman:		dc.l EndEggman
0000F3D6 0000 6A74                  ptr_TryChaos:		dc.l TryChaos
0000F3DA                            
0000F3DA                            NullObject:
0000F3DA                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F3DA                            
0000F3DA =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F3DA =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F3DA =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F3DA =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F3DA =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F3DA =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F3DA =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F3DA =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F3DA =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F3DA =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F3DA =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F3DA =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F3DA =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F3DA =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F3DA =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F3DA =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F3DA =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F3DA =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F3DA =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F3DA =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F3DA =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F3DA =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F3DA =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F3DA =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F3DA =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F3DA =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F3DA =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F3DA =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F3DA =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F3DA =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F3DA =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F3DA =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F3DA =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F3DA =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F3DA =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F3DA =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F3DA =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F3DA =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F3DA =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F3DA =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F3DA =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F3DA =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F3DA =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F3DA =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F3DA =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F3DA =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F3DA =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F3DA =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F3DA =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F3DA =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F3DA =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F3DA =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F3DA =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F3DA =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F3DA =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F3DA =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F3DA =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F3DA =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F3DA =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F3DA =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F3DA =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F3DA =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F3DA =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F3DA =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F3DA =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F3DA =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F3DA =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F3DA =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F3DA =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F3DA =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F3DA =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F3DA =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F3DA =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F3DA =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F3DA =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F3DA =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F3DA =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F3DA =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F3DA =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F3DA =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F3DA =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F3DA =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F3DA =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F3DA =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F3DA =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F3DA =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F3DA =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F3DA =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F3DA =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F3DA =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F3DA =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F3DA =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F3DA =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F3DA =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F3DA =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F3DA =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F3DA =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F3DA =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F3DA =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F3DA =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F3DA =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F3DA =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F3DA =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F3DA =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F3DA =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F3DA =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F3DA =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F3DA =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F3DA =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F3DA =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F3DA =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F3DA =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F3DA =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F3DA =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F3DA =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F3DA =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F3DA =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F3DA =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F3DA =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F3DA =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F3DA =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F3DA =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F3DA =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F3DA =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F3DA =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F3DA =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F3DA =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F3DA =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F3DA =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F3DA =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F3DA =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F3DA =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F3DA =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F3DA =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F3DA =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F3DA =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F3DA =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F3DA =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F3DA =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F3DA =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F3DA =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F3DA                            
0000F3DA                            		include	"_incObj\sub ObjectFall.asm"
0000F3DA                            ; ---------------------------------------------------------------------------
0000F3DA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F3DA                            ; ---------------------------------------------------------------------------
0000F3DA                            
0000F3DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3DA                            
0000F3DA                            
0000F3DA                            ObjectFall:
0000F3DA 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F3E0 6700                       		beq.s	@donothing
0000F3E2 3028 0010                  		move.w	obVelX(a0),d0
0000F3E6 48C0                       		ext.l	d0
0000F3E8 E188                       		lsl.l	#8,d0
0000F3EA D1A8 0008                  		add.l	d0,obX(a0)
0000F3EE 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F3F4 6F00                               ble.s   @skipline       ; if yes, branch
0000F3F6 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F3FC                                @skipline:		
0000F3FC 3028 0012                  		move.w	obVelY(a0),d0
0000F400 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F406 48C0                       		ext.l	d0
0000F408 E188                       		lsl.l	#8,d0
0000F40A D1A8 000C                  		add.l	d0,obY(a0)
0000F40E 4E75                       		rts	
0000F410                            	
0000F410                            	@donothing:
0000F410 4E75                       		rts
0000F412                            
0000F412                            ; End of function ObjectFall
0000F412                            ; End of function ObjectFall
0000F412                            		include	"_incObj\sub SpeedToPos.asm"
0000F412                            ; ---------------------------------------------------------------------------
0000F412                            ; Subroutine translating object	speed to update	object position
0000F412                            ; ---------------------------------------------------------------------------
0000F412                            
0000F412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F412                            
0000F412                            
0000F412                            SpeedToPos:
0000F412 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F418 E188                       		lsl.l	#8,d0
0000F41A D1A8 0008                  		add.l	d0,obX(a0)
0000F41E E18A                       		lsl.l	#8,d2
0000F420 D5A8 000C                  		add.l	d2,obY(a0)
0000F424 4E75                       		rts
0000F426                            ; End of function SpeedToPos
0000F426                            ; End of function SpeedToPos
0000F426                            		include	"_incObj\sub DisplaySprite.asm"
0000F426                            ; ---------------------------------------------------------------------------
0000F426                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F426                            ; ---------------------------------------------------------------------------
0000F426                            
0000F426                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F426                            
0000F426                            
0000F426                            DisplaySprite:
0000F426 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F42A D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F42E 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F432 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F434 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F436 D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F438 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F43A                            
0000F43A                                DSpr_Full:
0000F43A 4E75                               rts    
0000F43C                            
0000F43C                            ; End of function DisplaySprite
0000F43C                            
0000F43C                            
0000F43C                            ; ---------------------------------------------------------------------------
0000F43C                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F43C                            ; ---------------------------------------------------------------------------
0000F43C                            
0000F43C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F43C                            
0000F43C                            
0000F43C                            DisplaySprite1:
0000F43C 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F440 D4E9 0018                          adda.w  obpriority(a1),a2
0000F444 0C52 007E                          cmpi.w    #$7E,(a2)
0000F448 6400                               bcc.s    DSpr1_Full
0000F44A 5452                               addq.w    #2,(a2)
0000F44C D4D2                               adda.w    (a2),a2
0000F44E 3489                               move.w    a1,(a2)
0000F450                            
0000F450                                DSpr1_Full:
0000F450 4E75                               rts    
0000F452                            
0000F452                            ; End of function DisplaySprite1
0000F452                            
0000F452                            ; ---------------------------------------------------------------------------
0000F452                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F452                            ; and d0 is already (priority/2)&$380
0000F452                            ; ---------------------------------------------------------------------------
0000F452                            
0000F452                            ; loc_16530:
0000F452                            DisplaySprite2:
0000F452 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F456 D2C0                           adda.w    d0,a1
0000F458 0C51 007E                      cmpi.w    #$7E,(a1)
0000F45C 6400                           bhs.s    return_16542
0000F45E 5451                           addq.w    #2,(a1)
0000F460 D2D1                           adda.w    (a1),a1
0000F462 3288                           move.w    a0,(a1)
0000F464                            
0000F464                            return_16542:
0000F464 4E75                           rts
0000F464 4E75                           rts
0000F466                            		include	"_incObj\sub DeleteObject.asm"
0000F466                            ; ---------------------------------------------------------------------------
0000F466                            ; Subroutine to	delete an object
0000F466                            ; ---------------------------------------------------------------------------
0000F466                            
0000F466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F466                            
0000F466                            
0000F466                            DeleteObject:
0000F466 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F468                            
0000F468                            DeleteChild:				; child objects are already in (a1)
0000F468 7200                       		moveq	#0,d1
0000F46A 700F                       		moveq	#$F,d0
0000F46C                            
0000F46C                            	DelObj_Loop:
0000F46C 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F46E 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F472 4E75                       		rts	
0000F474                            
0000F474                            ; End of function DeleteObject
0000F474                            ; End of function DeleteObject
0000F474                            
0000F474                            ; ===========================================================================
0000F474 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F478 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F47C 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F480 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F484                            ; ---------------------------------------------------------------------------
0000F484                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F484                            ; ---------------------------------------------------------------------------
0000F484                            
0000F484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F484                            BuildSprites:                ; XREF: TitleScreen; et al
0000F484 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F488 7A00                       		moveq	#0,d5
0000F48A 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F48E 7E07                       		moveq	#7,d7
0000F490                            		
0000F490                            loc_D66A:
0000F490 4A54                       		tst.w	(a4)
0000F492 6700 0000                  		beq.w	loc_D72E
0000F496 7C02                       		moveq	#2,d6
0000F498                            
0000F498                            loc_D672:
0000F498 3074 6000                          movea.w    (a4,d6.w),a0
0000F49C 4A10                               tst.b    (a0)
0000F49E 6700 0000                          beq.w    loc_D726
0000F4A2 08A8 0007 0001                     bclr    #7,1(a0)
0000F4A8 1028 0001                          move.b    1(a0),d0
0000F4AC 1800                               move.b    d0,d4
0000F4AE 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F4B2 6700                               beq.s    @skip    ; if it is, branch
0000F4B4 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F4B8 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F4BC                               @skip:
0000F4BC 0240 000C                  		andi.w	#$C,d0
0000F4C0 6700                       		beq.s	loc_D6DE
0000F4C2 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F4C6 7000                       		moveq	#0,d0
0000F4C8 1028 0014                  		move.b	width_pixels(a0),d0
0000F4CC 3628 0008                  		move.w	8(a0),d3
0000F4D0 9651                       		sub.w	(a1),d3
0000F4D2 3203                       		move.w	d3,d1
0000F4D4 D240                       		add.w	d0,d1
0000F4D6 6B00 0000                  		bmi.w	loc_D726
0000F4DA 3203                       		move.w	d3,d1
0000F4DC 9240                       		sub.w	d0,d1
0000F4DE 0C41 0140                  		cmpi.w	#$140,d1
0000F4E2 6C00                       		bge.s	loc_D726
0000F4E4 0643 0080                  		addi.w	#$80,d3
0000F4E8 0804 0004                  		btst	#4,d4
0000F4EC 6700                       		beq.s	loc_D6E8
0000F4EE 7000                       		moveq	#0,d0
0000F4F0 1028 0016                  		move.b	$16(a0),d0
0000F4F4 3428 000C                  		move.w	$C(a0),d2
0000F4F8 9469 0004                  		sub.w	4(a1),d2
0000F4FC 3202                       		move.w	d2,d1
0000F4FE D240                       		add.w	d0,d1
0000F500 6B00                       		bmi.s	loc_D726
0000F502 3202                       		move.w	d2,d1
0000F504 9240                       		sub.w	d0,d1
0000F506 0C41 00E0                  		cmpi.w	#$E0,d1
0000F50A 6C00                       		bge.s	loc_D726
0000F50C 0642 0080                  		addi.w	#$80,d2
0000F510 6000                       		bra.s	loc_D700
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            loc_D6DE:
0000F512 3428 000A                  		move.w	$A(a0),d2
0000F516 3628 0008                  		move.w	8(a0),d3
0000F51A 6000                       		bra.s	loc_D700
0000F51C                            ; ===========================================================================
0000F51C                            
0000F51C                            loc_D6E8:
0000F51C 3428 000C                  		move.w	$C(a0),d2
0000F520 9469 0004                  		sub.w	4(a1),d2
0000F524 0642 0080                  		addi.w	#$80,d2
0000F528 0C42 0060                  		cmpi.w	#$60,d2
0000F52C 6500                       		bcs.s	loc_D726
0000F52E 0C42 0180                  		cmpi.w	#$180,d2
0000F532 6400                       		bcc.s	loc_D726
0000F534                            
0000F534                            loc_D700:
0000F534 2268 0004                  		movea.l	4(a0),a1
0000F538 7200                       		moveq	#0,d1
0000F53A 0804 0005                  		btst	#5,d4
0000F53E 6600                       		bne.s	loc_D71C
0000F540 1228 001A                  		move.b	$1A(a0),d1
0000F544 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F546 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F54A 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F54C 1219                       		move.b	(a1)+,d1
0000F54E 5301                       		subq.b	#1,d1
0000F550 6B00                       		bmi.s	loc_D720
0000F552                            
0000F552                            loc_D71C:
0000F552 4EB9 0000 0000             		jsr	sub_D750
0000F558                            
0000F558                            loc_D720:
0000F558 08E8 0007 0001             		bset	#7,1(a0)
0000F55E                            
0000F55E                            loc_D726:
0000F55E 5446                       		addq.w	#2,d6
0000F560 5554                       		subq.w	#2,(a4)
0000F562 6600 FF34                  		bne.w	loc_D672
0000F566                            
0000F566                            loc_D72E:
0000F566 49EC 0080                  		lea	$80(a4),a4
0000F56A 51CF FF24                  		dbf	d7,loc_D66A
0000F56E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F572 0C05 0050                  		cmpi.b	#$50,d5
0000F576 6700                       		beq.s	loc_D748
0000F578 24BC 0000 0000             		move.l	#0,(a2)
0000F57E 4E75                       		rts	
0000F580                            ; ===========================================================================
0000F580                            
0000F580                            loc_D748:
0000F580 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F586 4E75                       		rts	
0000F588                            ; End of function BuildSprites
0000F588                            
0000F588                            BuildSprites_MultiDraw:
0000F588 2F0C                       	move.l	a4,-(sp)
0000F58A 49F8 F700                  	lea	($FFFFF700).w,a4
0000F58E 3668 0002                  	movea.w	art_tile(a0),a3
0000F592 2A68 0004                  	movea.l	mappings(a0),a5
0000F596 7000                       	moveq	#0,d0
0000F598                            
0000F598                            	; check if object is within X bounds
0000F598 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F59C 3628 0008                  	move.w	x_pos(a0),d3
0000F5A0 9654                       	sub.w	(a4),d3
0000F5A2 3203                       	move.w	d3,d1                            
0000F5A4 D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F5A6 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F5AA 3203                       	move.w	d3,d1
0000F5AC 9240                       	sub.w	d0,d1
0000F5AE 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F5B2 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F5B6 0643 0080                  	addi.w	#128,d3
0000F5BA                            
0000F5BA                            	; check if object is within Y bounds
0000F5BA 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F5BE 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F5C0 7000                       	moveq	#0,d0
0000F5C2 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F5C6 3428 000C                  	move.w	y_pos(a0),d2
0000F5CA 946C 0004                  	sub.w	4(a4),d2
0000F5CE 3202                       	move.w	d2,d1
0000F5D0 D240                       	add.w	d0,d1
0000F5D2 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F5D6 3202                       	move.w	d2,d1
0000F5D8 9240                       	sub.w	d0,d1
0000F5DA 0C41 00E0                  	cmpi.w	#224,d1
0000F5DE 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F5E2 0642 0080                  	addi.w	#128,d2
0000F5E6 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F5E8                            BuildSpritesMulti_ApproxYCheck:
0000F5E8 3428 000C                  	move.w	y_pos(a0),d2
0000F5EC 946C 0004                  	sub.w	4(a4),d2
0000F5F0 0642 0080                  	addi.w	#128,d2
0000F5F4 0242 07FF                  	andi.w	#$7FF,d2
0000F5F8 0C42 0060                  	cmpi.w	#-32+128,d2
0000F5FC 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F5FE 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F602 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F604                            BuildSpritesMulti_DrawSprite:
0000F604 7200                       	moveq	#0,d1
0000F606 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F60A 6700                       	beq.s	.noparenttodraw
0000F60C D241                       	add.w	d1,d1
0000F60E 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F610 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F614 7200                       	moveq	#0,d1
0000F616 1219                       	move.b	(a1)+,d1
0000F618 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F61A 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F61C 3F04                       	move.w	d4,-(sp)
0000F61E 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F624 381F                       	move.w	(sp)+,d4
0000F626                            .noparenttodraw:
0000F626 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F62C 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F630 7000                       	moveq	#0,d0
0000F632 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F636 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F638 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F63A                            
0000F63A                            @drawchildloop:
0000F63A 4840                       	swap	d0
0000F63C 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F63E 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F640 0643 0080                  	addi.w	#128,d3
0000F644 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F646 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F64A 0642 0080                  	addi.w	#128,d2
0000F64E 0242 07FF                  	andi.w	#$7FF,d2
0000F652 524E                       	addq.w	#1,a6
0000F654 7200                       	moveq	#0,d1
0000F656 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F658 D241                       	add.w	d1,d1
0000F65A 224D                       	movea.l	a5,a1
0000F65C D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F660 7200                       	moveq	#0,d1
0000F662 1219                       	move.b	(a1)+,d1
0000F664 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F666 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F668 3F04                       	move.w	d4,-(sp)
0000F66A 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F670 381F                       	move.w	(sp)+,d4
0000F672                            @nochildleft:
0000F672 4840                       	swap	d0
0000F674 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F678                            ; loc_16804:
0000F678                            BuildSprites_MultiDraw_NextObj:
0000F678 285F                       	movea.l	(sp)+,a4
0000F67A 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000F67E                            
0000F67E                            
0000F67E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000F67E                            
0000F67E                            ; sub_1680A:
0000F67E                            ChkDrawSprite:
0000F67E 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000F682 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000F684 4E75                       	rts	; otherwise, return
0000F686                            
0000F686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F686                            
0000F686                            
0000F686                            sub_D750:				; XREF: BuildSprites
0000F686 3668 0002                  		movea.w	2(a0),a3
0000F68A                            loc_1681C:
0000F68A 0804 0000                  		btst	#0,d4
0000F68E 6600                       		bne.s	loc_D796
0000F690 0804 0001                  		btst	#1,d4
0000F694 6600 0000                  		bne.w	loc_D7E4
0000F698                            ; End of function sub_D750
0000F698                            
0000F698                            
0000F698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F698                            
0000F698                            
0000F698                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F698 0C05 0050                  		cmpi.b	#$50,d5
0000F69C 6700                       		beq.s	locret_D794
0000F69E                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000F69E 1019                       		move.b	(a1)+,d0
0000F6A0 4880                       		ext.w	d0
0000F6A2 D042                       		add.w	d2,d0
0000F6A4 34C0                       		move.w	d0,(a2)+
0000F6A6 14D9                       		move.b	(a1)+,(a2)+
0000F6A8 5205                       		addq.b	#1,d5
0000F6AA 14C5                       		move.b	d5,(a2)+
0000F6AC 1019                       		move.b	(a1)+,d0
0000F6AE E148                       		lsl.w	#8,d0
0000F6B0 1019                       		move.b	(a1)+,d0
0000F6B2 D04B                       		add.w	a3,d0
0000F6B4 34C0                       		move.w	d0,(a2)+
0000F6B6 1019                       		move.b	(a1)+,d0
0000F6B8 4880                       		ext.w	d0
0000F6BA D043                       		add.w	d3,d0
0000F6BC 0240 01FF                  		andi.w	#$1FF,d0
0000F6C0 6600                       		bne.s	loc_D78E
0000F6C2 5240                       		addq.w	#1,d0
0000F6C4                            
0000F6C4                            loc_D78E:
0000F6C4 34C0                       		move.w	d0,(a2)+
0000F6C6 51C9 FFD0                  		dbf	d1,sub_D762
0000F6CA                            
0000F6CA                            locret_D794:
0000F6CA 4E75                       		rts
0000F6CC                            ; End of function sub_D762
0000F6CC                            
0000F6CC                            ; ===========================================================================
0000F6CC                            
0000F6CC                            loc_D796:
0000F6CC 0804 0001                  		btst	#1,d4
0000F6D0 6600 0000                  		bne.w	loc_D82A
0000F6D4                            
0000F6D4                            loc_D79E:
0000F6D4 0C05 0050                  		cmpi.b	#$50,d5
0000F6D8 6700                       		beq.s	locret_D7E2
0000F6DA 1019                       		move.b	(a1)+,d0
0000F6DC 4880                       		ext.w	d0
0000F6DE D042                       		add.w	d2,d0
0000F6E0 34C0                       		move.w	d0,(a2)+
0000F6E2 1819                       		move.b	(a1)+,d4
0000F6E4 14C4                       		move.b	d4,(a2)+
0000F6E6 5205                       		addq.b	#1,d5
0000F6E8 14C5                       		move.b	d5,(a2)+
0000F6EA 1019                       		move.b	(a1)+,d0
0000F6EC E148                       		lsl.w	#8,d0
0000F6EE 1019                       		move.b	(a1)+,d0
0000F6F0 D04B                       		add.w	a3,d0
0000F6F2 0A40 0800                  		eori.w	#$800,d0
0000F6F6 34C0                       		move.w	d0,(a2)+
0000F6F8 1019                       		move.b	(a1)+,d0
0000F6FA 4880                       		ext.w	d0
0000F6FC 4440                       		neg.w	d0
0000F6FE D804                       		add.b	d4,d4
0000F700 0244 0018                  		andi.w	#$18,d4
0000F704 5044                       		addq.w	#8,d4
0000F706 9044                       		sub.w	d4,d0
0000F708 D043                       		add.w	d3,d0
0000F70A 0240 01FF                  		andi.w	#$1FF,d0
0000F70E 6600                       		bne.s	loc_D7DC
0000F710 5240                       		addq.w	#1,d0
0000F712                            
0000F712                            loc_D7DC:
0000F712 34C0                       		move.w	d0,(a2)+
0000F714 51C9 FFBE                  		dbf	d1,loc_D79E
0000F718                            
0000F718                            locret_D7E2:
0000F718 4E75                       		rts
0000F71A                            ; ===========================================================================
0000F71A                            
0000F71A                            loc_D7E4:				; XREF: sub_D750
0000F71A 0C05 0050                  		cmpi.b	#$50,d5
0000F71E 6700                       		beq.s	locret_D828
0000F720 1019                       		move.b	(a1)+,d0
0000F722 1811                       		move.b	(a1),d4
0000F724 4880                       		ext.w	d0
0000F726 4440                       		neg.w	d0
0000F728 E70C                       		lsl.b	#3,d4
0000F72A 0244 0018                  		andi.w	#$18,d4
0000F72E 5044                       		addq.w	#8,d4
0000F730 9044                       		sub.w	d4,d0
0000F732 D042                       		add.w	d2,d0
0000F734 34C0                       		move.w	d0,(a2)+
0000F736 14D9                       		move.b	(a1)+,(a2)+
0000F738 5205                       		addq.b	#1,d5
0000F73A 14C5                       		move.b	d5,(a2)+
0000F73C 1019                       		move.b	(a1)+,d0
0000F73E E148                       		lsl.w	#8,d0
0000F740 1019                       		move.b	(a1)+,d0
0000F742 D04B                       		add.w	a3,d0
0000F744 0A40 1000                  		eori.w	#$1000,d0
0000F748 34C0                       		move.w	d0,(a2)+
0000F74A 1019                       		move.b	(a1)+,d0
0000F74C 4880                       		ext.w	d0
0000F74E D043                       		add.w	d3,d0
0000F750 0240 01FF                  		andi.w	#$1FF,d0
0000F754 6600                       		bne.s	loc_D822
0000F756 5240                       		addq.w	#1,d0
0000F758                            
0000F758                            loc_D822:
0000F758 34C0                       		move.w	d0,(a2)+
0000F75A 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F75E                            
0000F75E                            locret_D828:
0000F75E 4E75                       		rts
0000F760                            ; ===========================================================================
0000F760                            
0000F760                            loc_D82A:
0000F760 0C05 0050                  		cmpi.b	#$50,d5
0000F764 6700                       		beq.s	locret_D87C
0000F766 1019                       		move.b	(a1)+,d0
0000F768 1811                       		move.b	(a1),d4
0000F76A 4880                       		ext.w	d0
0000F76C 4440                       		neg.w	d0
0000F76E E70C                       		lsl.b	#3,d4
0000F770 0244 0018                  		andi.w	#$18,d4
0000F774 5044                       		addq.w	#8,d4
0000F776 9044                       		sub.w	d4,d0
0000F778 D042                       		add.w	d2,d0
0000F77A 34C0                       		move.w	d0,(a2)+
0000F77C 1819                       		move.b	(a1)+,d4
0000F77E 14C4                       		move.b	d4,(a2)+
0000F780 5205                       		addq.b	#1,d5
0000F782 14C5                       		move.b	d5,(a2)+
0000F784 1019                       		move.b	(a1)+,d0
0000F786 E148                       		lsl.w	#8,d0
0000F788 1019                       		move.b	(a1)+,d0
0000F78A D04B                       		add.w	a3,d0
0000F78C 0A40 1800                  		eori.w	#$1800,d0
0000F790 34C0                       		move.w	d0,(a2)+
0000F792 1019                       		move.b	(a1)+,d0
0000F794 4880                       		ext.w	d0
0000F796 4440                       		neg.w	d0
0000F798 D804                       		add.b	d4,d4
0000F79A 0244 0018                  		andi.w	#$18,d4
0000F79E 5044                       		addq.w	#8,d4
0000F7A0 9044                       		sub.w	d4,d0
0000F7A2 D043                       		add.w	d3,d0
0000F7A4 0240 01FF                  		andi.w	#$1FF,d0
0000F7A8 6600                       		bne.s	loc_D876
0000F7AA 5240                       		addq.w	#1,d0
0000F7AC                            
0000F7AC                            loc_D876:
0000F7AC 34C0                       		move.w	d0,(a2)+
0000F7AE 51C9 FFB0                  		dbf	d1,loc_D82A
0000F7B2                            
0000F7B2                            locret_D87C:
0000F7B2 4E75                       		rts
0000F7B4                            ; End of function BuildSpr_Normal
0000F7B4                            
0000F7B4                            ; ===========================================================================
0000F7B4                            
0000F7B4                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            ; Subroutine to	check if an object is off screen
0000F7B4                            
0000F7B4                            ; output:
0000F7B4                            ;	d0 = flag set if object is off screen
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            
0000F7B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7B4                            
0000F7B4                            
0000F7B4                            ChkObjectVisible:
0000F7B4 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F7B8 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F7BC 6B00                       		bmi.s	@offscreen
0000F7BE 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F7C2 6C00                       		bge.s	@offscreen	; if not, branch
0000F7C4                            
0000F7C4 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F7C8 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F7CC 6B00                       		bmi.s	@offscreen
0000F7CE 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F7D2 6C00                       		bge.s	@offscreen	; if not, branch
0000F7D4                            
0000F7D4 7000                       		moveq	#0,d0		; set flag to 0
0000F7D6 4E75                       		rts	
0000F7D8                            
0000F7D8                            	@offscreen:
0000F7D8 7001                       		moveq	#1,d0		; set flag to 1
0000F7DA 4E75                       		rts	
0000F7DC                            ; End of function ChkObjectVisible
0000F7DC                            
0000F7DC                            ; ---------------------------------------------------------------------------
0000F7DC                            ; Subroutine to	check if an object is off screen
0000F7DC                            ; More precise than above subroutine, taking width into account
0000F7DC                            
0000F7DC                            ; output:
0000F7DC                            ;	d0 = flag set if object is off screen
0000F7DC                            ; ---------------------------------------------------------------------------
0000F7DC                            
0000F7DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7DC                            
0000F7DC                            
0000F7DC                            ChkPartiallyVisible:
0000F7DC 7200                       		moveq	#0,d1
0000F7DE 1228 0014                  		move.b	obActWid(a0),d1
0000F7E2 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F7E6 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F7EA D041                       		add.w	d1,d0		; add object width
0000F7EC 6B00                       		bmi.s	@offscreen2
0000F7EE D241                       		add.w	d1,d1
0000F7F0 9041                       		sub.w	d1,d0
0000F7F2 0C40 0140                  		cmpi.w	#320,d0
0000F7F6 6C00                       		bge.s	@offscreen2
0000F7F8                            
0000F7F8 3228 000C                  		move.w	obY(a0),d1
0000F7FC 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F800 6B00                       		bmi.s	@offscreen2
0000F802 0C41 00E0                  		cmpi.w	#224,d1
0000F806 6C00                       		bge.s	@offscreen2
0000F808                            
0000F808 7000                       		moveq	#0,d0
0000F80A 4E75                       		rts	
0000F80C                            
0000F80C                            	@offscreen2:
0000F80C 7001                       		moveq	#1,d0
0000F80E 4E75                       		rts	
0000F810                            ; End of function ChkPartiallyVisible
0000F810                            ; End of function ChkPartiallyVisible
0000F810                            
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            ; Subroutine to	load a level's objects
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            
0000F810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F810                            
0000F810                            
0000F810                            ObjPosLoad:
0000F810 7000                       		moveq	#0,d0
0000F812 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F816 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F81A 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F81E                            ; End of function ObjPosLoad
0000F81E                            
0000F81E                            ; ===========================================================================
0000F81E 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F820 0000                       		dc.w OPL_Next-OPL_Index
0000F822                            ; ===========================================================================
0000F822                            
0000F822                            OPL_Main:
0000F822 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F826 3038 FE10                  		move.w	(v_zone).w,d0
0000F82A ED08                       		lsl.b	#6,d0
0000F82C E848                       		lsr.w	#4,d0
0000F82E 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F834 2248                       		movea.l	a0,a1
0000F836 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F83A 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F83E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F842 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F846 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000F84A 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000F84E 45F8 FC00                  		lea	(v_objstate).w,a2
0000F852 34FC 0101                  		move.w	#$101,(a2)+
0000F856 303C 005E                  		move.w	#$5E,d0
0000F85A                            
0000F85A                            OPL_ClrList:
0000F85A 429A                       		clr.l	(a2)+
0000F85C 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F860                            
0000F860 45F8 FC00                  		lea	(v_objstate).w,a2
0000F864 7400                       		moveq	#0,d2
0000F866 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F86A 0446 0080                  		subi.w	#$80,d6
0000F86E 6400                       		bhs.s	loc_D93C
0000F870 7C00                       		moveq	#0,d6
0000F872                            
0000F872                            loc_D93C:
0000F872 0246 FF80                  		andi.w	#$FF80,d6
0000F876 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F87A                            
0000F87A                            loc_D944:
0000F87A BC50                       		cmp.w	(a0),d6
0000F87C 6300                       		bls.s	loc_D956
0000F87E 4A28 0004                  		tst.b	4(a0)
0000F882 6A00                       		bpl.s	loc_D952
0000F884 1412                       		move.b	(a2),d2
0000F886 5212                       		addq.b	#1,(a2)
0000F888                            
0000F888                            loc_D952:
0000F888 5C48                       		addq.w	#6,a0
0000F88A 60EE                       		bra.s	loc_D944
0000F88C                            ; ===========================================================================
0000F88C                            
0000F88C                            loc_D956:
0000F88C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F890 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F894 0446 0080                  		subi.w	#$80,d6
0000F898 6500                       		blo.s	loc_D976
0000F89A                            
0000F89A                            loc_D964:
0000F89A BC50                       		cmp.w	(a0),d6
0000F89C 6300                       		bls.s	loc_D976
0000F89E 4A28 0004                  		tst.b	4(a0)
0000F8A2 6A00                       		bpl.s	loc_D972
0000F8A4 522A 0001                  		addq.b	#1,1(a2)
0000F8A8                            
0000F8A8                            loc_D972:
0000F8A8 5C48                       		addq.w	#6,a0
0000F8AA 60EE                       		bra.s	loc_D964
0000F8AC                            ; ===========================================================================
0000F8AC                            
0000F8AC                            loc_D976:
0000F8AC 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F8B0 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000F8B6                            
0000F8B6                            OPL_Next:
0000F8B6 45F8 FC00                  		lea	(v_objstate).w,a2
0000F8BA 7400                       		moveq	#0,d2
0000F8BC 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F8C0 0246 FF80                  		andi.w	#$FF80,d6
0000F8C4 BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000F8C8 6700 0000                  		beq.w	locret_DA3A
0000F8CC 6C00                       		bge.s	loc_D9F6
0000F8CE 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F8D2 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F8D6 0446 0080                  		subi.w	#$80,d6
0000F8DA 6500                       		blo.s	loc_D9D2
0000F8DC                            
0000F8DC                            loc_D9A6:
0000F8DC BC68 FFFA                  		cmp.w	-6(a0),d6
0000F8E0 6C00                       		bge.s	loc_D9D2
0000F8E2 5D48                       		subq.w	#6,a0
0000F8E4 4A28 0004                  		tst.b	4(a0)
0000F8E8 6A00                       		bpl.s	loc_D9BC
0000F8EA 532A 0001                  		subq.b	#1,1(a2)
0000F8EE 142A 0001                  		move.b	1(a2),d2
0000F8F2                            
0000F8F2                            loc_D9BC:
0000F8F2 6100 0000                  		bsr.w	loc_DA3C
0000F8F6 6600                       		bne.s	loc_D9C6
0000F8F8 5D48                       		subq.w	#6,a0
0000F8FA 60E0                       		bra.s	loc_D9A6
0000F8FC                            ; ===========================================================================
0000F8FC                            
0000F8FC                            loc_D9C6:
0000F8FC 4A28 0004                  		tst.b	4(a0)
0000F900 6A00                       		bpl.s	loc_D9D0
0000F902 522A 0001                  		addq.b	#1,1(a2)
0000F906                            
0000F906                            loc_D9D0:
0000F906 5C48                       		addq.w	#6,a0
0000F908                            
0000F908                            loc_D9D2:
0000F908 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F90C 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F910 0646 0300                  		addi.w	#$300,d6
0000F914                            
0000F914                            loc_D9DE:
0000F914 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F918 6E00                       		bgt.s	loc_D9F0
0000F91A 4A28 FFFE                  		tst.b	-2(a0)
0000F91E 6A00                       		bpl.s	loc_D9EC
0000F920 5312                       		subq.b	#1,(a2)
0000F922                            
0000F922                            loc_D9EC:
0000F922 5D48                       		subq.w	#6,a0
0000F924 60EE                       		bra.s	loc_D9DE
0000F926                            ; ===========================================================================
0000F926                            
0000F926                            loc_D9F0:
0000F926 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F92A 4E75                       		rts	
0000F92C                            ; ===========================================================================
0000F92C                            
0000F92C                            loc_D9F6:
0000F92C 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F930 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F934 0646 0280                  		addi.w	#$280,d6
0000F938                            
0000F938                            loc_DA02:
0000F938 BC50                       		cmp.w	(a0),d6
0000F93A 6300                       		bls.s	loc_DA16
0000F93C 4A28 0004                  		tst.b	4(a0)
0000F940 6A00                       		bpl.s	loc_DA10
0000F942 1412                       		move.b	(a2),d2
0000F944 5212                       		addq.b	#1,(a2)
0000F946                            
0000F946                            loc_DA10:
0000F946 6100 0000                  		bsr.w	loc_DA3C
0000F94A 67EC                       		beq.s	loc_DA02
0000F94C                            
0000F94C                            loc_DA16:
0000F94C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F950 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F954 0446 0300                  		subi.w	#$300,d6
0000F958 6500                       		blo.s	loc_DA36
0000F95A                            
0000F95A                            loc_DA24:
0000F95A BC50                       		cmp.w	(a0),d6
0000F95C 6300                       		bls.s	loc_DA36
0000F95E 4A28 0004                  		tst.b	4(a0)
0000F962 6A00                       		bpl.s	loc_DA32
0000F964 522A 0001                  		addq.b	#1,1(a2)
0000F968                            
0000F968                            loc_DA32:
0000F968 5C48                       		addq.w	#6,a0
0000F96A 60EE                       		bra.s	loc_DA24
0000F96C                            ; ===========================================================================
0000F96C                            
0000F96C                            loc_DA36:
0000F96C 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F970                            
0000F970                            locret_DA3A:
0000F970 4E75                       		rts	
0000F972                            ; ===========================================================================
0000F972                            
0000F972                            loc_DA3C:
0000F972 4A28 0004                  		tst.b	4(a0)
0000F976 6A00                       		bpl.s	OPL_MakeItem
0000F978 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000F97E 6700                       		beq.s	OPL_MakeItem
0000F980 5C48                       		addq.w	#6,a0
0000F982 7000                       		moveq	#0,d0
0000F984 4E75                       		rts	
0000F986                            ; ===========================================================================
0000F986                            
0000F986                            OPL_MakeItem:
0000F986 6100 0000                  		bsr.w	FindFreeObj
0000F98A 6600                       		bne.s	locret_DA8A
0000F98C 3358 0008                  		move.w	(a0)+,obX(a1)
0000F990 3018                       		move.w	(a0)+,d0
0000F992 3200                       		move.w	d0,d1
0000F994 0240 0FFF                  		andi.w	#$FFF,d0
0000F998 3340 000C                  		move.w	d0,obY(a1)
0000F99C E559                       		rol.w	#2,d1
0000F99E 0201 0003                  		andi.b	#3,d1
0000F9A2 1341 0001                  		move.b	d1,obRender(a1)
0000F9A6 1341 0022                  		move.b	d1,obStatus(a1)
0000F9AA 1018                       		move.b	(a0)+,d0
0000F9AC 6A00                       		bpl.s	loc_DA80
0000F9AE 0200 007F                  		andi.b	#$7F,d0
0000F9B2 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000F9B6                            
0000F9B6                            loc_DA80:
0000F9B6 1280                       		move.b	d0,0(a1)
0000F9B8 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000F9BC 7000                       		moveq	#0,d0
0000F9BE                            
0000F9BE                            locret_DA8A:
0000F9BE 4E75                       		rts	
0000F9C0                            
0000F9C0                            		include	"_incObj\sub FindFreeObj.asm"
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0                            ; Subroutine to find a free object space
0000F9C0                            
0000F9C0                            ; output:
0000F9C0                            ;	a1 = free position in object RAM
0000F9C0                            ; ---------------------------------------------------------------------------
0000F9C0                            
0000F9C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9C0                            
0000F9C0                            
0000F9C0                            FindFreeObj:
0000F9C0 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000F9C4 303C 005F                  		move.w	#$5F,d0
0000F9C8                            
0000F9C8                            	FFree_Loop:
0000F9C8 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F9CA 6700                       		beq.s	FFree_Found	; if yes, branch
0000F9CC 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F9D0 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000F9D4                            
0000F9D4                            	FFree_Found:
0000F9D4 4E75                       		rts	
0000F9D6                            
0000F9D6                            ; End of function FindFreeObj
0000F9D6                            
0000F9D6                            
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            ; Subroutine to find a free object space AFTER the current one
0000F9D6                            
0000F9D6                            ; output:
0000F9D6                            ;	a1 = free position in object RAM
0000F9D6                            ; ---------------------------------------------------------------------------
0000F9D6                            
0000F9D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9D6                            
0000F9D6                            
0000F9D6                            FindNextFreeObj:
0000F9D6 2248                       		movea.l	a0,a1
0000F9D8 303C F000                  		move.w	#$F000,d0
0000F9DC 9048                       		sub.w	a0,d0
0000F9DE EC48                       		lsr.w	#6,d0
0000F9E0 5340                       		subq.w	#1,d0
0000F9E2 6500                       		bcs.s	NFree_Found
0000F9E4                            
0000F9E4                            	NFree_Loop:
0000F9E4 4A11                       		tst.b	(a1)
0000F9E6 6700                       		beq.s	NFree_Found
0000F9E8 43E9 0040                  		lea	$40(a1),a1
0000F9EC 51C8 FFF6                  		dbf	d0,NFree_Loop
0000F9F0                            
0000F9F0                            	NFree_Found:
0000F9F0 4E75                       		rts	
0000F9F2                            
0000F9F2                            ; End of function FindNextFreeObj
0000F9F2                            ; End of function FindNextFreeObj
0000F9F2                            		include	"_incObj\41 Springs.asm"
0000F9F2                            ; ---------------------------------------------------------------------------
0000F9F2                            ; Object 41 - springs
0000F9F2                            ; ---------------------------------------------------------------------------
0000F9F2                            
0000F9F2                            Springs:
0000F9F2 7000                       		moveq	#0,d0
0000F9F4 1028 0024                  		move.b	obRoutine(a0),d0
0000F9F8 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000F9FC 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FA00 6100 FA24                  		bsr.w	DisplaySprite
0000FA22 4E75                       		rts	
0000FA24                            ; ===========================================================================
0000FA24 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FA26 0000                       		dc.w Spring_Up-Spring_Index
0000FA28 0000                       		dc.w Spring_AniUp-Spring_Index
0000FA2A 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FA2C 0000                       		dc.w Spring_LR-Spring_Index
0000FA2E 0000                       		dc.w Spring_AniLR-Spring_Index
0000FA30 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FA32 0000                       		dc.w Spring_Dwn-Spring_Index
0000FA34 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FA36 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FA38                            
0000FA38 =00000030                  spring_pow:	equ $30			; power of current spring
0000FA38                            
0000FA38 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FA3A F600                       		dc.w -$A00		; power	of yellow spring
0000FA3C                            ; ===========================================================================
0000FA3C                            
0000FA3C                            Spring_Main:	; Routine 0
0000FA3C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FA40 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FA48 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FA4E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FA54 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FA5A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FA60 1028 0028                  		move.b	obSubtype(a0),d0
0000FA64 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FA68 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FA6A                            
0000FA6A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FA70 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FA76 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FA7C 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FA82 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FA88                            
0000FA88                            	Spring_NotLR:
0000FA88 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FA8C 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FA8E                            
0000FA8E 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FA94 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FA9A                            
0000FA9A                            	Spring_NotDwn:
0000FA9A 0800 0001                  		btst	#1,d0
0000FA9E 6700                       		beq.s	loc_DB72
0000FAA0 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FAA6                            
0000FAA6                            loc_DB72:
0000FAA6 0240 000F                  		andi.w	#$F,d0
0000FAAA 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FAB0 4E75                       		rts	
0000FAB2                            ; ===========================================================================
0000FAB2                            
0000FAB2                            Spring_Up:	; Routine 2
0000FAB2 323C 001B                  		move.w	#$1B,d1
0000FAB6 343C 0008                  		move.w	#8,d2
0000FABA 363C 0010                  		move.w	#$10,d3
0000FABE 3828 0008                  		move.w	obX(a0),d4
0000FAC2 6100 0000                  		bsr.w	SolidObject
0000FAC6 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FACA 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FACC 4E75                       		rts	
0000FACE                            ; ===========================================================================
0000FACE                            
0000FACE                            Spring_BounceUp:
0000FACE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FAD2 5069 000C                  		addq.w	#8,obY(a1)
0000FAD6 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FADC 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FAE2 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FAE8 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FAEE 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FAF4 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FAFA 4228 0025                  		clr.b	obSolid(a0)
0000FB08                            
0000FB08                            Spring_AniUp:	; Routine 4
0000FB08 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FB0E 6000 C9D0                  		bra.w	AnimateSprite
0000FB12                            ; ===========================================================================
0000FB12                            
0000FB12                            Spring_ResetUp:	; Routine 6
0000FB12 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FB18 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FB1C 4E75                       		rts	
0000FB1E                            ; ===========================================================================
0000FB1E                            
0000FB1E                            Spring_LR:	; Routine 8
0000FB1E 323C 0013                  		move.w	#$13,d1
0000FB22 343C 000E                  		move.w	#$E,d2
0000FB26 363C 000F                  		move.w	#$F,d3
0000FB2A 3828 0008                  		move.w	obX(a0),d4
0000FB2E 6100 0000                  		bsr.w	SolidObject
0000FB32 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FB38 6600                       		bne.s	loc_DC0C
0000FB3A 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FB40                            
0000FB40                            loc_DC0C:
0000FB40 0828 0005 0022             		btst	#5,obStatus(a0)
0000FB46 6600                       		bne.s	Spring_BounceLR
0000FB48 4E75                       		rts	
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            Spring_BounceLR:
0000FB4A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FB4E 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FB54 5069 0008                  		addq.w	#8,obX(a1)
0000FB58 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FB5E 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FB60 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FB66 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FB6A                            
0000FB6A                            	Spring_Flipped:
0000FB6A 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FB70 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FB76 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FB7C 0829 0002 0022             		btst	#2,obStatus(a1)
0000FB82 6600                       		bne.s	loc_DC56
0000FB84 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FB8A                            
0000FB8A                            loc_DC56:
0000FB8A 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FB90 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FBA0                            
0000FBA0                            Spring_AniLR:	; Routine $A
0000FBA0 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FBA4 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FBAA 6000 C934                  		bra.w	AnimateSprite
0000FBAE                            ; ===========================================================================
0000FBAE                            
0000FBAE                            Spring_ResetLR:	; Routine $C
0000FBAE 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FBB4 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FBB8 4E75                       		rts	
0000FBBA                            ; ===========================================================================
0000FBBA                            
0000FBBA                            Spring_Dwn:	; Routine $E
0000FBBA 323C 001B                  		move.w	#$1B,d1
0000FBBE 343C 0008                  		move.w	#8,d2
0000FBC2 363C 0010                  		move.w	#$10,d3
0000FBC6 3828 0008                  		move.w	obX(a0),d4
0000FBCA 6100 0000                  		bsr.w	SolidObject
0000FBCE 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FBD4 6600                       		bne.s	loc_DCA4
0000FBD6 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FBDC                            
0000FBDC                            loc_DCA4:
0000FBDC 4A28 0025                  		tst.b	obSolid(a0)
0000FBE0 6600                       		bne.s	locret_DCAE
0000FBE2 4A44                       		tst.w	d4
0000FBE4 6B00                       		bmi.s	Spring_BounceDwn
0000FBE6                            
0000FBE6                            locret_DCAE:
0000FBE6 4E75                       		rts	
0000FBE8                            ; ===========================================================================
0000FBE8                            
0000FBE8                            Spring_BounceDwn:
0000FBE8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FBEC 5169 000C                  		subq.w	#8,obY(a1)
0000FBF0 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FBF6 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FBFA 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FC00 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FC06 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FC0C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FC12 4228 0025                  		clr.b	obSolid(a0)
0000FC20                            
0000FC20                            Spring_AniDwn:	; Routine $10
0000FC20 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FC26 6000 C8B8                  		bra.w	AnimateSprite
0000FC2A                            ; ===========================================================================
0000FC2A                            
0000FC2A                            Spring_ResetDwn:
0000FC2A                            		; Routine $12
0000FC2A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FC30 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FC34 4E75                       		rts	
0000FC34 4E75                       		rts	
0000FC36                            		include	"_anim\Springs.asm"
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36                            ; Animation script - springs
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FC38 0000                       		dc.w byte_DD0E-Ani_Spring
0000FC3A 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FC46 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FC52                            		even
0000FC52                            		even
0000FC52                            Map_Spring:	include	"_maps\Springs.asm"
0000FC52                            ; ---------------------------------------------------------------------------
0000FC52                            ; Sprite mappings - springs
0000FC52                            ; ---------------------------------------------------------------------------
0000FC52                            Map_Spring_internal:
0000FC52 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FC54 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FC56 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FC58 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FC5A 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FC5C 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FC5E 02                         M_Spg_Up:	dc.b 2			; facing up
0000FC5F F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FC64 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FC69 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FC6A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FC6F 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FC70 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FC75 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC7A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FC7F 01                         M_Spg_Left:	dc.b 1			; facing left
0000FC80 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FC85 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FC86 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FC8B 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FC8C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FC91 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FC96 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FC9B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FCA0                            		even
0000FCA0                            		even
0000FCA0                            
0000FCA0                            		include	"_incObj\42 Newtron.asm"
0000FCA0                            ; ---------------------------------------------------------------------------
0000FCA0                            ; Object 42 - Newtron enemy (GHZ)
0000FCA0                            ; ---------------------------------------------------------------------------
0000FCA0                            
0000FCA0                            Newtron:
0000FCA0 7000                       		moveq	#0,d0
0000FCA2 1028 0024                  		move.b	obRoutine(a0),d0
0000FCA6 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FCAA 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FCAE                            ; ===========================================================================
0000FCAE 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FCB0 0000                       		dc.w Newt_Action-Newt_Index
0000FCB2 0000                       		dc.w Newt_Delete-Newt_Index
0000FCB4                            ; ===========================================================================
0000FCB4                            
0000FCB4                            Newt_Main:	; Routine 0
0000FCB4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCB8 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FCC0 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FCC6 117C 0004 0001             		move.b	#4,obRender(a0)
0000FCCC 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FCD2 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FCD8 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FCDE 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FCE4                            
0000FCE4                            Newt_Action:	; Routine 2
0000FCE4 7000                       		moveq	#0,d0
0000FCE6 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FCEA 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FCEE 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FCF2 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FCF8 6100 C7E6                  		bsr.w	AnimateSprite
0000FCFC 6000 0000                  		bra.w	RememberState
0000FD00                            ; ===========================================================================
0000FD00 0000                       @index:		dc.w @chkdistance-@index
0000FD02 0000                       		dc.w @type00-@index
0000FD04 0000                       		dc.w @matchfloor-@index
0000FD06 0000                       		dc.w @speed-@index
0000FD08 0000                       		dc.w @type01-@index
0000FD0A                            ; ===========================================================================
0000FD0A                            
0000FD0A                            @chkdistance:
0000FD0A 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FD10 3038 D008                  		move.w	(v_player+obX).w,d0
0000FD14 9068 0008                  		sub.w	obX(a0),d0
0000FD18 6400                       		bcc.s	@sonicisright
0000FD1A 4440                       		neg.w	d0
0000FD1C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FD22                            
0000FD22                            	@sonicisright:
0000FD22 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FD26 6400                       		bcc.s	@outofrange	; if not, branch
0000FD28 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FD2C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FD32 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FD36 6700                       		beq.s	@istype00	; if type is 00, branch
0000FD38                            
0000FD38 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FD3E 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FD44 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FD4A                            
0000FD4A                            	@outofrange:
0000FD4A                            	@istype00:
0000FD4A 4E75                       		rts	
0000FD4C                            ; ===========================================================================
0000FD4C                            
0000FD4C                            @type00:
0000FD4C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FD52 6400                       		bcc.s	@fall		; is yes, branch
0000FD54 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FD5A 3038 D008                  		move.w	(v_player+obX).w,d0
0000FD5E 9068 0008                  		sub.w	obX(a0),d0
0000FD62 6400                       		bcc.s	@sonicisright2
0000FD64 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FD6A                            
0000FD6A                            	@sonicisright2:
0000FD6A 4E75                       		rts	
0000FD6C                            ; ===========================================================================
0000FD6C                            
0000FD6C                            	@fall:
0000FD6C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FD72 6600                       		bne.s	@loc_DE42
0000FD74 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FD7A                            
0000FD7A                            	@loc_DE42:
0000FD7A 6100 F65E                  		bsr.w	ObjectFall
0000FD7E 6100 0000                  		bsr.w	ObjFloorDist
0000FD82 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FD84 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FD86                            
0000FD86 D368 000C                  		add.w	d1,obY(a0)
0000FD8A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FD90 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FD94 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FD9A 0828 0005 0002             		btst	#5,obGfx(a0)
0000FDA0 6700                       		beq.s	@pppppppp
0000FDA2 5228 001C                  		addq.b	#1,obAnim(a0)
0000FDA6                            
0000FDA6                            	@pppppppp:
0000FDA6 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FDAC 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FDB2 0828 0000 0022             		btst	#0,obStatus(a0)
0000FDB8 6600                       		bne.s	@keepfalling
0000FDBA 4468 0010                  		neg.w	obVelX(a0)
0000FDBE                            
0000FDBE                            	@keepfalling:
0000FDBE 4E75                       		rts	
0000FDC0                            ; ===========================================================================
0000FDC0                            
0000FDC0                            @matchfloor:
0000FDC0 6100 F650                  		bsr.w	SpeedToPos
0000FDC4 6100 0000                  		bsr.w	ObjFloorDist
0000FDC8 0C41 FFF8                  		cmpi.w	#-8,d1
0000FDCC 6D00                       		blt.s	@nextroutine
0000FDCE 0C41 000C                  		cmpi.w	#$C,d1
0000FDD2 6C00                       		bge.s	@nextroutine
0000FDD4 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FDD8 4E75                       		rts	
0000FDDA                            ; ===========================================================================
0000FDDA                            
0000FDDA                            	@nextroutine:
0000FDDA 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FDDE 4E75                       		rts	
0000FDE0                            ; ===========================================================================
0000FDE0                            
0000FDE0                            @speed:
0000FDE0 6100 F630                  		bsr.w	SpeedToPos
0000FDE4 4E75                       		rts	
0000FDE6                            ; ===========================================================================
0000FDE6                            
0000FDE6                            @type01:
0000FDE6 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FDEC 6600                       		bne.s	@firemissile
0000FDEE 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FDF4                            
0000FDF4                            	@firemissile:
0000FDF4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FDFA 6600                       		bne.s	@fail
0000FDFC 4A28 0032                  		tst.b	$32(a0)
0000FE00 6600                       		bne.s	@fail
0000FE02 117C 0001 0032             		move.b	#1,$32(a0)
0000FE08 6100 FBB6                  		bsr.w	FindFreeObj
0000FE0C 6600                       		bne.s	@fail
0000FE0E 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FE12 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FE18 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FE1E 5169 000C                  		subq.w	#8,obY(a1)
0000FE22 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FE28 303C 0014                  		move.w	#$14,d0
0000FE2C 0828 0000 0022             		btst	#0,obStatus(a0)
0000FE32 6600                       		bne.s	@noflip
0000FE34 4440                       		neg.w	d0
0000FE36 4469 0010                  		neg.w	obVelX(a1)
0000FE3A                            
0000FE3A                            	@noflip:
0000FE3A D169 0008                  		add.w	d0,obX(a1)
0000FE3E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000FE44 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000FE4A                            
0000FE4A                            	@fail:
0000FE4A 4E75                       		rts	
0000FE4C                            ; ===========================================================================
0000FE4C                            
0000FE4C                            Newt_Delete:	; Routine 4
0000FE4C 6000 F618                  		bra.w	DeleteObject
0000FE4C 6000 F618                  		bra.w	DeleteObject
0000FE50                            		include	"_anim\Newtron.asm"
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50                            ; Animation script - Newtron enemy
0000FE50                            ; ---------------------------------------------------------------------------
0000FE50 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0000FE52 0000                       		dc.w A_Newt_Drop-Ani_Newt
0000FE54 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0000FE56 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0000FE58 0000                       		dc.w A_Newt_Fires-Ani_Newt
0000FE5A 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0000FE5E 00                         		even
0000FE5E 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0000FE66 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0000FE6A 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0000FE6E 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0000FE78 00                         		even
0000FE78 00                         		even
0000FE78                            Map_Newt:	include	"_maps\Newtron.asm"
0000FE78                            ; ---------------------------------------------------------------------------
0000FE78                            ; Sprite mappings - Newtron enemy (GHZ)
0000FE78                            ; ---------------------------------------------------------------------------
0000FE78                            Map_Newt_internal:
0000FE78 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0000FE7A 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0000FE7C 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0000FE7E 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0000FE80 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0000FE82 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0000FE84 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0000FE86 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0000FE88 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0000FE8A 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0000FE8C 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0000FE8E 03                         M_Newt_Trans:	dc.b 3
0000FE8F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0000FE94 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FE99 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FE9E 03                         M_Newt_Norm:	dc.b 3
0000FE9F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0000FEA4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEA9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FEAE 03                         M_Newt_Fires:	dc.b 3
0000FEAF EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0000FEB4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEB9 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FEBE 04                         M_Newt_Drop1:	dc.b 4
0000FEBF EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0000FEC4 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEC9 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FECE 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FED3 03                         M_Newt_Drop2:	dc.b 3
0000FED4 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FED9 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FEDE 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FEE3 02                         M_Newt_Drop3:	dc.b 2
0000FEE4 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FEE9 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FEEE 03                         M_Newt_Fly1a:	dc.b 3
0000FEEF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0000FEF4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FEF9 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FEFE 03                         M_Newt_Fly1b:	dc.b 3
0000FEFF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF04 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF09 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FF0E 03                         M_Newt_Fly2a:	dc.b 3
0000FF0F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF14 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF19 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FF1E 03                         M_Newt_Fly2b:	dc.b 3
0000FF1F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF24 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF29 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FF2E 00                         M_Newt_Blank:	dc.b 0
0000FF30 00                         		even
0000FF30 00                         		even
0000FF30                            		include	"_incObj\43 Roller.asm"
0000FF30                            ; ---------------------------------------------------------------------------
0000FF30                            ; Object 43 - Roller enemy (SYZ)
0000FF30                            ; ---------------------------------------------------------------------------
0000FF30                            
0000FF30                            Roller:
0000FF30 7000                       		moveq	#0,d0
0000FF32 1028 0024                  		move.b	obRoutine(a0),d0
0000FF36 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0000FF3A 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0000FF3E                            ; ===========================================================================
0000FF3E 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0000FF40 0000                       		dc.w Roll_Action-Roll_Index
0000FF42                            ; ===========================================================================
0000FF42                            
0000FF42                            Roll_Main:	; Routine 0
0000FF42 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000FF48 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FF4E 6100 F48A                  		bsr.w	ObjectFall
0000FF52 6100 0000                  		bsr.w	ObjFloorDist
0000FF56 4A41                       		tst.w	d1
0000FF58 6A00                       		bpl.s	locret_E052
0000FF5A D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0000FF5E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000FF64 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF68 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0000FF70 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0000FF76 117C 0004 0001             		move.b	#4,obRender(a0)
0000FF7C 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FF82 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FF88                            
0000FF88                            	locret_E052:
0000FF88 4E75                       		rts	
0000FF8A                            ; ===========================================================================
0000FF8A                            
0000FF8A                            Roll_Action:	; Routine 2
0000FF8A 7000                       		moveq	#0,d0
0000FF8C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FF90 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0000FF94 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
0000FF98 43F9 0000 0000             		lea	(Ani_Roll).l,a1
0000FF9E 6100 C540                  		bsr.w	AnimateSprite
0000FFA2 3028 0008                  		move.w	obX(a0),d0
0000FFA6 0240 FF80                  		andi.w	#$FF80,d0
0000FFAA 3238 F700                  		move.w	(v_screenposx).w,d1
0000FFAE 0441 0080                  		subi.w	#$80,d1
0000FFB2 0241 FF80                  		andi.w	#$FF80,d1
0000FFB6 9041                       		sub.w	d1,d0
0000FFB8 0C40 0280                  		cmpi.w	#$280,d0
0000FFBC 6E00 0000                  		bgt.w	Roll_ChkGone
0000FFC0 6000 F464                  		bra.w	DisplaySprite
0000FFC4                            ; ===========================================================================
0000FFC4                            
0000FFC4                            Roll_ChkGone:
0000FFC4 45F8 FC00                  		lea	(v_objstate).w,a2
0000FFC8 7000                       		moveq	#0,d0
0000FFCA 1028 0023                  		move.b	obRespawnNo(a0),d0
0000FFCE 6700                       		beq.s	Roll_Delete
0000FFD0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FFD6                            
0000FFD6                            Roll_Delete:
0000FFD6 6000 F48E                  		bra.w	DeleteObject
0000FFDA                            ; ===========================================================================
0000FFDA 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
0000FFDC 0000                       		dc.w Roll_RollNoChk-Roll_Index2
0000FFDE 0000                       		dc.w Roll_ChkJump-Roll_Index2
0000FFE0 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0000FFE2                            ; ===========================================================================
0000FFE2                            
0000FFE2                            Roll_RollChk:
0000FFE2 3038 D008                  		move.w	(v_player+obX).w,d0
0000FFE6 0440 0100                  		subi.w	#$100,d0
0000FFEA 6500                       		bcs.s	loc_E0D2
0000FFEC 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
0000FFF0 6500                       		bcs.s	loc_E0D2
0000FFF2 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0000FFF6 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FFFC 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
00010002 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010008                            
00010008                            loc_E0D2:
00010008 588F                       		addq.l	#4,sp
0001000A 4E75                       		rts	
0001000C                            ; ===========================================================================
0001000C                            
0001000C                            Roll_RollNoChk:
0001000C 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
00010012 6700                       		beq.s	loc_E0F8
00010014 5368 0030                  		subq.w	#1,$30(a0)
00010018 6A00                       		bpl.s	locret_E0F6
0001001A 117C 0001 001C             		move.b	#1,obAnim(a0)
00010020 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010026 117C 008E 0020             		move.b	#$8E,obColType(a0)
0001002C                            
0001002C                            locret_E0F6:
0001002C 4E75                       		rts	
0001002E                            ; ===========================================================================
0001002E                            
0001002E                            loc_E0F8:
0001002E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010032 4E75                       		rts	
00010034                            ; ===========================================================================
00010034                            
00010034                            Roll_ChkJump:
00010034 6100 0000                  		bsr.w	Roll_Stop
00010038 6100 F3D8                  		bsr.w	SpeedToPos
0001003C 6100 0000                  		bsr.w	ObjFloorDist
00010040 0C41 FFF8                  		cmpi.w	#-8,d1
00010044 6D00                       		blt.s	Roll_Jump
00010046 0C41 000C                  		cmpi.w	#$C,d1
0001004A 6C00                       		bge.s	Roll_Jump
0001004C D368 000C                  		add.w	d1,obY(a0)
00010050 4E75                       		rts	
00010052                            ; ===========================================================================
00010052                            
00010052                            Roll_Jump:
00010052 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010056 08E8 0000 0032             		bset	#0,$32(a0)
0001005C 6700                       		beq.s	locret_E12E
0001005E 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010064                            
00010064                            locret_E12E:
00010064 4E75                       		rts	
00010066                            ; ===========================================================================
00010066                            
00010066                            Roll_MatchFloor:
00010066 6100 F372                  		bsr.w	ObjectFall
0001006A 4A68 0012                  		tst.w	obVelY(a0)
0001006E 6B00                       		bmi.s	locret_E150
00010070 6100 0000                  		bsr.w	ObjFloorDist
00010074 4A41                       		tst.w	d1
00010076 6A00                       		bpl.s	locret_E150
00010078 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0001007C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00010080 317C 0000 0012             		move.w	#0,obVelY(a0)
00010086                            
00010086                            locret_E150:
00010086 4E75                       		rts	
00010088                            
00010088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010088                            
00010088                            
00010088                            Roll_Stop:
00010088 4A28 0032                  		tst.b	$32(a0)
0001008C 6B00                       		bmi.s	locret_E188
0001008E 3038 D008                  		move.w	(v_player+obX).w,d0
00010092 0440 0030                  		subi.w	#$30,d0
00010096 9068 0008                  		sub.w	obX(a0),d0
0001009A 6400                       		bcc.s	locret_E188
0001009C 117C 0000 001C             		move.b	#0,obAnim(a0)
000100A2 117C 000E 0020             		move.b	#$E,obColType(a0)
000100A8 4268 0010                  		clr.w	obVelX(a0)
000100AC 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000100B2 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000100B8 08E8 0007 0032             		bset	#7,$32(a0)
000100BE                            
000100BE                            locret_E188:
000100BE 4E75                       		rts	
000100C0                            ; End of function Roll_Stop
000100C0                            ; End of function Roll_Stop
000100C0                            		include	"_anim\Roller.asm"
000100C0                            ; ---------------------------------------------------------------------------
000100C0                            ; Animation script - Roller enemy
000100C0                            ; ---------------------------------------------------------------------------
000100C0 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000100C2 0000                       		dc.w A_Roll_Fold-Ani_Roll
000100C4 0000                       		dc.w A_Roll_Roll-Ani_Roll
000100C6 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000100CC 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000100D2 00                         		even
000100D2 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000100D8 00                         		even
000100D8 00                         		even
000100D8                            Map_Roll:	include	"_maps\Roller.asm"
000100D8                            ; --------------------------------------------------------------------------------
000100D8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000100D8                            ; --------------------------------------------------------------------------------
000100D8                            
000100D8                            SME_q3BmU:	
000100D8 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000100DC 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000100E0 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000100E2 02                         SME_q3BmU_A:	dc.b 2	
000100E3 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
000100E8 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
000100ED 02                         SME_q3BmU_15:	dc.b 2	
000100EE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
000100F3 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
000100F8 01                         SME_q3BmU_20:	dc.b 1	
000100F9 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
000100FE 01                         SME_q3BmU_26:	dc.b 1	
000100FF F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010104 01                         SME_q3BmU_2C:	dc.b 1	
00010105 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
0001010A                            		even
0001010A                            		even
0001010A                            
0001010A                            		include	"_incObj\44 GHZ Edge Walls.asm"
0001010A                            ; ---------------------------------------------------------------------------
0001010A                            ; Object 44 - edge walls (GHZ)
0001010A                            ; ---------------------------------------------------------------------------
0001010A                            
0001010A                            EdgeWalls:
0001010A 7000                       		moveq	#0,d0
0001010C 1028 0024                  		move.b	obRoutine(a0),d0
00010110 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010114 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010118                            ; ===========================================================================
00010118 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0001011A 0000                       		dc.w Edge_Solid-Edge_Index
0001011C 0000                       		dc.w Edge_Display-Edge_Index
0001011E                            ; ===========================================================================
0001011E                            
0001011E                            Edge_Main:	; Routine 0
0001011E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010122 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0001012A 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010130 0028 0004 0001             		ori.b	#4,obRender(a0)
00010136 117C 0008 0014             		move.b	#8,obActWid(a0)
0001013C 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010142 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010148 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
0001014E 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010150 5428 0024                  		addq.b	#2,obRoutine(a0)
00010154 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010156                            ; ===========================================================================
00010156                            
00010156                            Edge_Solid:	; Routine 2
00010156 323C 0013                  		move.w	#$13,d1
0001015A 343C 0028                  		move.w	#$28,d2
0001015E 6100 9FE6                  		bsr.w	Obj44_SolidWall
00010162                            
00010162                            Edge_Display:	; Routine 4
00010162 6100 F2C2                  		bsr.w	DisplaySprite
00010184 4E75                       		rts	
00010184 4E75                       		rts	
00010186                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
00010186                            ; ---------------------------------------------------------------------------
00010186                            ; Sprite mappings - walls (GHZ)
00010186                            ; ---------------------------------------------------------------------------
00010186                            Map_Edge_internal:
00010186 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
00010188 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0001018A 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0001018C 04                         M_Edge_Shadow:	dc.b 4
0001018D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
00010192 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010197 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0001019C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000101A1 04                         M_Edge_Light:	dc.b 4
000101A2 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000101A7 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000101AC 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000101B1 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000101B6 04                         M_Edge_Dark:	dc.b 4
000101B7 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000101BC F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000101C1 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000101C6 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000101CC 00                         		even
000101CC 00                         		even
000101CC                            
000101CC                            		include	"_incObj\13 Lava Ball Maker.asm"
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            ; Object 13 - lava ball	maker (MZ, SLZ)
000101CC                            ; ---------------------------------------------------------------------------
000101CC                            
000101CC                            LavaMaker:
000101CC 7000                       		moveq	#0,d0
000101CE 1028 0024                  		move.b	obRoutine(a0),d0
000101D2 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000101D6 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000101DA 6000 0000                  		bra.w	LBall_ChkDel
000101DE                            ; ===========================================================================
000101DE 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000101E0 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000101E2                            ; ---------------------------------------------------------------------------
000101E2                            ;
000101E2                            ; Lava ball production rates
000101E2                            ;
000101E2 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
000101E8                            ; ===========================================================================
000101E8                            
000101E8                            LavaM_Main:	; Routine 0
000101E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000101EC 1028 0028                  		move.b	obSubtype(a0),d0
000101F0 E848                       		lsr.w	#4,d0
000101F2 0240 000F                  		andi.w	#$F,d0
000101F6 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
000101FC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
00010202 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010208                            
00010208                            LavaM_MakeLava:	; Routine 2
00010208 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0001020C 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0001020E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010214 6100 F59E                  		bsr.w	ChkObjectVisible
00010218 6600                       		bne.s	LavaM_Wait
0001021A 6100 F7A4                  		bsr.w	FindFreeObj
0001021E 6600                       		bne.s	LavaM_Wait
00010220 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010224 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001022A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010230 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010236                            
00010236                            	LavaM_Wait:
00010236 4E75                       		rts	
00010236 4E75                       		rts	
00010238                            		include	"_incObj\14 Lava Ball.asm"
00010238                            ; ---------------------------------------------------------------------------
00010238                            ; Object 14 - lava balls (MZ, SLZ)
00010238                            ; ---------------------------------------------------------------------------
00010238                            
00010238                            LavaBall:
00010238 7000                       		moveq	#0,d0
0001023A 1028 0024                  		move.b	obRoutine(a0),d0
0001023E 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
00010242 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010246 6000 F1DE                  		bra.w	DisplaySprite
0001024A                            ; ===========================================================================
0001024A 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0001024C 0000                       		dc.w LBall_Action-LBall_Index
0001024E 0000                       		dc.w LBall_Delete-LBall_Index
00010250                            
00010250 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0001025A 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
00010262                            ; ===========================================================================
00010262                            
00010262                            LBall_Main:	; Routine 0
00010262 5428 0024                  		addq.b	#2,obRoutine(a0)
00010266 117C 0008 0016             		move.b	#8,obHeight(a0)
0001026C 117C 0008 0017             		move.b	#8,obWidth(a0)
00010272 217C 0000 D132 0004        		move.l	#Map_Fire,obMap(a0)
0001027A 317C 0345 0002             		move.w	#$345,obGfx(a0)
00010280 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
00010286 6600                       		bne.s	@notSLZ
00010288 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0001028E                            
0001028E                            	@notSLZ:
0001028E 117C 0004 0001             		move.b	#4,obRender(a0)
00010294 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001029A 117C 008B 0020             		move.b	#$8B,obColType(a0)
000102A0 3168 000C 0030             		move.w	obY(a0),$30(a0)
000102A6 4A28 0029                  		tst.b	$29(a0)
000102AA 6700                       		beq.s	@speed
000102AC 5428 0018                  		addq.b	#2,obPriority(a0)
000102B0                            
000102B0                            	@speed:
000102B0 7000                       		moveq	#0,d0
000102B2 1028 0028                  		move.b	obSubtype(a0),d0
000102B6 D040                       		add.w	d0,d0
000102B8 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000102BE 117C 0008 0014             		move.b	#8,obActWid(a0)
000102C4 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000102CA 6500                       		bcs.s	@sound		; if yes, branch
000102CC                            
000102CC 117C 0010 0014             		move.b	#$10,obActWid(a0)
000102D2 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000102D8 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000102DE 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
000102E4                            
000102E4                            	@sound:
000102EE                            
000102EE                            LBall_Action:	; Routine 2
000102EE 7000                       		moveq	#0,d0
000102F0 1028 0028                  		move.b	obSubtype(a0),d0
000102F4 D040                       		add.w	d0,d0
000102F6 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
000102FA 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
000102FE 6100 F112                  		bsr.w	SpeedToPos
00010302 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010308 6100 C1D6                  		bsr.w	AnimateSprite
0001030C                            
0001030C                            LBall_ChkDel:
0001032A 4E75                       		rts	
0001032C                            ; ===========================================================================
0001032C 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010330 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010334 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010338 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0001033C 0000                       		dc.w LBall_Type08-LBall_TypeIndex
0001033E                            ; ===========================================================================
0001033E                            ; lavaball types 00-03 fly up and fall back down
0001033E                            
0001033E                            LBall_Type00:
0001033E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010344 3028 0030                  		move.w	$30(a0),d0
00010348 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0001034C 6400                       		bcc.s	loc_E41E	; if not, branch
0001034E 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
00010352                            
00010352                            loc_E41E:
00010352 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010358 4A68 0012                  		tst.w	obVelY(a0)
0001035C 6A00                       		bpl.s	locret_E430
0001035E 08E8 0001 0022             		bset	#1,obStatus(a0)
00010364                            
00010364                            locret_E430:
00010364 4E75                       		rts	
00010366                            ; ===========================================================================
00010366                            ; lavaball type	04 flies up until it hits the ceiling
00010366                            
00010366                            LBall_Type04:
00010366 08E8 0001 0022             		bset	#1,obStatus(a0)
0001036C 6100 0000                  		bsr.w	ObjHitCeiling
00010370 4A41                       		tst.w	d1
00010372 6A00                       		bpl.s	locret_E452
00010374 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001037A 117C 0001 001C             		move.b	#1,obAnim(a0)
00010380 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
00010386                            
00010386                            locret_E452:
00010386 4E75                       		rts	
00010388                            ; ===========================================================================
00010388                            ; lavaball type	05 falls down until it hits the	floor
00010388                            
00010388                            LBall_Type05:
00010388 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001038E 6100 0000                  		bsr.w	ObjFloorDist
00010392 4A41                       		tst.w	d1
00010394 6A00                       		bpl.s	locret_E474
00010396 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001039C 117C 0001 001C             		move.b	#1,obAnim(a0)
000103A2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000103A8                            
000103A8                            locret_E474:
000103A8 4E75                       		rts	
000103AA                            ; ===========================================================================
000103AA                            ; lavaball types 06-07 move sideways
000103AA                            
000103AA                            LBall_Type06:
000103AA 08E8 0000 0022             		bset	#0,obStatus(a0)
000103B0 76F8                       		moveq	#-8,d3
000103B2 6100 0000                  		bsr.w	ObjHitWallLeft
000103B6 4A41                       		tst.w	d1
000103B8 6A00                       		bpl.s	locret_E498
000103BA 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103C0 117C 0003 001C             		move.b	#3,obAnim(a0)
000103C6 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000103CC                            
000103CC                            locret_E498:
000103CC 4E75                       		rts	
000103CE                            ; ===========================================================================
000103CE                            
000103CE                            LBall_Type07:
000103CE 08A8 0000 0022             		bclr	#0,obStatus(a0)
000103D4 7608                       		moveq	#8,d3
000103D6 6100 0000                  		bsr.w	ObjHitWallRight
000103DA 4A41                       		tst.w	d1
000103DC 6A00                       		bpl.s	locret_E4BC
000103DE 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103E4 117C 0003 001C             		move.b	#3,obAnim(a0)
000103EA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000103F0                            
000103F0                            locret_E4BC:
000103F0 4E75                       		rts	
000103F2                            ; ===========================================================================
000103F2                            
000103F2                            LBall_Type08:
000103F2 4E75                       		rts	
000103F4                            ; ===========================================================================
000103F4                            
000103F4                            LBall_Delete:
000103F4 6000 F070                  		bra.w	DeleteObject
000103F4 6000 F070                  		bra.w	DeleteObject
000103F8                            		include	"_anim\Fireballs.asm"
000103F8                            ; ---------------------------------------------------------------------------
000103F8                            ; Animation script - lava balls
000103F8                            ; ---------------------------------------------------------------------------
000103F8 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
000103FA 0000                       		dc.w @vertcollide-Ani_Fire
000103FC 0000                       		dc.w @horizontal-Ani_Fire
000103FE 0000                       		dc.w @horicollide-Ani_Fire
00010400 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010406 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0001040A 00                         		even
0001040A 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010410 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010414 00                         		even
00010414 00                         		even
00010414                            
00010414                            		include	"_incObj\6D Flamethrower.asm"
00010414                            ; ---------------------------------------------------------------------------
00010414                            ; Object 6D - flame thrower (SBZ)
00010414                            ; ---------------------------------------------------------------------------
00010414                            
00010414                            Flamethrower:
00010414 7000                       		moveq	#0,d0
00010416 1028 0024                  		move.b	obRoutine(a0),d0
0001041A 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
0001041E 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
00010422                            ; ===========================================================================
00010422 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010424 0000                       		dc.w Flame_Action-Flame_Index
00010426                            ; ===========================================================================
00010426                            
00010426                            Flame_Main:	; Routine 0
00010426 5428 0024                  		addq.b	#2,obRoutine(a0)
0001042A 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
00010432 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010438 0028 0004 0001             		ori.b	#4,obRender(a0)
0001043E 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010444 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0001044A 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010450 1028 0028                  		move.b	obSubtype(a0),d0
00010454 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010458 D040                       		add.w	d0,d0		; multiply by 2
0001045A 3140 0030                  		move.w	d0,$30(a0)
0001045E 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
00010462 1028 0028                  		move.b	obSubtype(a0),d0
00010466 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0001046A EB48                       		lsl.w	#5,d0		; multiply by $20
0001046C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
00010470 117C 000A 0036             		move.b	#$A,$36(a0)
00010476 0828 0001 0022             		btst	#1,obStatus(a0)
0001047C 6700                       		beq.s	Flame_Action
0001047E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010484 117C 0015 0036             		move.b	#$15,$36(a0)
0001048A                            
0001048A                            Flame_Action:	; Routine 2
0001048A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001048E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
00010490 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
00010496 0868 0000 001C             		bchg	#0,obAnim(a0)
0001049C 6700                       		beq.s	loc_E57A
0001049E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000104AE                            
000104AE                            loc_E57A:
000104AE 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000104B4 6100 C02A                  		bsr.w	AnimateSprite
000104B8 117C 0000 0020             		move.b	#0,obColType(a0)
000104BE 1028 0036                  		move.b	$36(a0),d0
000104C2 B028 001A                  		cmp.b	obFrame(a0),d0
000104C6 6600                       		bne.s	Flame_ChkDel
000104C8 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000104CE                            
000104CE                            Flame_ChkDel:
000104EC 6000 EF38                  		bra.w	DisplaySprite
000104EC 6000 EF38                  		bra.w	DisplaySprite
000104F0                            		include	"_anim\Flamethrower.asm"
000104F0                            ; ---------------------------------------------------------------------------
000104F0                            ; Animation script - flamethrower (SBZ)
000104F0                            ; ---------------------------------------------------------------------------
000104F0 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
000104F2 0000                       		dc.w @pipe2-Ani_Flame
000104F4 0000                       		dc.w @valve1-Ani_Flame
000104F6 0000                       		dc.w @valve2-Ani_Flame
000104F8 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010506 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010510 00                         		even
00010510 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
0001051E 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010528 00                         		even
00010528 00                         		even
00010528                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010528                            ; ---------------------------------------------------------------------------
00010528                            ; Sprite mappings - flame thrower (SBZ)
00010528                            ; ---------------------------------------------------------------------------
00010528                            Map_Flame_internal:
00010528 0000                       		dc.w @pipe1-Map_Flame_internal
0001052A 0000                       		dc.w @pipe2-Map_Flame_internal
0001052C 0000                       		dc.w @pipe3-Map_Flame_internal
0001052E 0000                       		dc.w @pipe4-Map_Flame_internal
00010530 0000                       		dc.w @pipe5-Map_Flame_internal
00010532 0000                       		dc.w @pipe6-Map_Flame_internal
00010534 0000                       		dc.w @pipe7-Map_Flame_internal
00010536 0000                       		dc.w @pipe8-Map_Flame_internal
00010538 0000                       		dc.w @pipe9-Map_Flame_internal
0001053A 0000                       		dc.w @pipe10-Map_Flame_internal
0001053C 0000                       		dc.w @pipe11-Map_Flame_internal
0001053E 0000                       		dc.w @valve1-Map_Flame_internal
00010540 0000                       		dc.w @valve2-Map_Flame_internal
00010542 0000                       		dc.w @valve3-Map_Flame_internal
00010544 0000                       		dc.w @valve4-Map_Flame_internal
00010546 0000                       		dc.w @valve5-Map_Flame_internal
00010548 0000                       		dc.w @valve6-Map_Flame_internal
0001054A 0000                       		dc.w @valve7-Map_Flame_internal
0001054C 0000                       		dc.w @valve8-Map_Flame_internal
0001054E 0000                       		dc.w @valve9-Map_Flame_internal
00010550 0000                       		dc.w @valve10-Map_Flame_internal
00010552 0000                       		dc.w @valve11-Map_Flame_internal
00010554 01                         @pipe1:		dc.b 1
00010555 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0001055A 02                         @pipe2:		dc.b 2
0001055B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010560 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010565 02                         @pipe3:		dc.b 2
00010566 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001056B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010570 03                         @pipe4:		dc.b 3
00010571 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010576 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001057B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010580 03                         @pipe5:		dc.b 3
00010581 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010586 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0001058B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010590 04                         @pipe6:		dc.b 4
00010591 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010596 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001059B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105A0 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105A5 04                         @pipe7:		dc.b 4
000105A6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000105AB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000105B0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000105B5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105BA 05                         @pipe8:		dc.b 5
000105BB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000105C0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000105C5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000105CA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105D4 05                         @pipe9:		dc.b 5
000105D5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000105DA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000105DF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000105E4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000105E9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105EE 06                         @pipe10:	dc.b 6
000105EF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000105F4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000105F9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000105FE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010603 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010608 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001060D 06                         @pipe11:	dc.b 6
0001060E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010613 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010618 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0001061D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010622 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010627 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001062C 01                         @valve1:	dc.b 1
0001062D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010632 02                         @valve2:	dc.b 2
00010633 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010638 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001063D 02                         @valve3:	dc.b 2
0001063E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010643 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010648 03                         @valve4:	dc.b 3
00010649 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001064E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010653 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010658 03                         @valve5:	dc.b 3
00010659 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001065E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010663 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010668 04                         @valve6:	dc.b 4
00010669 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001066E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010673 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010678 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001067D 04                         @valve7:	dc.b 4
0001067E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010683 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010688 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001068D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010692 05                         @valve8:	dc.b 5
00010693 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010698 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001069D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000106A2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106A7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106AC 05                         @valve9:	dc.b 5
000106AD F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000106B2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000106B7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106BC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106C1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106C6 06                         @valve10:	dc.b 6
000106C7 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000106CC F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000106D1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000106D6 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000106DB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106E0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106E5 06                         @valve11:	dc.b 6
000106E6 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
000106EB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000106F0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
000106F5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106FA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106FF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010704                            		even
00010704                            		even
00010704                            
00010704                            		include	"_incObj\46 MZ Bricks.asm"
00010704                            ; ---------------------------------------------------------------------------
00010704                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010704                            ; ---------------------------------------------------------------------------
00010704                            
00010704                            MarbleBrick:
00010704 7000                       		moveq	#0,d0
00010706 1028 0024                  		move.b	obRoutine(a0),d0
0001070A 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
0001070E 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010712                            ; ===========================================================================
00010712 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010714 0000                       		dc.w Brick_Action-Brick_Index
00010716                            
00010716 =00000030                  brick_origY:	equ $30
00010716                            ; ===========================================================================
00010716                            
00010716                            Brick_Main:	; Routine 0
00010716 5428 0024                  		addq.b	#2,obRoutine(a0)
0001071A 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010720 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010726 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
0001072E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010734 117C 0004 0001             		move.b	#4,obRender(a0)
0001073A 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010740 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010746 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
0001074C 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010752                            
00010752                            Brick_Action:	; Routine 2
00010752 4A28 0001                  		tst.b	obRender(a0)
00010756 6A00                       		bpl.s	@chkdel
00010758 7000                       		moveq	#0,d0
0001075A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001075E 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010762 D040                       		add.w	d0,d0
00010764 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010768 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
0001076C 323C 001B                  		move.w	#$1B,d1
00010770 343C 0010                  		move.w	#$10,d2
00010774 363C 0011                  		move.w	#$11,d3
00010778 3828 0008                  		move.w	obX(a0),d4
0001077C 6100 0000                  		bsr.w	SolidObject
00010780                            
00010780                            	@chkdel:
0001079E 6000 EC86                  			bra.w	DisplaySprite
000107A2                            ; ===========================================================================
000107A2 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
000107A4 0000                       		dc.w Brick_Type01-Brick_TypeIndex
000107A6 0000                       		dc.w Brick_Type02-Brick_TypeIndex
000107A8 0000                       		dc.w Brick_Type03-Brick_TypeIndex
000107AA 0000                       		dc.w Brick_Type04-Brick_TypeIndex
000107AC                            ; ===========================================================================
000107AC                            
000107AC                            Brick_Type00:
000107AC 4E75                       		rts	
000107AE                            ; ===========================================================================
000107AE                            
000107AE                            Brick_Type02:
000107AE 3038 D008                  		move.w	(v_player+obX).w,d0
000107B2 9068 0008                  		sub.w	obX(a0),d0
000107B6 6400                       		bcc.s	loc_E888
000107B8 4440                       		neg.w	d0
000107BA                            
000107BA                            loc_E888:
000107BA 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
000107BE 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
000107C0 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
000107C6                            
000107C6                            Brick_Type01:
000107C6 7000                       		moveq	#0,d0
000107C8 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
000107CC 0828 0003 0028             		btst	#3,obSubtype(a0)
000107D2 6700                       		beq.s	loc_E8A8
000107D4 4440                       		neg.w	d0
000107D6 0640 0010                  		addi.w	#$10,d0
000107DA                            
000107DA                            loc_E8A8:
000107DA 3228 0030                  		move.w	brick_origY(a0),d1
000107DE 9240                       		sub.w	d0,d1
000107E0 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
000107E4 4E75                       		rts	
000107E6                            ; ===========================================================================
000107E6                            
000107E6                            Brick_Type03:
000107E6 6100 EC2A                  		bsr.w	SpeedToPos
000107EA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
000107F0 6100 0000                  		bsr.w	ObjFloorDist
000107F4 4A41                       		tst.w	d1		; has the block	hit the	floor?
000107F6 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
000107FA D368 000C                  		add.w	d1,obY(a0)
000107FE 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010802 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010808 117C 0004 0028             		move.b	#4,obSubtype(a0)
0001080E 3011                       		move.w	(a1),d0
00010810 0240 03FF                  		andi.w	#$3FF,d0
00010814 0C40 016A                  			cmpi.w	#$16A,d0
00010818 6400                       		bcc.s	locret_E8EE
0001081A 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010820                            
00010820                            locret_E8EE:
00010820 4E75                       		rts	
00010822                            ; ===========================================================================
00010822                            
00010822                            Brick_Type04:
00010822 7000                       		moveq	#0,d0
00010824 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010828 E648                       		lsr.w	#3,d0
0001082A 3228 0030                  		move.w	brick_origY(a0),d1
0001082E 9240                       		sub.w	d0,d1
00010830 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010834 4E75                       		rts	
00010834 4E75                       		rts	
00010836                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010836                            ; ---------------------------------------------------------------------------
00010836                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010836                            ; ---------------------------------------------------------------------------
00010836                            Map_Brick_internal:
00010836 0000                       		dc.w @brick-Map_Brick_internal
00010838 01                         @brick:		dc.b 1
00010839 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0001083E                            		even
0001083E                            		even
0001083E                            
0001083E                            		include	"_incObj\12 Light.asm"
0001083E                            ; ---------------------------------------------------------------------------
0001083E                            ; Object 12 - lamp (SYZ)
0001083E                            ; ---------------------------------------------------------------------------
0001083E                            
0001083E                            SpinningLight:
0001083E 7000                       		moveq	#0,d0
00010840 1028 0024                  		move.b	obRoutine(a0),d0
00010844 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010848 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
0001084C                            ; ===========================================================================
0001084C 0000                       Light_Index:	dc.w Light_Main-Light_Index
0001084E 0000                       		dc.w Light_Animate-Light_Index
00010850                            ; ===========================================================================
00010850                            
00010850                            Light_Main:	; Routine 0
00010850 5428 0024                  		addq.b	#2,obRoutine(a0)
00010854 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
0001085C 317C 0000 0002             		move.w	#0,obGfx(a0)
00010862 117C 0004 0001             		move.b	#4,obRender(a0)
00010868 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001086E 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010874                            
00010874                            Light_Animate:	; Routine 2
00010874 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010878 6A00                       		bpl.s	@chkdel
0001087A 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010880 5228 001A                  		addq.b	#1,obFrame(a0)
00010884 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0001088A 6500                       		bcs.s	@chkdel
0001088C 117C 0000 001A             		move.b	#0,obFrame(a0)
00010892                            
00010892                            	@chkdel:
000108B0 6000 EB74                  		bra.w	DisplaySprite
000108B0 6000 EB74                  		bra.w	DisplaySprite
000108B4                            Map_Light	include	"_maps\Light.asm"
000108B4                            ; --------------------------------------------------------------------------------
000108B4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000108B4                            ; --------------------------------------------------------------------------------
000108B4                            
000108B4                            SME_FBl1X:	
000108B4 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
000108B8 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
000108BC 05                         SME_FBl1X_8:	dc.b 5	
000108BD E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
000108C2 E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
000108C7 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
000108CC F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
000108D1 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
000108D6 05                         SME_FBl1X_22:	dc.b 5	
000108D7 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
000108DC E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
000108E1 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
000108E6 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
000108EB F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
000108F0 06                         SME_FBl1X_3C:	dc.b 6	
000108F1 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
000108F6 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
000108FB E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010900 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010905 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
0001090A F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
0001090F 05                         SME_FBl1X_5B:	dc.b 5	
00010910 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010915 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
0001091A F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
0001091F F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010924 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
0001092A 00                         		even
0001092A 00                         		even
0001092A                            		include	"_incObj\47 Bumper.asm"
0001092A                            ; ---------------------------------------------------------------------------
0001092A                            ; Object 47 - pinball bumper (SYZ)
0001092A                            ; ---------------------------------------------------------------------------
0001092A                            
0001092A                            Bumper:
0001092A 7000                       		moveq	#0,d0
0001092C 1028 0024                  		move.b	obRoutine(a0),d0
00010930 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010934 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010938                            ; ===========================================================================
00010938 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
0001093A 0000                       		dc.w Bump_Hit-Bump_Index
0001093C                            ; ===========================================================================
0001093C                            
0001093C                            Bump_Main:	; Routine 0
0001093C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010940 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010948 317C 0380 0002             		move.w	#$380,obGfx(a0)
0001094E 117C 0004 0001             		move.b	#4,obRender(a0)
00010954 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001095A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010960 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010966                            
00010966                            Bump_Hit:	; Routine 2
00010966 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
0001096A 6700 0000                  		beq.w	@display	; if not, branch
0001096E 4228 0021                  		clr.b	obColProp(a0)
00010972 43F8 D000                  		lea	(v_player).w,a1
00010976 3228 0008                  		move.w	obX(a0),d1
0001097A 3428 000C                  		move.w	obY(a0),d2
0001097E 9269 0008                  		sub.w	obX(a1),d1
00010982 9469 000C                  		sub.w	obY(a1),d2
00010986 4EB9 0000 3DD4             		jsr	(CalcAngle).l
0001098C 4EB9 0000 3B42             		jsr	(CalcSine).l
00010992 C3FC F900                  		muls.w	#-$700,d1
00010996 E081                       		asr.l	#8,d1
00010998 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
0001099C C1FC F900                  		muls.w	#-$700,d0
000109A0 E080                       		asr.l	#8,d0
000109A2 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
000109A6 08E9 0001 0022             		bset	#1,obStatus(a1)
000109AC 08A9 0004 0022             		bclr	#4,obStatus(a1)
000109B2 08A9 0005 0022             		bclr	#5,obStatus(a1)
000109B8 4229 003C                  		clr.b	$3C(a1)
000109BC 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
000109CC 45F8 FC00                  		lea	(v_objstate).w,a2
000109D0 7000                       		moveq	#0,d0
000109D2 1028 0023                  		move.b	obRespawnNo(a0),d0
000109D6 6700                       		beq.s	@addscore
000109D8 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
000109DE 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
000109E0 5232 0002                  		addq.b	#1,2(a2,d0.w)
000109E4                            
000109E4                            	@addscore:
000109E4 7001                       		moveq	#1,d0
000109E6 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
000109EC 6100 EFD2                  		bsr.w	FindFreeObj
000109F0 6600                       		bne.s	@display
000109F2 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
000109F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000109FC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010A02 137C 0004 001A             		move.b	#4,obFrame(a1)
00010A08                            
00010A08                            	@display:
00010A08 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010A0E 6100 BAD0                  		bsr.w	AnimateSprite
00010A2E 6000 E9F6                  		bra.w	DisplaySprite
00010A32                            ; ===========================================================================
00010A32                            
00010A32                            @resetcount:
00010A32 45F8 FC00                  		lea	(v_objstate).w,a2
00010A36 7000                       		moveq	#0,d0
00010A38 1028 0023                  		move.b	obRespawnNo(a0),d0
00010A3C 6700                       		beq.s	@delete
00010A3E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010A44                            
00010A44                            	@delete:
00010A44 6000 EA20                  		bra.w	DeleteObject
00010A44 6000 EA20                  		bra.w	DeleteObject
00010A48                            		include	"_anim\Bumper.asm"
00010A48                            ; ---------------------------------------------------------------------------
00010A48                            ; Animation script - flamethrower (SBZ)
00010A48                            ; ---------------------------------------------------------------------------
00010A48 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010A4A 0000                       		dc.w byte_EAF8-Ani_Bump
00010A4C 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010A50 00                         		even
00010A50 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010A58 00                         		even
00010A58 00                         		even
00010A58                            Map_Bump:	include	"_maps\Bumper.asm"
00010A58                            ; ---------------------------------------------------------------------------
00010A58                            ; Sprite mappings - pinball bumper (SYZ)
00010A58                            ; ---------------------------------------------------------------------------
00010A58                            Map_Bump_internal:
00010A58 0000                       		dc.w @normal-Map_Bump_internal
00010A5A 0000                       		dc.w @bumped1-Map_Bump_internal
00010A5C 0000                       		dc.w @bumped2-Map_Bump_internal
00010A5E 02                         @normal:	dc.b 2
00010A5F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010A64 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010A69 02                         @bumped1:	dc.b 2
00010A6A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010A6F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010A74 02                         @bumped2:	dc.b 2
00010A75 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010A7A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010A80 00                         		even
00010A80 00                         		even
00010A80                            
00010A80                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010A80                            ; ---------------------------------------------------------------------------
00010A80                            ; Object 0D - signpost at the end of a level
00010A80                            ; ---------------------------------------------------------------------------
00010A80                            
00010A80                            Signpost:
00010A80 7000                       		moveq	#0,d0
00010A82 1028 0024                  		move.b	obRoutine(a0),d0
00010A86 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010A8A 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010A8E 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010A94 6100 BA4A                  		bsr.w	AnimateSprite
00010A98 6100 E98C                  		bsr.w	DisplaySprite
00010ABA 4E75                       		rts	
00010ABC                            ; ===========================================================================
00010ABC 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010ABE 0000                       		dc.w Sign_Touch-Sign_Index
00010AC0 0000                       		dc.w Sign_Spin-Sign_Index
00010AC2 0000                       		dc.w Sign_SonicRun-Sign_Index
00010AC4 0000                       		dc.w Sign_Exit-Sign_Index
00010AC6                            
00010AC6 =00000030                  spintime:	equ $30		; time for signpost to spin
00010AC6 =00000032                  sparkletime:	equ $32		; time between sparkles
00010AC6 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010AC6                            ; ===========================================================================
00010AC6                            
00010AC6                            Sign_Main:	; Routine 0
00010AC6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010ACA 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010AD2 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010AD8 117C 0004 0001             		move.b	#4,obRender(a0)
00010ADE 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010AE4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010AEA                            
00010AEA                            Sign_Touch:	; Routine 2
00010AEA 3038 D008                  		move.w	(v_player+obX).w,d0
00010AEE 9068 0008                  		sub.w	obX(a0),d0
00010AF2 6500                       		bcs.s	@notouch
00010AF4 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010AF8 6400                       		bcc.s	@notouch	; if not, branch
00010AFA 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010B0A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010B0E 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010B14 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B18 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010B1E 6700                       		beq.s	@normal
00010B20 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010B26                            
00010B26                            	@normal:
00010B26 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010B2A 6700                       		beq.s	@notouch
00010B2C 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010B3A                            
00010B3A                            	@notouch:
00010B3A 4E75                       		rts	
00010B3C                            	
00010B3C                            ; ===========================================================================
00010B3C                            
00010B3C                            Sign_Spin:	; Routine 4
00010B3C 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010B40 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010B42 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010B48 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010B4C 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010B52 6600                       		bne.s	@chksparkle	; if not, branch
00010B54 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B58                            
00010B58                            	@chksparkle:
00010B58 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010B5C 6A00                       		bpl.s	@fail		; if time remains, branch
00010B5E 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010B64 7000                       		moveq	#0,d0
00010B66 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010B6A 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010B6E 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010B74 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010B78 6100 EE46                  		bsr.w	FindFreeObj
00010B7C 6600                       		bne.s	@fail
00010B7E 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010B82 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010B88 101A                       		move.b	(a2)+,d0
00010B8A 4880                       		ext.w	d0
00010B8C D068 0008                  		add.w	obX(a0),d0
00010B90 3340 0008                  		move.w	d0,obX(a1)
00010B94 101A                       		move.b	(a2)+,d0
00010B96 4880                       		ext.w	d0
00010B98 D068 000C                  		add.w	obY(a0),d0
00010B9C 3340 000C                  		move.w	d0,obY(a1)
00010BA0 237C 0000 BA46 0004        		move.l	#Map_Ring,obMap(a1)
00010BA8 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010BAE 137C 0004 0001             		move.b	#4,obRender(a1)
00010BB4 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010BBA 137C 0008 0014             		move.b	#8,obActWid(a1)
00010BC0                            
00010BC0                            	@fail:
00010BC0 4E75                       		rts	
00010BC2                            ; ===========================================================================
00010BC2 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010BC4 0808                       		dc.b	8,   8
00010BC6 F000                       		dc.b -$10,   0
00010BC8 18F8                       		dc.b  $18,  -8
00010BCA 00F8                       		dc.b	0,  -8
00010BCC 1000                       		dc.b  $10,   0
00010BCE E808                       		dc.b -$18,   8
00010BD0 1810                       		dc.b  $18, $10
00010BD2                            ; ===========================================================================
00010BD2                            
00010BD2                            Sign_SonicRun:	; Routine 6
00010BD2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010BD6 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010BDA 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010BE0                            		
00010BE0                            
00010BE0                            	loc_EC86:
00010BE0 5428 0024                  		addq.b	#2,obRoutine(a0)
00010BE4                            
00010BE4                            ; ---------------------------------------------------------------------------
00010BE4                            ; Subroutine to	set up bonuses at the end of an	act
00010BE4                            ; ---------------------------------------------------------------------------
00010BE4                            
00010BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010BE4                            
00010BE4                            
00010BE4                            GotThroughAct:
00010BE4 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010BE8 6600                       		bne.s	locret_ECEE
00010BEA 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010BF0 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010BF4 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010BF8 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010BFC 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010C02 7000                       		moveq	#plcid_TitleCard,d0
00010C04 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010C0A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010C10 7000                       		moveq	#0,d0
00010C12 1038 FE23                  		move.b	(v_timemin).w,d0
00010C16 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010C1A 7200                       		moveq	#0,d1
00010C1C 1238 FE24                  		move.b	(v_timesec).w,d1
00010C20 D041                       		add.w	d1,d0		; add up your time
00010C22 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010C26 7214                       		moveq	#$14,d1
00010C28 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010C2A 6500                       		bcs.s	hastimebonus	; if not, branch
00010C2C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010C2E                            
00010C2E                            	hastimebonus:
00010C2E D040                       		add.w	d0,d0
00010C30 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010C36 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010C3A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010C3E 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010C4C 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010C52                            
00010C52                            locret_ECEE:
00010C52 4E75                       		rts	
00010C54                            
00010C54                            ; End of function GotThroughAct
00010C54                            
00010C54                            ; ===========================================================================
00010C54 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010C68 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            Sign_Exit:	; Routine 8
00010C7E 4E75                       		rts	
00010C80                            
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            ; Subroutine to	set up bonuses at the end of an	zone
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            
00010C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C80                            
00010C80                            
00010C80                            GotThroughAct1:
00010C80 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010C84 6600                       		bne.s	locret_ECEE1
00010C86 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010C8C 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010C90 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010C94 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010C98 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010C9E 7000                       		moveq	#plcid_TitleCard,d0
00010CA0 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010CA6 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010CAC 7000                       		moveq	#0,d0
00010CAE 1038 FE23                  		move.b	(v_timemin).w,d0
00010CB2 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010CB6 7200                       		moveq	#0,d1
00010CB8 1238 FE24                  		move.b	(v_timesec).w,d1
00010CBC D041                       		add.w	d1,d0		; add up your time
00010CBE 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010CC2 7214                       		moveq	#$14,d1
00010CC4 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010CC6 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010CCA 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010CCC                            
00010CCC                            	hastimebonus2:
00010CCC D040                       		add.w	d0,d0
00010CCE 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010CD4 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010CD8 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010CDC 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010CEA 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010CF0                            
00010CF0                            locret_ECEE1:
00010CF0 4E75                       		rts	
00010CF2                            
00010CF2                            ; End of function GotThroughAct		
00010CF2                            
00010CF2 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010D06 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D06 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D1C                            		include	"_anim\Signpost.asm"
00010D1C                            ; ---------------------------------------------------------------------------
00010D1C                            ; Animation script - signpost
00010D1C                            ; ---------------------------------------------------------------------------
00010D1C 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010D1E 0000                       		dc.w @spin1-Ani_Sign
00010D20 0000                       		dc.w @spin2-Ani_Sign
00010D22 0000                       		dc.w @sonic-Ani_Sign
00010D24 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010D28 00                         		even
00010D28 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010D2E 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010D34 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010D38 00                         		even
00010D38 00                         		even
00010D38                            Map_Sign:	include	"_maps\Signpost.asm"
00010D38                            ; --------------------------------------------------------------------------------
00010D38                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010D38                            ; --------------------------------------------------------------------------------
00010D38                            
00010D38                            SME_KvSue:	
00010D38 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010D3C 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010D40 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010D42 04                         SME_KvSue_A:	dc.b 4	
00010D43 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010D48 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010D4D 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D52 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D57 03                         SME_KvSue_1F:	dc.b 3	
00010D58 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010D5D 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D62 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D67 03                         SME_KvSue_2F:	dc.b 3	
00010D68 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010D6D 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010D72 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D77 03                         SME_KvSue_3F:	dc.b 3	
00010D78 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010D7D 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010D82 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D87 04                         SME_KvSue_4F:	dc.b 4	
00010D88 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010D8D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010D92 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D97 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D9C                            		even
00010D9C                            		even
00010D9C                            
00010D9C                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010D9C                            ; ---------------------------------------------------------------------------
00010D9C                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010D9C                            ; ---------------------------------------------------------------------------
00010D9C                            
00010D9C                            GeyserMaker:
00010D9C 7000                       		moveq	#0,d0
00010D9E 1028 0024                  		move.b	obRoutine(a0),d0
00010DA2 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010DA6 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010DAA 6000 0000                  		bra.w	Geyser_ChkDel
00010DAE                            ; ===========================================================================
00010DAE 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010DB0 0000                       		dc.w GMake_Wait-GMake_Index
00010DB2 0000                       		dc.w GMake_ChkType-GMake_Index
00010DB4 0000                       		dc.w GMake_MakeLava-GMake_Index
00010DB6 0000                       		dc.w GMake_Display-GMake_Index
00010DB8 0000                       		dc.w GMake_Delete-GMake_Index
00010DBA                            
00010DBA =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010DBA =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010DBA =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010DBA                            ; ===========================================================================
00010DBA                            
00010DBA                            GMake_Main:	; Routine 0
00010DBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DBE 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010DC6 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010DCC 117C 0004 0001             		move.b	#4,obRender(a0)
00010DD2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DD8 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010DDE 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010DE4                            
00010DE4                            GMake_Wait:	; Routine 2
00010DE4 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010DE8 6A00                       		bpl.s	@cancel		; if time remains, branch
00010DEA                            
00010DEA 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010DF0 3038 D00C                  		move.w	(v_player+obY).w,d0
00010DF4 3228 000C                  		move.w	obY(a0),d1
00010DF8 B041                       		cmp.w	d1,d0
00010DFA 6400                       		bcc.s	@cancel
00010DFC 0441 0170                  		subi.w	#$170,d1
00010E00 B041                       		cmp.w	d1,d0
00010E02 6500                       		bcs.s	@cancel
00010E04 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010E08                            
00010E08                            	@cancel:
00010E08 4E75                       		rts	
00010E0A                            ; ===========================================================================
00010E0A                            
00010E0A                            GMake_MakeLava:	; Routine 6
00010E0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E0E 6100 EBC6                  		bsr.w	FindNextFreeObj
00010E12 6600                       		bne.s	@fail
00010E14 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010E18 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E1E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E24 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010E2A 2348 003C                  		move.l	a0,gmake_parent(a1)
00010E2E                            
00010E2E                            	@fail:
00010E2E 117C 0001 001C             		move.b	#1,obAnim(a0)
00010E34 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010E38 6700                       		beq.s	@isgeyser	; if yes, branch
00010E3A 117C 0004 001C             		move.b	#4,obAnim(a0)
00010E40 6000                       		bra.s	GMake_Display
00010E42                            ; ===========================================================================
00010E42                            
00010E42                            	@isgeyser:
00010E42 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010E46 08E9 0001 0022             		bset	#1,obStatus(a1)
00010E4C 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00010E52 6000                       		bra.s	GMake_Display
00010E54                            ; ===========================================================================
00010E54                            
00010E54                            GMake_ChkType:	; Routine 4
00010E54 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00010E58 6700                       		beq.s	GMake_Display	; if yes, branch
00010E5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E5E 4E75                       		rts	
00010E60                            ; ===========================================================================
00010E60                            
00010E60                            GMake_Display:	; Routine 8
00010E60 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010E66 6100 B678                  		bsr.w	AnimateSprite
00010E6A 6100 E5BA                  		bsr.w	DisplaySprite
00010E6E 4E75                       		rts	
00010E70                            ; ===========================================================================
00010E70                            
00010E70                            GMake_Delete:	; Routine $A
00010E70 117C 0000 001C             		move.b	#0,obAnim(a0)
00010E76 117C 0002 0024             		move.b	#2,obRoutine(a0)
00010E7C 4A28 0028                  		tst.b	obSubtype(a0)
00010E80 6700 E5E4                  		beq.w	DeleteObject
00010E84 4E75                       		rts	
00010E86                            
00010E86                            
00010E86                            ; ---------------------------------------------------------------------------
00010E86                            ; Object 4D - lava geyser / lavafall (MZ)
00010E86                            ; ---------------------------------------------------------------------------
00010E86                            
00010E86                            LavaGeyser:
00010E86 7000                       		moveq	#0,d0
00010E88 1028 0024                  		move.b	obRoutine(a0),d0
00010E8C 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00010E90 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
00010E94 6000 E590                  		bra.w	DisplaySprite
00010E98                            ; ===========================================================================
00010E98 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00010E9A 0000                       		dc.w Geyser_Action-Geyser_Index
00010E9C 0000                       		dc.w loc_EFFC-Geyser_Index
00010E9E 0000                       		dc.w Geyser_Delete-Geyser_Index
00010EA0                            
00010EA0 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
00010EA4                            ; ===========================================================================
00010EA4                            
00010EA4                            Geyser_Main:	; Routine 0
00010EA4 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EA8 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010EAE 4A28 0028                  		tst.b	obSubtype(a0)
00010EB2 6700                       		beq.s	@isgeyser
00010EB4 0468 0250 000C             		subi.w	#$250,obY(a0)
00010EBA                            
00010EBA                            	@isgeyser:
00010EBA 7000                       		moveq	#0,d0
00010EBC 1028 0028                  		move.b	obSubtype(a0),d0
00010EC0 D040                       		add.w	d0,d0
00010EC2 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00010EC8 2248                       		movea.l	a0,a1
00010ECA 7201                       		moveq	#1,d1
00010ECC 6100                       		bsr.s	@makelava
00010ECE 6000                       		bra.s	@activate
00010ED0                            ; ===========================================================================
00010ED0                            
00010ED0                            	@loop:
00010ED0 6100 EB04                  		bsr.w	FindNextFreeObj
00010ED4 6600                       		bne.s	@fail
00010ED6                            
00010ED6                            @makelava:
00010ED6 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00010EDA 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00010EE2 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00010EE8 137C 0004 0001             		move.b	#4,obRender(a1)
00010EEE 137C 0020 0014             		move.b	#$20,obActWid(a1)
00010EF4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010EFA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010F00 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010F06 337C 0080 0018             		move.w	#$80,obPriority(a1)
00010F0C 137C 0005 001C             		move.b	#5,obAnim(a1)
00010F12 4A28 0028                  		tst.b	obSubtype(a0)
00010F16 6700                       		beq.s	@fail
00010F18 137C 0002 001C             		move.b	#2,obAnim(a1)
00010F1E                            
00010F1E                            	@fail:
00010F1E 51C9 FFB0                  		dbf	d1,@loop
00010F22 4E75                       		rts	
00010F24                            ; ===========================================================================
00010F24                            
00010F24                            @activate:
00010F24 0669 0060 000C             		addi.w	#$60,obY(a1)
00010F2A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010F30 0669 0060 0030             		addi.w	#$60,$30(a1)
00010F36 137C 0093 0020             		move.b	#$93,obColType(a1)
00010F3C 137C 0080 0016             		move.b	#$80,obHeight(a1)
00010F42 08E9 0004 0001             		bset	#4,obRender(a1)
00010F48 5829 0024                  		addq.b	#4,obRoutine(a1)
00010F4C 2348 003C                  		move.l	a0,$3C(a1)
00010F50 4A28 0028                  		tst.b	obSubtype(a0)
00010F54 6700                       		beq.s	@sound
00010F56 7200                       		moveq	#0,d1
00010F58 6100 FF76                  		bsr.w	@loop
00010F5C 5429 0024                  		addq.b	#2,obRoutine(a1)
00010F60 08E9 0004 0002             		bset	#4,obGfx(a1)
00010F66 0669 0100 000C             		addi.w	#$100,obY(a1)
00010F6C 337C 0000 0018             		move.w	#0,obPriority(a1)
00010F72 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010F78 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010F7E 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010F84                            
00010F84                            	@sound:
00010F8E                            
00010F8E                            Geyser_Action:	; Routine 2
00010F8E 7000                       		moveq	#0,d0
00010F90 1028 0028                  		move.b	obSubtype(a0),d0
00010F94 D040                       		add.w	d0,d0
00010F96 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00010F9A 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00010F9E 6100 E472                  		bsr.w	SpeedToPos
00010FA2 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010FA8 6100 B536                  		bsr.w	AnimateSprite
00010FAC                            
00010FAC                            Geyser_ChkDel:
00010FCA 4E75                       		rts	
00010FCC                            ; ===========================================================================
00010FCC 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00010FCE 0000                       		dc.w Geyser_Type01-Geyser_Types
00010FD0                            ; ===========================================================================
00010FD0                            
00010FD0                            Geyser_Type00:
00010FD0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00010FD6 3028 0030                  		move.w	$30(a0),d0
00010FDA B068 000C                  		cmp.w	obY(a0),d0
00010FDE 6400                       		bcc.s	locret_EFDA
00010FE0 5828 0024                  		addq.b	#4,obRoutine(a0)
00010FE4 2268 003C                  		movea.l	$3C(a0),a1
00010FE8 137C 0003 001C             		move.b	#3,obAnim(a1)
00010FEE                            
00010FEE                            locret_EFDA:
00010FEE 4E75                       		rts	
00010FF0                            ; ===========================================================================
00010FF0                            
00010FF0                            Geyser_Type01:
00010FF0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00010FF6 3028 0030                  		move.w	$30(a0),d0
00010FFA B068 000C                  		cmp.w	obY(a0),d0
00010FFE 6400                       		bcc.s	locret_EFFA
00011000 5828 0024                  		addq.b	#4,obRoutine(a0)
00011004 2268 003C                  		movea.l	$3C(a0),a1
00011008 137C 0001 001C             		move.b	#1,obAnim(a1)
0001100E                            
0001100E                            locret_EFFA:
0001100E 4E75                       		rts	
00011010                            ; ===========================================================================
00011010                            
00011010                            loc_EFFC:	; Routine 4
00011010 2268 003C                  		movea.l	$3C(a0),a1
00011014 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001101A 6700 0000                  		beq.w	Geyser_Delete
0001101E 3029 000C                  		move.w	obY(a1),d0
00011022 0640 0060                  		addi.w	#$60,d0
00011026 3140 000C                  		move.w	d0,obY(a0)
0001102A 9068 0030                  		sub.w	$30(a0),d0
0001102E 4440                       		neg.w	d0
00011030 7208                       		moveq	#8,d1
00011032 0C40 0040                  		cmpi.w	#$40,d0
00011036 6C00                       		bge.s	loc_F026
00011038 720B                       		moveq	#$B,d1
0001103A                            
0001103A                            loc_F026:
0001103A 0C40 0080                  		cmpi.w	#$80,d0
0001103E 6F00                       		ble.s	loc_F02E
00011040 720E                       		moveq	#$E,d1
00011042                            
00011042                            loc_F02E:
00011042 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011046 6A00                       		bpl.s	loc_F04C
00011048 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001104E 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011052 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011058 6500                       		bcs.s	loc_F04C
0001105A 117C 0000 001B             		move.b	#0,obAniFrame(a0)
00011060                            
00011060                            loc_F04C:
00011060 1028 001B                  		move.b	obAniFrame(a0),d0
00011064 D001                       		add.b	d1,d0
00011066 1140 001A                  		move.b	d0,obFrame(a0)
0001106A 6000 FF40                  		bra.w	Geyser_ChkDel
0001106E                            ; ===========================================================================
0001106E                            
0001106E                            Geyser_Delete:	; Routine 6
0001106E 6000 E3F6                  		bra.w	DeleteObject
0001106E 6000 E3F6                  		bra.w	DeleteObject
00011072                            		include	"_incObj\54 Lava Tag.asm"
00011072                            ; ---------------------------------------------------------------------------
00011072                            ; Object 54 - invisible	lava tag (MZ)
00011072                            ; ---------------------------------------------------------------------------
00011072                            
00011072                            LavaTag:
00011072 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011078 6E00 0000                  		bgt	WaterTag	;TIS
0001107C 7000                       		moveq	#0,d0
0001107E 1028 0024                  		move.b	obRoutine(a0),d0
00011082 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
00011086 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
0001108A                            ; ===========================================================================
0001108A 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
0001108C 0000                       		dc.w LTag_ChkDel-LTag_Index
0001108E                            
0001108E 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
00011092 00                         		even
00011092                            ; ===========================================================================
00011092                            
00011092                            LTag_Main:	; Routine 0
00011092 5428 0024                  		addq.b	#2,obRoutine(a0)
00011096 7000                       		moveq	#0,d0
00011098 1028 0028                  		move.b	obSubtype(a0),d0
0001109C 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000110A2 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000110AA 117C 0084 0001             		move.b	#$84,obRender(a0)
000110B0                            
000110B0                            LTag_ChkDel:	; Routine 2
000110B0 3028 0008                  		move.w	obX(a0),d0
000110B4 0240 FF80                  		andi.w	#$FF80,d0
000110B8 3238 F700                  		move.w	(v_screenposx).w,d1
000110BC 0441 0080                  		subi.w	#$80,d1
000110C0 0241 FF80                  		andi.w	#$FF80,d1
000110C4 9041                       		sub.w	d1,d0
000110C6 6B00 E39E                  		bmi.w	DeleteObject
000110CA 0C40 0280                  		cmpi.w	#$280,d0
000110CE 6200 E396                  		bhi.w	DeleteObject
000110D2 4E75                       		rts
000110D4                            
000110D4                            
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            ; Object 54a - invisible	water tag (MZ) - TIS
000110D4                            ; ---------------------------------------------------------------------------
000110D4                            
000110D4                            WaterTag:	
000110D4 7000                       		moveq	#0,d0
000110D6 1028 0024                  		move.b	obRoutine(a0),d0
000110DA 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000110DE 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000110E2                            ; ===========================================================================
000110E2 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
000110E4 0000                       		dc.w WTag_ChkDel-WTag_Index
000110E6                            
000110E6 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
000110EA 00                         		even
000110EA                            ; ===========================================================================
000110EA                            
000110EA                            
000110EA                            WTag_Main:	; Routine 0
000110EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000110EE 7000                       		moveq	#0,d0
000110F0                            		;move.b	obSubtype(a0),d0
000110F0                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
000110F0 0400 00F0                  		sub.b	#$F0,d0
000110F4 1178 0096 0020             		move.b	$96,obColType(a0)							
000110FA                            		;move.l	#Map_LTag,obMap(a0)
000110FA                            		;move.b	#$84,obRender(a0)
000110FA                            
000110FA                            WTag_ChkDel:	; Routine 2
000110FA 3028 0008                  		move.w	obX(a0),d0
000110FE 0240 FF80                  		andi.w	#$FF80,d0
00011102 3238 F700                  		move.w	(v_screenposx).w,d1
00011106 0441 0080                  		subi.w	#$80,d1
0001110A 0241 FF80                  		andi.w	#$FF80,d1
0001110E 9041                       		sub.w	d1,d0
00011110 6B00 E354                  		bmi.w	DeleteObject
00011114 0C40 0280                  		cmpi.w	#$280,d0
00011118 6200 E34C                  		bhi.w	DeleteObject
0001111C 4E75                       		rts
0001111E                            
0001111E                            
0001111E                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001111E                            ; ---------------------------------------------------------------------------
0001111E                            ; Sprite mappings - invisible lava tag (MZ)
0001111E                            ; ---------------------------------------------------------------------------
0001111E                            Map_LTag_internal:
0001111E 0000                       		dc.w @0-Map_LTag_internal
00011120 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011122 00                         		even
00011122 00                         		even
00011122                            		include	"_anim\Lava Geyser.asm"
00011122                            ; ---------------------------------------------------------------------------
00011122                            ; Animation script - geyser of lava (MZ)
00011122                            ; ---------------------------------------------------------------------------
00011122 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011124 0000                       		dc.w @bubble2-Ani_Geyser
00011126 0000                       		dc.w @end-Ani_Geyser
00011128 0000                       		dc.w @bubble3-Ani_Geyser
0001112A 0000                       		dc.w @blank-Ani_Geyser
0001112C 0000                       		dc.w @bubble4-Ani_Geyser
0001112E 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011138 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
0001113C 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011140 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011148 0F13 FF                    @blank:		dc.b $F, $13, afEnd
0001114C 00                         		even
0001114C 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
00011150                            		even
00011150                            		even
00011150                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
00011150                            ; ---------------------------------------------------------------------------
00011150                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00011150                            ; ---------------------------------------------------------------------------
00011150                            Map_Geyser_internal:
00011150 0000                       		dc.w @bubble1-Map_Geyser_internal
00011152 0000                       		dc.w @bubble2-Map_Geyser_internal
00011154 0000                       		dc.w @bubble3-Map_Geyser_internal
00011156 0000                       		dc.w @bubble4-Map_Geyser_internal
00011158 0000                       		dc.w @bubble5-Map_Geyser_internal
0001115A 0000                       		dc.w @bubble6-Map_Geyser_internal
0001115C 0000                       		dc.w @end1-Map_Geyser_internal
0001115E 0000                       		dc.w @end2-Map_Geyser_internal
00011160 0000                       		dc.w @medcolumn1-Map_Geyser_internal
00011162 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011164 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011166 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011168 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
0001116A 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
0001116C 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0001116E 0000                       		dc.w @longcolumn2-Map_Geyser_internal
00011170 0000                       		dc.w @longcolumn3-Map_Geyser_internal
00011172 0000                       		dc.w @bubble7-Map_Geyser_internal
00011174 0000                       		dc.w @bubble8-Map_Geyser_internal
00011176 0000                       		dc.w @blank-Map_Geyser_internal
00011178 02                         @bubble1:	dc.b 2
00011179 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001117E EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
00011183 02                         @bubble2:	dc.b 2
00011184 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
00011189 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0001118E 04                         @bubble3:	dc.b 4
0001118F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
00011194 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011199 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0001119E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000111A3 04                         @bubble4:	dc.b 4
000111A4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000111A9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000111AE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000111B3 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000111B8 06                         @bubble5:	dc.b 6
000111B9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000111BE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000111C3 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000111C8 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000111CD E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000111D2 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000111D7 06                         @bubble6:	dc.b 6
000111D8 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000111DD F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000111E2 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000111E7 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000111EC E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
000111F1 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
000111F6 02                         @end1:		dc.b 2
000111F7 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
000111FC E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011201 02                         @end2:		dc.b 2
00011202 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011207 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0001120C 0A                         @medcolumn1:	dc.b $A
0001120D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011212 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011217 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001121C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011221 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011226 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001122B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011230 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011235 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001123A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001123F 0A                         @medcolumn2:	dc.b $A
00011240 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011245 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001124A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001124F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011254 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011259 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001125E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011263 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011268 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001126D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011272 0A                         @medcolumn3:	dc.b $A
00011273 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011278 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001127D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011282 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011287 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001128C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011291 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011296 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001129B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000112A0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000112A5 06                         @shortcolumn1:	dc.b 6
000112A6 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000112AB 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000112B0 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000112B5 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000112BA D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000112BF D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000112C4 06                         @shortcolumn2:	dc.b 6
000112C5 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000112CA 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000112CF B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000112D4 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000112D9 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000112DE D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000112E3 06                         @shortcolumn3:	dc.b 6
000112E4 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000112E9 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000112EE B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000112F3 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000112F8 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000112FD D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011302 10                         @longcolumn1:	dc.b $10
00011303 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011308 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001130D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011312 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011317 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001131C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011321 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011326 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001132B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011330 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011335 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0001133A 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001133F 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011344 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011349 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001134E 700F 0840 00               		dc.b $70, $F, 8, $40, 0
00011353 10                         @longcolumn2:	dc.b $10
00011354 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011359 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001135E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011363 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011368 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001136D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011372 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011377 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0001137C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011381 100F 0850 00               		dc.b $10, $F, 8, $50, 0
00011386 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0001138B 300F 0850 00               		dc.b $30, $F, 8, $50, 0
00011390 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
00011395 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0001139A 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0001139F 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000113A4 10                         @longcolumn3:	dc.b $10
000113A5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000113AA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000113AF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000113B4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000113B9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000113BE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000113C3 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000113C8 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000113CD 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000113D2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000113D7 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000113DC 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000113E1 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
000113E6 500F 0860 00               		dc.b $50, $F, 8, $60, 0
000113EB 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
000113F0 700F 0860 00               		dc.b $70, $F, 8, $60, 0
000113F5 06                         @bubble7:	dc.b 6
000113F6 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
000113FB E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011400 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011405 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001140A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001140F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011414 06                         @bubble8:	dc.b 6
00011415 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001141A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001141F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011424 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011429 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001142E D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011433 00                         @blank:	dc.b 0
00011434                            		even
00011434                            		even
00011434                            
00011434                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011434                            ; ---------------------------------------------------------------------------
00011434                            ; Object 40 - Moto Bug enemy (GHZ)
00011434                            ; ---------------------------------------------------------------------------
00011434                            
00011434                            MotoBug:
00011434 7000                       		moveq	#0,d0
00011436 1028 0024                  		move.b	obRoutine(a0),d0
0001143A 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001143E 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011442                            ; ===========================================================================
00011442 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011444 0000                       		dc.w Moto_Action-Moto_Index
00011446 0000                       		dc.w Moto_Animate-Moto_Index
00011448 0000                       		dc.w Moto_Delete-Moto_Index
0001144A                            ; ===========================================================================
0001144A                            
0001144A                            Moto_Main:	; Routine 0
0001144A 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
00011452 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011458 117C 0004 0001             		move.b	#4,obRender(a0)
0001145E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011464 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001146A 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0001146E 6600                       		bne.s	@smoke		; if yes, branch
00011470 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011476 117C 0008 0017             		move.b	#8,obWidth(a0)
0001147C 117C 000C 0020             		move.b	#$C,obColType(a0)
00011482 6100 DF56                  		bsr.w	ObjectFall
00011486 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001148C 4A41                       		tst.w	d1
0001148E 6A00                       		bpl.s	@notonfloor
00011490 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011494 317C 0000 0012             		move.w	#0,obVelY(a0)
0001149A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
0001149E 0868 0000 0022             		bchg	#0,obStatus(a0)
000114A4                            
000114A4                            	@notonfloor:
000114A4 4E75                       		rts	
000114A6                            ; ===========================================================================
000114A6                            
000114A6                            @smoke:
000114A6 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000114AA 6000 0000                  		bra.w	Moto_Animate
000114AE                            ; ===========================================================================
000114AE                            
000114AE                            Moto_Action:	; Routine 2
000114AE 7000                       		moveq	#0,d0
000114B0 1028 0025                  		move.b	ob2ndRout(a0),d0
000114B4 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000114B8 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000114BC 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000114C2 6100 B01C                  		bsr.w	AnimateSprite
000114C6                            
000114C6                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            ; Subroutine to remember whether an object is destroyed/collected
000114C6                            ; ---------------------------------------------------------------------------
000114C6                            
000114C6                            RememberState:
000114E4 6000 DF40                  		bra.w	DisplaySprite
000114E8                            
000114E8                            	@offscreen:
000114E8 45F8 FC00                  		lea	(v_objstate).w,a2
000114EC 7000                       		moveq	#0,d0
000114EE 1028 0023                  		move.b	obRespawnNo(a0),d0
000114F2 6700                       		beq.s	@delete
000114F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000114FA                            
000114FA                            	@delete:
000114FA 6000 DF6A                  		bra.w	DeleteObject
000114FA 6000 DF6A                  		bra.w	DeleteObject
000114FE                            
000114FE                            ; ===========================================================================
000114FE 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011500 0000                       		dc.w @findfloor-Moto_ActIndex
00011502                            
00011502 =00000030                  @time:		equ $30
00011502 =00000033                  @smokedelay:	equ $33
00011502                            ; ===========================================================================
00011502                            
00011502                            @move:
00011502 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011506 6A00                       		bpl.s	@wait		; if time remains, branch
00011508 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001150C 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011512 117C 0001 001C             		move.b	#1,obAnim(a0)
00011518 0868 0000 0022             		bchg	#0,obStatus(a0)
0001151E 6600                       		bne.s	@wait
00011520 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011524                            
00011524                            	@wait:
00011524 4E75                       		rts	
00011526                            ; ===========================================================================
00011526                            
00011526                            @findfloor:
00011526 6100 DEEA                  		bsr.w	SpeedToPos
0001152A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011530 0C41 FFF8                  		cmpi.w	#-8,d1
00011534 6D00                       		blt.s	@pause
00011536 0C41 000C                  		cmpi.w	#$C,d1
0001153A 6C00                       		bge.s	@pause
0001153C D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011540 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011544 6A00                       		bpl.s	@nosmoke
00011546 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
0001154C 6100 E472                  		bsr.w	FindFreeObj
00011550 6600                       		bne.s	@nosmoke
00011552 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011556 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001155C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011562 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011568 137C 0002 001C             		move.b	#2,obAnim(a1)
0001156E                            
0001156E                            	@nosmoke:
0001156E 4E75                       		rts	
00011570                            
00011570                            @pause:
00011570 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011574 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
0001157A 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011580 117C 0000 001C             		move.b	#0,obAnim(a0)
00011586 4E75                       		rts	
00011588                            ; ===========================================================================
00011588                            
00011588                            Moto_Animate:	; Routine 4
00011588 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0001158E 6100 AF50                  		bsr.w	AnimateSprite
00011592 6000 DE92                  		bra.w	DisplaySprite
00011596                            ; ===========================================================================
00011596                            
00011596                            Moto_Delete:	; Routine 6
00011596 6000 DECE                  		bra.w	DeleteObject
00011596 6000 DECE                  		bra.w	DeleteObject
0001159A                            		include	"_anim\Moto Bug.asm"
0001159A                            ; ---------------------------------------------------------------------------
0001159A                            ; Animation script - Motobug enemy
0001159A                            ; ---------------------------------------------------------------------------
0001159A 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
0001159C 0000                       		dc.w @walk-Ani_Moto
0001159E 0000                       		dc.w @smoke-Ani_Moto
000115A0                            
000115A0 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000115A4 00                         		even
000115A4 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000115AA 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000115B8 00                         		even
000115B8 00                         		even
000115B8                            Map_Moto:	include	"_maps\Moto Bug.asm"
000115B8                            ; --------------------------------------------------------------------------------
000115B8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000115B8                            ; --------------------------------------------------------------------------------
000115B8                            
000115B8                            SME_TTY9T:	
000115B8 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000115BC 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000115C0 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000115C4 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000115C6 04                         SME_TTY9T_E:	dc.b 4	
000115C7 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000115CC 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000115D1 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000115D6 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000115DB 04                         SME_TTY9T_23:	dc.b 4	
000115DC F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000115E1 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
000115E6 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
000115EB 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
000115F0 05                         SME_TTY9T_38:	dc.b 5	
000115F1 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000115F6 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
000115FB F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011600 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011605 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
0001160A 01                         SME_TTY9T_52:	dc.b 1	
0001160B FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011610 01                         SME_TTY9T_58:	dc.b 1	
00011611 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011616 01                         SME_TTY9T_5E:	dc.b 1	
00011617 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
0001161C 00                         SME_TTY9T_64:	dc.b 0	
0001161E 00                         		even
0001161E 00                         		even
0001161E                            		include	"_incObj\4F.asm"
0001161E                            ; ---------------------------------------------------------------------------
0001161E                            ; Object 4F - Splats
0001161E                            ; ---------------------------------------------------------------------------
0001161E                            
0001161E                            Obj4F:
0001161E 7000                                       moveq   #0,d0
00011620 1028 0024                                  move.b  $24(a0),d0
00011624 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011628 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
0001162C                            ; ---------------------------------------------------------------------------
0001162C 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
0001162E 0000                                       dc.w loc_D246-ObjSplats_Index
00011630 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011632 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011634                            ; ---------------------------------------------------------------------------
00011634                            
00011634                            ObjSplats_Init:
00011634 5428 0024                                  addq.b  #2,$24(a0)
00011638 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011640 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011646 117C 0004 0001                             move.b  #4,1(a0)
0001164C 117C 0004 0014                             move.b  #4,obActWid(a0)
00011652 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011658 117C 0014 0016                             move.b  #$14,$16(a0)
0001165E 117C 0002 0020                             move.b  #2,$20(a0)
00011664 4A28 0028                                  tst.b   $28(a0)
00011668 6700                                       beq.s   loc_D246
0001166A 343C 0300                                  move.w  #$300,d2
0001166E 6000                                       bra.s   ObjSplats_FaceRight
00011670                            ; ---------------------------------------------------------------------------
00011670                            
00011670                            loc_D246:
00011670 343C 00E0                                  move.w  #$E0,d2
00011674                            
00011674                            ObjSplats_FaceRight:
00011674 323C 0100                                  move.w  #$100,d1
00011678 08E8 0000 0001                             bset    #0,1(a0)
0001167E 3038 D008                                  move.w  ($FFFFD008).w,d0
00011682 9068 0008                                  sub.w   8(a0),d0
00011686 6400                                       bcc.s   ObjSplats_Move
00011688 4440                                       neg.w   d0
0001168A 4441                                       neg.w   d1
0001168C 08A8 0000 0001                             bclr    #0,1(a0)
00011692                            
00011692                            ObjSplats_Move:
00011692 B042                                       cmp.w   d2,d0
00011694 6400                                       bcc.s   ObjSplats_Bounce
00011696 3141 0010                                  move.w  d1,$10(a0)
0001169A 5428 0024                                  addq.b  #2,$24(a0)
0001169E                            
0001169E                            ObjSplats_Bounce:
0001169E 6100 DD3A                                  bsr.w   ObjectFall
000116A2 117C 0001 001A                             move.b  #1,$1A(a0)
000116A8 4A68 0012                                  tst.w   $12(a0)
000116AC 6B00                                       bmi.s   ObjSplats_Turn
000116AE 117C 0000 001A                             move.b  #0,$1A(a0)
000116B4 6100 0000                                  bsr.w   ObjFloorDist
000116B8 4A41                                       tst.w   d1
000116BA 6A00                                       bpl.s   ObjSplats_Turn
000116BC 3011                                       move.w  (a1),d0
000116BE 0240 03FF                                  andi.w  #$3FF,d0
000116C2 0C40 02D2                                  cmpi.w  #$2D2,d0
000116C6 6500                                       bcs.s   ObjSplats_Fall
000116C8 5428 0024                                  addq.b  #2,$24(a0)
000116CC 6000                                       bra.s   ObjSplats_Turn
000116CE                            ; ---------------------------------------------------------------------------
000116CE                            
000116CE                            ObjSplats_Fall:
000116CE D368 000C                                  add.w   d1,$C(a0)
000116D2 317C FC00 0012                             move.w  #$FC00,$12(a0)
000116D8                            
000116D8                            ObjSplats_Turn:
000116D8 6100 0000                                  bsr.w   Yad_ChkWall
000116DC 6700                                       beq.s   loc_D2C4
000116DE 4468 0010                                  neg.w   $10(a0)
000116E2 0868 0000 0001                             bchg    #0,1(a0)
000116E8 0868 0000 0022                             bchg    #0,$22(a0)
000116EE                            
000116EE                            loc_D2C4:
000116EE 6000 FDD6                                  bra.w   RememberState
000116F2                            ; ---------------------------------------------------------------------------
000116F2                            
000116F2                            loc_D2C8:
000116F2 6100 DCE6                                  bsr.w   ObjectFall
000116F6 6100 DD2E                                  bsr.w   DisplaySprite
000116FA 4A28 0001                                  tst.b   1(a0)
000116FE 6A00 DD66                                  bpl.w   DeleteObject
00011702 4E75                                       rts
00011702 4E75                                       rts
00011704                            Map_Splats:	include	"_maps\Splats.asm"
00011704 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011706 0000                                       dc.w unk_D31B-Map_Splats_internal
00011708 02                         unk_D310:       dc.b   2
00011709 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011713 02                         unk_D31B:       dc.b   2
00011714 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011714 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
0001171E                            
0001171E                            		include	"_incObj\50 Yadrin.asm"
0001171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001171E                            
0001171E                            
0001171E                            Yad_ChkWall:
0001171E 3038 FE04                  		move.w	(v_framecount).w,d0
00011722 D047                       		add.w	d7,d0
00011724 0240 0003                  		andi.w	#3,d0
00011728 6600                       		bne.s	loc_F836
0001172A 7600                       		moveq	#0,d3
0001172C 1628 0014                  		move.b	obActWid(a0),d3
00011730 4A68 0010                  		tst.w	obVelX(a0)
00011734 6B00                       		bmi.s	loc_F82C
00011736 6100 0000                  		bsr.w	ObjHitWallRight
0001173A 4A41                       		tst.w	d1
0001173C 6A00                       		bpl.s	loc_F836
0001173E                            
0001173E                            loc_F828:
0001173E 7001                       		moveq	#1,d0
00011740 4E75                       		rts	
00011742                            ; ===========================================================================
00011742                            
00011742                            loc_F82C:
00011742 4643                       		not.w	d3
00011744 6100 0000                  		bsr.w	ObjHitWallLeft
00011748 4A41                       		tst.w	d1
0001174A 6BF2                       		bmi.s	loc_F828
0001174C                            
0001174C                            loc_F836:
0001174C 7000                       		moveq	#0,d0
0001174E 4E75                       		rts	
00011750                            ; End of function Yad_ChkWall
00011750                            
00011750                            ; ===========================================================================
00011750                            ; ---------------------------------------------------------------------------
00011750                            ; Object 50 - Yadrin enemy (SYZ)
00011750                            ; ---------------------------------------------------------------------------
00011750                            
00011750                            Yadrin:
00011750 7000                       		moveq	#0,d0
00011752 1028 0024                  		move.b	obRoutine(a0),d0
00011756 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
0001175A 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
0001175E                            ; ===========================================================================
0001175E 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011760 0000                       		dc.w Yad_Action-Yad_Index
00011762                            
00011762 =00000030                  yad_timedelay:	equ $30
00011762                            ; ===========================================================================
00011762                            
00011762                            Yad_Main:	; Routine 0
00011762 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
0001176A 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011770 117C 0004 0001             		move.b	#4,obRender(a0)
00011776 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001177C 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011782 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011788 117C 0008 0017             		move.b	#8,obWidth(a0)
0001178E 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011794 6100 DC44                  		bsr.w	ObjectFall
00011798 6100 0000                  		bsr.w	ObjFloorDist
0001179C 4A41                       		tst.w	d1
0001179E 6A00                       		bpl.s	locret_F89E
000117A0 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000117A4 317C 0000 0012             		move.w	#0,obVelY(a0)
000117AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000117AE 0868 0000 0022             		bchg	#0,obStatus(a0)
000117B4                            
000117B4                            	locret_F89E:
000117B4 4E75                       		rts	
000117B6                            ; ===========================================================================
000117B6                            
000117B6                            Yad_Action:	; Routine 2
000117B6 7000                       		moveq	#0,d0
000117B8 1028 0025                  		move.b	ob2ndRout(a0),d0
000117BC 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
000117C0 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
000117C4 43F9 0000 0000             		lea	(Ani_Yad).l,a1
000117CA 6100 AD14                  		bsr.w	AnimateSprite
000117CE 6000 FCF6                  		bra.w	RememberState
000117D2                            ; ===========================================================================
000117D2 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
000117D4 0000                       		dc.w Yad_FixToFloor-Yad_Index2
000117D6                            ; ===========================================================================
000117D6                            
000117D6                            Yad_Move:
000117D6 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
000117DA 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000117DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000117E0 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
000117E6 117C 0001 001C             		move.b	#1,obAnim(a0)
000117EC 0868 0000 0022             		bchg	#0,obStatus(a0)
000117F2 6600                       		bne.s	locret_F8E2
000117F4 4468 0010                  		neg.w	obVelX(a0)	; change direction
000117F8                            
000117F8                            	locret_F8E2:
000117F8 4E75                       		rts	
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            Yad_FixToFloor:
000117FA 6100 DC16                  		bsr.w	SpeedToPos
000117FE 6100 0000                  		bsr.w	ObjFloorDist
00011802 0C41 FFF8                  		cmpi.w	#-8,d1
00011806 6D00                       		blt.s	Yad_Pause
00011808 0C41 000C                  		cmpi.w	#$C,d1
0001180C 6C00                       		bge.s	Yad_Pause
0001180E D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011812 6100 FF0A                  		bsr.w	Yad_ChkWall
00011816 6600                       		bne.s	Yad_Pause
00011818 4E75                       		rts	
0001181A                            ; ===========================================================================
0001181A                            
0001181A                            Yad_Pause:
0001181A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001181E 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011824 317C 0000 0010             		move.w	#0,obVelX(a0)
0001182A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011830 4E75                       		rts	
00011830 4E75                       		rts	
00011832                            		include	"_anim\Yadrin.asm"
00011832                            ; ---------------------------------------------------------------------------
00011832                            ; Animation script - Yadrin enemy
00011832                            ; ---------------------------------------------------------------------------
00011832 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011834 0000                       		dc.w @walk-Ani_Yad
00011836                            
00011836 0800 FF                    @stand:		dc.b 8,	0, afEnd
0001183A 00                         		even
0001183A 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011848                            		even
00011848                            		even
00011848                            Map_Yad:	include	"_maps\Yadrin.asm"
00011848                            ; --------------------------------------------------------------------------------
00011848                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011848                            ; --------------------------------------------------------------------------------
00011848                            
00011848                            SME_4WhIu:	
00011848 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
0001184C 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011850 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011854 09                         SME_4WhIu_C:	dc.b 9	
00011855 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
0001185A EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
0001185F 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011864 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011869 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
0001186E FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011873 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011878 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
0001187D EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011882 09                         SME_4WhIu_3A:	dc.b 9	
00011883 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011888 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
0001188D FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011892 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011897 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
0001189C 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118A1 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
000118A6 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
000118AB EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
000118B0 0C                         SME_4WhIu_68:	dc.b $C	
000118B1 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
000118B6 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
000118BB FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
000118C0 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118C5 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000118CA F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
000118CF EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
000118D4 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
000118D9 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
000118DE F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
000118E3 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
000118E8 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
000118ED 0C                         SME_4WhIu_A5:	dc.b $C	
000118EE F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
000118F3 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000118F8 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
000118FD FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011902 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011907 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
0001190C EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011911 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011916 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
0001191B FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011920 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011925 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
0001192A 05                         SME_4WhIu_E2:	dc.b 5	
0001192B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011930 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011935 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
0001193A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
0001193F 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011944 05                         SME_4WhIu_FC:	dc.b 5	
00011945 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
0001194A 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
0001194F EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011954 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011959 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
0001195E                            		even
0001195E                            		even
0001195E                            
0001195E                            		include	"_incObj\sub SolidObject.asm"
0001195E                            ; ---------------------------------------------------------------------------
0001195E                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001195E                            ;
0001195E                            ; input:
0001195E                            ;	d1 = width
0001195E                            ;	d2 = height / 2 (when jumping)
0001195E                            ;	d3 = height / 2 (when walking)
0001195E                            ;	d4 = x-axis position
0001195E                            ; ---------------------------------------------------------------------------
0001195E                            
0001195E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001195E                            
0001195E                            
0001195E                            SolidObject:
0001195E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011962 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011966 3401                       		move.w	d1,d2
00011968 D442                       		add.w	d2,d2
0001196A 43F8 D000                  		lea	(v_player).w,a1
0001196E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011974 6600                       		bne.s	@leave		; if yes, branch
00011976 3029 0008                  		move.w	obX(a1),d0
0001197A 9068 0008                  		sub.w	obX(a0),d0
0001197E D041                       		add.w	d1,d0
00011980 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011982 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011984 6500                       		bcs.s	@stand		; if not, branch
00011986                            
00011986                            	@leave:
00011986 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
0001198C 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011992 4228 0025                  		clr.b	obSolid(a0)
00011996 7800                       		moveq	#0,d4
00011998 4E75                       		rts	
0001199A                            
0001199A                            	@stand:
0001199A 3404                       		move.w	d4,d2
0001199C 4EB9 0000 91B6             		jsr	MvSonicOnPtfm
000119A2 7800                       		moveq	#0,d4
000119A4 4E75                       		rts	
000119A6                            ; ===========================================================================
000119A6                            
000119A6                            SolidObject71:
000119A6 4A28 0025                  		tst.b	obSolid(a0)
000119AA 6700 0000                  		beq.w	loc_FAD0
000119AE 3401                       		move.w	d1,d2
000119B0 D442                       		add.w	d2,d2
000119B2 43F8 D000                  		lea	(v_player).w,a1
000119B6 0829 0001 0022             		btst	#1,obStatus(a1)
000119BC 6600                       		bne.s	@leave
000119BE 3029 0008                  		move.w	obX(a1),d0
000119C2 9068 0008                  		sub.w	obX(a0),d0
000119C6 D041                       		add.w	d1,d0
000119C8 6B00                       		bmi.s	@leave
000119CA B042                       		cmp.w	d2,d0
000119CC 6500                       		bcs.s	@stand
000119CE                            
000119CE                            	@leave:
000119CE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000119D4 08A8 0003 0022             		bclr	#3,obStatus(a0)
000119DA 4228 0025                  		clr.b	obSolid(a0)
000119DE 7800                       		moveq	#0,d4
000119E0 4E75                       		rts	
000119E2                            
000119E2                            	@stand:
000119E2 3404                       		move.w	d4,d2
000119E4 4EB9 0000 91B6             		jsr	MvSonicOnPtfm
000119EA 7800                       		moveq	#0,d4
000119EC 4E75                       		rts	
000119EE                            ; ===========================================================================
000119EE                            
000119EE                            SolidObject2F:
000119EE 43F8 D000                  		lea	(v_player).w,a1
000119F2 4A28 0001                  		tst.b	obRender(a0)
000119F6 6A00 0000                  		bpl.w	Solid_Ignore
000119FA 3029 0008                  		move.w	obX(a1),d0
000119FE 9068 0008                  		sub.w	obX(a0),d0
00011A02 D041                       		add.w	d1,d0
00011A04 6B00 0000                  		bmi.w	Solid_Ignore
00011A08 3601                       		move.w	d1,d3
00011A0A D643                       		add.w	d3,d3
00011A0C B043                       		cmp.w	d3,d0
00011A0E 6200 0000                  		bhi.w	Solid_Ignore
00011A12 3A00                       		move.w	d0,d5
00011A14 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011A1A 6700                       		beq.s	@notflipped	; if not, branch
00011A1C 4645                       		not.w	d5
00011A1E DA43                       		add.w	d3,d5
00011A20                            
00011A20                            	@notflipped:
00011A20 E24D                       		lsr.w	#1,d5
00011A22 7600                       		moveq	#0,d3
00011A24 1632 5000                  		move.b	(a2,d5.w),d3
00011A28 9612                       		sub.b	(a2),d3
00011A2A 3A28 000C                  		move.w	obY(a0),d5
00011A2E 9A43                       		sub.w	d3,d5
00011A30 1629 0016                  		move.b	obHeight(a1),d3
00011A34 4883                       		ext.w	d3
00011A36 D443                       		add.w	d3,d2
00011A38 3629 000C                  		move.w	obY(a1),d3
00011A3C 9645                       		sub.w	d5,d3
00011A3E 5843                       		addq.w	#4,d3
00011A40 D642                       		add.w	d2,d3
00011A42 6B00 0000                  		bmi.w	Solid_Ignore
00011A46 3802                       		move.w	d2,d4
00011A48 D844                       		add.w	d4,d4
00011A4A B644                       		cmp.w	d4,d3
00011A4C 6400 0000                  		bcc.w	Solid_Ignore
00011A50 6000 0000                  		bra.w	loc_FB0E
00011A54                            ; ===========================================================================
00011A54                            
00011A54                            Solid_ChkEnter:
00011A54 4A28 0001                  		tst.b	obRender(a0)
00011A58 6A00 0000                  		bpl.w	Solid_Ignore
00011A5C                            
00011A5C                            loc_FAD0:
00011A5C 43F8 D000                  		lea	(v_player).w,a1
00011A60 3029 0008                  		move.w	obX(a1),d0
00011A64 9068 0008                  		sub.w	obX(a0),d0
00011A68 D041                       		add.w	d1,d0
00011A6A 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011A6E 3601                       		move.w	d1,d3
00011A70 D643                       		add.w	d3,d3
00011A72 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011A74 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011A78 1629 0016                  		move.b	obHeight(a1),d3
00011A7C 4883                       		ext.w	d3
00011A7E D443                       		add.w	d3,d2
00011A80 3629 000C                  		move.w	obY(a1),d3
00011A84 9668 000C                  		sub.w	obY(a0),d3
00011A88 5843                       		addq.w	#4,d3
00011A8A D642                       		add.w	d2,d3
00011A8C 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011A90 3802                       		move.w	d2,d4
00011A92 D844                       		add.w	d4,d4
00011A94 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011A96 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011A9A                            
00011A9A                            loc_FB0E:
00011A9A 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011A9E 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011AA2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011AA8 6400 0000                  			bcc.w	Solid_Debug
00011AAC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011AB0 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011AB4 3A00                       		move.w	d0,d5
00011AB6 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011AB8 6400                       		bcc.s	@isright	; if yes, branch
00011ABA D241                       		add.w	d1,d1
00011ABC 9041                       		sub.w	d1,d0
00011ABE 3A00                       		move.w	d0,d5
00011AC0 4445                       		neg.w	d5
00011AC2                            
00011AC2                            	@isright:
00011AC2 3203                       		move.w	d3,d1
00011AC4 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011AC6 6400                       		bcc.s	@isbelow	; if yes, branch
00011AC8                            
00011AC8 5943                       		subq.w	#4,d3
00011ACA 9644                       		sub.w	d4,d3
00011ACC 3203                       		move.w	d3,d1
00011ACE 4441                       		neg.w	d1
00011AD0                            
00011AD0                            	@isbelow:
00011AD0 BA41                       		cmp.w	d1,d5
00011AD2 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011AD6 0C41 0004                  		cmpi.w	#4,d1
00011ADA 6300                       		bls.s	Solid_SideAir
00011ADC 4A40                       		tst.w	d0		; where is Sonic?
00011ADE 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011AE0 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011AE2 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011AE6 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011AE8 6000                       		bra.s	Solid_Left
00011AEA                            ; ===========================================================================
00011AEA                            
00011AEA                            Solid_Right:
00011AEA 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011AEE 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011AF0                            
00011AF0                            Solid_Left:
00011AF0 337C 0000 0020             		move.w	#0,obInertia(a1)
00011AF6 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011AFC                            
00011AFC                            Solid_Centre:
00011AFC 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011B00 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B06 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011B08 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011B0E 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011B14 7801                       		moveq	#1,d4		; return side collision
00011B16 4E75                       		rts	
00011B18                            ; ===========================================================================
00011B18                            
00011B18                            Solid_SideAir:
00011B18 6100                       		bsr.s	Solid_NotPushing
00011B1A 7801                       		moveq	#1,d4		; return side collision
00011B1C 4E75                       		rts	
00011B1E                            ; ===========================================================================
00011B1E                            
00011B1E                            Solid_Ignore:
00011B1E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011B24 6700                       		beq.s	Solid_Debug	; if not, branch
00011B26 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011B2C 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B2E 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011B34 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B36 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011B3C 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B3E 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011B44                            
00011B44                            
00011B44                            Solid_NotPushing:
00011B44 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011B4A 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011B50                            
00011B50                            Solid_Debug:
00011B50 7800                       		moveq	#0,d4		; return no collision
00011B52 4E75                       		rts	
00011B54                            ; ===========================================================================
00011B54                            
00011B54                            Solid_TopBottom:
00011B54 4A43                       		tst.w	d3		; is Sonic below the object?
00011B56 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011B58 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011B5C 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011B5E 60BE                       		bra.s	Solid_Ignore
00011B60                            ; ===========================================================================
00011B60                            
00011B60                            Solid_Below:
00011B60 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011B64 6700                       		beq.s	Solid_Squash	; if not, branch
00011B66 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011B68 4A43                       		tst.w	d3		; is Sonic above the object?
00011B6A 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011B6C 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011B70 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011B76                            
00011B76                            Solid_TopBtmAir:
00011B76 78FF                       		moveq	#-1,d4
00011B78 4E75                       		rts	
00011B7A                            ; ===========================================================================
00011B7A                            
00011B7A                            Solid_Squash:
00011B7A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B80 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011B82 2F08                       		move.l	a0,-(sp)
00011B84 2049                       		movea.l	a1,a0
00011B86 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011B8C 205F                       		movea.l	(sp)+,a0
00011B8E 78FF                       		moveq	#-1,d4
00011B90 4E75                       		rts	
00011B92                            ; ===========================================================================
00011B92                            
00011B92                            Solid_Landed:
00011B92 5943                       		subq.w	#4,d3
00011B94 7200                       		moveq	#0,d1
00011B96 1228 0014                  		move.b	obActWid(a0),d1
00011B9A 3401                       		move.w	d1,d2
00011B9C D442                       		add.w	d2,d2
00011B9E D269 0008                  		add.w	obX(a1),d1
00011BA2 9268 0008                  		sub.w	obX(a0),d1
00011BA6 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011BA8 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011BAA 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011BAC 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011BB0 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011BB2 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011BB6 5369 000C                  		subq.w	#1,obY(a1)
00011BBA 6100                       		bsr.s	Solid_ResetFloor
00011BBC 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011BC2 08E8 0003 0022             		bset	#3,obStatus(a0)
00011BC8 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011BCA 4E75                       		rts	
00011BCC                            ; ===========================================================================
00011BCC                            
00011BCC                            Solid_Miss:
00011BCC 7800                       		moveq	#0,d4
00011BCE 4E75                       		rts	
00011BD0                            ; End of function SolidObject
00011BD0                            
00011BD0                            
00011BD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011BD0                            
00011BD0                            
00011BD0                            Solid_ResetFloor:
00011BD0 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011BD6 6700                       		beq.s	@notonobj	; if not, branch
00011BD8                            
00011BD8 7000                       		moveq	#0,d0
00011BDA 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011BDE ED48                       		lsl.w	#6,d0
00011BE0 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011BE6 2440                       		movea.l	d0,a2
00011BE8 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011BEE 422A 0025                  		clr.b	obSolid(a2)
00011BF2                            
00011BF2                            	@notonobj:
00011BF2 3008                       		move.w	a0,d0
00011BF4 0440 D000                  		subi.w	#$D000,d0
00011BF8 EC48                       		lsr.w	#6,d0
00011BFA 0240 007F                  		andi.w	#$7F,d0
00011BFE 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011C02 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011C08 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011C0E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011C14 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011C1A 6700                       		beq.s	@notinair	; if not, branch
00011C1C 2F08                       		move.l	a0,-(sp)
00011C1E 2049                       		movea.l	a1,a0
00011C20 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011C26 205F                       		movea.l	(sp)+,a0
00011C28                            
00011C28                            	@notinair:
00011C28 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011C2E 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011C34 4E75                       		rts	
00011C36                            ; End of function Solid_ResetFloor
00011C36                            ; End of function Solid_ResetFloor
00011C36                            
00011C36                            		include	"_incObj\51 Smashable Green Block.asm"
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            ; Object 51 - smashable	green block (MZ)
00011C36                            ; ---------------------------------------------------------------------------
00011C36                            
00011C36                            SmashBlock:
00011C36 7000                       		moveq	#0,d0
00011C38 1028 0024                  		move.b	obRoutine(a0),d0
00011C3C 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011C40 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011C44 6000 F880                  		bra.w	RememberState
00011C48                            ; ===========================================================================
00011C48 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011C4A 0000                       		dc.w Smab_Solid-Smab_Index
00011C4C 0000                       		dc.w Smab_Points-Smab_Index
00011C4E                            ; ===========================================================================
00011C4E                            
00011C4E                            Smab_Main:	; Routine 0
00011C4E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011C52 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011C5A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011C60 117C 0004 0001             		move.b	#4,obRender(a0)
00011C66 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011C6C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011C72 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011C78                            
00011C78                            Smab_Solid:	; Routine 2
00011C78                            
00011C78 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011C78 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011C78                            
00011C78 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011C7E 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011C84 323C 001B                  		move.w	#$1B,d1
00011C88 343C 0010                  		move.w	#$10,d2
00011C8C 363C 0011                  		move.w	#$11,d3
00011C90 3828 0008                  		move.w	obX(a0),d4
00011C94 6100 FCC8                  		bsr.w	SolidObject
00011C98 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011C9E 6600                       		bne.s	@smash		; if yes, branch
00011CA0                            
00011CA0                            	@notspinning:
00011CA0 4E75                       		rts	
00011CA2                            ; ===========================================================================
00011CA2                            
00011CA2                            @smash:
00011CA2 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011CA8 66F6                       		bne.s	@notspinning	; if not, branch
00011CAA 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011CB0 08E9 0002 0022             		bset	#2,obStatus(a1)
00011CB6 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011CBC 137C 0007 0017             		move.b	#7,obWidth(a1)
00011CC2 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011CC8 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011CCE 08E9 0001 0022             		bset	#1,obStatus(a1)
00011CD4 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011CDA 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011CE0 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011CE6 4228 0025                  		clr.b	obSolid(a0)
00011CEA 117C 0001 001A             		move.b	#1,obFrame(a0)
00011CF0 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011CF6 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011CF8 343C 0038                  		move.w	#$38,d2
00011CFC 6100 D2DC                  		bsr.w	SmashObject
00011D00 6100 DCBE                  		bsr.w	FindFreeObj
00011D04 6600                       		bne.s	Smab_Points
00011D06 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011D0A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011D10 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011D16 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011D1A 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011D1E 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011D22 6500                       		bcs.s	@bonus		; if yes, branch
00011D24 7406                       		moveq	#6,d2		; set cap for points
00011D26                            
00011D26                            	@bonus:
00011D26 7000                       		moveq	#0,d0
00011D28 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011D2C 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011D32 6500                       		bcs.s	@givepoints	; if not, branch
00011D34 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011D38 740A                       		moveq	#10,d2
00011D3A                            
00011D3A                            	@givepoints:
00011D3A 4EB9 0000 0000             		jsr	(AddPoints).l
00011D40 E24A                       		lsr.w	#1,d2
00011D42 1342 001A                  		move.b	d2,obFrame(a1)
00011D46                            
00011D46                            Smab_Points:	; Routine 4
00011D46 6100 D6CA                  		bsr.w	SpeedToPos
00011D4A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011D50 6100 D6D4                  		bsr.w	DisplaySprite
00011D54 4A28 0001                  		tst.b	obRender(a0)
00011D58 6A00 D70C                  		bpl.w	DeleteObject
00011D5C 4E75                       		rts	
00011D5E                            ; ===========================================================================
00011D5E FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011D62 FF00 FF00                  		dc.w -$100, -$100
00011D66 0200 FE00                  		dc.w $200, -$200
00011D6A 0100 FF00                  		dc.w $100, -$100
00011D6E                            
00011D6E 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011D6E 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011D76                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011D76                            ; --------------------------------------------------------------------------------
00011D76                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011D76                            ; --------------------------------------------------------------------------------
00011D76                            
00011D76                            SME_wdHTM:	
00011D76 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00011D7A 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00011D7C 04                         SME_wdHTM_6:	dc.b 4	
00011D7D F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011D82 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011D87 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011D8C F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011D91 04                         SME_wdHTM_1B:	dc.b 4	
00011D92 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011D97 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011D9C 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011DA1 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011DA6 00                         SME_wdHTM_30:	dc.b 0	
00011DA8 00                         		even
00011DA8 00                         		even
00011DA8                            
00011DA8                            		include	"_incObj\52 Moving Blocks.asm"
00011DA8                            ; ---------------------------------------------------------------------------
00011DA8                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011DA8                            ; ---------------------------------------------------------------------------
00011DA8                            
00011DA8                            MovingBlock:
00011DA8 7000                       		moveq	#0,d0
00011DAA 1028 0024                  		move.b	obRoutine(a0),d0
00011DAE 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011DB2 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011DB6                            ; ===========================================================================
00011DB6 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011DB8 0000                       		dc.w MBlock_Platform-MBlock_Index
00011DBA 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011DBC                            
00011DBC =00000030                  mblock_origX:	equ $30
00011DBC =00000032                  mblock_origY:	equ $32
00011DBC                            
00011DBC 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011DBE 2001                       		dc.b $20, 1
00011DC0 2002                       		dc.b $20, 2
00011DC2 4003                       		dc.b $40, 3
00011DC4 3004                       		dc.b $30, 4
00011DC6                            ; ===========================================================================
00011DC6                            
00011DC6                            MBlock_Main:	; Routine 0
00011DC6 5428 0024                  		addq.b	#2,obRoutine(a0)
00011DCA 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011DD2 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011DD8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011DDE 6600                       		bne.s	loc_FE44
00011DE0 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011DE8 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011DEE 117C 0007 0016             		move.b	#7,obHeight(a0)
00011DF4                            
00011DF4                            loc_FE44:
00011DF4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011DFA 6600                       		bne.s	loc_FE60
00011DFC 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011E02 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011E08 6700                       		beq.s	loc_FE60	; if yes, branch
00011E0A 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011E10                            
00011E10                            loc_FE60:
00011E10 117C 0004 0001             		move.b	#4,obRender(a0)
00011E16 7000                       		moveq	#0,d0
00011E18 1028 0028                  		move.b	obSubtype(a0),d0
00011E1C E648                       		lsr.w	#3,d0
00011E1E 0240 001E                  		andi.w	#$1E,d0
00011E22 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011E26 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011E2A 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011E2E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E34 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011E3A 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011E40 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011E46                            
00011E46                            MBlock_Platform: ; Routine 2
00011E46 6100 0000                  		bsr.w	MBlock_Move
00011E4A 7200                       		moveq	#0,d1
00011E4C 1228 0014                  		move.b	obActWid(a0),d1
00011E50 4EB9 0000 8AE4             		jsr	(PlatformObject).l
00011E56 6000                       		bra.s	MBlock_ChkDel
00011E58                            ; ===========================================================================
00011E58                            
00011E58                            MBlock_StandOn:	; Routine 4
00011E58 7200                       		moveq	#0,d1
00011E5A 1228 0014                  		move.b	obActWid(a0),d1
00011E5E 4EB9 0000 8C58             		jsr	(ExitPlatform).l
00011E64 3F28 0008                  		move.w	obX(a0),-(sp)
00011E68 6100 0000                  		bsr.w	MBlock_Move
00011E6C 341F                       		move.w	(sp)+,d2
00011E6E 4EB9 0000 91C2             		jsr	(MvSonicOnPtfm2).l
00011E74                            
00011E74                            MBlock_ChkDel:
00011E92 6000 D592                  		bra.w	DisplaySprite
00011E96                            ; ===========================================================================
00011E96                            
00011E96                            MBlock_Move:
00011E96 7000                       		moveq	#0,d0
00011E98 1028 0028                  		move.b	obSubtype(a0),d0
00011E9C 0240 000F                  		andi.w	#$F,d0
00011EA0 D040                       		add.w	d0,d0
00011EA2 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00011EA6 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00011EAA                            ; ===========================================================================
00011EAA 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00011EAE 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00011EB2 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00011EB6 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00011EBA 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00011EBE 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00011EC0                            ; ===========================================================================
00011EC0                            
00011EC0                            MBlock_Type00:
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2                            
00011EC2                            MBlock_Type01:
00011EC2 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00011EC6 323C 0060                  		move.w	#$60,d1
00011ECA 0828 0000 0022             		btst	#0,obStatus(a0)
00011ED0 6700                       		beq.s	loc_FF26
00011ED2 4440                       		neg.w	d0
00011ED4 D041                       		add.w	d1,d0
00011ED6                            
00011ED6                            loc_FF26:
00011ED6 3228 0030                  		move.w	mblock_origX(a0),d1
00011EDA 9240                       		sub.w	d0,d1
00011EDC 3141 0008                  		move.w	d1,obX(a0)
00011EE0 4E75                       		rts	
00011EE2                            ; ===========================================================================
00011EE2                            
00011EE2                            MBlock_Type02:
00011EE2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00011EE8 6600                       		bne.s	MBlock_02_Wait
00011EEA 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00011EEE                            
00011EEE                            MBlock_02_Wait:
00011EEE 4E75                       		rts	
00011EF0                            ; ===========================================================================
00011EF0                            
00011EF0                            MBlock_Type03:
00011EF0 7600                       		moveq	#0,d3
00011EF2 1628 0014                  		move.b	obActWid(a0),d3
00011EF6 6100 0000                  		bsr.w	ObjHitWallRight
00011EFA 4A41                       		tst.w	d1		; has the platform hit a wall?
00011EFC 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00011EFE 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F02 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011F08 4E75                       		rts	
00011F0A                            ; ===========================================================================
00011F0A                            
00011F0A                            MBlock_03_End:
00011F0A 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00011F0E 4E75                       		rts	
00011F10                            ; ===========================================================================
00011F10                            
00011F10                            MBlock_Type05:
00011F10 7600                       		moveq	#0,d3
00011F12 1628 0014                  		move.b	obActWid(a0),d3
00011F16 6100 0000                  		bsr.w	ObjHitWallRight
00011F1A 4A41                       		tst.w	d1		; has the platform hit a wall?
00011F1C 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00011F1E 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F22 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011F28 4E75                       		rts	
00011F2A                            ; ===========================================================================
00011F2A                            
00011F2A                            MBlock_05_End:
00011F2A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00011F2E 4E75                       		rts	
00011F30                            ; ===========================================================================
00011F30                            
00011F30                            MBlock_Type06:
00011F30 6100 D4E0                  		bsr.w	SpeedToPos
00011F34 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00011F3A 6100 0000                  		bsr.w	ObjFloorDist
00011F3E 4A41                       		tst.w	d1		; has platform hit the floor?
00011F40 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011F44 D368 000C                  		add.w	d1,obY(a0)
00011F48 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00011F4C 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00011F50                            
00011F50                            locret_FFA0:
00011F50 4E75                       		rts	
00011F52                            ; ===========================================================================
00011F52                            
00011F52                            MBlock_Type07:
00011F52 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00011F56 6700                       		beq.s	MBlock_07_ChkDel
00011F58 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00011F5C                            
00011F5C                            MBlock_07_ChkDel:
00011F5C 588F                       		addq.l	#4,sp
00011F7C 4E75                       		rts	
00011F7E                            ; ===========================================================================
00011F7E                            
00011F7E                            MBlock_Type08:
00011F7E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00011F82 323C 0080                  		move.w	#$80,d1
00011F86 0828 0000 0022             		btst	#0,obStatus(a0)
00011F8C 6700                       		beq.s	loc_FFE2
00011F8E 4440                       		neg.w	d0
00011F90 D041                       		add.w	d1,d0
00011F92                            
00011F92                            loc_FFE2:
00011F92 3228 0032                  		move.w	mblock_origY(a0),d1
00011F96 9240                       		sub.w	d0,d1
00011F98 3141 000C                  		move.w	d1,obY(a0)
00011F9C 4E75                       		rts	
00011F9E                            ; ===========================================================================
00011F9E                            
00011F9E                            MBlock_Type0A:
00011F9E 7600                       		moveq	#0,d3
00011FA0 1628 0014                  		move.b	obActWid(a0),d3
00011FA4 D643                       		add.w	d3,d3
00011FA6 7208                       		moveq	#8,d1
00011FA8 0828 0000 0022             		btst	#0,obStatus(a0)
00011FAE 6700                       		beq.s	loc_10004
00011FB0 4441                       		neg.w	d1
00011FB2 4443                       		neg.w	d3
00011FB4                            
00011FB4                            loc_10004:
00011FB4 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011FB8 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00011FBA 3028 0008                  		move.w	obX(a0),d0
00011FBE 9068 0030                  		sub.w	mblock_origX(a0),d0
00011FC2 B043                       		cmp.w	d3,d0
00011FC4 6700                       		beq.s	MBlock_0A_Wait
00011FC6 D368 0008                  		add.w	d1,obX(a0)	; move platform
00011FCA 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011FD0 4E75                       		rts	
00011FD2                            ; ===========================================================================
00011FD2                            
00011FD2                            MBlock_0A_Wait:
00011FD2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011FD6 6600                       		bne.s	locret_1002E	; if time remains, branch
00011FD8 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011FDE                            
00011FDE                            locret_1002E:
00011FDE 4E75                       		rts	
00011FE0                            ; ===========================================================================
00011FE0                            
00011FE0                            MBlock_0A_Back:
00011FE0 3028 0008                  		move.w	obX(a0),d0
00011FE4 9068 0030                  		sub.w	mblock_origX(a0),d0
00011FE8 6700                       		beq.s	MBlock_0A_Reset
00011FEA 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
00011FEE 4E75                       		rts	
00011FF0                            ; ===========================================================================
00011FF0                            
00011FF0                            MBlock_0A_Reset:
00011FF0 4268 0036                  		clr.w	$36(a0)
00011FF4 5328 0028                  		subq.b	#1,obSubtype(a0)
00011FF8 4E75                       		rts	
00011FF8 4E75                       		rts	
00011FFA                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00011FFA                            ; ---------------------------------------------------------------------------
00011FFA                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011FFA                            ; ---------------------------------------------------------------------------
00011FFA                            Map_MBlock_internal:
00011FFA 0000                       		dc.w @mz1-Map_MBlock_internal
00011FFC 0000                       		dc.w @mz2-Map_MBlock_internal
00011FFE 0000                       		dc.w @sbz-Map_MBlock_internal
00012000 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012002 0000                       		dc.w @mz3-Map_MBlock_internal
00012004 01                         @mz1:		dc.b 1
00012005 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001200A 02                         @mz2:		dc.b 2
0001200B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012010 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012015 04                         @sbz:		dc.b 4
00012016 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001201B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012020 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012025 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001202A 04                         @sbzwide:	dc.b 4
0001202B F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012030 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012035 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001203A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001203F 03                         @mz3:		dc.b 3
00012040 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012045 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001204A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00012050 00                         		even
00012050 00                         		even
00012050                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
00012050                            ; ---------------------------------------------------------------------------
00012050                            ; Sprite mappings - moving block (LZ)
00012050                            ; ---------------------------------------------------------------------------
00012050                            Map_MBlockLZ_internal:
00012050 0000                       		dc.w @0-Map_MBlockLZ_internal
00012052 01                         @0:		dc.b 1
00012053 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012058                            		even
00012058                            		even
00012058                            
00012058                            		include	"_incObj\55 Basaran.asm"
00012058                            ; ---------------------------------------------------------------------------
00012058                            ; Object 55 - Basaran enemy (MZ)
00012058                            ; ---------------------------------------------------------------------------
00012058                            
00012058                            Basaran:
00012058 7000                       		moveq	#0,d0
0001205A 1028 0024                  		move.b	obRoutine(a0),d0
0001205E 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012062 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012066                            ; ===========================================================================
00012066 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012068 0000                       		dc.w Bas_Action-Bas_Index
0001206A                            ; ===========================================================================
0001206A                            
0001206A                            Bas_Main:	; Routine 0
0001206A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001206E 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012076 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
0001207C 117C 0004 0001             		move.b	#4,obRender(a0)
00012082 117C 000C 0016             		move.b	#$C,obHeight(a0)
00012088 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001208E 117C 000B 0020             		move.b	#$B,obColType(a0)
00012094 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001209A                            
0001209A                            Bas_Action:	; Routine 2
0001209A 7000                       		moveq	#0,d0
0001209C 1028 0025                  		move.b	ob2ndRout(a0),d0
000120A0 323B 0000                  		move.w	@index(pc,d0.w),d1
000120A4 4EBB 1000                  		jsr	@index(pc,d1.w)
000120A8 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000120AE 6100 A430                  		bsr.w	AnimateSprite
000120B2 6000 F412                  		bra.w	RememberState
000120B6                            ; ===========================================================================
000120B6 0000                       @index:		dc.w @dropcheck-@index
000120B8 0000                       		dc.w @dropfly-@index
000120BA 0000                       		dc.w @flapsound-@index
000120BC 0000                       		dc.w @flyup-@index
000120BE                            ; ===========================================================================
000120BE                            
000120BE                            @dropcheck:
000120BE 343C 0080                  		move.w	#$80,d2
000120C2 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000120C6 6400                       		bcc.s	@nodrop		; if not, branch
000120C8 3038 D00C                  		move.w	(v_player+obY).w,d0
000120CC 3140 0036                  		move.w	d0,$36(a0)
000120D0 9068 000C                  		sub.w	obY(a0),d0
000120D4 6500                       		bcs.s	@nodrop
000120D6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000120DA 6400                       		bcc.s	@nodrop		; if not, branch
000120DC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000120E0 6600                       		bne.s	@nodrop		; if yes, branch
000120E2                            
000120E2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000120E6 D007                       		add.b	d7,d0
000120E8 0200 0007                  		andi.b	#7,d0
000120EC 6600                       		bne.s	@nodrop
000120EE 117C 0001 001C             		move.b	#1,obAnim(a0)
000120F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000120F8                            
000120F8                            	@nodrop:
000120F8 4E75                       		rts	
000120FA                            ; ===========================================================================
000120FA                            
000120FA                            @dropfly:
000120FA 6100 D316                  		bsr.w	SpeedToPos
000120FE 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012104 343C 0080                  		move.w	#$80,d2
00012108 6100 0000                  		bsr.w	@chkdistance
0001210C 3028 0036                  		move.w	$36(a0),d0
00012110 9068 000C                  		sub.w	obY(a0),d0
00012114 6500                       		bcs.s	@chkdel
00012116 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
0001211A 6400                       		bcc.s	@dropmore	; if not, branch
0001211C 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012120 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012126 117C 0002 001C             		move.b	#2,obAnim(a0)
0001212C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012130                            
00012130                            	@dropmore:
00012130 4E75                       		rts	
00012132                            
00012132                            	@chkdel:
00012132 4A28 0001                  		tst.b	obRender(a0)
00012136 6A00 D32E                  		bpl.w	DeleteObject
0001213A 4E75                       		rts	
0001213C                            ; ===========================================================================
0001213C                            
0001213C                            @flapsound:
0001213C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012140 0200 000F                  		andi.b	#$F,d0
00012144 6600                       		bne.s	@nosound
00012150                            
00012150                            	@nosound:
00012150 6100 D2C0                  		bsr.w	SpeedToPos
00012154 3038 D008                  		move.w	(v_player+obX).w,d0
00012158 9068 0008                  		sub.w	obX(a0),d0
0001215C 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001215E 4440                       		neg.w	d0
00012160                            
00012160                            	@isright:
00012160 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012164 6500                       		bcs.s	@dontflyup	; if yes, branch
00012166 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001216A D007                       		add.b	d7,d0
0001216C 0200 0007                  		andi.b	#7,d0
00012170 6600                       		bne.s	@dontflyup
00012172 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012176                            
00012176                            @dontflyup:
00012176 4E75                       		rts	
00012178                            ; ===========================================================================
00012178                            
00012178                            @flyup:
00012178 6100 D298                  		bsr.w	SpeedToPos
0001217C 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
00012182 6100 0000                  		bsr.w	ObjHitCeiling
00012186 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00012188 6A00                       		bpl.s	@noceiling	; if not, branch
0001218A 9368 000C                  		sub.w	d1,obY(a0)
0001218E 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
00012194 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00012198 4268 0012                  		clr.w	obVelY(a0)
0001219C 4228 001C                  		clr.b	obAnim(a0)
000121A0 4228 0025                  		clr.b	ob2ndRout(a0)
000121A4                            
000121A4                            	@noceiling:
000121A4 4E75                       		rts	
000121A6                            ; ===========================================================================
000121A6                            
000121A6                            ; Subroutine to check Sonic's distance from the basaran
000121A6                            
000121A6                            ; input:
000121A6                            ;	d2 = distance to compare
000121A6                            
000121A6                            ; output:
000121A6                            ;	d0 = distance between Sonic and basaran
000121A6                            ;	d1 = speed/direction for basaran to fly
000121A6                            
000121A6                            @chkdistance:
000121A6 323C 0100                  		move.w	#$100,d1
000121AA 08E8 0000 0022             		bset	#0,obStatus(a0)
000121B0 3038 D008                  		move.w	(v_player+obX).w,d0
000121B4 9068 0008                  		sub.w	obX(a0),d0
000121B8 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000121BA 4440                       		neg.w	d0
000121BC 4441                       		neg.w	d1
000121BE 08A8 0000 0022             		bclr	#0,obStatus(a0)
000121C4                            
000121C4                            	@right:
000121C4 B042                       		cmp.w	d2,d0
000121C6 4E75                       		rts	
000121C8                            ; ===========================================================================
000121C8                            ; unused crap
000121C8 6100 D248                  		bsr.w	SpeedToPos
000121CC 6100 D258                  		bsr.w	DisplaySprite
000121D0 4A28 0001                  		tst.b	obRender(a0)
000121D4 6A00 D290                  		bpl.w	DeleteObject
000121D8 4E75                       		rts	
000121D8 4E75                       		rts	
000121DA                            		include	"_anim\Basaran.asm"
000121DA                            ; ---------------------------------------------------------------------------
000121DA                            ; Animation script - Basaran enemy
000121DA                            ; ---------------------------------------------------------------------------
000121DA 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000121DC 0000                       		dc.w @fall-Ani_Bas
000121DE 0000                       		dc.w @fly-Ani_Bas
000121E0 0F00 FF                    @still:		dc.b $F, 0, afEnd
000121E4 00                         		even
000121E4 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000121E8 00                         		even
000121E8 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000121EE                            		even
000121EE                            		even
000121EE                            Map_Bas:	include	"_maps\Basaran.asm"
000121EE                            ; --------------------------------------------------------------------------------
000121EE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000121EE                            ; --------------------------------------------------------------------------------
000121EE                            
000121EE                            SME_RhYYA:	
000121EE 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
000121F2 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
000121F6 01                         SME_RhYYA_8:	dc.b 1	
000121F7 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
000121FC 03                         SME_RhYYA_E:	dc.b 3	
000121FD F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012202 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012207 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
0001220C 04                         SME_RhYYA_1E:	dc.b 4	
0001220D F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012212 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012217 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
0001221C 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012221 04                         SME_RhYYA_33:	dc.b 4	
00012222 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012227 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
0001222C 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012231 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012236                            		even
00012236                            		even
00012236                            
00012236                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012236                            ; ---------------------------------------------------------------------------
00012236                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012236                            ; ---------------------------------------------------------------------------
00012236                            
00012236                            FloatingBlock:
00012236 7000                       		moveq	#0,d0
00012238 1028 0024                  		move.b	obRoutine(a0),d0
0001223C 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012240 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012244                            ; ===========================================================================
00012244 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012246 0000                       		dc.w FBlock_Action-FBlock_Index
00012248                            
00012248 =00000034                  fb_origX:	equ $34		; original x-axis position
00012248 =00000030                  fb_origY:	equ $30		; original y-axis position
00012248 =0000003A                  fb_height:	equ $3A		; total object height
00012248 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012248                            
00012248                            FBlock_Var:	; width/2, height/2
00012248 1010                       		dc.b  $10, $10	; subtype 0x/8x
0001224A 2020                       		dc.b  $20, $20	; subtype 1x/9x
0001224C 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001224E 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
00012250 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012252 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012254 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012256 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012258                            ; ===========================================================================
00012258                            
00012258                            FBlock_Main:	; Routine 0
00012258 5428 0024                  		addq.b	#2,obRoutine(a0)
0001225C 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012264 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001226A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012270 6600                       		bne.s	@notLZ
00012272 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012278                            
00012278                            	@notLZ:
00012278 117C 0004 0001             		move.b	#4,obRender(a0)
0001227E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00012284 7000                       		moveq	#0,d0
00012286 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
0001228A E648                       		lsr.w	#3,d0
0001228C 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
00012290 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
00012294 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012298 1152 0016                  		move.b	(a2),obHeight(a0)
0001229C E248                       		lsr.w	#1,d0
0001229E 1140 001A                  		move.b	d0,obFrame(a0)
000122A2 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000122A8 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000122AE 7000                       		moveq	#0,d0
000122B0 1012                       		move.b	(a2),d0
000122B2 D040                       		add.w	d0,d0
000122B4 3140 003A                  		move.w	d0,fb_height(a0)
000122B8 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000122BE 6600                       			bne.s	@dontdelete
000122C0 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000122C6 6600                       			bne.s	@notatpos
000122C8 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000122CC 6700                       			beq.s	@dontdelete
000122CE 4EF9 0000 F466             			jmp	(DeleteObject).l
000122D4                            	@notatpos:
000122D4 4228 0028                  			clr.b	obSubtype(a0)
000122D8 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000122DC 6600                       			bne.s	@dontdelete
000122DE 4EF9 0000 F466             			jmp	(DeleteObject).l
000122E4                            	@dontdelete:
000122E4 7000                       		moveq	#0,d0
000122E6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000122EC 6700                       		beq.s	@stillnotLZ
000122EE 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000122F2 0240 000F                  		andi.w	#$F,d0
000122F6 5140                       		subq.w	#8,d0
000122F8 6500                       		bcs.s	@stillnotLZ
000122FA E548                       		lsl.w	#2,d0
000122FC 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012300 45F2 0000                  		lea	(a2,d0.w),a2
00012304 4A52                       		tst.w	(a2)
00012306 6A00                       		bpl.s	@stillnotLZ
00012308 0868 0000 0022             		bchg	#0,obStatus(a0)
0001230E                            
0001230E                            	@stillnotLZ:
0001230E 1028 0028                  		move.b	obSubtype(a0),d0
00012312 6A00                       		bpl.s	FBlock_Action
00012314 0200 000F                  		andi.b	#$F,d0
00012318 1140 003C                  		move.b	d0,fb_type(a0)
0001231C 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012322 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012328 6600                       		bne.s	@chkstate
0001232A 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012330 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012336                            
00012336                            @chkstate:
00012336 45F8 FC00                  		lea	(v_objstate).w,a2
0001233A 7000                       		moveq	#0,d0
0001233C 1028 0023                  		move.b	obRespawnNo(a0),d0
00012340 6700                       		beq.s	FBlock_Action
00012342 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012348 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001234E 6700                       		beq.s	FBlock_Action
00012350 5228 0028                  		addq.b	#1,obSubtype(a0)
00012354 4268 003A                  		clr.w	fb_height(a0)
00012358                            
00012358                            FBlock_Action:	; Routine 2
00012358 3F28 0008                  		move.w	obX(a0),-(sp)
0001235C 7000                       		moveq	#0,d0
0001235E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012362 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012366 D040                       		add.w	d0,d0
00012368 323B 0000                  		move.w	@index(pc,d0.w),d1
0001236C 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00012370 381F                       		move.w	(sp)+,d4
00012372 4A28 0001                  		tst.b	obRender(a0)
00012376 6A00                       		bpl.s	@chkdel
00012378 7200                       		moveq	#0,d1
0001237A 1228 0014                  		move.b	obActWid(a0),d1
0001237E 0641 000B                  		addi.w	#$B,d1
00012382 7400                       		moveq	#0,d2
00012384 1428 0016                  		move.b	obHeight(a0),d2
00012388 3602                       		move.w	d2,d3
0001238A 5243                       		addq.w	#1,d3
0001238C 6100 F5D0                  		bsr.w	SolidObject
00012390                            
00012390                            	@chkdel:
000123AC                            		@display:
000123AC 6000 D078                  			bra.w	DisplaySprite
000123B0                            		@chkdel2:
000123B0 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000123B6 6600                       			bne.s	@delete
000123B8 4A28 0038                  			tst.b	$38(a0)
000123BC 66EE                       			bne.s	@display
000123BE                            		@delete:
000123BE 4EF9 0000 F466             			jmp	(DeleteObject).l
000123C4                            ; ===========================================================================
000123C4 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000123C8 0000 0000                  		dc.w @type02-@index, @type03-@index
000123CC 0000 0000                  		dc.w @type04-@index, @type05-@index
000123D0 0000 0000                  		dc.w @type06-@index, @type07-@index
000123D4 0000 0000                  		dc.w @type08-@index, @type09-@index
000123D8 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000123DC 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000123E0                            ; ===========================================================================
000123E0                            
000123E0                            @type00:
000123E0                            ; doesn't move
000123E0 4E75                       		rts	
000123E2                            ; ===========================================================================
000123E2                            
000123E2                            @type01:
000123E2                            ; moves side-to-side
000123E2 323C 0040                  		move.w	#$40,d1		; set move distance
000123E6 7000                       		moveq	#0,d0
000123E8 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
000123EC 6000                       		bra.s	@moveLR
000123EE                            ; ===========================================================================
000123EE                            
000123EE                            @type02:
000123EE                            ; moves side-to-side
000123EE 323C 0080                  		move.w	#$80,d1		; set move distance
000123F2 7000                       		moveq	#0,d0
000123F4 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000123F8                            
000123F8                            	@moveLR:
000123F8 0828 0000 0022             		btst	#0,obStatus(a0)
000123FE 6700                       		beq.s	@noflip
00012400 4440                       		neg.w	d0
00012402 D041                       		add.w	d1,d0
00012404                            
00012404                            	@noflip:
00012404 3228 0034                  		move.w	fb_origX(a0),d1
00012408 9240                       		sub.w	d0,d1
0001240A 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001240E 4E75                       		rts	
00012410                            ; ===========================================================================
00012410                            
00012410                            @type03:
00012410                            ; moves up/down
00012410 323C 0040                  		move.w	#$40,d1		; set move distance
00012414 7000                       		moveq	#0,d0
00012416 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001241A 6000                       		bra.s	@moveUD
0001241C                            ; ===========================================================================
0001241C                            
0001241C                            @type04:
0001241C                            ; moves up/down
0001241C 323C 0080                  		move.w	#$80,d1		; set move distance
00012420 7000                       		moveq	#0,d0
00012422 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012426                            
00012426                            	@moveUD:
00012426 0828 0000 0022             		btst	#0,obStatus(a0)
0001242C 6700                       		beq.s	@noflip04
0001242E 4440                       		neg.w	d0
00012430 D041                       		add.w	d1,d0
00012432                            
00012432                            	@noflip04:
00012432 3228 0030                  		move.w	fb_origY(a0),d1
00012436 9240                       		sub.w	d0,d1
00012438 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
0001243C 4E75                       		rts	
0001243E                            ; ===========================================================================
0001243E                            
0001243E                            @type05:
0001243E                            ; moves up when a switch is pressed
0001243E 4A28 0038                  		tst.b	$38(a0)
00012442 6600                       		bne.s	@loc_104A4
00012444 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001244A 6600                       		bne.s	@aaa		; if not, branch
0001244C 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012452 6600                       		bne.s	@aaa
00012454 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012458 3038 D008                  		move.w	(v_player+obX).w,d0
0001245C B068 0008                  		cmp.w	obX(a0),d0
00012460 6400                       		bcc.s	@aaa
00012462 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012468                            
00012468                            	@aaa:
00012468 45F8 F7E0                  		lea	(f_switch).w,a2
0001246C 7000                       		moveq	#0,d0
0001246E 1028 003C                  		move.b	fb_type(a0),d0
00012472 0832 0000 0000             		btst	#0,(a2,d0.w)
00012478 6700                       		beq.s	@loc_104AE
0001247A 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012480 6600                       		bne.s	@loc_1049E	; if not, branch
00012482 0C00 0003                  		cmpi.b	#3,d0
00012486 6600                       		bne.s	@loc_1049E
00012488 4238 F7C9                  		clr.b	(f_wtunnelallow).w
0001248C                            
0001248C                            @loc_1049E:
0001248C 117C 0001 0038             		move.b	#1,$38(a0)
00012492                            
00012492                            @loc_104A4:
00012492 4A68 003A                  		tst.w	fb_height(a0)
00012496 6700                       		beq.s	@loc_104C8
00012498 5568 003A                  		subq.w	#2,fb_height(a0)
0001249C                            
0001249C                            @loc_104AE:
0001249C 3028 003A                  		move.w	fb_height(a0),d0
000124A0 0828 0000 0022             		btst	#0,$22(a0)
000124A6 6700                       		beq.s	@loc_104BC
000124A8 4440                       		neg.w	d0
000124AA                            
000124AA                            @loc_104BC:
000124AA 3228 0030                  		move.w	fb_origY(a0),d1
000124AE D240                       		add.w	d0,d1
000124B0 3141 000C                  		move.w	d1,obY(a0)
000124B4 4E75                       		rts	
000124B6                            ; ===========================================================================
000124B6                            
000124B6                            @loc_104C8:
000124B6 5228 0028                  		addq.b	#1,$28(a0)
000124BA 4228 0038                  		clr.b	$38(a0)
000124BE 45F8 FC00                  		lea	(v_objstate).w,a2
000124C2 7000                       		moveq	#0,d0
000124C4 1028 0023                  		move.b	obRespawnNo(a0),d0
000124C8 67D2                       		beq.s	@loc_104AE
000124CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000124D0 60CA                       		bra.s	@loc_104AE
000124D2                            ; ===========================================================================
000124D2                            
000124D2                            @type06:
000124D2 4A28 0038                  		tst.b	$38(a0)
000124D6 6600                       		bne.s	@loc_10500
000124D8 45F8 F7E0                  		lea	(f_switch).w,a2
000124DC 7000                       		moveq	#0,d0
000124DE 1028 003C                  		move.b	fb_type(a0),d0
000124E2 4A32 0000                  		tst.b	(a2,d0.w)
000124E6 6A00                       		bpl.s	@loc_10512
000124E8 117C 0001 0038             		move.b	#1,$38(a0)
000124EE                            
000124EE                            @loc_10500:
000124EE 7000                       		moveq	#0,d0
000124F0 1028 0016                  		move.b	obHeight(a0),d0
000124F4 D040                       		add.w	d0,d0
000124F6 B068 003A                  		cmp.w	fb_height(a0),d0
000124FA 6700                       		beq.s	@loc_1052C
000124FC 5468 003A                  		addq.w	#2,fb_height(a0)
00012500                            
00012500                            @loc_10512:
00012500 3028 003A                  		move.w	fb_height(a0),d0
00012504 0828 0000 0022             		btst	#0,obStatus(a0)
0001250A 6700                       		beq.s	@loc_10520
0001250C 4440                       		neg.w	d0
0001250E                            
0001250E                            @loc_10520:
0001250E 3228 0030                  		move.w	fb_origY(a0),d1
00012512 D240                       		add.w	d0,d1
00012514 3141 000C                  		move.w	d1,obY(a0)
00012518 4E75                       		rts	
0001251A                            ; ===========================================================================
0001251A                            
0001251A                            @loc_1052C:
0001251A 5328 0028                  		subq.b	#1,obSubtype(a0)
0001251E 4228 0038                  		clr.b	$38(a0)
00012522 45F8 FC00                  		lea	(v_objstate).w,a2
00012526 7000                       		moveq	#0,d0
00012528 1028 0023                  		move.b	obRespawnNo(a0),d0
0001252C 67D2                       		beq.s	@loc_10512
0001252E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012534 60CA                       		bra.s	@loc_10512
00012536                            ; ===========================================================================
00012536                            
00012536                            @type07:
00012536 4A28 0038                  		tst.b	$38(a0)
0001253A 6600                       		bne.s	@loc_1055E
0001253C 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012540 6700                       		beq.s	@locret_10578
00012542 117C 0001 0038             		move.b	#1,$38(a0)
00012548 4268 003A                  		clr.w	fb_height(a0)
0001254C                            
0001254C                            @loc_1055E:
0001254C 5268 0008                  		addq.w	#1,obX(a0)
00012550 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012556 5268 003A                  		addq.w	#1,fb_height(a0)
0001255A 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012560 6600                       		bne.s	@locret_10578
00012562 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012568 4228 0038                  			clr.b	$38(a0)
0001256C 4228 0028                  		clr.b	obSubtype(a0)
00012570                            
00012570                            @locret_10578:
00012570 4E75                       		rts	
00012572                            ; ===========================================================================
00012572                            
00012572                            @type0C:
00012572 4A28 0038                  		tst.b	$38(a0)
00012576 6600                       		bne.s	@loc_10598
00012578 45F8 F7E0                  		lea	(f_switch).w,a2
0001257C 7000                       		moveq	#0,d0
0001257E 1028 003C                  		move.b	fb_type(a0),d0
00012582 0832 0000 0000             		btst	#0,(a2,d0.w)
00012588 6700                       		beq.s	@loc_105A2
0001258A 117C 0001 0038             		move.b	#1,$38(a0)
00012590                            
00012590                            @loc_10598:
00012590 4A68 003A                  		tst.w	fb_height(a0)
00012594 6700                       		beq.s	@loc_105C0
00012596 5568 003A                  		subq.w	#2,fb_height(a0)
0001259A                            
0001259A                            @loc_105A2:
0001259A 3028 003A                  		move.w	fb_height(a0),d0
0001259E 0828 0000 0022             		btst	#0,obStatus(a0)
000125A4 6700                       		beq.s	@loc_105B4
000125A6 4440                       		neg.w	d0
000125A8 0640 0080                  		addi.w	#$80,d0
000125AC                            
000125AC                            @loc_105B4:
000125AC 3228 0034                  		move.w	fb_origX(a0),d1
000125B0 D240                       		add.w	d0,d1
000125B2 3141 0008                  		move.w	d1,obX(a0)
000125B6 4E75                       		rts	
000125B8                            ; ===========================================================================
000125B8                            
000125B8                            @loc_105C0:
000125B8 5228 0028                  		addq.b	#1,obSubtype(a0)
000125BC 4228 0038                  		clr.b	$38(a0)
000125C0 45F8 FC00                  		lea	(v_objstate).w,a2
000125C4 7000                       		moveq	#0,d0
000125C6 1028 0023                  		move.b	obRespawnNo(a0),d0
000125CA 67CE                       		beq.s	@loc_105A2
000125CC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000125D2 60C6                       		bra.s	@loc_105A2
000125D4                            ; ===========================================================================
000125D4                            
000125D4                            @type0D:
000125D4 4A28 0038                  		tst.b	$38(a0)
000125D8 6600                       		bne.s	@loc_105F8
000125DA 45F8 F7E0                  		lea	(f_switch).w,a2
000125DE 7000                       		moveq	#0,d0
000125E0 1028 003C                  		move.b	fb_type(a0),d0
000125E4 4A32 0000                  		tst.b	(a2,d0.w)
000125E8 6A00                       		bpl.s	@wtf
000125EA 117C 0001 0038             		move.b	#1,$38(a0)
000125F0                            
000125F0                            @loc_105F8:
000125F0 303C 0080                  		move.w	#$80,d0
000125F4 B068 003A                  		cmp.w	fb_height(a0),d0
000125F8 6700                       		beq.s	@loc_10624
000125FA 5468 003A                  		addq.w	#2,fb_height(a0)
000125FE                            
000125FE                            @wtf:
000125FE 3028 003A                  		move.w	fb_height(a0),d0
00012602 0828 0000 0022             		btst	#0,obStatus(a0)
00012608 6700                       		beq.s	@loc_10618
0001260A 4440                       		neg.w	d0
0001260C 0640 0080                  		addi.w	#$80,d0
00012610                            
00012610                            @loc_10618:
00012610 3228 0034                  		move.w	fb_origX(a0),d1
00012614 D240                       		add.w	d0,d1
00012616 3141 0008                  		move.w	d1,obX(a0)
0001261A 4E75                       		rts	
0001261C                            ; ===========================================================================
0001261C                            
0001261C                            @loc_10624:
0001261C 5328 0028                  		subq.b	#1,obSubtype(a0)
00012620 4228 0038                  		clr.b	$38(a0)
00012624 45F8 FC00                  		lea	(v_objstate).w,a2
00012628 7000                       		moveq	#0,d0
0001262A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001262E 67CE                       		beq.s	@wtf
00012630 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012636 60C6                       		bra.s	@wtf
00012638                            ; ===========================================================================
00012638                            
00012638                            @type08:
00012638 323C 0010                  		move.w	#$10,d1
0001263C 7000                       		moveq	#0,d0
0001263E 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012642 E248                       		lsr.w	#1,d0
00012644 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012648 6000                       		bra.s	@square
0001264A                            ; ===========================================================================
0001264A                            
0001264A                            @type09:
0001264A 323C 0030                  		move.w	#$30,d1
0001264E 7000                       		moveq	#0,d0
00012650 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012654 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012658 6000                       		bra.s	@square
0001265A                            ; ===========================================================================
0001265A                            
0001265A                            @type0A:
0001265A 323C 0050                  		move.w	#$50,d1
0001265E 7000                       		moveq	#0,d0
00012660 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012664 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012668 6000                       		bra.s	@square
0001266A                            ; ===========================================================================
0001266A                            
0001266A                            @type0B:
0001266A 323C 0070                  		move.w	#$70,d1
0001266E 7000                       		moveq	#0,d0
00012670 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012674 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012678                            
00012678                            @square:
00012678 4A43                       		tst.w	d3
0001267A 6600                       		bne.s	@loc_1068E
0001267C 5228 0022                  		addq.b	#1,obStatus(a0)
00012680 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012686                            
00012686                            @loc_1068E:
00012686 1428 0022                  		move.b	obStatus(a0),d2
0001268A 0202 0003                  		andi.b	#3,d2
0001268E 6600                       		bne.s	@loc_106AE
00012690 9041                       		sub.w	d1,d0
00012692 D068 0034                  		add.w	fb_origX(a0),d0
00012696 3140 0008                  		move.w	d0,obX(a0)
0001269A 4441                       		neg.w	d1
0001269C D268 0030                  		add.w	fb_origY(a0),d1
000126A0 3141 000C                  		move.w	d1,obY(a0)
000126A4 4E75                       		rts	
000126A6                            ; ===========================================================================
000126A6                            
000126A6                            @loc_106AE:
000126A6 5302                       		subq.b	#1,d2
000126A8 6600                       		bne.s	@loc_106CC
000126AA 5341                       		subq.w	#1,d1
000126AC 9041                       		sub.w	d1,d0
000126AE 4440                       		neg.w	d0
000126B0 D068 0030                  		add.w	fb_origY(a0),d0
000126B4 3140 000C                  		move.w	d0,obY(a0)
000126B8 5241                       		addq.w	#1,d1
000126BA D268 0034                  		add.w	fb_origX(a0),d1
000126BE 3141 0008                  		move.w	d1,obX(a0)
000126C2 4E75                       		rts	
000126C4                            ; ===========================================================================
000126C4                            
000126C4                            @loc_106CC:
000126C4 5302                       		subq.b	#1,d2
000126C6 6600                       		bne.s	@loc_106EA
000126C8 5341                       		subq.w	#1,d1
000126CA 9041                       		sub.w	d1,d0
000126CC 4440                       		neg.w	d0
000126CE D068 0034                  		add.w	fb_origX(a0),d0
000126D2 3140 0008                  		move.w	d0,obX(a0)
000126D6 5241                       		addq.w	#1,d1
000126D8 D268 0030                  		add.w	fb_origY(a0),d1
000126DC 3141 000C                  		move.w	d1,obY(a0)
000126E0 4E75                       		rts	
000126E2                            ; ===========================================================================
000126E2                            
000126E2                            @loc_106EA:
000126E2 9041                       		sub.w	d1,d0
000126E4 D068 0030                  		add.w	fb_origY(a0),d0
000126E8 3140 000C                  		move.w	d0,obY(a0)
000126EC 4441                       		neg.w	d1
000126EE D268 0034                  		add.w	fb_origX(a0),d1
000126F2 3141 0008                  		move.w	d1,obX(a0)
000126F6 4E75                       		rts	
000126F6 4E75                       		rts	
000126F8                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
000126F8                            ; ---------------------------------------------------------------------------
000126F8                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000126F8                            ; ---------------------------------------------------------------------------
000126F8                            Map_FBlock_internal:
000126F8 0000                       		dc.w @syz1x1-Map_FBlock_internal
000126FA 0000                       		dc.w @syz2x2-Map_FBlock_internal
000126FC 0000                       		dc.w @syz1x2-Map_FBlock_internal
000126FE 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012700 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012702 0000                       		dc.w @slz-Map_FBlock_internal
00012704 0000                       		dc.w @lzvert-Map_FBlock_internal
00012706 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012708 01                         @syz1x1:	dc.b 1
00012709 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
0001270E 04                         @syz2x2:	dc.b 4
0001270F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012714 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012719 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001271E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012723 02                         @syz1x2:	dc.b 2
00012724 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012729 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001272E 04                         @syzrect2x2:	dc.b 4
0001272F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012734 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012739 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001273E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012743 03                         @syzrect1x3:	dc.b 3
00012744 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012749 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001274E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012753 01                         @slz:		dc.b 1
00012754 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012759 02                         @lzvert:	dc.b 2
0001275A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
0001275F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012764 04                         @lzhoriz:	dc.b 4
00012765 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
0001276A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001276F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012774 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001277A 00                         		even
0001277A 00                         		even
0001277A                            
0001277A                            		include	"_incObj\57 Spiked Ball and Chain.asm"
0001277A                            ; ---------------------------------------------------------------------------
0001277A                            ; Object 57 - spiked balls (SYZ, LZ)
0001277A                            ; ---------------------------------------------------------------------------
0001277A                            
0001277A                            SpikeBall:
0001277A 7000                       		moveq	#0,d0
0001277C 1028 0024                  		move.b	obRoutine(a0),d0
00012780 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012784 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012788                            ; ===========================================================================
00012788 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
0001278A 0000                       		dc.w SBall_Move-SBall_Index
0001278C 0000                       		dc.w SBall_Display-SBall_Index
0001278E                            
0001278E =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
0001278E                            		; $30-$37	; object RAM numbers of childs (1 byte each)
0001278E =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
0001278E =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
0001278E =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
0001278E =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
0001278E                            ; ===========================================================================
0001278E                            
0001278E                            SBall_Main:	; Routine 0
0001278E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012792 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
0001279A 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
000127A0 117C 0004 0001             		move.b	#4,obRender(a0)
000127A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000127AC 117C 0008 0014             		move.b	#8,obActWid(a0)
000127B2 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
000127B8 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
000127BE 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
000127C4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000127CA 6600                       		bne.s	@notlz
000127CC                            
000127CC 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
000127D2 317C 0310 0002             		move.w	#$310,obGfx(a0)
000127D8 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
000127E0                            
000127E0                            	@notlz:
000127E0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000127E4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000127E8 4881                       		ext.w	d1
000127EA E741                       		asl.w	#3,d1		; multiply by 8
000127EC 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
000127F0 1028 0022                  		move.b	obStatus(a0),d0
000127F4 E418                       		ror.b	#2,d0
000127F6 0200 00C0                  		andi.b	#$C0,d0
000127FA 1140 0026                  		move.b	d0,obAngle(a0)
000127FE 45E8 0029                  		lea	sball_childs(a0),a2
00012802 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012806 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001280A 14FC 0000                  		move.b	#0,(a2)+
0001280E 3601                       		move.w	d1,d3
00012810 E94B                       		lsl.w	#4,d3
00012812 1143 003C                  		move.b	d3,sball_radius(a0)
00012816 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012818 6500                       		bcs.s	@fail
0001281A 0828 0003 0028             		btst	#3,obSubtype(a0)
00012820 6700                       		beq.s	@makechain
00012822 5341                       		subq.w	#1,d1
00012824 6500                       		bcs.s	@fail
00012826                            
00012826                            @makechain:
00012826 6100 D198                  		bsr.w	FindFreeObj
0001282A 6600                       		bne.s	@fail
0001282C 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012830 3A09                       		move.w	a1,d5		; get child object RAM address
00012832 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012836 EC4D                       		lsr.w	#6,d5		; divide by $40
00012838 0245 007F                  		andi.w	#$7F,d5
0001283C 14C5                       		move.b	d5,(a2)+	; copy child RAM number
0001283E 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012844 1290                       		move.b	0(a0),0(a1)
00012846 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001284C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012852 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012858 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001285E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012864 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
0001286A 0403 0010                  		subi.b	#$10,d3
0001286E 1343 003C                  		move.b	d3,sball_radius(a1)
00012872 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012878 6600                       		bne.s	@notlzagain
0001287A                            
0001287A 4A03                       		tst.b	d3
0001287C 6600                       		bne.s	@notlzagain
0001287E 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012884                            
00012884                            	@notlzagain:
00012884 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012888                            
00012888                            	@fail:
00012888 3A08                       		move.w	a0,d5
0001288A 0445 D000                  		subi.w	#$D000,d5
0001288E EC4D                       		lsr.w	#6,d5
00012890 0245 007F                  		andi.w	#$7F,d5
00012894 14C5                       		move.b	d5,(a2)+
00012896 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001289C 6600                       		bne.s	SBall_Move
0001289E                            
0001289E 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
000128A4 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
000128AA                            
000128AA                            SBall_Move:	; Routine 2
000128AA 6100 0000                  		bsr.w	@movesub
000128AE 6000 0000                  		bra.w	@chkdel
000128B2                            ; ===========================================================================
000128B2                            
000128B2                            @movesub:
000128B2 3028 003E                  		move.w	sball_speed(a0),d0
000128B6 D168 0026                  		add.w	d0,obAngle(a0)
000128BA 1028 0026                  		move.b	obAngle(a0),d0
000128BE 4EB9 0000 3B42             		jsr	(CalcSine).l
000128C4 3428 0038                  		move.w	sball_origY(a0),d2
000128C8 3628 003A                  		move.w	sball_origX(a0),d3
000128CC 45E8 0029                  		lea	sball_childs(a0),a2
000128D0 7C00                       		moveq	#0,d6
000128D2 1C1A                       		move.b	(a2)+,d6
000128D4                            
000128D4                            	@loop:
000128D4 7800                       		moveq	#0,d4
000128D6 181A                       		move.b	(a2)+,d4
000128D8 ED4C                       		lsl.w	#6,d4
000128DA 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000128E0 2244                       		movea.l	d4,a1
000128E2 7800                       		moveq	#0,d4
000128E4 1829 003C                  		move.b	sball_radius(a1),d4
000128E8 2A04                       		move.l	d4,d5
000128EA C9C0                       		muls.w	d0,d4
000128EC E084                       		asr.l	#8,d4
000128EE CBC1                       		muls.w	d1,d5
000128F0 E085                       		asr.l	#8,d5
000128F2 D842                       		add.w	d2,d4
000128F4 DA43                       		add.w	d3,d5
000128F6 3344 000C                  		move.w	d4,obY(a1)
000128FA 3345 0008                  		move.w	d5,obX(a1)
000128FE 51CE FFD4                  		dbf	d6,@loop
00012902 4E75                       		rts	
00012904                            ; ===========================================================================
00012904                            
00012904                            @chkdel:
00012922 6000 CB02                  		bra.w	DisplaySprite
00012926                            ; ===========================================================================
00012926                            
00012926                            @delete:
00012926 7400                       		moveq	#0,d2
00012928 45E8 0029                  		lea	sball_childs(a0),a2
0001292C 141A                       		move.b	(a2)+,d2
0001292E                            
0001292E                            	@deleteloop:
0001292E 7000                       		moveq	#0,d0
00012930 101A                       		move.b	(a2)+,d0
00012932 ED48                       		lsl.w	#6,d0
00012934 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001293A 2240                       		movea.l	d0,a1
0001293C 6100 CB2A                  		bsr.w	DeleteChild
00012940 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012944                            
00012944 4E75                       		rts	
00012946                            ; ===========================================================================
00012946                            
00012946                            SBall_Display:	; Routine 4
00012946 6000 CADE                  		bra.w	DisplaySprite
00012946 6000 CADE                  		bra.w	DisplaySprite
0001294A                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
0001294A                            ; ---------------------------------------------------------------------------
0001294A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001294A                            ; ---------------------------------------------------------------------------
0001294A                            Map_SBall_internal:
0001294A 0000                       		dc.w @0-Map_SBall_internal
0001294C 01                         @0:		dc.b 1
0001294D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012952                            		even
00012952                            		even
00012952                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012952                            ; ---------------------------------------------------------------------------
00012952                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012952                            ; ---------------------------------------------------------------------------
00012952                            Map_SBall2_internal:
00012952 0000                       		dc.w @chain-Map_SBall2_internal
00012954 0000                       		dc.w @spikeball-Map_SBall2_internal
00012956 0000                       		dc.w @base-Map_SBall2_internal
00012958 01                         @chain:		dc.b 1
00012959 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
0001295E 01                         @spikeball:	dc.b 1
0001295F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012964 01                         @base:		dc.b 1
00012965 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
0001296A                            		even
0001296A                            		even
0001296A                            		include	"_incObj\58 Big Spiked Ball.asm"
0001296A                            ; ---------------------------------------------------------------------------
0001296A                            ; Object 58 - giant spiked balls (SYZ)
0001296A                            ; ---------------------------------------------------------------------------
0001296A                            
0001296A                            BigSpikeBall:
0001296A 7000                       		moveq	#0,d0
0001296C 1028 0024                  		move.b	obRoutine(a0),d0
00012970 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012974 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012978                            ; ===========================================================================
00012978 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
0001297A 0000                       		dc.w BBall_Move-BBall_Index
0001297C                            
0001297C =0000003A                  bball_origX:	equ $3A		; original x-axis position
0001297C =00000038                  bball_origY:	equ $38		; original y-axis position
0001297C =0000003C                  bball_radius:	equ $3C		; radius of circle
0001297C =0000003E                  bball_speed:	equ $3E		; speed
0001297C                            ; ===========================================================================
0001297C                            
0001297C                            BBall_Main:	; Routine 0
0001297C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012980 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012988 317C 0396 0002             		move.w	#$396,obGfx(a0)
0001298E 117C 0004 0001             		move.b	#4,obRender(a0)
00012994 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001299A 117C 0018 0014             		move.b	#$18,obActWid(a0)
000129A0 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
000129A6 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
000129AC 117C 0086 0020             		move.b	#$86,obColType(a0)
000129B2 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129B6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000129BA 4881                       		ext.w	d1
000129BC E741                       		asl.w	#3,d1		; multiply by 8
000129BE 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
000129C2 1028 0022                  		move.b	obStatus(a0),d0
000129C6 E418                       		ror.b	#2,d0
000129C8 0200 00C0                  		andi.b	#$C0,d0
000129CC 1140 0026                  		move.b	d0,obAngle(a0)
000129D0 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
000129D6                            
000129D6                            BBall_Move:	; Routine 2
000129D6 7000                       		moveq	#0,d0
000129D8 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000129DC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000129E0 D040                       		add.w	d0,d0
000129E2 323B 0000                  		move.w	@index(pc,d0.w),d1
000129E6 4EBB 1000                  		jsr	@index(pc,d1.w)
00012A08 6000 CA1C                  		bra.w	DisplaySprite
00012A0C                            ; ===========================================================================
00012A0C 0000                       @index:		dc.w @type00-@index
00012A0E 0000                       		dc.w @type01-@index
00012A10 0000                       		dc.w @type02-@index
00012A12 0000                       		dc.w @type03-@index
00012A14                            ; ===========================================================================
00012A14                            
00012A14                            @type00:
00012A14 4E75                       		rts	
00012A16                            ; ===========================================================================
00012A16                            
00012A16                            @type01:
00012A16 323C 0060                  		move.w	#$60,d1
00012A1A 7000                       		moveq	#0,d0
00012A1C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012A20 0828 0000 0022             		btst	#0,obStatus(a0)
00012A26 6700                       		beq.s	@noflip1
00012A28 4440                       		neg.w	d0
00012A2A D041                       		add.w	d1,d0
00012A2C                            
00012A2C                            	@noflip1:
00012A2C 3228 003A                  		move.w	bball_origX(a0),d1
00012A30 9240                       		sub.w	d0,d1
00012A32 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012A36 4E75                       		rts	
00012A38                            ; ===========================================================================
00012A38                            
00012A38                            @type02:
00012A38 323C 0060                  		move.w	#$60,d1
00012A3C 7000                       		moveq	#0,d0
00012A3E 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012A42 0828 0000 0022             		btst	#0,obStatus(a0)
00012A48 6700                       		beq.s	@noflip2
00012A4A 4440                       		neg.w	d0
00012A4C 0640 0080                  		addi.w	#$80,d0
00012A50                            
00012A50                            	@noflip2:
00012A50 3228 0038                  		move.w	bball_origY(a0),d1
00012A54 9240                       		sub.w	d0,d1
00012A56 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012A5A 4E75                       		rts	
00012A5C                            ; ===========================================================================
00012A5C                            
00012A5C                            @type03:
00012A5C 3028 003E                  		move.w	bball_speed(a0),d0
00012A60 D168 0026                  		add.w	d0,obAngle(a0)
00012A64 1028 0026                  		move.b	obAngle(a0),d0
00012A68 4EB9 0000 3B42             		jsr	(CalcSine).l
00012A6E 3428 0038                  		move.w	bball_origY(a0),d2
00012A72 3628 003A                  		move.w	bball_origX(a0),d3
00012A76 7800                       		moveq	#0,d4
00012A78 1828 003C                  		move.b	bball_radius(a0),d4
00012A7C 2A04                       		move.l	d4,d5
00012A7E C9C0                       		muls.w	d0,d4
00012A80 E084                       		asr.l	#8,d4
00012A82 CBC1                       		muls.w	d1,d5
00012A84 E085                       		asr.l	#8,d5
00012A86 D842                       		add.w	d2,d4
00012A88 DA43                       		add.w	d3,d5
00012A8A 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012A8E 3145 0008                  		move.w	d5,obX(a0)
00012A92 4E75                       		rts	
00012A92 4E75                       		rts	
00012A94                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012A94                            ; --------------------------------------------------------------------------------
00012A94                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012A94                            ; --------------------------------------------------------------------------------
00012A94                            
00012A94                            SME_u_DKx:	
00012A94 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012A98 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012A9A 05                         SME_u_DKx_6:	dc.b 5	
00012A9B E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012AA0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012AA5 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012AAA F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012AAF 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012AB4 01                         SME_u_DKx_20:	dc.b 1	
00012AB5 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012ABA 02                         SME_u_DKx_26:	dc.b 2	
00012ABB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012AC0 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012AC6 00                         		even
00012AC6 00                         		even
00012AC6                            		include	"_incObj\59 SLZ Elevators.asm"
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012AC6                            ; ---------------------------------------------------------------------------
00012AC6                            
00012AC6                            Elevator:
00012AC6 7000                       		moveq	#0,d0
00012AC8 1028 0024                  		move.b	obRoutine(a0),d0
00012ACC 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012AD0 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012AF2 6000 C932                  		bra.w	DisplaySprite
00012AF6                            ; ===========================================================================
00012AF6 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012AF8 0000                       		dc.w Elev_Platform-Elev_Index
00012AFA 0000                       		dc.w Elev_Action-Elev_Index
00012AFC 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012AFE                            
00012AFE =00000032                  elev_origX:	equ $32		; original x-axis position
00012AFE =00000030                  elev_origY:	equ $30		; original y-axis position
00012AFE =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012AFE                            
00012AFE 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012B00                            
00012B00 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012B02 2001                       		dc.b $20, 1
00012B04 3401                       		dc.b $34, 1
00012B06 1003                       		dc.b $10, 3
00012B08 2003                       		dc.b $20, 3
00012B0A 3403                       		dc.b $34, 3
00012B0C 1401                       		dc.b $14, 1
00012B0E 2401                       		dc.b $24, 1
00012B10 2C01                       		dc.b $2C, 1
00012B12 1403                       		dc.b $14, 3
00012B14 2403                       		dc.b $24, 3
00012B16 2C03                       		dc.b $2C, 3
00012B18 2005                       		dc.b $20, 5
00012B1A 2007                       		dc.b $20, 7
00012B1C 3009                       		dc.b $30, 9
00012B1E                            ; ===========================================================================
00012B1E                            
00012B1E                            Elev_Main:	; Routine 0
00012B1E 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B22 7000                       		moveq	#0,d0
00012B24 1028 0028                  		move.b	obSubtype(a0),d0
00012B28 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012B2A 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012B2E 0240 007F                  		andi.w	#$7F,d0
00012B32 C0FC 0006                  		mulu.w	#6,d0
00012B36 3140 003C                  		move.w	d0,elev_dist(a0)
00012B3A 3140 003E                  		move.w	d0,$3E(a0)
00012B3E 588F                       		addq.l	#4,sp
00012B40 4E75                       		rts	
00012B42                            ; ===========================================================================
00012B42                            
00012B42                            	@normal:
00012B42 E648                       		lsr.w	#3,d0
00012B44 0240 001E                  		andi.w	#$1E,d0
00012B48 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012B4C 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012B50 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012B54 7000                       		moveq	#0,d0
00012B56 1028 0028                  		move.b	obSubtype(a0),d0
00012B5A D040                       		add.w	d0,d0
00012B5C 0240 001E                  		andi.w	#$1E,d0
00012B60 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012B64 101A                       		move.b	(a2)+,d0
00012B66 E548                       		lsl.w	#2,d0
00012B68 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012B6C 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012B70 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012B78 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012B7E 117C 0004 0001             		move.b	#4,obRender(a0)
00012B84 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012B8A 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012B90 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012B96                            
00012B96                            Elev_Platform:	; Routine 2
00012B96 7200                       		moveq	#0,d1
00012B98 1228 0014                  		move.b	obActWid(a0),d1
00012B9C 4EB9 0000 8AE4             		jsr	(PlatformObject).l
00012BA2 6000 0000                  		bra.w	Elev_Types
00012BA6                            ; ===========================================================================
00012BA6                            
00012BA6                            Elev_Action:	; Routine 4
00012BA6 7200                       		moveq	#0,d1
00012BA8 1228 0014                  		move.b	obActWid(a0),d1
00012BAC 4EB9 0000 8C58             		jsr	(ExitPlatform).l
00012BB2 3F28 0008                  		move.w	obX(a0),-(sp)
00012BB6 6100 0000                  		bsr.w	Elev_Types
00012BBA 341F                       		move.w	(sp)+,d2
00012BBC 4A10                       		tst.b	0(a0)
00012BBE 6700                       		beq.s	@deleted
00012BC0 4EF9 0000 91C2             		jmp	(MvSonicOnPtfm2).l
00012BC6                            
00012BC6                            	@deleted:
00012BC6 4E75                       		rts	
00012BC8                            ; ===========================================================================
00012BC8                            
00012BC8                            Elev_Types:
00012BC8 7000                       		moveq	#0,d0
00012BCA 1028 0028                  		move.b	obSubtype(a0),d0
00012BCE 0240 000F                  		andi.w	#$F,d0
00012BD2 D040                       		add.w	d0,d0
00012BD4 323B 0000                  		move.w	@index(pc,d0.w),d1
00012BD8 4EFB 1000                  		jmp	@index(pc,d1.w)
00012BDC                            ; ===========================================================================
00012BDC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012BE0 0000 0000                  		dc.w @type02-@index, @type01-@index
00012BE4 0000 0000                  		dc.w @type04-@index, @type01-@index
00012BE8 0000 0000                  		dc.w @type06-@index, @type01-@index
00012BEC 0000 0000                  		dc.w @type08-@index, @type09-@index
00012BF0                            ; ===========================================================================
00012BF0                            
00012BF0                            @type00:
00012BF0 4E75                       		rts	
00012BF2                            ; ===========================================================================
00012BF2                            
00012BF2                            @type01:
00012BF2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012BF8 6600                       		bne.s	@notstanding
00012BFA 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012BFE                            
00012BFE                            	@notstanding:
00012BFE 4E75                       		rts	
00012C00                            ; ===========================================================================
00012C00                            
00012C00                            @type02:
00012C00 6100 0000                  		bsr.w	Elev_Move
00012C04 3028 0034                  		move.w	$34(a0),d0
00012C08 4440                       		neg.w	d0
00012C0A D068 0030                  		add.w	elev_origY(a0),d0
00012C0E 3140 000C                  		move.w	d0,obY(a0)
00012C12 4E75                       		rts	
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            @type04:
00012C14 6100 0000                  		bsr.w	Elev_Move
00012C18 3028 0034                  		move.w	$34(a0),d0
00012C1C D068 0030                  		add.w	elev_origY(a0),d0
00012C20 3140 000C                  		move.w	d0,obY(a0)
00012C24 4E75                       		rts	
00012C26                            ; ===========================================================================
00012C26                            
00012C26                            @type06:
00012C26 6100 0000                  		bsr.w	Elev_Move
00012C2A 3028 0034                  		move.w	$34(a0),d0
00012C2E E240                       		asr.w	#1,d0
00012C30 4440                       		neg.w	d0
00012C32 D068 0030                  		add.w	elev_origY(a0),d0
00012C36 3140 000C                  		move.w	d0,obY(a0)
00012C3A 3028 0034                  		move.w	$34(a0),d0
00012C3E D068 0032                  		add.w	elev_origX(a0),d0
00012C42 3140 0008                  		move.w	d0,obX(a0)
00012C46 4E75                       		rts	
00012C48                            ; ===========================================================================
00012C48                            
00012C48                            @type08:
00012C48 6100 0000                  		bsr.w	Elev_Move
00012C4C 3028 0034                  		move.w	$34(a0),d0
00012C50 E240                       		asr.w	#1,d0
00012C52 D068 0030                  		add.w	elev_origY(a0),d0
00012C56 3140 000C                  		move.w	d0,obY(a0)
00012C5A 3028 0034                  		move.w	$34(a0),d0
00012C5E 4440                       		neg.w	d0
00012C60 D068 0032                  		add.w	elev_origX(a0),d0
00012C64 3140 0008                  		move.w	d0,obX(a0)
00012C68 4E75                       		rts	
00012C6A                            ; ===========================================================================
00012C6A                            
00012C6A                            @type09:
00012C6A 6100 0000                  		bsr.w	Elev_Move
00012C6E 3028 0034                  		move.w	$34(a0),d0
00012C72 4440                       		neg.w	d0
00012C74 D068 0030                  		add.w	elev_origY(a0),d0
00012C78 3140 000C                  		move.w	d0,obY(a0)
00012C7C 4A28 0028                  		tst.b	obSubtype(a0)
00012C80 6700 0000                  		beq.w	@typereset
00012C84 4E75                       		rts	
00012C86                            ; ===========================================================================
00012C86                            
00012C86                            	@typereset:
00012C86 0828 0003 0022             		btst	#3,obStatus(a0)
00012C8C 6700                       		beq.s	@delete
00012C8E 08E9 0001 0022             		bset	#1,obStatus(a1)
00012C94 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012C9A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012CA0                            
00012CA0                            	@delete:
00012CA0 6000 C7C4                  		bra.w	DeleteObject
00012CA4                            
00012CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CA4                            
00012CA4                            
00012CA4                            Elev_Move:
00012CA4 3028 0038                  		move.w	$38(a0),d0
00012CA8 4A28 003A                  		tst.b	$3A(a0)
00012CAC 6600                       		bne.s	loc_10CC8
00012CAE 0C40 0800                  		cmpi.w	#$800,d0
00012CB2 6400                       		bcc.s	loc_10CD0
00012CB4 0640 0010                  		addi.w	#$10,d0
00012CB8 6000                       		bra.s	loc_10CD0
00012CBA                            ; ===========================================================================
00012CBA                            
00012CBA                            loc_10CC8:
00012CBA 4A40                       		tst.w	d0
00012CBC 6700                       		beq.s	loc_10CD0
00012CBE 0440 0010                  		subi.w	#$10,d0
00012CC2                            
00012CC2                            loc_10CD0:
00012CC2 3140 0038                  		move.w	d0,$38(a0)
00012CC6 48C0                       		ext.l	d0
00012CC8 E180                       		asl.l	#8,d0
00012CCA D0A8 0034                  		add.l	$34(a0),d0
00012CCE 2140 0034                  		move.l	d0,$34(a0)
00012CD2 4840                       		swap	d0
00012CD4 3428 003C                  		move.w	elev_dist(a0),d2
00012CD8 B042                       		cmp.w	d2,d0
00012CDA 6300                       		bls.s	loc_10CF0
00012CDC 117C 0001 003A             		move.b	#1,$3A(a0)
00012CE2                            
00012CE2                            loc_10CF0:
00012CE2 D442                       		add.w	d2,d2
00012CE4 B042                       		cmp.w	d2,d0
00012CE6 6600                       		bne.s	locret_10CFA
00012CE8 4228 0028                  		clr.b	obSubtype(a0)
00012CEC                            
00012CEC                            locret_10CFA:
00012CEC 4E75                       		rts	
00012CEE                            ; End of function Elev_Move
00012CEE                            
00012CEE                            ; ===========================================================================
00012CEE                            
00012CEE                            Elev_MakeMulti:	; Routine 6
00012CEE 5368 003C                  		subq.w	#1,elev_dist(a0)
00012CF2 6600                       		bne.s	@chkdel
00012CF4 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012CFA 6100 CCC4                  		bsr.w	FindFreeObj
00012CFE 6600                       		bne.s	@chkdel
00012D00 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012D04 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012D0A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012D10 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012D16                            
00012D16                            @chkdel:
00012D16 588F                       		addq.l	#4,sp
00012D36 4E75                       		rts	
00012D36 4E75                       		rts	
00012D38                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012D38                            ; ---------------------------------------------------------------------------
00012D38                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012D38                            ; ---------------------------------------------------------------------------
00012D38                            Map_Elev_internal:
00012D38 0000                       		dc.w @elevator-Map_Elev_internal
00012D3A 03                         @elevator:	dc.b 3
00012D3B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012D40 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012D45 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012D4A                            		even
00012D4A                            		even
00012D4A                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            ; Object 5A - platforms	moving in circles (SLZ)
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            
00012D4A                            CirclingPlatform:
00012D4A 7000                       		moveq	#0,d0
00012D4C 1028 0024                  		move.b	obRoutine(a0),d0
00012D50 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012D54 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012D76 6000 C6AE                  		bra.w	DisplaySprite
00012D7A                            ; ===========================================================================
00012D7A 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012D7C 0000                       		dc.w Circ_Platform-Circ_Index
00012D7E 0000                       		dc.w Circ_Action-Circ_Index
00012D80                            
00012D80 =00000032                  circ_origX:	equ $32		; original x-axis position
00012D80 =00000030                  circ_origY:	equ $30		; original y-axis position
00012D80                            ; ===========================================================================
00012D80                            
00012D80                            Circ_Main:	; Routine 0
00012D80 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D84 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012D8C 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012D92 117C 0004 0001             		move.b	#4,obRender(a0)
00012D98 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012D9E 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DA4 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012DAA 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012DB0                            
00012DB0                            Circ_Platform:	; Routine 2
00012DB0 7200                       		moveq	#0,d1
00012DB2 1228 0014                  		move.b	obActWid(a0),d1
00012DB6 4EB9 0000 8AE4             		jsr	(PlatformObject).l
00012DBC 6000 0000                  		bra.w	Circ_Types
00012DC0                            ; ===========================================================================
00012DC0                            
00012DC0                            Circ_Action:	; Routine 4
00012DC0 7200                       		moveq	#0,d1
00012DC2 1228 0014                  		move.b	obActWid(a0),d1
00012DC6 4EB9 0000 8C58             		jsr	(ExitPlatform).l
00012DCC 3F28 0008                  		move.w	obX(a0),-(sp)
00012DD0 6100 0000                  		bsr.w	Circ_Types
00012DD4 341F                       		move.w	(sp)+,d2
00012DD6 4EF9 0000 91C2             		jmp	(MvSonicOnPtfm2).l
00012DDC                            ; ===========================================================================
00012DDC                            
00012DDC                            Circ_Types:
00012DDC 7000                       		moveq	#0,d0
00012DDE 1028 0028                  		move.b	obSubtype(a0),d0
00012DE2 0240 000C                  		andi.w	#$C,d0
00012DE6 E248                       		lsr.w	#1,d0
00012DE8 323B 0000                  		move.w	@index(pc,d0.w),d1
00012DEC 4EFB 1000                  		jmp	@index(pc,d1.w)
00012DF0                            ; ===========================================================================
00012DF0 0000                       @index:		dc.w @type00-@index
00012DF2 0000                       		dc.w @type04-@index
00012DF4                            ; ===========================================================================
00012DF4                            
00012DF4                            @type00:
00012DF4 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012DF8 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012DFC 4881                       		ext.w	d1
00012DFE 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E02 0402 0050                  		subi.b	#$50,d2
00012E06 4882                       		ext.w	d2
00012E08 0828 0000 0028             		btst	#0,obSubtype(a0)
00012E0E 6700                       		beq.s	@noshift00a
00012E10 4441                       		neg.w	d1
00012E12 4442                       		neg.w	d2
00012E14                            
00012E14                            	@noshift00a:
00012E14 0828 0001 0028             		btst	#1,obSubtype(a0)
00012E1A 6700                       		beq.s	@noshift00b
00012E1C 4441                       		neg.w	d1
00012E1E C342                       		exg	d1,d2
00012E20                            
00012E20                            	@noshift00b:
00012E20 D268 0032                  		add.w	circ_origX(a0),d1
00012E24 3141 0008                  		move.w	d1,obX(a0)
00012E28 D468 0030                  		add.w	circ_origY(a0),d2
00012E2C 3142 000C                  		move.w	d2,obY(a0)
00012E30 4E75                       		rts	
00012E32                            ; ===========================================================================
00012E32                            
00012E32                            @type04:
00012E32 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012E36 0401 0050                  		subi.b	#$50,d1
00012E3A 4881                       		ext.w	d1
00012E3C 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E40 0402 0050                  		subi.b	#$50,d2
00012E44 4882                       		ext.w	d2
00012E46 0828 0000 0028             		btst	#0,obSubtype(a0)
00012E4C 6700                       		beq.s	@noshift04a
00012E4E 4441                       		neg.w	d1
00012E50 4442                       		neg.w	d2
00012E52                            
00012E52                            	@noshift04a:
00012E52 0828 0001 0028             		btst	#1,obSubtype(a0)
00012E58 6700                       		beq.s	@noshift04b
00012E5A 4441                       		neg.w	d1
00012E5C C342                       		exg	d1,d2
00012E5E                            
00012E5E                            	@noshift04b:
00012E5E 4441                       		neg.w	d1
00012E60 D268 0032                  		add.w	circ_origX(a0),d1
00012E64 3141 0008                  		move.w	d1,obX(a0)
00012E68 D468 0030                  		add.w	circ_origY(a0),d2
00012E6C 3142 000C                  		move.w	d2,obY(a0)
00012E70 4E75                       		rts	
00012E70 4E75                       		rts	
00012E72                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00012E72                            ; ---------------------------------------------------------------------------
00012E72                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012E72                            ; ---------------------------------------------------------------------------
00012E72                            Map_Circ_internal:
00012E72 0000                       		dc.w @platform-Map_Circ_internal
00012E74 02                         @platform:	dc.b 2
00012E75 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012E7A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012E80 00                         		even
00012E80 00                         		even
00012E80                            		include	"_incObj\5B Staircase.asm"
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            ; Object 5B - blocks that form a staircase (SLZ)
00012E80                            ; ---------------------------------------------------------------------------
00012E80                            
00012E80                            Staircase:
00012E80 7000                       		moveq	#0,d0
00012E82 1028 0024                  		move.b	obRoutine(a0),d0
00012E86 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00012E8A 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00012EAC 6000 C578                  		bra.w	DisplaySprite
00012EB0                            ; ===========================================================================
00012EB0 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00012EB2 0000                       		dc.w Stair_Move-Stair_Index
00012EB4 0000                       		dc.w Stair_Solid-Stair_Index
00012EB6                            
00012EB6 =00000030                  stair_origX:	equ $30		; original x-axis position
00012EB6 =00000032                  stair_origY:	equ $32		; original y-axis position
00012EB6                            
00012EB6 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00012EB6                            ; ===========================================================================
00012EB6                            
00012EB6                            Stair_Main:	; Routine 0
00012EB6 5428 0024                  		addq.b	#2,obRoutine(a0)
00012EBA 7638                       		moveq	#$38,d3
00012EBC 7801                       		moveq	#1,d4
00012EBE 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00012EC4 6700                       		beq.s	@notflipped	; if not, branch
00012EC6 763B                       		moveq	#$3B,d3
00012EC8 78FF                       		moveq	#-1,d4
00012ECA                            
00012ECA                            	@notflipped:
00012ECA 3428 0008                  		move.w	obX(a0),d2
00012ECE 2248                       		movea.l	a0,a1
00012ED0 7203                       		moveq	#3,d1
00012ED2 6000                       		bra.s	@makeblocks
00012ED4                            ; ===========================================================================
00012ED4                            
00012ED4                            @loop:
00012ED4 6100 CB00                  		bsr.w	FindNextFreeObj
00012ED8 6600 0000                  		bne.w	@fail
00012EDC 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012EE2                            
00012EE2                            @makeblocks:
00012EE2 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00012EE6 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00012EEE 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00012EF4 137C 0004 0001             		move.b	#4,obRender(a1)
00012EFA 337C 0180 0018             		move.w	#$180,obPriority(a1)
00012F00 137C 0010 0014             		move.b	#$10,obActWid(a1)
00012F06 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00012F0C 3342 0008                  		move.w	d2,obX(a1)
00012F10 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012F16 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00012F1C 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00012F22 0642 0020                  		addi.w	#$20,d2
00012F26 1343 0037                  		move.b	d3,$37(a1)
00012F2A 2348 003C                  		move.l	a0,stair_parent(a1)
00012F2E D604                       		add.b	d4,d3
00012F30 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00012F34                            
00012F34                            	@fail:
00012F34                            
00012F34                            Stair_Move:	; Routine 2
00012F34 7000                       		moveq	#0,d0
00012F36 1028 0028                  		move.b	obSubtype(a0),d0
00012F3A 0240 0007                  		andi.w	#7,d0
00012F3E D040                       		add.w	d0,d0
00012F40 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00012F44 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00012F48                            
00012F48                            Stair_Solid:	; Routine 4
00012F48 2468 003C                  		movea.l	stair_parent(a0),a2
00012F4C 7000                       		moveq	#0,d0
00012F4E 1028 0037                  		move.b	$37(a0),d0
00012F52 1032 0000                  		move.b	(a2,d0.w),d0
00012F56 D068 0032                  		add.w	stair_origY(a0),d0
00012F5A 3140 000C                  		move.w	d0,obY(a0)
00012F5E 7200                       		moveq	#0,d1
00012F60 1228 0014                  		move.b	obActWid(a0),d1
00012F64 0641 000B                  		addi.w	#$B,d1
00012F68 343C 0010                  		move.w	#$10,d2
00012F6C 363C 0011                  		move.w	#$11,d3
00012F70 3828 0008                  		move.w	obX(a0),d4
00012F74 6100 E9E8                  		bsr.w	SolidObject
00012F78 4A04                       		tst.b	d4
00012F7A 6A00                       		bpl.s	loc_10F92
00012F7C 1544 0036                  		move.b	d4,$36(a2)
00012F80                            
00012F80                            loc_10F92:
00012F80 0828 0003 0022             		btst	#3,obStatus(a0)
00012F86 6700                       		beq.s	locret_10FA0
00012F88 157C 0001 0036             		move.b	#1,$36(a2)
00012F8E                            
00012F8E                            locret_10FA0:
00012F8E 4E75                       		rts	
00012F90                            ; ===========================================================================
00012F90 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00012F92 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00012F94 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00012F96 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00012F98                            ; ===========================================================================
00012F98                            
00012F98                            Stair_Type00:
00012F98 4A68 0034                  		tst.w	$34(a0)
00012F9C 6600                       		bne.s	loc_10FC0
00012F9E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012FA4 6600                       		bne.s	locret_10FBE
00012FA6 317C 001E 0034             		move.w	#$1E,$34(a0)
00012FAC                            
00012FAC                            locret_10FBE:
00012FAC 4E75                       		rts	
00012FAE                            ; ===========================================================================
00012FAE                            
00012FAE                            loc_10FC0:
00012FAE 5368 0034                  		subq.w	#1,$34(a0)
00012FB2 66F8                       		bne.s	locret_10FBE
00012FB4 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00012FB8 4E75                       		rts	
00012FBA                            ; ===========================================================================
00012FBA                            
00012FBA                            Stair_Type02:
00012FBA 4A68 0034                  		tst.w	$34(a0)
00012FBE 6600                       		bne.s	loc_10FE0
00012FC0 4A28 0036                  		tst.b	$36(a0)
00012FC4 6A00                       		bpl.s	locret_10FDE
00012FC6 317C 003C 0034             		move.w	#$3C,$34(a0)
00012FCC                            
00012FCC                            locret_10FDE:
00012FCC 4E75                       		rts	
00012FCE                            ; ===========================================================================
00012FCE                            
00012FCE                            loc_10FE0:
00012FCE 5368 0034                  		subq.w	#1,$34(a0)
00012FD2 6600                       		bne.s	loc_10FEC
00012FD4 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00012FD8 4E75                       		rts	
00012FDA                            ; ===========================================================================
00012FDA                            
00012FDA                            loc_10FEC:
00012FDA 43E8 0038                  		lea	$38(a0),a1
00012FDE 3028 0034                  		move.w	$34(a0),d0
00012FE2 E408                       		lsr.b	#2,d0
00012FE4 0200 0001                  		andi.b	#1,d0
00012FE8 12C0                       		move.b	d0,(a1)+
00012FEA 0A00 0001                  		eori.b	#1,d0
00012FEE 12C0                       		move.b	d0,(a1)+
00012FF0 0A00 0001                  		eori.b	#1,d0
00012FF4 12C0                       		move.b	d0,(a1)+
00012FF6 0A00 0001                  		eori.b	#1,d0
00012FFA 12C0                       		move.b	d0,(a1)+
00012FFC 4E75                       		rts	
00012FFE                            ; ===========================================================================
00012FFE                            
00012FFE                            Stair_Type01:
00012FFE 43E8 0038                  		lea	$38(a0),a1
00013002 0C11 0080                  		cmpi.b	#$80,(a1)
00013006 6700                       		beq.s	locret_11038
00013008 5211                       		addq.b	#1,(a1)
0001300A 7200                       		moveq	#0,d1
0001300C 1219                       		move.b	(a1)+,d1
0001300E 4841                       		swap	d1
00013010 E289                       		lsr.l	#1,d1
00013012 2401                       		move.l	d1,d2
00013014 E289                       		lsr.l	#1,d1
00013016 2601                       		move.l	d1,d3
00013018 D682                       		add.l	d2,d3
0001301A 4841                       		swap	d1
0001301C 4842                       		swap	d2
0001301E 4843                       		swap	d3
00013020 12C3                       		move.b	d3,(a1)+
00013022 12C2                       		move.b	d2,(a1)+
00013024 12C1                       		move.b	d1,(a1)+
00013026                            
00013026                            locret_11038:
00013026 4E75                       		rts	
00013028 4E75                       		rts	
00013028 4E75                       		rts	
0001302A                            Map_Stair:	include	"_maps\Staircase.asm"
0001302A                            ; ---------------------------------------------------------------------------
0001302A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001302A                            ; ---------------------------------------------------------------------------
0001302A                            Map_Stair_internal:
0001302A 0000                       		dc.w @block-Map_Stair_internal
0001302C 01                         @block:		dc.b 1
0001302D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013032                            		even
00013032                            		even
00013032                            		include	"_incObj\5C Pylon.asm"
00013032                            ; ---------------------------------------------------------------------------
00013032                            ; Object 5C - metal pylons in foreground (SLZ)
00013032                            ; ---------------------------------------------------------------------------
00013032                            
00013032                            Pylon:
00013032 7000                       		moveq	#0,d0
00013034 1028 0024                  		move.b	obRoutine(a0),d0
00013038 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
0001303C 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013040                            ; ===========================================================================
00013040 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013042 0000                       		dc.w Pyl_Display-Pyl_Index
00013044                            ; ===========================================================================
00013044                            
00013044                            Pyl_Main:	; Routine 0
00013044 5428 0024                  		addq.b	#2,obRoutine(a0)
00013048 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00013050 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013056 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001305C                            
0001305C                            Pyl_Display:	; Routine 2
0001305C 2238 F700                  		move.l	(v_screenposx).w,d1
00013060 D281                       		add.l	d1,d1
00013062 4841                       		swap	d1
00013064 4441                       		neg.w	d1
00013066 3141 0008                  		move.w	d1,obX(a0)
0001306A 2238 F704                  		move.l	(v_screenposy).w,d1
0001306E D281                       		add.l	d1,d1
00013070 4841                       		swap	d1
00013072 0241 003F                  		andi.w	#$3F,d1
00013076 4441                       		neg.w	d1
00013078 0641 0100                  		addi.w	#$100,d1
0001307C 3141 000A                  		move.w	d1,obScreenY(a0)
00013080 6000 C3A4                  		bra.w	DisplaySprite
00013080 6000 C3A4                  		bra.w	DisplaySprite
00013084                            Map_Pylon:	include	"_maps\Pylon.asm"
00013084                            ; ---------------------------------------------------------------------------
00013084                            ; Sprite mappings - metal pylons in foreground (SLZ)
00013084                            ; ---------------------------------------------------------------------------
00013084                            Map_Pylon_internal:
00013084 0000                       		dc.w @pylon-Map_Pylon_internal
00013086 09                         @pylon:		dc.b 9
00013087 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001308C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00013091 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00013096 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001309B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000130A0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000130A5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000130AA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000130AF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000130B4                            		even
000130B4                            		even
000130B4                            
000130B4                            		include	"_incObj\1B Water Surface.asm"
000130B4                            ; ---------------------------------------------------------------------------
000130B4                            ; Object 1B - water surface (LZ)
000130B4                            ; ---------------------------------------------------------------------------
000130B4                            
000130B4                            WaterSurface:
000130B4 7000                       		moveq	#0,d0
000130B6 1028 0024                  		move.b	obRoutine(a0),d0
000130BA 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000130BE 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000130C2                            ; ===========================================================================
000130C2 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000130C4 0000                       		dc.w Surf_Action-Surf_Index
000130C6                            
000130C6 =00000030                  surf_origX:	equ $30		; original x-axis position
000130C6 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000130C6                            ; ===========================================================================
000130C6                            
000130C6                            Surf_Main:	; Routine 0
000130C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000130CA 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000130D2 317C C300 0002             		move.w	#$C300,obGfx(a0)
000130D8 117C 0004 0001             		move.b	#4,obRender(a0)
000130DE 117C 0080 0014             		move.b	#$80,obActWid(a0)
000130E4 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000130EA                            
000130EA                            Surf_Action:	; Routine 2
000130EA 3238 F700                  		move.w	(v_screenposx).w,d1
000130EE 0241 FFE0                  		andi.w	#$FFE0,d1
000130F2 D268 0030                  		add.w	surf_origX(a0),d1
000130F6 0838 0000 FE05             		btst	#0,(v_framebyte).w
000130FC 6700                       		beq.s	@even		; branch on even frames
000130FE 0641 0020                  		addi.w	#$20,d1
00013102                            
00013102                            	@even:
00013102 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013106 3238 F646                  		move.w	(v_waterpos1).w,d1
0001310A 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001310E 4A28 0032                  		tst.b	surf_freeze(a0)
00013112 6600                       		bne.s	@stopped
00013114 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0001311A 6700                       		beq.s	@animate	; if not, branch
0001311C 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013120 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013126 6000                       		bra.s	@display
00013128                            ; ===========================================================================
00013128                            
00013128                            @stopped:
00013128 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001312C 6600                       		bne.s	@display	; if yes, branch
0001312E 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013134 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013138                            
00013138                            @animate:
00013138 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001313C 6A00                       		bpl.s	@display
0001313E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013144 5228 001A                  		addq.b	#1,obFrame(a0)
00013148 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001314E 6500                       		bcs.s	@display
00013150 117C 0000 001A             		move.b	#0,obFrame(a0)
00013156                            
00013156                            @display:
00013156 6000 C2CE                  		bra.w	DisplaySprite
00013156 6000 C2CE                  		bra.w	DisplaySprite
0001315A                            Map_Surf:	include	"_maps\Water Surface.asm"
0001315A                            ; --------------------------------------------------------------------------------
0001315A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001315A                            ; --------------------------------------------------------------------------------
0001315A                            
0001315A                            SME_LGSi8:	
0001315A 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001315E 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013162 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013166 03                         SME_LGSi8_C:	dc.b 3	
00013167 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001316C F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00013171 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013176 03                         SME_LGSi8_1C:	dc.b 3	
00013177 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001317C F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013181 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
00013186 03                         SME_LGSi8_2C:	dc.b 3	
00013187 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001318C F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013191 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
00013196 06                         SME_LGSi8_3C:	dc.b 6	
00013197 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001319C F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000131A1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000131A6 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000131AB F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000131B0 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000131B5 06                         SME_LGSi8_5B:	dc.b 6	
000131B6 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000131BB F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000131C0 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000131C5 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000131CA F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000131CF F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000131D4 06                         SME_LGSi8_7A:	dc.b 6	
000131D5 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000131DA F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000131DF F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000131E4 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
000131E9 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000131EE F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
000131F4 00                         		even
000131F4 00                         		even
000131F4                            		include	"_incObj\0B Pole that Breaks.asm"
000131F4                            ; ---------------------------------------------------------------------------
000131F4                            ; Object 0B - pole that	breaks (LZ)
000131F4                            ; ---------------------------------------------------------------------------
000131F4                            
000131F4                            Pole:
000131F4 7000                       		moveq	#0,d0
000131F6 1028 0024                  		move.b	obRoutine(a0),d0
000131FA 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000131FE 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013202                            ; ===========================================================================
00013202 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013204 0000                       		dc.w Pole_Action-Pole_Index
00013206 0000                       		dc.w Pole_Display-Pole_Index
00013208                            
00013208 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013208 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013208                            ; ===========================================================================
00013208                            
00013208                            Pole_Main:	; Routine 0
00013208 5428 0024                  		addq.b	#2,obRoutine(a0)
0001320C 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013214 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
0001321A 117C 0004 0001             		move.b	#4,obRender(a0)
00013220 117C 0008 0014             		move.b	#8,obActWid(a0)
00013226 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001322C 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013232 7000                       		moveq	#0,d0
00013234 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013238 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001323C 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013240                            
00013240                            Pole_Action:	; Routine 2
00013240 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013244 6700                       		beq.s	@grab		; if not, branch
00013246 4A68 0030                  		tst.w	pole_time(a0)
0001324A 6700                       		beq.s	@moveup
0001324C 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00013250 6600                       		bne.s	@moveup
00013252 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013258 6000                       		bra.s	@release
0001325A                            ; ===========================================================================
0001325A                            
0001325A                            @moveup:
0001325A 43F8 D000                  		lea	(v_player).w,a1
0001325E 3028 000C                  		move.w	obY(a0),d0
00013262 0440 0018                  		subi.w	#$18,d0
00013266 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
0001326C 6700                       		beq.s	@movedown	; if not, branch
0001326E 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013272 B069 000C                  		cmp.w	obY(a1),d0
00013276 6500                       		bcs.s	@movedown
00013278 3340 000C                  		move.w	d0,obY(a1)
0001327C                            
0001327C                            @movedown:
0001327C 0640 0024                  		addi.w	#$24,d0
00013280 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
00013286 6700                       		beq.s	@letgo		; if not, branch
00013288 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
0001328C B069 000C                  		cmp.w	obY(a1),d0
00013290 6400                       		bcc.s	@letgo
00013292 3340 000C                  		move.w	d0,obY(a1)
00013296                            
00013296                            @letgo:
00013296 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001329A 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
0001329E 6700                       		beq.s	Pole_Display	; if not, branch
000132A0                            
000132A0                            @release:
000132A0 4228 0020                  		clr.b	obColType(a0)
000132A4 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000132A8 4238 F7C8                  		clr.b	(f_lockmulti).w
000132AC 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000132B0 4228 0032                  		clr.b	pole_grabbed(a0)
000132B4 6000                       		bra.s	Pole_Display
000132B6                            ; ===========================================================================
000132B6                            
000132B6                            @grab:
000132B6 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000132BA 6700                       		beq.s	Pole_Display	; if not, branch
000132BC 43F8 D000                  		lea	(v_player).w,a1
000132C0 3028 0008                  		move.w	obX(a0),d0
000132C4 0640 0014                  		addi.w	#$14,d0
000132C8 B069 0008                  		cmp.w	obX(a1),d0
000132CC 6400                       		bcc.s	Pole_Display
000132CE 4228 0021                  		clr.b	obColProp(a0)
000132D2 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000132D8 6400                       		bcc.s	Pole_Display
000132DA 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000132DE 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000132E2 3028 0008                  		move.w	obX(a0),d0
000132E6 0640 0014                  		addi.w	#$14,d0
000132EA 3340 0008                  		move.w	d0,obX(a1)
000132EE 08A9 0000 0022             		bclr	#0,obStatus(a1)
000132F4 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000132FA 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013300 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013306 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
0001330C                            
0001330C                            Pole_Display:	; Routine 4
0001330C 6000 E1B8                  		bra.w	RememberState
0001330C 6000 E1B8                  		bra.w	RememberState
00013310                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013310                            ; ---------------------------------------------------------------------------
00013310                            ; Sprite mappings - pole that breaks (LZ)
00013310                            ; ---------------------------------------------------------------------------
00013310                            Map_Pole_internal:
00013310 0000                       		dc.w @normal-Map_Pole_internal
00013312 0000                       		dc.w @broken-Map_Pole_internal
00013314 02                         @normal:	dc.b 2			; normal pole
00013315 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001331A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001331F 04                         @broken:	dc.b 4			; broken pole
00013320 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013325 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001332A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001332F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013334                            		even
00013334                            		even
00013334                            		include	"_incObj\0C Flapping Door.asm"
00013334                            ; ---------------------------------------------------------------------------
00013334                            ; Object 0C - flapping door (LZ)
00013334                            ; ---------------------------------------------------------------------------
00013334                            
00013334                            FlapDoor:
00013334 7000                       		moveq	#0,d0
00013336 1028 0024                  		move.b	obRoutine(a0),d0
0001333A 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001333E 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013342                            ; ===========================================================================
00013342 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013344 0000                       		dc.w Flap_OpenClose-Flap_Index
00013346                            
00013346 =00000032                  flap_time:	equ $32		; time between opening/closing
00013346 =00000030                  flap_wait:	equ $30		; time until change
00013346                            ; ===========================================================================
00013346                            
00013346                            Flap_Main:	; Routine 0
00013346 5428 0024                  		addq.b	#2,obRoutine(a0)
0001334A 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013352 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013358 0028 0004 0001             		ori.b	#4,obRender(a0)
0001335E 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013364 7000                       		moveq	#0,d0
00013366 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001336A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001336E 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013372                            
00013372                            Flap_OpenClose:	; Routine 2
00013372 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013376 6A00                       		bpl.s	@wait		; if time remains, branch
00013378 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001337E 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00013384 4A28 0001                  		tst.b	obRender(a0)
00013388 6A00                       		bpl.s	@nosound
00013394                            
00013394                            	@wait:
00013394                            	@nosound:
00013394 43F9 0000 0000             		lea	(Ani_Flap).l,a1
0001339A 6100 9144                  		bsr.w	AnimateSprite
0001339E 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000133A2 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000133A6 6600                       		bne.s	@display	; if yes, branch
000133A8 3038 D008                  		move.w	(v_player+obX).w,d0
000133AC B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000133B0 6400                       		bcc.s	@display	; if yes, branch
000133B2 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000133B8 323C 0013                  		move.w	#$13,d1
000133BC 343C 0020                  		move.w	#$20,d2
000133C0 3602                       		move.w	d2,d3
000133C2 5243                       		addq.w	#1,d3
000133C4 3828 0008                  		move.w	obX(a0),d4
000133C8 6100 E594                  		bsr.w	SolidObject	; make the door	solid
000133CC                            
000133CC                            	@display:
000133CC 6000 E0F8                  		bra.w	RememberState
000133CC 6000 E0F8                  		bra.w	RememberState
000133D0                            		include	"_anim\Flapping Door.asm"
000133D0                            ; ---------------------------------------------------------------------------
000133D0                            ; Animation script - flapping door (LZ)
000133D0                            ; ---------------------------------------------------------------------------
000133D0 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000133D2 0000                       		dc.w @closing-Ani_Flap
000133D4 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000133DA 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000133E0                            		even
000133E0                            		even
000133E0                            Map_Flap:	include	"_maps\Flapping Door.asm"
000133E0                            ; ---------------------------------------------------------------------------
000133E0                            ; Sprite mappings - flapping door (LZ)
000133E0                            ; ---------------------------------------------------------------------------
000133E0                            Map_Flap_internal:
000133E0 0000                       		dc.w @closed-Map_Flap_internal
000133E2 0000                       		dc.w @halfway-Map_Flap_internal
000133E4 0000                       		dc.w @open-Map_Flap_internal
000133E6 02                         @closed:	dc.b 2
000133E7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000133EC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000133F1 02                         @halfway:	dc.b 2
000133F2 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000133F7 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000133FC 02                         @open:		dc.b 2
000133FD D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013402 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013408 00                         		even
00013408 00                         		even
00013408                            
00013408                            		include	"_incObj\71 Invisible Barriers.asm"
00013408                            ; ---------------------------------------------------------------------------
00013408                            ; Object 71 - invisible	solid barriers
00013408                            ; ---------------------------------------------------------------------------
00013408                            
00013408                            Invisibarrier:
00013408 7000                       		moveq	#0,d0
0001340A 1028 0024                  		move.b	obRoutine(a0),d0
0001340E 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013412 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013416                            ; ===========================================================================
00013416 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013418 0000                       		dc.w Invis_Solid-Invis_Index
0001341A                            
0001341A =00000016                  invis_height:	equ $16		; height in pixels
0001341A                            ; ===========================================================================
0001341A                            
0001341A                            Invis_Main:	; Routine 0
0001341A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001341E 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013426 317C 8680 0002             		move.w	#$8680,obGfx(a0)
0001342C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013432 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013436 1200                       		move.b	d0,d1
00013438 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001343C 0640 0010                  		addi.w	#$10,d0
00013440 E248                       		lsr.w	#1,d0
00013442 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013446 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001344A 5241                       		addq.w	#1,d1
0001344C E749                       		lsl.w	#3,d1
0001344E 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013452                            
00013452                            Invis_Solid:	; Routine 2
00013452 6100 C360                  		bsr.w	ChkObjectVisible
00013456 6600                       		bne.s	@chkdel
00013458 7200                       		moveq	#0,d1
0001345A 1228 0014                  		move.b	obActWid(a0),d1
0001345E 0641 000B                  		addi.w	#$B,d1
00013462 7400                       		moveq	#0,d2
00013464 1428 0016                  		move.b	invis_height(a0),d2
00013468 3602                       		move.w	d2,d3
0001346A 5243                       		addq.w	#1,d3
0001346C 3828 0008                  		move.w	obX(a0),d4
00013470 6100 E534                  		bsr.w	SolidObject71
00013474                            
00013474                            @chkdel:
00013490 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
00013494 6700                       		beq.s	@nodisplay	; if not, branch
00013496 4EF9 0000 F426             		jmp	(DisplaySprite).l	; if yes, display the object
0001349C                            
0001349C                            	@nodisplay:
0001349C 4E75                       		rts	
0001349E                            
0001349E                            	@delete:
0001349E 4EF9 0000 F466             		jmp	(DeleteObject).l
0001349E 4EF9 0000 F466             		jmp	(DeleteObject).l
000134A4                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000134A4                            ; --------------------------------------------------------------------------------
000134A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000134A4                            ; --------------------------------------------------------------------------------
000134A4                            
000134A4                            SME_t60cE:	
000134A4 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000134A8 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000134AA 04                         SME_t60cE_6:	dc.b 4	
000134AB 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000134B0 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000134B5 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000134BA F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000134BF 04                         SME_t60cE_1B:	dc.b 4	
000134C0 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000134C5 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000134CA 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000134CF 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000134D4 04                         SME_t60cE_30:	dc.b 4	
000134D5 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000134DA E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000134DF 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
000134E4 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
000134EA 00                         		even
000134EA 00                         		even
000134EA                            
000134EA                            		include	"_incObj\5D Fan.asm"
000134EA                            ; ---------------------------------------------------------------------------
000134EA                            ; Object 5D - fans (SLZ)
000134EA                            ; ---------------------------------------------------------------------------
000134EA                            
000134EA                            Fan:
000134EA 7000                       		moveq	#0,d0
000134EC 1028 0024                  		move.b	obRoutine(a0),d0
000134F0 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
000134F4 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
000134F8                            ; ===========================================================================
000134F8 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
000134FA 0000                       		dc.w Fan_Delay-Fan_Index
000134FC                            
000134FC =00000030                  fan_time:	equ $30		; time between switching on/off
000134FC =00000032                  fan_switch:	equ $32		; on/off switch
000134FC                            ; ===========================================================================
000134FC                            
000134FC                            Fan_Main:	; Routine 0
000134FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00013500 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013508 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001350E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013514 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001351A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013520                            
00013520                            Fan_Delay:	; Routine 2
00013520 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013526 6600                       		bne.s	@blow		; if yes, branch
00013528 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
0001352C 6A00                       		bpl.s	@blow		; if time remains, branch
0001352E 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013534 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
0001353A 6700                       		beq.s	@blow		; if fan is off, branch
0001353C 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013542                            
00013542                            @blow:
00013542 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013546 6600 0000                  		bne.w	@chkdel		; if not, branch
0001354A 43F8 D000                  		lea	(v_player).w,a1
0001354E 3029 0008                  		move.w	obX(a1),d0
00013552 9068 0008                  		sub.w	obX(a0),d0
00013556 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001355C 6600                       		bne.s	@chksonic	; if yes, branch
0001355E 4440                       		neg.w	d0
00013560                            
00013560                            @chksonic:
00013560 0640 0050                  		addi.w	#$50,d0
00013564 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013568 6400                       		bcc.s	@animate	; if yes, branch
0001356A 3229 000C                  		move.w	obY(a1),d1
0001356E 0641 0060                  		addi.w	#$60,d1
00013572 9268 000C                  		sub.w	obY(a0),d1
00013576 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013578 0C41 0070                  		cmpi.w	#$70,d1
0001357C 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001357E 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013582 6400                       		bcc.s	@faraway	; if yes, branch
00013584 4640                       		not.w	d0
00013586 D040                       		add.w	d0,d0
00013588                            
00013588                            	@faraway:
00013588 0640 0060                  		addi.w	#$60,d0
0001358C 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013592 6600                       		bne.s	@right		; if yes, branch
00013594 4440                       		neg.w	d0
00013596                            
00013596                            	@right:
00013596 4400                       		neg.b	d0
00013598 E840                       		asr.w	#4,d0
0001359A 0828 0000 0028             		btst	#0,obSubtype(a0)
000135A0 6700                       		beq.s	@movesonic
000135A2 4440                       		neg.w	d0
000135A4                            
000135A4                            	@movesonic:
000135A4 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000135A8                            
000135A8                            @animate:
000135A8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000135AC 6A00                       		bpl.s	@chkdel
000135AE 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000135B4 5228 001B                  		addq.b	#1,obAniFrame(a0)
000135B8 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000135BE 6500                       		bcs.s	@noreset
000135C0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000135C6                            
000135C6                            	@noreset:
000135C6 7000                       		moveq	#0,d0
000135C8 0828 0000 0028             		btst	#0,obSubtype(a0)
000135CE 6700                       		beq.s	@noflip
000135D0 7002                       		moveq	#2,d0
000135D2                            
000135D2                            	@noflip:
000135D2 D028 001B                  		add.b	obAniFrame(a0),d0
000135D6 1140 001A                  		move.b	d0,obFrame(a0)
000135DA                            
000135DA                            @chkdel:
000135DA 6100 BE4A                  		bsr.w	DisplaySprite
000135FC 4E75                       		rts	
000135FC 4E75                       		rts	
000135FE                            Map_Fan:	include	"_maps\Fan.asm"
000135FE                            ; ---------------------------------------------------------------------------
000135FE                            ; Sprite mappings - fans (SLZ)
000135FE                            ; ---------------------------------------------------------------------------
000135FE                            Map_Fan_internal:
000135FE 0000                       		dc.w @fan1-Map_Fan_internal
00013600 0000                       		dc.w @fan2-Map_Fan_internal
00013602 0000                       		dc.w @fan3-Map_Fan_internal
00013604 0000                       		dc.w @fan2-Map_Fan_internal
00013606 0000                       		dc.w @fan1-Map_Fan_internal
00013608 02                         @fan1:		dc.b 2
00013609 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001360E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013613 02                         @fan2:		dc.b 2
00013614 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013619 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001361E 02                         @fan3:		dc.b 2
0001361F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013624 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001362A 00                         		even
0001362A 00                         		even
0001362A                            		include	"_incObj\5E Seesaw.asm"
0001362A                            ; ---------------------------------------------------------------------------
0001362A                            ; Object 5E - seesaws (SLZ)
0001362A                            ; ---------------------------------------------------------------------------
0001362A                            
0001362A                            Seesaw:
0001362A 7000                       		moveq	#0,d0
0001362C 1028 0024                  		move.b	obRoutine(a0),d0
00013630 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013634 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013638 3028 0000                  		move.w	see_origX(a0),d0
0001363C 0240 FF80                  		andi.w	#$FF80,d0
00013640 3238 F700                  		move.w	(v_screenposx).w,d1
00013644 0441 0080                  		subi.w	#$80,d1
00013648 0241 FF80                  		andi.w	#$FF80,d1
0001364C 9041                       		sub.w	d1,d0
0001364E 6B00 BE16                  		bmi.w	DeleteObject
00013652 0C40 0280                  		cmpi.w	#$280,d0
00013656 6200 BE0E                  		bhi.w	DeleteObject
0001365A 6000 BDCA                  		bra.w	DisplaySprite
0001365E                            ; ===========================================================================
0001365E 0000                       See_Index:	dc.w See_Main-See_Index
00013660 0000                       		dc.w See_Slope-See_Index
00013662 0000                       		dc.w See_Slope2-See_Index
00013664 0000                       		dc.w See_Spikeball-See_Index
00013666 0000                       		dc.w See_MoveSpike-See_Index
00013668 0000                       		dc.w See_SpikeFall-See_Index
0001366A                            
0001366A =00000030                  see_origX:	equ $30		; original x-axis position
0001366A =00000034                  see_origY:	equ $34		; original y-axis position
0001366A =00000038                  see_speed:	equ $38		; speed of collision
0001366A =0000003A                  see_frame:	equ $3A		; 
0001366A =0000003C                  see_parent:	equ $3C		; RAM address of parent object
0001366A                            ; ===========================================================================
0001366A                            
0001366A                            See_Main:	; Routine 0
0001366A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001366E 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013676 317C 0374 0002             		move.w	#$374,obGfx(a0)
0001367C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013682 117C 0004 0018             		move.b	#4,obPriority(a0)
00013688 117C 0030 0014             		move.b	#$30,obActWid(a0)
0001368E 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013694 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013698 6600                       		bne.s	@noball		; if not, branch
0001369A                            
0001369A 6100 C33A                  		bsr.w	FindNextFreeObj
0001369E 6600                       		bne.s	@noball
000136A0 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
000136A4 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
000136A8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000136AE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000136B4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000136BA 2348 003C                  		move.l	a0,see_parent(a1)
000136BE                            
000136BE                            	@noball:
000136BE 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000136C4 6700                       		beq.s	@noflip		; if not, branch
000136C6 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000136CC                            
000136CC                            	@noflip:
000136CC 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
000136D2                            
000136D2                            See_Slope:	; Routine 2
000136D2 1228 003A                  		move.b	see_frame(a0),d1
000136D6 6100 0000                  		bsr.w	See_ChgFrame
000136DA 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000136E0 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
000136E6 6700                       		beq.s	@notflat	; if not, branch
000136E8 45F9 0000 0000             		lea	(See_DataFlat).l,a2
000136EE                            
000136EE                            	@notflat:
000136EE 43F8 D000                  		lea	(v_player).w,a1
000136F2 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
000136F8 323C 0030                  		move.w	#$30,d1
000136FC 4EB9 0000 8BB8             		jsr	(SlopeObject).l
00013702 4E75                       		rts	
00013704                            ; ===========================================================================
00013704                            
00013704                            See_Slope2:	; Routine 4
00013704 6100 0000                  		bsr.w	See_ChkSide
00013708 45F9 0000 0000             		lea	(See_DataSlope).l,a2
0001370E 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013714 6700                       		beq.s	@notflat	; if not, branch
00013716 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001371C                            
0001371C                            	@notflat:
0001371C 323C 0030                  		move.w	#$30,d1
00013720 4EB9 0000 8C58             		jsr	(ExitPlatform).l
00013726 323C 0030                  		move.w	#$30,d1
0001372A 3428 0008                  		move.w	obX(a0),d2
0001372E 4EB9 0000 9BF2             		jsr	(SlopeObject2).l
00013734 4E75                       		rts	
00013736                            ; ===========================================================================
00013736                            
00013736                            See_ChkSide:
00013736 7202                       		moveq	#2,d1
00013738 43F8 D000                  		lea	(v_player).w,a1
0001373C 3028 0008                  		move.w	obX(a0),d0
00013740 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013744 6400                       		bcc.s	@leftside	; if yes, branch
00013746 4440                       		neg.w	d0
00013748 7200                       		moveq	#0,d1
0001374A                            
0001374A                            	@leftside:
0001374A 0C40 0008                  		cmpi.w	#8,d0
0001374E 6400                       		bcc.s	See_ChgFrame
00013750 7201                       		moveq	#1,d1
00013752                            
00013752                            See_ChgFrame:
00013752 1028 001A                  		move.b	obFrame(a0),d0
00013756 B001                       		cmp.b	d1,d0		; does frame need to change?
00013758 6700                       		beq.s	@noflip		; if not, branch
0001375A 6400                       		bcc.s	@loc_11772
0001375C 5400                       		addq.b	#2,d0
0001375E                            
0001375E                            	@loc_11772:
0001375E 5300                       		subq.b	#1,d0
00013760 1140 001A                  		move.b	d0,obFrame(a0)
00013764 1141 003A                  		move.b	d1,see_frame(a0)
00013768 08A8 0000 0001             		bclr	#0,obRender(a0)
0001376E 0828 0001 001A             		btst	#1,obFrame(a0)
00013774 6700                       		beq.s	@noflip
00013776 08E8 0000 0001             		bset	#0,obRender(a0)
0001377C                            
0001377C                            	@noflip:
0001377C 4E75                       		rts	
0001377E                            ; ===========================================================================
0001377E                            
0001377E                            See_Spikeball:	; Routine 6
0001377E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013782 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
0001378A 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013790 0028 0004 0001             		ori.b	#4,obRender(a0)
00013796 117C 0004 0018             		move.b	#4,obPriority(a0)
0001379C 117C 008B 0020             		move.b	#$8B,obColType(a0)
000137A2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000137A8 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000137AE 0668 0028 0008             		addi.w	#$28,obX(a0)
000137B4 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
000137BA 117C 0001 001A             		move.b	#1,obFrame(a0)
000137C0 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000137C6 6700                       		beq.s	See_MoveSpike	; if not, branch
000137C8 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
000137CE 117C 0002 003A             		move.b	#2,see_frame(a0)
000137D4                            
000137D4                            See_MoveSpike:	; Routine 8
000137D4 2268 003C                  		movea.l	see_parent(a0),a1
000137D8 7000                       		moveq	#0,d0
000137DA 1028 003A                  		move.b	see_frame(a0),d0
000137DE 9029 003A                  		sub.b	see_frame(a1),d0
000137E2 6700                       		beq.s	loc_1183E
000137E4 6400                       		bcc.s	loc_117FC
000137E6 4400                       		neg.b	d0
000137E8                            
000137E8                            loc_117FC:
000137E8 323C F7E8                  		move.w	#-$818,d1
000137EC 343C FEEC                  		move.w	#-$114,d2
000137F0 0C00 0001                  		cmpi.b	#1,d0
000137F4 6700                       		beq.s	loc_11822
000137F6 323C F510                  		move.w	#-$AF0,d1
000137FA 343C FF34                  		move.w	#-$CC,d2
000137FE 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013804 6D00                       		blt.s	loc_11822
00013806 323C F200                  		move.w	#-$E00,d1
0001380A 343C FF60                  		move.w	#-$A0,d2
0001380E                            
0001380E                            loc_11822:
0001380E 3141 0012                  		move.w	d1,obVelY(a0)
00013812 3142 0010                  		move.w	d2,obVelX(a0)
00013816 3028 0008                  		move.w	obX(a0),d0
0001381A 9068 0030                  		sub.w	see_origX(a0),d0
0001381E 6400                       		bcc.s	loc_11838
00013820 4468 0010                  		neg.w	obVelX(a0)
00013824                            
00013824                            loc_11838:
00013824 5428 0024                  		addq.b	#2,obRoutine(a0)
00013828 6000                       		bra.s	See_SpikeFall
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            loc_1183E:
0001382A 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013830 7000                       		moveq	#0,d0
00013832 1029 001A                  		move.b	obFrame(a1),d0
00013836 343C 0028                  		move.w	#$28,d2
0001383A 3228 0008                  		move.w	obX(a0),d1
0001383E 9268 0030                  		sub.w	see_origX(a0),d1
00013842 6400                       		bcc.s	loc_1185C
00013844 4442                       		neg.w	d2
00013846 5440                       		addq.w	#2,d0
00013848                            
00013848                            loc_1185C:
00013848 D040                       		add.w	d0,d0
0001384A 3228 0034                  		move.w	see_origY(a0),d1
0001384E D272 0000                  		add.w	(a2,d0.w),d1
00013852 3141 000C                  		move.w	d1,obY(a0)
00013856 D468 0030                  		add.w	see_origX(a0),d2
0001385A 3142 0008                  		move.w	d2,obX(a0)
0001385E 4268 000E                  		clr.w	obY+2(a0)
00013862 4268 000A                  		clr.w	obX+2(a0)
00013866 4E75                       		rts	
00013868                            ; ===========================================================================
00013868                            
00013868                            See_SpikeFall:	; Routine $A
00013868 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
0001386C 6A00                       		bpl.s	loc_1189A	; if yes, branch
0001386E 6100 BB6A                  		bsr.w	ObjectFall
00013872 3028 0034                  		move.w	see_origY(a0),d0
00013876 0440 002F                  		subi.w	#$2F,d0
0001387A B068 000C                  		cmp.w	obY(a0),d0
0001387E 6E00                       		bgt.s	locret_11898
00013880 6100 BB58                  		bsr.w	ObjectFall
00013884                            
00013884                            locret_11898:
00013884 4E75                       		rts	
00013886                            ; ===========================================================================
00013886                            
00013886                            loc_1189A:
00013886 6100 BB52                  		bsr.w	ObjectFall
0001388A 2268 003C                  		movea.l	see_parent(a0),a1
0001388E 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013894 7000                       		moveq	#0,d0
00013896 1029 001A                  		move.b	obFrame(a1),d0
0001389A 3228 0008                  		move.w	obX(a0),d1
0001389E 9268 0030                  		sub.w	see_origX(a0),d1
000138A2 6400                       		bcc.s	loc_118BA
000138A4 5440                       		addq.w	#2,d0
000138A6                            
000138A6                            loc_118BA:
000138A6 D040                       		add.w	d0,d0
000138A8 3228 0034                  		move.w	see_origY(a0),d1
000138AC D272 0000                  		add.w	(a2,d0.w),d1
000138B0 B268 000C                  		cmp.w	obY(a0),d1
000138B4 6E00                       		bgt.s	locret_11938
000138B6 2268 003C                  		movea.l	see_parent(a0),a1
000138BA 7202                       		moveq	#2,d1
000138BC 4A68 0010                  		tst.w	obVelX(a0)
000138C0 6B00                       		bmi.s	See_Spring
000138C2 7200                       		moveq	#0,d1
000138C4                            
000138C4                            See_Spring:
000138C4 1341 003A                  		move.b	d1,$3A(a1)
000138C8 1141 003A                  		move.b	d1,see_frame(a0)
000138CC B229 001A                  		cmp.b	obFrame(a1),d1
000138D0 6700                       		beq.s	loc_1192C
000138D2 08A9 0003 0022             		bclr	#3,obStatus(a1)
000138D8 6700                       		beq.s	loc_1192C
000138DA 4229 0025                  		clr.b	ob2ndRout(a1)
000138DE 137C 0002 0024             		move.b	#2,obRoutine(a1)
000138E4 45F8 D000                  		lea	(v_player).w,a2
000138E8 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
000138EE 446A 0012                  		neg.w	obVelY(a2)
000138F2 08EA 0001 0022             		bset	#1,obStatus(a2)
000138F8 08AA 0003 0022             		bclr	#3,obStatus(a2)
000138FE 422A 003C                  		clr.b	$3C(a2)
00013902 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013908 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013918                            
00013918                            loc_1192C:
00013918 4268 0010                  		clr.w	obVelX(a0)
0001391C 4268 0012                  		clr.w	obVelY(a0)
00013920 5528 0024                  		subq.b	#2,obRoutine(a0)
00013924                            
00013924                            locret_11938:
00013924 4E75                       		rts	
00013926                            ; ===========================================================================
00013926 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013930                            
00013930                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013960                            		even
00013960                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013990                            		even
00013990                            		even
00013990                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013990                            ; ---------------------------------------------------------------------------
00013990                            ; Sprite mappings - seesaws (SLZ)
00013990                            ; ---------------------------------------------------------------------------
00013990                            Map_Seesaw_internal:
00013990 0000                       		dc.w @sloping-Map_Seesaw_internal
00013992 0000                       		dc.w @flat-Map_Seesaw_internal
00013994 0000                       		dc.w @sloping-Map_Seesaw_internal
00013996 0000                       		dc.w @flat-Map_Seesaw_internal
00013998 07                         @sloping:	dc.b 7
00013999 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
0001399E DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000139A3 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000139A8 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000139AD FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000139B2 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000139B7 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000139BC 04                         @flat:		dc.b 4
000139BD E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000139C2 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000139C7 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000139CC E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000139D2 00                         		even
000139D2 00                         		even
000139D2                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
000139D2                            ; ---------------------------------------------------------------------------
000139D2                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000139D2                            ; ---------------------------------------------------------------------------
000139D2                            Map_SSawBall_internal:
000139D2 0000                       		dc.w @red-Map_SSawBall_internal
000139D4 0000                       		dc.w @silver-Map_SSawBall_internal
000139D6 01                         @red:		dc.b 1
000139D7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000139DC 01                         @silver:	dc.b 1
000139DD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000139E2                            		even
000139E2                            		even
000139E2                            		include	"_incObj\5F Bomb Enemy.asm"
000139E2                            ; ---------------------------------------------------------------------------
000139E2                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000139E2                            ; ---------------------------------------------------------------------------
000139E2                            
000139E2                            Bomb:
000139E2 7000                       		moveq	#0,d0
000139E4 1028 0024                  		move.b	obRoutine(a0),d0
000139E8 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
000139EC 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
000139F0                            ; ===========================================================================
000139F0 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
000139F2 0000                       		dc.w Bom_Action-Bom_Index
000139F4 0000                       		dc.w Bom_Display-Bom_Index
000139F6 0000                       		dc.w Bom_End-Bom_Index
000139F8                            
000139F8 =00000030                  bom_time:	equ $30		; time of fuse
000139F8 =00000034                  bom_origY:	equ $34		; original y-axis position
000139F8 =0000003C                  bom_parent:	equ $3C		; address of parent object
000139F8                            ; ===========================================================================
000139F8                            
000139F8                            Bom_Main:	; Routine 0
000139F8 5428 0024                  		addq.b	#2,obRoutine(a0)
000139FC 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013A04 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013A0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A10 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013A16 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013A1C 1028 0028                  		move.b	obSubtype(a0),d0
00013A20 6700                       		beq.s	loc_11A3C
00013A22 1140 0024                  		move.b	d0,obRoutine(a0)
00013A26 4E75                       		rts	
00013A28                            ; ===========================================================================
00013A28                            
00013A28                            loc_11A3C:
00013A28 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013A2E 0868 0000 0022             		bchg	#0,obStatus(a0)
00013A34                            
00013A34                            Bom_Action:	; Routine 2
00013A34 7000                       		moveq	#0,d0
00013A36 1028 0025                  		move.b	ob2ndRout(a0),d0
00013A3A 323B 0000                  		move.w	@index(pc,d0.w),d1
00013A3E 4EBB 1000                  		jsr	@index(pc,d1.w)
00013A42 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013A48 6100 8A96                  		bsr.w	AnimateSprite
00013A4C 6000 DA78                  		bra.w	RememberState
00013A50                            ; ===========================================================================
00013A50 0000                       @index:		dc.w @walk-@index
00013A52 0000                       		dc.w @wait-@index
00013A54 0000                       		dc.w @explode-@index
00013A56                            ; ===========================================================================
00013A56                            
00013A56                            @walk:
00013A56 6100 0000                  		bsr.w	@chksonic
00013A5A 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013A5E 6A00                       		bpl.s	@noflip		; if time remains, branch
00013A60 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013A64 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013A6A 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013A70 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013A76 0868 0000 0022             		bchg	#0,obStatus(a0)
00013A7C 6700                       		beq.s	@noflip
00013A7E 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013A82                            
00013A82                            	@noflip:
00013A82 4E75                       		rts	
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            @wait:
00013A84 6100 0000                  		bsr.w	@chksonic
00013A88 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013A8C 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013A8E 6100 B982                  		bsr.w	SpeedToPos
00013A92 4E75                       		rts	
00013A94                            ; ===========================================================================
00013A94                            
00013A94                            	@stopwalking:
00013A94 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013A98 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013A9E 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013AA2 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013AA8 4E75                       		rts	
00013AAA                            ; ===========================================================================
00013AAA                            
00013AAA                            @explode:
00013AAA 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013AAE 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013AB0 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013AB4 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013ABA                            
00013ABA                            	@noexplode:
00013ABA 4E75                       		rts	
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            @chksonic:
00013ABC 3038 D008                  		move.w	(v_player+obX).w,d0
00013AC0 9068 0008                  		sub.w	obX(a0),d0
00013AC4 6400                       		bcc.s	@isleft
00013AC6 4440                       		neg.w	d0
00013AC8                            
00013AC8                            	@isleft:
00013AC8 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013ACC 6400                       		bcc.s	@outofrange	; if not, branch
00013ACE 3038 D00C                  		move.w	(v_player+obY).w,d0
00013AD2 9068 000C                  		sub.w	obY(a0),d0
00013AD6 6400                       		bcc.s	@isabove
00013AD8 4440                       		neg.w	d0
00013ADA                            
00013ADA                            	@isabove:
00013ADA 0C40 0060                  		cmpi.w	#$60,d0
00013ADE 6400                       		bcc.s	@outofrange
00013AE0 4A78 FE08                  		tst.w	(v_debuguse).w
00013AE4 6600                       		bne.s	@outofrange
00013AE6                            
00013AE6 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013AEC 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013AF2 4268 0010                  		clr.w	obVelX(a0)
00013AF6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013AFC 6100 BED8                  		bsr.w	FindNextFreeObj
00013B00 6600                       		bne.s	@outofrange
00013B02 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013B06 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013B0C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013B12 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013B18 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013B1E 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013B24 137C 0003 001C             		move.b	#3,obAnim(a1)
00013B2A 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013B30 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013B36 6700                       		beq.s	@normal		; if not, branch
00013B38 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013B3C                            
00013B3C                            	@normal:
00013B3C 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013B42 2348 003C                  		move.l	a0,bom_parent(a1)
00013B46                            
00013B46                            @outofrange:
00013B46 4E75                       		rts	
00013B48                            ; ===========================================================================
00013B48                            
00013B48                            Bom_Display:	; Routine 4
00013B48 6100                       		bsr.s	loc_11B70
00013B4A 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013B50 6100 898E                  		bsr.w	AnimateSprite
00013B54 6000 D970                  		bra.w	RememberState
00013B58                            ; ===========================================================================
00013B58                            
00013B58                            loc_11B70:
00013B58 5368 0030                  		subq.w	#1,bom_time(a0)
00013B5C 6B00                       		bmi.s	loc_11B7C
00013B5E 6100 B8B2                  		bsr.w	SpeedToPos
00013B62 4E75                       		rts	
00013B64                            ; ===========================================================================
00013B64                            
00013B64                            loc_11B7C:
00013B64 4268 0030                  		clr.w	bom_time(a0)
00013B68 4228 0024                  		clr.b	obRoutine(a0)
00013B6C 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013B72 7203                       		moveq	#3,d1
00013B74 2248                       		movea.l	a0,a1
00013B76 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013B7C 6000                       		bra.s	@makeshrapnel
00013B7E                            ; ===========================================================================
00013B7E                            
00013B7E                            	@loop:
00013B7E 6100 BE56                  		bsr.w	FindNextFreeObj
00013B82 6600                       		bne.s	@fail
00013B84                            
00013B84                            @makeshrapnel:
00013B84 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013B88 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013B8E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013B94 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013B9A 137C 0004 001C             		move.b	#4,obAnim(a1)
00013BA0 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013BA4 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013BA8 137C 0098 0020             		move.b	#$98,obColType(a1)
00013BAE 08E9 0007 0001             		bset	#7,obRender(a1)
00013BB4                            
00013BB4                            	@fail:
00013BB4 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013BB8                            
00013BB8 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013BBE                            
00013BBE                            Bom_End:	; Routine 6
00013BBE 6100 B852                  		bsr.w	SpeedToPos
00013BC2 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013BC8 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BCE 6100 8910                  		bsr.w	AnimateSprite
00013BD2 4A28 0001                  		tst.b	obRender(a0)
00013BD6 6A00 B88E                  		bpl.w	DeleteObject
00013BDA 6000 B84A                  		bra.w	DisplaySprite
00013BDE                            ; ===========================================================================
00013BDE FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013BDE FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013BEE                            		include	"_anim\Bomb Enemy.asm"
00013BEE                            ; ---------------------------------------------------------------------------
00013BEE                            ; Animation script - Bomb enemy
00013BEE                            ; ---------------------------------------------------------------------------
00013BEE 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013BF0 0000                       		dc.w @walk-Ani_Bomb
00013BF2 0000                       		dc.w @activated-Ani_Bomb
00013BF4 0000                       		dc.w @fuse-Ani_Bomb
00013BF6 0000                       		dc.w @shrapnel-Ani_Bomb
00013BF8 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013BFC 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013C02 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013C06 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013C0A 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013C0E                            		even
00013C0E                            		even
00013C0E                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013C0E                            ; ---------------------------------------------------------------------------
00013C0E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013C0E                            ; ---------------------------------------------------------------------------
00013C0E                            Map_Bomb_internal:
00013C0E 0000                       		dc.w @stand1-Map_Bomb_internal
00013C10 0000                       		dc.w @stand2-Map_Bomb_internal
00013C12 0000                       		dc.w @walk1-Map_Bomb_internal
00013C14 0000                       		dc.w @walk2-Map_Bomb_internal
00013C16 0000                       		dc.w @walk3-Map_Bomb_internal
00013C18 0000                       		dc.w @walk4-Map_Bomb_internal
00013C1A 0000                       		dc.w @activate1-Map_Bomb_internal
00013C1C 0000                       		dc.w @activate2-Map_Bomb_internal
00013C1E 0000                       		dc.w @fuse1-Map_Bomb_internal
00013C20 0000                       		dc.w @fuse2-Map_Bomb_internal
00013C22 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013C24 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013C26 03                         @stand1:	dc.b 3
00013C27 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013C2C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C31 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C36 03                         @stand2:	dc.b 3
00013C37 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C3C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C41 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C46 03                         @walk1:		dc.b 3
00013C47 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013C4C 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013C51 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013C56 03                         @walk2:		dc.b 3
00013C57 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C5C 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013C61 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C66 03                         @walk3:		dc.b 3
00013C67 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013C6C 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013C71 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013C76 03                         @walk4:		dc.b 3
00013C77 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C7C 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013C81 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C86 02                         @activate1:	dc.b 2
00013C87 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013C8C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C91 02                         @activate2:	dc.b 2
00013C92 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C97 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C9C 01                         @fuse1:		dc.b 1
00013C9D E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013CA2 01                         @fuse2:		dc.b 1
00013CA3 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013CA8 01                         @shrapnel1:	dc.b 1
00013CA9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013CAE 01                         @shrapnel2:	dc.b 1
00013CAF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013CB4                            		even
00013CB4                            		even
00013CB4                            
00013CB4                            		include	"_incObj\60 Orbinaut.asm"
00013CB4                            ; ---------------------------------------------------------------------------
00013CB4                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013CB4                            ; ---------------------------------------------------------------------------
00013CB4                            
00013CB4                            Orbinaut:
00013CB4 7000                       		moveq	#0,d0
00013CB6 1028 0024                  		move.b	obRoutine(a0),d0
00013CBA 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013CBE 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013CC2                            ; ===========================================================================
00013CC2 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013CC4 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013CC6 0000                       		dc.w Orb_Display-Orb_Index
00013CC8 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013CCA 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013CCC                            
00013CCC =0000003C                  orb_parent:	equ $3C		; address of parent object
00013CCC                            ; ===========================================================================
00013CCC                            
00013CCC                            Orb_Main:	; Routine 0
00013CCC 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013CD4 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013CDA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013CE0 6700                       		beq.s	@isscrap
00013CE2 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013CE8                            
00013CE8                            	@isscrap:
00013CE8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013CEE 6600                       		bne.s	@notlabyrinth
00013CF0 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013CF6                            
00013CF6                            	@notlabyrinth:
00013CF6 0028 0004 0001             		ori.b	#4,obRender(a0)
00013CFC 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013D02 117C 000B 0020             		move.b	#$B,obColType(a0)
00013D08 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013D0E 7400                       		moveq	#0,d2
00013D10 45E8 0037                  		lea	$37(a0),a2
00013D14 264A                       		movea.l	a2,a3
00013D16 524A                       		addq.w	#1,a2
00013D18 7203                       		moveq	#3,d1
00013D1A                            
00013D1A                            @makesatellites:
00013D1A 6100 BCBA                  		bsr.w	FindNextFreeObj
00013D1E 6600                       		bne.s	@fail
00013D20 5213                       		addq.b	#1,(a3)
00013D22 3A09                       		move.w	a1,d5
00013D24 0445 D000                  		subi.w	#$D000,d5
00013D28 EC4D                       		lsr.w	#6,d5
00013D2A 0245 007F                  		andi.w	#$7F,d5
00013D2E 14C5                       		move.b	d5,(a2)+
00013D30 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013D32 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013D38 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013D3E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013D44 0029 0004 0001             		ori.b	#4,obRender(a1)
00013D4A 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013D50 137C 0008 0014             		move.b	#8,obActWid(a1)
00013D56 137C 0003 001A             		move.b	#3,obFrame(a1)
00013D5C 137C 0098 0020             		move.b	#$98,obColType(a1)
00013D62 1342 0026                  		move.b	d2,obAngle(a1)
00013D66 0602 0040                  		addi.b	#$40,d2
00013D6A 2348 003C                  		move.l	a0,orb_parent(a1)
00013D6E 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013D72                            
00013D72                            	@fail:
00013D72 7001                       		moveq	#1,d0
00013D74 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013D7A 6700                       		beq.s	@noflip		; if not, branch
00013D7C 4440                       		neg.w	d0
00013D7E                            
00013D7E                            	@noflip:
00013D7E 1140 0036                  		move.b	d0,$36(a0)
00013D82 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013D88 5428 0024                  		addq.b	#2,obRoutine(a0)
00013D8C 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013D92 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013D98 6700                       		beq.s	@noflip2	; if not, branch
00013D9A 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013D9E                            
00013D9E                            	@noflip2:
00013D9E 4E75                       		rts	
00013DA0                            ; ===========================================================================
00013DA0                            
00013DA0                            Orb_ChkSonic:	; Routine 2
00013DA0 3038 D008                  		move.w	(v_player+obX).w,d0
00013DA4 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013DA8 6400                       		bcc.s	@isright	; if yes, branch
00013DAA 4440                       		neg.w	d0
00013DAC                            
00013DAC                            	@isright:
00013DAC 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013DB0 6400                       		bcc.s	@animate	; if not, branch
00013DB2 3038 D00C                  		move.w	(v_player+obY).w,d0
00013DB6 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013DBA 6400                       		bcc.s	@isabove	; if yes, branch
00013DBC 4440                       		neg.w	d0
00013DBE                            
00013DBE                            	@isabove:
00013DBE 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013DC2 6400                       		bcc.s	@animate	; if not, branch
00013DC4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013DC8 6600                       		bne.s	@animate	; if yes, branch
00013DCA 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013DD0                            
00013DD0                            @animate:
00013DD0 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013DD6 6100 8708                  		bsr.w	AnimateSprite
00013DDA 6000 0000                  		bra.w	Orb_ChkDel
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            Orb_Display:	; Routine 4
00013DDE 6100 B632                  		bsr.w	SpeedToPos
00013DE2                            
00013DE2                            Orb_ChkDel:
00013E00 6000 B624                  		bra.w	DisplaySprite
00013E04                            
00013E04                            @chkgone:
00013E04 45F8 FC00                  		lea	(v_objstate).w,a2
00013E08 7000                       		moveq	#0,d0
00013E0A 1028 0023                  		move.b	obRespawnNo(a0),d0
00013E0E 6700                       		beq.s	loc_11E34
00013E10 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013E16                            
00013E16                            loc_11E34:
00013E16 45E8 0037                  		lea	$37(a0),a2
00013E1A 7400                       		moveq	#0,d2
00013E1C 141A                       		move.b	(a2)+,d2
00013E1E 5342                       		subq.w	#1,d2
00013E20 6500                       		bcs.s	Orb_Delete
00013E22                            
00013E22                            loc_11E40:
00013E22 7000                       		moveq	#0,d0
00013E24 101A                       		move.b	(a2)+,d0
00013E26 ED48                       		lsl.w	#6,d0
00013E28 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013E2E 2240                       		movea.l	d0,a1
00013E30 6100 B636                  		bsr.w	DeleteChild
00013E34 51CA FFEC                  		dbf	d2,loc_11E40
00013E38                            
00013E38                            Orb_Delete:
00013E38 6000 B62C                  		bra.w	DeleteObject
00013E3C                            ; ===========================================================================
00013E3C                            
00013E3C                            Orb_MoveOrb:	; Routine 6
00013E3C 2268 003C                  		movea.l	orb_parent(a0),a1
00013E40 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013E44 6600 B620                  		bne.w	DeleteObject	; if not, delete
00013E48 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013E4E 6600                       		bne.s	@circle		; if not, branch
00013E50 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013E56 6600                       		bne.s	@circle		; if not, branch
00013E58 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E5C 5329 0037                  		subq.b	#1,$37(a1)
00013E60 6600                       		bne.s	@fire
00013E62 5429 0024                  		addq.b	#2,obRoutine(a1)
00013E66                            
00013E66                            	@fire:
00013E66 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00013E6C 0829 0000 0022             		btst	#0,obStatus(a1)
00013E72 6700                       		beq.s	@noflip
00013E74 4468 0010                  		neg.w	obVelX(a0)
00013E78                            
00013E78                            	@noflip:
00013E78 6000 B5AC                  		bra.w	DisplaySprite
00013E7C                            ; ===========================================================================
00013E7C                            
00013E7C                            @circle:
00013E7C 1028 0026                  		move.b	obAngle(a0),d0
00013E80 4EB9 0000 3B42             		jsr	(CalcSine).l
00013E86 E841                       		asr.w	#4,d1
00013E88 D269 0008                  		add.w	obX(a1),d1
00013E8C 3141 0008                  		move.w	d1,obX(a0)
00013E90 E840                       		asr.w	#4,d0
00013E92 D069 000C                  		add.w	obY(a1),d0
00013E96 3140 000C                  		move.w	d0,obY(a0)
00013E9A 1029 0036                  		move.b	$36(a1),d0
00013E9E D128 0026                  		add.b	d0,obAngle(a0)
00013EA2 6000 B582                  		bra.w	DisplaySprite
00013EA6                            ; ===========================================================================
00013EA6                            
00013EA6                            Orb_ChkDel2:	; Routine 8
00013EA6 6100 B56A                  		bsr.w	SpeedToPos
00013EAA 4A28 0001                  		tst.b	obRender(a0)
00013EAE 6A00 B5B6                  		bpl.w	DeleteObject
00013EB2 6000 B572                  		bra.w	DisplaySprite
00013EB2 6000 B572                  		bra.w	DisplaySprite
00013EB6                            		include	"_anim\Orbinaut.asm"
00013EB6                            ; ---------------------------------------------------------------------------
00013EB6                            ; Animation script - Orbinaut enemy
00013EB6                            ; ---------------------------------------------------------------------------
00013EB6 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00013EB8 0000                       		dc.w @angers-Ani_Orb
00013EBA 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00013EBE 00                         		even
00013EBE 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00013EC4 00                         		even
00013EC4 00                         		even
00013EC4                            Map_Orb:	include	"_maps\Orbinaut.asm"
00013EC4                            ; ---------------------------------------------------------------------------
00013EC4                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013EC4                            ; ---------------------------------------------------------------------------
00013EC4                            Map_Orb_internal:
00013EC4 0000                       		dc.w @normal-Map_Orb_internal
00013EC6 0000                       		dc.w @medium-Map_Orb_internal
00013EC8 0000                       		dc.w @angry-Map_Orb_internal
00013ECA 0000                       		dc.w @spikeball-Map_Orb_internal
00013ECC 01                         @normal:	dc.b 1
00013ECD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013ED2 01                         @medium:	dc.b 1
00013ED3 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013ED8 01                         @angry:		dc.b 1
00013ED9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013EDE 01                         @spikeball:	dc.b 1
00013EDF F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013EE4                            		even
00013EE4                            		even
00013EE4                            
00013EE4                            		include	"_incObj\16 Harpoon.asm"
00013EE4                            ; ---------------------------------------------------------------------------
00013EE4                            ; Object 16 - harpoon (LZ)
00013EE4                            ; ---------------------------------------------------------------------------
00013EE4                            
00013EE4                            Harpoon:
00013EE4 7000                       		moveq	#0,d0
00013EE6 1028 0024                  		move.b	obRoutine(a0),d0
00013EEA 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00013EEE 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00013EF2                            ; ===========================================================================
00013EF2 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00013EF4 0000                       		dc.w Harp_Move-Harp_Index
00013EF6 0000                       		dc.w Harp_Wait-Harp_Index
00013EF8                            
00013EF8 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00013EF8                            ; ===========================================================================
00013EF8                            
00013EF8                            Harp_Main:	; Routine 0
00013EF8 5428 0024                  		addq.b	#2,obRoutine(a0)
00013EFC 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00013F04 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00013F0A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013F10 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013F16 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00013F1C 117C 0014 0014             		move.b	#$14,obActWid(a0)
00013F22 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00013F28                            
00013F28                            Harp_Move:	; Routine 2
00013F28 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00013F2E 6100 85B0                  		bsr.w	AnimateSprite
00013F32 7000                       		moveq	#0,d0
00013F34 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00013F38 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00013F3E 6000 D586                  		bra.w	RememberState
00013F42                            
00013F42                            	@types:
00013F42 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013F48                            		even
00013F48                            
00013F48                            Harp_Wait:	; Routine 4
00013F48 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00013F4C 6A00                       		bpl.s	@chkdel		; branch if time remains
00013F4E 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00013F54 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00013F58 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00013F5E                            
00013F5E                            	@chkdel:
00013F5E 6000 D566                  		bra.w	RememberState
00013F5E 6000 D566                  		bra.w	RememberState
00013F62                            		include	"_anim\Harpoon.asm"
00013F62                            ; ---------------------------------------------------------------------------
00013F62                            ; Animation script - harpoon (LZ)
00013F62                            ; ---------------------------------------------------------------------------
00013F62 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00013F64 0000                       		dc.w @h_retracting-Ani_Harp
00013F66 0000                       		dc.w @v_extending-Ani_Harp
00013F68 0000                       		dc.w @v_retracting-Ani_Harp
00013F6A 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00013F6E 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00013F72 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00013F76 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00013F7A                            		even
00013F7A                            		even
00013F7A                            Map_Harp:	include	"_maps\Harpoon.asm"
00013F7A                            ; --------------------------------------------------------------------------------
00013F7A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013F7A                            ; --------------------------------------------------------------------------------
00013F7A                            
00013F7A                            SME_JPFHb:	
00013F7A 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00013F7E 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
00013F82 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
00013F86 01                         SME_JPFHb_C:	dc.b 1	
00013F87 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00013F8C 01                         SME_JPFHb_12:	dc.b 1	
00013F8D FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
00013F92 02                         SME_JPFHb_18:	dc.b 2	
00013F93 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00013F98 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00013F9D 01                         SME_JPFHb_23:	dc.b 1	
00013F9E F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
00013FA3 01                         SME_JPFHb_29:	dc.b 1	
00013FA4 E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00013FA9 02                         SME_JPFHb_2F:	dc.b 2	
00013FAA D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00013FAF F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
00013FB4                            		even
00013FB4                            		even
00013FB4                            		include	"_incObj\61 LZ Blocks.asm"
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            ; Object 61 - blocks (LZ)
00013FB4                            ; ---------------------------------------------------------------------------
00013FB4                            
00013FB4                            LabyrinthBlock:
00013FB4 7000                       		moveq	#0,d0
00013FB6 1028 0024                  		move.b	obRoutine(a0),d0
00013FBA 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00013FBE 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00013FC2                            ; ===========================================================================
00013FC2 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00013FC4 0000                       		dc.w LBlk_Action-LBlk_Index
00013FC6                            
00013FC6 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00013FC8 200C                       		dc.b $20, $C
00013FCA 1010                       		dc.b $10, $10
00013FCC 1010                       		dc.b $10, $10
00013FCE                            
00013FCE =00000016                  lblk_height:	equ $16		; block height
00013FCE =00000034                  lblk_origX:	equ $34		; original x-axis position
00013FCE =00000030                  lblk_origY:	equ $30		; original y-axis position
00013FCE =00000036                  lblk_time:	equ $36		; time delay for block movement
00013FCE =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00013FCE                            ; ===========================================================================
00013FCE                            
00013FCE                            LBlk_Main:	; Routine 0
00013FCE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013FD2 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00013FDA 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00013FE0 117C 0004 0001             		move.b	#4,obRender(a0)
00013FE6 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013FEC 7000                       		moveq	#0,d0
00013FEE 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00013FF2 E648                       		lsr.w	#3,d0		; read only the 1st digit
00013FF4 0240 000E                  		andi.w	#$E,d0
00013FF8 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00013FFC 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014000 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014004 E248                       		lsr.w	#1,d0
00014006 1140 001A                  		move.b	d0,obFrame(a0)
0001400A 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014010 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014016 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001401A 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001401E 6700                       		beq.s	LBlk_Action	; branch if 0
00014020 0C00 0007                  		cmpi.b	#7,d0
00014024 6700                       		beq.s	LBlk_Action	; branch if 7
00014026 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
0001402C                            
0001402C                            LBlk_Action:	; Routine 2
0001402C 3F28 0008                  		move.w	obX(a0),-(sp)
00014030 7000                       		moveq	#0,d0
00014032 1028 0028                  		move.b	obSubtype(a0),d0
00014036 0240 000F                  		andi.w	#$F,d0
0001403A D040                       		add.w	d0,d0
0001403C 323B 0000                  		move.w	@index(pc,d0.w),d1
00014040 4EBB 1000                  		jsr	@index(pc,d1.w)
00014044 381F                       		move.w	(sp)+,d4
00014046 4A28 0001                  		tst.b	obRender(a0)
0001404A 6A00                       		bpl.s	@chkdel
0001404C 7200                       		moveq	#0,d1
0001404E 1228 0014                  		move.b	obActWid(a0),d1
00014052 0641 000B                  		addi.w	#$B,d1
00014056 7400                       		moveq	#0,d2
00014058 1428 0016                  		move.b	lblk_height(a0),d2
0001405C 3602                       		move.w	d2,d3
0001405E 5243                       		addq.w	#1,d3
00014060 6100 D8FC                  		bsr.w	SolidObject
00014064 1144 003F                  		move.b	d4,$3F(a0)
00014068 6100 0000                  		bsr.w	loc_12180
0001406C                            
0001406C                            @chkdel:
0001408A 6000 B39A                  		bra.w	DisplaySprite
0001408E                            ; ===========================================================================
0001408E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00014092 0000 0000                  		dc.w @type02-@index, @type03-@index
00014096 0000 0000                  		dc.w @type04-@index, @type05-@index
0001409A 0000 0000                  		dc.w @type06-@index, @type07-@index
0001409E                            ; ===========================================================================
0001409E                            
0001409E                            @type00:
0001409E 4E75                       		rts	
000140A0                            ; ===========================================================================
000140A0                            
000140A0                            @type01:
000140A0                            @type03:
000140A0 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000140A4 6600                       		bne.s	@wait01		; if yes, branch
000140A6 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000140AC 6700                       		beq.s	@donothing01	; if not, branch
000140AE 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000140B4                            
000140B4                            	@donothing01:
000140B4 4E75                       		rts	
000140B6                            ; ===========================================================================
000140B6                            
000140B6                            	@wait01:
000140B6 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000140BA 66F8                       		bne.s	@donothing01	; if time remains, branch
000140BC 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000140C0 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000140C4 4E75                       		rts	
000140C6                            ; ===========================================================================
000140C6                            
000140C6                            @type02:
000140C6                            @type06:
000140C6 6100 B34A                  		bsr.w	SpeedToPos
000140CA 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000140CE 6100 0000                  		bsr.w	ObjFloorDist
000140D2 4A41                       		tst.w	d1		; has block hit the floor?
000140D4 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000140D8 5241                       		addq.w	#1,d1
000140DA D368 000C                  		add.w	d1,obY(a0)
000140DE 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000140E2 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000140E6                            
000140E6                            	@nofloor02:
000140E6 4E75                       		rts	
000140E8                            ; ===========================================================================
000140E8                            
000140E8                            @type04:
000140E8 6100 B328                  		bsr.w	SpeedToPos
000140EC 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000140F0 6100 0000                  		bsr.w	ObjHitCeiling
000140F4 4A41                       		tst.w	d1		; has block hit the ceiling?
000140F6 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000140FA 9368 000C                  		sub.w	d1,obY(a0)
000140FE 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014102 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014106                            
00014106                            	@noceiling04:
00014106 4E75                       		rts	
00014108                            ; ===========================================================================
00014108                            
00014108                            @type05:
00014108 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001410E 6600                       		bne.s	@notouch05	; if not, branch
00014110 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014114 4228 0038                  		clr.b	lblk_untouched(a0)
00014118                            
00014118                            	@notouch05:
00014118 4E75                       		rts	
0001411A                            ; ===========================================================================
0001411A                            
0001411A                            @type07:
0001411A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001411E 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014122 6700                       		beq.s	@stop07		; if yes, branch
00014124 6400                       		bcc.s	@fall07		; branch if block is above water
00014126 0C40 FFFE                  		cmpi.w	#-2,d0
0001412A 6C00                       		bge.s	@loc_1214E
0001412C 70FE                       		moveq	#-2,d0
0001412E                            
0001412E                            	@loc_1214E:
0001412E D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014132 6100 0000                  		bsr.w	ObjHitCeiling
00014136 4A41                       		tst.w	d1		; has block hit the ceiling?
00014138 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
0001413C 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014140                            
00014140                            	@noceiling07:
00014140 4E75                       		rts	
00014142                            ; ===========================================================================
00014142                            
00014142                            @fall07:
00014142 0C40 0002                  		cmpi.w	#2,d0
00014146 6F00                       		ble.s	@loc_1216A
00014148 7002                       		moveq	#2,d0
0001414A                            
0001414A                            	@loc_1216A:
0001414A D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001414E 6100 0000                  		bsr.w	ObjFloorDist
00014152 4A41                       		tst.w	d1
00014154 6A00 0000                  		bpl.w	@stop07
00014158 5241                       		addq.w	#1,d1
0001415A D368 000C                  		add.w	d1,obY(a0)
0001415E                            
0001415E                            	@stop07:
0001415E 4E75                       		rts	
00014160                            ; ===========================================================================
00014160                            
00014160                            loc_12180:
00014160 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014164 6700                       		beq.s	locret_121C0	; if yes, branch
00014166 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
0001416C 6600                       		bne.s	loc_1219A	; if yes, branch
0001416E 4A28 003E                  		tst.b	$3E(a0)
00014172 6700                       		beq.s	locret_121C0
00014174 5928 003E                  		subq.b	#4,$3E(a0)
00014178 6000                       		bra.s	loc_121A6
0001417A                            ; ===========================================================================
0001417A                            
0001417A                            loc_1219A:
0001417A 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00014180 6700                       		beq.s	locret_121C0
00014182 5828 003E                  		addq.b	#4,$3E(a0)
00014186                            
00014186                            loc_121A6:
00014186 1028 003E                  		move.b	$3E(a0),d0
0001418A 4EB9 0000 3B42             		jsr	(CalcSine).l
00014190 323C 0400                  		move.w	#$400,d1
00014194 C1C1                       		muls.w	d1,d0
00014196 4840                       		swap	d0
00014198 D068 0030                  		add.w	lblk_origY(a0),d0
0001419C 3140 000C                  		move.w	d0,obY(a0)
000141A0                            
000141A0                            locret_121C0:
000141A0 4E75                       		rts	
000141A0 4E75                       		rts	
000141A2                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000141A2                            Map_6865:
000141A2 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000141A4 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000141A6 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000141A8 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000141AA 01                         Map_6865_8: 	dc.b $1
000141AB F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000141B0 02                         Map_6865_E: 	dc.b $2
000141B1 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000141B6 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000141BB 01                         Map_6865_19: 	dc.b $1
000141BC F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000141C1 01                         Map_6865_1F: 	dc.b $1
000141C2 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000141C8 00                         	even
000141C8 00                         	even
000141C8                            		include	"_incObj\62 Gargoyle.asm"
000141C8                            ; ---------------------------------------------------------------------------
000141C8                            ; Object 62 - gargoyle head (LZ)
000141C8                            ; ---------------------------------------------------------------------------
000141C8                            
000141C8                            Gargoyle:
000141C8 7000                       		moveq	#0,d0
000141CA 1028 0024                  		move.b	obRoutine(a0),d0
000141CE 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000141D2 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000141D6 6000 D2EE                  		bra.w	RememberState
000141DA                            ; ===========================================================================
000141DA 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000141DC 0000                       		dc.w Gar_MakeFire-Gar_Index
000141DE 0000                       		dc.w Gar_FireBall-Gar_Index
000141E0 0000                       		dc.w Gar_AniFire-Gar_Index
000141E2                            
000141E2 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000141EA                            ; ===========================================================================
000141EA                            
000141EA                            Gar_Main:	; Routine 0
000141EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000141EE 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000141F6 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000141FC 0028 0004 0001             		ori.b	#4,obRender(a0)
00014202 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014208 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001420E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014212 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014216 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001421C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014222 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014228                            
00014228                            Gar_MakeFire:	; Routine 2
00014228 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
0001422C 6600                       		bne.s	@nofire		; if time remains, branch
0001422E                            
0001422E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014234 6100 B57E                  		bsr.w	ChkObjectVisible
00014238 6600                       		bne.s	@nofire
0001423A 6100 B784                  		bsr.w	FindFreeObj
0001423E 6600                       		bne.s	@nofire
00014240 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014244 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014248 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001424E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014254 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0001425A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00014260                            
00014260                            	@nofire:
00014260 4E75                       		rts	
00014262                            ; ===========================================================================
00014262                            
00014262                            Gar_FireBall:	; Routine 4
00014262 5428 0024                  		addq.b	#2,obRoutine(a0)
00014266 117C 0008 0016             		move.b	#8,obHeight(a0)
0001426C 117C 0008 0017             		move.b	#8,obWidth(a0)
00014272 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001427A 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00014280 0028 0004 0001             		ori.b	#4,obRender(a0)
00014286 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001428C 117C 0098 0020             		move.b	#$98,obColType(a0)
00014292 117C 0008 0014             		move.b	#8,obActWid(a0)
00014298 117C 0002 001A             		move.b	#2,obFrame(a0)
0001429E 5068 000C                  		addq.w	#8,obY(a0)
000142A2 317C 0200 0010             		move.w	#$200,obVelX(a0)
000142A8 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000142AE 6600                       		bne.s	@noflip		; if not, branch
000142B0 4468 0010                  		neg.w	obVelX(a0)
000142B4                            
000142B4                            	@noflip:
000142BE                            
000142BE                            Gar_AniFire:	; Routine 6
000142BE 1038 FE05                  		move.b	(v_framebyte).w,d0
000142C2 0200 0007                  		andi.b	#7,d0
000142C6 6600                       		bne.s	@nochg
000142C8 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000142CE                            
000142CE                            	@nochg:
000142CE 6100 B142                  		bsr.w	SpeedToPos
000142D2 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000142D8 6600                       		bne.s	@isright	; if not, branch
000142DA 76F8                       		moveq	#-8,d3
000142DC 6100 0000                  		bsr.w	ObjHitWallLeft
000142E0 4A41                       		tst.w	d1
000142E2 6B00 B182                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000142E6 4E75                       		rts	
000142E8                            
000142E8                            	@isright:
000142E8 7608                       		moveq	#8,d3
000142EA 6100 0000                  		bsr.w	ObjHitWallRight
000142EE 4A41                       		tst.w	d1
000142F0 6B00 B174                  		bmi.w	DeleteObject
000142F4 4E75                       		rts	
000142F4 4E75                       		rts	
000142F6                            Map_Gar:	include	"_maps\Gargoyle.asm"
000142F6                            ; ---------------------------------------------------------------------------
000142F6                            ; Sprite mappings - gargoyle head (LZ)
000142F6                            ; ---------------------------------------------------------------------------
000142F6                            Map_Gar_internal:
000142F6 0000                       		dc.w @head-Map_Gar_internal
000142F8 0000                       		dc.w @head-Map_Gar_internal
000142FA 0000                       		dc.w @fireball1-Map_Gar_internal
000142FC 0000                       		dc.w @fireball2-Map_Gar_internal
000142FE 03                         @head:		dc.b 3
000142FF F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014304 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014309 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001430E 01                         @fireball1:	dc.b 1
0001430F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014314 01                         @fireball2:	dc.b 1
00014315 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001431A                            		even
0001431A                            		even
0001431A                            		include	"_incObj\63 LZ Conveyor.asm"
0001431A                            ; ---------------------------------------------------------------------------
0001431A                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001431A                            ; ---------------------------------------------------------------------------
0001431A                            
0001431A                            LabyrinthConvey:
0001431A 7000                       		moveq	#0,d0
0001431C 1028 0024                  		move.b	obRoutine(a0),d0
00014320 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014324 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014344                            
00014344                            LCon_Display:
00014344 6000 B0E0                  		bra.w	DisplaySprite
00014348                            ; ===========================================================================
00014348                            
00014348                            loc_1236A:
00014348 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001434E 6600                       		bne.s	loc_12378
00014350 0C40 FF80                  		cmpi.w	#-$80,d0
00014354 64EE                       		bcc.s	LCon_Display
00014356                            
00014356                            loc_12378:
00014356 1028 002F                  		move.b	$2F(a0),d0
0001435A 6A00 B10A                  		bpl.w	DeleteObject
0001435E 0240 007F                  		andi.w	#$7F,d0
00014362 45F8 F7C1                  		lea	(v_obj63).w,a2
00014366 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001436C 6000 B0F8                  		bra.w	DeleteObject
00014370                            ; ===========================================================================
00014370 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014372 0000                       		dc.w loc_124B2-LCon_Index
00014374 0000                       		dc.w loc_124C2-LCon_Index
00014376 0000                       		dc.w loc_124DE-LCon_Index
00014378                            ; ===========================================================================
00014378                            
00014378                            LCon_Main:	; Routine 0
00014378 1028 0028                  		move.b	obSubtype(a0),d0
0001437C 6B00 0000                  		bmi.w	loc_12460
00014380 5428 0024                  		addq.b	#2,obRoutine(a0)
00014384 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
0001438C 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00014392 0028 0004 0001             		ori.b	#4,obRender(a0)
00014398 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001439E 317C 0200 0018             		move.w	#$200,obPriority(a0)
000143A4 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000143AA 6600                       		bne.s	loc_123E2
000143AC 5828 0024                  		addq.b	#4,obRoutine(a0)
000143B0 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000143B6 317C 0080 0018             		move.w	#$80,obPriority(a0)
000143BC 6000 0000                  		bra.w	loc_124DE
000143C0                            ; ===========================================================================
000143C0                            
000143C0                            loc_123E2:
000143C0 117C 0004 001A             		move.b	#4,obFrame(a0)
000143C6 7000                       		moveq	#0,d0
000143C8 1028 0028                  		move.b	obSubtype(a0),d0
000143CC 3200                       		move.w	d0,d1
000143CE E648                       		lsr.w	#3,d0
000143D0 0240 001E                  		andi.w	#$1E,d0
000143D4 45FA 0000                  		lea	LCon_Data(pc),a2
000143D8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000143DC 315A 0038                  		move.w	(a2)+,$38(a0)
000143E0 315A 0030                  		move.w	(a2)+,$30(a0)
000143E4 214A 003C                  		move.l	a2,$3C(a0)
000143E8 0241 000F                  		andi.w	#$F,d1
000143EC E549                       		lsl.w	#2,d1
000143EE 1141 0038                  		move.b	d1,$38(a0)
000143F2 117C 0004 003A             		move.b	#4,$3A(a0)
000143F8 4A38 F7C0                  		tst.b	(f_conveyrev).w
000143FC 6700                       		beq.s	loc_1244C
000143FE 117C 0001 003B             		move.b	#1,$3B(a0)
00014404 4428 003A                  		neg.b	$3A(a0)
00014408 7200                       		moveq	#0,d1
0001440A 1228 0038                  		move.b	$38(a0),d1
0001440E D228 003A                  		add.b	$3A(a0),d1
00014412 B228 0039                  		cmp.b	$39(a0),d1
00014416 6500                       		bcs.s	loc_12448
00014418 1001                       		move.b	d1,d0
0001441A 7200                       		moveq	#0,d1
0001441C 4A00                       		tst.b	d0
0001441E 6A00                       		bpl.s	loc_12448
00014420 1228 0039                  		move.b	$39(a0),d1
00014424 5901                       		subq.b	#4,d1
00014426                            
00014426                            loc_12448:
00014426 1141 0038                  		move.b	d1,$38(a0)
0001442A                            
0001442A                            loc_1244C:
0001442A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014430 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014436 6100 0000                  		bsr.w	LCon_ChangeDir
0001443A 6000 0000                  		bra.w	loc_124B2
0001443E                            ; ===========================================================================
0001443E                            
0001443E                            loc_12460:
0001443E 1140 002F                  		move.b	d0,$2F(a0)
00014442 0240 007F                  		andi.w	#$7F,d0
00014446 45F8 F7C1                  		lea	(v_obj63).w,a2
0001444A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00014450 6600 B014                  		bne.w	DeleteObject
00014454 D040                       		add.w	d0,d0
00014456 0240 001E                  		andi.w	#$1E,d0
0001445A 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001445E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014464 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014468 321A                       		move.w	(a2)+,d1
0001446A 2248                       		movea.l	a0,a1
0001446C 6000                       		bra.s	LCon_MakePtfms
0001446E                            ; ===========================================================================
0001446E                            
0001446E                            LCon_Loop:
0001446E 6100 B550                  		bsr.w	FindFreeObj
00014472 6600                       		bne.s	loc_124AA
00014474                            
00014474                            LCon_MakePtfms:
00014474 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014478 335A 0008                  		move.w	(a2)+,obX(a1)
0001447C 335A 000C                  		move.w	(a2)+,obY(a1)
00014480 301A                       		move.w	(a2)+,d0
00014482 1340 0028                  		move.b	d0,obSubtype(a1)
00014486                            
00014486                            loc_124AA:
00014486 51C9 FFE6                  		dbf	d1,LCon_Loop
0001448A                            
0001448A 588F                       		addq.l	#4,sp
0001448C 4E75                       		rts	
0001448E                            ; ===========================================================================
0001448E                            
0001448E                            loc_124B2:	; Routine 2
0001448E 7200                       		moveq	#0,d1
00014490 1228 0014                  		move.b	obActWid(a0),d1
00014494 4EB9 0000 8AE4             		jsr	(PlatformObject).l
0001449A 6000 0000                  		bra.w	sub_12502
0001449E                            ; ===========================================================================
0001449E                            
0001449E                            loc_124C2:	; Routine 4
0001449E 7200                       		moveq	#0,d1
000144A0 1228 0014                  		move.b	obActWid(a0),d1
000144A4 4EB9 0000 8C58             		jsr	(ExitPlatform).l
000144AA 3F28 0008                  		move.w	obX(a0),-(sp)
000144AE 6100 0000                  		bsr.w	sub_12502
000144B2 341F                       		move.w	(sp)+,d2
000144B4 4EF9 0000 91C2             		jmp	(MvSonicOnPtfm2).l
000144BA                            ; ===========================================================================
000144BA                            
000144BA                            loc_124DE:	; Routine 6
000144BA 3038 FE04                  		move.w	(v_framecount).w,d0
000144BE 0240 0003                  		andi.w	#3,d0
000144C2 6600                       		bne.s	loc_124FC
000144C4 7201                       		moveq	#1,d1
000144C6 4A38 F7C0                  		tst.b	(f_conveyrev).w
000144CA 6700                       		beq.s	loc_124F2
000144CC 4401                       		neg.b	d1
000144CE                            
000144CE                            loc_124F2:
000144CE D328 001A                  		add.b	d1,obFrame(a0)
000144D2 0228 0003 001A             		andi.b	#3,obFrame(a0)
000144D8                            
000144D8                            loc_124FC:
000144D8 588F                       		addq.l	#4,sp
000144DA 6000 CFEA                  		bra.w	RememberState
000144DE                            
000144DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144DE                            
000144DE                            
000144DE                            sub_12502:
000144DE 4A38 F7EE                  		tst.b	(f_switch+$E).w
000144E2 6700                       		beq.s	loc_12520
000144E4 4A28 003B                  		tst.b	$3B(a0)
000144E8 6600                       		bne.s	loc_12520
000144EA 117C 0001 003B             		move.b	#1,$3B(a0)
000144F0 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
000144F6 4428 003A                  		neg.b	$3A(a0)
000144FA 6000                       		bra.s	loc_12534
000144FC                            ; ===========================================================================
000144FC                            
000144FC                            loc_12520:
000144FC 3028 0008                  		move.w	obX(a0),d0
00014500 B068 0034                  		cmp.w	$34(a0),d0
00014504 6600                       		bne.s	loc_1256A
00014506 3028 000C                  		move.w	obY(a0),d0
0001450A B068 0036                  		cmp.w	$36(a0),d0
0001450E 6600                       		bne.s	loc_1256A
00014510                            
00014510                            loc_12534:
00014510 7200                       		moveq	#0,d1
00014512 1228 0038                  		move.b	$38(a0),d1
00014516 D228 003A                  		add.b	$3A(a0),d1
0001451A B228 0039                  		cmp.b	$39(a0),d1
0001451E 6500                       		bcs.s	loc_12552
00014520 1001                       		move.b	d1,d0
00014522 7200                       		moveq	#0,d1
00014524 4A00                       		tst.b	d0
00014526 6A00                       		bpl.s	loc_12552
00014528 1228 0039                  		move.b	$39(a0),d1
0001452C 5901                       		subq.b	#4,d1
0001452E                            
0001452E                            loc_12552:
0001452E 1141 0038                  		move.b	d1,$38(a0)
00014532 2268 003C                  		movea.l	$3C(a0),a1
00014536 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001453C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014542 6100 0000                  		bsr.w	LCon_ChangeDir
00014546                            
00014546                            loc_1256A:
00014546 6100 AECA                  		bsr.w	SpeedToPos
0001454A 4E75                       		rts	
0001454C                            ; End of function sub_12502
0001454C                            
0001454C                            
0001454C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001454C                            
0001454C                            
0001454C                            LCon_ChangeDir:
0001454C 7000                       		moveq	#0,d0
0001454E 343C FF00                  		move.w	#-$100,d2
00014552 3028 0008                  		move.w	obX(a0),d0
00014556 9068 0034                  		sub.w	$34(a0),d0
0001455A 6400                       		bcc.s	loc_12584
0001455C 4440                       		neg.w	d0
0001455E 4442                       		neg.w	d2
00014560                            
00014560                            loc_12584:
00014560 7200                       		moveq	#0,d1
00014562 363C FF00                  		move.w	#-$100,d3
00014566 3228 000C                  		move.w	obY(a0),d1
0001456A 9268 0036                  		sub.w	$36(a0),d1
0001456E 6400                       		bcc.s	loc_12598
00014570 4441                       		neg.w	d1
00014572 4443                       		neg.w	d3
00014574                            
00014574                            loc_12598:
00014574 B240                       		cmp.w	d0,d1
00014576 6500                       		bcs.s	loc_125C2
00014578 3028 0008                  		move.w	obX(a0),d0
0001457C 9068 0034                  		sub.w	$34(a0),d0
00014580 6700                       		beq.s	loc_125AE
00014582 48C0                       		ext.l	d0
00014584 E180                       		asl.l	#8,d0
00014586 81C1                       		divs.w	d1,d0
00014588 4440                       		neg.w	d0
0001458A                            
0001458A                            loc_125AE:
0001458A 3140 0010                  		move.w	d0,obVelX(a0)
0001458E 3143 0012                  		move.w	d3,obVelY(a0)
00014592 4840                       		swap	d0
00014594 3140 000A                  		move.w	d0,obX+2(a0)
00014598 4268 000E                  		clr.w	obY+2(a0)
0001459C 4E75                       		rts	
0001459E                            ; ===========================================================================
0001459E                            
0001459E                            loc_125C2:
0001459E 3228 000C                  		move.w	obY(a0),d1
000145A2 9268 0036                  		sub.w	$36(a0),d1
000145A6 6700                       		beq.s	loc_125D4
000145A8 48C1                       		ext.l	d1
000145AA E181                       		asl.l	#8,d1
000145AC 83C0                       		divs.w	d0,d1
000145AE 4441                       		neg.w	d1
000145B0                            
000145B0                            loc_125D4:
000145B0 3141 0012                  		move.w	d1,obVelY(a0)
000145B4 3142 0010                  		move.w	d2,obVelX(a0)
000145B8 4841                       		swap	d1
000145BA 3141 000E                  		move.w	d1,obY+2(a0)
000145BE 4268 000A                  		clr.w	obX+2(a0)
000145C2 4E75                       		rts	
000145C4                            ; End of function LCon_ChangeDir
000145C4                            
000145C4                            ; ===========================================================================
000145C4 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000145C6 0000                       		dc.w word_12610-LCon_Data
000145C8 0000                       		dc.w word_12628-LCon_Data
000145CA 0000                       		dc.w word_1263C-LCon_Data
000145CC 0000                       		dc.w word_12650-LCon_Data
000145CE 0000                       		dc.w word_12668-LCon_Data
000145D0 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000145E0 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000145EC 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000145FC 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014604 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014618 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001462C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014644 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014644 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014658                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014658                            ; ---------------------------------------------------------------------------
00014658                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014658                            ; ---------------------------------------------------------------------------
00014658                            Map_LConv_internal:
00014658 0000                       		dc.w @wheel1-Map_LConv_internal
0001465A 0000                       		dc.w @wheel2-Map_LConv_internal
0001465C 0000                       		dc.w @wheel3-Map_LConv_internal
0001465E 0000                       		dc.w @wheel4-Map_LConv_internal
00014660 0000                       		dc.w @platform-Map_LConv_internal
00014662 01                         @wheel1:	dc.b 1
00014663 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014668 01                         @wheel2:	dc.b 1
00014669 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001466E 01                         @wheel3:	dc.b 1
0001466F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014674 01                         @wheel4:	dc.b 1
00014675 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001467A 01                         @platform:	dc.b 1
0001467B F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014680                            		even
00014680                            		even
00014680                            		include	"_incObj\64 Bubbles.asm"
00014680                            ; ---------------------------------------------------------------------------
00014680                            ; Object 64 - bubbles (LZ)
00014680                            ; ---------------------------------------------------------------------------
00014680                            
00014680                            Bubble:
00014680 7000                       		moveq	#0,d0
00014682 1028 0024                  		move.b	obRoutine(a0),d0
00014686 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
0001468A 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
0001468E                            ; ===========================================================================
0001468E 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014690 0000                       		dc.w Bub_Animate-Bub_Index
00014692 0000                       		dc.w Bub_ChkWater-Bub_Index
00014694 0000                       		dc.w Bub_Display-Bub_Index
00014696 0000                       		dc.w Bub_Delete-Bub_Index
00014698 0000                       		dc.w Bub_BblMaker-Bub_Index
0001469A                            
0001469A =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
0001469A =00000030                  bub_origX:	equ $30		; original x-axis position
0001469A =00000032                  bub_time:	equ $32		; time until next bubble spawn
0001469A =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
0001469A                            ; ===========================================================================
0001469A                            
0001469A                            Bub_Main:	; Routine 0
0001469A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001469E 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
000146A6 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000146AC 117C 0084 0001             		move.b	#$84,obRender(a0)
000146B2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000146B8 317C 0080 0018             		move.w	#$80,obPriority(a0)
000146BE 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000146C2 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000146C4                            
000146C4 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000146C8 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000146CC 1140 0032                  		move.b	d0,bub_time(a0)
000146D0 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
000146D4 117C 0006 001C             		move.b	#6,obAnim(a0)
000146DA 6000 0000                  		bra.w	Bub_BblMaker
000146DE                            ; ===========================================================================
000146DE                            
000146DE                            @bubble:
000146DE 1140 001C                  		move.b	d0,obAnim(a0)
000146E2 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
000146E8 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
000146EE 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000146F4 1140 0026                  		move.b	d0,obAngle(a0)
000146F8                            
000146F8                            Bub_Animate:	; Routine 2
000146F8 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000146FE 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00014704 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
0001470A 6600                       		bne.s	Bub_ChkWater	; if not, branch
0001470C                            
0001470C 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014712                            
00014712                            Bub_ChkWater:	; Routine 4
00014712 3038 F646                  		move.w	(v_waterpos1).w,d0
00014716 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
0001471A 6500                       		bcs.s	@wobble		; if yes, branch
0001471C                            
0001471C                            @burst:
0001471C 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014722 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014726 6000 0000                  		bra.w	Bub_Display
0001472A                            ; ===========================================================================
0001472A                            
0001472A                            @wobble:
0001472A 1028 0026                  		move.b	obAngle(a0),d0
0001472E 5228 0026                  		addq.b	#1,obAngle(a0)
00014732 0240 007F                  		andi.w	#$7F,d0
00014736 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
0001473C 1031 0000                  		move.b	(a1,d0.w),d0
00014740 4880                       		ext.w	d0
00014742 D068 0030                  		add.w	bub_origX(a0),d0
00014746 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
0001474A 4A28 002E                  		tst.b	bub_inhalable(a0)
0001474E 6700                       		beq.s	@display
00014750 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014754 6700                       		beq.s	@display	; if not, branch
00014756                            
00014756 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014764 43F8 D000                  		lea	(v_player).w,a1
00014768 4269 0010                  		clr.w	obVelX(a1)
0001476C 4269 0012                  		clr.w	obVelY(a1)
00014770 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014774 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
0001477A 337C 0023 003E             		move.w	#$23,$3E(a1)
00014780 137C 0000 003C             		move.b	#0,$3C(a1)
00014786 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001478C 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014792 0829 0002 0022             		btst	#2,obStatus(a1)
00014798 6700 FF82                  		beq.w	@burst
0001479C 08A9 0002 0022             		bclr	#2,obStatus(a1)
000147A2 137C 0013 0016             		move.b	#$13,obHeight(a1)
000147A8 137C 0009 0017             		move.b	#9,obWidth(a1)
000147AE 5B69 000C                  		subq.w	#5,obY(a1)
000147B2 6000 FF68                  		bra.w	@burst
000147B6                            ; ===========================================================================
000147B6                            
000147B6                            @display:
000147B6 6100 AC5A                  		bsr.w	SpeedToPos
000147BA 4A28 0001                  		tst.b	obRender(a0)
000147BE 6A00                       		bpl.s	@delete
000147C0 4EF9 0000 F426             		jmp	(DisplaySprite).l
000147C6                            
000147C6                            	@delete:
000147C6 4EF9 0000 F466             		jmp	(DeleteObject).l
000147CC                            ; ===========================================================================
000147CC                            
000147CC                            Bub_Display:	; Routine 6
000147CC 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000147D2 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000147D8 4A28 0001                  		tst.b	obRender(a0)
000147DC 6A00                       		bpl.s	@delete
000147DE 4EF9 0000 F426             		jmp	(DisplaySprite).l
000147E4                            
000147E4                            	@delete:
000147E4 4EF9 0000 F466             		jmp	(DeleteObject).l
000147EA                            ; ===========================================================================
000147EA                            
000147EA                            Bub_Delete:	; Routine 8
000147EA 6000 AC7A                  		bra.w	DeleteObject
000147EE                            ; ===========================================================================
000147EE                            
000147EE                            Bub_BblMaker:	; Routine $A
000147EE 4A68 0036                  		tst.w	$36(a0)
000147F2 6600                       		bne.s	@loc_12874
000147F4 3038 F646                  		move.w	(v_waterpos1).w,d0
000147F8 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
000147FC 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014800 4A28 0001                  		tst.b	obRender(a0)
00014804 6A00 0000                  		bpl.w	@chkdel
00014808 5368 0038                  		subq.w	#1,$38(a0)
0001480C 6A00 0000                  		bpl.w	@loc_12914
00014810 317C 0001 0036             		move.w	#1,$36(a0)
00014816                            
00014816                            	@tryagain:
00014816 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001481C 3200                       		move.w	d0,d1
0001481E 0240 0007                  		andi.w	#7,d0
00014822 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014826 64EE                       		bcc.s	@tryagain	; if yes, branch
00014828                            
00014828 1140 0034                  		move.b	d0,$34(a0)
0001482C 0241 000C                  		andi.w	#$C,d1
00014830 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014836 D2C1                       		adda.w	d1,a1
00014838 2149 003C                  		move.l	a1,$3C(a0)
0001483C 5328 0032                  		subq.b	#1,bub_time(a0)
00014840 6A00                       		bpl.s	@loc_12872
00014842 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014848 08E8 0007 0036             		bset	#7,$36(a0)
0001484E                            
0001484E                            @loc_12872:
0001484E 6000                       		bra.s	@loc_1287C
00014850                            ; ===========================================================================
00014850                            
00014850                            @loc_12874:
00014850 5368 0038                  		subq.w	#1,$38(a0)
00014854 6A00 0000                  		bpl.w	@loc_12914
00014858                            
00014858                            @loc_1287C:
00014858 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001485E 0240 001F                  		andi.w	#$1F,d0
00014862 3140 0038                  		move.w	d0,$38(a0)
00014866 6100 B158                  		bsr.w	FindFreeObj
0001486A 6600                       		bne.s	@fail
0001486C 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014870 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014876 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001487C 0240 000F                  		andi.w	#$F,d0
00014880 5140                       		subq.w	#8,d0
00014882 D169 0008                  		add.w	d0,obX(a1)
00014886 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001488C 7000                       		moveq	#0,d0
0001488E 1028 0034                  		move.b	$34(a0),d0
00014892 2468 003C                  		movea.l	$3C(a0),a2
00014896 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
0001489C 0828 0007 0036             		btst	#7,$36(a0)
000148A2 6700                       		beq.s	@fail
000148A4 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000148AA 0240 0003                  		andi.w	#3,d0
000148AE 6600                       		bne.s	@loc_buh
000148B0 08E8 0006 0036             		bset	#6,$36(a0)
000148B6 6600                       		bne.s	@fail
000148B8 137C 0002 0028             		move.b	#2,obSubtype(a1)
000148BE                            
000148BE                            @loc_buh:
000148BE 4A28 0034                  		tst.b	$34(a0)
000148C2 6600                       		bne.s	@fail
000148C4 08E8 0006 0036             		bset	#6,$36(a0)
000148CA 6600                       		bne.s	@fail
000148CC 137C 0002 0028             		move.b	#2,obSubtype(a1)
000148D2                            
000148D2                            	@fail:
000148D2 5328 0034                  		subq.b	#1,$34(a0)
000148D6 6A00                       		bpl.s	@loc_12914
000148D8 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000148DE 0240 007F                  		andi.w	#$7F,d0
000148E2 0640 0080                  		addi.w	#$80,d0
000148E6 D168 0038                  		add.w	d0,$38(a0)
000148EA 4268 0036                  		clr.w	$36(a0)
000148EE                            
000148EE                            @loc_12914:
000148EE 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000148F4 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000148FA                            
000148FA                            @chkdel:
00014918 3038 F646                  		move.w	(v_waterpos1).w,d0
0001491C B068 000C                  		cmp.w	obY(a0),d0
00014920 6500 AB04                  		bcs.w	DisplaySprite
00014924 4E75                       		rts	
00014926                            ; ===========================================================================
00014926                            ; bubble production sequence
00014926                            
00014926                            ; 0 = small bubble, 1 =	large bubble
00014926                            
00014926 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014938                            
00014938                            ; ===========================================================================
00014938                            
00014938                            Bub_ChkSonic:
00014938 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001493C 6B00                       		bmi.s	@loc_12998
0001493E 43F8 D000                  		lea	(v_player).w,a1
00014942 3029 0008                  		move.w	obX(a1),d0
00014946 3228 0008                  		move.w	obX(a0),d1
0001494A 0441 0010                  		subi.w	#$10,d1
0001494E B240                       		cmp.w	d0,d1
00014950 6400                       		bcc.s	@loc_12998
00014952 0641 0020                  		addi.w	#$20,d1
00014956 B240                       		cmp.w	d0,d1
00014958 6500                       		bcs.s	@loc_12998
0001495A 3029 000C                  		move.w	obY(a1),d0
0001495E 3228 000C                  		move.w	obY(a0),d1
00014962 B240                       		cmp.w	d0,d1
00014964 6400                       		bcc.s	@loc_12998
00014966 0641 0010                  		addi.w	#$10,d1
0001496A B240                       		cmp.w	d0,d1
0001496C 6500                       		bcs.s	@loc_12998
0001496E 7001                       		moveq	#1,d0
00014970 4E75                       		rts	
00014972                            ; ===========================================================================
00014972                            
00014972                            @loc_12998:
00014972 7000                       		moveq	#0,d0
00014974 4E75                       		rts	
00014974 4E75                       		rts	
00014976                            		include	"_anim\Bubbles.asm"
00014976                            ; ---------------------------------------------------------------------------
00014976                            ; Animation script - bubbles (LZ)
00014976                            ; ---------------------------------------------------------------------------
00014976 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014978 0000                       		dc.w @medium-Ani_Bub
0001497A 0000                       		dc.w @large-Ani_Bub
0001497C 0000                       		dc.w @incroutine-Ani_Bub
0001497E 0000                       		dc.w @incroutine-Ani_Bub
00014980 0000                       		dc.w @burst-Ani_Bub
00014982 0000                       		dc.w @bubmaker-Ani_Bub
00014984 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
0001498A 00                         		even
0001498A 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014990 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014998 00                         		even
00014998 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
0001499A 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
000149A0 00                         		even
000149A0 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
000149A6 00                         		even
000149A6 00                         		even
000149A6                            Map_Bub:	include	"_maps\Bubbles.asm"
000149A6                            ; ---------------------------------------------------------------------------
000149A6                            ; Sprite mappings - bubbles (LZ)
000149A6                            ; ---------------------------------------------------------------------------
000149A6                            Map_Bub_internal:
000149A6 0000                       		dc.w @bubble1-Map_Bub_internal
000149A8 0000                       		dc.w @bubble2-Map_Bub_internal
000149AA 0000                       		dc.w @bubble3-Map_Bub_internal
000149AC 0000                       		dc.w @bubble4-Map_Bub_internal
000149AE 0000                       		dc.w @bubble5-Map_Bub_internal
000149B0 0000                       		dc.w @bubble6-Map_Bub_internal
000149B2 0000                       		dc.w @bubblefull-Map_Bub_internal
000149B4 0000                       		dc.w @burst1-Map_Bub_internal
000149B6 0000                       		dc.w @burst2-Map_Bub_internal
000149B8 0000                       		dc.w @zero_sm-Map_Bub_internal
000149BA 0000                       		dc.w @five_sm-Map_Bub_internal
000149BC 0000                       		dc.w @three_sm-Map_Bub_internal
000149BE 0000                       		dc.w @one_sm-Map_Bub_internal
000149C0 0000                       		dc.w @zero-Map_Bub_internal
000149C2 0000                       		dc.w @five-Map_Bub_internal
000149C4 0000                       		dc.w @four-Map_Bub_internal
000149C6 0000                       		dc.w @three-Map_Bub_internal
000149C8 0000                       		dc.w @two-Map_Bub_internal
000149CA 0000                       		dc.w @one-Map_Bub_internal
000149CC 0000                       		dc.w @bubmaker1-Map_Bub_internal
000149CE 0000                       		dc.w @bubmaker2-Map_Bub_internal
000149D0 0000                       		dc.w @bubmaker3-Map_Bub_internal
000149D2 0000                       		dc.w @blank-Map_Bub_internal
000149D4 01                         @bubble1:	dc.b 1
000149D5 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
000149DA 01                         @bubble2:	dc.b 1
000149DB FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000149E0 01                         @bubble3:	dc.b 1
000149E1 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000149E6 01                         @bubble4:	dc.b 1
000149E7 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000149EC 01                         @bubble5:	dc.b 1
000149ED F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000149F2 01                         @bubble6:	dc.b 1
000149F3 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000149F8 01                         @bubblefull:	dc.b 1
000149F9 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000149FE 04                         @burst1:	dc.b 4
000149FF F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014A04 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014A09 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014A0E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014A13 04                         @burst2:	dc.b 4
00014A14 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014A19 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014A1E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014A23 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014A28 01                         @zero_sm:	dc.b 1
00014A29 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014A2E 01                         @five_sm:	dc.b 1
00014A2F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014A34 01                         @three_sm:	dc.b 1
00014A35 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014A3A 01                         @one_sm:	dc.b 1
00014A3B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014A40 01                         @zero:		dc.b 1
00014A41 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014A46 01                         @five:		dc.b 1
00014A47 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014A4C 01                         @four:		dc.b 1
00014A4D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014A52 01                         @three:		dc.b 1
00014A53 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014A58 01                         @two:		dc.b 1
00014A59 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014A5E 01                         @one:		dc.b 1
00014A5F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014A64 01                         @bubmaker1:	dc.b 1
00014A65 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014A6A 01                         @bubmaker2:	dc.b 1
00014A6B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014A70 01                         @bubmaker3:	dc.b 1
00014A71 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014A76 00                         @blank:		dc.b 0
00014A78 00                         		even
00014A78 00                         		even
00014A78                            		include	"_incObj\65 Waterfalls.asm"
00014A78                            ; ---------------------------------------------------------------------------
00014A78                            ; Object 65 - waterfalls (LZ)
00014A78                            ; ---------------------------------------------------------------------------
00014A78                            
00014A78                            Waterfall:
00014A78 7000                       		moveq	#0,d0
00014A7A 1028 0024                  		move.b	obRoutine(a0),d0
00014A7E 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014A82 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014A86                            ; ===========================================================================
00014A86 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014A88 0000                       		dc.w WFall_Animate-WFall_Index
00014A8A 0000                       		dc.w WFall_ChkDel-WFall_Index
00014A8C 0000                       		dc.w WFall_OnWater-WFall_Index
00014A8E 0000                       		dc.w loc_12B36-WFall_Index
00014A90                            ; ===========================================================================
00014A90                            
00014A90                            WFall_Main:	; Routine 0
00014A90 5828 0024                  		addq.b	#4,obRoutine(a0)
00014A94 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014A9C 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014AA2 0028 0004 0001             		ori.b	#4,obRender(a0)
00014AA8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014AAE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AB4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014AB8 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014ABA 08E8 0007 0002             		bset	#7,obGfx(a0)
00014AC0                            
00014AC0                            	@under80:
00014AC0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014AC4 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014AC8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014ACC 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014ACE                            
00014ACE 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014AD2 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014AD6 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014ADC 6700                       		beq.s	@not49		; if not, branch
00014ADE                            
00014ADE 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014AE4                            
00014AE4                            	@not49:
00014AE4 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014AEA 6700                       		beq.s	WFall_Animate	; if not, branch
00014AEC 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014AF2                            
00014AF2                            WFall_Animate:	; Routine 2
00014AF2 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014AF8 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00014AFE                            
00014AFE                            WFall_ChkDel:	; Routine 4
00014AFE 6000 C9C6                  		bra.w	RememberState
00014B02                            ; ===========================================================================
00014B02                            
00014B02                            WFall_OnWater:	; Routine 6
00014B02 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B06 0440 0010                  		subi.w	#$10,d0
00014B0A 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014B0E 60E2                       		bra.s	WFall_Animate
00014B10                            ; ===========================================================================
00014B10                            
00014B10                            loc_12B36:	; Routine 8
00014B10 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014B16 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014B1C 6600                       		bne.s	@animate
00014B1E 08E8 0007 0002             		bset	#7,obGfx(a0)
00014B24                            
00014B24                            	@animate:
00014B24 60CC                       		bra.s	WFall_Animate
00014B24 60CC                       		bra.s	WFall_Animate
00014B26                            		include	"_anim\Waterfalls.asm"
00014B26                            ; ---------------------------------------------------------------------------
00014B26                            ; Animation script - waterfall (LZ)
00014B26                            ; ---------------------------------------------------------------------------
00014B26 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014B28 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014B2E 00                         		even
00014B2E 00                         		even
00014B2E                            Map_WFall	include	"_maps\Waterfalls.asm"
00014B2E                            ; ---------------------------------------------------------------------------
00014B2E                            ; Sprite mappings - waterfalls (LZ)
00014B2E                            ; ---------------------------------------------------------------------------
00014B2E                            Map_WFall_internal:
00014B2E 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014B30 0000                       		dc.w @cornerwide-Map_WFall_internal
00014B32 0000                       		dc.w @cornermedium-Map_WFall_internal
00014B34 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014B36 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014B38 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014B3A 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014B3C 0000                       		dc.w @vertwide-Map_WFall_internal
00014B3E 0000                       		dc.w @diagonal-Map_WFall_internal
00014B40 0000                       		dc.w @splash1-Map_WFall_internal
00014B42 0000                       		dc.w @splash2-Map_WFall_internal
00014B44 0000                       		dc.w @splash3-Map_WFall_internal
00014B46 01                         @vertnarrow:	dc.b 1
00014B47 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014B4C 02                         @cornerwide:	dc.b 2
00014B4D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014B52 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014B57 02                         @cornermedium:	dc.b 2
00014B58 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014B5D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014B62 01                         @cornernarrow:	dc.b 1
00014B63 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014B68 02                         @cornermedium2:	dc.b 2
00014B69 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014B6E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014B73 01                         @cornernarrow2:	dc.b 1
00014B74 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014B79 01                         @cornernarrow3:	dc.b 1
00014B7A F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014B7F 01                         @vertwide:	dc.b 1
00014B80 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014B85 02                         @diagonal:	dc.b 2
00014B86 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014B8B 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014B90 02                         @splash1:	dc.b 2
00014B91 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014B96 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014B9B 02                         @splash2:	dc.b 2
00014B9C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014BA1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014BA6 02                         @splash3:	dc.b 2
00014BA7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014BAC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014BB2 00                         		even
00014BB2 00                         		even
00014BB2                            
00014BB2                            
00014BB2                            SpinDash_dust:
00014BB2                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014BB2 7000                       		moveq	#0,d0
00014BB4 1028 0024                  		move.b	$24(a0),d0
00014BB8 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014BBC 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014BC0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014BC0 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014BC2 0000                       		dc loc_1DD90-off_1DD2E; 1
00014BC4 0000                       		dc loc_1DE46-off_1DD2E; 2
00014BC6 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014BC8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014BC8                            
00014BC8                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014BC8 5428 0024                  		addq.b	#2,$24(a0)
00014BCC 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014BD4 0028 0004 0001             		or.b	#4,1(a0)
00014BDA 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014BE0 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014BE6 317C 07AC 0002             		move	#$7AC,2(a0)
00014BEC 317C D000 003E             		move	#-$3000,$3E(a0)
00014BF2 317C F580 003C             		move	#$F580,$3C(a0)
00014BF8 B0FC D1C0                  		cmp	#-$2E40,a0
00014BFC 6700                       		beq.s	loc_1DD8C
00014BFE 117C 0001 0034             		move.b	#1,$34(a0)
00014C04                            ;		cmp	#2,($FFFFFF70).w
00014C04                            ;		beq.s	loc_1DD8C
00014C04                            ;		move	#$48C,2(a0)
00014C04                            ;		move	#-$4FC0,$3E(a0)
00014C04                            ;		move	#-$6E80,$3C(a0)
00014C04                            
00014C04                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014C04                            ;		bsr.w	sub_16D6E
00014C04                            
00014C04                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014C04 3468 003E                  		movea.w	$3E(a0),a2
00014C08 7000                       		moveq	#0,d0
00014C0A 1028 001C                  		move.b	$1C(a0),d0
00014C0E D040                       		add	d0,d0
00014C10 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014C14 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014C18                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C18 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014C1A 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014C1C 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014C1E 0000                       		dc loc_1DE20-off_1DDA4; 3
00014C20                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C20                            
00014C20                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014C20 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014C26 4A28 001D                  		tst.b	$1D(a0)
00014C2A 6600                       		bne.s	loc_1DE28
00014C2C 316A 0008 0008             		move	8(a2),8(a0)
00014C32 117C 0000 0022             		move.b	#0,$22(a0)
00014C38 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014C3E 6000                       		bra.s	loc_1DE28
00014C40                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C40                            
00014C40                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014C40                            ;		cmp.b	#$C,$28(a2)
00014C40                            ;		bcs.s	loc_1DE3E
00014C40 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014C46 6400                       		bcc.s	loc_1DE3E
00014C48 4A2A 0039                  		tst.b	$39(a2)
00014C4C 6700                       		beq.s	loc_1DE3E
00014C4E 316A 0008 0008             		move	8(a2),8(a0)
00014C54 316A 000C 000C             		move	$C(a2),$C(a0)
00014C5A 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014C60 0228 0001 0022             		and.b	#1,$22(a0)
00014C66 4A28 0034                  		tst.b	$34(a0)
00014C6A 6700                       		beq.s	loc_1DE06
00014C6C 5968 000C                  		sub	#4,$C(a0)
00014C70                            
00014C70                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014C70 4A28 001D                  		tst.b	$1D(a0)
00014C74 6600                       		bne.s	loc_1DE28
00014C76 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014C7C 4A6A 0002                  		tst	2(a2)
00014C80 6A00                       		bpl.s	loc_1DE28
00014C82 0068 8000 0002             		or	#-$8000,2(a0)
00014C88                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C88                            
00014C88                            loc_1DE20:				; DATA XREF: h+6E30?o
00014C88                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014C88 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014C8E 4EB9 0000 C4E0             		jsr	AnimateSprite
00014C94 6100 0000                  		bsr.w	loc_1DEE4
00014C98 4EFA A78C                  		jmp	DisplaySprite
00014C9C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C9C                            
00014C9C                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014C9C 117C 0000 001C             		move.b	#0,$1C(a0)
00014CA2 4E75                       		rts	
00014CA4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CA4                            
00014CA4                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014CA4 6000 A7C0                  		bra.w	DeleteObject
00014CA8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CA8                            
00014CA8                            
00014CA8                            
00014CA8                            loc_1DE4A:
00014CA8 3468 003E                  	movea.w	$3E(a0),a2
00014CAC 7210                       	moveq	#$10,d1
00014CAE 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014CB4 6700                       	beq.s	loc_1DE64
00014CB6 7206                       	moveq	#$6,d1
00014CB8 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014CBE 6700                       	beq.s	loc_1DE64
00014CC0 117C 0002 0024             	move.b	#2,$24(a0)
00014CC6 117C 0000 0032             	move.b	#0,$32(a0)
00014CCC 4E75                       	rts
00014CCE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CCE                            
00014CCE                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014CCE 5328 0032                  		subq.b	#1,$32(a0)
00014CD2 6A00                       		bpl.s	loc_1DEE0
00014CD4 117C 0003 0032             		move.b	#3,$32(a0)
00014CDA 4EBA ACE4                  		jsr	FindFreeObj
00014CDE 6600                       		bne.s	loc_1DEE0
00014CE0 1290                       		move.b	0(a0),0(a1)
00014CE2 336A 0008 0008             		move	8(a2),8(a1)
00014CE8 336A 000C 000C             		move	$C(a2),$C(a1)
00014CEE 4A28 0034                  		tst.b	$34(a0)
00014CF2 6700                       		beq.s	loc_1DE9A
00014CF4 5941                       		sub	#4,d1
00014CF6                            
00014CF6                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014CF6 D369 000C                  		add	d1,$C(a1)
00014CFA 137C 0000 0022             		move.b	#0,$22(a1)
00014D00 137C 0003 001C             		move.b	#3,$1C(a1)
00014D06 5429 0024                  		addq.b	#2,$24(a1)
00014D0A 2368 0004 0004             		move.l	4(a0),4(a1)
00014D10 1368 0001 0001             		move.b	1(a0),1(a1)
00014D16 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014D1C 137C 0004 0014             		move.b	#4,obActWid(a1)
00014D22 3368 0002 0002             		move	2(a0),2(a1)
00014D28 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014D2E 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014D34 4A6A 0002                  		tst	2(a2)
00014D38 6A00                       		bpl.s	loc_1DEE0
00014D3A 0069 8000 0002             		or	#-$8000,2(a1)
00014D40                            
00014D40                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014D40 6100                       		bsr.s	loc_1DEE4
00014D42 4E75                       		rts	
00014D44                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D44                            
00014D44                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014D44 7000                       		moveq	#0,d0
00014D46 1028 001A                  		move.b	$1A(a0),d0
00014D4A B028 0030                  		cmp.b	$30(a0),d0
00014D4E 6700 0000                  		beq.w	locret_1DF36
00014D52 1140 0030                  		move.b	d0,$30(a0)
00014D56 45F9 0000 0000             		lea	(off_1E074).l,a2
00014D5C D040                       		add	d0,d0
00014D5E D4F2 0000                  		add	(a2,d0.w),a2
00014D62 3A1A                       		move	(a2)+,d5
00014D64 5345                       		subq	#1,d5
00014D66 6B00 0000                  		bmi.w	locret_1DF36
00014D6A 3828 003C                  		move $3C(a0),d4
00014D6E                            
00014D6E                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014D6E 7200                       		moveq	#0,d1
00014D70 321A                       		move	(a2)+,d1
00014D72 3601                       		move	d1,d3
00014D74 E04B                       		lsr.w	#8,d3
00014D76 0243 00F0                  		and	#$F0,d3	; 'ð'
00014D7A 0643 0010                  		add	#$10,d3
00014D7E 0241 0FFF                  		and	#$FFF,d1
00014D82 EB89                       		lsl.l	#5,d1
00014D84 0681 0000 0000             		add.l	#Art_Dust,d1
00014D8A 3404                       		move	d4,d2
00014D8C D843                       		add	d3,d4
00014D8E D843                       		add	d3,d4
00014D90 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00014D96 51CD FFD6                  		dbf	d5,loc_1DF0A
00014D9A 4E75                           rts
00014D9C                            
00014D9C                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014D9C 4E75                       		rts	
00014D9E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D9E 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014DA0 0000                       		dc byte_1DF43-off_1DF38; 1
00014DA2 0000                       		dc byte_1DF4F-off_1DF38; 2
00014DA4 0000                       		dc byte_1DF58-off_1DF38; 3
00014DA6 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014DA9 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014DB5 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014DBE 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014DC4                            ; -------------------------------------------------------------------------------
00014DC4                            ; Unknown Sprite Mappings
00014DC4                            ; -------------------------------------------------------------------------------
00014DC4                            MapUnc_1DF5E:
00014DC4 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014DC6 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014DC8 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014DCA 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014DCC 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014DCE 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014DD0 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014DD2 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014DD4 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014DD6 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014DD8 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014DDA 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014DDC 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014DDE 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014DE0 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014DE2 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014DE4 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014DE6 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014DE8 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014DEA 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014DEC 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014DEE 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014DF0 00                         word_1DF8A:	dc.b 0
00014DF1 01                         word_1DF8C:	dc.b 1
00014DF2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014DF7 01                         word_1DF96:	dc.b 1
00014DF8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014DFD 01                         word_1DFA0:	dc.b 1
00014DFE E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E03 01                         word_1DFAA:	dc.b 1
00014E04 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E09 01                         word_1DFB4:	dc.b 1
00014E0A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E0F 01                         word_1DFBE:	dc.b 1
00014E10 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E15 01                         word_1DFC8:	dc.b 1
00014E16 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E1B 01                         word_1DFD2:	dc.b 1
00014E1C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E21 01                         word_1DFDC:	dc.b 1
00014E22 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E27 01                         word_1DFE6:	dc.b 1
00014E28 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E2D 01                         word_1DFF0:	dc.b 1
00014E2E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E33 01                         word_1DFFA:	dc.b 1
00014E34 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E39 02                         word_1E004:	dc.b 2
00014E3A F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014E3F 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014E44 02                         word_1E016:	dc.b 2
00014E45 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014E4A 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014E4F 02                         word_1E028:	dc.b 2
00014E50 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014E55 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014E5A 02                         word_1E03A:	dc.b 2
00014E5B F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014E60 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014E65 01                         word_1E04C:	dc.b 1
00014E66 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014E6B 01                         word_1E056:	dc.b 1
00014E6C F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014E71 01                         word_1E060:	dc.b 1
00014E72 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014E77 01                         word_1E06A:	dc.b 1
00014E78 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014E7D 00                         	dc.b 0
00014E7E 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014E80 0000                       	dc word_1E0A2-off_1E074; 1
00014E82 0000                       	dc word_1E0A6-off_1E074; 2
00014E84 0000                       	dc word_1E0AA-off_1E074; 3
00014E86 0000                       	dc word_1E0AE-off_1E074; 4
00014E88 0000                       	dc word_1E0B2-off_1E074; 5
00014E8A 0000                       	dc word_1E0B6-off_1E074; 6
00014E8C 0000                       	dc word_1E0BA-off_1E074; 7
00014E8E 0000                       	dc word_1E0BE-off_1E074; 8
00014E90 0000                       	dc word_1E0C2-off_1E074; 9
00014E92 0000                       	dc word_1E0C6-off_1E074; 10
00014E94 0000                       	dc word_1E0CA-off_1E074; 11
00014E96 0000                       	dc word_1E0CE-off_1E074; 12
00014E98 0000                       	dc word_1E0D2-off_1E074; 13
00014E9A 0000                       	dc word_1E0D8-off_1E074; 14
00014E9C 0000                       	dc word_1E0DE-off_1E074; 15
00014E9E 0000                       	dc word_1E0E4-off_1E074; 16
00014EA0 0000                       	dc word_1E0EA-off_1E074; 17
00014EA2 0000                       	dc word_1E0EA-off_1E074; 18
00014EA4 0000                       	dc word_1E0EA-off_1E074; 19
00014EA6 0000                       	dc word_1E0EA-off_1E074; 20
00014EA8 0000                       	dc word_1E0EC-off_1E074; 21
00014EAA 0000                       word_1E0A0:	dc 0
00014EAC 0001                       word_1E0A2:	dc 1
00014EAE 7000                       	dc $7000
00014EB0 0001                       word_1E0A6:	dc 1
00014EB2 F008                       	dc $F008
00014EB4 0001                       word_1E0AA:	dc 1
00014EB6 F018                       	dc $F018
00014EB8 0001                       word_1E0AE:	dc 1
00014EBA F028                       	dc $F028
00014EBC 0001                       word_1E0B2:	dc 1
00014EBE F038                       	dc $F038
00014EC0 0001                       word_1E0B6:	dc 1
00014EC2 F048                       	dc $F048
00014EC4 0001                       word_1E0BA:	dc 1
00014EC6 7058                       	dc $7058
00014EC8 0001                       word_1E0BE:	dc 1
00014ECA 7060                       	dc $7060
00014ECC 0001                       word_1E0C2:	dc 1
00014ECE 7068                       	dc $7068
00014ED0 0001                       word_1E0C6:	dc 1
00014ED2 7070                       	dc $7070
00014ED4 0001                       word_1E0CA:	dc 1
00014ED6 7078                       	dc $7078
00014ED8 0001                       word_1E0CE:	dc 1
00014EDA 7080                       	dc $7080
00014EDC 0002                       word_1E0D2:	dc 2
00014EDE 1088                       	dc $1088
00014EE0 708A                       	dc $708A
00014EE2 0002                       word_1E0D8:	dc 2
00014EE4 3092                       	dc $3092
00014EE6 7096                       	dc $7096
00014EE8 0002                       word_1E0DE:	dc 2
00014EEA 509E                       	dc $509E
00014EEC 70A4                       	dc $70A4
00014EEE 0002                       word_1E0E4:	dc 2
00014EF0 50AC                       	dc $50AC
00014EF2 70B2                       	dc $70B2
00014EF4 0000                       word_1E0EA:	dc 0
00014EF6 0001                       word_1E0EC:	dc 1
00014EF8 F0BA                       	dc $F0BA
00014EFA                            	even
00014EFA                            
00014EFA                            ; ===========================================================================
00014EFA                            
00014EFA                            LoadPlayerPal:
00014EFA 7000                       		moveq	#0,d0
00014EFC 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F00 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F04 4E75                       		rts
00014F06                            
00014F06                            	@palLUT:
00014F06 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00014F0B 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
00014F12 00                         		even
00014F12                            
00014F12                            LoadPlayerWaterPal:
00014F12 7000                       		moveq	#0,d0
00014F14 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F18 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F1C 4E75                       		rts
00014F1E                            
00014F1E                            	@palLUT:
00014F1E 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00014F23 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
00014F2A 00                         		even
00014F2A                            
00014F2A                            ; ---------------------------------------------------------------------------
00014F2A                            ; Object 01 - Sonic
00014F2A                            ; ---------------------------------------------------------------------------
00014F2A                            
00014F2A                            SonicPlayer:
00014F2A 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00014F2E 6700                       		beq.s	Sonic_Normal	; if not, branch
00014F30 4EF9 0000 0000             		jmp	(DebugMode).l
00014F36                            ; ===========================================================================
00014F36                            
00014F36                            Sonic_Normal:
00014F36 7000                       		moveq	#0,d0
00014F38 1028 0024                  		move.b	obRoutine(a0),d0
00014F3C 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00014F40 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00014F44                            ; ===========================================================================
00014F44 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00014F46 0000                       		dc.w Sonic_Control-Sonic_Index
00014F48 0000                       		dc.w Sonic_Hurt-Sonic_Index
00014F4A 0000                       		dc.w Sonic_Death-Sonic_Index
00014F4C 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00014F4E                            ; ===========================================================================
00014F4E                            
00014F4E                            Sonic_Main:	; Routine 0
00014F4E 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00014F54 5428 0024                  		addq.b	#2,obRoutine(a0)
00014F58 117C 0013 0016             		move.b	#$13,obHeight(a0)
00014F5E 117C 0009 0017             		move.b	#9,obWidth(a0)
00014F64 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00014F6C 317C 0780 0002             		move.w	#$780,obGfx(a0)
00014F72 317C 0100 0018             		move.w	#$100,obPriority(a0)
00014F78 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014F7E 117C 0004 0001             		move.b	#4,obRender(a0)
00014F84 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00014F8A 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00014F90 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00014F96 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00014F9C                            
00014F9C                            Sonic_Control:    ; Routine 2
00014F9C 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00014FA0 6700 0000                  		beq.w	@cont    
00014FA4 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00014FA6                             
00014FA6                            	@cont: 
00014FA6 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00014FAA 6700                       		beq.s    loc_12C58    ; if not, branch
00014FAC 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00014FB2 6700                       		beq.s    loc_12C58    ; if not, branch
00014FB4 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00014FBA 4238 F7CC                  		clr.b    (f_lockctrl).w
00014FBE 4E75                       		rts
00014FC0                            		
00014FC0                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00014FC0                            ; ---------------------------------------------------------------------------
00014FC0                            ; Subroutine to    horizontally pan the camera view ahead of the player
00014FC0                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00014FC0                            ; ---------------------------------------------------------------------------
00014FC0                            
00014FC0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00014FC0                            
00014FC0                            
00014FC0                            Sonic_PanCamera:
00014FC0 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00014FC4 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00014FC8 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
00014FCA 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00014FCC                            
00014FCC                                @abs_inertia:
00014FCC                            
00014FCC                            ; These lines were intended to prevent the Camera from panning while
00014FCC                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00014FCC                            ; However, given that no such object exists in Sonic 1, I just went
00014FCC                            ; ahead and commented these out.
00014FCC                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
00014FCC                                   ; bne.s	@reset_pan                   ; if not, branch
00014FCC                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00014FCC                                    ;bcs.s    @reset_pan                ; if so, branch
00014FCC                            
00014FCC                            ; These lines aren't part of the original routine; I added them myself.
00014FCC                            ; If you've ported the Spin Dash, uncomment the following lines of code
00014FCC                            ; to allow the camera to pan ahead while charging the Spin Dash:
00014FCC 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00014FD0 6700                               beq.s    @skip                    ; if not, branch
00014FD2 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00014FD8 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00014FDA 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00014FDC                            
00014FDC                                @skip:
00014FDC 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00014FE0 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
00014FE2 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00014FE6 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00014FE8                            
00014FE8                                @pan_right:
00014FE8 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00014FEA 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00014FEE 6500                               bcs.s    @update_pan                ; if not, branch
00014FF0 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
00014FF4 6000                               bra.s    @update_pan                ; branch
00014FF6                            ; ---------------------------------------------------------------------------
00014FF6                            
00014FF6                                @pan_left:
00014FF6 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00014FF8 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00014FFC 6400                               bcc.s    @update_pan                ; if not, branch
00014FFE 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
00015002 6000                               bra.s    @update_pan                ; branch
00015004                            ; ---------------------------------------------------------------------------
00015004                            
00015004                                @reset_pan:
00015004 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015008 6700                               beq.s    @update_pan                ; if so, branch
0001500A 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
0001500C                                 
0001500C                                @reset_right:
0001500C 5441                               addq.w    #2,d1                    ; add 2 to the pan value
0001500E 6000                               bra.s    @update_pan                ; branch
00015010                            ; ---------------------------------------------------------------------------
00015010                            
00015010                                @reset_left:
00015010 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015012                            
00015012                                @update_pan:
00015012 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015016 4E75                               rts                                ; return
00015018                                 
00015018                            ; End of function Sonic_PanCamera
00015018                            
00015018                            
00015018                            ; ===========================================================================
00015018                            
00015018                            loc_12C58:
00015018 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
0001501C 6600                       		bne.s	loc_12C64	; if yes, branch
0001501E 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015024                            
00015024                            loc_12C64:
00015024 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
0001502A 6600                       		bne.s	loc_12C7E	; if yes, branch
0001502C 7000                       		moveq	#0,d0
0001502E 1028 0022                  		move.b	obStatus(a0),d0
00015032 0240 0006                  		andi.w	#6,d0
00015036 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001503A 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
0001503E                            
0001503E                            loc_12C7E:
0001503E 6100                       		bsr.s	Sonic_Display
00015040 6100 0000                  		bsr.w	Sonic_RecordPosition
00015044 6100 0000                  		bsr.w	Sonic_Water
00015048 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
0001504E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00015054 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015058 6700                       		beq.s	loc_12CA6
0001505A 4A28 001C                  		tst.b	obAnim(a0)
0001505E 6600                       		bne.s	loc_12CA6
00015060 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015066                            
00015066                            loc_12CA6:
00015066 6100 0000                  		bsr.w	Sonic_Animate
0001506A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001506E 6B00                       		bmi.s	loc_12CB6
00015070 4EB9 0000 0000             		jsr	(ReactToItem).l
00015076                            
00015076                            loc_12CB6:
00015076 6100 0000                  		bsr.w	Sonic_Loops
0001507A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001507E 4E75                       		rts	
00015080                            ; ===========================================================================
00015080 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
00015082 0000                       		dc.w Sonic_MdJump-Sonic_Modes
00015084 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
00015086 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
00015088                            ; ---------------------------------------------------------------------------
00015088                            ; Music	to play	after invincibility wears off
00015088                            ; ---------------------------------------------------------------------------
00015088                            MusicList2:
00015088 00                         		dc.b bgm_GHZ
00015089 00                         		dc.b bgm_LZ
0001508A 00                         		dc.b bgm_MZ
0001508B 00                         		dc.b bgm_SLZ
0001508C 00                         		dc.b bgm_SYZ
0001508D 00                         		dc.b bgm_SBZ
0001508E                            		; The ending doesn't get an entry
0001508E                            		even
0001508E                            
0001508E                            		include	"_incObj\Sonic Display.asm"
0001508E                            ; ---------------------------------------------------------------------------
0001508E                            ; Subroutine to display Sonic and set music
0001508E                            ; ---------------------------------------------------------------------------
0001508E                            
0001508E                            Sonic_Display:
0001508E 3028 0030                  		move.w    flashtime(a0),d0
00015092 6700                       		beq.s    @showAfterImage
00015094 5368 0030                  		subq.w    #1,flashtime(a0)
00015098 E648                               	lsr.w    #3,d0
0001509A 6400                               	bcc.s    @chkinvincible
0001509C                            
0001509C                            	@showAfterImage:
0001509C 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000150A0 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000150A2 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000150A4 4440                       		neg        d0                    ; if not, negate it
000150A6                            
000150A6                            	@AfterImage_Start:        
000150A6 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000150AA 6700                       		beq.s	@display	; if not, don't show the After Image
000150AC                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000150AC                            		;blt.s    @display	; if not, don't show the After Image
000150AC                            	
000150AC                            	@AfterImage_Start2:    
000150AC 6100 A912                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000150B0 6600                               	bne.s    @display    ; if not have, don't load the After Image
000150B2 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000150B6 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000150BC 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000150C2 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000150C8                            
000150C8                                	@display:
000150C8 4EB9 0000 F426                     	jsr    (DisplaySprite).l
000150CE                            
000150CE                            	@chkinvincible:
000150CE 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000150D2 6700                       		beq.s	@chkshoes	; if not, branch
000150D4 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000150D8 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000150DA 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000150DE 6600                       		bne.s	@chkshoes
000150E0 4A38 F7AA                  		tst.b	(f_lockscreen).w
000150E4 6600                       		bne.s	@removeinvincible
000150E6 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000150EC 6500                       		bcs.s	@removeinvincible	
000150EE 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
000150F4 6700                       		beq.s	@removeinvincible	
000150F6 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
000150FC 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
000150FE 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
00015102 6000                       		bra.s	@playtune
00015104                            		
00015104                            @haveshoes:		
00015104 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015108                            
00015108                            @playtune: 
00015108 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
0001510E                            
0001510E                            	@removeinvincible:
0001510E 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015114                            
00015114                            	@chkshoes:
00015114 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015118 6700                       		beq.s	@exit		; if not, branch
0001511A 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
0001511E 6700                       		beq.s	@exit
00015120 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015124 6600                       		bne.s	@exit
00015126 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001512C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015132 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015138 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
0001513E 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
00015144 6700                       		beq.s	@exit
00015146 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
0001514C 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
0001514E 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
00015152 6000                       		bra.b	@playtune2
00015154                            @isinvincible:		
00015154 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015158                            @playtune2:
00015158 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
0001515E                            		
0001515E                            	@exit:
0001515E 4E75                       		rts	
0001515E 4E75                       		rts	
00015160                            		include	"_incObj\Sonic RecordPosition.asm"
00015160                            ; ---------------------------------------------------------------------------
00015160                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015160                            ; ---------------------------------------------------------------------------
00015160                            
00015160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015160                            
00015160                            
00015160                            Sonic_RecordPosition:
00015160 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015164 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015168 43F1 0000                  		lea	(a1,d0.w),a1
0001516C 32E8 0008                  		move.w	obX(a0),(a1)+
00015170 32E8 000C                  		move.w	obY(a0),(a1)+
00015174 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015178 4E75                       		rts	
0001517A                            ; End of function Sonic_RecordPosition
0001517A                            ; End of function Sonic_RecordPosition
0001517A                            		include	"_incObj\Sonic Water.asm"
0001517A                            ; ---------------------------------------------------------------------------
0001517A                            ; Subroutine for Sonic when he's underwater
0001517A                            ; ---------------------------------------------------------------------------
0001517A                            
0001517A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001517A                            
0001517A                            
0001517A                            Sonic_Water:
0001517A 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
00015180 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015182 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015188 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
0001518A                            
0001518A                            	Sonic_Water_Exit:
0001518A 4E75                       		rts	
0001518C                            ; ===========================================================================
0001518C                            
0001518C                            	Sonic_Water_LZ:
0001518C 3038 F646                  		move.w	(v_waterpos1).w,d0
00015190 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015194 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015198 6000 0000                  		bra	WaterStatus
0001519C                            	WaterTagforMZ:
0001519C 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000151A2 6700 0000                  		beq.w	Abovewater	; if yes, branch
000151A6                            		;move.w #$F,d0             ;TIS Length ($F = full line)
000151A6                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000151A6                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000151A6                            	;	jsr	Palload_Loop
000151A6                            	WaterStatus:
000151A6 08E8 0006 0022             		bset	#6,obStatus(a0)
000151AC 6600 FFDC                  		bne.w	Sonic_Water_Exit
000151B0 6100 0000                  		bsr.w	ResumeMusic
000151B4 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000151BA 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000151C0 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000151C6 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000151CC 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000151D2 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000151D8 E0E8 0010                  		asr	obVelX(a0)
000151DC E0E8 0012                  		asr	obVelY(a0)
000151E0 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000151E4 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000151E8                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000151E8 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000151F8 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000151FE 6600 0000                  		bne.w	@return
00015202                            		
00015202                            		
00015202                            	@return:
00015202 4E75                       		rts
00015204                            ; ===========================================================================
00015204                            
00015204                            Abovewater:
00015204 08A8 0006 0022             		bclr	#6,obStatus(a0)
0001520A 6700 FF7E                  		beq.w	Sonic_Water_Exit
0001520E 6100 0000                  		bsr.w	ResumeMusic
00015212 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015218                            
00015218 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001521E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015224 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001522A E1E8 0012                  		asl	obVelY(a0)
0001522E 6700 FF5A                  		beq.w	Sonic_Water_Exit
00015232 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015238 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001523E 6E00                       		bgt.s	@belowmaxspeed
00015240 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015246                            
00015246                            	@belowmaxspeed:
00015250                            ; End of function Sonic_Water
00015250                            ; End of function Sonic_Water
00015250                            		include "_incObj\03 Hangable Sprite.asm"
00015250                            ; ===========================================================================
00015250                            ; ----------------------------------------------------------------------------
00015250                            ; Object 03 - Invisible sprite that you can hang on to
00015250                            ; ----------------------------------------------------------------------------
00015250                            ; Sprite_2C92C:
00015250                            Obj03:
00015250 7000                       	moveq    #0,d0
00015252 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015256 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001525A 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001525E                            ; ===========================================================================
0001525E                            ; off_2C93A:
0001525E                            Obj03_Index:
0001525E 0000                           dc.w Obj03_Main-Obj03_Index
00015260 0000                               dc.w Obj03_Init-Obj03_Index
00015262                            ; ===========================================================================
00015262                            ; loc_2C93E:
00015262                            Obj03_Init:
00015262 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015266 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001526C 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015272 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015278                            ; loc_2C954:
00015278                            Obj03_Main:
00015278 45E8 0030                      lea    $30(a0),a2
0001527C 43F8 D000                      lea    (v_player).w,a1 ; a1=character
00015280 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015284 6100                           bsr.s    Obj03_Check
00015286                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015286                            ;    addq.w    #1,a2                          ;disabled
00015286                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015286                            ;    bsr.s    Obj03_Check         	;disabled
00015286 4EF9 0000 0000             	jmp		bonu_chkdel
0001528C                            ; ===========================================================================
0001528C                            ; loc_2C972:
0001528C                            Obj03_Check:
0001528C 4A12                       		tst.b	(a2)
0001528E 6700                       		beq.s	loc_2C9A0
00015290 0200 0070                  		andi.b	#btnABC,d0
00015294 6700 0000                  		beq.w	Obj03_Check_End
00015298 4238 F7C8                  		clr.b	f_lockmulti.w
0001529C 4212                       		clr.b	(a2)
0001529E 157C 0012 0002             		move.b	#$12,2(a2)
000152A4 0240 0F00                  		andi.w	#$F00,d0
000152A8 6700                       		beq.s	loc_2C954
000152AA 157C 003C 0002             		move.b	#$3C,2(a2)
000152B0                            	
000152B0                            loc_2C954:
000152B0 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000152B6 6000 0000                  		bra.w	Obj03_Check_End
000152BA                            ; ===========================================================================
000152BA                            
000152BA                            loc_2C9A0:
000152BA 4A2A 0002                  		tst.b	2(a2)
000152BE 6700                       		beq.s	loc_2C972
000152C0 532A 0002                  		subq.b	#1,2(a2)
000152C4 6600 0000                  		bne.w	Obj03_Check_End
000152C8                            
000152C8                            loc_2C972:
000152C8 3029 0008                  		move.w	obX(a1),d0
000152CC 9068 0008                  		sub.w	obX(a0),d0
000152D0 0640 0018                  		addi.w	#$18,d0
000152D4 0C40 0030                  		cmpi.w	#$30,d0
000152D8 6400 0000                  		bhs.w	Obj03_Check_End
000152DC 3229 000C                  		move.w	obY(a1),d1
000152E0 9268 000C                  		sub.w	obY(a0),d1
000152E4 0C41 0010                  		cmpi.w	#$10,d1
000152E8 6400 0000                  		bhs.w	Obj03_Check_End
000152EC 4A38 F7C8                  		tst.b	f_lockmulti.w
000152F0 6B00                       		bmi.s	Obj03_Check_End
000152F2 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000152F8 6400                       		bhs.s	Obj03_Check_End
000152FA 4A78 FFFA                  		tst.w	(f_debugmode).w
000152FE 6600                       		bne.s	Obj03_Check_End
00015300 4269 0010                  		clr.w	x_vel(a1)
00015304 4269 0012                  		clr.w	y_vel(a1)
00015308 4269 0020                  		clr.w	obInertia(a1)
0001530C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015312 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015318 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001531E 14BC 0001                  		move.b	#1,(a2)
00015322                            
00015322                            ; return_2CA08:
00015322                            Obj03_Check_End:
00015322 4E75                       		rts
00015322 4E75                       		rts
00015324                            
00015324                            ; ===========================================================================
00015324                            ; ---------------------------------------------------------------------------
00015324                            ; Modes	for controlling	Sonic
00015324                            ; ---------------------------------------------------------------------------
00015324                            
00015324                            Sonic_MdNormal:
00015324 6100 0000                  		bsr.w	Sonic_Peelout
00015328                            		;bsr.w	Sonic_SpinDash
00015328 6100 0000                  		bsr.w	Sonic_Jump
0001532C 6100 0000                  		bsr.w	Sonic_SlopeResist
00015330 6100 0000                  		bsr.w	Sonic_Move
00015334 6100 0000                  		bsr.w	Sonic_Roll
00015338 6100 0000                  		bsr.w	Sonic_LevelBound
0001533C 4EB9 0000 F412             		jsr	(SpeedToPos).l
00015342 6100 0000                  		bsr.w	Sonic_AnglePos
00015346 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001534A 4E75                       		rts	
0001534C                            
0001534C                            ; ===========================================================================
0001534C                            
0001534C                            Sonic_MdJump:
0001534C 6100 0000                  		bsr.w   Sonic_AirRoll
00015350 6100 0000                  		bsr.w	Sonic_JumpHeight
00015354 6100 0000                  		bsr.w	Sonic_JumpDirection
00015358 6100 0000                  		bsr.w	Sonic_LevelBound
0001535C 4EB9 0000 F3DA             		jsr	(ObjectFall).l
00015362 0828 0006 0022             		btst	#6,obStatus(a0)
00015368 6700                       		beq.s	loc_12E5C
0001536A 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015370                            
00015370                            loc_12E5C:
00015370 6100 0000                  		bsr.w	Sonic_JumpAngle
00015374 6100 0000                  		bsr.w	Sonic_Floor
00015378 4E75                       		rts	
0001537A                            ; ===========================================================================
0001537A                            
0001537A                            Sonic_MdRoll:
0001537A 6100 0000                  		bsr.w	Sonic_Jump
0001537E 6100 0000                  		bsr.w	Sonic_RollRepel
00015382 6100 0000                  		bsr.w	Sonic_RollSpeed
00015386 6100 0000                  		bsr.w	Sonic_LevelBound
0001538A 4EB9 0000 F412             		jsr	(SpeedToPos).l
00015390 6100 0000                  		bsr.w	Sonic_AnglePos
00015394 6100 0000                  		bsr.w	Sonic_SlopeRepel
00015398 4E75                       		rts	
0001539A                            ; ===========================================================================
0001539A                            
0001539A                            Sonic_MdJump2:
0001539A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001539E 6100 0000                  		bsr.w	Sonic_JumpDirection
000153A2 6100 0000                  		bsr.w	Sonic_LevelBound
000153A6 4EB9 0000 F3DA             		jsr	(ObjectFall).l
000153AC 0828 0006 0022             		btst	#6,obStatus(a0)
000153B2 6700                       		beq.s	loc_12EA6
000153B4 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000153BA                            
000153BA                            loc_12EA6:
000153BA 6100 0000                  		bsr.w	Sonic_JumpAngle
000153BE 6100 0000                  		bsr.w	Sonic_Floor
000153C2 4E75                       		rts	
000153C4                            
000153C4                            		include	"_incObj\Sonic Move.asm"
000153C4                            ; ---------------------------------------------------------------------------
000153C4                            ; Subroutine to	make Sonic walk/run
000153C4                            ; ---------------------------------------------------------------------------
000153C4                            
000153C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153C4                            
000153C4                            
000153C4                            Sonic_Move:
000153C4 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000153C8 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000153CC 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000153D0 4A38 F7CA                  		tst.b	(f_jumponly).w
000153D4 6600 0000                  		bne.w	loc_12FEE
000153D8 4A68 003E                  		tst.w	$3E(a0)
000153DC 6600 0000                  		bne.w	Sonic_ResetScr
000153E0 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000153E6 6700                       		beq.s	@notleft	; if not, branch
000153E8 6100 0000                  		bsr.w	Sonic_MoveLeft
000153EC                            
000153EC                            	@notleft:
000153EC 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000153F2 6700                       		beq.s	@notright	; if not, branch
000153F4 6100 0000                  		bsr.w	Sonic_MoveRight
000153F8                            
000153F8                            	@notright:
000153F8 1028 0026                  		move.b	obAngle(a0),d0
000153FC 0600 0020                  		addi.b	#$20,d0
00015400 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015404 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015408 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001540C 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015410 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015416 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001541C 0828 0003 0022             		btst	#3,obStatus(a0)
00015422 6700                       		beq.s	Sonic_Balance
00015424 7000                       		moveq	#0,d0
00015426 1028 003D                  		move.b	$3D(a0),d0
0001542A ED48                       		lsl.w	#6,d0
0001542C 43F8 D000                  		lea	(v_objspace).w,a1
00015430 43F1 0000                  		lea	(a1,d0.w),a1
00015434 4A29 0022                  		tst.b	obStatus(a1)
00015438 6B00                       		bmi.s	Sonic_LookUp
0001543A 7200                       		moveq	#0,d1
0001543C 1229 0014                  		move.b	obActWid(a1),d1
00015440 3401                       		move.w	d1,d2
00015442 D442                       		add.w	d2,d2
00015444 5942                       		subq.w	#4,d2
00015446 D268 0008                  		add.w	obX(a0),d1
0001544A 9269 0008                  		sub.w	obX(a1),d1
0001544E 0C41 0004                  		cmpi.w	#4,d1
00015452 6D00                       		blt.s	loc_12F6A
00015454 B242                       		cmp.w	d2,d1
00015456 6C00                       		bge.s	loc_12F5A
00015458 6000                       		bra.s	Sonic_LookUp
0001545A                            ; ===========================================================================
0001545A                            
0001545A                            Sonic_Balance:
0001545A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015460 0C41 000C                  		cmpi.w	#$C,d1
00015464 6D00                       		blt.s	Sonic_LookUp
00015466 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001546C 6600                       		bne.s	loc_12F62
0001546E                            
0001546E                            loc_12F5A:
0001546E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015474 6000                       		bra.s	loc_12F70
00015476                            ; ===========================================================================
00015476                            
00015476                            loc_12F62:
00015476 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001547C 6600                       		bne.s	Sonic_LookUp
0001547E                            
0001547E                            loc_12F6A:
0001547E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015484                            
00015484                            loc_12F70:
00015484 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001548A 6000 0000                  		bra.w	Sonic_ResetScr
0001548E                            ; ===========================================================================
0001548E                            
0001548E                            Sonic_LookUp:
0001548E 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00015494 6700                       		beq.s	Sonic_Duck	; if not, branch
00015496 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
0001549C 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
000154A2 6700                       		beq.s	loc_12FC2
000154A4 5478 F73E                  		addq.w	#2,(v_lookshift).w
000154A8 6000                       		bra.s	loc_12FC2
000154AA                            ; ===========================================================================
000154AA                            
000154AA                            Sonic_Duck:
000154AA 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000154B0 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000154B2 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
000154B8 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
000154BE 6700                       		beq.s	loc_12FC2
000154C0 5578 F73E                  		subq.w	#2,(v_lookshift).w
000154C4 6000                       		bra.s	loc_12FC2
000154C6                            ; =============================================
000154C6                            ; ===========================================================================
000154C6                            
000154C6                            Sonic_ResetScr:
000154C6 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000154CC                            		
000154CC                            Sonic_ResetScr_Part2:
000154CC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000154D2 6700                       		beq.s	loc_12FC2	; if yes, branch
000154D4 6400                       		bcc.s	loc_12FBE
000154D6 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000154DA                            
000154DA                            loc_12FBE:
000154DA 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000154DE                            
000154DE                            loc_12FC2:
000154DE 1038 F602                  		move.b	(v_jpadhold2).w,d0
000154E2 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000154E6 6600                       		bne.s	loc_12FEE	; if yes, branch
000154E8 3028 0020                  		move.w	obInertia(a0),d0
000154EC 6700                       		beq.s	loc_12FEE
000154EE 6B00                       		bmi.s	loc_12FE2
000154F0 9045                       		sub.w	d5,d0
000154F2 6400                       		bcc.s	loc_12FDC
000154F4 303C 0000                  		move.w	#0,d0
000154F8                            
000154F8                            loc_12FDC:
000154F8 3140 0020                  		move.w	d0,obInertia(a0)
000154FC 6000                       		bra.s	loc_12FEE
000154FE                            ; ===========================================================================
000154FE                            
000154FE                            loc_12FE2:
000154FE D045                       		add.w	d5,d0
00015500 6400                       		bcc.s	loc_12FEA
00015502 303C 0000                  		move.w	#0,d0
00015506                            
00015506                            loc_12FEA:
00015506 3140 0020                  		move.w	d0,obInertia(a0)
0001550A                            
0001550A                            loc_12FEE:
0001550A 4A28 0039                  		tst.b	$39(a0) 	;Peelout
0001550E 6600                       		bne.s	loc_1300C 	;Peelout
00015510 1028 0026                  		move.b	obAngle(a0),d0
00015514 4EB9 0000 3B42             		jsr	(CalcSine).l
0001551A C3E8 0020                  		muls.w	obInertia(a0),d1
0001551E E081                       		asr.l	#8,d1
00015520 3141 0010                  		move.w	d1,obVelX(a0)
00015524 C1E8 0020                  		muls.w	obInertia(a0),d0
00015528 E080                       		asr.l	#8,d0
0001552A 3140 0012                  		move.w	d0,obVelY(a0)
0001552E                            
0001552E                            loc_1300C:
0001552E 1028 0026                  		move.b	obAngle(a0),d0
00015532 0600 0040                  		addi.b	#$40,d0
00015536 6B00                       		bmi.s	locret_1307C
00015538 123C 0040                  		move.b	#$40,d1
0001553C 4A68 0020                  		tst.w	obInertia(a0)
00015540 6700                       		beq.s	locret_1307C
00015542 6B00                       		bmi.s	loc_13024
00015544 4441                       		neg.w	d1
00015546                            
00015546                            loc_13024:
00015546 1028 0026                  		move.b	obAngle(a0),d0
0001554A D001                       		add.b	d1,d0
0001554C 3F00                       		move.w	d0,-(sp)
0001554E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015552 301F                       		move.w	(sp)+,d0
00015554 4A41                       		tst.w	d1
00015556 6A00                       		bpl.s	locret_1307C
00015558 E141                       		asl.w	#8,d1
0001555A 0600 0020                  		addi.b	#$20,d0
0001555E 0200 00C0                  		andi.b	#$C0,d0
00015562 6700                       		beq.s	loc_13078
00015564 0C00 0040                  		cmpi.b	#$40,d0
00015568 6700                       		beq.s	loc_13066
0001556A 0C00 0080                  		cmpi.b	#$80,d0
0001556E 6700                       		beq.s	loc_13060
00015570 D368 0010                  		add.w	d1,obVelX(a0)
00015574 08E8 0005 0022             		bset	#5,obStatus(a0)
0001557A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015580 4E75                       		rts	
00015582                            ; ===========================================================================
00015582                            
00015582                            loc_13060:
00015582 9368 0012                  		sub.w	d1,obVelY(a0)
00015586 4E75                       		rts	
00015588                            ; ===========================================================================
00015588                            
00015588                            loc_13066:
00015588 9368 0010                  		sub.w	d1,obVelX(a0)
0001558C 08E8 0005 0022             		bset	#5,obStatus(a0)
00015592 317C 0000 0020             		move.w	#0,obInertia(a0)
00015598 4E75                       		rts	
0001559A                            ; ===========================================================================
0001559A                            
0001559A                            loc_13078:
0001559A D368 0012                  		add.w	d1,obVelY(a0)
0001559E                            
0001559E                            locret_1307C:
0001559E 4E75                       		rts	
000155A0                            ; End of function Sonic_Move
000155A0                            
000155A0                            
000155A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155A0                            
000155A0                            
000155A0                            Sonic_MoveLeft:
000155A0 3028 0020                  		move.w	obInertia(a0),d0
000155A4 6700                       		beq.s	loc_13086
000155A6 6A00                       		bpl.s	loc_130B2
000155A8                            
000155A8                            loc_13086:
000155A8 08E8 0000 0022             		bset	#0,$22(a0)
000155AE 6600                       		bne.s	loc_1309A
000155B0 08A8 0005 0022             		bclr	#5,$22(a0)
000155B6 117C 0001 001D             		move.b	#1,$1D(a0)
000155BC                            
000155BC                            loc_1309A:
000155BC 9045                       		sub.w	d5,d0
000155BE 3206                       		move.w	d6,d1
000155C0 4441                       		neg.w	d1
000155C2 B041                       		cmp.w	d1,d0
000155C4 6E00                       		bgt.s	loc_130A6
000155C6 D045                       		add.w	d5,d0
000155C8 B041                       		cmp.w	d1,d0
000155CA 6F00                       		ble.s	loc_130A6
000155CC 3001                       		move.w	d1,d0
000155CE                            
000155CE                            loc_130A6:
000155CE 3140 0020                  		move.w	d0,obInertia(a0)
000155D2 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000155D8 4E75                       		rts
000155DA                            ; ===========================================================================
000155DA                            
000155DA                            loc_130B2:
000155DA 9044                       		sub.w	d4,d0
000155DC 6400                       		bcc.s	loc_130BA
000155DE 303C FF80                  		move.w	#-$80,d0
000155E2                            
000155E2                            loc_130BA:
000155E2 3140 0020                  		move.w	d0,obInertia(a0)
000155E6 1228 0026                  		move.b	obAngle(a0),d1
000155EA 0601 0020                  		addi.b	#$20,d1
000155EE 0201 00C0                  		andi.b	#$C0,d1
000155F2 6600                       		bne.s	locret_130E8
000155F4 0C40 0400                  		cmpi.w	#$400,d0
000155F8 6D00                       		blt.s	locret_130E8
000155FA 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015600 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015610 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015616 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
0001561C                            		
0001561C                            locret_130E8:
0001561C 4E75                       		rts	
0001561E                            ; End of function Sonic_MoveLeft
0001561E                            
0001561E                            
0001561E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001561E                            
0001561E                            
0001561E                            Sonic_MoveRight:
0001561E 3028 0020                  		move.w	obInertia(a0),d0
00015622 6B00                       		bmi.s	loc_13118
00015624 08A8 0000 0022             		bclr	#0,$22(a0)
0001562A 6700                       		beq.s	loc_13104
0001562C 08A8 0005 0022             		bclr	#5,$22(a0)
00015632 117C 0001 001D             		move.b	#1,$1D(a0)
00015638                            
00015638                            loc_13104:
00015638 D045                       		add.w	d5,d0
0001563A B046                       		cmp.w	d6,d0
0001563C 6D00                       		blt.s	loc_1310C
0001563E 9045                       		sub.w	d5,d0
00015640 B046                       		cmp.w	d6,d0
00015642 6C00                       		bge.s	loc_1310C
00015644 3006                       		move.w	d6,d0
00015646                            
00015646                            loc_1310C:
00015646 3140 0020                  		move.w	d0,obInertia(a0)
0001564A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015650 4E75                       		rts
00015652                            ; ===========================================================================
00015652                            
00015652                            loc_13118:
00015652 D044                       		add.w	d4,d0
00015654 6400                       		bcc.s	loc_13120
00015656 303C 0080                  		move.w	#$80,d0
0001565A                            
0001565A                            loc_13120:
0001565A 3140 0020                  		move.w	d0,obInertia(a0)
0001565E 1228 0026                  		move.b	obAngle(a0),d1
00015662 0601 0020                  		addi.b	#$20,d1
00015666 0201 00C0                  		andi.b	#$C0,d1
0001566A 6600                       		bne.s	locret_1314E
0001566C 0C40 FC00                  		cmpi.w	#-$400,d0
00015670 6E00                       		bgt.s	locret_1314E
00015672 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015678 08E8 0000 0022             		bset	#0,obStatus(a0)
00015688 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001568E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015694                            		
00015694                            locret_1314E:
00015694 4E75                       		rts	
00015696                            ; End of function Sonic_MoveRight
00015696                            ; End of function Sonic_MoveRight
00015696                            		include	"_incObj\Sonic RollSpeed.asm"
00015696                            ; ---------------------------------------------------------------------------
00015696                            ; Subroutine to	change Sonic's speed as he rolls
00015696                            ; ---------------------------------------------------------------------------
00015696                            
00015696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015696                            
00015696                            
00015696                            Sonic_RollSpeed:
00015696 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001569A E346                       		asl.w	#1,d6
0001569C 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
0001569E 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000156A2 E444                       		asr.w	#2,d4
000156A4 4A38 F7CA                  		tst.b	(f_jumponly).w
000156A8 6600 0000                  		bne.w	loc_131CC
000156AC 4A68 003E                  		tst.w	$3E(a0)
000156B0 6600                       		bne.s	@notright
000156B2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000156B8 6700                       		beq.s	@notleft	; if not, branch
000156BA 6100 0000                  		bsr.w	Sonic_RollLeft
000156BE                            
000156BE                            	@notleft:
000156BE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000156C4 6700                       		beq.s	@notright	; if not, branch
000156C6 6100 0000                  		bsr.w	Sonic_RollRight
000156CA                            
000156CA                            	@notright:
000156CA 3028 0020                  		move.w	obInertia(a0),d0
000156CE 6700                       		beq.s	loc_131AA
000156D0 6B00                       		bmi.s	loc_1319E
000156D2 9045                       		sub.w	d5,d0
000156D4 6400                       		bcc.s	loc_13198
000156D6 303C 0000                  		move.w	#0,d0
000156DA                            
000156DA                            loc_13198:
000156DA 3140 0020                  		move.w	d0,obInertia(a0)
000156DE 6000                       		bra.s	loc_131AA
000156E0                            ; ===========================================================================
000156E0                            
000156E0                            loc_1319E:
000156E0 D045                       		add.w	d5,d0
000156E2 6400                       		bcc.s	loc_131A6
000156E4 303C 0000                  		move.w	#0,d0
000156E8                            
000156E8                            loc_131A6:
000156E8 3140 0020                  		move.w	d0,obInertia(a0)
000156EC                            
000156EC                            loc_131AA:
000156EC 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
000156F0 6600                       		bne.s	loc_131CC	; if yes, branch
000156F2 08A8 0002 0022             		bclr	#2,obStatus(a0)
000156F8 117C 0013 0016             		move.b	#$13,obHeight(a0)
000156FE 117C 0009 0017             		move.b	#9,obWidth(a0)
00015704 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001570A 5B68 000C                  		subq.w	#5,obY(a0)
0001570E                            
0001570E                            loc_131CC:
0001570E 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015714 6700                       		beq.s	@cont2
00015716 6400                       		bcc.s	@cont1
00015718 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001571C                            		
0001571C                            @cont1:
0001571C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015720                            		
00015720                            @cont2:
00015720 1028 0026                  		move.b	obAngle(a0),d0
00015724 4EB9 0000 3B42             		jsr	(CalcSine).l
0001572A C1E8 0020                  		muls.w	obInertia(a0),d0
0001572E E080                       		asr.l	#8,d0
00015730 3140 0012                  		move.w	d0,obVelY(a0)
00015734 C3E8 0020                  		muls.w	obInertia(a0),d1
00015738 E081                       		asr.l	#8,d1
0001573A 0C41 1000                  		cmpi.w	#$1000,d1
0001573E 6F00                       		ble.s	loc_131F0
00015740 323C 1000                  		move.w	#$1000,d1
00015744                            
00015744                            loc_131F0:
00015744 0C41 F000                  		cmpi.w	#-$1000,d1
00015748 6C00                       		bge.s	loc_131FA
0001574A 323C F000                  		move.w	#-$1000,d1
0001574E                            
0001574E                            loc_131FA:
0001574E 3141 0010                  		move.w	d1,obVelX(a0)
00015752 6000 FDDA                  		bra.w	loc_1300C
00015756                            ; End of function Sonic_RollSpeed
00015756                            
00015756                            
00015756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015756                            
00015756                            
00015756                            Sonic_RollLeft:
00015756 3028 0020                  		move.w	obInertia(a0),d0
0001575A 6700                       		beq.s	loc_1320A
0001575C 6A00                       		bpl.s	loc_13218
0001575E                            
0001575E                            loc_1320A:
0001575E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015764 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001576A 4E75                       		rts	
0001576C                            ; ===========================================================================
0001576C                            
0001576C                            loc_13218:
0001576C 9044                       		sub.w	d4,d0
0001576E 6400                       		bcc.s	loc_13220
00015770 303C FF80                  		move.w	#-$80,d0
00015774                            
00015774                            loc_13220:
00015774 3140 0020                  		move.w	d0,obInertia(a0)
00015778 4E75                       		rts	
0001577A                            ; End of function Sonic_RollLeft
0001577A                            
0001577A                            
0001577A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001577A                            
0001577A                            
0001577A                            Sonic_RollRight:
0001577A 3028 0020                  		move.w	obInertia(a0),d0
0001577E 6B00                       		bmi.s	loc_1323A
00015780 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015786 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001578C 4E75                       		rts	
0001578E                            ; ===========================================================================
0001578E                            
0001578E                            loc_1323A:
0001578E D044                       		add.w	d4,d0
00015790 6400                       		bcc.s	loc_13242
00015792 303C 0080                  		move.w	#$80,d0
00015796                            
00015796                            loc_13242:
00015796 3140 0020                  		move.w	d0,obInertia(a0)
0001579A 4E75                       		rts	
0001579C                            ; End of function Sonic_RollRight
0001579C                            ; End of function Sonic_RollRight
0001579C                            		include	"_incObj\Sonic JumpDirection.asm"
0001579C                            ; ---------------------------------------------------------------------------
0001579C                            ; Subroutine to	change Sonic's direction while jumping
0001579C                            ; ---------------------------------------------------------------------------
0001579C                            
0001579C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001579C                            
0001579C                            
0001579C                            Sonic_JumpDirection:
0001579C 3C38 F760                  		move.w	($FFFFF760).w,d6
000157A0 3A38 F762                  		move.w	($FFFFF762).w,d5
000157A4 E345                       		asl.w	#1,d5
000157A6 3028 0010                  		move.w	$10(a0),d0	
000157AA 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000157B0 6700                       		beq.s	loc_13278; if not, branch	
000157B2 08E8 0000 0022             		bset	#0,$22(a0)	
000157B8 9045                       		sub.w	d5,d0	
000157BA 3206                       		move.w	d6,d1	
000157BC 4441                       		neg.w	d1	
000157BE B041                       		cmp.w	d1,d0	
000157C0 6E00                       		bgt.s	loc_13278	
000157C2 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
000157C4 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
000157C6 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
000157C8 3001                       		move.w	d1,d0
000157CA                            
000157CA                            loc_13278:
000157CA 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
000157D0 6700                       		beq.s	Obj01_JumpMove; if not, branch	
000157D2 08A8 0000 0022             		bclr	#0,$22(a0)	
000157D8 D045                       		add.w	d5,d0	
000157DA B046                       		cmp.w	d6,d0	
000157DC 6D00                       		blt.s	Obj01_JumpMove
000157DE 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
000157E0 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
000157E2 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
000157E4 3006                       		move.w	d6,d0
000157E6                            
000157E6                            Obj01_JumpMove:
000157E6 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
000157EA                            
000157EA                            Obj01_ResetScr2:
000157EA 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
000157F0 6700                       		beq.s	loc_132A4	; if yes, branch
000157F2 6400                       		bcc.s	loc_132A0
000157F4 5878 F73E                  		addq.w	#4,(v_lookshift).w
000157F8                            
000157F8                            loc_132A0:
000157F8 5578 F73E                  		subq.w	#2,(v_lookshift).w
000157FC                            
000157FC                            loc_132A4:
000157FC 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015802 6500                       		bcs.s	locret_132D2	; if yes, branch
00015804 3028 0010                  		move.w	obVelX(a0),d0
00015808 3200                       		move.w	d0,d1
0001580A EA41                       		asr.w	#5,d1
0001580C 6700                       		beq.s	locret_132D2
0001580E 6B00                       		bmi.s	loc_132C6
00015810 9041                       		sub.w	d1,d0
00015812 6400                       		bcc.s	loc_132C0
00015814 303C 0000                  		move.w	#0,d0
00015818                            
00015818                            loc_132C0:
00015818 3140 0010                  		move.w	d0,obVelX(a0)
0001581C 4E75                       		rts	
0001581E                            ; ===========================================================================
0001581E                            
0001581E                            loc_132C6:
0001581E 9041                       		sub.w	d1,d0
00015820 6500                       		bcs.s	loc_132CE
00015822 303C 0000                  		move.w	#0,d0
00015826                            
00015826                            loc_132CE:
00015826 3140 0010                  		move.w	d0,obVelX(a0)
0001582A                            
0001582A                            locret_132D2:
0001582A 4E75                       		rts	
0001582C                            ; End of function Sonic_JumpDirection
0001582C                            ; End of function Sonic_JumpDirection
0001582C                            		include "_incObj\Sonic Peelout.asm"
0001582C                            ; ---------------------------------------------------------------------------
0001582C                            ; Subroutine to make Sonic perform a peelout
0001582C                            ; ---------------------------------------------------------------------------
0001582C                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
0001582C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582C                            
0001582C                            Sonic_Peelout:
0001582C 0828 0001 0039             		btst	#1,$39(a0)
00015832 6600                       		bne.s	SCDPeelout_Launch
00015834 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
0001583A 6600                       		bne.s	@return
0001583C 1038 F603                  		move.b	($FFFFF603).w,d0
00015840 0200 0070                  		andi.b	#%01110000,d0
00015844 6700 0000                  		beq.w	@return
00015848 117C 0001 001C             		move.b	#1,$1C(a0)
0001584E 317C 0000 003A             		move.w	#0,$3A(a0)
00015854 303C 00D2                  		move.w	#$D2,d0
00015858 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
0001585E                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
0001585E 588F                       		addq.l	#4,sp
00015860 08E8 0001 0039             		bset	#1,$39(a0)
00015866                            		
00015866 4268 0020                  		clr.w	obInertia(a0)
0001586A                             
0001586A 6100 0000                  		bsr.w	Sonic_LevelBound
0001586E 6100 0000                  		bsr.w	Sonic_AnglePos
00015872                             
00015872                            	@return:
00015872 4E75                       		rts	
00015874                            ; ---------------------------------------------------------------------------
00015874                             
00015874                            SCDPeelout_Launch:
00015874 0828 0001 0039             		btst	#1,$39(a0)
0001587A 1038 F602                  		move.b	($FFFFF602).w,d0
0001587E 0800 0000                  		btst	#0,d0
00015882 6600 0000                  		bne.w	SCDPeelout_Charge
00015886 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
0001588C 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015892 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015896 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
0001589C 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
000158A2 3028 0020                  		move.w	obInertia(a0),d0
000158A6 0440 0800                  		subi.w	#$800,d0
000158AA D040                       		add.w	d0,d0
000158AC 0240 1F00                  		andi.w	#$1F00,d0
000158B0 4440                       		neg.w	d0
000158B2 0640 2000                  		addi.w	#$2000,d0
000158B6 31C0 C904                  		move.w	d0,($FFFFC904).w
000158BA 0828 0000 0022             		btst	#0,$22(a0)
000158C0 6700                       		beq.s	@dontflip
000158C2 4468 0020                  		neg.w	obInertia(a0)
000158C6                             
000158C6                            @dontflip:
000158C6 08A8 0007 0022             		bclr	#7,$22(a0)
000158CC 303C 00D3                  		move.w	#$D3,d0
000158D0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
000158D6                            	;	sfx 	sfx_PeeloutRelease
000158D6 1028 0026                  		move.b	obAngle(a0),d0
000158DA 4EB9 0000 3B42             		jsr	(CalcSine).l
000158E0 C3E8 0020                  		muls.w	obInertia(a0),d1
000158E4 E081                       		asr.l	#8,d1
000158E6 3141 0010                  		move.w	d1,obVelX(a0)
000158EA C1E8 0020                  		muls.w	obInertia(a0),d0
000158EE E080                       		asr.l	#8,d0
000158F0 3140 0012                  		move.w	d0,obVelY(a0)	
000158F4 6000 0000                  		bra.w	SCDPeelout_ResetScr
000158F8                            ; ---------------------------------------------------------------------------
000158F8                             
000158F8                            SCDPeelout_Charge:				; If still charging the dash...
000158F8 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
000158FC 3401                       		move.w	d1,d2
000158FE D241                       		add.w	d1,d1
00015900 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015904 6700                       		beq.s	@noshoes
00015906 E242                       		asr.w	#1,d2
00015908 9242                       		sub.w	d2,d1
0001590A                            
0001590A                            @noshoes:
0001590A 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015910 B268 0020                  		cmp.w	obInertia(a0),d1
00015914 6E00                       		bgt.s	@inctimer
00015916 3141 0020                  		move.w	d1,obInertia(a0)
0001591A                            
0001591A                            @inctimer:
0001591A 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
0001591E 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015924 6500                       		bcs.s	SCDPeelout_ResetScr
00015926 117C 001E 003A             		move.b	#$1E,$3A(a0)
0001592C 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015932                            		
00015932                            SCDPeelout_Stop_Sound:
00015932 303C 00D4                  		move.w	#$D4,d0
00015936 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
0001593C                            	;	sfx 	sfx_PeeloutStop
0001593C 4268 0020                  		clr.w	obInertia(a0)
00015940                            
00015940                            SCDPeelout_ResetScr:
00015940 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015942 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015948 6700                       		beq.s	@finish
0001594A 6400                       		bcc.s	@skip
0001594C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015950                             
00015950                            	@skip:
00015950 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015954                             
00015954                            	@finish:
00015954 6100 0000                  		bsr.w	Sonic_LevelBound
00015958 6100 0000                  		bsr.w	Sonic_AnglePos
0001595C 4E75                       		rts
0001595E                            		
0001595E                            		
0001595E                            		include "_incObj\Sonic Spindash.asm"
0001595E                            ; ---------------------------------------------------------------------------
0001595E                            ; Subroutine to make Sonic perform a spindash
0001595E                            ; ---------------------------------------------------------------------------
0001595E                             
0001595E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001595E                             
0001595E                             
0001595E                            Sonic_SpinDash:
0001595E 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015962 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015964 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
0001596A 6600                       		bne.s	locret2_1AC8C		; if not, return
0001596C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015970 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015974 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015978 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
0001597E 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015982 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015988 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
0001598A 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015990 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015996                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015996                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015996 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001599C                            						; the smoke/dust object
0001599C                            loc2_1AC84:
0001599C 6100 0000                  		bsr.w	Sonic_LevelBound
000159A0 6100 0000                  		bsr.w	Sonic_AnglePos
000159A4                            
000159A4                            locret2_1AC8C:
000159A4 4E75                       		rts	
000159A6                            ; ---------------------------------------------------------------------------
000159A6                            
000159A6                            loc2_1AC8E:	
000159A6 117C 001F 001C             		move.b	#$1F,$1C(a0)
000159AC 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
000159B0 0800 0001                  		btst	#1,d0			; check down button
000159B4 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
000159B8 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
000159BE 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
000159C4 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
000159CA 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
000159CE 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
000159D4 7000                       		moveq	#0,d0
000159D6 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
000159DA D040                       		add.w	d0,d0			; double it
000159DC 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
000159E2 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
000159E6 0440 0800                  		subi.w	#$800,d0		; subtract $800
000159EA D040                       		add.w	d0,d0			; double it
000159EC 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
000159F0 4440                       		neg.w	d0			; negate it
000159F2 0640 2000                  		addi.w	#$2000,d0		; add $2000
000159F6 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
000159FA 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015A00 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015A02 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015A06                            
00015A06                            loc2_1ACF4:
00015A06 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015A0C 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015A12 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015A16 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015A1C 1028 0026                  		move.b	obAngle(a0),d0
00015A20 4EB9 0000 3B42             		jsr	(CalcSine).l
00015A26 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A2A E081                       		asr.l	#8,d1
00015A2C 3141 0010                  		move.w	d1,obVelX(a0)
00015A30 C1E8 0020                  		muls.w	obInertia(a0),d0
00015A34 E080                       		asr.l	#8,d0
00015A36 3140 0012                  		move.w	d0,obVelY(a0)
00015A3A                            	
00015A3A 6000                       		bra.s	loc2_1AD78
00015A3C                            ; ===========================================================================
00015A3C                            Dash_Speeds:
00015A3C 0700                       		dc.w  $700		; 0
00015A3E 0780                       		dc.w  $780		; 1
00015A40 0800                       		dc.w  $800		; 2
00015A42 0880                       		dc.w  $880		; 3
00015A44 0900                       		dc.w  $900		; 4
00015A46 0980                       		dc.w  $980		; 5
00015A48 0A00                       		dc.w  $A00		; 6
00015A4A 0A80                       		dc.w  $A80		; 7
00015A4C 0B00                       		dc.w  $B00		; 8
00015A4E                            ; ===========================================================================
00015A4E                            
00015A4E                            loc2_1AD30:				; If still charging the dash...
00015A4E 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015A52 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015A54 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015A58 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015A5A 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015A5E 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015A60 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015A66                            
00015A66                            loc2_1AD48:
00015A66 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015A6A 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015A6E 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015A72 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015A78 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015A7C 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015A82 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015A88 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015A8E 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015A94 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015A96 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015A9C                            
00015A9C                            loc2_1AD78:
00015A9C 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015A9E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015AA4 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015AA6 6400                       		bcc.s	loc2_1AD88
00015AA8 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015AAC                            
00015AAC                            loc2_1AD88:
00015AAC 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015AB0                            
00015AB0                            loc2_1AD8C:
00015AB0 6100 0000                  		bsr.w	Sonic_LevelBound
00015AB4 6100 0000                  		bsr.w	Sonic_AnglePos
00015AB8                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015AB8 4E75                       		rts
00015ABA                            ; End of subroutine Sonic_SpinDash
00015ABA                            ; End of subroutine Sonic_SpinDash
00015ABA                            
00015ABA                            Sonic_AirRoll:
00015ABA 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015AC0 6600                               bne.s   AirRoll_Return   ; if not, return
00015AC2                            
00015AC2                            AirRoll_CheckBtn:
00015AC2 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015AC6 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015ACA 6700                               beq.s	AirRoll_Return
00015ACC 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015AD2                                   ; move.w	#$BC,d0
00015AD2                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015AD2                            
00015AD2                            AirRoll_Return:
00015AD2 4E75                               rts
00015AD4                            ; ===========================================================================
00015AD4                            ; ---------------------------------------------------------------------------
00015AD4                            ; Unused subroutine to squash Sonic
00015AD4                            ; ---------------------------------------------------------------------------
00015AD4 1028 0026                  		move.b	obAngle(a0),d0
00015AD8 0600 0020                  		addi.b	#$20,d0
00015ADC 0200 00C0                  		andi.b	#$C0,d0
00015AE0 6600                       		bne.s	locret_13302
00015AE2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015AE6 4A41                       		tst.w	d1
00015AE8 6A00                       		bpl.s	locret_13302
00015AEA 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015AF0 317C 0000 0010             		move.w	#0,obVelX(a0)
00015AF6 317C 0000 0012             		move.w	#0,obVelY(a0)
00015AFC 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015B02                            
00015B02                            locret_13302:
00015B02 4E75                       		rts		
00015B04                            		include	"_incObj\Sonic LevelBound.asm"
00015B04                            ; ---------------------------------------------------------------------------
00015B04                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015B04                            ; ---------------------------------------------------------------------------
00015B04                            
00015B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B04                            
00015B04                            
00015B04                            Sonic_LevelBound:
00015B04 2228 0008                  		move.l	obX(a0),d1
00015B08 3028 0010                  		move.w	obVelX(a0),d0
00015B0C 48C0                       		ext.l	d0
00015B0E E180                       		asl.l	#8,d0
00015B10 D280                       		add.l	d0,d1
00015B12 4841                       		swap	d1
00015B14 3038 F728                  		move.w	(v_limitleft2).w,d0
00015B18 0640 0010                  		addi.w	#$10,d0
00015B1C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015B1E 6200                       		bhi.s	@sides		; if yes, branch
00015B20 3038 F72A                  		move.w	(v_limitright2).w,d0
00015B24 0640 0128                  		addi.w	#$128,d0
00015B28 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015B2C 6600                       		bne.s	@screenlocked
00015B2E 0640 0040                  		addi.w	#$40,d0
00015B32                            
00015B32                            	@screenlocked:
00015B32 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015B34 6300                       		bls.s	@sides		; if yes, branch
00015B36                            
00015B36                            	@chkbottom:
00015B36 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015B3A 0640 00E0                  		addi.w	#$E0,d0
00015B3E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015B42 6D00                       		blt.s	@bottom		; if yes, branch
00015B44 4E75                       		rts	
00015B46                            ; ===========================================================================
00015B46                            
00015B46                            @bottom:
00015B46 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015B4A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015B4E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015B50 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015B52 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00015B58 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015B5C 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00015B62 6500 0000                  		bcs.w	Kill_transport
00015B66 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015B6A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015B70 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015B76 4E75                       		rts	
00015B78                            @dontkill: 
00015B78 4E75                       		rts
00015B7A                            ; ===========================================================================
00015B7A                            
00015B7A                            @sides:
00015B7A 3140 0008                  		move.w	d0,obX(a0)
00015B7E 317C 0000 000A             		move.w	#0,obX+2(a0)
00015B84 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015B8A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015B90 60A4                       		bra.s	@chkbottom
00015B92                            
00015B92                            Kill_transport: 
00015B92 4EF9 0000 0000                     	jmp        (KillSonic).l
00015B98                            
00015B98                            ; End of function Sonic_LevelBound
00015B98                            ; End of function Sonic_LevelBound
00015B98                            		include	"_incObj\Sonic Roll.asm"
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            ; Subroutine allowing Sonic to roll when he's moving
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            
00015B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B98                            
00015B98                            
00015B98                            Sonic_Roll:
00015B98 4A38 F7CA                  		tst.b	(f_jumponly).w
00015B9C 6600                       		bne.s	@noroll
00015B9E 3028 0020                  		move.w	obInertia(a0),d0
00015BA2 6A00                       		bpl.s	@ispositive
00015BA4 4440                       		neg.w	d0
00015BA6                            
00015BA6                            	@ispositive:
00015BA6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015BAA 6500                       		bcs.s	@noroll		; if not, branch
00015BAC 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015BB0 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015BB4 6600                       		bne.s	@noroll		; if yes, branch
00015BB6 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015BBC 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015BBE                            
00015BBE                            	@noroll:
00015BBE 4E75                       		rts	
00015BC0                            ; ===========================================================================
00015BC0                            
00015BC0                            Sonic_ChkRoll:
00015BC0 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015BC6 6700                       		beq.s	@roll		; if not, branch
00015BC8 4E75                       		rts	
00015BCA                            ; ===========================================================================
00015BCA                            
00015BCA                            @roll:
00015BCA 08E8 0002 0022             		bset	#2,obStatus(a0)
00015BD0 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015BD6 117C 0007 0017             		move.b	#7,obWidth(a0)
00015BDC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BE2 5A68 000C                  		addq.w	#5,obY(a0)
00015BF0 4A68 0020                  		tst.w	obInertia(a0)
00015BF4 6600                       		bne.s	@ismoving
00015BF6 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015BFC                            
00015BFC                            	@ismoving:
00015BFC 4E75                       		rts	
00015BFE                            ; End of function Sonic_Roll
00015BFE                            ; End of function Sonic_Roll
00015BFE                            		include	"_incObj\Sonic Jump.asm"
00015BFE                            ; ---------------------------------------------------------------------------
00015BFE                            ; Subroutine allowing Sonic to jump
00015BFE                            ; ---------------------------------------------------------------------------
00015BFE                            
00015BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BFE                            
00015BFE                            
00015BFE                            Sonic_Jump:
00015BFE 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015C02 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015C06 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015C0A 7000                       		moveq	#0,d0
00015C0C 1028 0026                  		move.b	obAngle(a0),d0
00015C10 0600 0080                  		addi.b	#$80,d0
00015C14 6100 0000                  		bsr.w	sub_14D48
00015C18 0C41 0006                  		cmpi.w	#6,d1
00015C1C 6D00 0000                  		blt.w	locret_1348E
00015C20 343C 0680                  		move.w	#$680,d2
00015C24 0828 0006 0022             		btst	#6,obStatus(a0)
00015C2A 6700                       		beq.s	loc_1341C
00015C2C 343C 0380                  		move.w	#$380,d2
00015C30                            
00015C30                            loc_1341C:
00015C30 7000                       		moveq	#0,d0
00015C32 1028 0026                  		move.b	obAngle(a0),d0
00015C36 0400 0040                  		subi.b	#$40,d0
00015C3A 4EB9 0000 3B42             		jsr	(CalcSine).l
00015C40 C3C2                       		muls.w	d2,d1
00015C42 E081                       		asr.l	#8,d1
00015C44 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015C48 C1C2                       		muls.w	d2,d0
00015C4A E080                       		asr.l	#8,d0
00015C4C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015C50 08E8 0001 0022             		bset	#1,obStatus(a0)
00015C56 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015C5C 588F                       		addq.l	#4,sp
00015C5E 117C 0001 003C             		move.b	#1,$3C(a0)
00015C64 4228 0038                  		clr.b	$38(a0)
00015C72 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015C78 117C 0009 0017             		move.b	#9,obWidth(a0)
00015C7E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015C84 117C 0007 0017             		move.b	#7,obWidth(a0)
00015C8A                            Result_Check:
00015C8A 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015C8E 6700                       		beq.s   NormalJump ; If not, branch
00015C90 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00015C96 6000                       		bra.s   cont ; Continue
00015C98                            NormalJump:
00015C98 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015C9E                            cont:
00015C9E 08E8 0002 0022             		bset	#2,obStatus(a0)
00015CA4 5A68 000C                  		addq.w	#5,obY(a0)
00015CA8                            
00015CA8                            locret_1348E:
00015CA8 4E75                       		rts	
00015CAA                            ; ===========================================================================
00015CAA                            
00015CAA                            ; End of function Sonic_Jump
00015CAA                            ; End of function Sonic_Jump
00015CAA                            		include	"_incObj\Sonic JumpHeight.asm"
00015CAA                            ; ---------------------------------------------------------------------------
00015CAA                            ; Subroutine controlling Sonic's jump height/duration
00015CAA                            ; ---------------------------------------------------------------------------
00015CAA                            
00015CAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CAA                            
00015CAA                            
00015CAA                            Sonic_JumpHeight:
00015CAA 4A28 003C                  		tst.b	$3C(a0)
00015CAE 6700                       		beq.s	loc_134C4
00015CB0 323C FC00                  		move.w	#-$400,d1
00015CB4 0828 0006 0022             		btst	#6,obStatus(a0)
00015CBA 6700                       		beq.s	loc_134AE
00015CBC 323C FE00                  		move.w	#-$200,d1
00015CC0                            
00015CC0                            loc_134AE:
00015CC0 B268 0012                  		cmp.w	obVelY(a0),d1
00015CC4 6F00                       		ble.s	locret_134C2
00015CC6 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015CCA 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015CCE 6600                       		bne.s	locret_134C2	; if yes, branch
00015CD0 3141 0012                  		move.w	d1,obVelY(a0)
00015CD4                            
00015CD4                            locret_134C2:
00015CD4 4E75                       		rts	
00015CD6                            ; ===========================================================================
00015CD6                            
00015CD6                            loc_134C4:
00015CD6 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015CDC 6C00                       		bge.s	locret_134D2
00015CDE 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015CE4                            
00015CE4                            locret_134D2:
00015CE4 4E75                       		rts	
00015CE6                            ; End of function Sonic_JumpHeight
00015CE6                            ; End of function Sonic_JumpHeight
00015CE6                            		include	"_incObj\Sonic SlopeResist.asm"
00015CE6                            ; ---------------------------------------------------------------------------
00015CE6                            ; Subroutine to	slow Sonic walking up a	slope
00015CE6                            ; ---------------------------------------------------------------------------
00015CE6                            
00015CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CE6                            
00015CE6                            
00015CE6                            Sonic_SlopeResist:
00015CE6 1028 0026                  		move.b	obAngle(a0),d0
00015CEA 0600 0060                  		addi.b	#$60,d0
00015CEE 0C00 00C0                  		cmpi.b	#$C0,d0
00015CF2 6400                       		bcc.s	locret_13508
00015CF4 1028 0026                  		move.b	obAngle(a0),d0
00015CF8 4EB9 0000 3B42             		jsr	(CalcSine).l
00015CFE C1FC 0020                  		muls.w	#$20,d0
00015D02 E080                       		asr.l	#8,d0
00015D04 4A68 0020                  		tst.w	obInertia(a0)
00015D08 6700                       		beq.s	locret_13508
00015D0A 6B00                       		bmi.s	loc_13504
00015D0C 4A40                       		tst.w	d0
00015D0E 6700                       		beq.s	locret_13502
00015D10 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015D14                            
00015D14                            locret_13502:
00015D14 4E75                       		rts	
00015D16                            ; ===========================================================================
00015D16                            
00015D16                            loc_13504:
00015D16 D168 0020                  		add.w	d0,obInertia(a0)
00015D1A                            
00015D1A                            locret_13508:
00015D1A 4E75                       		rts	
00015D1C                            ; End of function Sonic_SlopeResist
00015D1C                            ; End of function Sonic_SlopeResist
00015D1C                            		include	"_incObj\Sonic RollRepel.asm"
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C                            
00015D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D1C                            
00015D1C                            
00015D1C                            Sonic_RollRepel:
00015D1C 1028 0026                  		move.b	obAngle(a0),d0
00015D20 0600 0060                  		addi.b	#$60,d0
00015D24 0C00 00C0                  		cmpi.b	#-$40,d0
00015D28 6400                       		bcc.s	locret_13544
00015D2A 1028 0026                  		move.b	obAngle(a0),d0
00015D2E 4EB9 0000 3B42             		jsr	(CalcSine).l
00015D34 C1FC 0050                  		muls.w	#$50,d0
00015D38 E080                       		asr.l	#8,d0
00015D3A 4A68 0020                  		tst.w	obInertia(a0)
00015D3E 6B00                       		bmi.s	loc_1353A
00015D40 4A40                       		tst.w	d0
00015D42 6A00                       		bpl.s	loc_13534
00015D44 E480                       		asr.l	#2,d0
00015D46                            
00015D46                            loc_13534:
00015D46 D168 0020                  		add.w	d0,obInertia(a0)
00015D4A 4E75                       		rts	
00015D4C                            ; ===========================================================================
00015D4C                            
00015D4C                            loc_1353A:
00015D4C 4A40                       		tst.w	d0
00015D4E 6B00                       		bmi.s	loc_13540
00015D50 E480                       		asr.l	#2,d0
00015D52                            
00015D52                            loc_13540:
00015D52 D168 0020                  		add.w	d0,obInertia(a0)
00015D56                            
00015D56                            locret_13544:
00015D56 4E75                       		rts	
00015D58                            ; End of function Sonic_RollRepel
00015D58                            ; End of function Sonic_RollRepel
00015D58                            		include	"_incObj\Sonic SlopeRepel.asm"
00015D58                            ; ---------------------------------------------------------------------------
00015D58                            ; Subroutine to	push Sonic down	a slope
00015D58                            ; ---------------------------------------------------------------------------
00015D58                            
00015D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D58                            
00015D58                            
00015D58                            Sonic_SlopeRepel:
00015D58 4E71                       		nop	
00015D5A 4A28 0038                  		tst.b	$38(a0)
00015D5E 6600                       		bne.s	locret_13580
00015D60 4A68 003E                  		tst.w	$3E(a0)
00015D64 6600                       		bne.s	loc_13582
00015D66 1028 0026                  		move.b	obAngle(a0),d0
00015D6A 0600 0020                  		addi.b	#$20,d0
00015D6E 0200 00C0                  		andi.b	#$C0,d0
00015D72 6700                       		beq.s	locret_13580
00015D74 3028 0020                  		move.w	obInertia(a0),d0
00015D78 6A00                       		bpl.s	loc_1356A
00015D7A 4440                       		neg.w	d0
00015D7C                            
00015D7C                            loc_1356A:
00015D7C 0C40 0280                  		cmpi.w	#$280,d0
00015D80 6400                       		bcc.s	locret_13580
00015D82 4268 0020                  		clr.w	obInertia(a0)
00015D86 08E8 0001 0022             		bset	#1,obStatus(a0)
00015D8C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015D92                            
00015D92                            locret_13580:
00015D92 4E75                       		rts	
00015D94                            ; ===========================================================================
00015D94                            
00015D94                            loc_13582:
00015D94 5368 003E                  		subq.w	#1,$3E(a0)
00015D98 4E75                       		rts	
00015D9A                            ; End of function Sonic_SlopeRepel
00015D9A                            ; End of function Sonic_SlopeRepel
00015D9A                            		include	"_incObj\Sonic JumpAngle.asm"
00015D9A                            ; ---------------------------------------------------------------------------
00015D9A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015D9A                            ; ---------------------------------------------------------------------------
00015D9A                            
00015D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D9A                            
00015D9A                            
00015D9A                            Sonic_JumpAngle:
00015D9A 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015D9E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015DA0 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015DA2                            
00015DA2 5400                       		addq.b	#2,d0		; increase angle
00015DA4 6400                       		bcc.s	loc_13596
00015DA6 7000                       		moveq	#0,d0
00015DA8                            
00015DA8                            loc_13596:
00015DA8 6000                       		bra.s	loc_1359E
00015DAA                            ; ===========================================================================
00015DAA                            
00015DAA                            loc_13598:
00015DAA 5500                       		subq.b	#2,d0		; decrease angle
00015DAC 6400                       		bcc.s	loc_1359E
00015DAE 7000                       		moveq	#0,d0
00015DB0                            
00015DB0                            loc_1359E:
00015DB0 1140 0026                  		move.b	d0,obAngle(a0)
00015DB4                            
00015DB4                            locret_135A2:
00015DB4 4E75                       		rts	
00015DB6                            ; End of function Sonic_JumpAngle
00015DB6                            ; End of function Sonic_JumpAngle
00015DB6                            		include	"_incObj\Sonic Floor.asm"
00015DB6                            ; ---------------------------------------------------------------------------
00015DB6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015DB6                            ; ---------------------------------------------------------------------------
00015DB6                            
00015DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DB6                            
00015DB6                            
00015DB6                            Sonic_Floor:
00015DB6 3228 0010                  		move.w	obVelX(a0),d1
00015DBA 3428 0012                  		move.w	obVelY(a0),d2
00015DBE 4EB9 0000 3DD4             		jsr	(CalcAngle).l
00015DC4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015DC8 0400 0020                  		subi.b	#$20,d0
00015DCC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015DD0 0200 00C0                  		andi.b	#$C0,d0
00015DD4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015DD8 0C00 0040                  		cmpi.b	#$40,d0
00015DDC 6700 0000                  		beq.w	loc_13680
00015DE0 0C00 0080                  		cmpi.b	#$80,d0
00015DE4 6700 0000                  		beq.w	loc_136E2
00015DE8 0C00 00C0                  		cmpi.b	#$C0,d0
00015DEC 6700 0000                  		beq.w	loc_1373E
00015DF0 6100 0000                  		bsr.w	Sonic_HitWall
00015DF4 4A41                       		tst.w	d1
00015DF6 6A00                       		bpl.s	loc_135F0
00015DF8 9368 0008                  		sub.w	d1,obX(a0)
00015DFC 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E02                            
00015E02                            loc_135F0:
00015E02 6100 0000                  		bsr.w	sub_14EB4
00015E06 4A41                       		tst.w	d1
00015E08 6A00                       		bpl.s	loc_13602
00015E0A D368 0008                  		add.w	d1,obX(a0)
00015E0E 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E14                            
00015E14                            loc_13602:
00015E14 6100 0000                  		bsr.w	Sonic_HitFloor
00015E18 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015E1C 4A41                       		tst.w	d1
00015E1E 6A00                       		bpl.s	locret_1367E
00015E20 1428 0012                  		move.b	obVelY(a0),d2
00015E24 5002                       		addq.b	#8,d2
00015E26 4402                       		neg.b	d2
00015E28 B202                       		cmp.b	d2,d1
00015E2A 6C00                       		bge.s	loc_1361E
00015E2C B002                       		cmp.b	d2,d0
00015E2E 6D00                       		blt.s	locret_1367E
00015E30                            
00015E30                            loc_1361E:
00015E30 D368 000C                  		add.w	d1,obY(a0)
00015E34 1143 0026                  		move.b	d3,obAngle(a0)
00015E38 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015E3C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015E42 1003                       		move.b	d3,d0
00015E44 0600 0020                  		addi.b	#$20,d0
00015E48 0200 0040                  		andi.b	#$40,d0
00015E4C 6600                       		bne.s	loc_1365C
00015E4E 1003                       		move.b	d3,d0
00015E50 0600 0010                  		addi.b	#$10,d0
00015E54 0200 0020                  		andi.b	#$20,d0
00015E58 6700                       		beq.s	loc_1364E
00015E5A E0E8 0012                  		asr	obVelY(a0)
00015E5E 6000                       		bra.s	loc_13670
00015E60                            ; ===========================================================================
00015E60                            
00015E60                            loc_1364E:
00015E60 317C 0000 0012             		move.w	#0,obVelY(a0)
00015E66 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015E6C 4E75                       		rts	
00015E6E                            ; ===========================================================================
00015E6E                            
00015E6E                            loc_1365C:
00015E6E 317C 0000 0010             		move.w	#0,obVelX(a0)
00015E74 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00015E7A 6F00                       		ble.s	loc_13670
00015E7C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00015E82                            
00015E82                            loc_13670:
00015E82 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015E88 4A03                       		tst.b	d3
00015E8A 6A00                       		bpl.s	locret_1367E
00015E8C 4468 0020                  		neg.w	obInertia(a0)
00015E90                            
00015E90                            locret_1367E:
00015E90 4E75                       		rts	
00015E92                            ; ===========================================================================
00015E92                            
00015E92                            loc_13680:
00015E92 6100 0000                  		bsr.w	Sonic_HitWall
00015E96 4A41                       		tst.w	d1
00015E98 6A00                       		bpl.s	loc_1369A
00015E9A 9368 0008                  		sub.w	d1,obX(a0)
00015E9E 317C 0000 0010             		move.w	#0,obVelX(a0)
00015EA4 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015EAA 4E75                       		rts	
00015EAC                            ; ===========================================================================
00015EAC                            
00015EAC                            loc_1369A:
00015EAC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015EB0 4A41                       		tst.w	d1
00015EB2 6A00                       		bpl.s	loc_136B4
00015EB4 9368 000C                  		sub.w	d1,obY(a0)
00015EB8 4A68 0012                  		tst.w	obVelY(a0)
00015EBC 6A00                       		bpl.s	locret_136B2
00015EBE 317C 0000 0012             		move.w	#0,obVelY(a0)
00015EC4                            
00015EC4                            locret_136B2:
00015EC4 4E75                       		rts	
00015EC6                            ; ===========================================================================
00015EC6                            
00015EC6                            loc_136B4:
00015EC6 4A68 0012                  		tst.w	obVelY(a0)
00015ECA 6B00                       		bmi.s	locret_136E0
00015ECC 6100 0000                  		bsr.w	Sonic_HitFloor
00015ED0 4A41                       		tst.w	d1
00015ED2 6A00                       		bpl.s	locret_136E0
00015ED4 D368 000C                  		add.w	d1,obY(a0)
00015ED8 1143 0026                  		move.b	d3,obAngle(a0)
00015EDC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015EE0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015EE6 317C 0000 0012             		move.w	#0,obVelY(a0)
00015EEC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015EF2                            
00015EF2                            locret_136E0:
00015EF2 4E75                       		rts	
00015EF4                            ; ===========================================================================
00015EF4                            
00015EF4                            loc_136E2:
00015EF4 6100 0000                  		bsr.w	Sonic_HitWall
00015EF8 4A41                       		tst.w	d1
00015EFA 6A00                       		bpl.s	loc_136F4
00015EFC 9368 0008                  		sub.w	d1,obX(a0)
00015F00 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F06                            
00015F06                            loc_136F4:
00015F06 6100 0000                  		bsr.w	sub_14EB4
00015F0A 4A41                       		tst.w	d1
00015F0C 6A00                       		bpl.s	loc_13706
00015F0E D368 0008                  		add.w	d1,obX(a0)
00015F12 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F18                            
00015F18                            loc_13706:
00015F18 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F1C 4A41                       		tst.w	d1
00015F1E 6A00                       		bpl.s	locret_1373C
00015F20 9368 000C                  		sub.w	d1,obY(a0)
00015F24 1003                       		move.b	d3,d0
00015F26 0600 0020                  		addi.b	#$20,d0
00015F2A 0200 0040                  		andi.b	#$40,d0
00015F2E 6600                       		bne.s	loc_13726
00015F30 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F36 4E75                       		rts	
00015F38                            ; ===========================================================================
00015F38                            
00015F38                            loc_13726:
00015F38 1143 0026                  		move.b	d3,obAngle(a0)
00015F3C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015F40 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015F46 4A03                       		tst.b	d3
00015F48 6A00                       		bpl.s	locret_1373C
00015F4A 4468 0020                  		neg.w	obInertia(a0)
00015F4E                            
00015F4E                            locret_1373C:
00015F4E 4E75                       		rts	
00015F50                            ; ===========================================================================
00015F50                            
00015F50                            loc_1373E:
00015F50 6100 0000                  		bsr.w	sub_14EB4
00015F54 4A41                       		tst.w	d1
00015F56 6A00                       		bpl.s	loc_13758
00015F58 D368 0008                  		add.w	d1,obX(a0)
00015F5C 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F62 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00015F68 4E75                       		rts	
00015F6A                            ; ===========================================================================
00015F6A                            
00015F6A                            loc_13758:
00015F6A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F6E 4A41                       		tst.w	d1
00015F70 6A00                       		bpl.s	loc_13772
00015F72 9368 000C                  		sub.w	d1,obY(a0)
00015F76 4A68 0012                  		tst.w	obVelY(a0)
00015F7A 6A00                       		bpl.s	locret_13770
00015F7C 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F82                            
00015F82                            locret_13770:
00015F82 4E75                       		rts	
00015F84                            ; ===========================================================================
00015F84                            
00015F84                            loc_13772:
00015F84 4A68 0012                  		tst.w	obVelY(a0)
00015F88 6B00                       		bmi.s	locret_1379E
00015F8A 6100 0000                  		bsr.w	Sonic_HitFloor
00015F8E 4A41                       		tst.w	d1
00015F90 6A00                       		bpl.s	locret_1379E
00015F92 D368 000C                  		add.w	d1,obY(a0)
00015F96 1143 0026                  		move.b	d3,obAngle(a0)
00015F9A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00015F9E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00015FA4 317C 0000 0012             		move.w	#0,obVelY(a0)
00015FAA 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00015FB0                            
00015FB0                            locret_1379E:
00015FB0 4E75                       		rts	
00015FB2                            ; End of function Sonic_Floor
00015FB2                            ; End of function Sonic_Floor
00015FB2                            		include	"_incObj\Sonic ResetOnFloor.asm"
00015FB2                            ; ---------------------------------------------------------------------------
00015FB2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00015FB2                            ; ---------------------------------------------------------------------------
00015FB2                            
00015FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FB2                            
00015FB2                            
00015FB2                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00015FB2 08A8 0005 0022                     	bclr    #5,$22(a0)
00015FB8 08A8 0001 0022                     	bclr    #1,$22(a0)
00015FBE 0828 0002 0022                     	btst    #2,$22(a0)
00015FC4 6700                               	beq.s    loc_137E4
00015FC6 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015FCC 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015FD2 117C 0009 0017             		move.b	#9,obWidth(a0)
00015FD8 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00015FDE 5B68 000C                  		subq.w	#5,obY(a0)
00015FE2                            
00015FE2                            loc_137E4:
00015FE2 117C 0000 003C             		move.b	#0,$3C(a0)
00015FE8 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00015FEE 4E75                       		rts	
00015FF0                            ; End of function Sonic_ResetOnFloor
00015FF0                            ; End of function Sonic_ResetOnFloor
00015FF0                            		include	"_incObj\Sonic (part 2).asm"
00015FF0                            ; ---------------------------------------------------------------------------
00015FF0                            ; Sonic	when he	gets hurt
00015FF0                            ; ---------------------------------------------------------------------------
00015FF0                            
00015FF0                            Sonic_Hurt:	; Routine 4
00015FF0 4EB9 0000 F412             		jsr	(SpeedToPos).l
00015FF6 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00015FFC 0828 0006 0022             		btst	#6,obStatus(a0)
00016002 6700                       		beq.s	loc_1380C
00016004 0468 0020 0012             		subi.w	#$20,obVelY(a0)
0001600A                            
0001600A                            loc_1380C:
0001600A 6100 0000                  		bsr.w	Sonic_HurtStop
0001600E 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016012 6100 F14C                  		bsr.w	Sonic_RecordPosition
00016016 6100 0000                  		bsr.w	Sonic_Animate
0001601A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001601E 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016024                            
00016024                            ; ---------------------------------------------------------------------------
00016024                            ; Subroutine to	stop Sonic falling after he's been hurt
00016024                            ; ---------------------------------------------------------------------------
00016024                            
00016024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016024                            
00016024                            
00016024                            Sonic_HurtStop:
00016024 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016028 0640 00E0                  		addi.w	#$E0,d0
0001602C                            		;cmp.w	obY(a0),d0
0001602C                            		;bcs.w	KillSonic
0001602C 6100 FD88                  		bsr.w	Sonic_Floor
00016030 0828 0001 0022             		btst	#1,obStatus(a0)
00016036 6600                       		bne.s	locret_13860
00016038 7000                       		moveq	#0,d0
0001603A 3140 0012                  		move.w	d0,obVelY(a0)
0001603E 3140 0010                  		move.w	d0,obVelX(a0)
00016042 3140 0020                  		move.w	d0,obInertia(a0)
00016046 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001604C 5528 0024                  		subq.b	#2,obRoutine(a0)
00016050 317C 0078 0030             		move.w	#$78,$30(a0)
00016056                            
00016056                            locret_13860:
00016056 4E75                       		rts	
00016058                            ; End of function Sonic_HurtStop
00016058                            
00016058                            ; ---------------------------------------------------------------------------
00016058                            ; Sonic	when he	dies
00016058                            ; ---------------------------------------------------------------------------
00016058                            
00016058                            Sonic_Death:	; Routine 6
00016058 6100 0000                  		bsr.w	GameOver
0001605C 4EB9 0000 F3DA             		jsr	(ObjectFall).l
00016062 6100 F0FC                  		bsr.w	Sonic_RecordPosition
00016066 6100 0000                  		bsr.w	Sonic_Animate
0001606A 6100 0000                  		bsr.w	Sonic_LoadGfx
0001606E 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016074                            
00016074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016074                            
00016074                            GameOver:
00016074 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016078 0640 0100                  		addi.w	#$100,d0
0001607C B068 000C                  		cmp.w	obY(a0),d0
00016080 6400 0000                  		bcc.w	locret_13900
00016084 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001608A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001608E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016092 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00016096 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
0001609A 6600                       		bne.s	loc_138D4
0001609C 317C 0000 003A             		move.w	#0,$3A(a0)
000160A2 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000160A8 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000160AE 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000160B4 4238 FE1A                  		clr.b	(f_timeover).w
000160B8                            
000160B8                            loc_138C2:
000160C2 7003                       		moveq	#3,d0
000160C4 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000160CA                            		
000160CA                            loc_138C3:
000160D4 7003                       		moveq	#3,d0
000160D6 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000160DC                            ; ===========================================================================
000160DC                            
000160DC                            loc_138D4:
000160DC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000160E2 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000160E6 6700                       		beq.s	locret_13900	; if not, branch
000160E8 317C 0000 003A             		move.w	#0,$3A(a0)
000160EE 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000160F4 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000160FA 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016100 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00016106 60B0                       		bra.s	loc_138C2
00016108                            		
00016108                            
00016108                            ; ===========================================================================
00016108                            
00016108                            locret_13900:
00016108 4E75                       		rts	
0001610A                            ; End of function GameOver
0001610A                            
0001610A                            ; ---------------------------------------------------------------------------
0001610A                            ; Sonic	when the level is restarted
0001610A                            ; ---------------------------------------------------------------------------
0001610A                            
0001610A                            Sonic_ResetLevel:; Routine 8
0001610A 4A68 003A                  		tst.w	$3A(a0)
0001610E 6700                       		beq.s	locret_13914
00016110 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00016114 6600                       		bne.s	locret_13914
00016116 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
0001611C                            
0001611C                            	locret_13914:
0001611C 4E75                       		rts	
0001611C 4E75                       		rts	
0001611E                            		include	"_incObj\Sonic Loops.asm"
0001611E                            ; ---------------------------------------------------------------------------
0001611E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001611E                            ; ---------------------------------------------------------------------------
0001611E                            
0001611E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001611E                            
0001611E                            
0001611E                            Sonic_Loops:
0001611E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016124 6700                       		beq.s	@isstarlight	; if yes, branch
00016126 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001612A 6600 0000                  		bne.w	@noloops	; if not, branch
0001612E                            
0001612E                            	@isstarlight:
0001612E 3028 000C                  		move.w	obY(a0),d0
00016132 E248                       		lsr.w	#1,d0
00016134 0240 0380                  		andi.w	#$380,d0
00016138 1228 0008                  		move.b	obX(a0),d1
0001613C 0241 007F                  		andi.w	#$7F,d1
00016140 D041                       		add.w	d1,d0
00016142 43F8 A400                  		lea	(v_lvllayout).w,a1
00016146 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001614A                            
0001614A B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
0001614E 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016152 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00016156 6700 FA68                  		beq.w	Sonic_ChkRoll
0001615A                            
0001615A B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
0001615E 6700                       		beq.s	@chkifleft	; if yes, branch
00016160 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016164 6700                       		beq.s	@chkifinair
00016166 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
0001616C 4E75                       		rts	
0001616E                            ; ===========================================================================
0001616E                            
0001616E                            @chkifinair:
0001616E 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016174 6700                       		beq.s	@chkifleft	; if not, branch
00016176                            
00016176 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001617C 4E75                       		rts	
0001617E                            ; ===========================================================================
0001617E                            
0001617E                            @chkifleft:
0001617E 3428 0008                  		move.w	obX(a0),d2
00016182 0C02 002C                  		cmpi.b	#$2C,d2
00016186 6400                       		bcc.s	@chkifright
00016188                            
00016188 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
0001618E 4E75                       		rts	
00016190                            ; ===========================================================================
00016190                            
00016190                            @chkifright:
00016190 0C02 00E0                  		cmpi.b	#$E0,d2
00016194 6500                       		bcs.s	@chkangle1
00016196                            
00016196 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001619C 4E75                       		rts	
0001619E                            ; ===========================================================================
0001619E                            
0001619E                            @chkangle1:
0001619E 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000161A4 6600                       		bne.s	@chkangle2	; if yes, branch
000161A6                            
000161A6 1228 0026                  		move.b	obAngle(a0),d1
000161AA 6700                       		beq.s	@done
000161AC 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000161B0 6200                       		bhi.s	@done		; if yes, branch
000161B2 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000161B8 4E75                       		rts	
000161BA                            ; ===========================================================================
000161BA                            
000161BA                            @chkangle2:
000161BA 1228 0026                  		move.b	obAngle(a0),d1
000161BE 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000161C2 6300                       		bls.s	@done		; if yes, branch
000161C4 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000161CA                            
000161CA                            @noloops:
000161CA                            @done:
000161CA 4E75                       		rts	
000161CC                            ; End of function Sonic_Loops
000161CC                            ; End of function Sonic_Loops
000161CC                            		include	"_incObj\Sonic Animate.asm"
000161CC                            ; ---------------------------------------------------------------------------
000161CC                            ; Subroutine to	animate	Sonic's sprites
000161CC                            ; ---------------------------------------------------------------------------
000161CC                            
000161CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161CC                            
000161CC                            
000161CC                            Sonic_Animate:				; XREF: Obj01_Control; et al
000161CC 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000161D2 7000                       		moveq	#0,d0
000161D4 1028 001C                  		move.b	obAnim(a0),d0
000161D8 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000161DC 6700                       		beq.s	@do		; if not, branch
000161DE 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000161E2 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000161E6 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000161EA                            		
000161EA 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000161F0                            
000161F0                            	@do:
000161F0 D040                       		add.w	d0,d0
000161F2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000161F6 1011                       		move.b	(a1),d0
000161F8 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000161FA 1228 0022                  		move.b	obStatus(a0),d1
000161FE 0201 0001                  		andi.b	#1,d1
00016202 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016208 8328 0001                  		or.b	d1,obRender(a0)
0001620C 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016210 6A00                       		bpl.s	@delay		; if time remains, branch
00016212 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
00016216                            
00016216                            @loadframe:
00016216 7200                       		moveq	#0,d1
00016218 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0001621C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016220 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016224 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016228                            
00016228                            	@next:
00016228 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0001622C 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016230                            
00016230                            	@delay:
00016230 4E75                       		rts	
00016232                            ; ===========================================================================
00016232                            
00016232                            @end_FF:
00016232 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016234 6600                       		bne.s	@end_FE		; if not, branch
00016236 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001623A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001623E 60E8                       		bra.s	@next
00016240                            ; ===========================================================================
00016240                            
00016240                            @end_FE:
00016240 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016242 6600                       		bne.s	@end_FD		; if not, branch
00016244 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016248 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0001624C 9200                       		sub.b	d0,d1
0001624E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016252 60D4                       		bra.s	@next
00016254                            ; ===========================================================================
00016254                            
00016254                            @end_FD:
00016254 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00016256 6600                       		bne.s	@end		; if not, branch
00016258 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0001625E                            
0001625E                            	@end:
0001625E 4E75                       		rts	
00016260                            ; ===========================================================================
00016260                            
00016260                            @walkrunroll:
00016260 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016264 6ACA                       		bpl.s	@delay		; if time remains, branch
00016266 5200                       		addq.b	#1,d0		; is animation walking/running?
00016268 6600 0000                  		bne.w	@rolljump	; if not, branch
0001626C 7200                       		moveq	#0,d1
0001626E 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016272 6B00                       		bmi.s	@ble 			; better handling of angles
00016274 6700                       		beq.s	@ble
00016276 5300                       		subq.b	#1,d0
00016278                            
00016278                            	@ble:																
00016278 1428 0022                  		move.b	obStatus(a0),d2
0001627C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016280 6600                       		bne.s	@flip		; if yes, branch
00016282 4600                       		not.b	d0		; reverse angle
00016284                            
00016284                            	@flip:
00016284 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00016288 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
0001628A 7203                       		moveq	#3,d1
0001628C                            
0001628C                            	@noinvert:
0001628C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016292 B302                       		eor.b	d1,d2
00016294 8528 0001                  		or.b	d2,obRender(a0)
00016298 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
0001629E 6600 0000                  		bne.w	@push		; if yes, branch
000162A2                            
000162A2 E808                       		lsr.b	#4,d0		; divide angle by $10
000162A4 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000162A8 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000162AC 6A00                       		bpl.s	@nomodspeed
000162AE 4442                       		neg.w	d2		; modulus speed
000162B0                            
000162B0                            	@nomodspeed:
000162B0 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000162B6 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000162BA 6400                       		bcc.s	@maxrunning	; if yes, branch
000162BC                            
000162BC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000162C2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000162C6 6400                       		bcc.s	@running	; if yes, branch
000162C8                            
000162C8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000162CE                            
000162CE                            	@running:
000162CE D000                       		add.b	d0,d0
000162D0 D000                       		add.b	d0,d0
000162D2 1600                       		move.b	d0,d3
000162D4 4442                       		neg.w	d2
000162D6 0642 0780                  		addi.w	#$780,d2
000162DA 6A00                       		bpl.s	@belowmax
000162DC 7400                       		moveq	#0,d2		; max animation speed
000162DE 6000                       		bra.s	@belowmax
000162E0                            
000162E0                            	@maxrunning:
000162E0 D000                       		add.b d0,d0
000162E2 1600                       		move.b d0,d3
000162E4 4442                       		neg.w d2
000162E6 0642 0800                  		addi.w #$800, d2
000162EA 6A00                       		bpl.s @belowmax
000162EC 7400                       		moveq #0, d2 
000162EE                            
000162EE                            	@belowmax:
000162EE E04A                       		lsr.w	#8,d2
000162F0 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000162F4 6100 FF20                  		bsr.w	@loadframe
000162F8 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
000162FC 4E75                       		rts	
000162FE                            ; ===========================================================================
000162FE                            
000162FE                            @rolljump:
000162FE 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016300 6600                       		bne.s	@push		; if not, branch
00016302 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016306 6A00                       		bpl.s	@nomodspeed2
00016308 4442                       		neg.w	d2
0001630A                            
0001630A                            	@nomodspeed2:
0001630A 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016310 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00016314 6400                       		bcc.s	@rollfast	; if yes, branch
00016316 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001631C                            
0001631C                            	@rollfast:
0001631C 4442                       		neg.w	d2
0001631E 0642 0400                  		addi.w	#$400,d2
00016322 6A00                       		bpl.s	@belowmax2
00016324 7400                       		moveq	#0,d2
00016326                            
00016326                            	@belowmax2:
00016326 E04A                       		lsr.w	#8,d2
00016328 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001632C 1228 0022                  		move.b	obStatus(a0),d1
00016330 0201 0001                  		andi.b	#1,d1
00016334 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001633A 8328 0001                  		or.b	d1,obRender(a0)
0001633E 6000 FED6                  		bra.w	@loadframe
00016342                            ; ===========================================================================
00016342                            
00016342                            @push:
00016342 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016346 6B00                       		bmi.s	@negspeed
00016348 4442                       		neg.w	d2
0001634A                            
0001634A                            	@negspeed:
0001634A 0642 0800                  		addi.w	#$800,d2
0001634E 6A00                       		bpl.s	@belowmax3	
00016350 7400                       		moveq	#0,d2
00016352                            
00016352                            	@belowmax3:
00016352 EC4A                       		lsr.w	#6,d2
00016354 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016358 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001635E 1228 0022                  		move.b	obStatus(a0),d1
00016362 0201 0001                  		andi.b	#1,d1
00016366 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001636C 8328 0001                  		or.b	d1,obRender(a0)
00016370 6000 FEA4                  		bra.w	@loadframe
00016374                            
00016374                            ; End of function Sonic_Animate
00016374                            ; End of function Sonic_Animate
00016374                            		include	"_anim\Sonic.asm"
00016374                            ; ---------------------------------------------------------------------------
00016374                            ; Animation script - Sonic
00016374                            ; ---------------------------------------------------------------------------
00016374                            Ani_Sonic:
00016374                            
00016374 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
00016376 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
00016378 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001637A 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
0001637C 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
0001637E 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016380 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016382 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016384 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
00016386 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
00016388 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
0001638A 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
0001638C 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
0001638E 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016390 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016392 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016394 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
00016396 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
00016398 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
0001639A 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
0001639C 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
0001639E 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000163A0 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000163A2 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000163A4 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000163A6 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000163A8 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000163AA 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000163AC 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000163AE 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000163B0 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000163B2 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000163B4 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000163B6 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000163B8 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000163BA 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000163BC 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000163BE 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000163C0 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
000163C2 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
000163C4                            
000163C4 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000163D2 00                         		even
000163D2 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000163E0 00                         		even
000163E0 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000163E7 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000163EE 00                         		even
000163EE FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000163F5 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000163FC 00                         		even
000163FC FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001640A 00                         		even
0001640A                            SonAni_Wait:	
0001640A 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016419 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016428 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016437 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016446 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016455 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016464 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016473 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016482 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
0001648A                            		even
0001648A 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016490                            		even
00016490 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
00016496 00                         		even
00016496 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
0001649C 00                         		even
0001649C 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000164A0 00                         		even
000164A0 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000164A4 00                         		even
000164A4 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000164A8 00                         		even
000164A8 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000164AC 00                         		even
000164AC 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000164B6                            		even
000164B6 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000164BC 00                         		even
000164BC 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000164C6 00                         		even
000164C6 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000164D0 00                         		even
000164D0 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000164D4                            		even
000164D4 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
000164E0                            		even
000164E0 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
000164E4                            		even
000164E4 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
000164E8 00                         		even
000164E8 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
000164EC                            		even
000164EC 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
000164F0 00                         		even
000164F0 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
000164F4 00                         		even
000164F4 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
000164F8 00                         		even
000164F8 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
000164FC 00                         		even
000164FC                            SonAni_WaterSlide:
000164FC 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016500                            		even
00016500 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016504                            		even
00016504 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001650C 00                         		even
0001650C 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016510                            		even
00016510 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
0001651E 00                         		even
0001651E 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001652A                            		even
0001652A 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016530 00                         		even
00016530 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016534                            		even
00016534 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016538                            		even
00016538 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016542 00                         		even
00016542 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
0001654B 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016553 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
0001655A 3334 35                    		dc.b	$33, $34, $35
0001655D 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016564                            		even
00016564 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
0001656A                            		even
0001656A 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
0001656E                            		even
0001656E                            SonAni_Transform:
0001656E 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
00016578 A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016584                            		even
00016584                            
00016584 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016584 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016584 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016584 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016584 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016584 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016584 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016584 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016584 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016584 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016584 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016584 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016584 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016584 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016584 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016584 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016584 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016584 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016584 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016584 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016584 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016584 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016584 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016584 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016584 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016584 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016584 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016584 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016584 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016584 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016584 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016584 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016584 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016584 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016584 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016584 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016584 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016584 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016584 =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016584 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016584 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016584                            		include	"_incObj\Sonic LoadGfx.asm"
00016584                            ; ---------------------------------------------------------------------------
00016584                            ; Sonic	graphics loading subroutine
00016584                            ; ---------------------------------------------------------------------------
00016584                            
00016584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016584                            
00016584                            
00016584                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016584 7000                       		moveq	#0,d0
00016586 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001658A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001658E 6700                       		beq.s	locret_13C96
00016590 11C0 F766                  		move.b	d0,($FFFFF766).w
00016594 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001659A D040                       		add.w	d0,d0
0001659C D4F2 0000                  		adda.w	(a2,d0.w),a2
000165A0 7A00                       		moveq	#0,d5
000165A2 1A1A                       		move.b	(a2)+,d5
000165A4 5345                       		subq.w	#1,d5
000165A6 6B00                       		bmi.s	locret_13C96
000165A8 383C F000                  		move.w	#$F000,d4
000165AC 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000165B2                            
000165B2                            SPLC_ReadEntry:
000165B2 7200                       		moveq	#0,d1
000165B4 121A                       		move.b	(a2)+,d1
000165B6 E149                       		lsl.w	#8,d1
000165B8 121A                       		move.b	(a2)+,d1
000165BA 3601                       		move.w	d1,d3
000165BC E04B                       		lsr.w	#8,d3
000165BE 0243 00F0                  		andi.w	#$F0,d3
000165C2 0643 0010                  		addi.w	#$10,d3
000165C6 0241 0FFF                  		andi.w	#$FFF,d1
000165CA EB89                       		lsl.l	#5,d1
000165CC D286                       		add.l	d6,d1
000165CE 3404                       		move.w	d4,d2
000165D0 D843                       		add.w	d3,d4
000165D2 D843                       		add.w	d3,d4
000165D4 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000165DA 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000165DE                            
000165DE                            locret_13C96:
000165DE 4E75                       		rts	
000165E0                            ; End of function Sonic_LoadGfx
000165E0                            ; End of function Sonic_LoadGfx
000165E0                            
000165E0                            		include	"_incObj\0A Drowning Countdown.asm"
000165E0                            ; ---------------------------------------------------------------------------
000165E0                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000165E0                            ; Sonic's mouth (LZ)
000165E0                            ; ---------------------------------------------------------------------------
000165E0                            
000165E0                            DrownCount:
000165E0 7000                       		moveq	#0,d0
000165E2 1028 0024                  		move.b	obRoutine(a0),d0
000165E6 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000165EA 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000165EE                            ; ===========================================================================
000165EE                            Drown_Index:
000165EE 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000165F0 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000165F2 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000165F4 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000165F6 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000165F8 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000165FA 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
000165FC 0000                       			dc.w Drown_Display-Drown_Index
000165FE 0000                       			dc.w Drown_Delete-Drown_Index
00016600                            
00016600 =00000030                  drown_origX:		equ $30		; original x-axis position
00016600 =00000038                  drown_time:		equ $38		; time between each number changes
00016600                            
00016600 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016600 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016600 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016600 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016600 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016600 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016600 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016600                            ; ===========================================================================
00016600                            
00016600                            Drown_Main:	; Routine 0
00016600 5428 0024                  		addq.b	#2,obRoutine(a0)
00016604 217C 0001 49A6 0004        		move.l	#Map_Bub,obMap(a0)
0001660C 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
00016612 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00016618 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
0001661A 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016620                            
00016620                            	Drown_IsSYZ:	
00016620 117C 0084 0001             		move.b	#$84,obRender(a0)
00016626 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001662C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016632 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016636 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016638                            
00016638 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
0001663C 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016644 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001664A 0240 007F                  		andi.w	#$7F,d0
0001664E 1140 0033                  		move.b	d0,$33(a0)
00016652 6000 0000                  		bra.w	Drown_Countdown
00016656                            ; ===========================================================================
00016656                            
00016656                            @smallbubble:
00016656 1140 001C                  		move.b	d0,obAnim(a0)
0001665A 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016660 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016666                            
00016666                            Drown_Animate:	; Routine 2
00016666 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001666C 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00016672                            
00016672                            Drown_ChkWater:	; Routine 4
00016672 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
00016678 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
0001667A 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
0001667E 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016682 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
00016686 6200                       		bhi.s	Display_Next		; if so, branch TIS
00016688                            		
00016688                            
00016688                            Normal_Water_Level:
00016688 3038 F646                  		move.w	(v_waterpos1).w,d0
0001668C B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016690 6500                       		bcs.s	Wobble		; if not, branch
00016692                            Display_Next:	;TIS		
00016692 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016698 5E28 001C                  		addq.b	#7,obAnim(a0)
0001669C 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
000166A2 6700                       		beq.s	Drown_Display
000166A4 6000                       		bra.s	Drown_Display
000166A6                            ; ===========================================================================
000166A6                            
000166A6                            Wobble:
000166A6 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
000166AA 6700                       		beq.s	@notunnel	; if not, branch
000166AC 5868 0030                  		addq.w	#4,drown_origX(a0)
000166B0                            
000166B0                            	@notunnel:
000166B0 1028 0026                  		move.b	obAngle(a0),d0
000166B4 5228 0026                  		addq.b	#1,obAngle(a0)
000166B8 0240 007F                  		andi.w	#$7F,d0
000166BC 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000166C2 1031 0000                  		move.b	(a1,d0.w),d0
000166C6 4880                       		ext.w	d0
000166C8 D068 0030                  		add.w	drown_origX(a0),d0
000166CC 3140 0008                  		move.w	d0,obX(a0)
000166D0 6100                       		bsr.s	Drown_ShowNumber
000166D2 4EB9 0000 F412             		jsr	(SpeedToPos).l
000166D8 4A28 0001                  		tst.b	obRender(a0)
000166DC 6A00                       		bpl.s	@delete
000166DE 4EF9 0000 F426             		jmp	(DisplaySprite).l
000166E4                            
000166E4                            	@delete:
000166E4 4EF9 0000 F466             		jmp	(DeleteObject).l
000166EA                            ; ===========================================================================
000166EA                            
000166EA                            Drown_Display:	; Routine 6, Routine $E
000166EA 6100                       		bsr.s	Drown_ShowNumber
000166EC 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000166F2 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000166F8 4EF9 0000 F426             		jmp	(DisplaySprite).l
000166FE                            ; ===========================================================================
000166FE                            
000166FE                            Drown_Delete:	; Routine 8, Routine $10
000166FE 4EF9 0000 F466             		jmp	(DeleteObject).l
00016704                            ; ===========================================================================
00016704                            
00016704                            Drown_AirLeft:	; Routine $C
00016704 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
0001670A 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
0001670C 5368 0038                  		subq.w	#1,drown_time(a0)
00016710 6600                       		bne.s	@display
00016712 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016718 5E28 001C                  		addq.b	#7,obAnim(a0)
0001671C 60CC                       		bra.s	Drown_Display
0001671E                            ; ===========================================================================
0001671E                            
0001671E                            	@display:
0001671E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016724 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001672A 4A28 0001                  		tst.b	obRender(a0)
0001672E 6A00                       		bpl.s	Drown_AirLeft_Delete
00016730 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016736                            
00016736                            Drown_AirLeft_Delete:	
00016736 4EF9 0000 F466             		jmp	(DeleteObject).l
0001673C                            ; ===========================================================================
0001673C                            
0001673C                            Drown_ShowNumber:
0001673C 4A68 0038                  		tst.w	drown_time(a0)
00016740 6700                       		beq.s	@nonumber
00016742 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016746 6600                       		bne.s	@nonumber	; if time remains, branch
00016748 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
0001674E 6400                       		bcc.s	@nonumber
00016750                            
00016750 317C 000F 0038             		move.w	#15,drown_time(a0)
00016756 4268 0012                  		clr.w	obVelY(a0)
0001675A 117C 0080 0001             		move.b	#$80,obRender(a0)
00016760 3028 0008                  		move.w	obX(a0),d0
00016764 9078 F700                  		sub.w	(v_screenposx).w,d0
00016768 0640 0080                  		addi.w	#$80,d0
0001676C 3140 0008                  		move.w	d0,obX(a0)
00016770 3028 000C                  		move.w	obY(a0),d0
00016774 9078 F704                  		sub.w	(v_screenposy).w,d0
00016778 0640 0080                  		addi.w	#$80,d0
0001677C 3140 000A                  		move.w	d0,obScreenY(a0)
00016780 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016786                            
00016786                            	@nonumber:
00016786 4E75                       		rts	
00016788                            ; ===========================================================================
00016788                            Drown_WobbleData:
00016788 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016798 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
000167A8 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
000167B8 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
000167C8 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000167D8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000167E8 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000167F8 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016808 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016818 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016828 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016838 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016848 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016858 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016868 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016878 FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016888                            ; ===========================================================================
00016888                            
00016888                            Drown_Countdown:; Routine $A
00016888 4A68 002C                  		tst.w	$2C(a0)
0001688C 6600 0000                  		bne.w	@loc_13F86
00016890 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016896 6400 0000                  		bcc.w	@nocountdown
0001689A 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
000168A0 6700 0000                  		beq.w	@nocountdown	; if not, branch
000168A4                            
000168A4 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000168A8 6A00 0000                  		bpl.w	@nochange	; branch if time remains
000168AC 317C 003B 0038             		move.w	#59,drown_time(a0)
000168B2 317C 0001 0036             		move.w	#1,$36(a0)
000168B8 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000168BE 0240 0001                  		andi.w	#1,d0
000168C2 1140 0034                  		move.b	d0,$34(a0)
000168C6 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
000168CA 0C40 0019                  		cmpi.w	#25,d0
000168CE 6700                       		beq.s	@warnsound	; play sound if	air is 25
000168D0 0C40 0014                  		cmpi.w	#20,d0
000168D4 6700                       		beq.s	@warnsound
000168D6 0C40 000F                  		cmpi.w	#15,d0
000168DA 6700                       		beq.s	@warnsound
000168DC 0C40 000C                  		cmpi.w	#12,d0
000168E0 6200                       		bhi.s	@reduceair	; if air is above 12, branch
000168E2                            
000168E2                            	@skipmusic:
000168EC 5328 0032                  		subq.b	#1,$32(a0)
000168F0 6A00                       		bpl.s	@reduceair
000168F2 1168 0033 0032             		move.b	$33(a0),$32(a0)
000168F8 08E8 0007 0036             		bset	#7,$36(a0)
000168FE 6000                       		bra.s	@reduceair
00016900                            ; ===========================================================================
00016900                            
00016900                            @warnsound:
0001690A                            
0001690A                            @reduceair:
0001690A 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
0001690E 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016912                            
00016912                            		; Sonic drowns here
00016912 6100 0000                  		bsr.w	ResumeMusic
00016916 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016926 117C 000A 0034             		move.b	#$A,$34(a0)
0001692C 317C 0001 0036             		move.w	#1,$36(a0)
00016932 317C 0078 002C             		move.w	#$78,$2C(a0)
00016938 2F08                       		move.l	a0,-(sp)
0001693A 41F8 D000                  		lea	(v_player).w,a0
0001693E 6100 F672                  		bsr.w	Sonic_ResetOnFloor
00016942 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016948 08E8 0001 0022             		bset	#1,obStatus(a0)
0001694E 08E8 0007 0002             		bset	#7,obGfx(a0)
00016954 317C 0000 0012             		move.w	#0,obVelY(a0)
0001695A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016960 317C 0000 0020             		move.w	#0,obInertia(a0)
00016966 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
0001696C 205F                       		movea.l	(sp)+,a0
0001696E 4E75                       		rts	
00016970                            ; ===========================================================================
00016970                            
00016970                            @loc_13F86:
00016970 5368 002C                  		subq.w	#1,$2C(a0)
00016974 6600                       		bne.s	@loc_13F94
00016976 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
0001697C 4E75                       		rts	
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            	@loc_13F94:
0001697E 2F08                       		move.l	a0,-(sp)
00016980 41F8 D000                  		lea	(v_player).w,a0
00016984 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001698A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016990 205F                       		movea.l	(sp)+,a0
00016992 6000                       		bra.s	@nochange
00016994                            ; ===========================================================================
00016994                            
00016994                            @gotomakenum:
00016994 6000                       		bra.s	@makenum
00016996                            ; ===========================================================================
00016996                            
00016996                            @nochange:
00016996 4A68 0036                  		tst.w	$36(a0)
0001699A 6700 0000                  		beq.w	@nocountdown
0001699E 5368 003A                  		subq.w	#1,$3A(a0)
000169A2 6A00 0000                  		bpl.w	@nocountdown
000169A6                            
000169A6                            @makenum:
000169A6 4EB9 0000 3B1C             		jsr	(RandomNumber).l
000169AC 0240 000F                  		andi.w	#$F,d0
000169B0 3140 003A                  		move.w	d0,$3A(a0)
000169B4 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
000169BA 6600 0000                  		bne.w	@nocountdown
000169BE 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
000169C2 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
000169C8 7006                       		moveq	#6,d0
000169CA 0838 0000 D022             		btst	#0,(v_player+obStatus).w
000169D0 6700                       		beq.s	@noflip
000169D2 4440                       		neg.w	d0
000169D4 137C 0040 0026             		move.b	#$40,obAngle(a1)
000169DA                            
000169DA                            	@noflip:
000169DA D169 0008                  		add.w	d0,obX(a1)
000169DE 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
000169E4 137C 0006 0028             		move.b	#6,obSubtype(a1)
000169EA 4A68 002C                  		tst.w	$2C(a0)
000169EE 6700 0000                  		beq.w	@loc_1403E
000169F2 0268 0007 003A             		andi.w	#7,$3A(a0)
000169F8 0668 0000 003A             		addi.w	#0,$3A(a0)
000169FE 3038 D00C                  		move.w	(v_player+obY).w,d0
00016A02 0440 000C                  		subi.w	#$C,d0
00016A06 3340 000C                  		move.w	d0,obY(a1)
00016A0A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00016A10 1340 0026                  		move.b	d0,obAngle(a1)
00016A14 3038 FE04                  		move.w	(v_framecount).w,d0
00016A18 0200 0003                  		andi.b	#3,d0
00016A1C 6600                       		bne.s	@loc_14082
00016A1E 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016A24 6000                       		bra.s	@loc_14082
00016A26                            ; ===========================================================================
00016A26                            
00016A26                            @loc_1403E:
00016A26 0828 0007 0036             		btst	#7,$36(a0)
00016A2C 6700                       		beq.s	@loc_14082
00016A2E 3438 FE14                  		move.w	(v_air).w,d2
00016A32 E24A                       		lsr.w	#1,d2
00016A34 4EB9 0000 3B1C             		jsr	(RandomNumber).l
00016A3A 0240 0003                  		andi.w	#3,d0
00016A3E 6600                       		bne.s	@loc_1406A
00016A40 08E8 0006 0036             		bset	#6,$36(a0)
00016A46 6600                       		bne.s	@loc_14082
00016A48 1342 0028                  		move.b	d2,obSubtype(a1)
00016A4C 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016A52                            
00016A52                            	@loc_1406A:
00016A52 4A28 0034                  		tst.b	$34(a0)
00016A56 6600                       		bne.s	@loc_14082
00016A58 08E8 0006 0036             		bset	#6,$36(a0)
00016A5E 6600                       		bne.s	@loc_14082
00016A60 1342 0028                  		move.b	d2,obSubtype(a1)
00016A64 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016A6A                            
00016A6A                            @loc_14082:
00016A6A 5328 0034                  		subq.b	#1,$34(a0)
00016A6E 6A00                       		bpl.s	@nocountdown
00016A70 4268 0036                  		clr.w	$36(a0)
00016A74                            
00016A74                            @nocountdown:
00016A74 4E75                       		rts	
00016A74 4E75                       		rts	
00016A76                            
00016A76                            
00016A76                            ; ---------------------------------------------------------------------------
00016A76                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016A76                            ; ---------------------------------------------------------------------------
00016A76                            
00016A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A76                            
00016A76                            
00016A76                            ResumeMusic:
00016A76                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016A76                            		;bhi.s	@over12		; if yes, branch
00016A76                            		;move.b	(v_Saved_music),d0
00016A76                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016A76                            		;beq.s	@notinvinc ; if not, branch
00016A76                            		;move.w	#bgm_Invincible,d0
00016A76                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016A76                            		;beq.s	@notinvinc	; if not, branch
00016A76                            		;move.w	#bgm_Ending,d0
00016A76                            
00016A76                            	;@notinvinc:
00016A76                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016A76                            		;beq.s	@playselected ; if not, branch
00016A76                            		;move.w	#bgm_Boss,d0
00016A76                            
00016A76                            	;@playselected:
00016A76                            		;jsr	(PlaySound).l
00016A76                            
00016A76                            	;@over12:
00016A76 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016A7C 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016A80 4E75                       		rts	
00016A82                            
00016A82                            ;End of function ResumeMusic
00016A82                            
00016A82                            ; ===========================================================================
00016A82                            
00016A82                            		include	"_anim\Drowning Countdown.asm"
00016A82                            ; ---------------------------------------------------------------------------
00016A82                            ; Animation script - countdown numbers and bubbles (LZ)
00016A82                            ; ---------------------------------------------------------------------------
00016A82 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016A84 0000                       		dc.w @oneappear-Ani_Drown
00016A86 0000                       		dc.w @twoappear-Ani_Drown
00016A88 0000                       		dc.w @threeappear-Ani_Drown
00016A8A 0000                       		dc.w @fourappear-Ani_Drown
00016A8C 0000                       		dc.w @fiveappear-Ani_Drown
00016A8E 0000                       		dc.w @smallbubble-Ani_Drown
00016A90 0000                       		dc.w @zeroflash-Ani_Drown
00016A92 0000                       		dc.w @oneflash-Ani_Drown
00016A94 0000                       		dc.w @twoflash-Ani_Drown
00016A96 0000                       		dc.w @threeflash-Ani_Drown
00016A98 0000                       		dc.w @fourflash-Ani_Drown
00016A9A 0000                       		dc.w @fiveflash-Ani_Drown
00016A9C 0000                       		dc.w @blank-Ani_Drown
00016A9E 0000                       		dc.w @mediumbubble-Ani_Drown
00016AA0 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016AAA 00                         		even
00016AAA 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016AB4 00                         		even
00016AB4 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016ABE 00                         		even
00016ABE 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016AC8 00                         		even
00016AC8 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016AD2 00                         		even
00016AD2 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016ADC 00                         		even
00016ADC 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016AE2 00                         		even
00016AE2 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016AEA 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016AF2 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016AFA 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016B02 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016B0A 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016B12 0EFC                       @blank:		dc.b $E, afRoutine
00016B14 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016B1A                            		even
00016B1A                            		even
00016B1A                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            ; Sprite mappings - drowning countdown numbers (LZ)
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            Map_Drown_internal:
00016B1A 0000                       		dc.w @num-Map_Drown_internal
00016B1C 01                         @num:		dc.b 1
00016B1D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016B22                            		even
00016B22                            		even
00016B22                            
00016B22                            ; --------------------------------------------------
00016B22                            ; Subroutine to load the shield's art over DMA
00016B22                            ; --------------------------------------------------
00016B22                            
00016B22                            PLCLoad_Shields:
00016B22 7000                       		moveq	#0,d0
00016B24 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00016B28 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00016B2C 6700                       		beq.s	locret2_13C96
00016B2E 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
00016B32 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00016B36 D040                       		add.w   d0,d0
00016B38 D4F2 0000                  		adda.w  (a2,D0),a2
00016B3C 3A1A                       		move.w  (a2)+,d5
00016B3E 5345                       		subq.w  #1,d5
00016B40 6B00                       		bmi.s	locret2_13C96
00016B42 3828 0036                  		move.w  shield_vram_art(A0),d4
00016B46                            
00016B46                            loc_199BE:
00016B46 7200                       		moveq	#0,d1
00016B48 121A                       		move.b	(a2)+,d1
00016B4A E149                       		lsl.w	#8,d1
00016B4C 121A                       		move.b	(a2)+,d1
00016B4E 3601                       		move.w	d1,d3
00016B50 E04B                       		lsr.w	#8,d3
00016B52 0243 00F0                  		andi.w	#$F0,d3
00016B56 0643 0010                  		addi.w	#$10,d3
00016B5A 0241 0FFF                  		andi.w	#$FFF,d1
00016B5E EB89                       		lsl.l	#5,d1
00016B60 D2A8 0038                  		add.l   shield_Art_Address(a0),d1
00016B64 3404                       		move.w  d4,d2
00016B66 D843                       		add.w   d3,d4
00016B68 D843                       		add.w   d3,d4
00016B6A 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
00016B70 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
00016B74                            
00016B74                            locret2_13C96:
00016B74 4E75                       		rts	
00016B76                            ; End of function PLCLoad_Shields
00016B76                            
00016B76                            		include	"_incObj\4E Silver Shield.asm"
00016B76                            ; ---------------------------------------------------------------------------
00016B76                            ; Object 4E - Silver Shield
00016B76                            ; ---------------------------------------------------------------------------
00016B76                            SPShieldItem: ; XREF: Obj_Index
00016B76 7000                       		moveq	#0,d0
00016B78 1028 0024                  		move.b	obRoutine(a0),d0
00016B7C 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
00016B80 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
00016B84                            ; ===========================================================================
00016B84                            ; off_1D900:
00016B84                            SPShieldItem_Index:
00016B84 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
00016B86 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
00016B88                            ; ===========================================================================
00016B88                            ; loc_1D904:
00016B88                            SPShieldItem_Init:
00016B88 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016B90 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016B98 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016BA0 117C 0004 0001             		move.b	#4,obRender(a0)
00016BA6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016BAC 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016BB2 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016BB8 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016BBE 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016BC4 6700                       		beq.s	@animclear
00016BC6 08E8 0007 0002             		bset	#7,obGfx(a0)
00016BCC                            
00016BCC                            @animclear:
00016BCC 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016BD2 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016BD8 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016BDC                            ; loc_1D92C:
00016BDC                            SPShieldItem_Main:
00016BDC 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016BE0 4A38 FE2D                  		tst.b	(v_invinc).w
00016BE4 6600                       		bne.s	@return
00016BE6                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016BE6                            		;beq.s	@return	; If so, do not display and do not update variables
00016BE6 4A38 F5CA                  		tst.b	(v_SpShield).w
00016BEA 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00016BEE 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016BF4 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016BFA 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016C00 4A6A 0002                  		tst.w	obGFX(a2)
00016C04 6A00                       		bpl.s	@nothighpriority
00016C06 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016C0C                            
00016C0C                            		@nothighpriority:
00016C0C 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016C12 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00016C18 4EB9 0001 6B22             		jsr	(PLCLoad_Shields).l
00016C1E 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016C24                            ; ---------------------------------------------------------------------------
00016C24                            ; ===========================================================================
00016C24                            
00016C24                            @return:
00016C24 4E75                       		rts
00016C26                            
00016C26                            SPShieldItem_Destroy:
00016C26 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016C2A 4E75                       		rts
00016C2C                            ; ===========================================================================
00016C2C                            ; ===========================================================================
00016C2C                            		include	"_incObj\04 Gold Shield.asm"
00016C2C                            ; ---------------------------------------------------------------------------
00016C2C                            ; Object 04 - Gold Shield
00016C2C                            ; ---------------------------------------------------------------------------
00016C2C                            GShieldItem: ; XREF: Obj_Index
00016C2C 7000                       		moveq	#0,d0
00016C2E 1028 0024                  		move.b	obRoutine(a0),d0
00016C32 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00016C36 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00016C3A                            ; ===========================================================================
00016C3A                            ; off_1D900:
00016C3A                            GShieldItem_Index:
00016C3A 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00016C3C 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00016C3E                            ; ===========================================================================
00016C3E                            ; loc_1D904:
00016C3E                            GShieldItem_Init:
00016C3E 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016C46 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016C4E 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016C56 117C 0004 0001             		move.b	#4,obRender(a0)
00016C5C 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016C62 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016C68 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016C6E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016C74 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016C7A 6700                       		beq.s	@animclear
00016C7C 08E8 0007 0002             		bset	#7,obGfx(a0)
00016C82                            
00016C82                            @animclear:
00016C82 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016C88 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016C8E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016C92                            ; loc_1D92C:
00016C92                            GShieldItem_Main:
00016C92 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016C96 4A38 FE2D                  		tst.b	(v_invinc).w
00016C9A 6600                       		bne.s	@return
00016C9C                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016C9C                            		;beq.s	@return	; If so, do not display and do not update variables
00016C9C 4A38 F5C9                  		tst.b	(v_GShield).w
00016CA0 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
00016CA4 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016CAA 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016CB0 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016CB6 4A6A 0002                  		tst.w	obGFX(a2)
00016CBA 6A00                       		bpl.s	@nothighpriority
00016CBC 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016CC2                            
00016CC2                            		@nothighpriority:
00016CC2 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016CC8 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00016CCE 4EB9 0001 6B22             		jsr	(PLCLoad_Shields).l
00016CD4 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016CDA                            ; ---------------------------------------------------------------------------
00016CDA                            ; ===========================================================================
00016CDA                            
00016CDA                            @return:
00016CDA 4E75                       		rts
00016CDC                            
00016CDC                            GShieldItem_Destroy:
00016CDC 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016CE0 4E75                       		rts
00016CE2                            ; ===========================================================================
00016CE2                            ; ===========================================================================
00016CE2                            		include	"_incObj\07 Red Shield.asm"
00016CE2                            ; ---------------------------------------------------------------------------
00016CE2                            ; Object 07 - Red Shield
00016CE2                            ; ---------------------------------------------------------------------------
00016CE2                            RShieldItem: ; XREF: Obj_Index
00016CE2 7000                       		moveq	#0,d0
00016CE4 1028 0024                  		move.b	obRoutine(a0),d0
00016CE8 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00016CEC 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00016CF0                            ; ===========================================================================
00016CF0                            ; off_1D900:
00016CF0                            RShieldItem_Index:
00016CF0 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
00016CF2 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
00016CF4                            ; ===========================================================================
00016CF4                            ; loc_1D904:
00016CF4                            RShieldItem_Init:
00016CF4 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016CFC 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016D04 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016D0C 117C 0004 0001             		move.b	#4,obRender(a0)
00016D12 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016D18 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016D1E 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016D24 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016D2A 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016D30 6700                       		beq.s	@animclear
00016D32 08E8 0007 0002             		bset	#7,obGfx(a0)
00016D38                            
00016D38                            @animclear:
00016D38 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016D3E 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016D44 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016D48                            ; loc_1D92C:
00016D48                            RShieldItem_Main:
00016D48 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016D4C 4A38 FE2D                  		tst.b	(v_invinc).w
00016D50 6600                       		bne.s	@return
00016D52                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016D52                            		;beq.s	@return	; If so, do not display and do not update variables
00016D52 4A38 F5C8                  		tst.b	(v_RShield).w
00016D56 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
00016D5A 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016D60 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016D66 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016D6C 4A6A 0002                  		tst.w	obGFX(a2)
00016D70 6A00                       		bpl.s	@nothighpriority
00016D72 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016D78                            
00016D78                            		@nothighpriority:
00016D78 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016D7E 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00016D84 4EB9 0001 6B22             		jsr	(PLCLoad_Shields).l
00016D8A 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016D90                            ; ---------------------------------------------------------------------------
00016D90                            ; ===========================================================================
00016D90                            
00016D90                            @return:
00016D90 4E75                       		rts
00016D92                            
00016D92                            RShieldItem_Destroy:
00016D92 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016D96 4E75                       		rts
00016D98                            ; ===========================================================================
00016D98                            ; ===========================================================================
00016D98                            		include	"_incObj\38 Shield.asm"
00016D98                            ; ---------------------------------------------------------------------------
00016D98                            ; Object 38 - Shield
00016D98                            ; ---------------------------------------------------------------------------
00016D98                            ShieldItem: ; XREF: Obj_Index
00016D98 7000                       		moveq	#0,d0
00016D9A 1028 0024                  		move.b	obRoutine(a0),d0
00016D9E 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
00016DA2 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
00016DA6                            ; ===========================================================================
00016DA6                            ; off_1D900:
00016DA6                            ShieldItem_Index:
00016DA6 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
00016DA8 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00016DAA                            ; ===========================================================================
00016DAA                            ; loc_1D904:
00016DAA                            ShieldItem_Init:
00016DAA 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016DB2 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016DBA 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016DC2 117C 0004 0001             		move.b	#4,obRender(a0)
00016DC8 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016DCE 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016DD4 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016DDA 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016DE0 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016DE6 6700                       		beq.s	loc_195F0S
00016DE8 08E8 0007 0002             		bset	#7,obGfx(a0)
00016DEE                            
00016DEE                            loc_195F0S:
00016DEE 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016DF4 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016DFA 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016DFE                            ; loc_1D92C:
00016DFE                            ShieldItem_Main:
00016DFE 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016E02 4A38 FE2D                  		tst.b	(v_invinc).w
00016E06 6600                       		bne.s	return_1D976
00016E08                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016E08                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00016E08 4A38 FE2C                  		tst.b	(v_shield).w
00016E0C 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00016E10 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016E16 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016E1C 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016E22 4A6A 0002                  		tst.w	obGFX(a2)
00016E26 6A00                       		bpl.s	@nothighpriority
00016E28 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016E2E                            
00016E2E                            		@nothighpriority:
00016E2E 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016E34 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00016E3A 4EB9 0001 6B22             		jsr	(PLCLoad_Shields).l
00016E40 4EF9 0000 F426             		jmp	(DisplaySprite).l
00016E46                            ; ---------------------------------------------------------------------------
00016E46                            ; ===========================================================================
00016E46                            
00016E46                            return_1D976:
00016E46 4E75                       		rts
00016E48                            
00016E48                            ShieldItem_Destroy:
00016E48 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016E4C 4E75                       		rts
00016E4E                            ; ===========================================================================
00016E4E                            ; ===========================================================================
00016E4E                            		include	"_incObj\19 Invincibility Stars.asm"		
00016E4E                            ; ---------------------------------------------------------------------------
00016E4E                            ; Object 10 - invincibility stars
00016E4E                            ; ---------------------------------------------------------------------------
00016E4E =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
00016E4E =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00016E4E =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00016E4E =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00016E4E                            
00016E4E                            InvStarsObj: 
00016E4E 7000                       		moveq	#0,d0
00016E50 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
00016E54 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00016E58 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00016E5C                            ; ===========================================================================
00016E5C 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
00016E5E 0000                       		dc.w @MainObject-InvStars_Index
00016E60 0000                       		dc.w @SubObject-InvStars_Index
00016E62                            ; ===========================================================================
00016E62                            
00016E62                            	@SubObjectsData:
00016E62 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00016E66 0B00                       		dc.w $0B00 ; speed index,sub3 anim
00016E68 0000 0000                  		dc.l Ani_InvStars3
00016E6C 160D                       		dc.w $160D
00016E6E 0000 0000                  		dc.l Ani_InvStars4
00016E72 2C0D                       		dc.w $2C0D
00016E74                            ; ===========================================================================
00016E74                            
00016E74                            	@InitObjects:
00016E74 223C 0000 0000             		move.l	#Unc_Stars,d1
00016E7A 343C ABC0                  		move.w	#$ABC0,d2
00016E7E 363C 0220                  		move.w	#$220,d3
00016E82 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016E88 7400                       		moveq	#0,d2
00016E8A 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
00016E8E 43D0                       		lea	(a0),a1
00016E90 7203                       		moveq	#3,d1
00016E92                            		
00016E92                            	@initStars:
00016E92 1290                       		move.b	(a0),(a1) ; load obj35
00016E94 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
00016E9A 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
00016EA2 337C 055E 0002             		move.w	#$55E,obGfx(a1)
00016EA8 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00016EAE 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
00016EB4 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
00016EBA 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
00016EBE 5242                       		addq.w	#1,d2
00016EC0 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
00016EC4 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
00016EC8 43E9 0040                  		lea	$40(a1),a1 ; a1=object
00016ECC 51C9 FFC4                  		dbf	d1,@initStars
00016ED0                            
00016ED0 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
00016ED6 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
00016EDC                            
00016EDC                            	@MainObject:
00016EDC 43F8 D000                  		lea (v_player).w,a1 ; a1=character
00016EE0 4A38 FE2D                  		tst.b   (v_invinc).w
00016EE4 6700 8580                  		beq.w	DeleteObject
00016EE8 3029 0008                  		move.w	obX(a1),d0
00016EEC 3140 0008                  		move.w	d0,obX(a0)
00016EF0 3229 000C                  		move.w	obY(a1),d1
00016EF4 3141 000C                  		move.w	d1,obY(a0)
00016EF8 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016EFC 47F9 0000 0000             		lea	Ani_InvStars1,a3
00016F02 7A00                       		moveq	#0,d5
00016F04                            
00016F04                            	@getFrame_main:
00016F04 3428 0038                  		move.w	$38(a0),d2
00016F08 1A33 2000                  		move.b	(a3,d2.w),d5
00016F0C 6A00                       		bpl.s	@setFrameAndPosition_main
00016F0E 4268 0038                  		clr.w	$38(a0)
00016F12 60F0                       		bra.s	@getFrame_main
00016F14                            ; ===========================================================================
00016F14                            
00016F14                            	@setFrameAndPosition_main:
00016F14 5268 0038                  		addq.w	#1,$38(a0)
00016F18 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00016F1E 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016F22 6100 0000                  		bsr.w	InvStars_get_speed
00016F26 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016F28 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016F2A 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016F2C 0646 0020                  		addi.w	#$20,d6
00016F30 6100 0000                  		bsr.w	InvStars_get_speed
00016F34 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016F36 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016F38 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016F3A 7012                       		moveq	#$12,d0
00016F3C 0829 0000 0022             		btst	#0,obStatus(a1)
00016F42 6700                       		beq.s	@display_main
00016F44 4440                       		neg.w	d0
00016F46                            
00016F46                            	@display_main:
00016F46 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00016F4A 303C 0080                  		move.w	#(1*$80),d0
00016F4E 6000 8502                  		bra.w	DisplaySprite2
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            	@SubObject:
00016F52 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
00016F56 4A38 FE2D                  		tst.b   (v_invinc).w
00016F5A 6700 850A                  		beq.w	DeleteObject
00016F5E 4BF8 F7A8                  		lea		(v_trackpos).w,a5
00016F62 4DF8 CB00                  		lea		(v_tracksonic).w,a6
00016F66                            
00016F66                            	@getPosition_sub:
00016F66 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
00016F6A E509                       		lsl.b	#2,d1
00016F6C 3401                       		move.w	d1,d2
00016F6E D241                       		add.w	d1,d1
00016F70 D242                       		add.w	d2,d1
00016F72 3015                       		move.w	(a5),d0
00016F74 9001                       		sub.b	d1,d0
00016F76 45F6 0000                  		lea	(a6,d0.w),a2
00016F7A 301A                       		move.w	(a2)+,d0
00016F7C 321A                       		move.w	(a2)+,d1
00016F7E 3140 0008                  		move.w	d0,obX(a0)
00016F82 3141 000C                  		move.w	d1,obY(a0)
00016F86 45E8 0010                  		lea	sub2_x_pos(a0),a2
00016F8A 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
00016F8E                            
00016F8E                            	@getFrame_sub:
00016F8E 3428 0038                  		move.w	$38(a0),d2
00016F92 1A33 2000                  		move.b	(a3,d2.w),d5
00016F96 6A00                       		bpl.s	@setFrameAndPosition_sub
00016F98 4268 0038                  		clr.w	$38(a0)
00016F9C 60F0                       		bra.s	@getFrame_sub
00016F9E                            ; ===========================================================================
00016F9E                            
00016F9E                            	@setFrameAndPosition_sub:
00016F9E 4845                       		swap	d5
00016FA0 D428 0035                  		add.b	$35(a0),d2
00016FA4 1A33 2000                  		move.b	(a3,d2.w),d5
00016FA8 5268 0038                  		addq.w	#1,$38(a0)
00016FAC 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
00016FB0 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
00016FB4 6100                       		bsr.s	InvStars_get_speed
00016FB6 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00016FB8 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00016FBA 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00016FBC 0646 0020                  		addi.w	#$20,d6
00016FC0 4845                       		swap	d5
00016FC2 6100                       		bsr.s	InvStars_get_speed
00016FC4 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00016FC6 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00016FC8 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00016FCA 7002                       		moveq	#2,d0
00016FCC 0829 0000 0022             		btst	#0,obStatus(a1)
00016FD2 6700                       		beq.s	loc_1DB20
00016FD4 4440                       		neg.w	d0
00016FD6                            
00016FD6                            loc_1DB20:
00016FD6 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
00016FDA 303C 0080                  		move.w    #(1*$80),d0
00016FDE 6000 8472                  		bra.w    DisplaySprite2
00016FE2                            ; ===========================================================================
00016FE2                            
00016FE2                            InvStars_get_speed:
00016FE2 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
00016FE6 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
00016FEA 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
00016FEE 4882                       		ext.w	d2
00016FF0 4883                       		ext.w	d3
00016FF2 D440                       		add.w	d0,d2 ; add object x position to x-move speed
00016FF4 D641                       		add.w	d1,d3 ; add object y position to y-move speed
00016FF6 4E75                       		rts
00016FF8                            
00016FF8                            InvStars_Speeds: ; x-move speed,	y-move speed	
00016FF8 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
00017008 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
00017018 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
00017028 FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00017038                            
00017038                            ; ---------------------------------------------------------------------------
00017038                            ; Animation script - invincibility stars
00017038                            ; ---------------------------------------------------------------------------
00017038                            
00017038                            ; The animation script differs from the animate_sprite subroutine
00017038                            ; Every positive byte - mapping
00017038                            ; Every negative byte - loop flag 
00017038                            
00017038 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00017046 00                         		even
00017046 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
00017051 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
0001705C 00                         		even
0001705C 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00017069 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00017076 00                         		even
00017076 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
00017083 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
00017090 00                         		even			
00017090 00                         		even			
00017090                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
00017090                            ; ---------------------------------------------------------------------------
00017090                            ; Object 4A - special stage entry from beta
00017090                            ; ---------------------------------------------------------------------------
00017090                            
00017090                            VanishSonic:
00017090 7000                       		moveq	#0,d0
00017092 1028 0024                  		move.b	obRoutine(a0),d0
00017096 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
0001709A 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
0001709E                            ; ===========================================================================
0001709E 0000                       Van_Index:	dc.w Van_Main-Van_Index
000170A0 0000                       		dc.w Van_RmvSonic-Van_Index
000170A2 0000                       		dc.w Van_LoadSonic-Van_Index
000170A4                            
000170A4 =00000030                  van_time:	equ $30		; time for Sonic to disappear
000170A4                            ; ===========================================================================
000170A4                            
000170A4                            Van_Main:	; Routine 0
000170A4 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000170A8 6700                       		beq.s	@isempty	; if yes, branch
000170AA 4E75                       		rts	
000170AC                            
000170AC                            	@isempty:
000170AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000170B0 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000170B8 117C 0004 0001             		move.b	#4,obRender(a0)
000170BE 317C 0080 0018             		move.w	#$80,obPriority(a0)
000170C4 117C 0038 0014             		move.b	#$38,obActWid(a0)
000170CA 317C 0541 0002             		move.w	#$541,obGfx(a0)
000170D0 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
000170D6                            
000170D6                            Van_RmvSonic:	; Routine 2
000170D6 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
000170DC 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
000170E2 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
000170E8 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
000170EE 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000170F4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
000170FA 6600                       		bne.s	@display
000170FC 4A38 D000                  		tst.b	(v_player).w
00017100 6700                       		beq.s	@display
00017102 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00017112                            
00017112                            	@display:
00017112 4EF9 0000 F426             		jmp	(DisplaySprite).l
00017118                            ; ===========================================================================
00017118                            
00017118                            Van_LoadSonic:	; Routine 4
00017118 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
0001711C 6600                       		bne.s	@wait		; if time remains, branch
0001711E 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00017124 4EF9 0000 F466             		jmp	(DeleteObject).l
0001712A                            
0001712A                            	@wait:
0001712A 4E75                       		rts	
0001712A 4E75                       		rts	
0001712C                            		include	"_incObj\08 Water Splash.asm"
0001712C                            ; ---------------------------------------------------------------------------
0001712C                            ; Object 08 - water splash (LZ)
0001712C                            ; ---------------------------------------------------------------------------
0001712C                            
0001712C                            Splash:
0001712C 7000                       		moveq	#0,d0
0001712E 1028 0024                  		move.b	obRoutine(a0),d0
00017132 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017136 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
0001713A                            ; ===========================================================================
0001713A 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
0001713C 0000                       		dc.w Spla_Display-Spla_Index
0001713E 0000                       		dc.w Spla_Delete-Spla_Index
00017140                            ; ===========================================================================
00017140                            
00017140                            Spla_Main:    ; Routine 0
00017140 5428 0024                          addq.b    #2,obRoutine(a0)
00017144 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
0001714C 0028 0004 0001                     ori.b    #4,obRender(a0)
00017152 117C 0001 0018                     move.b    #1,obPriority(a0)
00017158 117C 0010 0014                     move.b    #$10,obActWid(a0)
0001715E 317C 4259 0002                     move.w    #$4259,obGfx(a0)
00017164 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
0001716A                            
0001716A                            Spla_Display:    ; Routine 2
0001716A                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
0001716A 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
00017170 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017176 4EB9 0000 C4E0                     jsr    (AnimateSprite).l
0001717C 4EF9 0000 F426                     jmp    (DisplaySprite).l
00017182                            ; ===========================================================================
00017182                            
00017182                            Spla_Delete:	; Routine 4
00017182 4EF9 0000 F466             		jmp	(DeleteObject).l	; delete when animation	is complete
00017182 4EF9 0000 F466             		jmp	(DeleteObject).l	; delete when animation	is complete
00017188                            		include	"_anim\Shield and Invincibility.asm"
00017188                            ; ---------------------------------------------------------------------------
00017188                            ; Animation script - shield and invincibility stars
00017188                            ; ---------------------------------------------------------------------------
00017188 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
0001718A 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
0001718A 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
000171A4                            Map_Shield:	include	"_maps\Shield.asm"
000171A4                            ; --------------------------------------------------------------------------------
000171A4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000171A4                            ; --------------------------------------------------------------------------------
000171A4                            
000171A4                            SME_ocN6K:	
000171A4 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
000171A8 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
000171AC 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
000171B0 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
000171B4 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
000171B8 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
000171BC 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
000171BE 00                         SME_ocN6K_1A:	dc.b 0	
000171BF 04                         SME_ocN6K_1B:	dc.b 4	
000171C0 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000171C5 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000171CA 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000171CF 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000171D4 04                         SME_ocN6K_30:	dc.b 4	
000171D5 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000171DA E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000171DF 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000171E4 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000171E9 04                         SME_ocN6K_45:	dc.b 4	
000171EA E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000171EF E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000171F4 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000171F9 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000171FE 04                         SME_ocN6K_5A:	dc.b 4	
000171FF E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
00017204 E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
00017209 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
0001720E 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
00017213 02                         SME_ocN6K_6F:	dc.b 2	
00017214 E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017219 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
0001721E 02                         SME_ocN6K_7A:	dc.b 2	
0001721F E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
00017224 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017229 02                         SME_ocN6K_85:	dc.b 2	
0001722A E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
0001722F 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
00017234 02                         SME_ocN6K_90:	dc.b 2	
00017235 E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
0001723A 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
0001723F 02                         SME_ocN6K_9B:	dc.b 2	
00017240 E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
00017245 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
0001724A 04                         SME_ocN6K_A6:	dc.b 4	
0001724B E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
00017250 E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
00017255 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
0001725A 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
0001725F 04                         SME_ocN6K_BB:	dc.b 4	
00017260 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017265 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
0001726A 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
0001726F 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017274 04                         SME_ocN6K_D0:	dc.b 4	
00017275 E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
0001727A E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
0001727F 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017284 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
0001728A 00                         		even
0001728A 00                         		even
0001728A                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
0001728A                            ; --------------------------------------------------------------------------------
0001728A                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
0001728A                            
0001728A                            SME_yRIsY:	
0001728A 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
0001728E 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
00017292 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017296 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
0001729A 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
0001729E 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
000172A2 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
000172A4 0000                       SME_yRIsY_1A:	dc.b 0, 0	
000172A6 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
000172B0 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
000172BA 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
000172C4 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
000172CE 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
000172D4 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
000172DA 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
000172E0 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
000172E6 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
000172EC 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
000172F6 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
00017300 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
0001730A                            		even
0001730A                            		even
0001730A                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
0001730A                            ; ================================================================================
0001730A                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
0001730A                            ; ================================================================================
0001730A                            
0001730A                            InvStarMap:
0001730A 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
0001730E 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
00017312 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
00017316 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
0001731A 0000                       	dc.w InvStarMap_8-InvStarMap
0001731C 01                         InvStarMap_1: dc.b $1
0001731D F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
00017322 01                         InvStarMap_2: dc.b $1
00017323 F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00017328 01                         InvStarMap_3: dc.b $1
00017329 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
0001732E 01                         InvStarMap_4: dc.b $1
0001732F F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
00017334 01                         InvStarMap_5: dc.b $1
00017335 F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
0001733A 01                         InvStarMap_6: dc.b $1
0001733B F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
00017340 01                         InvStarMap_7: dc.b $1
00017341 F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00017346 01                         InvStarMap_8: dc.b $1
00017347 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
0001734C                            	even
0001734C                            	even
0001734C                            		include	"_anim\Special Stage Entry (Unused).asm"
0001734C                            ; ---------------------------------------------------------------------------
0001734C                            ; Animation script - special stage entry effect from beta
0001734C                            ; ---------------------------------------------------------------------------
0001734C 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
0001734E 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00017362                            		even
00017362                            		even
00017362                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00017362                            ; ---------------------------------------------------------------------------
00017362                            ; Sprite mappings - special stage entry	from beta
00017362                            ; ---------------------------------------------------------------------------
00017362                            Map_Vanish_internal:
00017362 0000                       		dc.w @flash1-Map_Vanish_internal
00017364 0000                       		dc.w @flash2-Map_Vanish_internal
00017366 0000                       		dc.w @flash3-Map_Vanish_internal
00017368 0000                       		dc.w @sparkle1-Map_Vanish_internal
0001736A 0000                       		dc.w @sparkle2-Map_Vanish_internal
0001736C 0000                       		dc.w @sparkle3-Map_Vanish_internal
0001736E 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017370 0000                       		dc.w @blank-Map_Vanish_internal
00017372 03                         @flash1:	dc.b 3
00017373 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017378 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001737D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00017382 03                         @flash2:	dc.b 3
00017383 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017388 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001738D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00017392 05                         @flash3:	dc.b 5
00017393 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017398 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001739D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000173A2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000173A7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000173AC 09                         @sparkle1:	dc.b 9
000173AD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000173B2 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000173B7 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000173BC 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000173C1 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000173C6 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000173CB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000173D0 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000173D5 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000173DA 12                         @sparkle2:	dc.b $12
000173DB 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000173E0 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000173E5 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000173EA 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000173EF 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000173F4 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000173F9 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000173FE F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00017403 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017408 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
0001740D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00017412 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017417 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
0001741C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017421 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017426 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
0001742B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017430 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00017435 11                         @sparkle3:	dc.b $11
00017436 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
0001743B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017440 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00017445 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
0001744A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001744F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00017454 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017459 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001745E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00017463 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017468 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001746D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00017472 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017477 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001747C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017481 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017486 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001748B 09                         @sparkle4:	dc.b 9
0001748C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017491 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017496 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001749B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000174A0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000174A5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000174AA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000174AF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000174B4 04                         		dc.b 4
000174B5 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000174BA                            		even
000174BA                            		even
000174BA                            		include	"_anim\Water Splash.asm"
000174BA                            ; ---------------------------------------------------------------------------
000174BA                            ; Animation script - water splash (LZ)
000174BA                            ; ---------------------------------------------------------------------------
000174BA 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000174BC 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000174C2 00                         		even
000174C2 00                         		even
000174C2                            Map_Splash:	include	"_maps\Water Splash.asm"
000174C2                            ; ---------------------------------------------------------------------------
000174C2                            ; Sprite mappings - water splash (LZ)
000174C2                            ; ---------------------------------------------------------------------------
000174C2                            Map_Splash_internal:
000174C2 0000                       		dc.w @splash1-Map_Splash_internal
000174C4 0000                       		dc.w @splash2-Map_Splash_internal
000174C6 0000                       		dc.w @splash3-Map_Splash_internal
000174C8 02                         @splash1:	dc.b 2
000174C9 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000174CE FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000174D3 02                         @splash2:	dc.b 2
000174D4 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000174D9 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000174DE 01                         @splash3:	dc.b 1
000174DF E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000174E4                            		even
000174E4                            		even
000174E4                            
000174E4                            		include	"_incObj\Sonic AnglePos.asm"
000174E4                            ; ---------------------------------------------------------------------------
000174E4                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000174E4                            ; ---------------------------------------------------------------------------
000174E4                            
000174E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000174E4                            
000174E4                            
000174E4                            Sonic_AnglePos:
000174E4 0828 0003 0022             		btst	#3,obStatus(a0)
000174EA 6700                       		beq.s	loc_14602
000174EC 7000                       		moveq	#0,d0
000174EE 11C0 F768                  		move.b	d0,($FFFFF768).w
000174F2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000174F6 4E75                       		rts	
000174F8                            ; ===========================================================================
000174F8                            
000174F8                            loc_14602:
000174F8 7003                       		moveq	#3,d0
000174FA 11C0 F768                  		move.b	d0,($FFFFF768).w
000174FE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017502 1028 0026                  		move.b	obAngle(a0),d0
00017506 0600 0020                  		addi.b	#$20,d0
0001750A 6A00                       		bpl.s	loc_14624
0001750C 1028 0026                  		move.b	obAngle(a0),d0
00017510 6A00                       		bpl.s	loc_1461E
00017512 5300                       		subq.b	#1,d0
00017514                            
00017514                            loc_1461E:
00017514 0600 0020                  		addi.b	#$20,d0
00017518 6000                       		bra.s	loc_14630
0001751A                            ; ===========================================================================
0001751A                            
0001751A                            loc_14624:
0001751A 1028 0026                  		move.b	obAngle(a0),d0
0001751E 6A00                       		bpl.s	loc_1462C
00017520 5200                       		addq.b	#1,d0
00017522                            
00017522                            loc_1462C:
00017522 0600 001F                  		addi.b	#$1F,d0
00017526                            
00017526                            loc_14630:
00017526 0200 00C0                  		andi.b	#$C0,d0
0001752A 0C00 0040                  		cmpi.b	#$40,d0
0001752E 6700 0000                  		beq.w	Sonic_WalkVertL
00017532 0C00 0080                  		cmpi.b	#$80,d0
00017536 6700 0000                  		beq.w	Sonic_WalkCeiling
0001753A 0C00 00C0                  		cmpi.b	#$C0,d0
0001753E 6700 0000                  		beq.w	Sonic_WalkVertR
00017542 3428 000C                  		move.w	obY(a0),d2
00017546 3628 0008                  		move.w	obX(a0),d3
0001754A 7000                       		moveq	#0,d0
0001754C 1028 0016                  		move.b	obHeight(a0),d0
00017550 4880                       		ext.w	d0
00017552 D440                       		add.w	d0,d2
00017554 1028 0017                  		move.b	obWidth(a0),d0
00017558 4880                       		ext.w	d0
0001755A D640                       		add.w	d0,d3
0001755C 49F8 F768                  		lea	($FFFFF768).w,a4
00017560 367C 0010                  		movea.w	#$10,a3
00017564 3C3C 0000                  		move.w	#0,d6
00017568 7A0D                       		moveq	#$D,d5
0001756A 6100 0000                  		bsr.w	FindFloor
0001756E 3F01                       		move.w	d1,-(sp)
00017570 3428 000C                  		move.w	obY(a0),d2
00017574 3628 0008                  		move.w	obX(a0),d3
00017578 7000                       		moveq	#0,d0
0001757A 1028 0016                  		move.b	obHeight(a0),d0
0001757E 4880                       		ext.w	d0
00017580 D440                       		add.w	d0,d2
00017582 1028 0017                  		move.b	obWidth(a0),d0
00017586 4880                       		ext.w	d0
00017588 4440                       		neg.w	d0
0001758A D640                       		add.w	d0,d3
0001758C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017590 367C 0010                  		movea.w	#$10,a3
00017594 3C3C 0000                  		move.w	#0,d6
00017598 7A0D                       		moveq	#$D,d5
0001759A 6100 0000                  		bsr.w	FindFloor
0001759E 301F                       		move.w	(sp)+,d0
000175A0 6100 0000                  		bsr.w	Sonic_Angle
000175A4 4A41                       		tst.w	d1
000175A6 6700                       		beq.s	locret_146BE
000175A8 6A00                       		bpl.s	loc_146C0
000175AA 0C41 FFF2                  		cmpi.w	#-$E,d1
000175AE 6D00                       		blt.s	locret_146E6
000175B0 D368 000C                  		add.w	d1,obY(a0)
000175B4                            
000175B4                            locret_146BE:
000175B4 4E75                       		rts	
000175B6                            ; ===========================================================================
000175B6                            
000175B6                            loc_146C0:
000175B6 0C41 000E                  		cmpi.w	#$E,d1
000175BA 6E00                       		bgt.s	loc_146CC
000175BC                            
000175BC                            loc_146C6:
000175BC D368 000C                  		add.w	d1,obY(a0)
000175C0 4E75                       		rts	
000175C2                            ; ===========================================================================
000175C2                            
000175C2                            loc_146CC:
000175C2 4A28 0038                  		tst.b	$38(a0)
000175C6 66F4                       		bne.s	loc_146C6
000175C8 08E8 0001 0022             		bset	#1,obStatus(a0)
000175CE 08A8 0005 0022             		bclr	#5,obStatus(a0)
000175D4 117C 0001 001D             		move.b	#1,obNextAni(a0)
000175DA 4E75                       		rts	
000175DC                            ; ===========================================================================
000175DC                            
000175DC                            locret_146E6:
000175DC 4E75                       		rts	
000175DE                            ; End of function Sonic_AnglePos
000175DE                            
000175DE                            ; ===========================================================================
000175DE 2428 0008                  		move.l	obX(a0),d2
000175E2 3028 0010                  		move.w	obVelX(a0),d0
000175E6 48C0                       		ext.l	d0
000175E8 E180                       		asl.l	#8,d0
000175EA 9480                       		sub.l	d0,d2
000175EC 2142 0008                  		move.l	d2,obX(a0)
000175F0 303C 0038                  		move.w	#$38,d0
000175F4 48C0                       		ext.l	d0
000175F6 E180                       		asl.l	#8,d0
000175F8 9680                       		sub.l	d0,d3
000175FA 2143 000C                  		move.l	d3,obY(a0)
000175FE 4E75                       		rts	
00017600                            ; ===========================================================================
00017600                            
00017600                            locret_1470A:
00017600 4E75                       		rts	
00017602                            ; ===========================================================================
00017602 2628 000C                  		move.l	obY(a0),d3
00017606 3028 0012                  		move.w	obVelY(a0),d0
0001760A 0440 0038                  		subi.w	#$38,d0
0001760E 3140 0012                  		move.w	d0,obVelY(a0)
00017612 48C0                       		ext.l	d0
00017614 E180                       		asl.l	#8,d0
00017616 9680                       		sub.l	d0,d3
00017618 2143 000C                  		move.l	d3,obY(a0)
0001761C 4E75                       		rts	
0001761E 4E75                       		rts	
00017620                            ; ===========================================================================
00017620 2428 0008                  		move.l	obX(a0),d2
00017624 2628 000C                  		move.l	obY(a0),d3
00017628 3028 0010                  		move.w	obVelX(a0),d0
0001762C 48C0                       		ext.l	d0
0001762E E180                       		asl.l	#8,d0
00017630 9480                       		sub.l	d0,d2
00017632 3028 0012                  		move.w	obVelY(a0),d0
00017636 48C0                       		ext.l	d0
00017638 E180                       		asl.l	#8,d0
0001763A 9680                       		sub.l	d0,d3
0001763C 2142 0008                  		move.l	d2,obX(a0)
00017640 2143 000C                  		move.l	d3,obY(a0)
00017644 4E75                       		rts	
00017646                            
00017646                            ; ---------------------------------------------------------------------------
00017646                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017646                            ; ---------------------------------------------------------------------------
00017646                            
00017646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017646                            
00017646                            
00017646                            Sonic_Angle:
00017646 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001764A B240                       		cmp.w	d0,d1
0001764C 6F00                       		ble.s	loc_1475E
0001764E 1438 F768                  		move.b	($FFFFF768).w,d2
00017652 3200                       		move.w	d0,d1
00017654                            
00017654                            loc_1475E:
00017654 0802 0000                  		btst	#0,d2
00017658 6600                       		bne.s	loc_1476A
0001765A 1142 0026                  		move.b	d2,obAngle(a0)
0001765E 4E75                       		rts	
00017660                            ; ===========================================================================
00017660                            
00017660                            loc_1476A:
00017660 1428 0026                  		move.b	obAngle(a0),d2
00017664 0602 0020                  		addi.b	#$20,d2
00017668 0202 00C0                  		andi.b	#$C0,d2
0001766C 1142 0026                  		move.b	d2,obAngle(a0)
00017670 4E75                       		rts	
00017672                            ; End of function Sonic_Angle
00017672                            
00017672                            ; ---------------------------------------------------------------------------
00017672                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00017672                            ; ---------------------------------------------------------------------------
00017672                            
00017672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017672                            
00017672                            
00017672                            Sonic_WalkVertR:
00017672 3428 000C                  		move.w	obY(a0),d2
00017676 3628 0008                  		move.w	obX(a0),d3
0001767A 7000                       		moveq	#0,d0
0001767C 1028 0017                  		move.b	obWidth(a0),d0
00017680 4880                       		ext.w	d0
00017682 4440                       		neg.w	d0
00017684 D440                       		add.w	d0,d2
00017686 1028 0016                  		move.b	obHeight(a0),d0
0001768A 4880                       		ext.w	d0
0001768C D640                       		add.w	d0,d3
0001768E 49F8 F768                  		lea	($FFFFF768).w,a4
00017692 367C 0010                  		movea.w	#$10,a3
00017696 3C3C 0000                  		move.w	#0,d6
0001769A 7A0D                       		moveq	#$D,d5
0001769C 6100 0000                  		bsr.w	FindWall
000176A0 3F01                       		move.w	d1,-(sp)
000176A2 3428 000C                  		move.w	obY(a0),d2
000176A6 3628 0008                  		move.w	obX(a0),d3
000176AA 7000                       		moveq	#0,d0
000176AC 1028 0017                  		move.b	obWidth(a0),d0
000176B0 4880                       		ext.w	d0
000176B2 D440                       		add.w	d0,d2
000176B4 1028 0016                  		move.b	obHeight(a0),d0
000176B8 4880                       		ext.w	d0
000176BA D640                       		add.w	d0,d3
000176BC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000176C0 367C 0010                  		movea.w	#$10,a3
000176C4 3C3C 0000                  		move.w	#0,d6
000176C8 7A0D                       		moveq	#$D,d5
000176CA 6100 0000                  		bsr.w	FindWall
000176CE 301F                       		move.w	(sp)+,d0
000176D0 6100 FF74                  		bsr.w	Sonic_Angle
000176D4 4A41                       		tst.w	d1
000176D6 6700                       		beq.s	locret_147F0
000176D8 6A00                       		bpl.s	loc_147F2
000176DA 0C41 FFF2                  		cmpi.w	#-$E,d1
000176DE 6D00 FF20                  		blt.w	locret_1470A
000176E2 D368 0008                  		add.w	d1,obX(a0)
000176E6                            
000176E6                            locret_147F0:
000176E6 4E75                       		rts	
000176E8                            ; ===========================================================================
000176E8                            
000176E8                            loc_147F2:
000176E8 0C41 000E                  		cmpi.w	#$E,d1
000176EC 6E00                       		bgt.s	loc_147FE
000176EE                            
000176EE                            loc_147F8:
000176EE D368 0008                  		add.w	d1,obX(a0)
000176F2 4E75                       		rts	
000176F4                            ; ===========================================================================
000176F4                            
000176F4                            loc_147FE:
000176F4 4A28 0038                  		tst.b	$38(a0)
000176F8 66F4                       		bne.s	loc_147F8
000176FA 08E8 0001 0022             		bset	#1,obStatus(a0)
00017700 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017706 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001770C 4E75                       		rts	
0001770E                            ; End of function Sonic_WalkVertR
0001770E                            
0001770E                            ; ---------------------------------------------------------------------------
0001770E                            ; Subroutine allowing Sonic to walk upside-down
0001770E                            ; ---------------------------------------------------------------------------
0001770E                            
0001770E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001770E                            
0001770E                            
0001770E                            Sonic_WalkCeiling:
0001770E 3428 000C                  		move.w	obY(a0),d2
00017712 3628 0008                  		move.w	obX(a0),d3
00017716 7000                       		moveq	#0,d0
00017718 1028 0016                  		move.b	obHeight(a0),d0
0001771C 4880                       		ext.w	d0
0001771E 9440                       		sub.w	d0,d2
00017720 0A42 000F                  		eori.w	#$F,d2
00017724 1028 0017                  		move.b	obWidth(a0),d0
00017728 4880                       		ext.w	d0
0001772A D640                       		add.w	d0,d3
0001772C 49F8 F768                  		lea	($FFFFF768).w,a4
00017730 367C FFF0                  		movea.w	#-$10,a3
00017734 3C3C 1000                  		move.w	#$1000,d6
00017738 7A0D                       		moveq	#$D,d5
0001773A 6100 0000                  		bsr.w	FindFloor
0001773E 3F01                       		move.w	d1,-(sp)
00017740 3428 000C                  		move.w	obY(a0),d2
00017744 3628 0008                  		move.w	obX(a0),d3
00017748 7000                       		moveq	#0,d0
0001774A 1028 0016                  		move.b	obHeight(a0),d0
0001774E 4880                       		ext.w	d0
00017750 9440                       		sub.w	d0,d2
00017752 0A42 000F                  		eori.w	#$F,d2
00017756 1028 0017                  		move.b	obWidth(a0),d0
0001775A 4880                       		ext.w	d0
0001775C 9640                       		sub.w	d0,d3
0001775E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017762 367C FFF0                  		movea.w	#-$10,a3
00017766 3C3C 1000                  		move.w	#$1000,d6
0001776A 7A0D                       		moveq	#$D,d5
0001776C 6100 0000                  		bsr.w	FindFloor
00017770 301F                       		move.w	(sp)+,d0
00017772 6100 FED2                  		bsr.w	Sonic_Angle
00017776 4A41                       		tst.w	d1
00017778 6700                       		beq.s	locret_14892
0001777A 6A00                       		bpl.s	loc_14894
0001777C 0C41 FFF2                  		cmpi.w	#-$E,d1
00017780 6D00 FE5A                  		blt.w	locret_146E6
00017784 9368 000C                  		sub.w	d1,obY(a0)
00017788                            
00017788                            locret_14892:
00017788 4E75                       		rts	
0001778A                            ; ===========================================================================
0001778A                            
0001778A                            loc_14894:
0001778A 0C41 000E                  		cmpi.w	#$E,d1
0001778E 6E00                       		bgt.s	loc_148A0
00017790                            
00017790                            loc_1489A:
00017790 9368 000C                  		sub.w	d1,obY(a0)
00017794 4E75                       		rts	
00017796                            ; ===========================================================================
00017796                            
00017796                            loc_148A0:
00017796 4A28 0038                  		tst.b	$38(a0)
0001779A 66F4                       		bne.s	loc_1489A
0001779C 08E8 0001 0022             		bset	#1,obStatus(a0)
000177A2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177A8 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177AE 4E75                       		rts	
000177B0                            ; End of function Sonic_WalkCeiling
000177B0                            
000177B0                            ; ---------------------------------------------------------------------------
000177B0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000177B0                            ; ---------------------------------------------------------------------------
000177B0                            
000177B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177B0                            
000177B0                            
000177B0                            Sonic_WalkVertL:
000177B0 3428 000C                  		move.w	obY(a0),d2
000177B4 3628 0008                  		move.w	obX(a0),d3
000177B8 7000                       		moveq	#0,d0
000177BA 1028 0017                  		move.b	obWidth(a0),d0
000177BE 4880                       		ext.w	d0
000177C0 9440                       		sub.w	d0,d2
000177C2 1028 0016                  		move.b	obHeight(a0),d0
000177C6 4880                       		ext.w	d0
000177C8 9640                       		sub.w	d0,d3
000177CA 0A43 000F                  		eori.w	#$F,d3
000177CE 49F8 F768                  		lea	($FFFFF768).w,a4
000177D2 367C FFF0                  		movea.w	#-$10,a3
000177D6 3C3C 0800                  		move.w	#$800,d6
000177DA 7A0D                       		moveq	#$D,d5
000177DC 6100 0000                  		bsr.w	FindWall
000177E0 3F01                       		move.w	d1,-(sp)
000177E2 3428 000C                  		move.w	obY(a0),d2
000177E6 3628 0008                  		move.w	obX(a0),d3
000177EA 7000                       		moveq	#0,d0
000177EC 1028 0017                  		move.b	obWidth(a0),d0
000177F0 4880                       		ext.w	d0
000177F2 D440                       		add.w	d0,d2
000177F4 1028 0016                  		move.b	obHeight(a0),d0
000177F8 4880                       		ext.w	d0
000177FA 9640                       		sub.w	d0,d3
000177FC 0A43 000F                  		eori.w	#$F,d3
00017800 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017804 367C FFF0                  		movea.w	#-$10,a3
00017808 3C3C 0800                  		move.w	#$800,d6
0001780C 7A0D                       		moveq	#$D,d5
0001780E 6100 0000                  		bsr.w	FindWall
00017812 301F                       		move.w	(sp)+,d0
00017814 6100 FE30                  		bsr.w	Sonic_Angle
00017818 4A41                       		tst.w	d1
0001781A 6700                       		beq.s	locret_14934
0001781C 6A00                       		bpl.s	loc_14936
0001781E 0C41 FFF2                  		cmpi.w	#-$E,d1
00017822 6D00 FDDC                  		blt.w	locret_1470A
00017826 9368 0008                  		sub.w	d1,obX(a0)
0001782A                            
0001782A                            locret_14934:
0001782A 4E75                       		rts	
0001782C                            ; ===========================================================================
0001782C                            
0001782C                            loc_14936:
0001782C 0C41 000E                  		cmpi.w	#$E,d1
00017830 6E00                       		bgt.s	loc_14942
00017832                            
00017832                            loc_1493C:
00017832 9368 0008                  		sub.w	d1,obX(a0)
00017836 4E75                       		rts	
00017838                            ; ===========================================================================
00017838                            
00017838                            loc_14942:
00017838 4A28 0038                  		tst.b	$38(a0)
0001783C 66F4                       		bne.s	loc_1493C
0001783E 08E8 0001 0022             		bset	#1,obStatus(a0)
00017844 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001784A 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017850 4E75                       		rts	
00017852                            ; End of function Sonic_WalkVertL
00017852                            ; End of function Sonic_WalkVertL
00017852                            
00017852                            		include	"_incObj\sub FindNearestTile.asm"
00017852                            ; ---------------------------------------------------------------------------
00017852                            ; Subroutine to	find which tile	the object is standing on
00017852                            
00017852                            ; input:
00017852                            ;	d2 = y-position of object's bottom edge
00017852                            ;	d3 = x-position of object
00017852                            
00017852                            ; output:
00017852                            ;	a1 = address within 256x256 mappings where object is standing
00017852                            ;	     (refers to a 16x16 tile number)
00017852                            ; ---------------------------------------------------------------------------
00017852                            
00017852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017852                            
00017852                            
00017852                            FindNearestTile:
00017852 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017854 E248                       		lsr.w	#1,d0
00017856 0240 0380                  		andi.w	#$380,d0
0001785A 3203                       		move.w	d3,d1		; get x-pos. of object
0001785C E049                       		lsr.w	#8,d1
0001785E 0241 007F                  		andi.w	#$7F,d1
00017862 D041                       		add.w	d1,d0		; combine
00017864 72FF                       		moveq	#-1,d1
00017866 43F8 A400                  		lea	(v_lvllayout).w,a1
0001786A 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
0001786E 6700                       		beq.s	@blanktile	; branch if 0
00017870 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017872 5301                       		subq.b	#1,d1
00017874 4881                       		ext.w	d1
00017876 EE59                       		ror.w	#7,d1
00017878 3002                       		move.w	d2,d0
0001787A D040                       		add.w	d0,d0
0001787C 0240 01E0                  		andi.w	#$1E0,d0
00017880 D240                       		add.w	d0,d1
00017882 3003                       		move.w	d3,d0
00017884 E648                       		lsr.w	#3,d0
00017886 0240 001E                  		andi.w	#$1E,d0
0001788A D240                       		add.w	d0,d1
0001788C                            
0001788C                            @blanktile:
0001788C 2241                       		movea.l	d1,a1
0001788E 4E75                       		rts	
00017890                            ; ===========================================================================
00017890                            
00017890                            @specialtile:
00017890 0241 007F                  		andi.w	#$7F,d1
00017894 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
0001789A 6700                       		beq.s	@treatasnormal	; if not, branch
0001789C 5241                       		addq.w	#1,d1
0001789E 0C41 0029                  		cmpi.w	#$29,d1
000178A2 6600                       		bne.s	@treatasnormal
000178A4 323C 0051                  		move.w	#$51,d1
000178A8                            
000178A8                            	@treatasnormal:
000178A8 5301                       		subq.b	#1,d1
000178AA EE59                       		ror.w	#7,d1
000178AC 3002                       		move.w	d2,d0
000178AE D040                       		add.w	d0,d0
000178B0 0240 01E0                  		andi.w	#$1E0,d0
000178B4 D240                       		add.w	d0,d1
000178B6 3003                       		move.w	d3,d0
000178B8 E648                       		lsr.w	#3,d0
000178BA 0240 001E                  		andi.w	#$1E,d0
000178BE D240                       		add.w	d0,d1
000178C0 2241                       		movea.l	d1,a1
000178C2 4E75                       		rts	
000178C4                            ; End of function FindNearestTile
000178C4                            ; End of function FindNearestTile
000178C4                            		include	"_incObj\sub FindFloor.asm"
000178C4                            ; ---------------------------------------------------------------------------
000178C4                            ; Subroutine to	find the floor
000178C4                            
000178C4                            ; input:
000178C4                            ;	d2 = y-position of object's bottom edge
000178C4                            ;	d3 = x-position of object
000178C4                            ;	d5 = bit to test for solidness
000178C4                            
000178C4                            ; output:
000178C4                            ;	d1 = distance to the floor
000178C4                            ;	a1 = address within 256x256 mappings where object is standing
000178C4                            ;	     (refers to a 16x16 tile number)
000178C4                            ;	(a4) = floor angle
000178C4                            ; ---------------------------------------------------------------------------
000178C4                            
000178C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178C4                            
000178C4                            
000178C4                            FindFloor:
000178C4 618C                       		bsr.s	FindNearestTile
000178C6 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
000178C8 3800                       		move.w	d0,d4
000178CA 0240 07FF                  		andi.w	#$7FF,d0
000178CE 6700                       		beq.s	@isblank	; branch if tile is blank
000178D0 0B04                       		btst	d5,d4		; is the tile solid?
000178D2 6600                       		bne.s	@issolid	; if yes, branch
000178D4                            
000178D4                            @isblank:
000178D4 D44B                       		add.w	a3,d2
000178D6 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
000178DA 944B                       		sub.w	a3,d2
000178DC 0641 0010                  		addi.w	#$10,d1		; return distance to floor
000178E0 4E75                       		rts	
000178E2                            ; ===========================================================================
000178E2                            
000178E2                            @issolid:
000178E2 2478 F796                  		movea.l	(v_collindex).w,a2
000178E6 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
000178EA 0240 00FF                  		andi.w	#$FF,d0
000178EE 67E4                       		beq.s	@isblank	; branch if 0
000178F0 45F9 0000 0000             		lea	(AngleMap).l,a2
000178F6 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
000178FA E948                       		lsl.w	#4,d0
000178FC 3203                       		move.w	d3,d1		; get x-pos. of object
000178FE 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017902 6700                       		beq.s	@noflip		; if not, branch
00017904 4641                       		not.w	d1
00017906 4414                       		neg.b	(a4)
00017908                            
00017908                            	@noflip:
00017908 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001790C 6700                       		beq.s	@noflip2	; if not, branch
0001790E 0614 0040                  		addi.b	#$40,(a4)
00017912 4414                       		neg.b	(a4)
00017914 0414 0040                  		subi.b	#$40,(a4)
00017918                            
00017918                            	@noflip2:
00017918 0241 000F                  		andi.w	#$F,d1
0001791C D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
0001791E 45F9 0000 0000             		lea	(CollArray1).l,a2
00017924 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017928 4880                       		ext.w	d0
0001792A BD44                       		eor.w	d6,d4
0001792C 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017930 6700                       		beq.s	@noflip3	; if not, branch
00017932 4440                       		neg.w	d0
00017934                            
00017934                            	@noflip3:
00017934 4A40                       		tst.w	d0
00017936 679C                       		beq.s	@isblank	; branch if height is 0
00017938 6B00                       		bmi.s	@negfloor	; branch if height is negative
0001793A 0C00 0010                  		cmpi.b	#$10,d0
0001793E 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017940 3202                       		move.w	d2,d1		; get y-pos. of object
00017942 0241 000F                  		andi.w	#$F,d1
00017946 D041                       		add.w	d1,d0
00017948 323C 000F                  		move.w	#$F,d1
0001794C 9240                       		sub.w	d0,d1		; return distance to floor
0001794E 4E75                       		rts	
00017950                            ; ===========================================================================
00017950                            
00017950                            @negfloor:
00017950 3202                       		move.w	d2,d1
00017952 0241 000F                  		andi.w	#$F,d1
00017956 D041                       		add.w	d1,d0
00017958 6A00 FF7A                  		bpl.w	@isblank
0001795C                            
0001795C                            @maxfloor:
0001795C 944B                       		sub.w	a3,d2
0001795E 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017962 D44B                       		add.w	a3,d2
00017964 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017968 4E75                       		rts	
0001796A                            ; End of function FindFloor
0001796A                            
0001796A                            
0001796A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001796A                            
0001796A                            
0001796A                            FindFloor2:
0001796A 6100 FEE6                  		bsr.w	FindNearestTile
0001796E 3011                       		move.w	(a1),d0
00017970 3800                       		move.w	d0,d4
00017972 0240 07FF                  		andi.w	#$7FF,d0
00017976 6700                       		beq.s	@isblank2
00017978 0B04                       		btst	d5,d4
0001797A 6600                       		bne.s	@issolid
0001797C                            
0001797C                            @isblank2:
0001797C 323C 000F                  		move.w	#$F,d1
00017980 3002                       		move.w	d2,d0
00017982 0240 000F                  		andi.w	#$F,d0
00017986 9240                       		sub.w	d0,d1
00017988 4E75                       		rts	
0001798A                            ; ===========================================================================
0001798A                            
0001798A                            @issolid:
0001798A 2478 F796                  		movea.l	(v_collindex).w,a2
0001798E 1032 0000                  		move.b	(a2,d0.w),d0
00017992 0240 00FF                  		andi.w	#$FF,d0
00017996 67E4                       		beq.s	@isblank2
00017998 45F9 0000 0000             		lea	(AngleMap).l,a2
0001799E 18B2 0000                  		move.b	(a2,d0.w),(a4)
000179A2 E948                       		lsl.w	#4,d0
000179A4 3203                       		move.w	d3,d1
000179A6 0804 000B                  		btst	#$B,d4
000179AA 6700                       		beq.s	@noflip
000179AC 4641                       		not.w	d1
000179AE 4414                       		neg.b	(a4)
000179B0                            
000179B0                            	@noflip:
000179B0 0804 000C                  		btst	#$C,d4
000179B4 6700                       		beq.s	@noflip2
000179B6 0614 0040                  		addi.b	#$40,(a4)
000179BA 4414                       		neg.b	(a4)
000179BC 0414 0040                  		subi.b	#$40,(a4)
000179C0                            
000179C0                            	@noflip2:
000179C0 0241 000F                  		andi.w	#$F,d1
000179C4 D240                       		add.w	d0,d1
000179C6 45F9 0000 0000             		lea	(CollArray1).l,a2
000179CC 1032 1000                  		move.b	(a2,d1.w),d0
000179D0 4880                       		ext.w	d0
000179D2 BD44                       		eor.w	d6,d4
000179D4 0804 000C                  		btst	#$C,d4
000179D8 6700                       		beq.s	@noflip3
000179DA 4440                       		neg.w	d0
000179DC                            
000179DC                            	@noflip3:
000179DC 4A40                       		tst.w	d0
000179DE 679C                       		beq.s	@isblank2
000179E0 6B00                       		bmi.s	@negfloor
000179E2 3202                       		move.w	d2,d1
000179E4 0241 000F                  		andi.w	#$F,d1
000179E8 D041                       		add.w	d1,d0
000179EA 323C 000F                  		move.w	#$F,d1
000179EE 9240                       		sub.w	d0,d1
000179F0 4E75                       		rts	
000179F2                            ; ===========================================================================
000179F2                            
000179F2                            @negfloor:
000179F2 3202                       		move.w	d2,d1
000179F4 0241 000F                  		andi.w	#$F,d1
000179F8 D041                       		add.w	d1,d0
000179FA 6A00 FF80                  		bpl.w	@isblank2
000179FE 4641                       		not.w	d1
00017A00 4E75                       		rts	
00017A02                            ; End of function FindFloor2
00017A02                            ; End of function FindFloor2
00017A02                            		include	"_incObj\sub FindWall.asm"
00017A02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A02                            
00017A02                            
00017A02                            FindWall:
00017A02 6100 FE4E                  		bsr.w	FindNearestTile
00017A06 3011                       		move.w	(a1),d0
00017A08 3800                       		move.w	d0,d4
00017A0A 0240 07FF                  		andi.w	#$7FF,d0
00017A0E 6700                       		beq.s	loc_14B1E
00017A10 0B04                       		btst	d5,d4
00017A12 6600                       		bne.s	loc_14B2C
00017A14                            
00017A14                            loc_14B1E:
00017A14 D64B                       		add.w	a3,d3
00017A16 6100 0000                  		bsr.w	FindWall2
00017A1A 964B                       		sub.w	a3,d3
00017A1C 0641 0010                  		addi.w	#$10,d1
00017A20 4E75                       		rts	
00017A22                            ; ===========================================================================
00017A22                            
00017A22                            loc_14B2C:
00017A22 2478 F796                  		movea.l	(v_collindex).w,a2
00017A26 1032 0000                  		move.b	(a2,d0.w),d0
00017A2A 0240 00FF                  		andi.w	#$FF,d0
00017A2E 67E4                       		beq.s	loc_14B1E
00017A30 45F9 0000 0000             		lea	(AngleMap).l,a2
00017A36 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017A3A E948                       		lsl.w	#4,d0
00017A3C 3202                       		move.w	d2,d1
00017A3E 0804 000C                  		btst	#$C,d4
00017A42 6700                       		beq.s	loc_14B5A
00017A44 4641                       		not.w	d1
00017A46 0614 0040                  		addi.b	#$40,(a4)
00017A4A 4414                       		neg.b	(a4)
00017A4C 0414 0040                  		subi.b	#$40,(a4)
00017A50                            
00017A50                            loc_14B5A:
00017A50 0804 000B                  		btst	#$B,d4
00017A54 6700                       		beq.s	loc_14B62
00017A56 4414                       		neg.b	(a4)
00017A58                            
00017A58                            loc_14B62:
00017A58 0241 000F                  		andi.w	#$F,d1
00017A5C D240                       		add.w	d0,d1
00017A5E 45F9 0000 0000             		lea	(CollArray2).l,a2
00017A64 1032 1000                  		move.b	(a2,d1.w),d0
00017A68 4880                       		ext.w	d0
00017A6A BD44                       		eor.w	d6,d4
00017A6C 0804 000B                  		btst	#$B,d4
00017A70 6700                       		beq.s	loc_14B7E
00017A72 4440                       		neg.w	d0
00017A74                            
00017A74                            loc_14B7E:
00017A74 4A40                       		tst.w	d0
00017A76 679C                       		beq.s	loc_14B1E
00017A78 6B00                       		bmi.s	loc_14B9A
00017A7A 0C00 0010                  		cmpi.b	#$10,d0
00017A7E 6700                       		beq.s	loc_14BA6
00017A80 3203                       		move.w	d3,d1
00017A82 0241 000F                  		andi.w	#$F,d1
00017A86 D041                       		add.w	d1,d0
00017A88 323C 000F                  		move.w	#$F,d1
00017A8C 9240                       		sub.w	d0,d1
00017A8E 4E75                       		rts	
00017A90                            ; ===========================================================================
00017A90                            
00017A90                            loc_14B9A:
00017A90 3203                       		move.w	d3,d1
00017A92 0241 000F                  		andi.w	#$F,d1
00017A96 D041                       		add.w	d1,d0
00017A98 6A00 FF7A                  		bpl.w	loc_14B1E
00017A9C                            
00017A9C                            loc_14BA6:
00017A9C 964B                       		sub.w	a3,d3
00017A9E 6100 0000                  		bsr.w	FindWall2
00017AA2 D64B                       		add.w	a3,d3
00017AA4 0441 0010                  		subi.w	#$10,d1
00017AA8 4E75                       		rts	
00017AAA                            ; End of function FindWall
00017AAA                            
00017AAA                            
00017AAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AAA                            
00017AAA                            
00017AAA                            FindWall2:
00017AAA 6100 FDA6                  		bsr.w	FindNearestTile
00017AAE 3011                       		move.w	(a1),d0
00017AB0 3800                       		move.w	d0,d4
00017AB2 0240 07FF                  		andi.w	#$7FF,d0
00017AB6 6700                       		beq.s	loc_14BC6
00017AB8 0B04                       		btst	d5,d4
00017ABA 6600                       		bne.s	loc_14BD4
00017ABC                            
00017ABC                            loc_14BC6:
00017ABC 323C 000F                  		move.w	#$F,d1
00017AC0 3003                       		move.w	d3,d0
00017AC2 0240 000F                  		andi.w	#$F,d0
00017AC6 9240                       		sub.w	d0,d1
00017AC8 4E75                       		rts	
00017ACA                            ; ===========================================================================
00017ACA                            
00017ACA                            loc_14BD4:
00017ACA 2478 F796                  		movea.l	(v_collindex).w,a2
00017ACE 1032 0000                  		move.b	(a2,d0.w),d0
00017AD2 0240 00FF                  		andi.w	#$FF,d0
00017AD6 67E4                       		beq.s	loc_14BC6
00017AD8 45F9 0000 0000             		lea	(AngleMap).l,a2
00017ADE 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017AE2 E948                       		lsl.w	#4,d0
00017AE4 3202                       		move.w	d2,d1
00017AE6 0804 000C                  		btst	#$C,d4
00017AEA 6700                       		beq.s	loc_14C02
00017AEC 4641                       		not.w	d1
00017AEE 0614 0040                  		addi.b	#$40,(a4)
00017AF2 4414                       		neg.b	(a4)
00017AF4 0414 0040                  		subi.b	#$40,(a4)
00017AF8                            
00017AF8                            loc_14C02:
00017AF8 0804 000B                  		btst	#$B,d4
00017AFC 6700                       		beq.s	loc_14C0A
00017AFE 4414                       		neg.b	(a4)
00017B00                            
00017B00                            loc_14C0A:
00017B00 0241 000F                  		andi.w	#$F,d1
00017B04 D240                       		add.w	d0,d1
00017B06 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B0C 1032 1000                  		move.b	(a2,d1.w),d0
00017B10 4880                       		ext.w	d0
00017B12 BD44                       		eor.w	d6,d4
00017B14 0804 000B                  		btst	#$B,d4
00017B18 6700                       		beq.s	loc_14C26
00017B1A 4440                       		neg.w	d0
00017B1C                            
00017B1C                            loc_14C26:
00017B1C 4A40                       		tst.w	d0
00017B1E 679C                       		beq.s	loc_14BC6
00017B20 6B00                       		bmi.s	loc_14C3C
00017B22 3203                       		move.w	d3,d1
00017B24 0241 000F                  		andi.w	#$F,d1
00017B28 D041                       		add.w	d1,d0
00017B2A 323C 000F                  		move.w	#$F,d1
00017B2E 9240                       		sub.w	d0,d1
00017B30 4E75                       		rts	
00017B32                            ; ===========================================================================
00017B32                            
00017B32                            loc_14C3C:
00017B32 3203                       		move.w	d3,d1
00017B34 0241 000F                  		andi.w	#$F,d1
00017B38 D041                       		add.w	d1,d0
00017B3A 6A00 FF80                  		bpl.w	loc_14BC6
00017B3E 4641                       		not.w	d1
00017B40 4E75                       		rts	
00017B42                            ; End of function FindWall2
00017B42                            ; End of function FindWall2
00017B42                            
00017B42                            ; ---------------------------------------------------------------------------
00017B42                            ; Unused floor/wall subroutine - logs something	to do with collision
00017B42                            ; ---------------------------------------------------------------------------
00017B42                            
00017B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B42                            
00017B42                            
00017B42                            FloorLog_Unk:
00017B42 4E75                       		rts	
00017B44                            
00017B44 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B4A 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B50 363C 00FF                  		move.w	#$FF,d3
00017B54                            
00017B54                            loc_14C5E:
00017B54 7A10                       		moveq	#$10,d5
00017B56 343C 000F                  		move.w	#$F,d2
00017B5A                            
00017B5A                            loc_14C64:
00017B5A 7800                       		moveq	#0,d4
00017B5C 323C 000F                  		move.w	#$F,d1
00017B60                            
00017B60                            loc_14C6A:
00017B60 3019                       		move.w	(a1)+,d0
00017B62 EAA8                       		lsr.l	d5,d0
00017B64 D944                       		addx.w	d4,d4
00017B66 51C9 FFF8                  		dbf	d1,loc_14C6A
00017B6A                            
00017B6A 34C4                       		move.w	d4,(a2)+
00017B6C 92FC 0020                  		suba.w	#$20,a1
00017B70 5345                       		subq.w	#1,d5
00017B72 51CA FFE6                  		dbf	d2,loc_14C64
00017B76                            
00017B76 D2FC 0020                  		adda.w	#$20,a1
00017B7A 51CB FFD8                  		dbf	d3,loc_14C5E
00017B7E                            
00017B7E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B84 45F9 0000 0000             		lea	(CollArray2).l,a2
00017B8A 6100                       		bsr.s	FloorLog_Unk2
00017B8C 43F9 0000 0000             		lea	(CollArray1).l,a1
00017B92 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B98                            
00017B98                            ; End of function FloorLog_Unk
00017B98                            
00017B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B98                            
00017B98                            
00017B98                            FloorLog_Unk2:
00017B98 363C 0FFF                  		move.w	#$FFF,d3
00017B9C                            
00017B9C                            loc_14CA6:
00017B9C 7400                       		moveq	#0,d2
00017B9E 323C 000F                  		move.w	#$F,d1
00017BA2 3019                       		move.w	(a1)+,d0
00017BA4 6700                       		beq.s	loc_14CD4
00017BA6 6B00                       		bmi.s	loc_14CBE
00017BA8                            
00017BA8                            loc_14CB2:
00017BA8 E248                       		lsr.w	#1,d0
00017BAA 6400                       		bhs.s	loc_14CB8
00017BAC 5202                       		addq.b	#1,d2
00017BAE                            
00017BAE                            loc_14CB8:
00017BAE 51C9 FFF8                  		dbf	d1,loc_14CB2
00017BB2                            
00017BB2 6000                       		bra.s	loc_14CD6
00017BB4                            ; ===========================================================================
00017BB4                            
00017BB4                            loc_14CBE:
00017BB4 0C40 FFFF                  		cmpi.w	#-1,d0
00017BB8 6700                       		beq.s	loc_14CD0
00017BBA                            
00017BBA                            loc_14CC4:
00017BBA E348                       		lsl.w	#1,d0
00017BBC 6400                       		bhs.s	loc_14CCA
00017BBE 5302                       		subq.b	#1,d2
00017BC0                            
00017BC0                            loc_14CCA:
00017BC0 51C9 FFF8                  		dbf	d1,loc_14CC4
00017BC4                            
00017BC4 6000                       		bra.s	loc_14CD6
00017BC6                            ; ===========================================================================
00017BC6                            
00017BC6                            loc_14CD0:
00017BC6 303C 0010                  		move.w	#$10,d0
00017BCA                            
00017BCA                            loc_14CD4:
00017BCA 3400                       		move.w	d0,d2
00017BCC                            
00017BCC                            loc_14CD6:
00017BCC 14C2                       		move.b	d2,(a2)+
00017BCE 51CB FFCC                  		dbf	d3,loc_14CA6
00017BD2                            
00017BD2 4E75                       		rts	
00017BD4                            
00017BD4                            ; End of function FloorLog_Unk2
00017BD4                            
00017BD4                            
00017BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BD4                            
00017BD4                            
00017BD4                            Sonic_WalkSpeed:
00017BD4 2628 0008                  		move.l	obX(a0),d3
00017BD8 2428 000C                  		move.l	obY(a0),d2
00017BDC 3228 0010                  		move.w	obVelX(a0),d1
00017BE0 48C1                       		ext.l	d1
00017BE2 E181                       		asl.l	#8,d1
00017BE4 D681                       		add.l	d1,d3
00017BE6 3228 0012                  		move.w	obVelY(a0),d1
00017BEA 48C1                       		ext.l	d1
00017BEC E181                       		asl.l	#8,d1
00017BEE D481                       		add.l	d1,d2
00017BF0 4842                       		swap	d2
00017BF2 4843                       		swap	d3
00017BF4 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017BF8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017BFC 1200                       		move.b	d0,d1
00017BFE 0600 0020                  		addi.b	#$20,d0
00017C02 6A00                       		bpl.s	loc_14D1A
00017C04 1001                       		move.b	d1,d0
00017C06 6A00                       		bpl.s	loc_14D14
00017C08 5300                       		subq.b	#1,d0
00017C0A                            
00017C0A                            loc_14D14:
00017C0A 0600 0020                  		addi.b	#$20,d0
00017C0E 6000                       		bra.s	loc_14D24
00017C10                            ; ===========================================================================
00017C10                            
00017C10                            loc_14D1A:
00017C10 1001                       		move.b	d1,d0
00017C12 6A00                       		bpl.s	loc_14D20
00017C14 5200                       		addq.b	#1,d0
00017C16                            
00017C16                            loc_14D20:
00017C16 0600 001F                  		addi.b	#$1F,d0
00017C1A                            
00017C1A                            loc_14D24:
00017C1A 0200 00C0                  		andi.b	#$C0,d0
00017C1E 6700 0000                  		beq.w	loc_14DF0
00017C22 0C00 0080                  		cmpi.b	#$80,d0
00017C26 6700 0000                  		beq.w	loc_14F7C
00017C2A 0201 0038                  		andi.b	#$38,d1
00017C2E 6600                       		bne.s	loc_14D3C
00017C30 5042                       		addq.w	#8,d2
00017C32                            
00017C32                            loc_14D3C:
00017C32 0C00 0040                  		cmpi.b	#$40,d0
00017C36 6700 0000                  		beq.w	loc_1504A
00017C3A 6000 0000                  		bra.w	loc_14EBC
00017C3E                            
00017C3E                            ; End of function Sonic_WalkSpeed
00017C3E                            
00017C3E                            
00017C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C3E                            
00017C3E                            
00017C3E                            sub_14D48:
00017C3E 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017C42 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017C46 0600 0020                  		addi.b	#$20,d0
00017C4A 0200 00C0                  		andi.b	#$C0,d0
00017C4E 0C00 0040                  		cmpi.b	#$40,d0
00017C52 6700 0000                  		beq.w	loc_14FD6
00017C56 0C00 0080                  		cmpi.b	#$80,d0
00017C5A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017C5E 0C00 00C0                  		cmpi.b	#$C0,d0
00017C62 6700 0000                  		beq.w	sub_14E50
00017C66                            
00017C66                            ; End of function sub_14D48
00017C66                            
00017C66                            ; ---------------------------------------------------------------------------
00017C66                            ; Subroutine to	make Sonic land	on the floor after jumping
00017C66                            ; ---------------------------------------------------------------------------
00017C66                            
00017C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C66                            
00017C66                            
00017C66                            Sonic_HitFloor:
00017C66 3428 000C                  		move.w	obY(a0),d2
00017C6A 3628 0008                  		move.w	obX(a0),d3
00017C6E 7000                       		moveq	#0,d0
00017C70 1028 0016                  		move.b	obHeight(a0),d0
00017C74 4880                       		ext.w	d0
00017C76 D440                       		add.w	d0,d2
00017C78 1028 0017                  		move.b	obWidth(a0),d0
00017C7C 4880                       		ext.w	d0
00017C7E D640                       		add.w	d0,d3
00017C80 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017C84 367C 0010                  		movea.w	#$10,a3
00017C88 3C3C 0000                  		move.w	#0,d6
00017C8C 7A0D                       		moveq	#$D,d5
00017C8E 6100 FC34                  		bsr.w	FindFloor
00017C92 3F01                       		move.w	d1,-(sp)
00017C94 3428 000C                  		move.w	obY(a0),d2
00017C98 3628 0008                  		move.w	obX(a0),d3
00017C9C 7000                       		moveq	#0,d0
00017C9E 1028 0016                  		move.b	obHeight(a0),d0
00017CA2 4880                       		ext.w	d0
00017CA4 D440                       		add.w	d0,d2
00017CA6 1028 0017                  		move.b	obWidth(a0),d0
00017CAA 4880                       		ext.w	d0
00017CAC 9640                       		sub.w	d0,d3
00017CAE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017CB2 367C 0010                  		movea.w	#$10,a3
00017CB6 3C3C 0000                  		move.w	#0,d6
00017CBA 7A0D                       		moveq	#$D,d5
00017CBC 6100 FC06                  		bsr.w	FindFloor
00017CC0 301F                       		move.w	(sp)+,d0
00017CC2 143C 0000                  		move.b	#0,d2
00017CC6                            
00017CC6                            loc_14DD0:
00017CC6 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017CCA B240                       		cmp.w	d0,d1
00017CCC 6F00                       		ble.s	loc_14DDE
00017CCE 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017CD2 C141                       		exg	d0,d1
00017CD4                            
00017CD4                            loc_14DDE:
00017CD4 0803 0000                  		btst	#0,d3
00017CD8 6700                       		beq.s	locret_14DE6
00017CDA 1602                       		move.b	d2,d3
00017CDC                            
00017CDC                            locret_14DE6:
00017CDC 4E75                       		rts	
00017CDE                            
00017CDE                            ; End of function Sonic_HitFloor
00017CDE                            
00017CDE                            ; ===========================================================================
00017CDE 3428 000C                  		move.w	obY(a0),d2
00017CE2 3628 0008                  		move.w	obX(a0),d3
00017CE6                            
00017CE6                            loc_14DF0:
00017CE6 0642 000A                  		addi.w	#$A,d2
00017CEA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017CEE 367C 0010                  		movea.w	#$10,a3
00017CF2 3C3C 0000                  		move.w	#0,d6
00017CF6 7A0E                       		moveq	#$E,d5
00017CF8 6100 FBCA                  		bsr.w	FindFloor
00017CFC 143C 0000                  		move.b	#0,d2
00017D00                            
00017D00                            loc_14E0A:
00017D00 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D04 0803 0000                  		btst	#0,d3
00017D08 6700                       		beq.s	locret_14E16
00017D0A 1602                       		move.b	d2,d3
00017D0C                            
00017D0C                            locret_14E16:
00017D0C 4E75                       		rts	
00017D0E                            
00017D0E                            		include	"_incObj\sub ObjFloorDist.asm"
00017D0E                            ; ---------------------------------------------------------------------------
00017D0E                            ; Subroutine to find the distance of an object to the floor
00017D0E                            
00017D0E                            ; input:
00017D0E                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017D0E                            
00017D0E                            ; output:
00017D0E                            ;	d1 = distance to the floor
00017D0E                            ;	d3 = floor angle
00017D0E                            ;	a1 = address within 256x256 mappings where object is standing
00017D0E                            ;	     (refers to a 16x16 tile number)
00017D0E                            ;	(a4) = floor angle
00017D0E                            ; ---------------------------------------------------------------------------
00017D0E                            
00017D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D0E                            
00017D0E                            
00017D0E                            ObjFloorDist:
00017D0E 3628 0008                  		move.w	obX(a0),d3
00017D12                            
00017D12                            
00017D12                            ObjFloorDist2:
00017D12 3428 000C                  		move.w	obY(a0),d2
00017D16 7000                       		moveq	#0,d0
00017D18 1028 0016                  		move.b	obHeight(a0),d0
00017D1C 4880                       		ext.w	d0
00017D1E D440                       		add.w	d0,d2
00017D20 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D24 18BC 0000                  		move.b	#0,(a4)
00017D28 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017D2C 3C3C 0000                  		move.w	#0,d6
00017D30 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017D32 6100 FB90                  		bsr.w	FindFloor
00017D36 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017D3A 0803 0000                  		btst	#0,d3
00017D3E 6700                       		beq.s	locret_14E4E
00017D40 163C 0000                  		move.b	#0,d3
00017D44                            
00017D44                            	locret_14E4E:
00017D44 4E75                       		rts	
00017D46                            
00017D46                            ; End of function ObjFloorDist2
00017D46                            ; End of function ObjFloorDist2
00017D46                            
00017D46                            
00017D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D46                            
00017D46                            
00017D46                            sub_14E50:
00017D46 3428 000C                  		move.w	obY(a0),d2
00017D4A 3628 0008                  		move.w	obX(a0),d3
00017D4E 7000                       		moveq	#0,d0
00017D50 1028 0017                  		move.b	obWidth(a0),d0
00017D54 4880                       		ext.w	d0
00017D56 9440                       		sub.w	d0,d2
00017D58 1028 0016                  		move.b	obHeight(a0),d0
00017D5C 4880                       		ext.w	d0
00017D5E D640                       		add.w	d0,d3
00017D60 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017D64 367C 0010                  		movea.w	#$10,a3
00017D68 3C3C 0000                  		move.w	#0,d6
00017D6C 7A0E                       		moveq	#$E,d5
00017D6E 6100 FC92                  		bsr.w	FindWall
00017D72 3F01                       		move.w	d1,-(sp)
00017D74 3428 000C                  		move.w	obY(a0),d2
00017D78 3628 0008                  		move.w	obX(a0),d3
00017D7C 7000                       		moveq	#0,d0
00017D7E 1028 0017                  		move.b	obWidth(a0),d0
00017D82 4880                       		ext.w	d0
00017D84 D440                       		add.w	d0,d2
00017D86 1028 0016                  		move.b	obHeight(a0),d0
00017D8A 4880                       		ext.w	d0
00017D8C D640                       		add.w	d0,d3
00017D8E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017D92 367C 0010                  		movea.w	#$10,a3
00017D96 3C3C 0000                  		move.w	#0,d6
00017D9A 7A0E                       		moveq	#$E,d5
00017D9C 6100 FC64                  		bsr.w	FindWall
00017DA0 301F                       		move.w	(sp)+,d0
00017DA2 143C 00C0                  		move.b	#-$40,d2
00017DA6 6000 FF1E                  		bra.w	loc_14DD0
00017DAA                            
00017DAA                            ; End of function sub_14E50
00017DAA                            
00017DAA                            
00017DAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DAA                            
00017DAA                            
00017DAA                            sub_14EB4:
00017DAA 3428 000C                  		move.w	obY(a0),d2
00017DAE 3628 0008                  		move.w	obX(a0),d3
00017DB2                            
00017DB2                            loc_14EBC:
00017DB2 0643 000A                  		addi.w	#$A,d3
00017DB6 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DBA 367C 0010                  		movea.w	#$10,a3
00017DBE 3C3C 0000                  		move.w	#0,d6
00017DC2 7A0E                       		moveq	#$E,d5
00017DC4 6100 FC3C                  		bsr.w	FindWall
00017DC8 143C 00C0                  		move.b	#-$40,d2
00017DCC 6000 FF32                  		bra.w	loc_14E0A
00017DD0                            
00017DD0                            ; End of function sub_14EB4
00017DD0                            
00017DD0                            ; ---------------------------------------------------------------------------
00017DD0                            ; Subroutine to	detect when an object hits a wall to its right
00017DD0                            ; ---------------------------------------------------------------------------
00017DD0                            
00017DD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DD0                            
00017DD0                            
00017DD0                            ObjHitWallRight:
00017DD0 D668 0008                  		add.w	obX(a0),d3
00017DD4 3428 000C                  		move.w	obY(a0),d2
00017DD8 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017DDC 18BC 0000                  		move.b	#0,(a4)
00017DE0 367C 0010                  		movea.w	#$10,a3
00017DE4 3C3C 0000                  		move.w	#0,d6
00017DE8 7A0E                       		moveq	#$E,d5
00017DEA 6100 FC16                  		bsr.w	FindWall
00017DEE 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017DF2 0803 0000                  		btst	#0,d3
00017DF6 6700                       		beq.s	locret_14F06
00017DF8 163C 00C0                  		move.b	#-$40,d3
00017DFC                            
00017DFC                            locret_14F06:
00017DFC 4E75                       		rts	
00017DFE                            
00017DFE                            ; End of function ObjHitWallRight
00017DFE                            
00017DFE                            ; ---------------------------------------------------------------------------
00017DFE                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017DFE                            ; touches them
00017DFE                            ; ---------------------------------------------------------------------------
00017DFE                            
00017DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DFE                            
00017DFE                            
00017DFE                            Sonic_DontRunOnWalls:
00017DFE 3428 000C                  		move.w	obY(a0),d2
00017E02 3628 0008                  		move.w	obX(a0),d3
00017E06 7000                       		moveq	#0,d0
00017E08 1028 0016                  		move.b	obHeight(a0),d0
00017E0C 4880                       		ext.w	d0
00017E0E 9440                       		sub.w	d0,d2
00017E10 0A42 000F                  		eori.w	#$F,d2
00017E14 1028 0017                  		move.b	obWidth(a0),d0
00017E18 4880                       		ext.w	d0
00017E1A D640                       		add.w	d0,d3
00017E1C 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E20 367C FFF0                  		movea.w	#-$10,a3
00017E24 3C3C 1000                  		move.w	#$1000,d6
00017E28 7A0E                       		moveq	#$E,d5
00017E2A 6100 FA98                  		bsr.w	FindFloor
00017E2E 3F01                       		move.w	d1,-(sp)
00017E30 3428 000C                  		move.w	obY(a0),d2
00017E34 3628 0008                  		move.w	obX(a0),d3
00017E38 7000                       		moveq	#0,d0
00017E3A 1028 0016                  		move.b	obHeight(a0),d0
00017E3E 4880                       		ext.w	d0
00017E40 9440                       		sub.w	d0,d2
00017E42 0A42 000F                  		eori.w	#$F,d2
00017E46 1028 0017                  		move.b	obWidth(a0),d0
00017E4A 4880                       		ext.w	d0
00017E4C 9640                       		sub.w	d0,d3
00017E4E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E52 367C FFF0                  		movea.w	#-$10,a3
00017E56 3C3C 1000                  		move.w	#$1000,d6
00017E5A 7A0E                       		moveq	#$E,d5
00017E5C 6100 FA66                  		bsr.w	FindFloor
00017E60 301F                       		move.w	(sp)+,d0
00017E62 143C 0080                  		move.b	#-$80,d2
00017E66 6000 FE5E                  		bra.w	loc_14DD0
00017E6A                            ; End of function Sonic_DontRunOnWalls
00017E6A                            
00017E6A                            ; ===========================================================================
00017E6A 3428 000C                  		move.w	obY(a0),d2
00017E6E 3628 0008                  		move.w	obX(a0),d3
00017E72                            
00017E72                            loc_14F7C:
00017E72 0442 000A                  		subi.w	#$A,d2
00017E76 0A42 000F                  		eori.w	#$F,d2
00017E7A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E7E 367C FFF0                  		movea.w	#-$10,a3
00017E82 3C3C 1000                  		move.w	#$1000,d6
00017E86 7A0E                       		moveq	#$E,d5
00017E88 6100 FA3A                  		bsr.w	FindFloor
00017E8C 143C 0080                  		move.b	#-$80,d2
00017E90 6000 FE6E                  		bra.w	loc_14E0A
00017E94                            
00017E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E94                            
00017E94                            
00017E94                            ObjHitCeiling:
00017E94 3428 000C                  		move.w	obY(a0),d2
00017E98 3628 0008                  		move.w	obX(a0),d3
00017E9C 7000                       		moveq	#0,d0
00017E9E 1028 0016                  		move.b	obHeight(a0),d0
00017EA2 4880                       		ext.w	d0
00017EA4 9440                       		sub.w	d0,d2
00017EA6 0A42 000F                  		eori.w	#$F,d2
00017EAA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EAE 367C FFF0                  		movea.w	#-$10,a3
00017EB2 3C3C 1000                  		move.w	#$1000,d6
00017EB6 7A0E                       		moveq	#$E,d5
00017EB8 6100 FA0A                  		bsr.w	FindFloor
00017EBC 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EC0 0803 0000                  		btst	#0,d3
00017EC4 6700                       		beq.s	locret_14FD4
00017EC6 163C 0080                  		move.b	#-$80,d3
00017ECA                            
00017ECA                            locret_14FD4:
00017ECA 4E75                       		rts	
00017ECC                            ; End of function ObjHitCeiling
00017ECC                            
00017ECC                            ; ===========================================================================
00017ECC                            
00017ECC                            loc_14FD6:
00017ECC 3428 000C                  		move.w	obY(a0),d2
00017ED0 3628 0008                  		move.w	obX(a0),d3
00017ED4 7000                       		moveq	#0,d0
00017ED6 1028 0017                  		move.b	obWidth(a0),d0
00017EDA 4880                       		ext.w	d0
00017EDC 9440                       		sub.w	d0,d2
00017EDE 1028 0016                  		move.b	obHeight(a0),d0
00017EE2 4880                       		ext.w	d0
00017EE4 9640                       		sub.w	d0,d3
00017EE6 0A43 000F                  		eori.w	#$F,d3
00017EEA 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017EEE 367C FFF0                  		movea.w	#-$10,a3
00017EF2 3C3C 0800                  		move.w	#$800,d6
00017EF6 7A0E                       		moveq	#$E,d5
00017EF8 6100 FB08                  		bsr.w	FindWall
00017EFC 3F01                       		move.w	d1,-(sp)
00017EFE 3428 000C                  		move.w	obY(a0),d2
00017F02 3628 0008                  		move.w	obX(a0),d3
00017F06 7000                       		moveq	#0,d0
00017F08 1028 0017                  		move.b	obWidth(a0),d0
00017F0C 4880                       		ext.w	d0
00017F0E D440                       		add.w	d0,d2
00017F10 1028 0016                  		move.b	obHeight(a0),d0
00017F14 4880                       		ext.w	d0
00017F16 9640                       		sub.w	d0,d3
00017F18 0A43 000F                  		eori.w	#$F,d3
00017F1C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F20 367C FFF0                  		movea.w	#-$10,a3
00017F24 3C3C 0800                  		move.w	#$800,d6
00017F28 7A0E                       		moveq	#$E,d5
00017F2A 6100 FAD6                  		bsr.w	FindWall
00017F2E 301F                       		move.w	(sp)+,d0
00017F30 143C 0040                  		move.b	#$40,d2
00017F34 6000 FD90                  		bra.w	loc_14DD0
00017F38                            
00017F38                            ; ---------------------------------------------------------------------------
00017F38                            ; Subroutine to	stop Sonic when	he jumps at a wall
00017F38                            ; ---------------------------------------------------------------------------
00017F38                            
00017F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F38                            
00017F38                            
00017F38                            Sonic_HitWall:
00017F38 3428 000C                  		move.w	obY(a0),d2
00017F3C 3628 0008                  		move.w	obX(a0),d3
00017F40                            
00017F40                            loc_1504A:
00017F40 0443 000A                  		subi.w	#$A,d3
00017F44 0A43 000F                  		eori.w	#$F,d3
00017F48 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F4C 367C FFF0                  		movea.w	#-$10,a3
00017F50 3C3C 0800                  		move.w	#$800,d6
00017F54 7A0E                       		moveq	#$E,d5
00017F56 6100 FAAA                  		bsr.w	FindWall
00017F5A 143C 0040                  		move.b	#$40,d2
00017F5E 6000 FDA0                  		bra.w	loc_14E0A
00017F62                            ; End of function Sonic_HitWall
00017F62                            
00017F62                            ; ---------------------------------------------------------------------------
00017F62                            ; Subroutine to	detect when an object hits a wall to its left
00017F62                            ; ---------------------------------------------------------------------------
00017F62                            
00017F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F62                            
00017F62                            
00017F62                            ObjHitWallLeft:
00017F62 D668 0008                  		add.w	obX(a0),d3
00017F66 3428 000C                  		move.w	obY(a0),d2
00017F6A                            		; Engine bug: colliding with left walls is erratic with this function.
00017F6A                            		; The cause is this: a missing instruction to flip collision on the found
00017F6A                            		; 16x16 block; this one:
00017F6A                            		;eori.w	#$F,d3
00017F6A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F6E 18BC 0000                  		move.b	#0,(a4)
00017F72 367C FFF0                  		movea.w	#-$10,a3
00017F76 3C3C 0800                  		move.w	#$800,d6
00017F7A 7A0E                       		moveq	#$E,d5
00017F7C 6100 FA84                  		bsr.w	FindWall
00017F80 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F84 0803 0000                  		btst	#0,d3
00017F88 6700                       		beq.s	locret_15098
00017F8A 163C 0040                  		move.b	#$40,d3
00017F8E                            
00017F8E                            locret_15098:
00017F8E 4E75                       		rts	
00017F90                            ; End of function ObjHitWallLeft
00017F90                            
00017F90                            ; ===========================================================================
00017F90                            
00017F90                            		include	"_incObj\66 Rotating Junction.asm"
00017F90                            ; ---------------------------------------------------------------------------
00017F90                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00017F90                            ; ---------------------------------------------------------------------------
00017F90                            
00017F90                            Junction:
00017F90 7000                       		moveq	#0,d0
00017F92 1028 0024                  		move.b	obRoutine(a0),d0
00017F96 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00017F9A 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00017F9E                            ; ===========================================================================
00017F9E 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00017FA0 0000                       		dc.w Jun_Action-Jun_Index
00017FA2 0000                       		dc.w Jun_Display-Jun_Index
00017FA4 0000                       		dc.w Jun_Release-Jun_Index
00017FA6                            
00017FA6 =00000034                  jun_frame:	equ $34		; current frame
00017FA6 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00017FA6 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00017FA6                            ; ===========================================================================
00017FA6                            
00017FA6                            Jun_Main:	; Routine 0
00017FA6 5428 0024                  		addq.b	#2,obRoutine(a0)
00017FAA 323C 0001                  		move.w	#1,d1
00017FAE 2248                       		movea.l	a0,a1
00017FB0 6000                       		bra.s	@makeitem
00017FB2                            ; ===========================================================================
00017FB2                            
00017FB2                            	@repeat:
00017FB2 4EB9 0000 F9C0             		jsr	FindFreeObj
00017FB8 6600                       		bne.s	@fail
00017FBA 12BC 0066                  		move.b	#id_Junction,0(a1)
00017FBE 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00017FC2 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017FC8 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017FCE 337C 0180 0018             		move.w	#$180,obPriority(a1)
00017FD4 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
00017FDA                            
00017FDA                            @makeitem:
00017FDA 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00017FE2 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00017FE8 0029 0004 0001             		ori.b	#4,obRender(a1)
00017FEE 137C 0038 0014             		move.b	#$38,obActWid(a1)
00017FF4                            
00017FF4                            	@fail:
00017FF4 51C9 FFBC                  		dbf	d1,@repeat
00017FF8                            
00017FF8 117C 0030 0014             		move.b	#$30,obActWid(a0)
00017FFE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018004 317C 003C 0030             		move.w	#$3C,$30(a0)
0001800A 117C 0001 0034             		move.b	#1,jun_frame(a0)
00018010 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018016                            
00018016                            Jun_Action:	; Routine 2
00018016 6100 0000                  		bsr.w	Jun_ChkSwitch
0001801A 4A28 0001                  		tst.b	obRender(a0)
0001801E 6A00 0000                  		bpl.w	Jun_Display
00018022 323C 0030                  		move.w	#$30,d1
00018026 3401                       		move.w	d1,d2
00018028 3602                       		move.w	d2,d3
0001802A 5243                       		addq.w	#1,d3
0001802C 3828 0008                  		move.w	obX(a0),d4
00018030 6100 992C                  		bsr.w	SolidObject
00018034 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
0001803A 6700 0000                  		beq.w	Jun_Display	; if not, branch
0001803E                            
0001803E 43F8 D000                  		lea	(v_player).w,a1
00018042 720E                       		moveq	#$E,d1
00018044 3029 0008                  		move.w	obX(a1),d0
00018048 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
0001804C 6500                       		bcs.s	@isleft		; if yes, branch
0001804E 7207                       		moveq	#7,d1		
00018050                            
00018050                            	@isleft:
00018050 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
00018054 6600                       		bne.s	Jun_Display	; if not, branch
00018056                            
00018056 1141 0032                  		move.b	d1,$32(a0)
0001805A 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
0001805E 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00018064 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
0001806A 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018070 337C 0000 0010             		move.w	#0,obVelX(a1)
00018076 337C 0000 0012             		move.w	#0,obVelY(a1)
0001807C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00018082 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018088 08E9 0001 0022             		bset	#1,obStatus(a1)
0001808E 3429 0008                  		move.w	obX(a1),d2
00018092 3629 000C                  		move.w	obY(a1),d3
00018096 6100 0000                  		bsr.w	Jun_ChgPos
0001809A D569 0008                  		add.w	d2,obX(a1)
0001809E D769 000C                  		add.w	d3,obY(a1)
000180A2 E0E9 0008                  		asr	obX(a1)
000180A6 E0E9 000C                  		asr	obY(a1)
000180AA                            
000180AA                            Jun_Display:	; Routine 4
000180AA 6000 941A                  		bra.w	RememberState
000180AE                            ; ===========================================================================
000180AE                            
000180AE                            Jun_Release:	; Routine 6
000180AE 1028 001A                  		move.b	obFrame(a0),d0
000180B2 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
000180B6 6700                       		beq.s	@release	; if yes, branch
000180B8 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000180BC 6600                       		bne.s	@dontrelease	; if not, branch
000180BE                            
000180BE                            	@release:
000180BE B028 0032                  		cmp.b	$32(a0),d0
000180C2 6700                       		beq.s	@dontrelease
000180C4 43F8 D000                  		lea	(v_player).w,a1
000180C8 337C 0000 0010             		move.w	#0,obVelX(a1)
000180CE 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180D4 0C00 0004                  		cmpi.b	#4,d0
000180D8 6700                       		beq.s	@isdown
000180DA 337C 0800 0010             		move.w	#$800,obVelX(a1)
000180E0 337C 0800 0012             		move.w	#$800,obVelY(a1)
000180E6                            
000180E6                            	@isdown:
000180E6 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000180EA 5928 0024                  		subq.b	#4,obRoutine(a0)
000180EE                            
000180EE                            	@dontrelease:
000180EE 6100                       		bsr.s	Jun_ChkSwitch
000180F0 6100                       		bsr.s	Jun_ChgPos
000180F2 6000 93D2                  		bra.w	RememberState
000180F6                            
000180F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180F6                            
000180F6                            
000180F6                            Jun_ChkSwitch:
000180F6 45F8 F7E0                  		lea	(f_switch).w,a2
000180FA 7000                       		moveq	#0,d0
000180FC 1028 0038                  		move.b	jun_switch(a0),d0
00018100 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018106 6700                       		beq.s	@unpressed	; if not, branch
00018108                            
00018108 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
0001810C 6600                       		bne.s	@animate	; if yes, branch
0001810E 4428 0034                  		neg.b	jun_frame(a0)
00018112 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018118 6000                       		bra.s	@animate
0001811A                            ; ===========================================================================
0001811A                            
0001811A                            @unpressed:
0001811A 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
0001811E                            
0001811E                            @animate:
0001811E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
00018122 6A00                       		bpl.s	@nochange	; if time remains, branch
00018124 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001812A 1228 0034                  		move.b	jun_frame(a0),d1
0001812E 1028 001A                  		move.b	obFrame(a0),d0
00018132 D001                       		add.b	d1,d0
00018134 0200 000F                  		andi.b	#$F,d0
00018138 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
0001813C                            
0001813C                            	@nochange:
0001813C 4E75                       		rts	
0001813E                            ; End of function Jun_ChkSwitch
0001813E                            
0001813E                            
0001813E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001813E                            
0001813E                            
0001813E                            Jun_ChgPos:
0001813E 43F8 D000                  		lea	(v_player).w,a1
00018142 7000                       		moveq	#0,d0
00018144 1028 001A                  		move.b	obFrame(a0),d0
00018148 D040                       		add.w	d0,d0
0001814A 45FB 0000                  		lea	@data(pc,d0.w),a2
0001814E 101A                       		move.b	(a2)+,d0
00018150 4880                       		ext.w	d0
00018152 D068 0008                  		add.w	obX(a0),d0
00018156 3340 0008                  		move.w	d0,obX(a1)
0001815A 101A                       		move.b	(a2)+,d0
0001815C 4880                       		ext.w	d0
0001815E D068 000C                  		add.w	obY(a0),d0
00018162 3340 000C                  		move.w	d0,obY(a1)
00018166 4E75                       		rts	
00018168                            
00018168                            
00018168 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
0001816C E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018170 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
00018174 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018178 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
0001817C 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018180 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00018184 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018184 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018188                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018188                            ; ---------------------------------------------------------------------------
00018188                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018188                            ; ---------------------------------------------------------------------------
00018188                            Map_Jun_internal:
00018188 0000                       		dc.w @gap0-Map_Jun_internal
0001818A 0000                       		dc.w @gap1-Map_Jun_internal
0001818C 0000                       		dc.w @gap2-Map_Jun_internal
0001818E 0000                       		dc.w @gap3-Map_Jun_internal
00018190 0000                       		dc.w @gap4-Map_Jun_internal
00018192 0000                       		dc.w @gap5-Map_Jun_internal
00018194 0000                       		dc.w @gap6-Map_Jun_internal
00018196 0000                       		dc.w @gap7-Map_Jun_internal
00018198 0000                       		dc.w @gap8-Map_Jun_internal
0001819A 0000                       		dc.w @gap9-Map_Jun_internal
0001819C 0000                       		dc.w @gapA-Map_Jun_internal
0001819E 0000                       		dc.w @gapB-Map_Jun_internal
000181A0 0000                       		dc.w @gapC-Map_Jun_internal
000181A2 0000                       		dc.w @gapD-Map_Jun_internal
000181A4 0000                       		dc.w @gapE-Map_Jun_internal
000181A6 0000                       		dc.w @gapF-Map_Jun_internal
000181A8 0000                       		dc.w @circle-Map_Jun_internal
000181AA 06                         @gap0:		dc.b 6
000181AB E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000181B0 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000181B5 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000181BA E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000181BF 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000181C4 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000181C9 06                         @gap1:		dc.b 6
000181CA F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000181CF 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000181D4 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000181D9 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000181DE 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000181E3 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000181E8 06                         @gap2:		dc.b 6
000181E9 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000181EE 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000181F3 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000181F8 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000181FD 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00018202 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018207 06                         @gap3:		dc.b 6
00018208 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001820D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00018212 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018217 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001821C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018221 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018226 06                         @gap4:		dc.b 6
00018227 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001822C 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018231 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018236 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001823B 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018240 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00018245 06                         @gap5:		dc.b 6
00018246 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001824B 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018250 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00018255 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001825A 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001825F 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00018264 06                         @gap6:		dc.b 6
00018265 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001826A 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001826F 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00018274 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018279 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001827E 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00018283 06                         @gap7:		dc.b 6
00018284 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018289 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001828E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00018293 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018298 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001829D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000182A2 06                         @gap8:		dc.b 6
000182A3 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000182A8 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000182AD E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000182B2 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000182B7 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000182BC 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000182C1 06                         @gap9:		dc.b 6
000182C2 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000182C7 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000182CC DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000182D1 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000182D6 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000182DB F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000182E0 06                         @gapA:		dc.b 6
000182E1 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000182E6 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000182EB D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000182F0 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000182F5 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000182FA E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000182FF 06                         @gapB:		dc.b 6
00018300 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00018305 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001830A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
0001830F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00018314 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018319 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
0001831E 06                         @gapC:		dc.b 6
0001831F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00018324 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018329 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
0001832E C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00018333 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018338 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
0001833D 06                         @gapD:		dc.b 6
0001833E D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00018343 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018348 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
0001834D CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00018352 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018357 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001835C 06                         @gapE:		dc.b 6
0001835D E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00018362 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018367 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001836C D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018371 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018376 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001837B 06                         @gapF:		dc.b 6
0001837C E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018381 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018386 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001838B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018390 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00018395 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001839A 0C                         @circle:	dc.b $C
0001839B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000183A0 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000183A5 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000183AA C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000183AF D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000183B4 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000183B9 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000183BE 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000183C3 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000183C8 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000183CD 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000183D2 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000183D8 00                         		even
000183D8 00                         		even
000183D8                            		include	"_incObj\67 Running Disc.asm"
000183D8                            ; ---------------------------------------------------------------------------
000183D8                            ; Object 67 - disc that	you run	around (SBZ)
000183D8                            ; ---------------------------------------------------------------------------
000183D8                            
000183D8                            RunningDisc:
000183D8 7000                       		moveq	#0,d0
000183DA 1028 0024                  		move.b	obRoutine(a0),d0
000183DE 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000183E2 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000183E6                            ; ===========================================================================
000183E6 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000183E8 0000                       		dc.w Disc_Action-Disc_Index
000183EA                            
000183EA =00000032                  disc_origX:	equ $32		; original x-axis position
000183EA =00000030                  disc_origY:	equ $30		; original y-axis position
000183EA                            ; ===========================================================================
000183EA                            
000183EA                            Disc_Main:	; Routine 0
000183EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000183EE 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000183F6 317C C344 0002             		move.w	#$C344,obGfx(a0)
000183FC 117C 0004 0001             		move.b	#4,obRender(a0)
00018402 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018408 117C 0008 0014             		move.b	#8,obActWid(a0)
0001840E 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
00018414 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
0001841A 117C 0018 0034             		move.b	#$18,$34(a0)
00018420 117C 0048 0038             		move.b	#$48,$38(a0)
00018426 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001842A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001842E 6700                       		beq.s	@typeis0	; branch if 0
00018430 117C 0010 0034             		move.b	#$10,$34(a0)
00018436 117C 0038 0038             		move.b	#$38,$38(a0)
0001843C                            
0001843C                            	@typeis0:
0001843C 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018440 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00018444 4881                       		ext.w	d1
00018446 E741                       		asl.w	#3,d1
00018448 3141 0036                  		move.w	d1,$36(a0)
0001844C 1028 0022                  		move.b	obStatus(a0),d0
00018450 E418                       		ror.b	#2,d0
00018452 0200 00C0                  		andi.b	#$C0,d0
00018456 1140 0026                  		move.b	d0,obAngle(a0)
0001845A                            
0001845A                            Disc_Action:	; Routine 2
0001845A 6100 0000                  		bsr.w	Disc_MoveSonic
0001845E 6100 0000                  		bsr.w	Disc_MoveSpot
00018462 6000 0000                  		bra.w	Disc_ChkDel
00018466                            ; ===========================================================================
00018466                            
00018466                            Disc_MoveSonic:
00018466 7400                       		moveq	#0,d2
00018468 1428 0038                  		move.b	$38(a0),d2
0001846C 3602                       		move.w	d2,d3
0001846E D643                       		add.w	d3,d3
00018470 43F8 D000                  		lea	(v_player).w,a1
00018474 3029 0008                  		move.w	obX(a1),d0
00018478 9068 0032                  		sub.w	disc_origX(a0),d0
0001847C D042                       		add.w	d2,d0
0001847E B043                       		cmp.w	d3,d0
00018480 6400                       		bcc.s	loc_155A8
00018482 3229 000C                  		move.w	obY(a1),d1
00018486 9268 0030                  		sub.w	disc_origY(a0),d1
0001848A D242                       		add.w	d2,d1
0001848C B243                       		cmp.w	d3,d1
0001848E 6400                       		bcc.s	loc_155A8
00018490 0829 0001 0022             		btst	#1,obStatus(a1)
00018496 6700                       		beq.s	loc_155B8
00018498 4228 003A                  		clr.b	$3A(a0)
0001849C 4E75                       		rts	
0001849E                            ; ===========================================================================
0001849E                            
0001849E                            loc_155A8:
0001849E 4A28 003A                  		tst.b	$3A(a0)
000184A2 6700                       		beq.s	locret_155B6
000184A4 4229 0038                  		clr.b	$38(a1)
000184A8 4228 003A                  		clr.b	$3A(a0)
000184AC                            
000184AC                            locret_155B6:
000184AC 4E75                       		rts	
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            loc_155B8:
000184AE 4A28 003A                  		tst.b	$3A(a0)
000184B2 6600                       		bne.s	loc_155E2
000184B4 117C 0001 003A             		move.b	#1,$3A(a0)
000184BA 0829 0002 0022             		btst	#2,obStatus(a1)
000184C0 6600                       		bne.s	loc_155D0
000184C2 4229 001C                  		clr.b	obAnim(a1)
000184C6                            
000184C6                            loc_155D0:
000184C6 08A9 0005 0022             		bclr	#5,obStatus(a1)
000184CC 137C 0001 001D             		move.b	#1,obNextAni(a1)
000184D2 137C 0001 0038             		move.b	#1,$38(a1)
000184D8                            
000184D8                            loc_155E2:
000184D8 3029 0020                  		move.w	obInertia(a1),d0
000184DC 4A68 0036                  		tst.w	$36(a0)
000184E0 6A00                       		bpl.s	loc_15608
000184E2 0C40 FC00                  		cmpi.w	#-$400,d0
000184E6 6F00                       		ble.s	loc_155FA
000184E8 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000184EE 4E75                       		rts	
000184F0                            ; ===========================================================================
000184F0                            
000184F0                            loc_155FA:
000184F0 0C40 F100                  		cmpi.w	#-$F00,d0
000184F4 6C00                       		bge.s	locret_15606
000184F6 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000184FC                            
000184FC                            locret_15606:
000184FC 4E75                       		rts	
000184FE                            ; ===========================================================================
000184FE                            
000184FE                            loc_15608:
000184FE 0C40 0400                  		cmpi.w	#$400,d0
00018502 6C00                       		bge.s	loc_15616
00018504 337C 0400 0020             		move.w	#$400,obInertia(a1)
0001850A 4E75                       		rts	
0001850C                            ; ===========================================================================
0001850C                            
0001850C                            loc_15616:
0001850C 0C40 0F00                  		cmpi.w	#$F00,d0
00018510 6F00                       		ble.s	locret_15622
00018512 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018518                            
00018518                            locret_15622:
00018518 4E75                       		rts	
0001851A                            ; ===========================================================================
0001851A                            
0001851A                            Disc_MoveSpot:
0001851A 3028 0036                  		move.w	$36(a0),d0
0001851E D168 0026                  		add.w	d0,obAngle(a0)
00018522 1028 0026                  		move.b	obAngle(a0),d0
00018526 4EB9 0000 3B42             		jsr	(CalcSine).l
0001852C 3428 0030                  		move.w	disc_origY(a0),d2
00018530 3628 0032                  		move.w	disc_origX(a0),d3
00018534 7800                       		moveq	#0,d4
00018536 1828 0034                  		move.b	$34(a0),d4
0001853A E14C                       		lsl.w	#8,d4
0001853C 2A04                       		move.l	d4,d5
0001853E C9C0                       		muls.w	d0,d4
00018540 4844                       		swap	d4
00018542 CBC1                       		muls.w	d1,d5
00018544 4845                       		swap	d5
00018546 D842                       		add.w	d2,d4
00018548 DA43                       		add.w	d3,d5
0001854A 3144 000C                  		move.w	d4,obY(a0)
0001854E 3145 0008                  		move.w	d5,obX(a0)
00018552 4E75                       		rts	
00018554                            ; ===========================================================================
00018554                            
00018554                            Disc_ChkDel:
00018570 4EF9 0000 F426             		jmp	(DisplaySprite).l
00018576                            
00018576                            	@delete:
00018576 4EF9 0000 F466             		jmp	(DeleteObject).l
00018576 4EF9 0000 F466             		jmp	(DeleteObject).l
0001857C                            Map_Disc:	include	"_maps\Running Disc.asm"
0001857C                            ; ---------------------------------------------------------------------------
0001857C                            ; Sprite mappings - disc that you run around (SBZ)
0001857C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001857C                            ; part of the level tiles.)
0001857C                            ; ---------------------------------------------------------------------------
0001857C                            Map_Disc_internal:
0001857C 0000                       		dc.w @spot-Map_Disc_internal
0001857E 01                         @spot:		dc.b 1
0001857F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018584                            		even
00018584                            		even
00018584                            		include	"_incObj\68 Conveyor Belt.asm"
00018584                            ; ---------------------------------------------------------------------------
00018584                            ; Object 68 - conveyor belts (SBZ)
00018584                            ; ---------------------------------------------------------------------------
00018584                            
00018584                            Conveyor:
00018584 7000                       		moveq	#0,d0
00018586 1028 0024                  		move.b	obRoutine(a0),d0
0001858A 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
0001858E 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00018592                            ; ===========================================================================
00018592 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00018594 0000                       		dc.w Conv_Action-Conv_Index
00018596                            
00018596 =00000036                  conv_speed:	equ $36
00018596 =00000038                  conv_width:	equ $38
00018596                            ; ===========================================================================
00018596                            
00018596                            Conv_Main:	; Routine 0
00018596 5428 0024                  		addq.b	#2,obRoutine(a0)
0001859A 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000185A0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000185A4 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000185A8 6700                       		beq.s	@typeis0	; if zero, branch
000185AA 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000185B0                            
000185B0                            	@typeis0:
000185B0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000185B4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000185B8 4881                       		ext.w	d1
000185BA E841                       		asr.w	#4,d1
000185BC 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000185C0                            
000185C0                            Conv_Action:	; Routine 2
000185C0 6100                       		bsr.s	@movesonic
000185DE 4E75                       		rts	
000185E0                            
000185E0                            	@delete:
000185E0 4EF9 0000 F466             		jmp	(DeleteObject).l
000185E6                            ; ===========================================================================
000185E6                            
000185E6                            @movesonic:
000185E6 7400                       		moveq	#0,d2
000185E8 1428 0038                  		move.b	conv_width(a0),d2
000185EC 3602                       		move.w	d2,d3
000185EE D643                       		add.w	d3,d3
000185F0 43F8 D000                  		lea	(v_player).w,a1
000185F4 3029 0008                  		move.w	obX(a1),d0
000185F8 9068 0008                  		sub.w	obX(a0),d0
000185FC D042                       		add.w	d2,d0
000185FE B043                       		cmp.w	d3,d0
00018600 6400                       		bcc.s	@notonconveyor
00018602 3229 000C                  		move.w	obY(a1),d1
00018606 9268 000C                  		sub.w	obY(a0),d1
0001860A 0641 0030                  		addi.w	#$30,d1
0001860E 0C41 0030                  		cmpi.w	#$30,d1
00018612 6400                       		bcc.s	@notonconveyor
00018614 0829 0001 0022             		btst	#1,obStatus(a1)
0001861A 6600                       		bne.s	@notonconveyor
0001861C 3028 0036                  		move.w	conv_speed(a0),d0
00018620 D169 0008                  		add.w	d0,obX(a1)
00018624                            
00018624                            	@notonconveyor:
00018624 4E75                       		rts	
00018624 4E75                       		rts	
00018626                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018626                            ; ---------------------------------------------------------------------------
00018626                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018626                            ; ---------------------------------------------------------------------------
00018626                            
00018626                            SpinPlatform:
00018626 7000                       		moveq	#0,d0
00018628 1028 0024                  		move.b	obRoutine(a0),d0
0001862C 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018630 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
00018634                            ; ===========================================================================
00018634 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018636 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018638 0000                       		dc.w Spin_Spinner-Spin_Index
0001863A                            
0001863A =00000030                  spin_timer:	equ $30		; time counter until change
0001863A =00000032                  spin_timelen:	equ $32		; time between changes (general)
0001863A                            ; ===========================================================================
0001863A                            
0001863A                            Spin_Main:	; Routine 0
0001863A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001863E 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018646 317C 4492 0002             		move.w	#$4492,obGfx(a0)
0001864C 0028 0004 0001             		ori.b	#4,obRender(a0)
00018652 117C 0080 0014             		move.b	#$80,obActWid(a0)
00018658 7000                       		moveq	#0,d0
0001865A 1028 0028                  		move.b	obSubtype(a0),d0
0001865E 0240 000F                  		andi.w	#$F,d0
00018662 C0FC 003C                  		mulu.w	#$3C,d0
00018666 3140 0032                  		move.w	d0,spin_timelen(a0)
0001866A 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
0001866E 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018670                            
00018670 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00018674 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
0001867C 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00018682 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018688 117C 0002 001C             		move.b	#2,obAnim(a0)
0001868E 7000                       		moveq	#0,d0
00018690 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018694 3200                       		move.w	d0,d1
00018696 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001869A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001869E 3140 0030                  		move.w	d0,spin_timer(a0)
000186A2 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000186A6 0241 0070                  		andi.w	#$70,d1
000186AA 0641 0010                  		addi.w	#$10,d1
000186AE E549                       		lsl.w	#2,d1
000186B0 5341                       		subq.w	#1,d1
000186B2 3141 0036                  		move.w	d1,$36(a0)
000186B6 6000                       		bra.s	Spin_Spinner
000186B8                            ; ===========================================================================
000186B8                            
000186B8                            Spin_Trapdoor:	; Routine 2
000186B8 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000186BC 6A00                       		bpl.s	@animate	; if time remains, branch
000186BE                            
000186BE 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000186C4 0868 0000 001C             		bchg	#0,obAnim(a0)
000186CA 4A28 0001                  		tst.b	obRender(a0)
000186CE 6A00                       		bpl.s	@animate
000186DA                            
000186DA                            	@animate:
000186DA 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000186E0 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000186E6 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000186EA 6600                       		bne.s	@notsolid	; if not, branch
000186EC 323C 004B                  		move.w	#$4B,d1
000186F0 343C 000C                  		move.w	#$C,d2
000186F4 3602                       		move.w	d2,d3
000186F6 5243                       		addq.w	#1,d3
000186F8 3828 0008                  		move.w	obX(a0),d4
000186FC 6100 9260                  		bsr.w	SolidObject
00018700 6000 8DC4                  		bra.w	RememberState
00018704                            ; ===========================================================================
00018704                            
00018704                            @notsolid:
00018704 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
0001870A 6700                       		beq.s	@display	; if not, branch
0001870C 43F8 D000                  		lea	(v_player).w,a1
00018710 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018716 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001871C 4228 0025                  		clr.b	obSolid(a0)
00018720                            
00018720                            	@display:
00018720 6000 8DA4                  		bra.w	RememberState
00018724                            ; ===========================================================================
00018724                            
00018724                            Spin_Spinner:	; Routine 4
00018724 3038 FE04                  		move.w	(v_framecount).w,d0
00018728 C068 0036                  		and.w	$36(a0),d0
0001872C 6600                       		bne.s	@delay
0001872E 117C 0001 0034             		move.b	#1,$34(a0)
00018734                            
00018734                            	@delay:
00018734 4A28 0034                  		tst.b	$34(a0)
00018738 6700                       		beq.s	@animate
0001873A 5368 0030                  		subq.w	#1,spin_timer(a0)
0001873E 6A00                       		bpl.s	@animate
00018740 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018746 4228 0034                  		clr.b	$34(a0)
0001874A 0868 0000 001C             		bchg	#0,obAnim(a0)
00018750                            
00018750                            	@animate:
00018750 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018756 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001875C 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018760 6600                       		bne.s	@notsolid2	; if not, branch
00018762 323C 001B                  		move.w	#$1B,d1
00018766 343C 0007                  		move.w	#7,d2
0001876A 3602                       		move.w	d2,d3
0001876C 5243                       		addq.w	#1,d3
0001876E 3828 0008                  		move.w	obX(a0),d4
00018772 6100 91EA                  		bsr.w	SolidObject
00018776 6000 8D4E                  		bra.w	RememberState
0001877A                            ; ===========================================================================
0001877A                            
0001877A                            @notsolid2:
0001877A 0828 0003 0022             		btst	#3,obStatus(a0)
00018780 6700                       		beq.s	@display
00018782 43F8 D000                  		lea	(v_player).w,a1
00018786 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001878C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018792 4228 0025                  		clr.b	obSolid(a0)
00018796                            
00018796                            	@display:
00018796 6000 8D2E                  		bra.w	RememberState
00018796 6000 8D2E                  		bra.w	RememberState
0001879A                            		include	"_anim\SBZ Spinning Platforms.asm"
0001879A                            ; ---------------------------------------------------------------------------
0001879A                            ; Animation script - trapdoor (SBZ)
0001879A                            ; ---------------------------------------------------------------------------
0001879A 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
0001879C 0000                       		dc.w @trapclose-Ani_Spin
0001879E 0000                       		dc.w @spin1-Ani_Spin
000187A0 0000                       		dc.w @spin2-Ani_Spin
000187A2 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
000187A8 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
000187AE 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000187C2 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000187D6                            		even
000187D6                            		even
000187D6                            Map_Trap:	include	"_maps\Trapdoor.asm"
000187D6                            ; ---------------------------------------------------------------------------
000187D6                            ; Sprite mappings - trapdoor (SBZ)
000187D6                            ; ---------------------------------------------------------------------------
000187D6                            Map_Trap_internal:
000187D6 0000                       		dc.w @closed-Map_Trap_internal
000187D8 0000                       		dc.w @half-Map_Trap_internal
000187DA 0000                       		dc.w @open-Map_Trap_internal
000187DC 04                         @closed:	dc.b 4
000187DD F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000187E2 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000187E7 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000187EC F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000187F1 08                         @half:		dc.b 8
000187F2 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000187F7 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000187FC 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018801 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018806 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001880B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018810 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018815 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001881A 04                         @open:		dc.b 4
0001881B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018820 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018825 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001882A 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018830 00                         		even
00018830 00                         		even
00018830                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018830                            ; ---------------------------------------------------------------------------
00018830                            ; Sprite mappings - spinning platforms (SBZ)
00018830                            ; ---------------------------------------------------------------------------
00018830                            Map_Spin_internal:
00018830 0000                       		dc.w @flat-Map_Spin_internal
00018832 0000                       		dc.w @spin1-Map_Spin_internal
00018834 0000                       		dc.w @spin2-Map_Spin_internal
00018836 0000                       		dc.w @spin3-Map_Spin_internal
00018838 0000                       		dc.w @spin4-Map_Spin_internal
0001883A 02                         @flat:		dc.b 2
0001883B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018840 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018845 02                         @spin1:		dc.b 2
00018846 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001884B 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018850 02                         @spin2:		dc.b 2
00018851 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018856 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001885B 02                         @spin3:		dc.b 2
0001885C F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018861 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018866 02                         @spin4:		dc.b 2
00018867 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001886C 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018872 00                         		even
00018872 00                         		even
00018872                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018872                            ; ---------------------------------------------------------------------------
00018872                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018872                            ; ---------------------------------------------------------------------------
00018872                            
00018872                            Saws:
00018872 7000                       		moveq	#0,d0
00018874 1028 0024                  		move.b	obRoutine(a0),d0
00018878 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
0001887C 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018880                            ; ===========================================================================
00018880 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018882 0000                       		dc.w Saw_Action-Saw_Index
00018884                            
00018884 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018884 =00000038                  saw_origY:	equ $38		; original y-axis position
00018884 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018884                            ; ===========================================================================
00018884                            
00018884                            Saw_Main:	; Routine 0
00018884 5428 0024                  		addq.b	#2,obRoutine(a0)
00018888 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018890 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018896 117C 0004 0001             		move.b	#4,obRender(a0)
0001889C 317C 0200 0018             		move.w	#$200,obPriority(a0)
000188A2 117C 0020 0014             		move.b	#$20,obActWid(a0)
000188A8 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000188AE 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
000188B4 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
000188BA 6400                       		bcc.s	Saw_Action	; if yes, branch
000188BC 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000188C2                            
000188C2                            Saw_Action:	; Routine 2
000188C2 7000                       		moveq	#0,d0
000188C4 1028 0028                  		move.b	obSubtype(a0),d0
000188C8 0240 0007                  		andi.w	#7,d0
000188CC D040                       		add.w	d0,d0
000188CE 323B 0000                  		move.w	@index(pc,d0.w),d1
000188D2 4EBB 1000                  		jsr	@index(pc,d1.w)
000188F2 4EF9 0000 F426             		jmp	(DisplaySprite).l
000188F8                            
000188F8                            	@delete:
000188F8 4EF9 0000 F466             		jmp	(DeleteObject).l
000188FE                            ; ===========================================================================
000188FE 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018904 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018908                            ; ===========================================================================
00018908                            
00018908                            @type00:
00018908 4E75                       		rts			; doesn't move
0001890A                            ; ===========================================================================
0001890A                            
0001890A                            @type01:
0001890A 323C 0060                  		move.w	#$60,d1
0001890E 7000                       		moveq	#0,d0
00018910 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018914 0828 0000 0022             		btst	#0,obStatus(a0)
0001891A 6700                       		beq.s	@noflip01
0001891C 4440                       		neg.w	d0
0001891E D041                       		add.w	d1,d0
00018920                            
00018920                            	@noflip01:
00018920 3228 003A                  		move.w	saw_origX(a0),d1
00018924 9240                       		sub.w	d0,d1
00018926 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
0001892A                            
0001892A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001892E 6A00                       		bpl.s	@sameframe01
00018930 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018936 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0001893C                            
0001893C                            	@sameframe01:
0001893C 4A28 0001                  		tst.b	obRender(a0)
00018940 6A00                       		bpl.s	@nosound01
00018942 3038 FE04                  		move.w	(v_framecount).w,d0
00018946 0240 000F                  		andi.w	#$F,d0
0001894A 6600                       		bne.s	@nosound01
00018956                            
00018956                            	@nosound01:
00018956 4E75                       		rts	
00018958                            ; ===========================================================================
00018958                            
00018958                            @type02:
00018958 323C 0030                  		move.w	#$30,d1
0001895C 7000                       		moveq	#0,d0
0001895E 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018962 0828 0000 0022             		btst	#0,obStatus(a0)
00018968 6700                       		beq.s	@noflip02
0001896A 4440                       		neg.w	d0
0001896C 0640 0080                  		addi.w	#$80,d0
00018970                            
00018970                            	@noflip02:
00018970 3228 0038                  		move.w	saw_origY(a0),d1
00018974 9240                       		sub.w	d0,d1
00018976 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
0001897A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001897E 6A00                       		bpl.s	@sameframe02
00018980 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018986 0868 0000 001A             		bchg	#0,obFrame(a0)
0001898C                            
0001898C                            	@sameframe02:
0001898C 4A28 0001                  		tst.b	obRender(a0)
00018990 6A00                       		bpl.s	@nosound02
00018992 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018996 0C00 0018                  		cmpi.b	#$18,d0
0001899A 6600                       		bne.s	@nosound02
000189A6                            
000189A6                            	@nosound02:
000189A6 4E75                       		rts	
000189A8                            ; ===========================================================================
000189A8                            
000189A8                            @type03:
000189A8 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
000189AC 6600                       		bne.s	@here03		; if yes, branch
000189AE                            
000189AE 3038 D008                  		move.w	(v_player+obX).w,d0
000189B2 0440 00C0                  		subi.w	#$C0,d0
000189B6 6500                       		bcs.s	@nosaw03x
000189B8 9068 0008                  		sub.w	obX(a0),d0
000189BC 6500                       		bcs.s	@nosaw03x
000189BE 3038 D00C                  		move.w	(v_player+obY).w,d0
000189C2 0440 0080                  		subi.w	#$80,d0
000189C6 B068 000C                  		cmp.w	obY(a0),d0
000189CA 6400                       		bcc.s	@nosaw03y
000189CC 0640 0100                  		addi.w	#$100,d0
000189D0 B068 000C                  		cmp.w	obY(a0),d0
000189D4 6500                       		bcs.s	@nosaw03y
000189D6 117C 0001 003D             		move.b	#1,saw_here(a0)
000189DC 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
000189E2 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000189E8 117C 0002 001A             		move.b	#2,obFrame(a0)
000189F8                            
000189F8                            	@nosaw03x:
000189F8 588F                       		addq.l	#4,sp
000189FA                            
000189FA                            	@nosaw03y:
000189FA 4E75                       		rts	
000189FC                            ; ===========================================================================
000189FC                            
000189FC                            @here03:
000189FC 4EB9 0000 F412             		jsr	(SpeedToPos).l
00018A02 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A08 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A0C 6A00                       		bpl.s	@sameframe03
00018A0E 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A14 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A1A                            
00018A1A                            	@sameframe03:
00018A1A 4E75                       		rts	
00018A1C                            ; ===========================================================================
00018A1C                            
00018A1C                            @type04:
00018A1C 4A28 003D                  		tst.b	saw_here(a0)
00018A20 6600                       		bne.s	@here04
00018A22 3038 D008                  		move.w	(v_player+obX).w,d0
00018A26 0640 00E0                  		addi.w	#$E0,d0
00018A2A 9068 0008                  		sub.w	obX(a0),d0
00018A2E 6400                       		bcc.s	@nosaw04x
00018A30 3038 D00C                  		move.w	(v_player+obY).w,d0
00018A34 0440 0080                  		subi.w	#$80,d0
00018A38 B068 000C                  		cmp.w	obY(a0),d0
00018A3C 6400                       		bcc.s	@nosaw04y
00018A3E 0640 0100                  		addi.w	#$100,d0
00018A42 B068 000C                  		cmp.w	obY(a0),d0
00018A46 6500                       		bcs.s	@nosaw04y
00018A48 117C 0001 003D             		move.b	#1,saw_here(a0)
00018A4E 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018A54 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018A5A 117C 0002 001A             		move.b	#2,obFrame(a0)
00018A6A                            
00018A6A                            	@nosaw04x:
00018A6A 588F                       		addq.l	#4,sp
00018A6C                            
00018A6C                            	@nosaw04y:
00018A6C 4E75                       		rts	
00018A6E                            ; ===========================================================================
00018A6E                            
00018A6E                            @here04:
00018A6E 4EB9 0000 F412             		jsr	(SpeedToPos).l
00018A74 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A7A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018A7E 6A00                       		bpl.s	@sameframe04
00018A80 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018A86 0868 0000 001A             		bchg	#0,obFrame(a0)
00018A8C                            
00018A8C                            	@sameframe04:
00018A8C 4E75                       		rts	
00018A8C 4E75                       		rts	
00018A8E                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018A8E                            ; ---------------------------------------------------------------------------
00018A8E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018A8E                            ; ---------------------------------------------------------------------------
00018A8E                            Map_Saw_internal:
00018A8E 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018A90 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018A92 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018A94 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018A96 07                         @pizzacutter1:	dc.b 7
00018A97 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018A9C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018AA1 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018AA6 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018AAB E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AB0 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018AB5 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018ABA 07                         @pizzacutter2:	dc.b 7
00018ABB C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018AC0 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018AC5 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018ACA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018ACF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018AD4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018AD9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018ADE 04                         @groundsaw1:	dc.b 4
00018ADF E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018AE4 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018AE9 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018AEE 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018AF3 04                         @groundsaw2:	dc.b 4
00018AF4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018AF9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018AFE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018B03 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018B08                            		even
00018B08                            		even
00018B08                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018B08                            ; ---------------------------------------------------------------------------
00018B08                            ; Object 6B - stomper and sliding door (SBZ)
00018B08                            ; ---------------------------------------------------------------------------
00018B08                            
00018B08                            ScrapStomp:
00018B08 7000                       		moveq	#0,d0
00018B0A 1028 0024                  		move.b	obRoutine(a0),d0
00018B0E 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018B12 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018B16                            ; ===========================================================================
00018B16 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018B18 0000                       		dc.w Sto_Action-Sto_Index
00018B1A                            
00018B1A =00000016                  sto_height:	equ $16
00018B1A =00000034                  sto_origX:	equ $34		; original x-axis position
00018B1A =00000030                  sto_origY:	equ $30		; original y-axis position
00018B1A =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018B1A                            
00018B1A 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018B1E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018B22 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018B26 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018B2A 8040 0005                  		dc.b  $80, $40,	  0,   5
00018B2E                            ; ===========================================================================
00018B2E                            
00018B2E                            Sto_Main:	; Routine 0
00018B2E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018B32 7000                       		moveq	#0,d0
00018B34 1028 0028                  		move.b	obSubtype(a0),d0
00018B38 E448                       		lsr.w	#2,d0
00018B3A 0240 001C                  		andi.w	#$1C,d0
00018B3E 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018B42 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018B46 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018B4A E448                       		lsr.w	#2,d0
00018B4C 1140 001A                  		move.b	d0,obFrame(a0)
00018B50 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018B58 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018B5E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018B64 6600                       		bne.s	@isSBZ12	; if not, branch
00018B66 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018B6C 6700                       		beq.s	@isSBZ3
00018B6E                            
00018B6E                            @chkdel:
00018B6E 45F8 FC00                  		lea	(v_objstate).w,a2
00018B72 7000                       		moveq	#0,d0
00018B74 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B78 6700                       		beq.s	@delete
00018B7A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018B80                            
00018B80                            	@delete:
00018B80 4EF9 0000 F466             		jmp	(DeleteObject).l
00018B86                            ; ===========================================================================
00018B86                            
00018B86                            @isSBZ3:
00018B86 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018B8C 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018B92 6600                       		bne.s	@isSBZ12
00018B94 45F8 FC00                  		lea	(v_objstate).w,a2
00018B98 7000                       		moveq	#0,d0
00018B9A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018B9E 6700                       		beq.s	@isSBZ12
00018BA0 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018BA6 6700                       		beq.s	@isSBZ12
00018BA8 4238 F7CB                  		clr.b	(v_obj6B).w
00018BAC 60C0                       		bra.s	@chkdel
00018BAE                            ; ===========================================================================
00018BAE                            
00018BAE                            @isSBZ12:
00018BAE 0028 0004 0001             		ori.b	#4,obRender(a0)
00018BB4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018BBA 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018BC0 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018BC6 7000                       		moveq	#0,d0
00018BC8 101B                       		move.b	(a3)+,d0
00018BCA 3140 003C                  		move.w	d0,$3C(a0)
00018BCE 7000                       		moveq	#0,d0
00018BD0 1028 0028                  		move.b	obSubtype(a0),d0
00018BD4 6A00                       		bpl.s	Sto_Action
00018BD6 0200 000F                  		andi.b	#$F,d0
00018BDA 1140 003E                  		move.b	d0,$3E(a0)
00018BDE 1153 0028                  		move.b	(a3),obSubtype(a0)
00018BE2 0C13 0005                  		cmpi.b	#5,(a3)
00018BE6 6600                       		bne.s	@chkgone
00018BE8 08E8 0004 0001             		bset	#4,obRender(a0)
00018BEE                            
00018BEE                            	@chkgone:
00018BEE 45F8 FC00                  		lea	(v_objstate).w,a2
00018BF2 7000                       		moveq	#0,d0
00018BF4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018BF8 6700                       		beq.s	Sto_Action
00018BFA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C00                            
00018C00                            Sto_Action:	; Routine 2
00018C00 3F28 0008                  		move.w	obX(a0),-(sp)
00018C04 7000                       		moveq	#0,d0
00018C06 1028 0028                  		move.b	obSubtype(a0),d0
00018C0A 0240 000F                  		andi.w	#$F,d0
00018C0E D040                       		add.w	d0,d0
00018C10 323B 0000                  		move.w	@index(pc,d0.w),d1
00018C14 4EBB 1000                  		jsr	@index(pc,d1.w)
00018C18 381F                       		move.w	(sp)+,d4
00018C1A 4A28 0001                  		tst.b	obRender(a0)
00018C1E 6A00                       		bpl.s	@chkdel
00018C20 7200                       		moveq	#0,d1
00018C22 1228 0014                  		move.b	obActWid(a0),d1
00018C26 0641 000B                  		addi.w	#$B,d1
00018C2A 7400                       		moveq	#0,d2
00018C2C 1428 0016                  		move.b	sto_height(a0),d2
00018C30 3602                       		move.w	d2,d3
00018C32 5243                       		addq.w	#1,d3
00018C34 6100 8D28                  		bsr.w	SolidObject
00018C38                            
00018C38                            	@chkdel:
00018C54 4EF9 0000 F426             		jmp	(DisplaySprite).l
00018C5A                            
00018C5A                            	@chkgone:
00018C5A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018C60 6600                       		bne.s	@delete
00018C62 4238 F7CB                  		clr.b	(v_obj6B).w
00018C66 45F8 FC00                  		lea	(v_objstate).w,a2
00018C6A 7000                       		moveq	#0,d0
00018C6C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018C70 6700                       		beq.s	@delete
00018C72 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018C78                            
00018C78                            	@delete:
00018C78 4EF9 0000 F466             		jmp	(DeleteObject).l
00018C7E                            ; ===========================================================================
00018C7E 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018C82 0000 0000                  		dc.w @type02-@index, @type03-@index
00018C86 0000 0000                  		dc.w @type04-@index, @type05-@index
00018C8A                            ; ===========================================================================
00018C8A                            
00018C8A                            @type00:
00018C8A 4E75                       		rts
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            @type01:
00018C8C 4A28 0038                  		tst.b	sto_active(a0)
00018C90 6600                       		bne.s	@isactive01
00018C92 45F8 F7E0                  		lea	(f_switch).w,a2
00018C96 7000                       		moveq	#0,d0
00018C98 1028 003E                  		move.b	$3E(a0),d0
00018C9C 0832 0000 0000             		btst	#0,(a2,d0.w)
00018CA2 6700                       		beq.s	@loc_15DC2
00018CA4 117C 0001 0038             		move.b	#1,sto_active(a0)
00018CAA                            
00018CAA                            	@isactive01:
00018CAA 3028 003C                  		move.w	$3C(a0),d0
00018CAE B068 003A                  		cmp.w	$3A(a0),d0
00018CB2 6700                       		beq.s	@loc_15DE0
00018CB4 5468 003A                  		addq.w	#2,$3A(a0)
00018CB8                            
00018CB8                            	@loc_15DC2:
00018CB8 3028 003A                  		move.w	$3A(a0),d0
00018CBC 0828 0000 0022             		btst	#0,obStatus(a0)
00018CC2 6700                       		beq.s	@noflip01
00018CC4 4440                       		neg.w	d0
00018CC6 0640 0080                  		addi.w	#$80,d0
00018CCA                            
00018CCA                            	@noflip01:
00018CCA 3228 0034                  		move.w	sto_origX(a0),d1
00018CCE 9240                       		sub.w	d0,d1
00018CD0 3141 0008                  		move.w	d1,obX(a0)
00018CD4 4E75                       		rts	
00018CD6                            ; ===========================================================================
00018CD6                            
00018CD6                            @loc_15DE0:
00018CD6 5228 0028                  		addq.b	#1,obSubtype(a0)
00018CDA 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018CE0 4228 0038                  		clr.b	sto_active(a0)
00018CE4 45F8 FC00                  		lea	(v_objstate).w,a2
00018CE8 7000                       		moveq	#0,d0
00018CEA 1028 0023                  		move.b	obRespawnNo(a0),d0
00018CEE 67C8                       		beq.s	@loc_15DC2
00018CF0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018CF6 60C0                       		bra.s	@loc_15DC2
00018CF8                            ; ===========================================================================
00018CF8                            
00018CF8                            @type02:
00018CF8 4A28 0038                  		tst.b	sto_active(a0)
00018CFC 6600                       		bne.s	@isactive02
00018CFE 5368 0036                  		subq.w	#1,$36(a0)
00018D02 6600                       		bne.s	@loc_15E1E
00018D04 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D0A                            
00018D0A                            	@isactive02:
00018D0A 4A68 003A                  		tst.w	$3A(a0)
00018D0E 6700                       		beq.s	@loc_15E3C
00018D10 5568 003A                  		subq.w	#2,$3A(a0)
00018D14                            
00018D14                            	@loc_15E1E:
00018D14 3028 003A                  		move.w	$3A(a0),d0
00018D18 0828 0000 0022             		btst	#0,obStatus(a0)
00018D1E 6700                       		beq.s	@noflip02
00018D20 4440                       		neg.w	d0
00018D22 0640 0080                  		addi.w	#$80,d0
00018D26                            
00018D26                            	@noflip02:
00018D26 3228 0034                  		move.w	sto_origX(a0),d1
00018D2A 9240                       		sub.w	d0,d1
00018D2C 3141 0008                  		move.w	d1,obX(a0)
00018D30 4E75                       		rts	
00018D32                            ; ===========================================================================
00018D32                            
00018D32                            @loc_15E3C:
00018D32 5328 0028                  		subq.b	#1,obSubtype(a0)
00018D36 4228 0038                  		clr.b	sto_active(a0)
00018D3A 45F8 FC00                  		lea	(v_objstate).w,a2
00018D3E 7000                       		moveq	#0,d0
00018D40 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D44 67CE                       		beq.s	@loc_15E1E
00018D46 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018D4C 60C6                       		bra.s	@loc_15E1E
00018D4E                            ; ===========================================================================
00018D4E                            
00018D4E                            @type03:
00018D4E 4A28 0038                  		tst.b	sto_active(a0)
00018D52 6600                       		bne.s	@isactive03
00018D54 4A68 003A                  		tst.w	$3A(a0)
00018D58 6700                       		beq.s	@loc_15E6A
00018D5A 5368 003A                  		subq.w	#1,$3A(a0)
00018D5E 6000                       		bra.s	@loc_15E8E
00018D60                            ; ===========================================================================
00018D60                            
00018D60                            @loc_15E6A:
00018D60 5368 0036                  		subq.w	#1,$36(a0)
00018D64 6A00                       		bpl.s	@loc_15E8E
00018D66 317C 003C 0036             		move.w	#$3C,$36(a0)
00018D6C 117C 0001 0038             		move.b	#1,sto_active(a0)
00018D72                            
00018D72                            @isactive03:
00018D72 5068 003A                  		addq.w	#8,$3A(a0)
00018D76 3028 003A                  		move.w	$3A(a0),d0
00018D7A B068 003C                  		cmp.w	$3C(a0),d0
00018D7E 6600                       		bne.s	@loc_15E8E
00018D80 4228 0038                  		clr.b	sto_active(a0)
00018D84                            
00018D84                            @loc_15E8E:
00018D84 3028 003A                  		move.w	$3A(a0),d0
00018D88 0828 0000 0022             		btst	#0,obStatus(a0)
00018D8E 6700                       		beq.s	@noflip03
00018D90 4440                       		neg.w	d0
00018D92 0640 0038                  		addi.w	#$38,d0
00018D96                            
00018D96                            	@noflip03:
00018D96 3228 0030                  		move.w	sto_origY(a0),d1
00018D9A D240                       		add.w	d0,d1
00018D9C 3141 000C                  		move.w	d1,obY(a0)
00018DA0 4E75                       		rts	
00018DA2                            ; ===========================================================================
00018DA2                            
00018DA2                            @type04:
00018DA2 4A28 0038                  		tst.b	sto_active(a0)
00018DA6 6600                       		bne.s	@isactive04
00018DA8 4A68 003A                  		tst.w	$3A(a0)
00018DAC 6700                       		beq.s	@loc_15EBE
00018DAE 5168 003A                  		subq.w	#8,$3A(a0)
00018DB2 6000                       		bra.s	@loc_15EF0
00018DB4                            ; ===========================================================================
00018DB4                            
00018DB4                            @loc_15EBE:
00018DB4 5368 0036                  		subq.w	#1,$36(a0)
00018DB8 6A00                       		bpl.s	@loc_15EF0
00018DBA 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DC0 117C 0001 0038             		move.b	#1,sto_active(a0)
00018DC6                            
00018DC6                            @isactive04:
00018DC6 3028 003A                  		move.w	$3A(a0),d0
00018DCA B068 003C                  		cmp.w	$3C(a0),d0
00018DCE 6700                       		beq.s	@loc_15EE0
00018DD0 5068 003A                  		addq.w	#8,$3A(a0)
00018DD4 6000                       		bra.s	@loc_15EF0
00018DD6                            ; ===========================================================================
00018DD6                            
00018DD6                            @loc_15EE0:
00018DD6 5368 0036                  		subq.w	#1,$36(a0)
00018DDA 6A00                       		bpl.s	@loc_15EF0
00018DDC 317C 003C 0036             		move.w	#$3C,$36(a0)
00018DE2 4228 0038                  		clr.b	sto_active(a0)
00018DE6                            
00018DE6                            @loc_15EF0:
00018DE6 3028 003A                  		move.w	$3A(a0),d0
00018DEA 0828 0000 0022             		btst	#0,obStatus(a0)
00018DF0 6700                       		beq.s	@noflip04
00018DF2 4440                       		neg.w	d0
00018DF4 0640 0038                  		addi.w	#$38,d0
00018DF8                            
00018DF8                            	@noflip04:
00018DF8 3228 0030                  		move.w	sto_origY(a0),d1
00018DFC D240                       		add.w	d0,d1
00018DFE 3141 000C                  		move.w	d1,obY(a0)
00018E02 4E75                       		rts	
00018E04                            ; ===========================================================================
00018E04                            
00018E04                            @type05:
00018E04 4A28 0038                  		tst.b	sto_active(a0)
00018E08 6600                       		bne.s	@loc_15F3E
00018E0A 45F8 F7E0                  		lea	(f_switch).w,a2
00018E0E 7000                       		moveq	#0,d0
00018E10 1028 003E                  		move.b	$3E(a0),d0
00018E14 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E1A 6700                       		beq.s	@locret_15F5C
00018E1C 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E22 45F8 FC00                  		lea	(v_objstate).w,a2
00018E26 7000                       		moveq	#0,d0
00018E28 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E2C 6700                       		beq.s	@loc_15F3E
00018E2E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018E34                            
00018E34                            @loc_15F3E:
00018E34 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00018E3C 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
00018E44 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018E4A 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00018E50 6700                       		beq.s	@loc_15F5E
00018E52                            
00018E52                            @locret_15F5C:
00018E52 4E75                       		rts	
00018E54                            ; ===========================================================================
00018E54                            
00018E54                            @loc_15F5E:
00018E54 4228 0028                  		clr.b	obSubtype(a0)
00018E58 4228 0038                  		clr.b	sto_active(a0)
00018E5C 4E75                       		rts	
00018E5C 4E75                       		rts	
00018E5E                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00018E5E                            ; ---------------------------------------------------------------------------
00018E5E                            ; Sprite mappings - stomper and	platforms (SBZ)
00018E5E                            ; ---------------------------------------------------------------------------
00018E5E                            Map_Stomp_internal:
00018E5E 0000                       		dc.w @door-Map_Stomp_internal
00018E60 0000                       		dc.w @stomper-Map_Stomp_internal
00018E62 0000                       		dc.w @stomper-Map_Stomp_internal
00018E64 0000                       		dc.w @stomper-Map_Stomp_internal
00018E66 0000                       		dc.w @bigdoor-Map_Stomp_internal
00018E68 04                         @door:		dc.b 4
00018E69 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00018E6E F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00018E73 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00018E78 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00018E7D 08                         @stomper:	dc.b 8
00018E7E E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00018E83 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00018E88 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00018E8D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00018E92 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00018E97 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00018E9C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00018EA1 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00018EA6 0E                         @bigdoor:	dc.b $E
00018EA7 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00018EAC C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00018EB1 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00018EB6 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00018EBB C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00018EC0 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00018EC5 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00018ECA C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00018ECF E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00018ED4 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00018ED9 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00018EDE 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00018EE3 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00018EE8 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00018EEE 00                         		even
00018EEE 00                         		even
00018EEE                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
00018EEE                            ; ---------------------------------------------------------------------------
00018EEE                            ; Object 6C - vanishing	platforms (SBZ)
00018EEE                            ; ---------------------------------------------------------------------------
00018EEE                            
00018EEE                            VanishPlatform:
00018EEE 7000                       		moveq	#0,d0
00018EF0 1028 0024                  		move.b	obRoutine(a0),d0
00018EF4 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00018EF8 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00018EFC                            ; ===========================================================================
00018EFC 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00018EFE 0000                       		dc.w VanP_Vanish-VanP_Index
00018F00 0000                       		dc.w VanP_Appear-VanP_Index
00018F02 0000                       		dc.w loc_16068-VanP_Index
00018F04                            
00018F04 =00000030                  vanp_timer:	equ $30		; counter for time until event
00018F04 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00018F04                            ; ===========================================================================
00018F04                            
00018F04                            VanP_Main:	; Routine 0
00018F04 5C28 0024                  		addq.b	#6,obRoutine(a0)
00018F08 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00018F10 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00018F16 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00018F1C 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00018F1E 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
00018F24                            
00018F24                            	VanP_IsSYZ:	
00018F24 0028 0004 0001             		ori.b	#4,obRender(a0)
00018F2A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018F30 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018F36 7000                       		moveq	#0,d0
00018F38 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F3C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018F40 5240                       		addq.w	#1,d0		; add 1
00018F42 EF48                       		lsl.w	#7,d0		; multiply by $80
00018F44 3200                       		move.w	d0,d1
00018F46 5340                       		subq.w	#1,d0
00018F48 3140 0030                  		move.w	d0,vanp_timer(a0)
00018F4C 3140 0032                  		move.w	d0,vanp_timelen(a0)
00018F50 7000                       		moveq	#0,d0
00018F52 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00018F56 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00018F5A 0641 0080                  		addi.w	#$80,d1
00018F5E C0C1                       		mulu.w	d1,d0
00018F60 E088                       		lsr.l	#8,d0
00018F62 3140 0036                  		move.w	d0,$36(a0)
00018F66 5341                       		subq.w	#1,d1
00018F68 3141 0038                  		move.w	d1,$38(a0)
00018F6C                            
00018F6C                            loc_16068:	; Routine 6
00018F6C 3038 FE04                  		move.w	(v_framecount).w,d0
00018F70 9068 0036                  		sub.w	$36(a0),d0
00018F74 C068 0038                  		and.w	$38(a0),d0
00018F78 6600                       		bne.s	@animate
00018F7A 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00018F7E 6000                       		bra.s	VanP_Vanish
00018F80                            ; ===========================================================================
00018F80                            
00018F80                            @animate:
00018F80 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018F86 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00018F8C 6000 8538                  		bra.w	RememberState
00018F90                            ; ===========================================================================
00018F90                            
00018F90                            VanP_Vanish:	; Routine 2
00018F90                            VanP_Appear:	; Routine 4
00018F90 5368 0030                  		subq.w	#1,vanp_timer(a0)
00018F94 6A00                       		bpl.s	@wait
00018F96 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00018F9C 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00018FA0 6700                       		beq.s	@isvanishing	; if yes, branch
00018FA2 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00018FA8                            
00018FA8                            	@isvanishing:
00018FA8 0868 0000 001C             		bchg	#0,obAnim(a0)
00018FAE                            
00018FAE                            	@wait:
00018FAE 43F9 0000 0000             		lea	(Ani_Van).l,a1
00018FB4 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
00018FBA 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00018FC0 6600                       		bne.s	@notsolid	; if yes, branch
00018FC2 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00018FC8 6600                       		bne.s	@loc_160D6
00018FCA 7200                       		moveq	#0,d1
00018FCC 1228 0014                  		move.b	obActWid(a0),d1
00018FD0 4EB9 0000 8AE4             		jsr	(PlatformObject).l
00018FD6 6000 84EE                  		bra.w	RememberState
00018FDA                            ; ===========================================================================
00018FDA                            
00018FDA                            @loc_160D6:
00018FDA 7200                       		moveq	#0,d1
00018FDC 1228 0014                  		move.b	obActWid(a0),d1
00018FE0 4EB9 0000 8C58             		jsr	(ExitPlatform).l
00018FE6 3428 0008                  		move.w	obX(a0),d2
00018FEA 4EB9 0000 91C2             		jsr	(MvSonicOnPtfm2).l
00018FF0 6000 84D4                  		bra.w	RememberState
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            @notsolid:
00018FF4 0828 0003 0022             		btst	#3,obStatus(a0)
00018FFA 6700                       		beq.s	@display
00018FFC 43F8 D000                  		lea	(v_player).w,a1
00019000 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019006 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001900C 117C 0002 0024             		move.b	#2,obRoutine(a0)
00019012 4228 0025                  		clr.b	obSolid(a0)
00019016                            
00019016                            	@display:
00019016 6000 84AE                  		bra.w	RememberState
00019016 6000 84AE                  		bra.w	RememberState
0001901A                            		include	"_anim\SBZ Vanishing Platforms.asm"
0001901A                            ; ---------------------------------------------------------------------------
0001901A                            ; Animation script - vanishing platforms (SBZ)
0001901A                            ; ---------------------------------------------------------------------------
0001901A 0000                       Ani_Van:	dc.w @vanish-Ani_Van
0001901C 0000                       		dc.w @appear-Ani_Van
0001901E 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00019026 00                         		even
00019026 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
0001902E 00                         		even
0001902E 00                         		even
0001902E                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
0001902E                            ; ---------------------------------------------------------------------------
0001902E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001902E                            ; ---------------------------------------------------------------------------
0001902E                            Map_VanP_internal:
0001902E 0000                       		dc.w @whole-Map_VanP_internal
00019030 0000                       		dc.w @half-Map_VanP_internal
00019032 0000                       		dc.w @quarter-Map_VanP_internal
00019034 0000                       		dc.w @gone-Map_VanP_internal
00019036 01                         @whole:		dc.b 1
00019037 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001903C 01                         @half:		dc.b 1
0001903D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00019042 01                         @quarter:	dc.b 1
00019043 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00019048 00                         @gone:		dc.b 0
0001904A 00                         		even
0001904A 00                         		even
0001904A                            		include	"_incObj\6E Electrocuter.asm"
0001904A                            ; ---------------------------------------------------------------------------
0001904A                            ; Object 6E - electrocution orbs (SBZ)
0001904A                            ; ---------------------------------------------------------------------------
0001904A                            
0001904A                            Electro:
0001904A 7000                       		moveq	#0,d0
0001904C 1028 0024                  		move.b	obRoutine(a0),d0
00019050 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019054 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019058                            ; ===========================================================================
00019058 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
0001905A 0000                       		dc.w Elec_Shock-Elec_Index
0001905C                            
0001905C =00000034                  elec_freq:	equ $34		; frequency
0001905C                            ; ===========================================================================
0001905C                            
0001905C                            Elec_Main:	; Routine 0
0001905C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019060 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019068 317C 047E 0002             		move.w	#$47E,obGfx(a0)
0001906E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019074 117C 0028 0014             		move.b	#$28,obActWid(a0)
0001907A 7000                       		moveq	#0,d0
0001907C 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
00019080 E948                       		lsl.w	#4,d0		; multiply by $10
00019082 5340                       		subq.w	#1,d0
00019084 3140 0034                  		move.w	d0,elec_freq(a0)
00019088                            
00019088                            Elec_Shock:	; Routine 2
00019088 3038 FE04                  		move.w	(v_framecount).w,d0
0001908C C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00019090 6600                       		bne.s	@animate	; if not, branch
00019092                            
00019092 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019098 4A28 0001                  		tst.b	obRender(a0)
0001909C 6A00                       		bpl.s	@animate
000190A8                            
000190A8                            	@animate:
000190A8 43F9 0000 0000             		lea	(Ani_Elec).l,a1
000190AE 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000190B4 117C 0000 0020             		move.b	#0,obColType(a0)
000190BA 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
000190C0 6600                       		bne.s	@display	; if not, branch
000190C2 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000190C8                            
000190C8                            	@display:
000190C8 6000 83FC                  		bra.w	RememberState
000190C8 6000 83FC                  		bra.w	RememberState
000190CC                            		include	"_anim\Electrocuter.asm"
000190CC                            ; ---------------------------------------------------------------------------
000190CC                            ; Animation script - electrocution orbs (SBZ)
000190CC                            ; ---------------------------------------------------------------------------
000190CC 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000190CE 0000                       		dc.w byte_161D0-Ani_Elec
000190D0 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000190D4 00                         		even
000190D4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000190E4                            		even
000190E4                            		even
000190E4                            Map_Elec:	include	"_maps\Electrocuter.asm"
000190E4                            ; --------------------------------------------------------------------------------
000190E4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000190E4                            ; --------------------------------------------------------------------------------
000190E4                            
000190E4                            SME_KiF9w:	
000190E4 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000190E8 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000190EC 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000190F0 02                         SME_KiF9w_C:	dc.b 2	
000190F1 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000190F6 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000190FB 03                         SME_KiF9w_17:	dc.b 3	
000190FC F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019101 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019106 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001910B 05                         SME_KiF9w_27:	dc.b 5	
0001910C F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019111 F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019116 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001911B F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019120 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019125 04                         SME_KiF9w_41:	dc.b 4	
00019126 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
0001912B 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019130 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019135 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
0001913A 06                         SME_KiF9w_56:	dc.b 6	
0001913B F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
00019140 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019145 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
0001914A F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
0001914F F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019154 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019159 04                         SME_KiF9w_75:	dc.b 4	
0001915A F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
0001915F 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019164 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019169 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
0001916E                            		even
0001916E                            		even
0001916E                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
0001916E                            ; ---------------------------------------------------------------------------
0001916E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001916E                            ; ---------------------------------------------------------------------------
0001916E                            
0001916E                            SpinConvey:
0001916E 7000                       		moveq	#0,d0
00019170 1028 0024                  		move.b	obRoutine(a0),d0
00019174 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019178 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019198                            
00019198                            SpinC_Display:
00019198 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001919E                            ; ===========================================================================
0001919E                            
0001919E                            loc_1629A:
0001919E 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000191A4 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000191A6 0C40 FF80                  		cmpi.w	#-$80,d0
000191AA 64EC                       		bcc.s	SpinC_Display
000191AC                            
000191AC                            SpinC_Act1or2:
000191AC 1028 002F                  		move.b	$2F(a0),d0
000191B0 6A00                       		bpl.s	SpinC_Delete
000191B2 0240 007F                  		andi.w	#$7F,d0
000191B6 45F8 F7C1                  		lea	(v_obj63).w,a2
000191BA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000191C0                            
000191C0                            SpinC_Delete:
000191C0 4EF9 0000 F466             		jmp	(DeleteObject).l
000191C6                            ; ===========================================================================
000191C6 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000191C8 0000                       		dc.w loc_163D8-SpinC_Index
000191CA                            ; ===========================================================================
000191CA                            
000191CA                            SpinC_Main:	; Routine 0
000191CA 1028 0028                  		move.b	obSubtype(a0),d0
000191CE 6B00 0000                  		bmi.w	loc_16380
000191D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000191D6 217C 0001 8830 0004        		move.l	#Map_Spin,obMap(a0)
000191DE 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000191E4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000191EA 0028 0004 0001             		ori.b	#4,obRender(a0)
000191F0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000191F6 7000                       		moveq	#0,d0
000191F8 1028 0028                  		move.b	obSubtype(a0),d0
000191FC 3200                       		move.w	d0,d1
000191FE E648                       		lsr.w	#3,d0
00019200 0240 001E                  		andi.w	#$1E,d0
00019204 45FA 0000                  		lea	off_164A6(pc),a2
00019208 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001920C 315A 0038                  		move.w	(a2)+,$38(a0)
00019210 315A 0030                  		move.w	(a2)+,$30(a0)
00019214 214A 003C                  		move.l	a2,$3C(a0)
00019218 0241 000F                  		andi.w	#$F,d1
0001921C E549                       		lsl.w	#2,d1
0001921E 1141 0038                  		move.b	d1,$38(a0)
00019222 117C 0004 003A             		move.b	#4,$3A(a0)
00019228 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001922C 6700                       		beq.s	loc_16356
0001922E 117C 0001 003B             		move.b	#1,$3B(a0)
00019234 4428 003A                  		neg.b	$3A(a0)
00019238 7200                       		moveq	#0,d1
0001923A 1228 0038                  		move.b	$38(a0),d1
0001923E D228 003A                  		add.b	$3A(a0),d1
00019242 B228 0039                  		cmp.b	$39(a0),d1
00019246 6500                       		bcs.s	loc_16352
00019248 1001                       		move.b	d1,d0
0001924A 7200                       		moveq	#0,d1
0001924C 4A00                       		tst.b	d0
0001924E 6A00                       		bpl.s	loc_16352
00019250 1228 0039                  		move.b	$39(a0),d1
00019254 5901                       		subq.b	#4,d1
00019256                            
00019256                            loc_16352:
00019256 1141 0038                  		move.b	d1,$38(a0)
0001925A                            
0001925A                            loc_16356:
0001925A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00019260 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019266 4A41                       		tst.w	d1
00019268 6600                       		bne.s	loc_1636C
0001926A 117C 0001 001C             		move.b	#1,obAnim(a0)
00019270                            
00019270                            loc_1636C:
00019270 0C41 0008                  		cmpi.w	#8,d1
00019274 6600                       		bne.s	loc_16378
00019276 117C 0000 001C             		move.b	#0,obAnim(a0)
0001927C                            
0001927C                            loc_16378:
0001927C 6100 B2CE                  		bsr.w	LCon_ChangeDir
00019280 6000 0000                  		bra.w	loc_163D8
00019284                            ; ===========================================================================
00019284                            
00019284                            loc_16380:
00019284 1140 002F                  		move.b	d0,$2F(a0)
00019288 0240 007F                  		andi.w	#$7F,d0
0001928C 45F8 F7C1                  		lea	(v_obj63).w,a2
00019290 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019296 6700                       		beq.s	loc_1639A
00019298 4EF9 0000 F466             		jmp	(DeleteObject).l
0001929E                            ; ===========================================================================
0001929E                            
0001929E                            loc_1639A:
0001929E D040                       		add.w	d0,d0
000192A0 0240 001E                  		andi.w	#$1E,d0
000192A4 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000192A8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000192AE D4F2 0000                  		adda.w	(a2,d0.w),a2
000192B2 321A                       		move.w	(a2)+,d1
000192B4 2248                       		movea.l	a0,a1
000192B6 6000                       		bra.s	SpinC_LoadPform
000192B8                            ; ===========================================================================
000192B8                            
000192B8                            SpinC_Loop:
000192B8 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
000192BE 6600                       		bne.s	loc_163D0
000192C0                            
000192C0                            SpinC_LoadPform:
000192C0 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
000192C4 335A 0008                  		move.w	(a2)+,obX(a1)
000192C8 335A 000C                  		move.w	(a2)+,obY(a1)
000192CC 301A                       		move.w	(a2)+,d0
000192CE 1340 0028                  		move.b	d0,obSubtype(a1)
000192D2                            
000192D2                            loc_163D0:
000192D2 51C9 FFE4                  		dbf	d1,SpinC_Loop
000192D6                            
000192D6 588F                       		addq.l	#4,sp
000192D8 4E75                       		rts	
000192DA                            ; ===========================================================================
000192DA                            
000192DA                            loc_163D8:	; Routine 2
000192DA 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000192E0 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
000192E6 4A28 001A                  		tst.b	obFrame(a0)
000192EA 6600                       		bne.s	loc_16404
000192EC 3F28 0008                  		move.w	obX(a0),-(sp)
000192F0 6100 0000                  		bsr.w	loc_16424
000192F4 323C 001B                  		move.w	#$1B,d1
000192F8 343C 0007                  		move.w	#7,d2
000192FC 3602                       		move.w	d2,d3
000192FE 5243                       		addq.w	#1,d3
00019300 381F                       		move.w	(sp)+,d4
00019302 6000 865A                  		bra.w	SolidObject
00019306                            ; ===========================================================================
00019306                            
00019306                            loc_16404:
00019306 0828 0003 0022             		btst	#3,obStatus(a0)
0001930C 6700                       		beq.s	loc_16420
0001930E 43F8 D000                  		lea	(v_objspace).w,a1
00019312 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019318 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001931E 4228 0025                  		clr.b	obSolid(a0)
00019322                            
00019322                            loc_16420:
00019322 6000 0000                  		bra.w	loc_16424
00019326                            
00019326                            loc_16424:
00019326 3028 0008                  		move.w	obX(a0),d0
0001932A B068 0034                  		cmp.w	$34(a0),d0
0001932E 6600                       		bne.s	loc_16484
00019330 3028 000C                  		move.w	obY(a0),d0
00019334 B068 0036                  		cmp.w	$36(a0),d0
00019338 6600                       		bne.s	loc_16484
0001933A 7200                       		moveq	#0,d1
0001933C 1228 0038                  		move.b	$38(a0),d1
00019340 D228 003A                  		add.b	$3A(a0),d1
00019344 B228 0039                  		cmp.b	$39(a0),d1
00019348 6500                       		bcs.s	loc_16456
0001934A 1001                       		move.b	d1,d0
0001934C 7200                       		moveq	#0,d1
0001934E 4A00                       		tst.b	d0
00019350 6A00                       		bpl.s	loc_16456
00019352 1228 0039                  		move.b	$39(a0),d1
00019356 5901                       		subq.b	#4,d1
00019358                            
00019358                            loc_16456:
00019358 1141 0038                  		move.b	d1,$38(a0)
0001935C 2268 003C                  		movea.l	$3C(a0),a1
00019360 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019366 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001936C 4A41                       		tst.w	d1
0001936E 6600                       		bne.s	loc_16474
00019370 117C 0001 001C             		move.b	#1,obAnim(a0)
00019376                            
00019376                            loc_16474:
00019376 0C41 0008                  		cmpi.w	#8,d1
0001937A 6600                       		bne.s	loc_16480
0001937C 117C 0000 001C             		move.b	#0,obAnim(a0)
00019382                            
00019382                            loc_16480:
00019382 6100 B1C8                  		bsr.w	LCon_ChangeDir
00019386                            
00019386                            loc_16484:
00019386 4EF9 0000 F412             		jmp	(SpeedToPos).l
00019386 4EF9 0000 F412             		jmp	(SpeedToPos).l
0001938C                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
0001938C                            ; ---------------------------------------------------------------------------
0001938C                            ; Animation script - platform on conveyor belt (SBZ)
0001938C                            ; ---------------------------------------------------------------------------
0001938C 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001938E 0000                       		dc.w @still-Ani_SpinConvey
00019390 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001939D 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000193A4 00                         		even
000193A4 0F00 FF                    @still:		dc.b $F, 0, afEnd
000193A8 00                         		even
000193A8 00                         		even
000193A8                            
000193A8 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000193AE 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000193B4 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000193C8 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000193DC 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000193F0 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019404 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019418 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001942C                            ; ===========================================================================
0001942C                            
0001942C                            		include	"_incObj\70 Girder Block.asm"
0001942C                            ; ---------------------------------------------------------------------------
0001942C                            ; Object 70 - large girder block (SBZ)
0001942C                            ; ---------------------------------------------------------------------------
0001942C                            
0001942C                            Girder:
0001942C 7000                       		moveq	#0,d0
0001942E 1028 0024                  		move.b	obRoutine(a0),d0
00019432 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019436 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
0001943A                            ; ===========================================================================
0001943A 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
0001943C 0000                       		dc.w Gird_Action-Gird_Index
0001943E                            
0001943E =00000016                  gird_height:	equ $16
0001943E =00000032                  gird_origX:	equ $32		; original x-axis position
0001943E =00000030                  gird_origY:	equ $30		; original y-axis position
0001943E =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001943E =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001943E =0000003A                  gird_delay:	equ $3A		; delay for movement
0001943E                            ; ===========================================================================
0001943E                            
0001943E                            Gird_Main:	; Routine 0
0001943E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019442 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
0001944A 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00019450 0028 0004 0001             		ori.b	#4,obRender(a0)
00019456 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001945C 117C 0060 0014             		move.b	#$60,obActWid(a0)
00019462 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019468 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001946E 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019474 6100 0000                  		bsr.w	Gird_ChgMove
00019478                            
00019478                            Gird_Action:	; Routine 2
00019478 3F28 0008                  		move.w	obX(a0),-(sp)
0001947C 4A68 003A                  		tst.w	gird_delay(a0)
00019480 6700                       		beq.s	@beginmove
00019482 5368 003A                  		subq.w	#1,gird_delay(a0)
00019486 6600                       		bne.s	@solid
00019488                            
00019488                            	@beginmove:
00019488 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001948E 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00019492 6600                       		bne.s	@solid		; if time remains, branch
00019494 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00019498                            
00019498                            	@solid:
00019498 381F                       		move.w	(sp)+,d4
0001949A 4A28 0001                  		tst.b	obRender(a0)
0001949E 6A00                       		bpl.s	@chkdel
000194A0 7200                       		moveq	#0,d1
000194A2 1228 0014                  		move.b	obActWid(a0),d1
000194A6 0641 000B                  		addi.w	#$B,d1
000194AA 7400                       		moveq	#0,d2
000194AC 1428 0016                  		move.b	gird_height(a0),d2
000194B0 3602                       		move.w	d2,d3
000194B2 5243                       		addq.w	#1,d3
000194B4 6100 84A8                  		bsr.w	SolidObject
000194B8                            
000194B8                            	@chkdel:
000194D4 4EF9 0000 F426             		jmp	(DisplaySprite).l
000194DA                            
000194DA                            	@delete:
000194DA 4EF9 0000 F466             		jmp	(DeleteObject).l
000194E0                            ; ===========================================================================
000194E0                            
000194E0                            Gird_ChgMove:
000194E0 1028 0038                  		move.b	gird_set(a0),d0
000194E4 0240 0018                  		andi.w	#$18,d0
000194E8 43F9 0000 0000             		lea	(@settings).l,a1
000194EE 43F1 0000                  		lea	(a1,d0.w),a1
000194F2 3159 0010                  		move.w	(a1)+,obVelX(a0)
000194F6 3159 0012                  		move.w	(a1)+,obVelY(a0)
000194FA 3159 0034                  		move.w	(a1)+,gird_time(a0)
000194FE 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00019502 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019508 4E75                       		rts	
0001950A                            ; ===========================================================================
0001950A                            @settings:	;   x-speed, y-speed, duration
0001950A 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
00019512 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
0001951A FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
00019522 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019522 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001952A                            Map_Gird:	include	"_maps\Girder Block.asm"
0001952A                            ; ---------------------------------------------------------------------------
0001952A                            ; Sprite mappings - large girder block (SBZ)
0001952A                            ; ---------------------------------------------------------------------------
0001952A                            Map_Gird_internal:
0001952A 0000                       		dc.w @girder-Map_Gird_internal
0001952C 0C                         @girder:	dc.b $C
0001952D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00019532 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019537 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001953C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00019541 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019546 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001954B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00019550 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019555 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001955A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001955F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019564 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001956A 00                         		even
0001956A 00                         		even
0001956A                            		include	"_incObj\72 Teleporter.asm"
0001956A                            ; ---------------------------------------------------------------------------
0001956A                            ; Object 72 - teleporter (SBZ)
0001956A                            ; ---------------------------------------------------------------------------
0001956A                            
0001956A                            Teleport:
0001956A 7000                       		moveq	#0,d0
0001956C 1028 0024                  		move.b	obRoutine(a0),d0
00019570 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019574 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019594 4E75                       		rts	
00019596                            
00019596                            	@delete:
00019596 4EF9 0000 F466             		jmp	(DeleteObject).l
0001959C                            ; ===========================================================================
0001959C 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001959E 0000                       		dc.w loc_166C8-Tele_Index
000195A0 0000                       		dc.w loc_1675E-Tele_Index
000195A2 0000                       		dc.w loc_16798-Tele_Index
000195A4                            ; ===========================================================================
000195A4                            
000195A4                            Tele_Main:	; Routine 0
000195A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000195A8 1028 0028                  		move.b	obSubtype(a0),d0
000195AC D040                       		add.w	d0,d0
000195AE 0240 001E                  		andi.w	#$1E,d0
000195B2 45FA 0000                  		lea	Tele_Data(pc),a2
000195B6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000195BA 315A 003A                  		move.w	(a2)+,$3A(a0)
000195BE 214A 003C                  		move.l	a2,$3C(a0)
000195C2 315A 0036                  		move.w	(a2)+,$36(a0)
000195C6 315A 0038                  		move.w	(a2)+,$38(a0)
000195CA                            
000195CA                            loc_166C8:	; Routine 2
000195CA 43F8 D000                  		lea	(v_player).w,a1
000195CE 3029 0008                  		move.w	obX(a1),d0
000195D2 9068 0008                  		sub.w	obX(a0),d0
000195D6 0828 0000 0022             		btst	#0,obStatus(a0)
000195DC 6700                       		beq.s	loc_166E0
000195DE 0640 000F                  		addi.w	#$F,d0
000195E2                            
000195E2                            loc_166E0:
000195E2 0C40 0010                  		cmpi.w	#$10,d0
000195E6 6400                       		bcc.s	locret_1675C
000195E8 3229 000C                  		move.w	obY(a1),d1
000195EC 9268 000C                  		sub.w	obY(a0),d1
000195F0 0641 0020                  		addi.w	#$20,d1
000195F4 0C41 0040                  		cmpi.w	#$40,d1
000195F8 6400                       		bcc.s	locret_1675C
000195FA 4A38 F7C8                  		tst.b	(f_lockmulti).w
000195FE 6600                       		bne.s	locret_1675C
00019600 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00019606 6600                       		bne.s	loc_1670E
00019608 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001960E 6500                       		bcs.s	locret_1675C
00019610                            
00019610                            loc_1670E:
00019610 5428 0024                  		addq.b	#2,obRoutine(a0)
00019614 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
0001961A 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
00019620 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019626 337C 0000 0010             		move.w	#0,obVelX(a1)
0001962C 337C 0000 0012             		move.w	#0,obVelY(a1)
00019632 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019638 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001963E 08E9 0001 0022             		bset	#1,obStatus(a1)
00019644 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001964A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019650 4228 0032                  		clr.b	$32(a0)
0001965E                            
0001965E                            locret_1675C:
0001965E 4E75                       		rts	
00019660                            ; ===========================================================================
00019660                            
00019660                            loc_1675E:	; Routine 4
00019660 43F8 D000                  		lea	(v_player).w,a1
00019664 1028 0032                  		move.b	$32(a0),d0
00019668 5428 0032                  		addq.b	#2,$32(a0)
0001966C 4EB9 0000 3B42             		jsr	(CalcSine).l
00019672 EA40                       		asr.w	#5,d0
00019674 3428 000C                  		move.w	obY(a0),d2
00019678 9440                       		sub.w	d0,d2
0001967A 3342 000C                  		move.w	d2,obY(a1)
0001967E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019684 6600                       		bne.s	locret_16796
00019686 6100 0000                  		bsr.w	sub_1681C
0001968A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019698                            
00019698                            locret_16796:
00019698 4E75                       		rts	
0001969A                            ; ===========================================================================
0001969A                            
0001969A                            loc_16798:	; Routine 6
0001969A 588F                       		addq.l	#4,sp
0001969C 43F8 D000                  		lea	(v_player).w,a1
000196A0 5328 002E                  		subq.b	#1,$2E(a0)
000196A4 6A00                       		bpl.s	loc_167DA
000196A6 3368 0036 0008             		move.w	$36(a0),obX(a1)
000196AC 3368 0038 000C             		move.w	$38(a0),obY(a1)
000196B2 7200                       		moveq	#0,d1
000196B4 1228 003A                  		move.b	$3A(a0),d1
000196B8 5801                       		addq.b	#4,d1
000196BA B228 003B                  		cmp.b	$3B(a0),d1
000196BE 6500                       		bcs.s	loc_167C2
000196C0 7200                       		moveq	#0,d1
000196C2 6000                       		bra.s	loc_16800
000196C4                            ; ===========================================================================
000196C4                            
000196C4                            loc_167C2:
000196C4 1141 003A                  		move.b	d1,$3A(a0)
000196C8 2468 003C                  		movea.l	$3C(a0),a2
000196CC 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000196D2 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000196D8 6000 0000                  		bra.w	sub_1681C
000196DC                            ; ===========================================================================
000196DC                            
000196DC                            loc_167DA:
000196DC 2429 0008                  		move.l	obX(a1),d2
000196E0 2629 000C                  		move.l	obY(a1),d3
000196E4 3029 0010                  		move.w	obVelX(a1),d0
000196E8 48C0                       		ext.l	d0
000196EA E180                       		asl.l	#8,d0
000196EC D480                       		add.l	d0,d2
000196EE 3029 0012                  		move.w	obVelY(a1),d0
000196F2 48C0                       		ext.l	d0
000196F4 E180                       		asl.l	#8,d0
000196F6 D680                       		add.l	d0,d3
000196F8 2342 0008                  		move.l	d2,obX(a1)
000196FC 2343 000C                  		move.l	d3,obY(a1)
00019700 4E75                       		rts	
00019702                            ; ===========================================================================
00019702                            
00019702                            loc_16800:
00019702 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00019708 4228 0024                  		clr.b	obRoutine(a0)
0001970C 4238 F7C8                  		clr.b	(f_lockmulti).w
00019710 337C 0000 0010             		move.w	#0,obVelX(a1)
00019716 337C 0200 0012             		move.w	#$200,obVelY(a1)
0001971C 4E75                       		rts	
0001971E                            
0001971E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001971E                            
0001971E                            
0001971E                            sub_1681C:
0001971E 7000                       		moveq	#0,d0
00019720 343C 1000                  		move.w	#$1000,d2
00019724 3028 0036                  		move.w	$36(a0),d0
00019728 9069 0008                  		sub.w	obX(a1),d0
0001972C 6C00                       		bge.s	loc_16830
0001972E 4440                       		neg.w	d0
00019730 4442                       		neg.w	d2
00019732                            
00019732                            loc_16830:
00019732 7200                       		moveq	#0,d1
00019734 363C 1000                  		move.w	#$1000,d3
00019738 3228 0038                  		move.w	$38(a0),d1
0001973C 9269 000C                  		sub.w	obY(a1),d1
00019740 6C00                       		bge.s	loc_16844
00019742 4441                       		neg.w	d1
00019744 4443                       		neg.w	d3
00019746                            
00019746                            loc_16844:
00019746 B240                       		cmp.w	d0,d1
00019748 6500                       		bcs.s	loc_1687A
0001974A 7200                       		moveq	#0,d1
0001974C 3228 0038                  		move.w	$38(a0),d1
00019750 9269 000C                  		sub.w	obY(a1),d1
00019754 4841                       		swap	d1
00019756 83C3                       		divs.w	d3,d1
00019758 7000                       		moveq	#0,d0
0001975A 3028 0036                  		move.w	$36(a0),d0
0001975E 9069 0008                  		sub.w	obX(a1),d0
00019762 6700                       		beq.s	loc_16866
00019764 4840                       		swap	d0
00019766 81C1                       		divs.w	d1,d0
00019768                            
00019768                            loc_16866:
00019768 3340 0010                  		move.w	d0,obVelX(a1)
0001976C 3343 0012                  		move.w	d3,obVelY(a1)
00019770 4A41                       		tst.w	d1
00019772 6A00                       		bpl.s	loc_16874
00019774 4441                       		neg.w	d1
00019776                            
00019776                            loc_16874:
00019776 3141 002E                  		move.w	d1,$2E(a0)
0001977A 4E75                       		rts	
0001977C                            ; ===========================================================================
0001977C                            
0001977C                            loc_1687A:
0001977C 7000                       		moveq	#0,d0
0001977E 3028 0036                  		move.w	$36(a0),d0
00019782 9069 0008                  		sub.w	obX(a1),d0
00019786 4840                       		swap	d0
00019788 81C2                       		divs.w	d2,d0
0001978A 7200                       		moveq	#0,d1
0001978C 3228 0038                  		move.w	$38(a0),d1
00019790 9269 000C                  		sub.w	obY(a1),d1
00019794 6700                       		beq.s	loc_16898
00019796 4841                       		swap	d1
00019798 83C0                       		divs.w	d0,d1
0001979A                            
0001979A                            loc_16898:
0001979A 3341 0012                  		move.w	d1,obVelY(a1)
0001979E 3342 0010                  		move.w	d2,obVelX(a1)
000197A2 4A40                       		tst.w	d0
000197A4 6A00                       		bpl.s	loc_168A6
000197A6 4440                       		neg.w	d0
000197A8                            
000197A8                            loc_168A6:
000197A8 3140 002E                  		move.w	d0,$2E(a0)
000197AC 4E75                       		rts	
000197AE                            ; End of function sub_1681C
000197AE                            
000197AE                            ; ===========================================================================
000197AE 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
000197B4 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
000197BA 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
000197BE 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
000197C4 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000197CA 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000197D0 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000197D6 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000197DC 0884 0298 0894             		dc.w $884, $298, $894
000197E2 0270 0894 0190             		dc.w $270, $894, $190
000197E8 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000197EE 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000197F4 1184 0498 1158             		dc.w $1184, $498, $1158
000197FA 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019800 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019806 04E8 0F94 0590             		dc.w $4E8, $F94, $590
0001980C 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019812 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019818 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001981E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019824 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001982A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019830 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019830 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019836                            
00019836                            		include	"_incObj\78 Caterkiller.asm"
00019836                            ; ---------------------------------------------------------------------------
00019836                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019836                            ; ---------------------------------------------------------------------------
00019836                            
00019836                            Caterkiller:
00019836 7000                       		moveq	#0,d0
00019838 1028 0024                  		move.b	obRoutine(a0),d0
0001983C 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019840 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019844                            ; ===========================================================================
00019844 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019846 0000                       		dc.w Cat_Head-Cat_Index
00019848 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001984A 0000                       		dc.w Cat_BodySeg2-Cat_Index
0001984C 0000                       		dc.w Cat_BodySeg1-Cat_Index
0001984E 0000                       		dc.w Cat_Delete-Cat_Index
00019850 0000                       		dc.w loc_16CC0-Cat_Index
00019852                            
00019852 =0000003C                  cat_parent:	equ $3C		; address of parent object
00019852                            ; ===========================================================================
00019852                            
00019852                            locret_16950:
00019852 4E75                       		rts	
00019854                            ; ===========================================================================
00019854                            
00019854                            Cat_Main:	; Routine 0
00019854 117C 0007 0016             		move.b	#7,obHeight(a0)
0001985A 117C 0008 0017             		move.b	#8,obWidth(a0)
00019860 4EB9 0000 F3DA             		jsr	(ObjectFall).l
00019866 4EB9 0001 7D0E             		jsr	(ObjFloorDist).l
0001986C 4A41                       		tst.w	d1
0001986E 6AE2                       		bpl.s	locret_16950
00019870 D368 000C                  		add.w	d1,obY(a0)
00019874 4268 0012                  		clr.w	obVelY(a0)
00019878 5428 0024                  		addq.b	#2,obRoutine(a0)
0001987C 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019884 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
0001988A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019890 6700                       		beq.s	@isscrapbrain
00019892 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019898                            
00019898                            	@isscrapbrain:
00019898 0228 0003 0001             		andi.b	#3,obRender(a0)
0001989E 0028 0004 0001             		ori.b	#4,obRender(a0)
000198A4 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
000198AA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000198B0 117C 0008 0014             		move.b	#8,obActWid(a0)
000198B6 117C 000B 0020             		move.b	#$B,obColType(a0)
000198BC 3428 0008                  		move.w	obX(a0),d2
000198C0 7A0C                       		moveq	#$C,d5
000198C2 0828 0000 0022             		btst	#0,obStatus(a0)
000198C8 6700                       		beq.s	@noflip
000198CA 4445                       		neg.w	d5
000198CC                            
000198CC                            	@noflip:
000198CC 1C3C 0004                  		move.b	#4,d6
000198D0 7600                       		moveq	#0,d3
000198D2 7804                       		moveq	#4,d4
000198D4 2448                       		movea.l	a0,a2
000198D6 7202                       		moveq	#2,d1
000198D8                            
000198D8                            Cat_Loop:
000198D8 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
000198DE 6600 0000                  			bne.w	Cat_ChkGone
000198E2 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
000198E6 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
000198EA 5406                       		addq.b	#2,d6		; alternate between the two
000198EC 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000198F2 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000198F8 337C 0280 0018             		move.w	#$280,obPriority(a1)
000198FE 137C 0008 0014             		move.b	#8,obActWid(a1)
00019904 137C 00CB 0020             		move.b	#$CB,obColType(a1)
0001990A D445                       		add.w	d5,d2
0001990C 3342 0008                  		move.w	d2,obX(a1)
00019910 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019916 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001991C 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019922 137C 0008 001A             		move.b	#8,obFrame(a1)
00019928 234A 003C                  		move.l	a2,cat_parent(a1)
0001992C 1344 003C                  		move.b	d4,cat_parent(a1)
00019930 5804                       		addq.b	#4,d4
00019932 2449                       		movea.l	a1,a2
00019934                            
00019934                            	@fail:
00019934 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019938                            
00019938 117C 0007 002A             		move.b	#7,$2A(a0)
0001993E 4228 003C                  		clr.b	cat_parent(a0)
00019942                            
00019942                            Cat_Head:	; Routine 2
00019942 4A28 0022                  		tst.b	obStatus(a0)
00019946 6B00 0000                  		bmi.w	loc_16C96
0001994A 7000                       		moveq	#0,d0
0001994C 1028 0025                  		move.b	ob2ndRout(a0),d0
00019950 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019954 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019958 1228 002B                  		move.b	$2B(a0),d1
0001995C 6A00                       		bpl.s	@display
0001995E 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019964 1028 0026                  		move.b	obAngle(a0),d0
00019968 0240 007F                  		andi.w	#$7F,d0
0001996C 5828 0026                  		addq.b	#4,obAngle(a0)
00019970 1031 0000                  		move.b	(a1,d0.w),d0
00019974 6A00                       		bpl.s	@animate
00019976 08A8 0007 002B             		bclr	#7,$2B(a0)
0001997C 6000                       		bra.s	@display
0001997E                            
0001997E                            	@animate:
0001997E 0201 0010                  		andi.b	#$10,d1
00019982 D001                       		add.b	d1,d0
00019984 1140 001A                  		move.b	d0,obFrame(a0)
00019988                            
00019988                            	@display:
000199A6 4EF9 0000 F426             		jmp	(DisplaySprite).l
000199AC                            
000199AC                            	Cat_ChkGone:
000199AC 45F8 FC00                  		lea	(v_objstate).w,a2
000199B0 7000                       		moveq	#0,d0
000199B2 1028 0023                  		move.b	obRespawnNo(a0),d0
000199B6 6700                       		beq.s	@delete
000199B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000199BE                            
000199BE                            	@delete:
000199BE 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
000199C4 4E75                       		rts	
000199C6                            ; ===========================================================================
000199C6                            
000199C6                            Cat_Delete:	; Routine $A
000199C6 4EF9 0000 F466             		jmp	(DeleteObject).l
000199CC                            ; ===========================================================================
000199CC 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
000199CE 0000                       		dc.w loc_16B02-Cat_Index2
000199D0                            ; ===========================================================================
000199D0                            
000199D0                            @wait:
000199D0 5328 002A                  		subq.b	#1,$2A(a0)
000199D4 6B00                       		bmi.s	@move
000199D6 4E75                       		rts	
000199D8                            ; ===========================================================================
000199D8                            
000199D8                            @move:
000199D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000199DC 117C 0010 002A             		move.b	#$10,$2A(a0)
000199E2 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
000199E8 317C 0040 001C             		move.w	#$40,obAnim(a0)
000199EE 0868 0004 002B             		bchg	#4,$2B(a0)
000199F4 6600                       		bne.s	loc_16AFC
000199F6 4268 0010                  		clr.w	obVelX(a0)
000199FA 4468 001C                  		neg.w	obAnim(a0)
000199FE                            
000199FE                            loc_16AFC:
000199FE 08E8 0007 002B             		bset	#7,$2B(a0)
00019A04                            
00019A04                            loc_16B02:
00019A04 5328 002A                  		subq.b	#1,$2A(a0)
00019A08 6B00                       		bmi.s	@loc_16B5E
00019A0A 4A68 0010                  			tst.w	obVelX(a0)
00019A0E 6700                       			beq.s	@notmoving
00019A10 2428 0008                  			move.l	obX(a0),d2
00019A14 2602                       			move.l	d2,d3
00019A16 3028 0010                  		move.w	obVelX(a0),d0
00019A1A 0828 0000 0022             		btst	#0,obStatus(a0)
00019A20 6700                       		beq.s	@noflip
00019A22 4440                       		neg.w	d0
00019A24                            
00019A24                            	@noflip:
00019A24 48C0                       		ext.l	d0
00019A26 E180                       		asl.l	#8,d0
00019A28 D480                       		add.l	d0,d2
00019A2A 2142 0008                  		move.l	d2,obX(a0)
00019A2E 4843                       			swap	d3
00019A30 B668 0008                  			cmp.w	obX(a0),d3
00019A34 6700                       			beq.s	@notmoving
00019A36 4EB9 0001 7D0E             			jsr	(ObjFloorDist).l
00019A3C 0C41 FFF8                  			cmpi.w	#-8,d1
00019A40 6D00                       			blt.s	@loc_16B70
00019A42 0C41 000C                  			cmpi.w	#$C,d1
00019A46 6C00                       			bge.s	@loc_16B70
00019A48 D368 000C                  			add.w	d1,obY(a0)
00019A4C 7000                       		moveq	#0,d0
00019A4E 1028 003C                  		move.b	cat_parent(a0),d0
00019A52 5228 003C                  		addq.b	#1,cat_parent(a0)
00019A56 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019A5C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019A60                            
00019A60                            	@notmoving:
00019A60 4E75                       		rts	
00019A62                            ; ===========================================================================
00019A62                            
00019A62                            @loc_16B5E:
00019A62 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019A66 117C 0007 002A             		move.b	#7,$2A(a0)
00019A6C 4268 0010                  			clr.w	obVelX(a0)
00019A70 4268 001C                  			clr.w	obAnim(a0)
00019A74 4E75                       		rts	
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            @loc_16B70:
00019A76 7000                       			moveq	#0,d0
00019A78 1028 003C                  			move.b	cat_parent(a0),d0
00019A7C 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019A82 4468 000A                  			neg.w	obX+2(a0)
00019A86 6700                       			beq.s	@loc_1730A
00019A88 0828 0000 0022             			btst	#0,obStatus(a0)
00019A8E 6700                       			beq.s	@loc_1730A
00019A90 5368 0008                  			subq.w	#1,obX(a0)
00019A94 5228 003C                  			addq.b	#1,cat_parent(a0)
00019A98 7000                       			moveq	#0,d0
00019A9A 1028 003C                  			move.b	cat_parent(a0),d0
00019A9E 4230 002C                  			clr.b	$2C(a0,d0)
00019AA2                            	@loc_1730A:
00019AA2 0868 0000 0022             			bchg	#0,obStatus(a0)
00019AA8 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019AAE 5228 003C                  		addq.b	#1,cat_parent(a0)
00019AB2 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019AB8 4E75                       		rts	
00019ABA                            ; ===========================================================================
00019ABA                            
00019ABA                            Cat_BodySeg2:	; Routine 6
00019ABA 2268 003C                  		movea.l	cat_parent(a0),a1
00019ABE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019AC4 6A00                       		bpl.s	Cat_BodySeg1
00019AC6 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019ACC 1028 0026                  		move.b	obAngle(a0),d0
00019AD0 0240 007F                  		andi.w	#$7F,d0
00019AD4 5828 0026                  		addq.b	#4,obAngle(a0)
00019AD8 4A31 0004                  		tst.b	4(a1,d0.w)
00019ADC 6A00                       		bpl.s	Cat_AniBody
00019ADE 5828 0026                  		addq.b	#4,obAngle(a0)
00019AE2                            
00019AE2                            Cat_AniBody:
00019AE2 1031 0000                  		move.b	(a1,d0.w),d0
00019AE6 5000                       		addq.b	#8,d0
00019AE8 1140 001A                  		move.b	d0,obFrame(a0)
00019AEC                            
00019AEC                            Cat_BodySeg1:	; Routine 4, 8
00019AEC 2268 003C                  		movea.l	cat_parent(a0),a1
00019AF0 4A28 0022                  		tst.b	obStatus(a0)
00019AF4 6B00 0000                  		bmi.w	loc_16C90
00019AF8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019AFE 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019B04 6700 0000                  		beq.w	loc_16C64
00019B08 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019B0E 3029 0010                  		move.w	obVelX(a1),d0
00019B12 D068 001C                  			add.w	obAnim(a0),d0
00019B16 3140 0010                  		move.w	d0,obVelX(a0)
00019B1A 2428 0008                  		move.l	obX(a0),d2
00019B1E 2602                       		move.l	d2,d3
00019B20 3028 0010                  		move.w	obVelX(a0),d0
00019B24 0828 0000 0022             		btst	#0,obStatus(a0)
00019B2A 6700                       		beq.s	loc_16C0C
00019B2C 4440                       		neg.w	d0
00019B2E                            
00019B2E                            loc_16C0C:
00019B2E 48C0                       		ext.l	d0
00019B30 E180                       		asl.l	#8,d0
00019B32 D480                       		add.l	d0,d2
00019B34 2142 0008                  		move.l	d2,obX(a0)
00019B38 4843                       		swap	d3
00019B3A B668 0008                  		cmp.w	obX(a0),d3
00019B3E 6700                       		beq.s	loc_16C64
00019B40 7000                       		moveq	#0,d0
00019B42 1028 003C                  		move.b	cat_parent(a0),d0
00019B46 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019B4A 0C01 0080                  		cmpi.b	#$80,d1
00019B4E 6600                       		bne.s	loc_16C50
00019B50 1181 002C                  			move.b	d1,$2C(a0,d0)
00019B54 4468 000A                  			neg.w	obX+2(a0)
00019B58 6700                       			beq.s	locj_173E4
00019B5A 0828 0000 0022             			btst	#0,obStatus(a0)
00019B60 6700                       			beq.s	locj_173E4
00019B62 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019B68 6600                       			bne.s	locj_173E4
00019B6A 5368 0008                  			subq.w	#1,obX(a0)
00019B6E 5228 003C                  			addq.b	#1,cat_parent(a0)
00019B72 7000                       			moveq	#0,d0
00019B74 1028 003C                  			move.b	cat_parent(a0),d0
00019B78 4230 002C                  			clr.b	$2C(a0,d0)
00019B7C                            	locj_173E4:
00019B7C 0868 0000 0022             		bchg	#0,obStatus(a0)
00019B82 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019B88 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B8C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019B92 6000                       		bra.s	loc_16C64
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            loc_16C50:
00019B94 4881                       		ext.w	d1
00019B96 D368 000C                  		add.w	d1,obY(a0)
00019B9A 5228 003C                  		addq.b	#1,cat_parent(a0)
00019B9E 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019BA4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019BA8                            
00019BA8                            loc_16C64:
00019BA8 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019BAE 6700                       		beq.s	loc_16C90
00019BB0 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019BB4 6700                       		beq.s	loc_16C7C
00019BB6 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019BBC 6600                       		bne.s	loc_16C82
00019BBE                            
00019BBE                            loc_16C7C:
00019BBE 4229 0020                  		clr.b    $20(a1)
00019BC2 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019BC8                            
00019BC8                            loc_16C82:
00019BC8 4EF9 0000 F426             		jmp	(DisplaySprite).l
00019BCE                            
00019BCE                            ; ===========================================================================
00019BCE FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019BD6                            ; ===========================================================================
00019BD6                            
00019BD6                            loc_16C90:
00019BD6 08E9 0007 0022             		bset	#7,obStatus(a1)
00019BDC                            
00019BDC                            loc_16C96:
00019BDC 7000                       		moveq	#0,d0
00019BDE 1028 0024                  		move.b	obRoutine(a0),d0
00019BE2 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019BE6 0828 0000 0022             		btst	#0,obStatus(a0)
00019BEC 6700                       		beq.s	loc_16CAA
00019BEE 4440                       		neg.w	d0
00019BF0                            
00019BF0                            loc_16CAA:
00019BF0 3140 0010                  		move.w	d0,obVelX(a0)
00019BF4 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019BFA 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019C00 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019C06                            
00019C06                            loc_16CC0:	; Routine $C
00019C06 4EB9 0000 F3DA             		jsr	(ObjectFall).l
00019C0C 4A68 0012                  		tst.w	obVelY(a0)
00019C10 6B00                       		bmi.s	loc_16CE0
00019C12 4EB9 0001 7D0E             		jsr	(ObjFloorDist).l
00019C18 4A41                       		tst.w	d1
00019C1A 6A00                       		bpl.s	loc_16CE0
00019C1C D368 000C                  		add.w	d1,obY(a0)
00019C20 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019C26                            
00019C26                            loc_16CE0:
00019C26 4A28 0001                  		tst.b	obRender(a0)
00019C2A 6A00 FD80                  		bpl.w	Cat_ChkGone
00019C2E 4EF9 0000 F426             		jmp	(DisplaySprite).l
00019C2E 4EF9 0000 F426             		jmp	(DisplaySprite).l
00019C34                            		include	"_anim\Caterkiller.asm"
00019C34                            ; ---------------------------------------------------------------------------
00019C34                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019C34                            ; ---------------------------------------------------------------------------
00019C34 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019C44 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019C54 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019C64 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019C74 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019C84 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019C94 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019CA4 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019CB4                            		even
00019CB4                            		even
00019CB4                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019CB4                            ; ---------------------------------------------------------------------------
00019CB4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019CB4                            ; ---------------------------------------------------------------------------
00019CB4                            Map_Cat_internal:
00019CB4 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019CB6 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019CB8 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019CBA 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019CBC 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019CBE 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019CC0 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019CC2 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019CC4 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019CC6 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019CC8 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019CCA 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019CCC 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019CCE 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019CD0 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019CD2 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019CD4 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019CD6 0000                       		dc.w byte_16E04-Map_Cat_internal
00019CD8 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019CDA 0000                       		dc.w byte_16E10-Map_Cat_internal
00019CDC 0000                       		dc.w byte_16E16-Map_Cat_internal
00019CDE 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019CE0 0000                       		dc.w byte_16E22-Map_Cat_internal
00019CE2 0000                       		dc.w byte_16E28-Map_Cat_internal
00019CE4 01                         byte_16D9E:	dc.b 1
00019CE5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019CEA 01                         byte_16DA4:	dc.b 1
00019CEB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019CF0 01                         byte_16DAA:	dc.b 1
00019CF1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019CF6 01                         byte_16DB0:	dc.b 1
00019CF7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019CFC 01                         byte_16DB6:	dc.b 1
00019CFD EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019D02 01                         byte_16DBC:	dc.b 1
00019D03 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019D08 01                         byte_16DC2:	dc.b 1
00019D09 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019D0E 01                         byte_16DC8:	dc.b 1
00019D0F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019D14 01                         byte_16DCE:	dc.b 1
00019D15 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019D1A 01                         byte_16DD4:	dc.b 1
00019D1B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019D20 01                         byte_16DDA:	dc.b 1
00019D21 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019D26 01                         byte_16DE0:	dc.b 1
00019D27 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019D2C 01                         byte_16DE6:	dc.b 1
00019D2D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019D32 01                         byte_16DEC:	dc.b 1
00019D33 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019D38 01                         byte_16DF2:	dc.b 1
00019D39 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019D3E 01                         byte_16DF8:	dc.b 1
00019D3F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019D44 01                         byte_16DFE:	dc.b 1
00019D45 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019D4A 01                         byte_16E04:	dc.b 1
00019D4B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019D50 01                         byte_16E0A:	dc.b 1
00019D51 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019D56 01                         byte_16E10:	dc.b 1
00019D57 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019D5C 01                         byte_16E16:	dc.b 1
00019D5D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019D62 01                         byte_16E1C:	dc.b 1
00019D63 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019D68 01                         byte_16E22:	dc.b 1
00019D69 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019D6E 01                         byte_16E28:	dc.b 1
00019D6F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019D74                            		even
00019D74                            		even
00019D74                            
00019D74                            		include	"_incObj\79 Lamppost.asm"
00019D74                            ; ---------------------------------------------------------------------------
00019D74                            ; Object 79 - lamppost
00019D74                            ; ---------------------------------------------------------------------------
00019D74                            
00019D74                            Lamppost:
00019D74 7000                       		moveq	#0,d0
00019D76 1028 0024                  		move.b	obRoutine(a0),d0
00019D7A 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019D7E 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019D82 4EF9 0001 14C6             		jmp	(RememberState).l
00019D88                            ; ===========================================================================
00019D88 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019D8A 0000                       		dc.w Lamp_Blue-Lamp_Index
00019D8C 0000                       		dc.w Lamp_Finish-Lamp_Index
00019D8E 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019D90                            
00019D90 =00000030                  lamp_origX:	equ $30		; original x-axis position
00019D90 =00000032                  lamp_origY:	equ $32		; original y-axis position
00019D90 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019D90                            ; ===========================================================================
00019D90                            
00019D90                            Lamp_Main:	; Routine 0
00019D90 5428 0024                  		addq.b	#2,obRoutine(a0)
00019D94 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019D9C 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019DA2 117C 0004 0001             		move.b	#4,obRender(a0)
00019DA8 117C 0008 0014             		move.b	#8,obActWid(a0)
00019DAE 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019DB4 45F8 FC00                  		lea	(v_objstate).w,a2
00019DB8 7000                       		moveq	#0,d0
00019DBA 1028 0023                  		move.b	obRespawnNo(a0),d0
00019DBE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019DC4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019DCA 6600                       		bne.s	@red
00019DCC 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019DD0 0201 007F                  		andi.b	#$7F,d1
00019DD4 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019DD8 0202 007F                  		andi.b	#$7F,d2
00019DDC B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019DDE 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019DE0                            
00019DE0                            @red:
00019DE0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019DE6 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019DEC 117C 0003 001A             		move.b	#3,obFrame(a0)
00019DF2 4E75                       		rts	
00019DF4                            
00019DF4                            ; ===========================================================================
00019DF4                            
00019DF4                            Lamp_Blue:	; Routine 2
00019DF4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019DF8 6600 0000                  		bne.w	@donothing	; if yes, branch
00019DFC 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019E00 6B00 0000                  		bmi.w	@donothing
00019E04 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019E08 0201 007F                  		andi.b	#$7F,d1
00019E0C 1428 0028                  		move.b	obSubtype(a0),d2
00019E10 0202 007F                  		andi.b	#$7F,d2
00019E14 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019E16 6500                       		bcs.s	@chkhit		; if yes, branch
00019E18 45F8 FC00                  		lea	(v_objstate).w,a2
00019E1C 7000                       		moveq	#0,d0
00019E1E 1028 0023                  		move.b	obRespawnNo(a0),d0
00019E22 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019E28 117C 0004 0024             		move.b	#4,obRoutine(a0)
00019E2E 117C 0003 001A             		move.b	#3,obFrame(a0)
00019E34 6000 0000                  		bra.w	@donothing
00019E38                            ; ===========================================================================
00019E38                            
00019E38                            @chkhit:
00019E38 3038 D008                  		move.w	(v_player+obX).w,d0
00019E3C 9068 0008                  		sub.w	obX(a0),d0
00019E40 5040                       		addq.w	#8,d0
00019E42 0C40 0010                  		cmpi.w	#$10,d0
00019E46 6400 0000                  		bcc.w	@donothing
00019E4A 3038 D00C                  		move.w	(v_player+obY).w,d0
00019E4E 9068 000C                  		sub.w	obY(a0),d0
00019E52 0640 0040                  		addi.w	#$40,d0
00019E56 0C40 0068                  		cmpi.w	#$68,d0
00019E5A 6400                       		bcc.s	@donothing
00019E5C                            
00019E66 5428 0024                  		addq.b	#2,obRoutine(a0)
00019E6A 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
00019E70 6600                       		bne.s	@fail
00019E72 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
00019E76 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
00019E7C 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
00019E82 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
00019E88 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00019E8E 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
00019E96 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00019E9C 137C 0004 0001             		move.b	#4,obRender(a1)
00019EA2 137C 0008 0014             		move.b	#8,obActWid(a1)
00019EA8 337C 0200 0018             		move.w	#$200,obPriority(a1)
00019EAE 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
00019EB4 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00019EBA                            
00019EBA                            	@fail:
00019EBA 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00019EC0 6100 0000                  		bsr.w	Lamp_StoreInfo
00019EC4 45F8 FC00                  		lea	(v_objstate).w,a2
00019EC8 7000                       		moveq	#0,d0
00019ECA 1028 0023                  		move.b	obRespawnNo(a0),d0
00019ECE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019ED4                            
00019ED4                            	@donothing:
00019ED4 4E75                       		rts	
00019ED6                            ; ===========================================================================
00019ED6                            
00019ED6                            Lamp_Finish:	; Routine 4	
00019ED6 4E75                       		rts	
00019ED8                            ; ===========================================================================
00019ED8                            
00019ED8                            Lamp_Twirl:	; Routine 6
00019ED8 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00019EDC 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00019EDE 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019EE4                            
00019EE4                            	@continue:
00019EE4 1028 0026                  		move.b	obAngle(a0),d0
00019EE8 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00019EEE 0400 0040                  		subi.b	#$40,d0
00019EF2 4EB9 0000 3B42             		jsr	(CalcSine).l
00019EF8 C3FC 0C00                  		muls.w	#$C00,d1
00019EFC 4841                       		swap	d1
00019EFE D268 0030                  		add.w	lamp_origX(a0),d1
00019F02 3141 0008                  		move.w	d1,obX(a0)
00019F06 C1FC 0C00                  		muls.w	#$C00,d0
00019F0A 4840                       		swap	d0
00019F0C D068 0032                  		add.w	lamp_origY(a0),d0
00019F10 3140 000C                  		move.w	d0,obY(a0)
00019F14 4E75                       		rts	
00019F16                            ; ===========================================================================
00019F16                            ; ---------------------------------------------------------------------------
00019F16                            ; Subroutine to	store information when you hit a lamppost
00019F16                            ; ---------------------------------------------------------------------------
00019F16                            
00019F16                            Lamp_StoreInfo:
00019F16 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00019F1C 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00019F22 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
00019F28 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
00019F2E 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
00019F34 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
00019F3A 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
00019F40 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
00019F46 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
00019F4C 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
00019F52 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
00019F58 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
00019F5E 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
00019F64 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
00019F6A 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
00019F70 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
00019F76 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
00019F7C 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
00019F82 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
00019F88 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00019F8E 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
00019F94 4E75                       		rts	
00019F96                            
00019F96                            ; ---------------------------------------------------------------------------
00019F96                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00019F96                            ; ---------------------------------------------------------------------------
00019F96                            
00019F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F96                            
00019F96                            
00019F96                            Lamp_LoadInfo:
00019F96 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
00019F9C 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00019FA2 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00019FA8 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
00019FAE 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00019FB4 4278 FE20                  		clr.w	(v_rings).w
00019FB8 4238 FE1B                  		clr.b	(v_lifecount).w
00019FBC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00019FC2 11FC 003B FE25             		move.b	#59,(v_timecent).w
00019FC8 5338 FE24                  		subq.b	#1,(v_timesec).w
00019FCC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00019FD2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00019FD8 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
00019FDE 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00019FE4 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
00019FEA 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00019FF0 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00019FF6 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
00019FFC 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A002 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A008 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A00E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A014 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A01A 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A020 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A022                            
0001A022 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A028 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A02E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A034                            
0001A034                            	@notlabyrinth:
0001A034 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A038 6A00                       		bpl.s	locret_170F6
0001A03A 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A03E 0440 00A0                  		subi.w	#$A0,d0
0001A042 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A046                            
0001A046                            locret_170F6:
0001A046 4E75                       		rts	
0001A046 4E75                       		rts	
0001A048                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A048                            ; --------------------------------------------------------------------------------
0001A048                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A048                            ; --------------------------------------------------------------------------------
0001A048                            
0001A048                            SME_JfaKr:	
0001A048 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A04C 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A050 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A052 0A                         SME_JfaKr_A:	dc.b $A	
0001A053 E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A058 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A05D D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A062 D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A067 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A06C F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A071 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A076 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A07B 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A080 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A085 08                         SME_JfaKr_3D:	dc.b 8	
0001A086 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A08B E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A090 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A095 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A09A 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A09F 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0A4 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0A9 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0AE 02                         SME_JfaKr_66:	dc.b 2	
0001A0AF F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A0B4 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A0B9 0A                         SME_JfaKr_71:	dc.b $A	
0001A0BA E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A0BF E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0C4 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A0C9 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A0CE 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A0D3 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A0D8 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A0DD 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A0E2 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A0E7 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A0EC 0A                         SME_JfaKr_A4:	dc.b $A	
0001A0ED E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A0F2 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A0F7 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A0FC F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A101 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A106 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A10B 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A110 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A115 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A11A D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A120 00                         		even
0001A120 00                         		even
0001A120                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            ; Object 7D - hidden points at the end of a level
0001A120                            ; ---------------------------------------------------------------------------
0001A120                            
0001A120                            HiddenBonus:
0001A120 7000                       		moveq	#0,d0
0001A122 1028 0024                  		move.b	obRoutine(a0),d0
0001A126 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A12A 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A12E                            ; ===========================================================================
0001A12E 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A130 0000                       		dc.w Bonus_Display-Bonus_Index
0001A132                            
0001A132 =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A132                            ; ===========================================================================
0001A132                            
0001A132                            Bonus_Main:	; Routine 0
0001A132 7410                       		moveq	#$10,d2
0001A134 3602                       		move.w	d2,d3
0001A136 D643                       		add.w	d3,d3
0001A138 43F8 D000                  		lea	(v_player).w,a1
0001A13C 3029 0008                  		move.w	obX(a1),d0
0001A140 9068 0008                  		sub.w	obX(a0),d0
0001A144 D042                       		add.w	d2,d0
0001A146 B043                       		cmp.w	d3,d0
0001A148 6400                       		bcc.s	bonu_chkdel
0001A14A 3229 000C                  		move.w	obY(a1),d1
0001A14E 9268 000C                  		sub.w	obY(a0),d1
0001A152 D242                       		add.w	d2,d1
0001A154 B243                       		cmp.w	d3,d1
0001A156 6400                       		bcc.s	bonu_chkdel
0001A158 4A78 FE08                  		tst.w	(v_debuguse).w
0001A15C 6600                       		bne.s	bonu_chkdel
0001A15E 4A38 F7CD                  		tst.b	(f_bigring).w
0001A162 6600                       		bne.s	bonu_chkdel
0001A164 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A168 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A170 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A176 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A17C 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A182 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A188 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A18E 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A19E 7000                       		moveq	#0,d0
0001A1A0 1028 0028                  		move.b	obSubtype(a0),d0
0001A1A4 D040                       		add.w	d0,d0
0001A1A6 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A1AA 4EB9 0000 0000             		jsr	(AddPoints).l
0001A1B0                            
0001A1B0                            bonu_chkdel:
0001A1CC 4E75                       		rts	
0001A1CE                            
0001A1CE                            	@delete:
0001A1CE 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A1D4                            
0001A1D4                            ; ===========================================================================
0001A1D4 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A1D6 03E8                       		dc.w 1000
0001A1D8 0064                       		dc.w 100
0001A1DA 000A                       		dc.w 10
0001A1DC                            ; ===========================================================================
0001A1DC                            
0001A1DC                            Bonus_Display:	; Routine 2
0001A1DC 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A1E0 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A1FE 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001A204                            
0001A204                            Bonus_Display_Delete:	
0001A204 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A204 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A20A                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A20A                            ; ---------------------------------------------------------------------------
0001A20A                            ; Sprite mappings - hidden points at the end of	a level
0001A20A                            ; ---------------------------------------------------------------------------
0001A20A                            Map_Bonus_internal:
0001A20A 0000                       		dc.w @blank-Map_Bonus_internal
0001A20C 0000                       		dc.w @10000-Map_Bonus_internal
0001A20E 0000                       		dc.w @1000-Map_Bonus_internal
0001A210 0000                       		dc.w @100-Map_Bonus_internal
0001A212 00                         @blank:		dc.b 0
0001A213 01                         @10000:		dc.b 1
0001A214 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A219 01                         @1000:		dc.b 1
0001A21A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A21F 01                         @100:		dc.b 1
0001A220 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A226 00                         		even
0001A226 00                         		even
0001A226                            
0001A226                            		include	"_incObj\8A Credits.asm"
0001A226                            ; ---------------------------------------------------------------------------
0001A226                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A226                            ; ---------------------------------------------------------------------------
0001A226                            
0001A226                            CreditsText:
0001A226 7000                       		moveq	#0,d0
0001A228 1028 0024                  		move.b	obRoutine(a0),d0
0001A22C 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A230 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A234                            ; ===========================================================================
0001A234 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A236 0000                       		dc.w Cred_Display-Cred_Index
0001A238                            ; ===========================================================================
0001A238                            
0001A238                            Cred_Main:	; Routine 0
0001A238 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A23C 317C 0120 0008             		move.w	#$120,obX(a0)
0001A242 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A248 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A250 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A256 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A25A 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A25E 117C 0000 0001             		move.b	#0,obRender(a0)
0001A264 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A26A                            
0001A26A 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A270 6600                       		bne.s	Cred_Display	; if not, branch
0001A272                            
0001A272 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A278 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A27E 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A282 6700                       		beq.s	Cred_Display	; if not, branch
0001A284 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A28A 6600                       		bne.s	Cred_Display	; if not, branch
0001A28C 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A292 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A298 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A29E                            ; ===========================================================================
0001A29E                            
0001A29E                            Cred_Display:	; Routine 2
0001A29E 4EF9 0000 F426             		jmp	DisplaySprite
0001A29E 4EF9 0000 F426             		jmp	DisplaySprite
0001A2A4                            Map_Cred:	include	"_maps\Credits.asm"
0001A2A4                            ; ---------------------------------------------------------------------------
0001A2A4                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A2A4                            ; ---------------------------------------------------------------------------
0001A2A4                            Map_Cred_internal:
0001A2A4 0000                       		dc.w @staff-Map_Cred_internal
0001A2A6 0000                       		dc.w @gameplan-Map_Cred_internal
0001A2A8 0000                       		dc.w @program-Map_Cred_internal
0001A2AA 0000                       		dc.w @character-Map_Cred_internal
0001A2AC 0000                       		dc.w @design-Map_Cred_internal
0001A2AE 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A2B0 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A2B2 0000                       		dc.w @thanks-Map_Cred_internal
0001A2B4 0000                       		dc.w @presentedby-Map_Cred_internal
0001A2B6 0000                       		dc.w @tryagain-Map_Cred_internal
0001A2B8 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A2BA 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A2BB F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A2C0 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A2C5 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A2CA F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A2CF F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A2D4 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A2D9 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A2DE F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A2E3 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A2E8 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A2ED F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A2F2 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A2F7 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A2FC F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A301 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A302 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A307 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A30C 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A311 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A316 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A31B 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A320 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A325 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A32A 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A32F                            
0001A32F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A334 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A339 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A33E B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A343 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A348 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A349 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A34E 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A353 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A358 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A35D 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A362 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A367 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A36C                            
0001A36C B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A371 B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A376 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A37B B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A380 B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A385 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A38A B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A38F B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A394                            
0001A394 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A399 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A39E                            
0001A39E D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A3A3 D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A3A8 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A3AD D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A3B2 D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A3B7 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A3BC                            
0001A3BC F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A3C1 F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A3C6 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A3CB 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A3CC 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A3D1 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A3D6 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A3DB                            
0001A3DB B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A3E0 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A3E5 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A3EA B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A3EF B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A3F4 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A3F5 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A3FA 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A3FF 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A404 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A409 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A40E 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A413                            
0001A413 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A418 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A41D B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A422 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A427 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A42C 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A42D 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A432 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A437 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A43C 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A441 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A446 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A44B 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A450 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A455 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A45A 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A45F                            
0001A45F B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A464 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A469 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A46E B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A473 B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A478 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A47D B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A482 B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A487                            
0001A487 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A48C D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A491 D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A496 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A49B D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A4A0 D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A4A5 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A4AA D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A4AF D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A4B4 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A4B9 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A4BA D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A4BF D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A4C4 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A4C9 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A4CE D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A4D3 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A4D8 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A4DD D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A4E2 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A4E7 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A4EC D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A4F1 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A4F6 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A4FB 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A500 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A505 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A50A 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A50F 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A514 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A519 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A51E 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A523 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A528 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A52D 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A52E 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A533 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A538 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A53D 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A542 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A547 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A54C 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A551 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A556                            
0001A556 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A55B B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A560 B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A565 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A56A B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A56F B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A574                            
0001A574 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A579 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A57E D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A583 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A584 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A589 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A58E 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A593 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A598 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A59D 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A5A2 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A5A7 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A5AC 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A5B1                            
0001A5B1 B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A5B6 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A5BB                            
0001A5BB D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A5C0 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A5C5 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A5CA D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A5CF D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A5D4 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A5D5 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A5DA 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A5DF 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A5E4 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A5E9 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A5EE 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A5F3 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A5F8 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A5FD 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A5FE E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A603 E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A608 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A60D E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A612 E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A617 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A61C                            
0001A61C 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A621 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A626 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A62B 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A630 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A635 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A63A 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A63F 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A644                            		even
0001A644                            		even
0001A644                            
0001A644                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A644                            ; ---------------------------------------------------------------------------
0001A644                            ; Object 3D - Eggman (GHZ)
0001A644                            ; ---------------------------------------------------------------------------
0001A644                            
0001A644                            BossGreenHill:
0001A644 7000                       		moveq	#0,d0
0001A646 1028 0024                  		move.b	obRoutine(a0),d0
0001A64A 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A64E 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A652                            ; ===========================================================================
0001A652 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A654 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A656 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A658 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A65A                            
0001A65A 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A65C 0401                       		dc.b 4,	1
0001A65E 0607                       		dc.b 6,	7
0001A660                            ; ===========================================================================
0001A660                            
0001A660                            BGHZ_Main:	; Routine 0
0001A660 45F9 0001 A65A             		lea	(BGHZ_ObjData).l,a2
0001A666 2248                       		movea.l	a0,a1
0001A668 7202                       		moveq	#2,d1
0001A66A 6000                       		bra.s	BGHZ_LoadBoss
0001A66C                            ; ===========================================================================
0001A66C                            
0001A66C                            BGHZ_Loop:
0001A66C 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001A672 6600                       		bne.s	loc_17772
0001A674                            
0001A674                            BGHZ_LoadBoss:
0001A674 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A678 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A67C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A682 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A688 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A690 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A696 137C 0004 0001             		move.b	#4,obRender(a1)
0001A69C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A6A2 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A6A8 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A6AC 2348 0034                  		move.l	a0,$34(a1)
0001A6B0 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A6B4                            
0001A6B4                            loc_17772:
0001A6B4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A6BA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A6C0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A6C6 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A6CC                            
0001A6CC                            
0001A6CC                            BGHZ_ShipMain:	; Routine 2
0001A6CC 7000                       		moveq	#0,d0
0001A6CE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A6D2 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A6D6 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A6DA 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A6E0 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001A6E6 1028 0022                  		move.b	obStatus(a0),d0
0001A6EA 0200 0003                  		andi.b	#3,d0
0001A6EE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A6F4 8128 0001                  		or.b	d0,obRender(a0)
0001A6F8 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001A6FE                            ; ===========================================================================
0001A6FE 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A700 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A702 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A704 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A706 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A708 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A70A 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A70C                            ; ===========================================================================
0001A70C                            
0001A70C                            BGHZ_ShipStart:
0001A70C 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A712 6100 0000                  		bsr.w	BossMove
0001A716 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A71C 6600                       		bne.s	loc_177E6
0001A71E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A724 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A728                            
0001A728                            loc_177E6:
0001A728 1028 003F                  		move.b	$3F(a0),d0
0001A72C 4EB9 0000 3B42             		jsr	(CalcSine).l
0001A732 EC40                       		asr.w	#6,d0
0001A734 D068 0038                  		add.w	$38(a0),d0
0001A738 3140 000C                  		move.w	d0,obY(a0)
0001A73C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A742 5428 003F                  		addq.b	#2,$3F(a0)
0001A746 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A74C 6400                       		bcc.s	locret_1784A
0001A74E 4A28 0022                  		tst.b	obStatus(a0)
0001A752 6B00                       		bmi.s	loc_1784C
0001A754 4A28 0020                  		tst.b	obColType(a0)
0001A758 6600                       		bne.s	locret_1784A
0001A75A 4A28 003E                  		tst.b	$3E(a0)
0001A75E 6600                       		bne.s	BGHZ_ShipFlash
0001A760 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A770                            
0001A770                            BGHZ_ShipFlash:
0001A770 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A774 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A776 4A51                       		tst.w	(a1)
0001A778 6600                       		bne.s	loc_1783C
0001A77A 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A77E                            
0001A77E                            loc_1783C:
0001A77E 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A780 5328 003E                  		subq.b	#1,$3E(a0)
0001A784 6600                       		bne.s	locret_1784A
0001A786 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A78C                            
0001A78C                            locret_1784A:
0001A78C 4E75                       		rts	
0001A78E                            ; ===========================================================================
0001A78E                            
0001A78E                            loc_1784C:
0001A78E 7064                       		moveq	#100,d0
0001A790 6100 0000                  		bsr.w	AddPoints
0001A794 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A79A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A7A0 4E75                       		rts	
0001A7A0 4E75                       		rts	
0001A7A2                            
0001A7A2                            ; ---------------------------------------------------------------------------
0001A7A2                            ; Defeated boss	subroutine
0001A7A2                            ; ---------------------------------------------------------------------------
0001A7A2                            
0001A7A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A7A2                            
0001A7A2                            
0001A7A2                            BossDefeated:
0001A7A2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A7A6 0200 0007                  		andi.b	#7,d0
0001A7AA 6600                       		bne.s	locret_178A2
0001A7AC 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001A7B2 6600                       		bne.s	locret_178A2
0001A7B4 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A7B8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A7BE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A7C4 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001A7CA 3200                       		move.w	d0,d1
0001A7CC 7200                       		moveq	#0,d1
0001A7CE 1200                       		move.b	d0,d1
0001A7D0 E409                       		lsr.b	#2,d1
0001A7D2 0441 0020                  		subi.w	#$20,d1
0001A7D6 D369 0008                  		add.w	d1,obX(a1)
0001A7DA E048                       		lsr.w	#8,d0
0001A7DC E608                       		lsr.b	#3,d0
0001A7DE D169 000C                  		add.w	d0,obY(a1)
0001A7E2                            
0001A7E2                            locret_178A2:
0001A7E2 4E75                       		rts	
0001A7E4                            ; End of function BossDefeated
0001A7E4                            
0001A7E4                            ; ---------------------------------------------------------------------------
0001A7E4                            ; Subroutine to	move a boss
0001A7E4                            ; ---------------------------------------------------------------------------
0001A7E4                            
0001A7E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A7E4                            
0001A7E4                            
0001A7E4                            BossMove:
0001A7E4 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A7EA E188                       		lsl.l	#8,d0
0001A7EC D1A8 0030                  		add.l	d0,$30(a0)
0001A7F0 E18A                       		lsl.l	#8,d2
0001A7F2 D5A8 0038                  		add.l	d2,$38(a0)
0001A7F6 4E75                       		rts
0001A7F8                            ; End of function BossMove
0001A7F8                            
0001A7F8                            ; ===========================================================================
0001A7F8                            
0001A7F8                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A7F8                            
0001A7F8                            BGHZ_MakeBall:
0001A7F8 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A7FE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A804 6100 FFDE                  		bsr.w	BossMove
0001A808 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001A80E 6600                       		bne.s	loc_17916
0001A810 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A816 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A81C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A820 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001A826 6600                       		bne.s	loc_17910
0001A828 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001A82C 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001A832 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001A838 2348 0034                  		move.l	a0,$34(a1)
0001A83C                            
0001A83C                            loc_17910:
0001A83C 317C 0077 003C             		move.w	#$77,$3C(a0)
0001A842                            
0001A842                            loc_17916:
0001A842 6000 FEE4                  		bra.w	loc_177E6
0001A846                            ; ===========================================================================
0001A846                            
0001A846                            BGHZ_ShipMove:
0001A846 5368 003C                  		subq.w	#1,$3C(a0)
0001A84A 6A00                       		bpl.s	BGHZ_Reverse
0001A84C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A850 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A856 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001A85C 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001A862 6600                       		bne.s	BGHZ_Reverse
0001A864 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001A86A 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001A870                            
0001A870                            BGHZ_Reverse:
0001A870 0828 0000 0022             		btst	#0,obStatus(a0)
0001A876 6600                       		bne.s	loc_17950
0001A878 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001A87C                            
0001A87C                            loc_17950:
0001A87C 6000 FEAA                  		bra.w	loc_177E6
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            loc_17954:
0001A880 5368 003C                  		subq.w	#1,$3C(a0)
0001A884 6B00                       		bmi.s	loc_17960
0001A886 6100 FF5C                  		bsr.w	BossMove
0001A88A 6000                       		bra.s	loc_17976
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            loc_17960:
0001A88C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001A892 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001A898 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001A89C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A8A2                            
0001A8A2                            loc_17976:
0001A8A2 6000 FE84                  		bra.w	loc_177E6
0001A8A6                            ; ===========================================================================
0001A8A6                            
0001A8A6                            loc_1797A:
0001A8A6 5368 003C                  		subq.w	#1,$3C(a0)
0001A8AA 6B00                       		bmi.s	loc_17984
0001A8AC 6000 FEF4                  		bra.w	BossDefeated
0001A8B0                            ; ===========================================================================
0001A8B0                            
0001A8B0                            loc_17984:
0001A8B0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A8B6 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001A8BC 4268 0010                  		clr.w	obVelX(a0)
0001A8C0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A8C4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001A8CA 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001A8CE 6600                       		bne.s	locret_179AA
0001A8D0 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001A8D6                            
0001A8D6                            locret_179AA:
0001A8D6 4E75                       		rts	
0001A8D8                            ; ===========================================================================
0001A8D8                            
0001A8D8                            loc_179AC:
0001A8D8 5268 003C                  		addq.w	#1,$3C(a0)
0001A8DC 6700                       		beq.s	loc_179BC
0001A8DE 6A00                       		bpl.s	loc_179C2
0001A8E0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001A8E6 6000                       		bra.s	loc_179EE
0001A8E8                            ; ===========================================================================
0001A8E8                            
0001A8E8                            loc_179BC:
0001A8E8 4268 0012                  		clr.w	obVelY(a0)
0001A8EC 6000                       		bra.s	loc_179EE
0001A8EE                            ; ===========================================================================
0001A8EE                            
0001A8EE                            loc_179C2:
0001A8EE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001A8F4 6500                       		bcs.s	loc_179DA
0001A8F6 6700                       		beq.s	loc_179E0
0001A8F8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001A8FE 6500                       		bcs.s	loc_179EE
0001A900 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A904 6000                       		bra.s	loc_179EE
0001A906                            ; ===========================================================================
0001A906                            
0001A906                            loc_179DA:
0001A906 5168 0012                  		subq.w	#8,obVelY(a0)
0001A90A 6000                       		bra.s	loc_179EE
0001A90C                            ; ===========================================================================
0001A90C                            
0001A90C                            loc_179E0:
0001A90C 4268 0012                          clr.w    obVelY(a0)
0001A910 4A38 FE2D                          tst.b     (v_invinc).w
0001A914 6600                               bne.s   @boss_invinc
0001A916 4A38 FE2E                          tst.b     (v_shoes).w
0001A91A 6600                               bne.s   @boss_shoes
0001A91C                            
0001A91C 1038 F5C6                          move.b   (v_Saved_music),d0
0001A920 6000 0000                          bra.w      @boss_play
0001A924                            
0001A924                            @boss_invinc:
0001A924 103C 0000                          move.b #bgm_Invincible,d0
0001A928                            
0001A928                            @boss_shoes:
0001A928 103C 0000                          move.b #bgm_Ending,d0
0001A92C                            
0001A92C                            @boss_play:
0001A92C 4EB8 129A                          jsr PlaySound
0001A930                            
0001A930                            loc_179EE:
0001A930 6100 FEB2                  		bsr.w	BossMove
0001A934 6000 FDF2                  		bra.w	loc_177E6
0001A938                            ; ===========================================================================
0001A938                            
0001A938                            loc_179F6:
0001A938 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A93E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A944 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001A94A 6700                       		beq.s	loc_17A10
0001A94C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A950 6000                       		bra.s	loc_17A16
0001A952                            ; ===========================================================================
0001A952                            
0001A952                            loc_17A10:
0001A952 4A28 0001                  		tst.b	obRender(a0)
0001A956 6A00                       		bpl.s	BGHZ_ShipDel
0001A958                            
0001A958                            loc_17A16:
0001A958 6100 FE8A                  		bsr.w	BossMove
0001A95C 6000 FDCA                  		bra.w	loc_177E6
0001A960                            ; ===========================================================================
0001A960                            
0001A960                            BGHZ_ShipDel:
0001A960 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A966                            ; ===========================================================================
0001A966                            
0001A966                            BGHZ_FaceMain:	; Routine 4
0001A966 7000                       		moveq	#0,d0
0001A968 7201                       		moveq	#1,d1
0001A96A 2268 0034                  		movea.l	$34(a0),a1
0001A96E 1029 0025                  		move.b	ob2ndRout(a1),d0
0001A972 5900                       		subq.b	#4,d0
0001A974 6600                       		bne.s	loc_17A3E
0001A976 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001A97C 6600                       		bne.s	loc_17A46
0001A97E 7204                       		moveq	#4,d1
0001A980                            
0001A980                            loc_17A3E:
0001A980 5D00                       		subq.b	#6,d0
0001A982 6B00                       		bmi.s	loc_17A46
0001A984 720A                       		moveq	#$A,d1
0001A986 6000                       		bra.s	loc_17A5A
0001A988                            ; ===========================================================================
0001A988                            
0001A988                            loc_17A46:
0001A988 4A29 0020                  		tst.b	obColType(a1)
0001A98C 6600                       		bne.s	loc_17A50
0001A98E 7205                       		moveq	#5,d1
0001A990 6000                       		bra.s	loc_17A5A
0001A992                            ; ===========================================================================
0001A992                            
0001A992                            loc_17A50:
0001A992 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001A998 6500                       		bcs.s	loc_17A5A
0001A99A 7204                       		moveq	#4,d1
0001A99C                            
0001A99C                            loc_17A5A:
0001A99C 1141 001C                  		move.b	d1,obAnim(a0)
0001A9A0 5500                       		subq.b	#2,d0
0001A9A2 6600                       		bne.s	BGHZ_FaceDisp
0001A9A4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001A9AA 4A28 0001                  		tst.b	obRender(a0)
0001A9AE 6A00                       		bpl.s	BGHZ_FaceDel
0001A9B0                            
0001A9B0                            BGHZ_FaceDisp:
0001A9B0 6000                       		bra.s	BGHZ_Display
0001A9B2                            ; ===========================================================================
0001A9B2                            
0001A9B2                            BGHZ_FaceDel:
0001A9B2 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A9B8                            ; ===========================================================================
0001A9B8                            
0001A9B8                            BGHZ_FlameMain:	; Routine 6
0001A9B8 117C 0007 001C             		move.b	#7,obAnim(a0)
0001A9BE 2268 0034                  		movea.l	$34(a0),a1
0001A9C2 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001A9C8 6600                       		bne.s	loc_17A96
0001A9CA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001A9D0 4A28 0001                  		tst.b	obRender(a0)
0001A9D4 6A00                       		bpl.s	BGHZ_FlameDel
0001A9D6 6000                       		bra.s	BGHZ_FlameDisp
0001A9D8                            ; ===========================================================================
0001A9D8                            
0001A9D8                            loc_17A96:
0001A9D8 3029 0010                  		move.w	obVelX(a1),d0
0001A9DC 6700                       		beq.s	BGHZ_FlameDisp
0001A9DE 117C 0008 001C             		move.b	#8,obAnim(a0)
0001A9E4                            
0001A9E4                            BGHZ_FlameDisp:
0001A9E4 6000                       		bra.s	BGHZ_Display
0001A9E6                            ; ===========================================================================
0001A9E6                            
0001A9E6                            BGHZ_FlameDel:
0001A9E6 4EF9 0000 F466             		jmp	(DeleteObject).l
0001A9EC                            ; ===========================================================================
0001A9EC                            
0001A9EC                            BGHZ_Display:
0001A9EC 2268 0034                  		movea.l	$34(a0),a1
0001A9F0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001A9F6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001A9FC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AA02 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AA08 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001AA0E 1028 0022                  		move.b	obStatus(a0),d0
0001AA12 0200 0003                  		andi.b	#3,d0
0001AA16 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AA1C 8128 0001                  		or.b	d0,obRender(a0)
0001AA20 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001AA20 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001AA26                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AA26                            ; ---------------------------------------------------------------------------
0001AA26                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AA26                            ; ---------------------------------------------------------------------------
0001AA26                            
0001AA26                            BossBall:
0001AA26 7000                       		moveq	#0,d0
0001AA28 1028 0024                  		move.b	obRoutine(a0),d0
0001AA2C 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AA30 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AA34                            ; ===========================================================================
0001AA34 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AA36 0000                       		dc.w GBall_Base-GBall_Index
0001AA38 0000                       		dc.w GBall_Display2-GBall_Index
0001AA3A 0000                       		dc.w loc_17C68-GBall_Index
0001AA3C 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AA3E                            ; ===========================================================================
0001AA3E                            
0001AA3E                            GBall_Main:	; Routine 0
0001AA3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AA42 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AA48 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AA4E 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AA56 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AA5C 45E8 0028                  		lea	obSubtype(a0),a2
0001AA60 14FC 0000                  		move.b	#0,(a2)+
0001AA64 7205                       		moveq	#5,d1
0001AA66 2248                       		movea.l	a0,a1
0001AA68 6000                       		bra.s	loc_17B60
0001AA6A                            ; ===========================================================================
0001AA6A                            
0001AA6A                            GBall_MakeLinks:
0001AA6A 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001AA70 6600                       		bne.s	GBall_MakeBall
0001AA72 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AA78 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AA7E 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AA82 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AA88 237C 0000 92DC 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AA90 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AA96 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AA9C 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AAA0                            
0001AAA0                            loc_17B60:
0001AAA0 3A09                       		move.w	a1,d5
0001AAA2 0445 D000                  		subi.w	#$D000,d5
0001AAA6 EC4D                       		lsr.w	#6,d5
0001AAA8 0245 007F                  		andi.w	#$7F,d5
0001AAAC 14C5                       		move.b	d5,(a2)+
0001AAAE 137C 0004 0001             		move.b	#4,obRender(a1)
0001AAB4 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AABA 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AAC0 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001AAC6 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001AACA                            
0001AACA                            GBall_MakeBall:
0001AACA 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001AAD0 237C 0000 9838 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001AAD8 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001AADE 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AAE4 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AAEA 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AAF0 4E75                       		rts	
0001AAF2                            ; ===========================================================================
0001AAF2                            
0001AAF2 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AAF8                            
0001AAF8                            ; ===========================================================================
0001AAF8                            
0001AAF8                            GBall_Base:	; Routine 2
0001AAF8 47F9 0001 AAF2             		lea	(GBall_PosData).l,a3
0001AAFE 45E8 0028                  		lea	obSubtype(a0),a2
0001AB02 7C00                       		moveq	#0,d6
0001AB04 1C1A                       		move.b	(a2)+,d6
0001AB06                            
0001AB06                            loc_17BC6:
0001AB06 7800                       		moveq	#0,d4
0001AB08 181A                       		move.b	(a2)+,d4
0001AB0A ED4C                       		lsl.w	#6,d4
0001AB0C 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AB12 2244                       		movea.l	d4,a1
0001AB14 101B                       		move.b	(a3)+,d0
0001AB16 B029 003C                  		cmp.b	$3C(a1),d0
0001AB1A 6700                       		beq.s	loc_17BE0
0001AB1C 5229 003C                  		addq.b	#1,$3C(a1)
0001AB20                            
0001AB20                            loc_17BE0:
0001AB20 51CE FFE4                  		dbf	d6,loc_17BC6
0001AB24                            
0001AB24 B029 003C                  		cmp.b	$3C(a1),d0
0001AB28 6600                       		bne.s	loc_17BFA
0001AB2A 2268 0034                  		movea.l	$34(a0),a1
0001AB2E 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AB34 6600                       		bne.s	loc_17BFA
0001AB36 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AB3A                            
0001AB3A                            loc_17BFA:
0001AB3A 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AB40 6700                       		beq.s	GBall_Display
0001AB42 5268 0032                  		addq.w	#1,$32(a0)
0001AB46                            
0001AB46                            GBall_Display:
0001AB46 6100 0000                  		bsr.w	sub_17C2A
0001AB4A 1028 0026                  		move.b	obAngle(a0),d0
0001AB4E 4EB9 0000 924E             		jsr	(Swing_Move2).l
0001AB54 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001AB5A                            ; ===========================================================================
0001AB5A                            
0001AB5A                            GBall_Display2:	; Routine 4
0001AB5A 6100 0000                  		bsr.w	sub_17C2A
0001AB5E 4EB9 0000 920E             		jsr	(Obj48_Move).l
0001AB64 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001AB6A                            
0001AB6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AB6A                            
0001AB6A                            
0001AB6A                            sub_17C2A:
0001AB6A 2268 0034                  		movea.l	$34(a0),a1
0001AB6E 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AB74 6400                       		bcc.s	loc_17C3C
0001AB76 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AB7C                            
0001AB7C                            loc_17C3C:
0001AB7C 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AB82 3029 000C                  		move.w	obY(a1),d0
0001AB86 D068 0032                  		add.w	$32(a0),d0
0001AB8A 3140 0038                  		move.w	d0,$38(a0)
0001AB8E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AB94 4A29 0022                  		tst.b	obStatus(a1)
0001AB98 6A00                       		bpl.s	locret_17C66
0001AB9A 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AB9E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABA4                            
0001ABA4                            locret_17C66:
0001ABA4 4E75                       		rts	
0001ABA6                            ; End of function sub_17C2A
0001ABA6                            
0001ABA6                            ; ===========================================================================
0001ABA6                            
0001ABA6                            loc_17C68:	; Routine 6
0001ABA6 2268 0034                  		movea.l	$34(a0),a1
0001ABAA 4A29 0022                  		tst.b	obStatus(a1)
0001ABAE 6A00                       		bpl.s	GBall_Display3
0001ABB0 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ABB4 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABBA                            
0001ABBA                            GBall_Display3:
0001ABBA 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001ABC0                            ; ===========================================================================
0001ABC0                            
0001ABC0                            GBall_ChkVanish:; Routine 8
0001ABC0 7000                       		moveq	#0,d0
0001ABC2 4A28 001A                  		tst.b	obFrame(a0)
0001ABC6 6600                       		bne.s	GBall_Vanish
0001ABC8 5200                       		addq.b	#1,d0
0001ABCA                            
0001ABCA                            GBall_Vanish:
0001ABCA 1140 001A                  		move.b	d0,obFrame(a0)
0001ABCE 2268 0034                  		movea.l	$34(a0),a1
0001ABD2 4A29 0022                  		tst.b	obStatus(a1)
0001ABD6 6A00                       		bpl.s	GBall_Display4
0001ABD8 117C 0000 0020             		move.b	#0,obColType(a0)
0001ABDE 6100 FBC2                  		bsr.w	BossDefeated
0001ABE2 5328 003C                  		subq.b	#1,$3C(a0)
0001ABE6 6A00                       		bpl.s	GBall_Display4
0001ABE8 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001ABEC 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ABF2                            
0001ABF2                            GBall_Display4:
0001ABF2 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001ABF2 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001ABF8                            		include	"_anim\Eggman.asm"
0001ABF8                            ; ---------------------------------------------------------------------------
0001ABF8                            ; Animation script - Eggman (bosses)
0001ABF8                            ; ---------------------------------------------------------------------------
0001ABF8 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ABFA 0000                       		dc.w @facenormal1-Ani_Eggman
0001ABFC 0000                       		dc.w @facenormal2-Ani_Eggman
0001ABFE 0000                       		dc.w @facenormal3-Ani_Eggman
0001AC00 0000                       		dc.w @facelaugh-Ani_Eggman
0001AC02 0000                       		dc.w @facehit-Ani_Eggman
0001AC04 0000                       		dc.w @facepanic-Ani_Eggman
0001AC06 0000                       		dc.w @blank-Ani_Eggman
0001AC08 0000                       		dc.w @flame1-Ani_Eggman
0001AC0A 0000                       		dc.w @flame2-Ani_Eggman
0001AC0C 0000                       		dc.w @facedefeat-Ani_Eggman
0001AC0E 0000                       		dc.w @escapeflame-Ani_Eggman
0001AC10 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AC14 00                         		even
0001AC14 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AC18                            		even
0001AC18 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AC1C                            		even
0001AC1C 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AC20                            		even
0001AC20 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AC24                            		even
0001AC24 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AC28                            		even
0001AC28 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AC2C                            		even
0001AC2C 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AC30 00                         		even
0001AC30 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AC34                            		even
0001AC34 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AC38                            		even
0001AC38 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AC3C 00                         		even
0001AC3C 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AC48 00                         		even
0001AC48 00                         		even
0001AC48                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AC48                            ; --------------------------------------------------------------------------------
0001AC48                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AC48                            ; --------------------------------------------------------------------------------
0001AC48                            
0001AC48                            SME_F_pyS:	
0001AC48 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AC4C 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AC50 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AC54 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AC58 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AC5C 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AC60 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AC62 05                         SME_F_pyS_1A:	dc.b 5	
0001AC63 EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AC68 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AC6D FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AC72 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AC77 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AC7C 03                         SME_F_pyS_34:	dc.b 3	
0001AC7D E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC82 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AC87 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC8C 03                         SME_F_pyS_44:	dc.b 3	
0001AC8D E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AC92 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AC97 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AC9C 04                         SME_F_pyS_54:	dc.b 4	
0001AC9D E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001ACA2 EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001ACA7 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001ACAC EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACB1 04                         SME_F_pyS_69:	dc.b 4	
0001ACB2 E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001ACB7 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001ACBC EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001ACC1 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACC6 04                         SME_F_pyS_7E:	dc.b 4	
0001ACC7 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001ACCC EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001ACD1 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001ACD6 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001ACDB 04                         SME_F_pyS_93:	dc.b 4	
0001ACDC E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001ACE1 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001ACE6 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001ACEB EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001ACF0 07                         SME_F_pyS_A8:	dc.b 7	
0001ACF1 E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001ACF6 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001ACFB EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AD00 EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AD05 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AD0A F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AD0F EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AD14 01                         SME_F_pyS_CC:	dc.b 1	
0001AD15 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AD1A 01                         SME_F_pyS_D2:	dc.b 1	
0001AD1B 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AD20 00                         SME_F_pyS_D8:	dc.b 0	
0001AD21 02                         SME_F_pyS_D9:	dc.b 2	
0001AD22 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AD27 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AD2C 02                         SME_F_pyS_E4:	dc.b 2	
0001AD2D F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AD32 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AD38 00                         		even
0001AD38 00                         		even
0001AD38                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AD38                            ; ---------------------------------------------------------------------------
0001AD38                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AD38                            ; ---------------------------------------------------------------------------
0001AD38                            Map_BossItems_internal:
0001AD38 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AD3A 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AD3C 0000                       		dc.w @cross-Map_BossItems_internal
0001AD3E 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AD40 0000                       		dc.w @pipe-Map_BossItems_internal
0001AD42 0000                       		dc.w @spike-Map_BossItems_internal
0001AD44 0000                       		dc.w @legmask-Map_BossItems_internal
0001AD46 0000                       		dc.w @legs-Map_BossItems_internal
0001AD48 01                         @chainanchor1:	dc.b 1
0001AD49 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AD4E 02                         @chainanchor2:	dc.b 2
0001AD4F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AD54 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AD5A 00                         		even
0001AD5A 01                         @cross:		dc.b 1
0001AD5B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AD60 01                         @widepipe:	dc.b 1
0001AD61 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AD66 01                         @pipe:		dc.b 1
0001AD67 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AD6C 04                         @spike:		dc.b 4
0001AD6D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AD72 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AD77 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AD7C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AD82 00                         		even
0001AD82 02                         @legmask:	dc.b 2
0001AD83 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AD88 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AD8E 00                         		even
0001AD8E 02                         @legs:		dc.b 2
0001AD8F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AD94 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AD9A 00                         		even
0001AD9A 00                         		even
0001AD9A                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AD9A                            ; ---------------------------------------------------------------------------
0001AD9A                            ; Object 77 - Eggman (LZ)
0001AD9A                            ; ---------------------------------------------------------------------------
0001AD9A                            
0001AD9A                            BossLabyrinth:
0001AD9A 7000                       		moveq	#0,d0
0001AD9C 1028 0024                  		move.b	obRoutine(a0),d0
0001ADA0 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001ADA4 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001ADA8                            ; ===========================================================================
0001ADA8 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001ADAA 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001ADAC 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001ADAE 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001ADB0                            
0001ADB0 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001ADB2 0401                       		dc.b 4,	1
0001ADB4 0607                       		dc.b 6,	7
0001ADB6                            ; ===========================================================================
0001ADB6                            
0001ADB6                            Obj77_Main:	; Routine 0
0001ADB6 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001ADBC 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001ADC2 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001ADC8 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001ADCE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001ADD4 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001ADDA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001ADE0 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001ADE4 2248                       		movea.l	a0,a1
0001ADE6 7202                       		moveq	#2,d1
0001ADE8 6000                       		bra.s	Obj77_LoadBoss
0001ADEA                            ; ===========================================================================
0001ADEA                            
0001ADEA                            Obj77_Loop:
0001ADEA 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001ADF0 6600                       		bne.s	Obj77_ShipMain
0001ADF2 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001ADF6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001ADFC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AE02                            
0001AE02                            Obj77_LoadBoss:
0001AE02 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AE08 4229 0025                  		clr.b	ob2ndRout(a1)
0001AE0C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AE10 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AE14 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AE1A 237C 0001 AC48 0004        		move.l	#Map_Eggman,obMap(a1)
0001AE22 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001AE28 137C 0004 0001             		move.b	#4,obRender(a1)
0001AE2E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001AE34 2348 0034                  		move.l	a0,$34(a1)
0001AE38 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001AE3C                            
0001AE3C                            Obj77_ShipMain:	; Routine 2
0001AE3C 43F8 D000                  		lea	(v_player).w,a1
0001AE40 7000                       		moveq	#0,d0
0001AE42 1028 0025                  		move.b	ob2ndRout(a0),d0
0001AE46 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001AE4A 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001AE4E 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001AE54 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001AE5A 7003                       		moveq	#3,d0
0001AE5C C028 0022                  		and.b	obStatus(a0),d0
0001AE60 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AE66 8128 0001                  		or.b	d0,obRender(a0)
0001AE6A 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001AE70                            ; ===========================================================================
0001AE70 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001AE74 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001AE78 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001AE7C 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001AE80                            ; ===========================================================================
0001AE80                            
0001AE80                            loc_17F1E:
0001AE80 3029 0008                  		move.w	obX(a1),d0
0001AE84 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001AE88 6500                       		bcs.s	loc_17F38
0001AE8A 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AE90 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001AE96 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AE9A                            
0001AE9A                            loc_17F38:
0001AE9A 6100 F948                  		bsr.w	BossMove
0001AE9E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001AEA4 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AEAA                            
0001AEAA                            loc_17F48:
0001AEAA 4A28 003D                  		tst.b	$3D(a0)
0001AEAE 6600                       		bne.s	loc_17F8E
0001AEB0 4A28 0022                  		tst.b	obStatus(a0)
0001AEB4 6B00                       		bmi.s	loc_17F92
0001AEB6 4A28 0020                  		tst.b	obColType(a0)
0001AEBA 6600                       		bne.s	locret_17F8C
0001AEBC 4A28 003E                  		tst.b	$3E(a0)
0001AEC0 6600                       		bne.s	loc_17F70
0001AEC2 117C 0020 003E             		move.b	#$20,$3E(a0)
0001AED2                            
0001AED2                            loc_17F70:
0001AED2 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001AED6 7000                       		moveq	#0,d0
0001AED8 4A51                       		tst.w	(a1)
0001AEDA 6600                       		bne.s	loc_17F7E
0001AEDC 303C 0EEE                  		move.w	#cWhite,d0
0001AEE0                            
0001AEE0                            loc_17F7E:
0001AEE0 3280                       		move.w	d0,(a1)
0001AEE2 5328 003E                  		subq.b	#1,$3E(a0)
0001AEE6 6600                       		bne.s	locret_17F8C
0001AEE8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AEEE                            
0001AEEE                            locret_17F8C:
0001AEEE 4E75                       		rts	
0001AEF0                            ; ===========================================================================
0001AEF0                            
0001AEF0                            loc_17F8E:
0001AEF0 6000 F8B0                  		bra.w	BossDefeated
0001AEF4                            ; ===========================================================================
0001AEF4                            
0001AEF4                            loc_17F92:
0001AEF4 7064                       		moveq	#100,d0
0001AEF6 6100 0000                  		bsr.w	AddPoints
0001AEFA 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AF00 4E75                       		rts	
0001AF02                            ; ===========================================================================
0001AF02                            
0001AF02                            loc_17FA0:
0001AF02 70FE                       		moveq	#-2,d0
0001AF04 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001AF0A 6500                       		bcs.s	loc_17FB6
0001AF0C 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001AF12 4268 0010                  		clr.w	obVelX(a0)
0001AF16 5240                       		addq.w	#1,d0
0001AF18                            
0001AF18                            loc_17FB6:
0001AF18 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001AF1E 6E00                       		bgt.s	loc_17FCA
0001AF20 317C 0500 0038             		move.w	#$500,$38(a0)
0001AF26 4268 0012                  		clr.w	obVelY(a0)
0001AF2A 5240                       		addq.w	#1,d0
0001AF2C                            
0001AF2C                            loc_17FCA:
0001AF2C 6600                       		bne.s	loc_17FDC
0001AF2E 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AF34 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001AF3A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF3E                            
0001AF3E                            loc_17FDC:
0001AF3E 6000 FF5A                  		bra.w	loc_17F38
0001AF42                            ; ===========================================================================
0001AF42                            
0001AF42                            loc_17FE0:
0001AF42 70FE                       		moveq	#-2,d0
0001AF44 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001AF4A 6500                       		bcs.s	loc_17FF6
0001AF4C 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001AF52 4268 0010                  		clr.w	obVelX(a0)
0001AF56 5240                       		addq.w	#1,d0
0001AF58                            
0001AF58                            loc_17FF6:
0001AF58 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001AF5E 6E00                       		bgt.s	loc_1800A
0001AF60 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001AF66 4268 0012                  		clr.w	obVelY(a0)
0001AF6A 5240                       		addq.w	#1,d0
0001AF6C                            
0001AF6C                            loc_1800A:
0001AF6C 6600                       		bne.s	loc_1801A
0001AF6E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001AF74 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AF78 4228 003F                  		clr.b	$3F(a0)
0001AF7C                            
0001AF7C                            loc_1801A:
0001AF7C 6000 FF1C                  		bra.w	loc_17F38
0001AF80                            ; ===========================================================================
0001AF80                            
0001AF80                            loc_1801E:
0001AF80 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001AF86 6E00                       		bgt.s	loc_1804E
0001AF88 317C 0100 0038             		move.w	#$100,$38(a0)
0001AF8E 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001AF94 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001AF9A 4A28 003D                  		tst.b	$3D(a0)
0001AF9E 6700                       		beq.s	loc_18046
0001AFA0 E1E8 0010                  		asl	obVelX(a0)
0001AFA4 E1E8 0012                  		asl	obVelY(a0)
0001AFA8                            
0001AFA8                            loc_18046:
0001AFA8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AFAC 6000 FEEC                  		bra.w	loc_17F38
0001AFB0                            ; ===========================================================================
0001AFB0                            
0001AFB0                            loc_1804E:
0001AFB0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AFB6 5428 003F                  		addq.b	#2,$3F(a0)
0001AFBA 1028 003F                  		move.b	$3F(a0),d0
0001AFBE 4EB9 0000 3B42             		jsr	(CalcSine).l
0001AFC4 4A41                       		tst.w	d1
0001AFC6 6A00                       		bpl.s	loc_1806C
0001AFC8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFCE                            
0001AFCE                            loc_1806C:
0001AFCE E840                       		asr.w	#4,d0
0001AFD0 4840                       		swap	d0
0001AFD2 4240                       		clr.w	d0
0001AFD4 D0A8 0030                  		add.l	$30(a0),d0
0001AFD8 4840                       		swap	d0
0001AFDA 3140 0008                  		move.w	d0,obX(a0)
0001AFDE 3028 0012                  		move.w	obVelY(a0),d0
0001AFE2 3238 D00C                  		move.w	(v_player+obY).w,d1
0001AFE6 9268 000C                  		sub.w	obY(a0),d1
0001AFEA 6500                       		bcs.s	loc_180A2
0001AFEC 0441 0048                  		subi.w	#$48,d1
0001AFF0 6500                       		bcs.s	loc_180A2
0001AFF2 E240                       		asr.w	#1,d0
0001AFF4 0441 0028                  		subi.w	#$28,d1
0001AFF8 6500                       		bcs.s	loc_180A2
0001AFFA E240                       		asr.w	#1,d0
0001AFFC 0441 0028                  		subi.w	#$28,d1
0001B000 6500                       		bcs.s	loc_180A2
0001B002 7000                       		moveq	#0,d0
0001B004                            
0001B004                            loc_180A2:
0001B004 48C0                       		ext.l	d0
0001B006 E180                       		asl.l	#8,d0
0001B008 4A28 003D                  		tst.b	$3D(a0)
0001B00C 6700                       		beq.s	loc_180AE
0001B00E D080                       		add.l	d0,d0
0001B010                            
0001B010                            loc_180AE:
0001B010 D1A8 0038                  		add.l	d0,$38(a0)
0001B014 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B01A 6000 FE8E                  		bra.w	loc_17F48
0001B01E                            ; ===========================================================================
0001B01E                            
0001B01E                            loc_180BC:
0001B01E 70FE                       		moveq	#-2,d0
0001B020 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B026 6500                       		bcs.s	loc_180D2
0001B028 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B02E 4268 0010                  		clr.w	obVelX(a0)
0001B032 5240                       		addq.w	#1,d0
0001B034                            
0001B034                            loc_180D2:
0001B034 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B03A 6E00                       		bgt.s	loc_180E6
0001B03C 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B042 4268 0012                  		clr.w	obVelY(a0)
0001B046 5240                       		addq.w	#1,d0
0001B048                            
0001B048                            loc_180E6:
0001B048 6600                       		bne.s	loc_180F2
0001B04A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B04E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B054                            
0001B054                            loc_180F2:
0001B054 6000 FE44                  		bra.w	loc_17F38
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_180F6:
0001B058 4A28 003D                  		tst.b	$3D(a0)
0001B05C 6600                       		bne.s	loc_18112
0001B05E 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B064 6D00                       		blt.s	loc_18126
0001B066 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B06C 6E00                       		bgt.s	loc_18126
0001B06E 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B074                            
0001B074                            loc_18112:
0001B074 4A38 FE2D                          tst.b     (v_invinc).w
0001B078 6600                               bne.s   @boss_invinc
0001B07A                            
0001B07A 1038 F5C6                          move.b   (v_Saved_music),d0
0001B07E 6000 0000                          bra.w      @boss_play
0001B082                            
0001B082                            @boss_invinc:
0001B082 103C 0000                          move.b #bgm_Invincible,d0
0001B086                            
0001B086                            @boss_play:
0001B086 4EB8 129A                          jsr PlaySound
0001B08A 4238 F7AA                          clr.b    (f_lockscreen).w
0001B08E 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B094 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B098                            
0001B098                            loc_18126:
0001B098 6000 FE00                  		bra.w	loc_17F38
0001B09C                            ; ===========================================================================
0001B09C                            
0001B09C                            loc_1812A:
0001B09C 4A28 003D                  		tst.b	$3D(a0)
0001B0A0 6600                       		bne.s	loc_18136
0001B0A2 5328 003C                  		subq.b	#1,$3C(a0)
0001B0A6 6600                       		bne.s	loc_1814E
0001B0A8                            
0001B0A8                            loc_18136:
0001B0A8 4228 003C                  		clr.b	$3C(a0)
0001B0AC 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B0B2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B0B8 4228 003D                  		clr.b	$3D(a0)
0001B0BC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B0C0                            
0001B0C0                            loc_1814E:
0001B0C0 6000 FDD8                  		bra.w	loc_17F38
0001B0C4                            ; ===========================================================================
0001B0C4                            
0001B0C4                            loc_18152:
0001B0C4 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B0CA 6400                       		bcc.s	loc_18160
0001B0CC 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B0D0 6000                       		bra.s	loc_18166
0001B0D2                            ; ===========================================================================
0001B0D2                            
0001B0D2                            loc_18160:
0001B0D2 4A28 0001                  		tst.b	obRender(a0)
0001B0D6 6A00                       		bpl.s	Obj77_ShipDel
0001B0D8                            
0001B0D8                            loc_18166:
0001B0D8 6000 FDC0                  		bra.w	loc_17F38
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            Obj77_ShipDel:
0001B0DC 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B0E2                            ; ===========================================================================
0001B0E2                            
0001B0E2                            Obj77_FaceMain:	; Routine 4
0001B0E2 2268 0034                  		movea.l	$34(a0),a1
0001B0E6 1011                       		move.b	(a1),d0
0001B0E8 B010                       		cmp.b	(a0),d0
0001B0EA 6600                       		bne.s	Obj77_FaceDel
0001B0EC 7000                       		moveq	#0,d0
0001B0EE 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B0F2 7201                       		moveq	#1,d1
0001B0F4 4A28 003D                  		tst.b	$3D(a0)
0001B0F8 6700                       		beq.s	loc_1818C
0001B0FA 720A                       		moveq	#$A,d1
0001B0FC 6000                       		bra.s	loc_181A0
0001B0FE                            ; ===========================================================================
0001B0FE                            
0001B0FE                            loc_1818C:
0001B0FE 4A29 0020                  		tst.b	obColType(a1)
0001B102 6600                       		bne.s	loc_18196
0001B104 7205                       		moveq	#5,d1
0001B106 6000                       		bra.s	loc_181A0
0001B108                            ; ===========================================================================
0001B108                            
0001B108                            loc_18196:
0001B108 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B10E 6500                       		bcs.s	loc_181A0
0001B110 7204                       		moveq	#4,d1
0001B112                            
0001B112                            loc_181A0:
0001B112 1141 001C                  		move.b	d1,obAnim(a0)
0001B116 0C00 000E                  		cmpi.b	#$E,d0
0001B11A 6600                       		bne.s	loc_181B6
0001B11C 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B122 4A28 0001                  		tst.b	obRender(a0)
0001B126 6A00                       		bpl.s	Obj77_FaceDel
0001B128                            
0001B128                            loc_181B6:
0001B128 6000                       		bra.s	Obj77_Display
0001B12A                            ; ===========================================================================
0001B12A                            
0001B12A                            Obj77_FaceDel:
0001B12A 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B130                            ; ===========================================================================
0001B130                            
0001B130                            Obj77_FlameMain:; Routine 6
0001B130 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B136 2268 0034                  		movea.l	$34(a0),a1
0001B13A 1011                       		move.b	(a1),d0
0001B13C B010                       		cmp.b	(a0),d0
0001B13E 6600                       		bne.s	Obj77_FlameDel
0001B140 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B146 6600                       		bne.s	loc_181F0
0001B148 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B14E 4A28 0001                  		tst.b	1(a0)
0001B152 6A00                       		bpl.s	Obj77_FlameDel
0001B154 6000                       		bra.s	loc_181F0
0001B156                            ; ===========================================================================
0001B156 4A69 0010                  		tst.w	obVelX(a1)
0001B15A 6700                       		beq.s	loc_181F0
0001B15C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B162                            
0001B162                            loc_181F0:
0001B162 6000                       		bra.s	Obj77_Display
0001B164                            ; ===========================================================================
0001B164                            
0001B164                            Obj77_FlameDel:
0001B164 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B16A                            ; ===========================================================================
0001B16A                            
0001B16A                            Obj77_Display:
0001B16A 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001B170 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001B176 2268 0034                  		movea.l	$34(a0),a1
0001B17A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B180 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B186 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B18C 7003                       		moveq	#3,d0
0001B18E C028 0022                  		and.b	obStatus(a0),d0
0001B192 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B198 8128 0001                  		or.b	d0,obRender(a0)
0001B19C 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001B19C 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001B1A2                            		include	"_incObj\73 Boss - Marble.asm"
0001B1A2                            ; ---------------------------------------------------------------------------
0001B1A2                            ; Object 73 - Eggman (MZ)
0001B1A2                            ; ---------------------------------------------------------------------------
0001B1A2                            
0001B1A2                            BossMarble:
0001B1A2 7000                       		moveq	#0,d0
0001B1A4 1028 0024                  		move.b	obRoutine(a0),d0
0001B1A8 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B1AC 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B1B0                            ; ===========================================================================
0001B1B0 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B1B2 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B1B4 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B1B6 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B1B8 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B1BA                            
0001B1BA 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B1BE 0401 0200                  		dc.b 4,	1, $02, $00
0001B1C2 0607 0200                  		dc.b 6,	7, $02, $00
0001B1C6 0800 0180                  		dc.b 8,	0, $01, $80
0001B1CA                            ; ===========================================================================
0001B1CA                            
0001B1CA                            Obj73_Main:	; Routine 0
0001B1CA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B1D0 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B1D6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B1DC 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B1E2 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B1E6 2248                       		movea.l	a0,a1
0001B1E8 7203                       		moveq	#3,d1
0001B1EA 6000                       		bra.s	Obj73_LoadBoss
0001B1EC                            ; ===========================================================================
0001B1EC                            
0001B1EC                            Obj73_Loop:
0001B1EC 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001B1F2 6600                       		bne.s	Obj73_ShipMain
0001B1F4 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B1F8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B1FE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B204                            
0001B204                            Obj73_LoadBoss:
0001B204 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B20A 4229 0025                  		clr.b	ob2ndRout(a1)
0001B20E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B212 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B216 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B21A 237C 0001 AC48 0004        		move.l	#Map_Eggman,obMap(a1)
0001B222 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B228 137C 0004 0001             		move.b	#4,obRender(a1)
0001B22E 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B234 2348 0034                  		move.l	a0,$34(a1)
0001B238 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B23C                            
0001B23C                            Obj73_ShipMain:	; Routine 2
0001B23C 7000                       		moveq	#0,d0
0001B23E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B242 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B246 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B24A 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001B250 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001B256 7003                       		moveq	#3,d0
0001B258 C028 0022                  		and.b	obStatus(a0),d0
0001B25C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B262 8128 0001                  		or.b	d0,obRender(a0)
0001B266 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001B26C                            ; ===========================================================================
0001B26C 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B26E 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B270 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B272 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B274 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B276                            ; ===========================================================================
0001B276                            
0001B276                            loc_18302:
0001B276 1028 003F                  		move.b	$3F(a0),d0
0001B27A 5428 003F                  		addq.b	#2,$3F(a0)
0001B27E 4EB9 0000 3B42             		jsr	(CalcSine).l
0001B284 E440                       		asr.w	#2,d0
0001B286 3140 0012                  		move.w	d0,obVelY(a0)
0001B28A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B290 6100 F552                  		bsr.w	BossMove
0001B294 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B29A 6600                       		bne.s	loc_18334
0001B29C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2A0 4228 0028                  		clr.b	obSubtype(a0)
0001B2A4 42A8 0010                  		clr.l	obVelX(a0)
0001B2A8                            
0001B2A8                            loc_18334:
0001B2A8 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001B2AE 1140 0034                  		move.b	d0,$34(a0)
0001B2B2                            
0001B2B2                            loc_1833E:
0001B2B2 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B2B8 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B2BE 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B2C4 6400                       		bcc.s	locret_18390
0001B2C6 4A28 0022                  		tst.b	obStatus(a0)
0001B2CA 6B00                       		bmi.s	loc_18392
0001B2CC 4A28 0020                  		tst.b	obColType(a0)
0001B2D0 6600                       		bne.s	locret_18390
0001B2D2 4A28 003E                  		tst.b	$3E(a0)
0001B2D6 6600                       		bne.s	loc_18374
0001B2D8 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B2E8                            
0001B2E8                            loc_18374:
0001B2E8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B2EC 7000                       		moveq	#0,d0
0001B2EE 4A51                       		tst.w	(a1)
0001B2F0 6600                       		bne.s	loc_18382
0001B2F2 303C 0EEE                  		move.w	#cWhite,d0
0001B2F6                            
0001B2F6                            loc_18382:
0001B2F6 3280                       		move.w	d0,(a1)
0001B2F8 5328 003E                  		subq.b	#1,$3E(a0)
0001B2FC 6600                       		bne.s	locret_18390
0001B2FE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B304                            
0001B304                            locret_18390:
0001B304 4E75                       		rts	
0001B306                            ; ===========================================================================
0001B306                            
0001B306                            loc_18392:
0001B306 7064                       		moveq	#100,d0
0001B308 6100 0000                  		bsr.w	AddPoints
0001B30C 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B312 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B318 4268 0010                  		clr.w	obVelX(a0)
0001B31C 4E75                       		rts	
0001B31E                            ; ===========================================================================
0001B31E                            
0001B31E                            loc_183AA:
0001B31E 7000                       		moveq	#0,d0
0001B320 1028 0028                  		move.b	obSubtype(a0),d0
0001B324 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B328 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B32C 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B332 6000 FF7E                  		bra.w	loc_1833E
0001B336                            ; ===========================================================================
0001B336 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B338 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B33A 0000                       		dc.w loc_183CA-off_183C2
0001B33C 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B33E                            ; ===========================================================================
0001B33E                            
0001B33E                            loc_183CA:
0001B33E 4A68 0010                  		tst.w	obVelX(a0)
0001B342 6600                       		bne.s	loc_183FE
0001B344 7040                       		moveq	#$40,d0
0001B346 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B34C 6700                       		beq.s	loc_183E6
0001B34E 6500                       		bcs.s	loc_183DE
0001B350 4440                       		neg.w	d0
0001B352                            
0001B352                            loc_183DE:
0001B352 3140 0012                  		move.w	d0,obVelY(a0)
0001B356 6000 F48C                  		bra.w	BossMove
0001B35A                            ; ===========================================================================
0001B35A                            
0001B35A                            loc_183E6:
0001B35A 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B360 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B366 0828 0000 0022             		btst	#0,obStatus(a0)
0001B36C 6600                       		bne.s	loc_183FE
0001B36E 4468 0010                  		neg.w	obVelX(a0)
0001B372                            
0001B372                            loc_183FE:
0001B372 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B378 6400                       		bcc.s	Obj73_MakeLava
0001B37A 6100 F468                  		bsr.w	BossMove
0001B37E 5968 0012                  		subq.w	#4,obVelY(a0)
0001B382                            
0001B382                            Obj73_MakeLava:
0001B382 5328 0034                  		subq.b	#1,$34(a0)
0001B386 6400                       		bcc.s	loc_1845C
0001B388 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001B38E 6600                       		bne.s	loc_1844A
0001B390 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B394 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B39A 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001B3A0 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B3A6 80FC 0050                  		divu.w	#$50,d0
0001B3AA 4840                       		swap	d0
0001B3AC 0640 1878                  		addi.w	#$1878,d0
0001B3B0 3340 0008                  		move.w	d0,obX(a1)
0001B3B4 EE09                       		lsr.b	#7,d1
0001B3B6 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B3BC                            
0001B3BC                            loc_1844A:
0001B3BC 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001B3C2 0200 001F                  		andi.b	#$1F,d0
0001B3C6 0600 0040                  		addi.b	#$40,d0
0001B3CA 1140 0034                  		move.b	d0,$34(a0)
0001B3CE                            
0001B3CE                            loc_1845C:
0001B3CE 0828 0000 0022             		btst	#0,obStatus(a0)
0001B3D4 6700                       		beq.s	loc_18474
0001B3D6 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B3DC 6D00                       		blt.s	locret_1849C
0001B3DE 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B3E4 6000                       		bra.s	loc_18482
0001B3E6                            ; ===========================================================================
0001B3E6                            
0001B3E6                            loc_18474:
0001B3E6 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B3EC 6E00                       		bgt.s	locret_1849C
0001B3EE 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B3F4                            
0001B3F4                            loc_18482:
0001B3F4 4268 0010                  		clr.w	obVelX(a0)
0001B3F8 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B3FE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B404 6400                       		bcc.s	loc_18498
0001B406 4468 0012                  		neg.w	obVelY(a0)
0001B40A                            
0001B40A                            loc_18498:
0001B40A 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B40E                            
0001B40E                            locret_1849C:
0001B40E 4E75                       		rts	
0001B410                            ; ===========================================================================
0001B410                            
0001B410                            Obj73_MakeLava2:
0001B410 6100 F3D2                  		bsr.w	BossMove
0001B414 3028 0038                  		move.w	$38(a0),d0
0001B418 0440 022C                  		subi.w	#$22C,d0
0001B41C 6E00                       		bgt.s	locret_184F4
0001B41E 303C 022C                  		move.w	#$22C,d0
0001B422 4A68 0012                  		tst.w	obVelY(a0)
0001B426 6700                       		beq.s	loc_184EA
0001B428 4268 0012                  		clr.w	obVelY(a0)
0001B42C 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B432 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B438 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001B43E 6600                       		bne.s	loc_184EA
0001B440 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B446 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B44C 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B452 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B456 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B45C                            
0001B45C                            loc_184EA:
0001B45C 5368 003C                  		subq.w	#1,$3C(a0)
0001B460 6600                       		bne.s	locret_184F4
0001B462 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B466                            
0001B466                            locret_184F4:
0001B466 4E75                       		rts	
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            loc_184F6:
0001B468 5368 003C                  		subq.w	#1,$3C(a0)
0001B46C 6B00                       		bmi.s	loc_18500
0001B46E 6000 F332                  		bra.w	BossDefeated
0001B472                            ; ===========================================================================
0001B472                            
0001B472                            loc_18500:
0001B472 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B478 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B47E 4268 0010                  		clr.w	obVelX(a0)
0001B482 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B486 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B48C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B490 6600                       		bne.s	locret_1852A
0001B492 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B498 4268 0012                  		clr.w	obVelY(a0)
0001B49C                            
0001B49C                            locret_1852A:
0001B49C 4E75                       		rts	
0001B49E                            ; ===========================================================================
0001B49E                            
0001B49E                            loc_1852C:
0001B49E 5268 003C                  		addq.w	#1,$3C(a0)
0001B4A2 6700                       		beq.s	loc_18544
0001B4A4 6A00                       		bpl.s	loc_1854E
0001B4A6 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B4AC 6400                       		bcc.s	loc_18544
0001B4AE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B4B4 6000                       		bra.s	loc_1857A
0001B4B6                            ; ===========================================================================
0001B4B6                            
0001B4B6                            loc_18544:
0001B4B6 4268 0012                  		clr.w	obVelY(a0)
0001B4BA 4268 003C                  		clr.w	$3C(a0)
0001B4BE 6000                       		bra.s	loc_1857A
0001B4C0                            ; ===========================================================================
0001B4C0                            
0001B4C0                            loc_1854E:
0001B4C0 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B4C6 6500                       		bcs.s	loc_18566
0001B4C8 6700                       		beq.s	loc_1856C
0001B4CA 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B4D0 6500                       		bcs.s	loc_1857A
0001B4D2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4D6 6000                       		bra.s	loc_1857A
0001B4D8                            ; ===========================================================================
0001B4D8                            
0001B4D8                            loc_18566:
0001B4D8 5168 0012                  		subq.w	#8,obVelY(a0)
0001B4DC 6000                       		bra.s	loc_1857A
0001B4DE                            ; ===========================================================================
0001B4DE                            
0001B4DE                            loc_1856C:
0001B4DE 4268 0012                  		clr.w	obVelY(a0)
0001B4EC                            
0001B4EC                            loc_1857A:
0001B4EC 6100 F2F6                  		bsr.w	BossMove
0001B4F0 6000 FDC0                  		bra.w	loc_1833E
0001B4F4                            ; ===========================================================================
0001B4F4                            
0001B4F4                            loc_18582:
0001B4F4 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B4FA 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B500 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B506 6400                       		bcc.s	loc_1859C
0001B508 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B50C 6000                       		bra.s	loc_185A2
0001B50E                            ; ===========================================================================
0001B50E                            
0001B50E                            loc_1859C:
0001B50E 4A28 0001                  		tst.b	obRender(a0)
0001B512 6A00                       		bpl.s	Obj73_ShipDel
0001B514                            
0001B514                            loc_185A2:
0001B514 6100 F2CE                  		bsr.w	BossMove
0001B518 6000 FD98                  		bra.w	loc_1833E
0001B51C                            ; ===========================================================================
0001B51C                            
0001B51C                            Obj73_ShipDel:
0001B51C 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B522                            ; ===========================================================================
0001B522                            
0001B522                            Obj73_FaceMain:	; Routine 4
0001B522 7000                       		moveq	#0,d0
0001B524 7201                       		moveq	#1,d1
0001B526 2268 0034                  		movea.l	$34(a0),a1
0001B52A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B52E 5540                       		subq.w	#2,d0
0001B530 6600                       		bne.s	loc_185D2
0001B532 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B538 6700                       		beq.s	loc_185DA
0001B53A 4A69 0012                  		tst.w	obVelY(a1)
0001B53E 6600                       		bne.s	loc_185DA
0001B540 7204                       		moveq	#4,d1
0001B542 6000                       		bra.s	loc_185EE
0001B544                            ; ===========================================================================
0001B544                            
0001B544                            loc_185D2:
0001B544 5500                       		subq.b	#2,d0
0001B546 6B00                       		bmi.s	loc_185DA
0001B548 720A                       		moveq	#$A,d1
0001B54A 6000                       		bra.s	loc_185EE
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            loc_185DA:
0001B54C 4A29 0020                  		tst.b	obColType(a1)
0001B550 6600                       		bne.s	loc_185E4
0001B552 7205                       		moveq	#5,d1
0001B554 6000                       		bra.s	loc_185EE
0001B556                            ; ===========================================================================
0001B556                            
0001B556                            loc_185E4:
0001B556 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B55C 6500                       		bcs.s	loc_185EE
0001B55E 7204                       		moveq	#4,d1
0001B560                            
0001B560                            loc_185EE:
0001B560 1141 001C                  		move.b	d1,obAnim(a0)
0001B564 5900                       		subq.b	#4,d0
0001B566 6600                       		bne.s	loc_18602
0001B568 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B56E 4A28 0001                  		tst.b	obRender(a0)
0001B572 6A00                       		bpl.s	Obj73_FaceDel
0001B574                            
0001B574                            loc_18602:
0001B574 6000                       		bra.s	Obj73_Display
0001B576                            ; ===========================================================================
0001B576                            
0001B576                            Obj73_FaceDel:
0001B576 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B57C                            ; ===========================================================================
0001B57C                            
0001B57C                            Obj73_FlameMain:; Routine 6
0001B57C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B582 2268 0034                  		movea.l	$34(a0),a1
0001B586 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B58C 6D00                       		blt.s	loc_1862A
0001B58E 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B594 4A28 0001                  		tst.b	obRender(a0)
0001B598 6A00                       		bpl.s	Obj73_FlameDel
0001B59A 6000                       		bra.s	loc_18636
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            loc_1862A:
0001B59C 4A69 0010                  		tst.w	obVelX(a1)
0001B5A0 6700                       		beq.s	loc_18636
0001B5A2 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B5A8                            
0001B5A8                            loc_18636:
0001B5A8 6000                       		bra.s	Obj73_Display
0001B5AA                            ; ===========================================================================
0001B5AA                            
0001B5AA                            Obj73_FlameDel:
0001B5AA 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B5B0                            ; ===========================================================================
0001B5B0                            
0001B5B0                            Obj73_Display:
0001B5B0 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001B5B6 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001B5BC                            
0001B5BC                            loc_1864A:
0001B5BC 2268 0034                  		movea.l	$34(a0),a1
0001B5C0 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B5C6 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B5CC 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B5D2 7003                       		moveq	#3,d0
0001B5D4 C028 0022                  		and.b	obStatus(a0),d0
0001B5D8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B5DE 8128 0001                  		or.b	d0,obRender(a0)
0001B5E2 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001B5E8                            ; ===========================================================================
0001B5E8                            
0001B5E8                            Obj73_TubeMain:	; Routine 8
0001B5E8 2268 0034                  		movea.l	$34(a0),a1
0001B5EC 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B5F2 6600                       		bne.s	loc_18688
0001B5F4 4A28 0001                  		tst.b	obRender(a0)
0001B5F8 6A00                       		bpl.s	Obj73_TubeDel
0001B5FA                            
0001B5FA                            loc_18688:
0001B5FA 217C 0001 AD38 0004        		move.l	#Map_BossItems,obMap(a0)
0001B602 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B608 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B60E 60AC                       		bra.s	loc_1864A
0001B610                            ; ===========================================================================
0001B610                            
0001B610                            Obj73_TubeDel:
0001B610 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B610 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B616                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B616                            ; ---------------------------------------------------------------------------
0001B616                            ; Object 74 - lava that	Eggman drops (MZ)
0001B616                            ; ---------------------------------------------------------------------------
0001B616                            
0001B616                            BossFire:
0001B616 7000                       		moveq	#0,d0
0001B618 1028 0024                  		move.b	obRoutine(a0),d0
0001B61C 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B620 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B624 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001B62A                            ; ===========================================================================
0001B62A 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B62C 0000                       		dc.w Obj74_Action-Obj74_Index
0001B62E 0000                       		dc.w loc_18886-Obj74_Index
0001B630 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B632                            ; ===========================================================================
0001B632                            
0001B632                            Obj74_Main:	; Routine 0
0001B632 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B638 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B63E 217C 0000 D132 0004        		move.l	#Map_Fire,obMap(a0)
0001B646 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B64C 117C 0004 0001             		move.b	#4,obRender(a0)
0001B652 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B658 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B65E 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B664 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B668 4A28 0028                  		tst.b	obSubtype(a0)
0001B66C 6600                       		bne.s	loc_1870A
0001B66E 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B674 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B678 6000 0000                  		bra.w	loc_18886
0001B67C                            ; ===========================================================================
0001B67C                            
0001B67C                            loc_1870A:
0001B67C 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B68C                            
0001B68C                            Obj74_Action:	; Routine 2
0001B68C 7000                       		moveq	#0,d0
0001B68E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B692 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B696 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B69A 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001B6A0 43F9 0001 03F8             		lea	(Ani_Fire).l,a1
0001B6A6 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001B6AC 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B6B2 6200                       		bhi.s	Obj74_Delete
0001B6B4 4E75                       		rts	
0001B6B6                            ; ===========================================================================
0001B6B6                            
0001B6B6                            Obj74_Delete:
0001B6B6 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B6BC                            ; ===========================================================================
0001B6BC 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B6BE 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B6C0 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B6C2 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B6C4                            ; ===========================================================================
0001B6C4                            
0001B6C4                            Obj74_Drop:
0001B6C4 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B6CA 5328 0029                  		subq.b	#1,$29(a0)
0001B6CE 6A00                       		bpl.s	locret_18780
0001B6D0 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B6D6 4228 0028                  		clr.b	obSubtype(a0)
0001B6DA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B6E0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B6E6 6100 C626                  		bsr.w	ObjFloorDist
0001B6EA 4A41                       		tst.w	d1
0001B6EC 6A00                       		bpl.s	locret_18780
0001B6EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6F2                            
0001B6F2                            locret_18780:
0001B6F2 4E75                       		rts	
0001B6F4                            ; ===========================================================================
0001B6F4                            
0001B6F4                            Obj74_MakeFlame:
0001B6F4 5568 000C                  		subq.w	#2,obY(a0)
0001B6F8 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B6FE 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B704 4268 0012                  		clr.w	obVelY(a0)
0001B708 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B70E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B714 117C 0003 0029             		move.b	#3,$29(a0)
0001B71A 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001B720 6600                       		bne.s	loc_187CA
0001B722 47D1                       		lea	(a1),a3
0001B724 45D0                       		lea	(a0),a2
0001B726 7003                       		moveq	#3,d0
0001B728                            
0001B728                            Obj74_Loop:
0001B728 26DA                       		move.l	(a2)+,(a3)+
0001B72A 26DA                       		move.l	(a2)+,(a3)+
0001B72C 26DA                       		move.l	(a2)+,(a3)+
0001B72E 26DA                       		move.l	(a2)+,(a3)+
0001B730 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B734                            
0001B734 4469 0010                  		neg.w	obVelX(a1)
0001B738 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B73C                            
0001B73C                            loc_187CA:
0001B73C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B740 4E75                       		rts	
0001B742                            
0001B742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B742                            
0001B742                            
0001B742                            Obj74_Duplicate2:
0001B742 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001B748 6600                       		bne.s	locret_187EE
0001B74A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B750 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B756 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B75A 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B760                            
0001B760                            locret_187EE:
0001B760 4E75                       		rts	
0001B762                            ; End of function Obj74_Duplicate2
0001B762                            
0001B762                            ; ===========================================================================
0001B762                            
0001B762                            Obj74_Duplicate:
0001B762 6100 C5AA                  		bsr.w	ObjFloorDist
0001B766 4A41                       		tst.w	d1
0001B768 6A00                       		bpl.s	loc_18826
0001B76A 3028 0008                  		move.w	obX(a0),d0
0001B76E 0C40 1940                  		cmpi.w	#$1940,d0
0001B772 6E00                       		bgt.s	loc_1882C
0001B774 3228 0030                  		move.w	$30(a0),d1
0001B778 B240                       		cmp.w	d0,d1
0001B77A 6700                       		beq.s	loc_1881E
0001B77C 0240 0010                  		andi.w	#$10,d0
0001B780 0241 0010                  		andi.w	#$10,d1
0001B784 B240                       		cmp.w	d0,d1
0001B786 6700                       		beq.s	loc_1881E
0001B788 61B8                       		bsr.s	Obj74_Duplicate2
0001B78A 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B790                            
0001B790                            loc_1881E:
0001B790 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B796 4E75                       		rts	
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            loc_18826:
0001B798 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B79C 4E75                       		rts	
0001B79E                            ; ===========================================================================
0001B79E                            
0001B79E                            loc_1882C:
0001B79E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B7A2 4E75                       		rts	
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            Obj74_FallEdge:
0001B7A4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B7AA 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B7B0 3028 0008                  		move.w	obX(a0),d0
0001B7B4 9068 0032                  		sub.w	$32(a0),d0
0001B7B8 6A00                       		bpl.s	loc_1884A
0001B7BA 4440                       		neg.w	d0
0001B7BC                            
0001B7BC                            loc_1884A:
0001B7BC 0C40 0012                  		cmpi.w	#$12,d0
0001B7C0 6600                       		bne.s	loc_18856
0001B7C2 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B7C8                            
0001B7C8                            loc_18856:
0001B7C8 6100 C544                  		bsr.w	ObjFloorDist
0001B7CC 4A41                       		tst.w	d1
0001B7CE 6A00                       		bpl.s	locret_1887E
0001B7D0 5328 0029                  		subq.b	#1,$29(a0)
0001B7D4 6700                       		beq.s	Obj74_Delete2
0001B7D6 4268 0012                  		clr.w	obVelY(a0)
0001B7DA 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B7E0 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B7E6 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B7EC 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B7F0                            
0001B7F0                            locret_1887E:
0001B7F0 4E75                       		rts	
0001B7F2                            ; ===========================================================================
0001B7F2                            
0001B7F2                            Obj74_Delete2:
0001B7F2 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B7F8                            ; ===========================================================================
0001B7F8                            
0001B7F8                            loc_18886:	; Routine 4
0001B7F8 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B7FE 5328 0029                  		subq.b	#1,$29(a0)
0001B802 6600                       		bne.s	Obj74_Animate
0001B804 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B80A 5968 000C                  		subq.w	#4,obY(a0)
0001B80E 4228 0020                  		clr.b	obColType(a0)
0001B812                            
0001B812                            Obj74_Animate:
0001B812 43F9 0001 03F8             		lea	(Ani_Fire).l,a1
0001B818 4EF9 0000 C4E0             		jmp	(AnimateSprite).l
0001B81E                            ; ===========================================================================
0001B81E                            
0001B81E                            Obj74_Delete3:	; Routine 6
0001B81E 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B81E 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B824                            
0001B824                            	Obj7A_Delete:
0001B824 4EF9 0000 F466             		jmp	(DeleteObject).l
0001B82A                            
0001B82A                            		include	"_incObj\7A Boss - Star Light.asm"
0001B82A                            ; ---------------------------------------------------------------------------
0001B82A                            ; Object 7A - Eggman (SLZ)
0001B82A                            ; ---------------------------------------------------------------------------
0001B82A                            
0001B82A                            BossStarLight:
0001B82A 7000                       		moveq	#0,d0
0001B82C 1028 0024                  		move.b	obRoutine(a0),d0
0001B830 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001B834 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001B838                            ; ===========================================================================
0001B838 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001B83A 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001B83C 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001B83E 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001B840 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001B842                            
0001B842 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B846 0401 0200                  		dc.b 4,	1, $02, $00
0001B84A 0607 0200                  		dc.b 6,	7, $02, $00
0001B84E 0800 0180                  		dc.b 8,	0, $01, $80
0001B852                            ; ===========================================================================
0001B852                            
0001B852                            Obj7A_Main:
0001B852 317C 2188 0008             		move.w	#$2188,obX(a0)
0001B858 317C 0228 000C             		move.w	#$228,obY(a0)
0001B85E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B864 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B86A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B870 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B876 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001B87A 2248                       		movea.l	a0,a1
0001B87C 7203                       		moveq	#3,d1
0001B87E 6000                       		bra.s	Obj7A_LoadBoss
0001B880                            ; ===========================================================================
0001B880                            
0001B880                            Obj7A_Loop:
0001B880 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001B886 6600                       		bne.s	loc_1895C
0001B888 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001B88C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B892 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B898                            
0001B898                            Obj7A_LoadBoss:
0001B898 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B89E 4229 0025                  		clr.b	ob2ndRout(a1)
0001B8A2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B8A6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B8AA 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001B8AE 237C 0001 AC48 0004        		move.l	#Map_Eggman,obMap(a1)
0001B8B6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B8BC 137C 0004 0001             		move.b	#4,obRender(a1)
0001B8C2 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B8C8 2348 0034                  		move.l	a0,$34(a1)
0001B8CC 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001B8D0                            
0001B8D0                            loc_1895C:
0001B8D0 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001B8D4 45E8 002A                  		lea	$2A(a0),a2
0001B8D8 705E                       		moveq	#$5E,d0
0001B8DA 723E                       		moveq	#$3E,d1
0001B8DC                            
0001B8DC                            loc_18968:
0001B8DC B011                       		cmp.b	(a1),d0
0001B8DE 6600                       		bne.s	loc_18974
0001B8E0 4A29 0028                  		tst.b	obSubtype(a1)
0001B8E4 6700                       		beq.s	loc_18974
0001B8E6 34C9                       		move.w	a1,(a2)+
0001B8E8                            
0001B8E8                            loc_18974:
0001B8E8 D2FC 0040                  		adda.w	#$40,a1
0001B8EC 51C9 FFEE                  		dbf	d1,loc_18968
0001B8F0                            
0001B8F0                            Obj7A_ShipMain:	; Routine 2
0001B8F0 7000                       		moveq	#0,d0
0001B8F2 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B8F6 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001B8FA 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001B8FE 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001B904 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001B90A 7003                       		moveq	#3,d0
0001B90C C028 0022                  		and.b	obStatus(a0),d0
0001B910 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B916 8128 0001                  		or.b	d0,obRender(a0)
0001B91A 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001B920                            ; ===========================================================================
0001B920 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001B922 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001B924 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001B926 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001B928 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001B92A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001B92C                            ; ===========================================================================
0001B92C                            
0001B92C                            loc_189B8:
0001B92C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B932 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001B938 6400                       		bcc.s	loc_189CA
0001B93A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B93E                            
0001B93E                            loc_189CA:
0001B93E 6100 EEA4                  		bsr.w	BossMove
0001B942 1028 003F                  		move.b	$3F(a0),d0
0001B946 5428 003F                  		addq.b	#2,$3F(a0)
0001B94A 4EB9 0000 3B42             		jsr	(CalcSine).l
0001B950 EC40                       		asr.w	#6,d0
0001B952 D068 0038                  		add.w	$38(a0),d0
0001B956 3140 000C                  		move.w	d0,obY(a0)
0001B95A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B960 6000                       		bra.s	loc_189FE
0001B962                            ; ===========================================================================
0001B962                            
0001B962                            loc_189EE:
0001B962 6100 EE80                  		bsr.w	BossMove
0001B966 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B96C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B972                            
0001B972                            loc_189FE:
0001B972 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001B978 6400                       		bcc.s	locret_18A44
0001B97A 4A28 0022                  		tst.b	obStatus(a0)
0001B97E 6B00                       		bmi.s	loc_18A46
0001B980 4A28 0020                  		tst.b	obColType(a0)
0001B984 6600                       		bne.s	locret_18A44
0001B986 4A28 003E                  		tst.b	$3E(a0)
0001B98A 6600                       		bne.s	loc_18A28
0001B98C 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B99C                            
0001B99C                            loc_18A28:
0001B99C 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B9A0 7000                       		moveq	#0,d0
0001B9A2 4A51                       		tst.w	(a1)
0001B9A4 6600                       		bne.s	loc_18A36
0001B9A6 303C 0EEE                  		move.w	#cWhite,d0
0001B9AA                            
0001B9AA                            loc_18A36:
0001B9AA 3280                       		move.w	d0,(a1)
0001B9AC 5328 003E                  		subq.b	#1,$3E(a0)
0001B9B0 6600                       		bne.s	locret_18A44
0001B9B2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B9B8                            
0001B9B8                            locret_18A44:
0001B9B8 4E75                       		rts	
0001B9BA                            ; ===========================================================================
0001B9BA                            
0001B9BA                            loc_18A46:
0001B9BA 7064                       		moveq	#100,d0
0001B9BC 6100 0000                  		bsr.w	AddPoints
0001B9C0 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001B9C6 117C 0078 003C             		move.b	#$78,$3C(a0)
0001B9CC 4268 0010                  		clr.w	obVelX(a0)
0001B9D0 4E75                       		rts	
0001B9D2                            ; ===========================================================================
0001B9D2                            
0001B9D2                            loc_18A5E:
0001B9D2 3028 0030                  		move.w	$30(a0),d0
0001B9D6 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B9DC 0828 0000 0022             		btst	#0,obStatus(a0)
0001B9E2 6600                       		bne.s	loc_18A7C
0001B9E4 4468 0010                  		neg.w	obVelX(a0)
0001B9E8 0C40 2008                  		cmpi.w	#$2008,d0
0001B9EC 6E00                       		bgt.s	loc_18A88
0001B9EE 6000                       		bra.s	loc_18A82
0001B9F0                            ; ===========================================================================
0001B9F0                            
0001B9F0                            loc_18A7C:
0001B9F0 0C40 2138                  		cmpi.w	#$2138,d0
0001B9F4 6D00                       		blt.s	loc_18A88
0001B9F6                            
0001B9F6                            loc_18A82:
0001B9F6 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B9FC                            
0001B9FC                            loc_18A88:
0001B9FC 3028 0008                  		move.w	8(a0),d0
0001BA00 72FF                       		moveq	#-1,d1
0001BA02 7402                       		moveq	#2,d2
0001BA04 45E8 002A                  		lea	$2A(a0),a2
0001BA08 7828                       		moveq	#$28,d4
0001BA0A 4A68 0010                  		tst.w	obVelX(a0)
0001BA0E 6A00                       		bpl.s	loc_18A9E
0001BA10 4444                       		neg.w	d4
0001BA12                            
0001BA12                            loc_18A9E:
0001BA12 321A                       		move.w	(a2)+,d1
0001BA14 2641                       		movea.l	d1,a3
0001BA16 082B 0003 0022             		btst	#3,obStatus(a3)
0001BA1C 6600                       		bne.s	loc_18AB4
0001BA1E 362B 0008                  		move.w	8(a3),d3
0001BA22 D644                       		add.w	d4,d3
0001BA24 9640                       		sub.w	d0,d3
0001BA26 6700                       		beq.s	loc_18AC0
0001BA28                            
0001BA28                            loc_18AB4:
0001BA28 51CA FFE8                  		dbf	d2,loc_18A9E
0001BA2C                            
0001BA2C 1142 0028                  		move.b	d2,obSubtype(a0)
0001BA30 6000 FF0C                  		bra.w	loc_189CA
0001BA34                            ; ===========================================================================
0001BA34                            
0001BA34                            loc_18AC0:
0001BA34 1142 0028                  		move.b	d2,obSubtype(a0)
0001BA38 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA3C 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BA42 6000 FEFA                  		bra.w	loc_189CA
0001BA46                            ; ===========================================================================
0001BA46                            
0001BA46                            Obj7A_MakeBall:
0001BA46 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BA4C 6600                       		bne.s	loc_18B36
0001BA4E 70FF                       		moveq	#-1,d0
0001BA50 1028 0028                  		move.b	obSubtype(a0),d0
0001BA54 4880                       		ext.w	d0
0001BA56 6B00                       		bmi.s	loc_18B40
0001BA58 5540                       		subq.w	#2,d0
0001BA5A 4440                       		neg.w	d0
0001BA5C D040                       		add.w	d0,d0
0001BA5E 43E8 002A                  		lea	$2A(a0),a1
0001BA62 3031 0000                  		move.w	(a1,d0.w),d0
0001BA66 2440                       		movea.l	d0,a2
0001BA68 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BA6C 723E                       		moveq	#$3E,d1
0001BA6E                            
0001BA6E                            loc_18AFA:
0001BA6E B0A9 003C                  		cmp.l	$3C(a1),d0
0001BA72 6700                       		beq.s	loc_18B40
0001BA74 D2FC 0040                  		adda.w	#$40,a1
0001BA78 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BA7C                            
0001BA7C 2F08                       		move.l	a0,-(sp)
0001BA7E 41D2                       		lea	(a2),a0
0001BA80 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001BA86 205F                       		movea.l	(sp)+,a0
0001BA88 6600                       		bne.s	loc_18B40
0001BA8A 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BA8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA94 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA9A 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BAA0 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BAA6 234A 003C                  		move.l	a2,$3C(a1)
0001BAAA                            
0001BAAA                            loc_18B36:
0001BAAA 5328 003C                  		subq.b	#1,$3C(a0)
0001BAAE 6700                       		beq.s	loc_18B40
0001BAB0 6000 FEC0                  		bra.w	loc_189FE
0001BAB4                            ; ===========================================================================
0001BAB4                            
0001BAB4                            loc_18B40:
0001BAB4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BAB8 6000 FE84                  		bra.w	loc_189CA
0001BABC                            ; ===========================================================================
0001BABC                            
0001BABC                            loc_18B48:
0001BABC 5328 003C                  		subq.b	#1,$3C(a0)
0001BAC0 6B00                       		bmi.s	loc_18B52
0001BAC2 6000 ECDE                  		bra.w	BossDefeated
0001BAC6                            ; ===========================================================================
0001BAC6                            
0001BAC6                            loc_18B52:
0001BAC6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BACA 4268 0012                  		clr.w	obVelY(a0)
0001BACE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BAD4 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BADA 4268 0010                  		clr.w	obVelX(a0)
0001BADE 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BAE4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BAE8 6600                       		bne.s	loc_18B7C
0001BAEA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BAF0                            
0001BAF0                            loc_18B7C:
0001BAF0 6000 FE80                  		bra.w	loc_189FE
0001BAF4                            ; ===========================================================================
0001BAF4                            
0001BAF4                            loc_18B80:
0001BAF4 5228 003C                  		addq.b	#1,$3C(a0)
0001BAF8 6700                       		beq.s	loc_18B90
0001BAFA 6A00                       		bpl.s	loc_18B96
0001BAFC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BB02 6000                       		bra.s	loc_18BC2
0001BB04                            ; ===========================================================================
0001BB04                            
0001BB04                            loc_18B90:
0001BB04 4268 0012                  		clr.w	obVelY(a0)
0001BB08 6000                       		bra.s	loc_18BC2
0001BB0A                            ; ===========================================================================
0001BB0A                            
0001BB0A                            loc_18B96:
0001BB0A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BB10 6500                       		bcs.s	loc_18BAE
0001BB12 6700                       		beq.s	loc_18BB4
0001BB14 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BB1A 6500                       		bcs.s	loc_18BC2
0001BB1C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB20 6000                       		bra.s	loc_18BC2
0001BB22                            ; ===========================================================================
0001BB22                            
0001BB22                            loc_18BAE:
0001BB22 5168 0012                  		subq.w	#8,obVelY(a0)
0001BB26 6000                       		bra.s	loc_18BC2
0001BB28                            ; ===========================================================================
0001BB28                            
0001BB28                            loc_18BB4:
0001BB28 4268 0012                          	clr.w    obVelY(a0)
0001BB2C 4A38 FE2D                          	tst.b     (v_invinc).w
0001BB30 6600                               	bne.s   @boss_invinc
0001BB32                            
0001BB32 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BB36 6000 0000                          	bra.w      @boss_play
0001BB3A                            
0001BB3A                            	@boss_invinc:
0001BB3A 103C 0000                          	move.b #bgm_Invincible,d0
0001BB3E                            
0001BB3E                            	@boss_play:
0001BB3E 4EB8 129A                          	jsr PlaySound
0001BB42                            
0001BB42                            loc_18BC2:
0001BB42 6000 FE1E                  		bra.w	loc_189EE
0001BB46                            ; ===========================================================================
0001BB46                            
0001BB46                            loc_18BC6:
0001BB46 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BB4C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BB52 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BB58 6400                       		bcc.s	loc_18BE0
0001BB5A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BB5E 6000                       		bra.s	loc_18BE8
0001BB60                            ; ===========================================================================
0001BB60                            
0001BB60                            loc_18BE0:
0001BB60 4A28 0001                  		tst.b	obRender(a0)
0001BB64 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BB68                            
0001BB68                            loc_18BE8:
0001BB68 6100 EC7A                  		bsr.w	BossMove
0001BB6C 6000 FDD0                  		bra.w	loc_189CA
0001BB70                            ; ===========================================================================
0001BB70                            
0001BB70                            Obj7A_FaceMain:	; Routine 4
0001BB70 7000                       		moveq	#0,d0
0001BB72 7201                       		moveq	#1,d1
0001BB74 2268 0034                  		movea.l	$34(a0),a1
0001BB78 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BB7C 0C00 0006                  		cmpi.b	#6,d0
0001BB80 6B00                       		bmi.s	loc_18C06
0001BB82 720A                       		moveq	#$A,d1
0001BB84 6000                       		bra.s	loc_18C1A
0001BB86                            ; ===========================================================================
0001BB86                            
0001BB86                            loc_18C06:
0001BB86 4A29 0020                  		tst.b	obColType(a1)
0001BB8A 6600                       		bne.s	loc_18C10
0001BB8C 7205                       		moveq	#5,d1
0001BB8E 6000                       		bra.s	loc_18C1A
0001BB90                            ; ===========================================================================
0001BB90                            
0001BB90                            loc_18C10:
0001BB90 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BB96 6500                       		bcs.s	loc_18C1A
0001BB98 7204                       		moveq	#4,d1
0001BB9A                            
0001BB9A                            loc_18C1A:
0001BB9A 1141 001C                  		move.b	d1,obAnim(a0)
0001BB9E 0C00 000A                  		cmpi.b	#$A,d0
0001BBA2 6600                       		bne.s	loc_18C32
0001BBA4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BBAA 4A28 0001                  		tst.b	obRender(a0)
0001BBAE 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BBB2                            
0001BBB2                            loc_18C32:
0001BBB2 6000                       		bra.s	loc_18C6C
0001BBB4                            ; ===========================================================================
0001BBB4                            
0001BBB4                            Obj7A_FlameMain:; Routine 6
0001BBB4 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BBBA 2268 0034                  		movea.l	$34(a0),a1
0001BBBE 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BBC4 6600                       		bne.s	loc_18C56
0001BBC6 4A28 0001                  		tst.b	obRender(a0)
0001BBCA 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BBCE 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BBD4 6000                       		bra.s	loc_18C6C
0001BBD6                            ; ===========================================================================
0001BBD6                            
0001BBD6                            loc_18C56:
0001BBD6 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BBDC 6E00                       		bgt.s	loc_18C6C
0001BBDE 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BBE4 6D00                       		blt.s	loc_18C6C
0001BBE6 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BBEC                            
0001BBEC                            loc_18C6C:
0001BBEC 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001BBF2 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001BBF8                            
0001BBF8                            loc_18C78:
0001BBF8 2268 0034                  		movea.l	$34(a0),a1
0001BBFC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BC02 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BC08 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BC0E 7003                       		moveq	#3,d0
0001BC10 C028 0022                  		and.b	obStatus(a0),d0
0001BC14 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BC1A 8128 0001                  		or.b	d0,obRender(a0)
0001BC1E 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001BC24                            ; ===========================================================================
0001BC24                            
0001BC24                            Obj7A_TubeMain:	; Routine 8
0001BC24 2268 0034                  		movea.l	$34(a0),a1
0001BC28 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BC2E 6600                       		bne.s	loc_18CB8
0001BC30 4A28 0001                  		tst.b	obRender(a0)
0001BC34 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BC38                            
0001BC38                            loc_18CB8:
0001BC38 217C 0001 AD38 0004        		move.l	#Map_BossItems,obMap(a0)
0001BC40 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BC46 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BC4C 60AA                       		bra.s	loc_18C78
0001BC4C 60AA                       		bra.s	loc_18C78
0001BC4E                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BC4E                            ; ---------------------------------------------------------------------------
0001BC4E                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BC4E                            ; ---------------------------------------------------------------------------
0001BC4E                            
0001BC4E                            BossSpikeball:
0001BC4E 7000                       		moveq	#0,d0
0001BC50 1028 0024                  		move.b	obRoutine(a0),d0
0001BC54 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BC58 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BC5C 3028 0030                  		move.w	$30(a0),d0
0001BC60 0240 FF80                  		andi.w	#$FF80,d0
0001BC64 3238 F700                  		move.w	(v_screenposx).w,d1
0001BC68 0441 0080                  		subi.w	#$80,d1
0001BC6C 0241 FF80                  		andi.w	#$FF80,d1
0001BC70 9041                       		sub.w	d1,d0
0001BC72 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BC76 0C40 0280                  		cmpi.w	#$280,d0
0001BC7A 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BC7E 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001BC84                            ; ===========================================================================
0001BC84 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BC86 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BC88 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BC8A 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BC8C 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BC8E 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BC90                            ; ===========================================================================
0001BC90                            
0001BC90                            Obj7B_Main:	; Routine 0
0001BC90 217C 0001 39D2 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BC98 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BC9E 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BCA4 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BCAA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BCB0 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BCB6 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BCBC 2268 003C                  		movea.l	$3C(a0),a1
0001BCC0 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BCC6 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BCCC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCD2 3028 0008                  		move.w	obX(a0),d0
0001BCD6 B069 0008                  		cmp.w	obX(a1),d0
0001BCDA 6E00                       		bgt.s	loc_18D68
0001BCDC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BCE2 117C 0002 003A             		move.b	#2,$3A(a0)
0001BCE8                            
0001BCE8                            loc_18D68:
0001BCE8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BCEC                            
0001BCEC                            Obj7B_Fall:	; Routine 2
0001BCEC 4EB9 0000 F3DA             		jsr	(ObjectFall).l
0001BCF2 2268 003C                  		movea.l	$3C(a0),a1
0001BCF6 45F9 0000 0000             		lea	(word_19018).l,a2
0001BCFC 7000                       		moveq	#0,d0
0001BCFE 1029 001A                  		move.b	obFrame(a1),d0
0001BD02 3228 0008                  		move.w	8(a0),d1
0001BD06 9268 0030                  		sub.w	$30(a0),d1
0001BD0A 6400                       		bcc.s	loc_18D8E
0001BD0C 5440                       		addq.w	#2,d0
0001BD0E                            
0001BD0E                            loc_18D8E:
0001BD0E D040                       		add.w	d0,d0
0001BD10 3228 0034                  		move.w	$34(a0),d1
0001BD14 D272 0000                  		add.w	(a2,d0.w),d1
0001BD18 B268 000C                  		cmp.w	obY(a0),d1
0001BD1C 6E00                       		bgt.s	locret_18DC4
0001BD1E 2268 003C                  		movea.l	$3C(a0),a1
0001BD22 7202                       		moveq	#2,d1
0001BD24 0828 0000 0022             		btst	#0,obStatus(a0)
0001BD2A 6700                       		beq.s	loc_18DAE
0001BD2C 7200                       		moveq	#0,d1
0001BD2E                            
0001BD2E                            loc_18DAE:
0001BD2E 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BD34 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BD3A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BD40 6000 0000                  		bra.w	loc_18FA2
0001BD44                            ; ===========================================================================
0001BD44                            
0001BD44                            locret_18DC4:
0001BD44 4E75                       		rts	
0001BD46                            ; ===========================================================================
0001BD46                            
0001BD46                            loc_18DC6:	; Routine 4
0001BD46 2268 003C                  		movea.l	$3C(a0),a1
0001BD4A 7000                       		moveq	#0,d0
0001BD4C 1028 003A                  		move.b	$3A(a0),d0
0001BD50 9029 003A                  		sub.b	$3A(a1),d0
0001BD54 6700                       		beq.s	loc_18E2A
0001BD56 6400                       		bcc.s	loc_18DDA
0001BD58 4400                       		neg.b	d0
0001BD5A                            
0001BD5A                            loc_18DDA:
0001BD5A 323C F7E8                  		move.w	#-$818,d1
0001BD5E 343C FEEC                  		move.w	#-$114,d2
0001BD62 0C00 0001                  		cmpi.b	#1,d0
0001BD66 6700                       		beq.s	loc_18E00
0001BD68 323C F6A0                  		move.w	#-$960,d1
0001BD6C 343C FF0C                  		move.w	#-$F4,d2
0001BD70 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BD76 6D00                       		blt.s	loc_18E00
0001BD78 323C F5E0                  		move.w	#-$A20,d1
0001BD7C 343C FF80                  		move.w	#-$80,d2
0001BD80                            
0001BD80                            loc_18E00:
0001BD80 3141 0012                  		move.w	d1,obVelY(a0)
0001BD84 3142 0010                  		move.w	d2,obVelX(a0)
0001BD88 3028 0008                  		move.w	obX(a0),d0
0001BD8C 9068 0030                  		sub.w	$30(a0),d0
0001BD90 6400                       		bcc.s	loc_18E16
0001BD92 4468 0010                  		neg.w	obVelX(a0)
0001BD96                            
0001BD96                            loc_18E16:
0001BD96 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BD9C 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BDA2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BDA6 6000 0000                  		bra.w	loc_18EAA
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            loc_18E2A:
0001BDAA 45F9 0000 0000             		lea	(word_19018).l,a2
0001BDB0 7000                       		moveq	#0,d0
0001BDB2 1029 001A                  		move.b	obFrame(a1),d0
0001BDB6 343C 0028                  		move.w	#$28,d2
0001BDBA 3228 0008                  		move.w	obX(a0),d1
0001BDBE 9268 0030                  		sub.w	$30(a0),d1
0001BDC2 6400                       		bcc.s	loc_18E48
0001BDC4 4442                       		neg.w	d2
0001BDC6 5440                       		addq.w	#2,d0
0001BDC8                            
0001BDC8                            loc_18E48:
0001BDC8 D040                       		add.w	d0,d0
0001BDCA 3228 0034                  		move.w	$34(a0),d1
0001BDCE D272 0000                  		add.w	(a2,d0.w),d1
0001BDD2 3141 000C                  		move.w	d1,obY(a0)
0001BDD6 D468 0030                  		add.w	$30(a0),d2
0001BDDA 3142 0008                  		move.w	d2,obX(a0)
0001BDDE 4268 000E                  		clr.w	obY+2(a0)
0001BDE2 4268 000A                  		clr.w	obX+2(a0)
0001BDE6 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BDEA 6600                       		bne.s	loc_18E7A
0001BDEC 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BDF2 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BDF8 4E75                       		rts	
0001BDFA                            ; ===========================================================================
0001BDFA                            
0001BDFA                            loc_18E7A:
0001BDFA 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BE00 6600                       		bne.s	loc_18E88
0001BE02 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BE08                            
0001BE08                            loc_18E88:
0001BE08 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BE0E 6600                       		bne.s	loc_18E96
0001BE10 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BE16                            
0001BE16                            loc_18E96:
0001BE16 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BE1A 6E00                       		bgt.s	locret_18EA8
0001BE1C 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BE22 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BE28                            
0001BE28                            locret_18EA8:
0001BE28 4E75                       		rts	
0001BE2A                            ; ===========================================================================
0001BE2A                            
0001BE2A                            loc_18EAA:	; Routine 6
0001BE2A 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BE2E 707A                       		moveq	#id_BossStarLight,d0
0001BE30 7240                       		moveq	#$40,d1
0001BE32 743E                       		moveq	#$3E,d2
0001BE34                            
0001BE34                            loc_18EB4:
0001BE34 B011                       		cmp.b	(a1),d0
0001BE36 6700                       		beq.s	loc_18EC0
0001BE38 D2C1                       		adda.w	d1,a1
0001BE3A 51CA FFF8                  		dbf	d2,loc_18EB4
0001BE3E                            
0001BE3E 6000                       		bra.s	loc_18F38
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            loc_18EC0:
0001BE40 3029 0008                  		move.w	obX(a1),d0
0001BE44 3229 000C                  		move.w	obY(a1),d1
0001BE48 3428 0008                  		move.w	obX(a0),d2
0001BE4C 3628 000C                  		move.w	obY(a0),d3
0001BE50 45FA 0000                  		lea	byte_19022(pc),a2
0001BE54 47FA 0000                  		lea	byte_19026(pc),a3
0001BE58 181A                       		move.b	(a2)+,d4
0001BE5A 4884                       		ext.w	d4
0001BE5C D044                       		add.w	d4,d0
0001BE5E 181B                       		move.b	(a3)+,d4
0001BE60 4884                       		ext.w	d4
0001BE62 D444                       		add.w	d4,d2
0001BE64 B440                       		cmp.w	d0,d2
0001BE66 6500                       		bcs.s	loc_18F38
0001BE68 181A                       		move.b	(a2)+,d4
0001BE6A 4884                       		ext.w	d4
0001BE6C D044                       		add.w	d4,d0
0001BE6E 181B                       		move.b	(a3)+,d4
0001BE70 4884                       		ext.w	d4
0001BE72 D444                       		add.w	d4,d2
0001BE74 B042                       		cmp.w	d2,d0
0001BE76 6500                       		bcs.s	loc_18F38
0001BE78 181A                       		move.b	(a2)+,d4
0001BE7A 4884                       		ext.w	d4
0001BE7C D244                       		add.w	d4,d1
0001BE7E 181B                       		move.b	(a3)+,d4
0001BE80 4884                       		ext.w	d4
0001BE82 D644                       		add.w	d4,d3
0001BE84 B641                       		cmp.w	d1,d3
0001BE86 6500                       		bcs.s	loc_18F38
0001BE88 181A                       		move.b	(a2)+,d4
0001BE8A 4884                       		ext.w	d4
0001BE8C D244                       		add.w	d4,d1
0001BE8E 181B                       		move.b	(a3)+,d4
0001BE90 4884                       		ext.w	d4
0001BE92 D644                       		add.w	d4,d3
0001BE94 B243                       		cmp.w	d3,d1
0001BE96 6500                       		bcs.s	loc_18F38
0001BE98 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BE9C 4268 0028                  		clr.w	obSubtype(a0)
0001BEA0 4229 0020                  		clr.b	obColType(a1)
0001BEA4 5329 0021                  		subq.b	#1,obColProp(a1)
0001BEA8 6600                       		bne.s	loc_18F38
0001BEAA 08E9 0007 0022             		bset	#7,obStatus(a1)
0001BEB0 4268 0010                  		clr.w	obVelX(a0)
0001BEB4 4268 0012                  		clr.w	obVelY(a0)
0001BEB8                            
0001BEB8                            loc_18F38:
0001BEB8 4A68 0012                  		tst.w	obVelY(a0)
0001BEBC 6A00                       		bpl.s	loc_18F5C
0001BEBE 4EB9 0000 F3DA             		jsr	(ObjectFall).l
0001BEC4 3028 0034                  		move.w	$34(a0),d0
0001BEC8 0440 002F                  		subi.w	#$2F,d0
0001BECC B068 000C                  		cmp.w	obY(a0),d0
0001BED0 6E00                       		bgt.s	loc_18F58
0001BED2 4EB9 0000 F3DA             		jsr	(ObjectFall).l
0001BED8                            
0001BED8                            loc_18F58:
0001BED8 6000 FF20                  		bra.w	loc_18E7A
0001BEDC                            ; ===========================================================================
0001BEDC                            
0001BEDC                            loc_18F5C:
0001BEDC 4EB9 0000 F3DA             		jsr	(ObjectFall).l
0001BEE2 2268 003C                  		movea.l	$3C(a0),a1
0001BEE6 45F9 0000 0000             		lea	(word_19018).l,a2
0001BEEC 7000                       		moveq	#0,d0
0001BEEE 1029 001A                  		move.b	obFrame(a1),d0
0001BEF2 3228 0008                  		move.w	obX(a0),d1
0001BEF6 9268 0030                  		sub.w	$30(a0),d1
0001BEFA 6400                       		bcc.s	loc_18F7E
0001BEFC 5440                       		addq.w	#2,d0
0001BEFE                            
0001BEFE                            loc_18F7E:
0001BEFE D040                       		add.w	d0,d0
0001BF00 3228 0034                  		move.w	$34(a0),d1
0001BF04 D272 0000                  		add.w	(a2,d0.w),d1
0001BF08 B268 000C                  		cmp.w	obY(a0),d1
0001BF0C 6ECA                       		bgt.s	loc_18F58
0001BF0E 2268 003C                  		movea.l	$3C(a0),a1
0001BF12 7202                       		moveq	#2,d1
0001BF14 4A68 0010                  		tst.w	obVelX(a0)
0001BF18 6B00                       		bmi.s	loc_18F9C
0001BF1A 7200                       		moveq	#0,d1
0001BF1C                            
0001BF1C                            loc_18F9C:
0001BF1C 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001BF22                            
0001BF22                            loc_18FA2:
0001BF22 1341 003A                  		move.b	d1,$3A(a1)
0001BF26 1141 003A                  		move.b	d1,$3A(a0)
0001BF2A B229 001A                  		cmp.b	obFrame(a1),d1
0001BF2E 6700                       		beq.s	loc_19008
0001BF30 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001BF36 6700                       		beq.s	loc_19008
0001BF38 4229 0025                  		clr.b	ob2ndRout(a1)
0001BF3C 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001BF42 45F8 D000                  		lea	(v_objspace).w,a2
0001BF46 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001BF4C 446A 0012                  		neg.w	obVelY(a2)
0001BF50 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001BF56 6600                       		bne.s	loc_18FDC
0001BF58 E0EA 0012                  		asr	obVelY(a2)
0001BF5C                            
0001BF5C                            loc_18FDC:
0001BF5C 08EA 0001 0022             		bset	#1,obStatus(a2)
0001BF62 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001BF68 422A 003C                  		clr.b	$3C(a2)
0001BF6C 2F08                       		move.l	a0,-(sp)
0001BF6E 41D2                       		lea	(a2),a0
0001BF70 4EB9 0001 5BC0             		jsr	(Sonic_ChkRoll).l
0001BF76 205F                       		movea.l	(sp)+,a0
0001BF78 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001BF88                            
0001BF88                            loc_19008:
0001BF88 4268 0010                  		clr.w	obVelX(a0)
0001BF8C 4268 0012                  		clr.w	obVelY(a0)
0001BF90 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF94 6000 FE64                  		bra.w	loc_18E7A
0001BF98                            ; ===========================================================================
0001BF98 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001BFA2                            		even
0001BFA2 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001BFA6                            		even
0001BFA6 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001BFAA                            		even
0001BFAA                            ; ===========================================================================
0001BFAA                            
0001BFAA                            Obj7B_Explode:	; Routine 8
0001BFAA 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001BFAE 4228 0024                  		clr.b	obRoutine(a0)
0001BFB2 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001BFB8 6700                       		beq.s	Obj7B_MakeFrag
0001BFBA 4E75                       		rts	
0001BFBC                            ; ===========================================================================
0001BFBC                            
0001BFBC                            Obj7B_MakeFrag:
0001BFBC 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001BFC2 7203                       		moveq	#3,d1
0001BFC4 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001BFC8                            
0001BFC8                            Obj7B_Loop:
0001BFC8 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001BFCE 6600                       		bne.s	loc_1909A
0001BFD0 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001BFD4 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001BFDA 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001BFE2 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001BFE8 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001BFEE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BFF4 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BFFA 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001BFFE 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C002 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C008 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C00E 08E9 0007 0001             		bset	#7,obRender(a1)
0001C014 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C01A                            
0001C01A                            loc_1909A:
0001C01A 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C01E                            
0001C01E 4E75                       		rts	
0001C020                            ; ===========================================================================
0001C020 FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C024 FF60 FDC0                  		dc.w -$A0, -$240
0001C028 0100 FCC0                  		dc.w $100, -$340
0001C02C 00A0 FDC0                  		dc.w $A0, -$240
0001C030                            ; ===========================================================================
0001C030                            
0001C030                            Obj7B_MoveFrag:	; Routine $A
0001C030 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001C036 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C03C 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C042 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C048 7004                       		moveq	#4,d0
0001C04A C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C04E E448                       		lsr.w	#2,d0
0001C050 1140 001A                  		move.b	d0,obFrame(a0)
0001C054 4A28 0001                  		tst.b	1(a0)
0001C058 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C05C 4E75                       		rts	
0001C05C 4E75                       		rts	
0001C05E                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C05E                            ; ---------------------------------------------------------------------------
0001C05E                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C05E                            ; ---------------------------------------------------------------------------
0001C05E                            Map_BSBall_internal:
0001C05E 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C060 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C062 01                         @fireball1:	dc.b 1
0001C063 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C068 01                         @fireball2:	dc.b 1
0001C069 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C06E                            		even
0001C06E                            		even
0001C06E                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C06E                            ; ---------------------------------------------------------------------------
0001C06E                            ; Object 75 - Eggman (SYZ)
0001C06E                            ; ---------------------------------------------------------------------------
0001C06E                            
0001C06E                            BossSpringYard:
0001C06E 7000                       		moveq	#0,d0
0001C070 1028 0024                  		move.b	obRoutine(a0),d0
0001C074 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C078 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C07C                            ; ===========================================================================
0001C07C 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C07E 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C080 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C082 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C084 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C086                            
0001C086 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C08A 0401 0280                  		dc.b 4,	1, $02, $80
0001C08E 0607 0280                  		dc.b 6,	7, $02, $80
0001C092 0800 0280                  		dc.b 8,	0, $02, $80
0001C096                            ; ===========================================================================
0001C096                            
0001C096                            Obj75_Main:	; Routine 0
0001C096 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C09C 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C0A2 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C0A8 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C0AE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C0B4 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C0BA 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C0BE 2248                       		movea.l	a0,a1
0001C0C0 7203                       		moveq	#3,d1
0001C0C2 6000                       		bra.s	Obj75_LoadBoss
0001C0C4                            ; ===========================================================================
0001C0C4                            
0001C0C4                            Obj75_Loop:
0001C0C4 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001C0CA 6600                       		bne.s	Obj75_ShipMain
0001C0CC 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C0D0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C0D6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C0DC                            
0001C0DC                            Obj75_LoadBoss:
0001C0DC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C0E2 4229 0025                  		clr.b	ob2ndRout(a1)
0001C0E6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C0EA 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C0EE 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C0F2 237C 0001 AC48 0004        		move.l	#Map_Eggman,obMap(a1)
0001C0FA 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C100 137C 0004 0001             		move.b	#4,obRender(a1)
0001C106 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C10C 2348 0034                  		move.l	a0,$34(a1)
0001C110 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C114                            
0001C114                            Obj75_ShipMain:	; Routine 2
0001C114 7000                       		moveq	#0,d0
0001C116 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C11A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C11E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C122 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001C128 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001C12E 7003                       		moveq	#3,d0
0001C130 C028 0022                  		and.b	obStatus(a0),d0
0001C134 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C13A 8128 0001                  		or.b	d0,obRender(a0)
0001C13E 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C144                            ; ===========================================================================
0001C144 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C148 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C14C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C150                            ; ===========================================================================
0001C150                            
0001C150                            loc_191CC:
0001C150 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C156 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C15C 6400                       		bcc.s	loc_191DE
0001C15E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C162                            
0001C162                            loc_191DE:
0001C162 1028 003F                  		move.b	$3F(a0),d0
0001C166 5428 003F                  		addq.b	#2,$3F(a0)
0001C16A 4EB9 0000 3B42             		jsr	(CalcSine).l
0001C170 E440                       		asr.w	#2,d0
0001C172 3140 0012                  		move.w	d0,obVelY(a0)
0001C176                            
0001C176                            loc_191F2:
0001C176 6100 E66C                  		bsr.w	BossMove
0001C17A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C180 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C186                            
0001C186                            loc_19202:
0001C186 3028 0008                  		move.w	8(a0),d0
0001C18A 0440 2C00                  		subi.w	#$2C00,d0
0001C18E EA48                       		lsr.w	#5,d0
0001C190 1140 0034                  		move.b	d0,$34(a0)
0001C194 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C19A 6400                       		bcc.s	locret_19256
0001C19C 4A28 0022                  		tst.b	obStatus(a0)
0001C1A0 6B00                       		bmi.s	loc_19258
0001C1A2 4A28 0020                  		tst.b	obColType(a0)
0001C1A6 6600                       		bne.s	locret_19256
0001C1A8 4A28 003E                  		tst.b	$3E(a0)
0001C1AC 6600                       		bne.s	loc_1923A
0001C1AE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C1BE                            
0001C1BE                            loc_1923A:
0001C1BE 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C1C2 7000                       		moveq	#0,d0
0001C1C4 4A51                       		tst.w	(a1)
0001C1C6 6600                       		bne.s	loc_19248
0001C1C8 303C 0EEE                  		move.w	#cWhite,d0
0001C1CC                            
0001C1CC                            loc_19248:
0001C1CC 3280                       		move.w	d0,(a1)
0001C1CE 5328 003E                  		subq.b	#1,$3E(a0)
0001C1D2 6600                       		bne.s	locret_19256
0001C1D4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C1DA                            
0001C1DA                            locret_19256:
0001C1DA 4E75                       		rts	
0001C1DC                            ; ===========================================================================
0001C1DC                            
0001C1DC                            loc_19258:
0001C1DC 7064                       		moveq	#100,d0
0001C1DE 6100 0000                  		bsr.w	AddPoints
0001C1E2 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C1E8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C1EE 4268 0010                  		clr.w	obVelX(a0)
0001C1F2 4E75                       		rts	
0001C1F4                            ; ===========================================================================
0001C1F4                            
0001C1F4                            loc_19270:
0001C1F4 3028 0030                  		move.w	$30(a0),d0
0001C1F8 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C1FE 0828 0000 0022             		btst	#0,obStatus(a0)
0001C204 6600                       		bne.s	loc_1928E
0001C206 4468 0010                  		neg.w	obVelX(a0)
0001C20A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C20E 6E00                       		bgt.s	loc_1929E
0001C210 6000                       		bra.s	loc_19294
0001C212                            ; ===========================================================================
0001C212                            
0001C212                            loc_1928E:
0001C212 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C216 6D00                       		blt.s	loc_1929E
0001C218                            
0001C218                            loc_19294:
0001C218 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C21E 4228 003D                  		clr.b	$3D(a0)
0001C222                            
0001C222                            loc_1929E:
0001C222 0440 2C10                  		subi.w	#$2C10,d0
0001C226 0240 001F                  		andi.w	#$1F,d0
0001C22A 0440 001F                  		subi.w	#$1F,d0
0001C22E 6A00                       		bpl.s	loc_192AE
0001C230 4440                       		neg.w	d0
0001C232                            
0001C232                            loc_192AE:
0001C232 5340                       		subq.w	#1,d0
0001C234 6E00                       		bgt.s	loc_192E8
0001C236 4A28 003D                  		tst.b	$3D(a0)
0001C23A 6600                       		bne.s	loc_192E8
0001C23C 3238 D008                  		move.w	(v_player+obX).w,d1
0001C240 0441 2C00                  		subi.w	#$2C00,d1
0001C244 EA41                       		asr.w	#5,d1
0001C246 B228 0034                  		cmp.b	$34(a0),d1
0001C24A 6600                       		bne.s	loc_192E8
0001C24C 7000                       		moveq	#0,d0
0001C24E 1028 0034                  		move.b	$34(a0),d0
0001C252 EB40                       		asl.w	#5,d0
0001C254 0640 2C10                  		addi.w	#$2C10,d0
0001C258 3140 0030                  		move.w	d0,$30(a0)
0001C25C 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C260 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C264 4268 0028                  		clr.w	obSubtype(a0)
0001C268 4268 0010                  		clr.w	obVelX(a0)
0001C26C                            
0001C26C                            loc_192E8:
0001C26C 6000 FEF4                  		bra.w	loc_191DE
0001C270                            ; ===========================================================================
0001C270                            
0001C270                            loc_192EC:
0001C270 7000                       		moveq	#0,d0
0001C272 1028 0028                  		move.b	obSubtype(a0),d0
0001C276 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C27A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C27E                            ; ===========================================================================
0001C27E 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C280 0000                       		dc.w loc_19348-off_192FA
0001C282 0000                       		dc.w loc_1938E-off_192FA
0001C284 0000                       		dc.w loc_193D0-off_192FA
0001C286                            ; ===========================================================================
0001C286                            
0001C286                            loc_19302:
0001C286 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C28C 3028 0038                  		move.w	$38(a0),d0
0001C290 0C40 0556                  		cmpi.w	#$556,d0
0001C294 6500                       		bcs.s	loc_19344
0001C296 317C 0556 0038             		move.w	#$556,$38(a0)
0001C29C 4268 003C                  		clr.w	$3C(a0)
0001C2A0 70FF                       		moveq	#-1,d0
0001C2A2 3028 0036                  		move.w	$36(a0),d0
0001C2A6 6700                       		beq.s	loc_1933C
0001C2A8 2240                       		movea.l	d0,a1
0001C2AA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C2B0 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C2B6 2348 0034                  		move.l	a0,$34(a1)
0001C2BA 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C2C0                            
0001C2C0                            loc_1933C:
0001C2C0 4268 0012                  		clr.w	obVelY(a0)
0001C2C4 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C2C8                            
0001C2C8                            loc_19344:
0001C2C8 6000 FEAC                  		bra.w	loc_191F2
0001C2CC                            ; ===========================================================================
0001C2CC                            
0001C2CC                            loc_19348:
0001C2CC 5368 003C                  		subq.w	#1,$3C(a0)
0001C2D0 6A00                       		bpl.s	loc_19366
0001C2D2 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C2D6 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C2DC 4A68 0036                  		tst.w	$36(a0)
0001C2E0 6600                       		bne.s	loc_19362
0001C2E2 E0E8 0012                  		asr	obVelY(a0)
0001C2E6                            
0001C2E6                            loc_19362:
0001C2E6 7000                       		moveq	#0,d0
0001C2E8 6000                       		bra.s	loc_1937C
0001C2EA                            ; ===========================================================================
0001C2EA                            
0001C2EA                            loc_19366:
0001C2EA 7000                       		moveq	#0,d0
0001C2EC 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C2F2 6E00                       		bgt.s	loc_1937C
0001C2F4 7002                       		moveq	#2,d0
0001C2F6 0828 0001 003D             		btst	#1,$3D(a0)
0001C2FC 6700                       		beq.s	loc_1937C
0001C2FE 4440                       		neg.w	d0
0001C300                            
0001C300                            loc_1937C:
0001C300 D068 0038                  		add.w	$38(a0),d0
0001C304 3140 000C                  		move.w	d0,obY(a0)
0001C308 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C30E 6000 FE76                  		bra.w	loc_19202
0001C312                            ; ===========================================================================
0001C312                            
0001C312                            loc_1938E:
0001C312 303C 04DA                  		move.w	#$4DA,d0
0001C316 4A68 0036                  		tst.w	$36(a0)
0001C31A 6700                       		beq.s	loc_1939C
0001C31C 0440 0018                  		subi.w	#$18,d0
0001C320                            
0001C320                            loc_1939C:
0001C320 B068 0038                  		cmp.w	$38(a0),d0
0001C324 6D00                       		blt.s	loc_193BE
0001C326 317C 0008 003C             		move.w	#8,$3C(a0)
0001C32C 4A68 0036                  		tst.w	$36(a0)
0001C330 6700                       		beq.s	loc_193B4
0001C332 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C338                            
0001C338                            loc_193B4:
0001C338 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C33C 4268 0012                  		clr.w	obVelY(a0)
0001C340 6000                       		bra.s	loc_193CC
0001C342                            ; ===========================================================================
0001C342                            
0001C342                            loc_193BE:
0001C342 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C348 6C00                       		bge.s	loc_193CC
0001C34A 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C350                            
0001C350                            loc_193CC:
0001C350 6000 FE24                  		bra.w	loc_191F2
0001C354                            ; ===========================================================================
0001C354                            
0001C354                            loc_193D0:
0001C354 5368 003C                  		subq.w	#1,$3C(a0)
0001C358 6E00                       		bgt.s	loc_19406
0001C35A 6B00                       		bmi.s	loc_193EE
0001C35C 70FF                       		moveq	#-1,d0
0001C35E 3028 0036                  		move.w	$36(a0),d0
0001C362 6700                       		beq.s	loc_193E8
0001C364 2240                       		movea.l	d0,a1
0001C366 137C 000A 0029             		move.b	#$A,$29(a1)
0001C36C                            
0001C36C                            loc_193E8:
0001C36C 4268 0036                  		clr.w	$36(a0)
0001C370 6000                       		bra.s	loc_19406
0001C372                            ; ===========================================================================
0001C372                            
0001C372                            loc_193EE:
0001C372 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C378 6600                       		bne.s	loc_19406
0001C37A 4228 0029                  		clr.b	$29(a0)
0001C37E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C382 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C388 6000                       		bra.s	loc_19446
0001C38A                            ; ===========================================================================
0001C38A                            
0001C38A                            loc_19406:
0001C38A 7001                       		moveq	#1,d0
0001C38C 4A68 0036                  		tst.w	$36(a0)
0001C390 6700                       		beq.s	loc_19410
0001C392 7002                       		moveq	#2,d0
0001C394                            
0001C394                            loc_19410:
0001C394 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C39A 6700                       		beq.s	loc_19424
0001C39C 6D00                       		blt.s	loc_1941C
0001C39E 4440                       		neg.w	d0
0001C3A0                            
0001C3A0                            loc_1941C:
0001C3A0 4A68 0036                  		tst.w	$36(a0)
0001C3A4 D168 0038                  		add.w	d0,$38(a0)
0001C3A8                            
0001C3A8                            loc_19424:
0001C3A8 7000                       		moveq	#0,d0
0001C3AA 4A68 0036                  		tst.w	$36(a0)
0001C3AE 6700                       		beq.s	loc_19438
0001C3B0 7002                       		moveq	#2,d0
0001C3B2 0828 0000 003D             		btst	#0,$3D(a0)
0001C3B8 6700                       		beq.s	loc_19438
0001C3BA 4440                       		neg.w	d0
0001C3BC                            
0001C3BC                            loc_19438:
0001C3BC D068 0038                  		add.w	$38(a0),d0
0001C3C0 3140 000C                  		move.w	d0,obY(a0)
0001C3C4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C3CA                            
0001C3CA                            loc_19446:
0001C3CA 6000 FDBA                  		bra.w	loc_19202
0001C3CE                            
0001C3CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3CE                            
0001C3CE                            
0001C3CE                            Obj75_FindBlocks:
0001C3CE 4268 0036                  		clr.w	$36(a0)
0001C3D2 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C3D6 703E                       		moveq	#$3E,d0
0001C3D8 7276                       		moveq	#$76,d1
0001C3DA 1428 0034                  		move.b	$34(a0),d2
0001C3DE                            
0001C3DE                            Obj75_FindLoop:
0001C3DE B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C3E0 6600                       		bne.s	loc_1946A	; if not, branch
0001C3E2 B429 0028                  		cmp.b	obSubtype(a1),d2
0001C3E6 6600                       		bne.s	loc_1946A
0001C3E8 3149 0036                  		move.w	a1,$36(a0)
0001C3EC 6000                       		bra.s	locret_19472
0001C3EE                            ; ===========================================================================
0001C3EE                            
0001C3EE                            loc_1946A:
0001C3EE 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C3F2 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C3F6                            
0001C3F6                            locret_19472:
0001C3F6 4E75                       		rts	
0001C3F8                            ; End of function Obj75_FindBlocks
0001C3F8                            
0001C3F8                            ; ===========================================================================
0001C3F8                            
0001C3F8                            loc_19474:
0001C3F8 5368 003C                  		subq.w	#1,$3C(a0)
0001C3FC 6B00                       		bmi.s	loc_1947E
0001C3FE 6000 E3A2                  		bra.w	BossDefeated
0001C402                            ; ===========================================================================
0001C402                            
0001C402                            loc_1947E:
0001C402 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C406 4268 0012                  		clr.w	obVelY(a0)
0001C40A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C410 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C416 4268 0010                  		clr.w	obVelX(a0)
0001C41A 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C420 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C424 6600                       		bne.s	loc_194A8
0001C426 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C42C                            
0001C42C                            loc_194A8:
0001C42C 6000 FD58                  		bra.w	loc_19202
0001C430                            ; ===========================================================================
0001C430                            
0001C430                            loc_194AC:
0001C430 5268 003C                  		addq.w	#1,$3C(a0)
0001C434 6700                       		beq.s	loc_194BC
0001C436 6A00                       		bpl.s	loc_194C2
0001C438 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C43E 6000                       		bra.s	loc_194EE
0001C440                            ; ===========================================================================
0001C440                            
0001C440                            loc_194BC:
0001C440 4268 0012                  		clr.w	obVelY(a0)
0001C444 6000                       		bra.s	loc_194EE
0001C446                            ; ===========================================================================
0001C446                            
0001C446                            loc_194C2:
0001C446 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C44C 6500                       		bcs.s	loc_194DA
0001C44E 6700                       		beq.s	loc_194E0
0001C450 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C456 6500                       		bcs.s	loc_194EE
0001C458 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C45C 6000                       		bra.s	loc_194EE
0001C45E                            ; ===========================================================================
0001C45E                            
0001C45E                            loc_194DA:
0001C45E 5168 0012                  		subq.w	#8,obVelY(a0)
0001C462 6000                       		bra.s	loc_194EE
0001C464                            ; ===========================================================================
0001C464                            
0001C464                            loc_194E0:
0001C464 4268 0012                  		clr.w    obVelY(a0)
0001C468 4A38 FE2D                          	tst.b     (v_invinc).w
0001C46C 6600                               	bne.s   @boss_invinc
0001C46E                            
0001C46E 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C472 6000 0000                          	bra.w      @boss_play
0001C476                            
0001C476                            @boss_invinc:
0001C476 103C 0000                          	move.b #bgm_Invincible,d0
0001C47A                            
0001C47A                            @boss_play:
0001C47A 4EB8 129A                          	jsr PlaySound
0001C47E                            
0001C47E                            loc_194EE:
0001C47E 6000 FCF6                  		bra.w	loc_191F2
0001C482                            ; ===========================================================================
0001C482                            
0001C482                            loc_194F2:
0001C482 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C488 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C48E 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C494 6400                       		bcc.s	loc_1950C
0001C496 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C49A 6000                       		bra.s	loc_19512
0001C49C                            ; ===========================================================================
0001C49C                            
0001C49C                            loc_1950C:
0001C49C 4A28 0001                  		tst.b	obRender(a0)
0001C4A0 6A00                       		bpl.s	Obj75_ShipDelete
0001C4A2                            
0001C4A2                            loc_19512:
0001C4A2 6100 E340                  		bsr.w	BossMove
0001C4A6 6000 FCBA                  		bra.w	loc_191DE
0001C4AA                            ; ===========================================================================
0001C4AA                            
0001C4AA                            Obj75_ShipDelete:
0001C4AA 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C4B0                            ; ===========================================================================
0001C4B0                            
0001C4B0                            Obj75_FaceMain:	; Routine 4
0001C4B0 7201                       		moveq	#1,d1
0001C4B2 2268 0034                  		movea.l	$34(a0),a1
0001C4B6 7000                       		moveq	#0,d0
0001C4B8 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C4BC 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C4C0 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C4C4 1141 001C                  		move.b	d1,obAnim(a0)
0001C4C8 1010                       		move.b	(a0),d0
0001C4CA B011                       		cmp.b	(a1),d0
0001C4CC 6600                       		bne.s	Obj75_FaceDelete
0001C4CE 6000                       		bra.s	loc_195BE
0001C4D0                            ; ===========================================================================
0001C4D0                            
0001C4D0                            Obj75_FaceDelete:
0001C4D0 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C4D6                            ; ===========================================================================
0001C4D6 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C4DA 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C4DE 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C4E2                            ; ===========================================================================
0001C4E2                            
0001C4E2                            loc_19552:
0001C4E2 720A                       		moveq	#$A,d1
0001C4E4 4E75                       		rts	
0001C4E6                            ; ===========================================================================
0001C4E6                            
0001C4E6                            loc_19556:
0001C4E6 7206                       		moveq	#6,d1
0001C4E8 4E75                       		rts	
0001C4EA                            ; ===========================================================================
0001C4EA                            
0001C4EA                            loc_1955A:
0001C4EA 7000                       		moveq	#0,d0
0001C4EC 1029 0028                  		move.b	obSubtype(a1),d0
0001C4F0 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C4F4 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C4F8                            ; ===========================================================================
0001C4F8 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C4FC 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C500                            ; ===========================================================================
0001C500                            
0001C500                            loc_19570:
0001C500 6000                       		bra.s	loc_19574
0001C502                            ; ===========================================================================
0001C502                            
0001C502                            loc_19572:
0001C502 7206                       		moveq	#6,d1
0001C504                            
0001C504                            loc_19574:
0001C504 4A29 0020                  		tst.b	obColType(a1)
0001C508 6600                       		bne.s	loc_1957E
0001C50A 7205                       		moveq	#5,d1
0001C50C 4E75                       		rts	
0001C50E                            ; ===========================================================================
0001C50E                            
0001C50E                            loc_1957E:
0001C50E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C514 6500                       		bcs.s	locret_19588
0001C516 7204                       		moveq	#4,d1
0001C518                            
0001C518                            locret_19588:
0001C518 4E75                       		rts	
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            Obj75_FlameMain:; Routine 6
0001C51A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C520 2268 0034                  		movea.l	$34(a0),a1
0001C524 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C52A 6600                       		bne.s	loc_195AA
0001C52C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C532 4A28 0001                  		tst.b	1(a0)
0001C536 6A00                       		bpl.s	Obj75_FlameDelete
0001C538 6000                       		bra.s	loc_195B6
0001C53A                            ; ===========================================================================
0001C53A                            
0001C53A                            loc_195AA:
0001C53A 4A69 0010                  		tst.w	obVelX(a1)
0001C53E 6700                       		beq.s	loc_195B6
0001C540 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C546                            
0001C546                            loc_195B6:
0001C546 6000                       		bra.s	loc_195BE
0001C548                            ; ===========================================================================
0001C548                            
0001C548                            Obj75_FlameDelete:
0001C548 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C54E                            ; ===========================================================================
0001C54E                            
0001C54E                            loc_195BE:
0001C54E 43F9 0001 ABF8             		lea	(Ani_Eggman).l,a1
0001C554 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001C55A 2268 0034                  		movea.l	$34(a0),a1
0001C55E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C564 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C56A                            
0001C56A                            loc_195DA:
0001C56A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C570 7003                       		moveq	#3,d0
0001C572 C028 0022                  		and.b	obStatus(a0),d0
0001C576 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C57C 8128 0001                  		or.b	d0,obRender(a0)
0001C580 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C586                            ; ===========================================================================
0001C586                            
0001C586                            Obj75_SpikeMain:; Routine 8
0001C586 217C 0001 AD38 0004        		move.l	#Map_BossItems,obMap(a0)
0001C58E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C594 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C59A 2268 0034                  		movea.l	$34(a0),a1
0001C59E 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C5A4 6600                       		bne.s	loc_1961C
0001C5A6 4A28 0001                  		tst.b	obRender(a0)
0001C5AA 6A00                       		bpl.s	Obj75_SpikeDelete
0001C5AC                            
0001C5AC                            loc_1961C:
0001C5AC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C5B2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C5B8 3028 003C                  		move.w	$3C(a0),d0
0001C5BC 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C5C2 6600                       		bne.s	loc_19652
0001C5C4 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C5CA 6700                       		beq.s	loc_1964C
0001C5CC 4A29 0028                  		tst.b	obSubtype(a1)
0001C5D0 6600                       		bne.s	loc_19658
0001C5D2 0C40 0094                  		cmpi.w	#$94,d0
0001C5D6 6C00                       		bge.s	loc_19658
0001C5D8 5E40                       		addq.w	#7,d0
0001C5DA 6000                       		bra.s	loc_19658
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            loc_1964C:
0001C5DC 4A69 003C                  		tst.w	$3C(a1)
0001C5E0 6A00                       		bpl.s	loc_19658
0001C5E2                            
0001C5E2                            loc_19652:
0001C5E2 4A40                       		tst.w	d0
0001C5E4 6F00                       		ble.s	loc_19658
0001C5E6 5B40                       		subq.w	#5,d0
0001C5E8                            
0001C5E8                            loc_19658:
0001C5E8 3140 003C                  		move.w	d0,$3C(a0)
0001C5EC E440                       		asr.w	#2,d0
0001C5EE D168 000C                  		add.w	d0,obY(a0)
0001C5F2 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C5F8 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C5FE 4228 0020                  		clr.b	obColType(a0)
0001C602 2268 0034                  		movea.l	$34(a0),a1
0001C606 4A29 0020                  		tst.b	obColType(a1)
0001C60A 6700                       		beq.s	loc_19688
0001C60C 4A29 0029                  		tst.b	$29(a1)
0001C610 6600                       		bne.s	loc_19688
0001C612 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C618                            
0001C618                            loc_19688:
0001C618 6000 FF50                  		bra.w	loc_195DA
0001C61C                            ; ===========================================================================
0001C61C                            
0001C61C                            Obj75_SpikeDelete:
0001C61C 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C61C 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C622                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C622                            ; ---------------------------------------------------------------------------
0001C622                            
0001C622                            BossBlock:
0001C622 7000                       		moveq	#0,d0
0001C624 1028 0024                  		move.b	obRoutine(a0),d0
0001C628 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C62C 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C630                            ; ===========================================================================
0001C630 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C632 0000                       		dc.w Obj76_Action-Obj76_Index
0001C634 0000                       		dc.w loc_19762-Obj76_Index
0001C636                            ; ===========================================================================
0001C636                            
0001C636                            Obj76_Main:	; Routine 0
0001C636 7800                       		moveq	#0,d4
0001C638 3A3C 2C10                  		move.w	#$2C10,d5
0001C63C 7C09                       		moveq	#9,d6
0001C63E 43D0                       		lea	(a0),a1
0001C640 6000                       		bra.s	Obj76_MakeBlock
0001C642                            ; ===========================================================================
0001C642                            
0001C642                            Obj76_Loop:
0001C642 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001C648 6600                       		bne.s	Obj76_ExitLoop
0001C64A                            
0001C64A                            Obj76_MakeBlock:
0001C64A 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C64E 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C656 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C65C 137C 0004 0001             		move.b	#4,obRender(a1)
0001C662 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C668 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C66E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C674 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C678 337C 0582 000C             		move.w	#$582,obY(a1)
0001C67E 3344 0028                  		move.w	d4,obSubtype(a1)
0001C682 0644 0101                  		addi.w	#$101,d4
0001C686 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C68A 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C68E 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C692                            
0001C692                            Obj76_ExitLoop:
0001C692 4E75                       		rts	
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            Obj76_Action:	; Routine 2
0001C694 1028 0029                  		move.b	$29(a0),d0
0001C698 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C69C 6700                       		beq.s	Obj76_Solid
0001C69E 4A00                       		tst.b	d0
0001C6A0 6B00                       		bmi.s	loc_19718
0001C6A2                            
0001C6A2                            loc_19712:
0001C6A2 6100 0000                  		bsr.w	Obj76_Break
0001C6A6 6000                       		bra.s	Obj76_Display
0001C6A8                            ; ===========================================================================
0001C6A8                            
0001C6A8                            loc_19718:
0001C6A8 2268 0034                  		movea.l	$34(a0),a1
0001C6AC 4A29 0021                  		tst.b	obColProp(a1)
0001C6B0 67F0                       		beq.s	loc_19712
0001C6B2 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C6B8 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C6BE 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C6C4 B2C8                       		cmpa.w	a0,a1
0001C6C6 6500                       		bcs.s	Obj76_Display
0001C6C8 3029 0012                  		move.w	obVelY(a1),d0
0001C6CC 48C0                       		ext.l	d0
0001C6CE E080                       		asr.l	#8,d0
0001C6D0 D168 000C                  		add.w	d0,obY(a0)
0001C6D4 6000                       		bra.s	Obj76_Display
0001C6D6                            ; ===========================================================================
0001C6D6                            
0001C6D6                            Obj76_Solid:
0001C6D6 323C 001B                  		move.w	#$1B,d1
0001C6DA 343C 0010                  		move.w	#$10,d2
0001C6DE 363C 0011                  		move.w	#$11,d3
0001C6E2 3828 0008                  		move.w	obX(a0),d4
0001C6E6 4EB9 0001 195E             		jsr	(SolidObject).l
0001C6EC                            
0001C6EC                            Obj76_Display:
0001C6EC 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C6F2                            ; ===========================================================================
0001C6F2                            
0001C6F2                            loc_19762:	; Routine 4
0001C6F2 4A28 0001                  		tst.b	obRender(a0)
0001C6F6 6A00                       		bpl.s	Obj76_Delete
0001C6F8 4EB9 0000 F3DA             		jsr	(ObjectFall).l
0001C6FE 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C704                            ; ===========================================================================
0001C704                            
0001C704                            Obj76_Delete:
0001C704 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C70A                            
0001C70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C70A                            
0001C70A                            
0001C70A                            Obj76_Break:
0001C70A 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C70E 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C712 7801                       		moveq	#1,d4
0001C714 7203                       		moveq	#3,d1
0001C716 7438                       		moveq	#$38,d2
0001C718 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C71C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C722 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C728 43D0                       		lea	(a0),a1
0001C72A 6000                       		bra.s	Obj76_MakeFrag
0001C72C                            ; ===========================================================================
0001C72C                            
0001C72C                            Obj76_LoopFrag:
0001C72C 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001C732 6600                       		bne.s	loc_197D4
0001C734                            
0001C734                            Obj76_MakeFrag:
0001C734 45D0                       		lea	(a0),a2
0001C736 47D1                       		lea	(a1),a3
0001C738 7603                       		moveq	#3,d3
0001C73A                            
0001C73A                            loc_197AA:
0001C73A 26DA                       		move.l	(a2)+,(a3)+
0001C73C 26DA                       		move.l	(a2)+,(a3)+
0001C73E 26DA                       		move.l	(a2)+,(a3)+
0001C740 26DA                       		move.l	(a2)+,(a3)+
0001C742 51CB FFF6                  		dbf	d3,loc_197AA
0001C746                            
0001C746 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C74A 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C74E 361D                       		move.w	(a5)+,d3
0001C750 D769 0008                  		add.w	d3,obX(a1)
0001C754 361D                       		move.w	(a5)+,d3
0001C756 D769 000C                  		add.w	d3,obY(a1)
0001C75A 1344 001A                  		move.b	d4,obFrame(a1)
0001C75E 5244                       		addq.w	#1,d4
0001C760 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C764                            
0001C764                            loc_197D4:
0001C76E                            ; End of function Obj76_Break
0001C76E                            
0001C76E                            ; ===========================================================================
0001C76E FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C772 0180 FE00                  		dc.w $180, -$200
0001C776 FF00 FF00                  		dc.w -$100, -$100
0001C77A 0100 FF00                  		dc.w $100, -$100
0001C77E FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C782 0010 0000                  		dc.w $10, 0
0001C786 0000 0010                  		dc.w 0,	$10
0001C78A 0010 0010                  		dc.w $10, $10
0001C78A 0010 0010                  		dc.w $10, $10
0001C78E                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C78E                            ; ---------------------------------------------------------------------------
0001C78E                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C78E                            ; ---------------------------------------------------------------------------
0001C78E                            Map_BossBlock_internal:
0001C78E 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C790 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C792 0000                       		dc.w @topright-Map_BossBlock_internal
0001C794 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C796 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C798 02                         @wholeblock:	dc.b 2
0001C799 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C79E 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C7A3 00                         		dc.b 0
0001C7A4 01                         @topleft:	dc.b 1
0001C7A5 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C7AA 01                         @topright:	dc.b 1
0001C7AB F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C7B0 01                         @bottomleft:	dc.b 1
0001C7B1 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C7B6 01                         @bottomright:	dc.b 1
0001C7B7 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C7BC                            		even
0001C7BC                            		even
0001C7BC                            
0001C7BC                            loc_1982C:
0001C7BC 4EF9 0000 F466             		jmp	(DeleteObject).l
0001C7C2                            
0001C7C2                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C7C2                            ; ---------------------------------------------------------------------------
0001C7C2                            ; Object 82 - Eggman (SBZ2)
0001C7C2                            ; ---------------------------------------------------------------------------
0001C7C2                            
0001C7C2                            ScrapEggman:
0001C7C2 7000                       		moveq	#0,d0
0001C7C4 1028 0024                  		move.b	obRoutine(a0),d0
0001C7C8 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C7CC 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C7D0                            ; ===========================================================================
0001C7D0 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C7D2 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C7D4 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C7D6                            
0001C7D6 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C7D9 0400 03                    		dc.b 4,	0, 3
0001C7DC                            ; ===========================================================================
0001C7DC                            
0001C7DC                            SEgg_Main:	; Routine 0
0001C7DC 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C7E0 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001C7E6 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001C7EC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C7F2 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C7F8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C7FE 4228 0025                  		clr.b	ob2ndRout(a0)
0001C802 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C806 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C80A 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C80E 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C816 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C81C 117C 0004 0001             		move.b	#4,obRender(a0)
0001C822 08E8 0007 0001             		bset	#7,obRender(a0)
0001C828 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001C82E 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001C834 6600                       		bne.s	SEgg_Eggman
0001C836 2348 0034                  		move.l	a0,$34(a1)
0001C83A 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001C83E 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001C844 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001C84A 4228 0025                  		clr.b	ob2ndRout(a0)
0001C84E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C852 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C856 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001C85A 237C 0000 DC62 0004        		move.l	#Map_But,obMap(a1)
0001C862 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001C868 137C 0004 0001             		move.b	#4,obRender(a1)
0001C86E 08E9 0007 0001             		bset	#7,obRender(a1)
0001C874 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C87A 137C 0000 001A             		move.b	#0,obFrame(a1)
0001C880                            
0001C880                            SEgg_Eggman:	; Routine 2
0001C880 7000                       		moveq	#0,d0
0001C882 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C886 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001C88A 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001C88E 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001C892 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001C898 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C89E                            ; ===========================================================================
0001C89E 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001C8A0 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001C8A2 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001C8A4 0000                       		dc.w loc_19934-SEgg_EggIndex
0001C8A6                            ; ===========================================================================
0001C8A6                            
0001C8A6                            SEgg_ChkSonic:
0001C8A6 3028 0008                  		move.w	obX(a0),d0
0001C8AA 9078 D008                  		sub.w	(v_player+obX).w,d0
0001C8AE 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001C8B2 6400                       		bcc.s	loc_19934	; if not, branch
0001C8B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8B8 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001C8BE 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C8C4                            
0001C8C4                            loc_19934:
0001C8C4 4EF9 0000 F412             		jmp	(SpeedToPos).l
0001C8CA                            ; ===========================================================================
0001C8CA                            
0001C8CA                            SEgg_PreLeap:
0001C8CA 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001C8CE 6600                       		bne.s	loc_19954	; if time remains, branch
0001C8D0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C8D4 117C 0002 001C             		move.b	#2,obAnim(a0)
0001C8DA 5868 000C                  		addq.w	#4,obY(a0)
0001C8DE 317C 000F 003C             		move.w	#15,$3C(a0)
0001C8E4                            
0001C8E4                            loc_19954:
0001C8E4 60DE                       		bra.s	loc_19934
0001C8E6                            ; ===========================================================================
0001C8E6                            
0001C8E6                            SEgg_Leap:
0001C8E6 5368 003C                  		subq.w	#1,$3C(a0)
0001C8EA 6E00                       		bgt.s	loc_199D0
0001C8EC 6600                       		bne.s	loc_1996A
0001C8EE 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001C8F4 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001C8FA                            
0001C8FA                            loc_1996A:
0001C8FA 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001C900 6E00                       		bgt.s	loc_19976
0001C902 4268 0010                  		clr.w	obVelX(a0)
0001C906                            
0001C906                            loc_19976:
0001C906 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001C90C 4A68 0012                  		tst.w	obVelY(a0)
0001C910 6B00                       		bmi.s	SEgg_FindBlocks
0001C912 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001C918 6500                       		bcs.s	SEgg_FindBlocks
0001C91A 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001C920 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001C926 6500                       		bcs.s	SEgg_FindBlocks
0001C928 317C 029B 000C             		move.w	#$29B,obY(a0)
0001C92E 4268 0012                  		clr.w	obVelY(a0)
0001C932                            
0001C932                            SEgg_FindBlocks:
0001C932 3028 0010                  		move.w	obVelX(a0),d0
0001C936 8068 0012                  		or.w	obVelY(a0),d0
0001C93A 6600                       		bne.s	loc_199D0
0001C93C 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001C940 703E                       		moveq	#$3E,d0
0001C942 7240                       		moveq	#$40,d1
0001C944                            
0001C944                            SEgg_FindLoop:	
0001C944 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001C946 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001C94A 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001C94E                            
0001C94E 6600                       		bne.s	loc_199D0
0001C950 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001C956 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C95A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001C960                            
0001C960                            loc_199D0:
0001C960 6000 FF62                  		bra.w	loc_19934
0001C964                            ; ===========================================================================
0001C964                            
0001C964                            SEgg_Switch:	; Routine 4
0001C964 7000                       		moveq	#0,d0
0001C966 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C96A 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001C96E 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001C972                            ; ===========================================================================
0001C972 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001C974 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001C976                            ; ===========================================================================
0001C976                            
0001C976                            loc_199E6:
0001C976 2268 0034                  		movea.l	$34(a0),a1
0001C97A 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001C980 6600                       		bne.s	SEgg_SwDisplay
0001C982 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C988 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C98C                            
0001C98C                            SEgg_SwDisplay:
0001C98C 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C98C 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001C992                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001C992                            ; ---------------------------------------------------------------------------
0001C992                            ; Animation script - Eggman (SBZ2)
0001C992                            ; ---------------------------------------------------------------------------
0001C992 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001C994 0000                       		dc.w @laugh-Ani_SEgg
0001C996 0000                       		dc.w @jump1-Ani_SEgg
0001C998 0000                       		dc.w @intube-Ani_SEgg
0001C99A 0000                       		dc.w @running-Ani_SEgg
0001C99C 0000                       		dc.w @jump2-Ani_SEgg
0001C99E 0000                       		dc.w @starjump-Ani_SEgg
0001C9A0 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001C9A4 00                         		even
0001C9A4 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001C9A8 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001C9B0 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001C9B4 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001C9BA 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001C9C0 00                         		even
0001C9C0 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001C9C4 00                         		even
0001C9C4 00                         		even
0001C9C4                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001C9C4                            ; --------------------------------------------------------------------------------
0001C9C4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001C9C4                            ; --------------------------------------------------------------------------------
0001C9C4                            
0001C9C4                            SME_y00JM:	
0001C9C4 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001C9C8 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001C9CC 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001C9D0 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001C9D4 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001C9D8 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001C9DA 03                         SME_y00JM_16:	dc.b 3	
0001C9DB FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001C9E0 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001C9E5 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001C9EA 07                         SME_y00JM_26:	dc.b 7	
0001C9EB E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001C9F0 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001C9F5 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001C9FA F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001C9FF F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001CA04 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001CA09 F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001CA0E 07                         SME_y00JM_4A:	dc.b 7	
0001CA0F E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001CA14 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001CA19 F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001CA1E F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001CA23 F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001CA28 F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001CA2D 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001CA32 04                         SME_y00JM_6E:	dc.b 4	
0001CA33 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001CA38 F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001CA3D 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001CA42 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001CA47 07                         SME_y00JM_83:	dc.b 7	
0001CA48 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CA4D F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CA52 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CA57 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CA5C E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CA61 E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CA66 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CA6B 04                         SME_y00JM_A7:	dc.b 4	
0001CA6C E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CA71 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CA76 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CA7B 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CA80 07                         SME_y00JM_BC:	dc.b 7	
0001CA81 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CA86 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CA8B 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CA90 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CA95 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CA9A F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CA9F F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CAA4 05                         SME_y00JM_E0:	dc.b 5	
0001CAA5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CAAA F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CAAF 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CAB4 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CAB9 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CABE 06                         SME_y00JM_FA:	dc.b 6	
0001CABF EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CAC4 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CAC9 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CACE 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CAD3 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CAD8 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CADD 08                         SME_y00JM_119:	dc.b 8	
0001CADE E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CAE3 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CAE8 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CAED 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CAF2 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CAF7 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CAFC 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CB01 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CB06 03                         SME_y00JM_142:	dc.b 3	
0001CB07 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CB0C F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CB11 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CB16                            		even
0001CB16                            		even
0001CB16                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CB16                            ; ---------------------------------------------------------------------------
0001CB16                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CB16                            ; ---------------------------------------------------------------------------
0001CB16                            
0001CB16                            FalseFloor:
0001CB16 7000                       		moveq	#0,d0
0001CB18 1028 0024                  		move.b	obRoutine(a0),d0
0001CB1C 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CB20 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CB24                            ; ===========================================================================
0001CB24 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CB26 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CB28 0000                       		dc.w loc_19C36-FFloor_Index
0001CB2A 0000                       		dc.w loc_19C62-FFloor_Index
0001CB2C 0000                       		dc.w loc_19C72-FFloor_Index
0001CB2E 0000                       		dc.w loc_19C80-FFloor_Index
0001CB30                            ; ===========================================================================
0001CB30                            
0001CB30                            FFloor_Main:	; Routine 0
0001CB30 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CB36 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CB3C 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CB42 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CB48 117C 0004 0001             		move.b	#4,obRender(a0)
0001CB4E 08E8 0007 0001             		bset	#7,obRender(a0)
0001CB54 7800                       		moveq	#0,d4
0001CB56 3A3C 1B10                  		move.w	#$1B10,d5
0001CB5A 7C07                       		moveq	#7,d6
0001CB5C 45E8 0030                  		lea	$30(a0),a2
0001CB60                            
0001CB60                            FFloor_MakeBlock:
0001CB60 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001CB66 6600                       		bne.s	FFloor_ExitMake
0001CB68 34C9                       		move.w	a1,(a2)+
0001CB6A 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CB6E 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CB76 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CB7C 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB82 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CB88 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CB8E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CB94 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CB98 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CB9E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CBA2 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CBA8 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CBAC                            
0001CBAC                            FFloor_ExitMake:
0001CBAC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CBB0 4E75                       		rts	
0001CBB2                            ; ===========================================================================
0001CBB2                            
0001CBB2                            FFloor_ChkBreak:; Routine 2
0001CBB2 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CBB8 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CBBA 4228 001A                  		clr.b	obFrame(a0)
0001CBBE 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CBC2                            
0001CBC2                            FFloor_Solid:
0001CBC2 7000                       		moveq	#0,d0
0001CBC4 1028 001A                  		move.b	obFrame(a0),d0
0001CBC8 4400                       		neg.b	d0
0001CBCA 4880                       		ext.w	d0
0001CBCC 5040                       		addq.w	#8,d0
0001CBCE E940                       		asl.w	#4,d0
0001CBD0 383C 1C00                  		move.w	#$1C00,d4
0001CBD4 9840                       		sub.w	d0,d4
0001CBD6 1140 0014                  		move.b	d0,obActWid(a0)
0001CBDA 3144 0008                  		move.w	d4,obX(a0)
0001CBDE 720B                       		moveq	#$B,d1
0001CBE0 D240                       		add.w	d0,d1
0001CBE2 7410                       		moveq	#$10,d2
0001CBE4 7611                       		moveq	#$11,d3
0001CBE6 4EF9 0001 195E             		jmp	(SolidObject).l
0001CBEC                            ; ===========================================================================
0001CBEC                            
0001CBEC                            loc_19C36:	; Routine 4
0001CBEC 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CBF2 6400                       		bcc.s	FFloor_Solid2
0001CBF4 70FF                       		moveq	#-1,d0
0001CBF6 1028 001A                  		move.b	obFrame(a0),d0
0001CBFA 4880                       		ext.w	d0
0001CBFC D040                       		add.w	d0,d0
0001CBFE 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CC02 2240                       		movea.l	d0,a1
0001CC04 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CC0A 5228 001A                  		addq.b	#1,obFrame(a0)
0001CC0E 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CC14 6700                       		beq.s	loc_19C62
0001CC16                            
0001CC16                            FFloor_Solid2:
0001CC16 60AA                       		bra.s	FFloor_Solid
0001CC18                            ; ===========================================================================
0001CC18                            
0001CC18                            loc_19C62:	; Routine 6
0001CC18 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CC1E 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CC24 6000 FB96                  		bra.w	loc_1982C
0001CC28                            ; ===========================================================================
0001CC28                            
0001CC28                            loc_19C72:	; Routine 8
0001CC28 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CC2E 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CC30 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001CC36                            ; ===========================================================================
0001CC36                            
0001CC36                            loc_19C80:	; Routine $A
0001CC36 4A28 0001                  		tst.b	obRender(a0)
0001CC3A 6A00 FB80                  		bpl.w	loc_1982C
0001CC3E 4EB9 0000 F3DA             		jsr	(ObjectFall).l
0001CC44 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001CC4A                            ; ===========================================================================
0001CC4A                            
0001CC4A                            FFloor_Break:
0001CC4A 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CC4E 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CC52 7801                       		moveq	#1,d4
0001CC54 7203                       		moveq	#3,d1
0001CC56 7438                       		moveq	#$38,d2
0001CC58 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CC5C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CC62 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CC68 43D0                       		lea	(a0),a1
0001CC6A 6000                       		bra.s	FFloor_MakeFrag
0001CC6C                            ; ===========================================================================
0001CC6C                            
0001CC6C                            FFloor_LoopFrag:
0001CC6C 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001CC72 6600                       		bne.s	FFloor_BreakSnd
0001CC74                            
0001CC74                            FFloor_MakeFrag:
0001CC74 45D0                       		lea	(a0),a2
0001CC76 47D1                       		lea	(a1),a3
0001CC78 7603                       		moveq	#3,d3
0001CC7A                            
0001CC7A                            loc_19CC4:
0001CC7A 26DA                       		move.l	(a2)+,(a3)+
0001CC7C 26DA                       		move.l	(a2)+,(a3)+
0001CC7E 26DA                       		move.l	(a2)+,(a3)+
0001CC80 26DA                       		move.l	(a2)+,(a3)+
0001CC82 51CB FFF6                  		dbf	d3,loc_19CC4
0001CC86                            
0001CC86 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CC8A 361D                       		move.w	(a5)+,d3
0001CC8C D769 0008                  		add.w	d3,obX(a1)
0001CC90 361D                       		move.w	(a5)+,d3
0001CC92 D769 000C                  		add.w	d3,obY(a1)
0001CC96 1344 001A                  		move.b	d4,obFrame(a1)
0001CC9A 5244                       		addq.w	#1,d4
0001CC9C 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CCA0                            
0001CCA0                            FFloor_BreakSnd:
0001CCAA 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001CCB0                            ; ===========================================================================
0001CCB0 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CCB4 0120 00C0                  		dc.w $120, $C0
0001CCB8 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CCBC 0010 0000                  		dc.w $10, 0
0001CCC0 0000 0010                  		dc.w 0,	$10
0001CCC4 0010 0010                  		dc.w $10, $10
0001CCC4 0010 0010                  		dc.w $10, $10
0001CCC8                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CCC8                            ; ---------------------------------------------------------------------------
0001CCC8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CCC8                            ; ---------------------------------------------------------------------------
0001CCC8                            Map_FFloor_internal:
0001CCC8 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CCCA 0000                       		dc.w @topleft-Map_FFloor_internal
0001CCCC 0000                       		dc.w @topright-Map_FFloor_internal
0001CCCE 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CCD0 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CCD2 01                         @wholeblock:	dc.b 1
0001CCD3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CCD8 02                         @topleft:	dc.b 2
0001CCD9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CCDE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CCE3 00                         		dc.b 0
0001CCE4 02                         @topright:	dc.b 2
0001CCE5 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CCEA F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CCEF 00                         		dc.b 0
0001CCF0 02                         @bottomleft:	dc.b 2
0001CCF1 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CCF6 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CCFB 00                         		dc.b 0
0001CCFC 02                         @bottomright:	dc.b 2
0001CCFD F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CD02 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CD08 00                         		even
0001CD08 00                         		even
0001CD08                            		include	"_incObj\85 Boss - Final.asm"
0001CD08                            ; ---------------------------------------------------------------------------
0001CD08                            ; Object 85 - Eggman (FZ)
0001CD08                            ; ---------------------------------------------------------------------------
0001CD08                            
0001CD08                            Obj85_Delete:
0001CD08 4EF9 0000 F466             		jmp	(DeleteObject).l
0001CD0E                            ; ===========================================================================
0001CD0E                            
0001CD0E                            BossFinal:
0001CD0E 7000                       		moveq	#0,d0
0001CD10 1028 0024                  		move.b	obRoutine(a0),d0
0001CD14 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CD18 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CD1C                            ; ===========================================================================
0001CD1C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CD1E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CD20 0000                       		dc.w loc_1A38E-Obj85_Index
0001CD22 0000                       		dc.w loc_1A346-Obj85_Index
0001CD24 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CD26 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CD28 0000                       		dc.w loc_1A264-Obj85_Index
0001CD2A                            
0001CD2A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CD30 0001 C9C4                  		dc.l Map_SEgg		; mappings pointer
0001CD34 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CD3A 0000 0000                  		dc.l Map_EggCyl
0001CD3E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CD44 0000 0000                  		dc.l Map_FZLegs
0001CD48 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CD4E 0001 C9C4                  		dc.l Map_SEgg
0001CD52 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD58 0001 AC48                  		dc.l Map_Eggman
0001CD5C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CD62 0001 AC48                  		dc.l Map_Eggman
0001CD66                            
0001CD66                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CD66 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CD6C 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CD72 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CD78 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CD7E 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CD84 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CD8A                            ; ===========================================================================
0001CD8A                            
0001CD8A                            Obj85_Main:	; Routine 0
0001CD8A 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CD8E 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CD92 2248                       		movea.l	a0,a1
0001CD94 7205                       		moveq	#5,d1
0001CD96 6000                       		bra.s	Obj85_LoadBoss
0001CD98                            ; ===========================================================================
0001CD98                            
0001CD98                            Obj85_Loop:
0001CD98 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001CD9E 6600                       		bne.s	loc_19E20
0001CDA0                            
0001CDA0                            Obj85_LoadBoss:
0001CDA0 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CDA4 335A 0008                  		move.w	(a2)+,obX(a1)
0001CDA8 335A 000C                  		move.w	(a2)+,obY(a1)
0001CDAC 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CDB0 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CDB4 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CDB8 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CDBC 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CDC0 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CDC4 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CDC8 137C 0004 0001             		move.b	#4,obRender(a1)
0001CDCE 08E8 0007 0001             		bset	#7,obRender(a0)
0001CDD4 2348 0034                  		move.l	a0,$34(a1)
0001CDD8 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CDDC                            
0001CDDC                            loc_19E20:
0001CDDC 45E8 0036                  		lea	$36(a0),a2
0001CDE0 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001CDE6 6600                       		bne.s	loc_19E5A
0001CDE8 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CDEC 3489                       		move.w	a1,(a2)
0001CDEE 2348 0034                  		move.l	a0,$34(a1)
0001CDF2 45E8 0038                  		lea	$38(a0),a2
0001CDF6 7400                       		moveq	#0,d2
0001CDF8 7203                       		moveq	#3,d1
0001CDFA                            
0001CDFA                            loc_19E3E:
0001CDFA 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001CE00 6600                       		bne.s	loc_19E5A
0001CE02 34C9                       		move.w	a1,(a2)+
0001CE04 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CE08 2348 0034                  		move.l	a0,$34(a1)
0001CE0C 1342 0028                  		move.b	d2,obSubtype(a1)
0001CE10 5442                       		addq.w	#2,d2
0001CE12 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CE16                            
0001CE16                            loc_19E5A:
0001CE16 317C 0000 0034             		move.w	#0,$34(a0)
0001CE1C 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 8
0001CE22 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CE28                            
0001CE28                            Obj85_Eggman:	; Routine 2
0001CE28 7000                       		moveq	#0,d0
0001CE2A 1028 0034                  		move.b	$34(a0),d0
0001CE2E 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CE32 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CE36 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001CE3C                            ; ===========================================================================
0001CE3C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CE40 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CE44 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CE48 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001CE4C                            ; ===========================================================================
0001CE4C                            
0001CE4C                            loc_19E90:
0001CE4C 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001CE50 6600                       		bne.s	loc_19EA2
0001CE52 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001CE58 6500                       		bcs.s	loc_19EA2
0001CE5A 5428 0034                  		addq.b	#2,$34(a0)
0001CE5E                            
0001CE5E                            loc_19EA2:
0001CE5E 52B8 F636                  		addq.l	#1,(v_random).w
0001CE62 4E75                       		rts	
0001CE64                            ; ===========================================================================
0001CE64                            
0001CE64                            loc_19EA8:
0001CE64 4A68 0030                  		tst.w	$30(a0)
0001CE68 6A00                       		bpl.s	loc_19F10
0001CE6A 4268 0030                  		clr.w	$30(a0)
0001CE6E 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001CE74 0240 000C                  		andi.w	#$C,d0
0001CE78 3200                       		move.w	d0,d1
0001CE7A 5441                       		addq.w	#2,d1
0001CE7C 4A80                       		tst.l	d0
0001CE7E 6A00                       		bpl.s	loc_19EC6
0001CE80 C340                       		exg	d1,d0
0001CE82                            
0001CE82                            loc_19EC6:
0001CE82 43FA 0000                  		lea	word_19FD6(pc),a1
0001CE86 3031 0000                  		move.w	(a1,d0.w),d0
0001CE8A 3231 1000                  		move.w	(a1,d1.w),d1
0001CE8E 3140 0030                  		move.w	d0,$30(a0)
0001CE92 74FF                       		moveq	#-1,d2
0001CE94 3430 0038                  		move.w	$38(a0,d0.w),d2
0001CE98 2242                       		movea.l	d2,a1
0001CE9A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CEA0 337C FFFF 0030             		move.w	#-1,$30(a1)
0001CEA6 3430 1038                  		move.w	$38(a0,d1.w),d2
0001CEAA 2242                       		movea.l	d2,a1
0001CEAC 137C 0001 0029             		move.b	#1,$29(a1)
0001CEB2 337C 0000 0030             		move.w	#0,$30(a1)
0001CEB8 317C 0001 0032             		move.w	#1,$32(a0)
0001CEBE 4228 0035                  		clr.b	$35(a0)
0001CECC                            
0001CECC                            loc_19F10:
0001CECC 4A68 0032                  		tst.w	$32(a0)
0001CED0 6B00 0000                  		bmi.w	loc_19FA6
0001CED4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CEDA 3038 D008                  		move.w	(v_player+obX).w,d0
0001CEDE 9068 0008                  		sub.w	obX(a0),d0
0001CEE2 6500                       		bcs.s	loc_19F2E
0001CEE4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CEEA                            
0001CEEA                            loc_19F2E:
0001CEEA 323C 002B                  		move.w	#$2B,d1
0001CEEE 343C 0014                  		move.w	#$14,d2
0001CEF2 363C 0014                  		move.w	#$14,d3
0001CEF6 3828 0008                  		move.w	obX(a0),d4
0001CEFA 4EB9 0001 195E             		jsr	(SolidObject).l
0001CF00 4A44                       		tst.w	d4
0001CF02 6E00                       		bgt.s	loc_19F50
0001CF04                            
0001CF04                            loc_19F48:
0001CF04 4A28 0035                  		tst.b	$35(a0)
0001CF08 6600                       		bne.s	loc_19F88
0001CF0A 6000                       		bra.s	loc_19F96
0001CF0C                            ; ===========================================================================
0001CF0C                            
0001CF0C                            loc_19F50:
0001CF0C 5E78 F636                  		addq.w	#7,(v_random).w
0001CF10 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001CF16 66EC                       		bne.s	loc_19F48
0001CF18 303C 0300                  		move.w	#$300,d0
0001CF1C 0828 0000 0022             		btst	#0,obStatus(a0)
0001CF22 6600                       		bne.s	loc_19F6A
0001CF24 4440                       		neg.w	d0
0001CF26                            
0001CF26                            loc_19F6A:
0001CF26 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001CF2A 4A28 0035                  		tst.b	$35(a0)
0001CF2E 6600                       		bne.s	loc_19F88
0001CF30 5328 0021                  		subq.b	#1,obColProp(a0)
0001CF34 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001CF3A 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001CF40                            
0001CF40                            loc_19F88:
0001CF40 5328 0035                  		subq.b	#1,$35(a0)
0001CF44 6700                       		beq.s	loc_19F96
0001CF46 117C 0003 001C             		move.b	#3,obAnim(a0)
0001CF4C 6000                       		bra.s	loc_19F9C
0001CF4E                            ; ===========================================================================
0001CF4E                            
0001CF4E                            loc_19F96:
0001CF4E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CF54                            
0001CF54                            loc_19F9C:
0001CF54 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001CF58 4EF9 0000 C4E0             		jmp	(AnimateSprite).l
0001CF5E                            ; ===========================================================================
0001CF5E                            
0001CF5E                            loc_19FA6:
0001CF5E 4A28 0021                  		tst.b	obColProp(a0)
0001CF62 6700                       		beq.s	loc_19FBC
0001CF64 5428 0034                  		addq.b	#2,$34(a0)
0001CF68 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CF6E 4268 0032                  		clr.w	$32(a0)
0001CF72 4E75                       		rts	
0001CF74                            ; ===========================================================================
0001CF74                            
0001CF74                            loc_19FBC:
0001CF74 7064                       			moveq	#100,d0
0001CF76 6100 0000                  			bsr.w	AddPoints
0001CF7A 117C 0006 0034             		move.b	#6,$34(a0)
0001CF80 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001CF86 317C 053C 000C             		move.w	#$53C,obY(a0)
0001CF8C 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001CF92 4E75                       		rts	
0001CF94                            ; ===========================================================================
0001CF94 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            loc_19FE6:
0001CFA4 70FF                       		moveq	#-1,d0
0001CFA6 3028 0036                  		move.w	$36(a0),d0
0001CFAA 2240                       		movea.l	d0,a1
0001CFAC 4A68 0030                  		tst.w	$30(a0)
0001CFB0 6A00                       		bpl.s	loc_1A000
0001CFB2 4268 0030                  		clr.w	$30(a0)
0001CFB6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001CFBC 6100                       		bsr.s	loc_1A020
0001CFBE                            
0001CFBE                            loc_1A000:
0001CFBE 700F                       		moveq	#$F,d0
0001CFC0 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001CFC4 6600                       		bne.s	loc_1A00A
0001CFC6 6100                       		bsr.s	loc_1A020
0001CFC8                            
0001CFC8                            loc_1A00A:
0001CFC8 4A68 0032                  		tst.w	$32(a0)
0001CFCC 6700                       		beq.s	locret_1A01E
0001CFCE 5528 0034                  		subq.b	#2,$34(a0)
0001CFD2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFD8 4268 0032                  		clr.w	$32(a0)
0001CFDC                            
0001CFDC                            locret_1A01E:
0001CFDC 4E75                       		rts	
0001CFDE                            ; ===========================================================================
0001CFDE                            
0001CFDE                            loc_1A020:
0001CFE8                            ; ===========================================================================
0001CFE8                            
0001CFE8                            loc_1A02A:
0001CFE8 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001CFEE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001CFF4 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001CFFA 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D000 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D006 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D00C 6500                       		bcs.s	loc_1A070
0001D00E 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D014 5428 0034                  		addq.b	#2,$34(a0)
0001D018 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D01E 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D024 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D02A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D02E                            
0001D02E                            loc_1A070:
0001D02E 6000 0000                  		bra.w	loc_1A166
0001D032                            ; ===========================================================================
0001D032                            
0001D032                            loc_1A074:
0001D032 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D038 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D03E 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001D044 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D04A 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D050 6500                       		bcs.s	loc_1A09A
0001D052 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D058                            
0001D058                            loc_1A09A:
0001D058 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D05E 3028 0008                  		move.w	obX(a0),d0
0001D062 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D066 6A00                       		bpl.s	loc_1A0B4
0001D068 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D06E 6000 0000                  		bra.w	loc_1A0F2
0001D072                            ; ===========================================================================
0001D072                            
0001D072                            loc_1A0B4:
0001D072 0440 0070                  		subi.w	#$70,d0
0001D076 6500                       		bcs.s	loc_1A0F2
0001D078 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D07E 5140                       		subq.w	#8,d0
0001D080 6500                       		bcs.s	loc_1A0F2
0001D082 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D088 5140                       		subq.w	#8,d0
0001D08A 6500                       		bcs.s	loc_1A0F2
0001D08C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D092 5140                       		subq.w	#8,d0
0001D094 6500                       		bcs.s	loc_1A0F2
0001D096 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D09C 5140                       		subq.w	#8,d0
0001D09E 6500                       		bcs.s	loc_1A0F2
0001D0A0 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D0A6 0440 0038                  		subi.w	#$38,d0
0001D0AA 6500                       		bcs.s	loc_1A0F2
0001D0AC 4268 0010                  		clr.w	obVelX(a0)
0001D0B0                            
0001D0B0                            loc_1A0F2:
0001D0B0 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D0B6 6500                       		bcs.s	loc_1A110
0001D0B8 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D0BE 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D0C4 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D0CA 5428 0034                  		addq.b	#2,$34(a0)
0001D0CE                            
0001D0CE                            loc_1A110:
0001D0CE 6000                       		bra.s	loc_1A15C
0001D0D0                            ; ===========================================================================
0001D0D0                            
0001D0D0                            loc_1A112:
0001D0D0 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001D0D6 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D0DC 6500                       		bcs.s	loc_1A124
0001D0DE 4268 0010                  		clr.w	obVelX(a0)
0001D0E2                            
0001D0E2                            loc_1A124:
0001D0E2 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D0E8 4A68 0012                  		tst.w	obVelY(a0)
0001D0EC 6B00                       		bmi.s	loc_1A142
0001D0EE 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D0F4 6500                       		bcs.s	loc_1A142
0001D0F6 317C 0592 000C             		move.w	#$592,obY(a0)
0001D0FC 4268 0012                  		clr.w	obVelY(a0)
0001D100                            
0001D100                            loc_1A142:
0001D100 3028 0010                  		move.w	obVelX(a0),d0
0001D104 8068 0012                  		or.w	obVelY(a0),d0
0001D108 6600                       		bne.s	loc_1A15C
0001D10A 5428 0034                  		addq.b	#2,$34(a0)
0001D10E 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D114 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D11A                            
0001D11A                            loc_1A15C:
0001D11A 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D11E 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001D124                            
0001D124                            loc_1A166:
0001D124 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D12A 6C00                       		bge.s	loc_1A172
0001D12C 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D130                            
0001D130                            loc_1A172:
0001D130 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D136 6C00                       		bge.s	locret_1A190
0001D138 323C 001B                  		move.w	#$1B,d1
0001D13C 343C 0070                  		move.w	#$70,d2
0001D140 363C 0071                  		move.w	#$71,d3
0001D144 3828 0008                  		move.w	obX(a0),d4
0001D148 4EF9 0001 195E             		jmp	(SolidObject).l
0001D14E                            ; ===========================================================================
0001D14E                            
0001D14E                            locret_1A190:
0001D14E 4E75                       		rts	
0001D150                            ; ===========================================================================
0001D150                            
0001D150                            loc_1A192:
0001D150 217C 0001 AC48 0004        		move.l	#Map_Eggman,obMap(a0)
0001D158 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D15E 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D164 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D16A 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001D170 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D176 6400                       		bcc.s	loc_1A1D0
0001D178 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D17E 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D184 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D18A 5428 0034                  		addq.b	#2,$34(a0)
0001D18E                            
0001D18E                            loc_1A1D0:
0001D18E 6000 FF8A                  		bra.w	loc_1A15C
0001D192                            ; ===========================================================================
0001D192                            
0001D192                            loc_1A1D4:
0001D192 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D198 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001D19E 4A68 0030                  		tst.w	$30(a0)
0001D1A2 6600                       		bne.s	loc_1A1FC
0001D1A4 4A28 0020                  		tst.b	obColType(a0)
0001D1A8 6600                       		bne.s	loc_1A216
0001D1AA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D1B0 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D1B6                            
0001D1B6                            loc_1A1FC:
0001D1B6 5368 0030                  		subq.w	#1,$30(a0)
0001D1BA 6600                       		bne.s	loc_1A216
0001D1BC 4A28 0022                  		tst.b	obStatus(a0)
0001D1C0 6A00                       		bpl.s	loc_1A210
0001D1C2 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D1C8 6000                       		bra.s	loc_1A216
0001D1CA                            ; ===========================================================================
0001D1CA                            
0001D1CA                            loc_1A210:
0001D1CA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D1D0                            
0001D1D0                            loc_1A216:
0001D1D0 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D1D6 6D00                       		blt.s	loc_1A23A
0001D1D8 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D1DE 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D1E4 4278 D020                  		clr.w	(v_player+obInertia).w
0001D1E8 4A68 0012                  		tst.w	obVelY(a0)
0001D1EC 6A00                       		bpl.s	loc_1A248
0001D1EE 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D1F4                            
0001D1F4                            loc_1A23A:
0001D1F4 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D1FA 6D00                       		blt.s	loc_1A248
0001D1FC 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D202                            
0001D202                            loc_1A248:
0001D202 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D208 6500                       		bcs.s	loc_1A260
0001D20A 4A28 0001                  		tst.b	obRender(a0)
0001D20E 6B00                       		bmi.s	loc_1A260
0001D210 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D216 6000 FAF0                  		bra.w	Obj85_Delete
0001D21A                            ; ===========================================================================
0001D21A                            
0001D21A                            loc_1A260:
0001D21A 6000 FEFE                  		bra.w	loc_1A15C
0001D21E                            ; ===========================================================================
0001D21E                            
0001D21E                            loc_1A264:	; Routine 4
0001D21E 2268 0034                  		movea.l	$34(a0),a1
0001D222 1011                       		move.b	(a1),d0
0001D224 B010                       		cmp.b	(a0),d0
0001D226 6600 FAE0                  		bne.w	Obj85_Delete
0001D22A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D230 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D236 6C00                       		bge.s	loc_1A280
0001D238 6000                       		bra.s	loc_1A2A6
0001D23A                            ; ===========================================================================
0001D23A                            
0001D23A                            loc_1A280:
0001D23A 4A69 0010                  		tst.w	obVelX(a1)
0001D23E 6700                       		beq.s	loc_1A28C
0001D240 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D246                            
0001D246                            loc_1A28C:
0001D246 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D24A 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001D250                            
0001D250                            loc_1A296:
0001D250 2268 0034                  		movea.l	$34(a0),a1
0001D254 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D25A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D260                            
0001D260                            loc_1A2A6:
0001D260 2268 0034                  		movea.l	$34(a0),a1
0001D264 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D26A 7003                       		moveq	#3,d0
0001D26C C028 0022                  		and.b	obStatus(a0),d0
0001D270 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D276 8128 0001                  		or.b	d0,obRender(a0)
0001D27A 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001D280                            ; ===========================================================================
0001D280                            
0001D280                            loc_1A2C6:	; Routine 6
0001D280 2268 0034                  		movea.l	$34(a0),a1
0001D284 1011                       		move.b	(a1),d0
0001D286 B010                       		cmp.b	(a0),d0
0001D288 6600 FA7E                  		bne.w	Obj85_Delete
0001D28C 0CA9 0001 AC48 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D294 6700                       		beq.s	loc_1A2E4
0001D296 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D29C 60C2                       		bra.s	loc_1A2A6
0001D29E                            ; ===========================================================================
0001D29E                            
0001D29E                            loc_1A2E4:
0001D29E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D2A4 4A29 0021                  		tst.b	obColProp(a1)
0001D2A8 6F00                       		ble.s	loc_1A312
0001D2AA 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D2B0 217C 0001 AC48 0004        		move.l	#Map_Eggman,obMap(a0)
0001D2B8 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D2BE 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D2C2 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001D2C8 6000 FF86                  		bra.w	loc_1A296
0001D2CC                            ; ===========================================================================
0001D2CC                            
0001D2CC                            loc_1A312:
0001D2CC 4A28 0001                  		tst.b	1(a0)
0001D2D0 6A00 FA36                  		bpl.w	Obj85_Delete
0001D2D4 6100 D4CC                  		bsr.w	BossDefeated
0001D2D8 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D2DE 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D2E4 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D2EC 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D2F2 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D2F6 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001D2FC 6000 FF52                  		bra.w	loc_1A296
0001D300                            ; ===========================================================================
0001D300                            
0001D300                            loc_1A346:	; Routine 8
0001D300 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D306 2268 0034                  		movea.l	$34(a0),a1
0001D30A 0CA9 0001 AC48 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D312 6700                       		beq.s	loc_1A35E
0001D314 6000 FF4A                  		bra.w	loc_1A2A6
0001D318                            ; ===========================================================================
0001D318                            
0001D318                            loc_1A35E:
0001D318 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D31E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D324 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D328 6600                       		bne.s	loc_1A376
0001D32A 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D330                            
0001D330                            loc_1A376:
0001D330 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D334 6E00                       		bgt.s	loc_1A38A
0001D336 5228 001A                  		addq.b	#1,obFrame(a0)
0001D33A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D340 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D344                            
0001D344                            loc_1A38A:
0001D344 6000 FF0A                  		bra.w	loc_1A296
0001D348                            ; ===========================================================================
0001D348                            
0001D348                            loc_1A38E:	; Routine $A
0001D348 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D34E 3038 D008                  		move.w	(v_player+obX).w,d0
0001D352 9068 0008                  		sub.w	obX(a0),d0
0001D356 6500                       		bcs.s	loc_1A3A6
0001D358 4A28 0001                  		tst.b	obRender(a0)
0001D35C 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D360                            
0001D360                            loc_1A3A6:
0001D360 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001D366                            ; ===========================================================================
0001D366                            
0001D366                            loc_1A3AC:	; Routine $C
0001D366 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D36C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D372 2268 0034                  		movea.l	$34(a0),a1
0001D376 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D37C 6600                       		bne.s	loc_1A3D0
0001D37E 0CA9 0001 AC48 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D386 6700 F980                  		beq.w	Obj85_Delete
0001D38A                            
0001D38A                            loc_1A3D0:
0001D38A 6000 FED4                  		bra.w	loc_1A2A6
0001D38E                            		
0001D38E                            BossModeMusic:
0001D38E 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001D394 6600 0000                  		bne.w	NormalMode
0001D398 4EF9 0000 0000             		jmp	PinchMode
0001D39E                            
0001D39E                            NormalMode:
0001D39E 303C 00AC                  		move.w	#$AC,d0
0001D3A2 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D3A8 4E75                       		rts
0001D3AA                            
0001D3AA                            PinchMode:
0001D3AA 303C 0094                  		move.w	#$94,d0
0001D3AE 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D3B4 303C 00E2                  		move.w	#$E2,d0
0001D3B8 4EB9 0000 129A             		jsr	(PlaySound).l
0001D3BE 4E75                       		rts		
0001D3BE 4E75                       		rts		
0001D3C0                            		include	"_anim\FZ Eggman in Ship.asm"
0001D3C0                            ; ---------------------------------------------------------------------------
0001D3C0                            ; Animation script - Eggman (FZ)
0001D3C0                            ; ---------------------------------------------------------------------------
0001D3C0 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D3C2 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D3C6                            		even
0001D3C6                            		even
0001D3C6                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D3C6                            ; ---------------------------------------------------------------------------
0001D3C6                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D3C6                            ; ---------------------------------------------------------------------------
0001D3C6                            Map_FZDamaged_internal:
0001D3C6 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D3C8 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D3CA 06                         @damage1:	dc.b 6
0001D3CB E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D3D0 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D3D5 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D3DA FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D3DF FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D3E4 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D3E9 06                         @damage2:	dc.b 6
0001D3EA E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D3EF EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D3F4 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D3F9 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D3FE FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D403 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D408                            		even
0001D408                            		even
0001D408                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D408                            ; ---------------------------------------------------------------------------
0001D408                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D408                            ; ---------------------------------------------------------------------------
0001D408                            Map_FZLegs_internal:
0001D408 0000                       		dc.w @extended-Map_FZLegs_internal
0001D40A 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D40C 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D40E 02                         @extended:	dc.b 2
0001D40F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D414 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D419 03                         @halfway:	dc.b 3
0001D41A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D41F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D424 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D429 02                         @retracted:	dc.b 2
0001D42A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D42F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D434                            		even
0001D434                            		even
0001D434                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D434                            ; ---------------------------------------------------------------------------
0001D434                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D434                            ; ---------------------------------------------------------------------------
0001D434                            
0001D434                            Obj84_Delete:
0001D434 4EF9 0000 F466             		jmp	(DeleteObject).l
0001D43A                            ; ===========================================================================
0001D43A                            
0001D43A                            EggmanCylinder:
0001D43A 7000                       		moveq	#0,d0
0001D43C 1028 0024                  		move.b	obRoutine(a0),d0
0001D440 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D444 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D448                            ; ===========================================================================
0001D448 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D44A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D44C 0000                       		dc.w loc_1A57E-Obj84_Index
0001D44E                            
0001D44E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D452 2550 0620                  		dc.w $2550, $620
0001D456 2490 04C0                  		dc.w $2490, $4C0
0001D45A 2510 04C0                  		dc.w $2510, $4C0
0001D45E                            ; ===========================================================================
0001D45E                            
0001D45E                            Obj84_Main:	; Routine
0001D45E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D462 7000                       		moveq	#0,d0
0001D464 1028 0028                  		move.b	obSubtype(a0),d0
0001D468 D040                       		add.w	d0,d0
0001D46A D2C0                       		adda.w	d0,a1
0001D46C 117C 0004 0001             		move.b	#4,obRender(a0)
0001D472 08E8 0007 0001             		bset	#7,obRender(a0)
0001D478 08E8 0004 0001             		bset	#4,obRender(a0)
0001D47E 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D484 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D48C 3159 0008                  		move.w	(a1)+,obX(a0)
0001D490 3151 000C                  		move.w	(a1),obY(a0)
0001D494 3159 0038                  		move.w	(a1)+,$38(a0)
0001D498 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D49E 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D4A4 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D4AA 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D4B0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D4B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D4BA                            
0001D4BA                            loc_1A4CE:	; Routine 2
0001D4BA 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D4C0 6F00                       		ble.s	loc_1A4DC
0001D4C2 08E8 0001 0001             		bset	#1,obRender(a0)
0001D4C8                            
0001D4C8                            loc_1A4DC:
0001D4C8 42A8 003C                  		clr.l	$3C(a0)
0001D4CC 4A28 0029                  		tst.b	$29(a0)
0001D4D0 6700                       		beq.s	loc_1A4EA
0001D4D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D4D6                            
0001D4D6                            loc_1A4EA:
0001D4D6 2028 003C                  		move.l	$3C(a0),d0
0001D4DA 2228 0038                  		move.l	$38(a0),d1
0001D4DE D280                       		add.l	d0,d1
0001D4E0 4841                       		swap	d1
0001D4E2 3141 000C                  		move.w	d1,obY(a0)
0001D4E6 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D4EC 6600                       		bne.s	loc_1A524
0001D4EE 4A68 0030                  		tst.w	$30(a0)
0001D4F2 6A00                       		bpl.s	loc_1A524
0001D4F4 70F6                       		moveq	#-$A,d0
0001D4F6 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D4FC 6F00                       		ble.s	loc_1A514
0001D4FE 700E                       		moveq	#$E,d0
0001D500                            
0001D500                            loc_1A514:
0001D500 D240                       		add.w	d0,d1
0001D502 2268 0034                  		movea.l	$34(a0),a1
0001D506 3341 000C                  		move.w	d1,obY(a1)
0001D50A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D510                            
0001D510                            loc_1A524:
0001D510 323C 002B                  		move.w	#$2B,d1
0001D514 343C 0060                  		move.w	#$60,d2
0001D518 363C 0061                  		move.w	#$61,d3
0001D51C 3828 0008                  		move.w	obX(a0),d4
0001D520 4EB9 0001 195E             		jsr	(SolidObject).l
0001D526 7000                       		moveq	#0,d0
0001D528 3228 003C                  		move.w	$3C(a0),d1
0001D52C 6A00                       		bpl.s	loc_1A550
0001D52E 4441                       		neg.w	d1
0001D530 5141                       		subq.w	#8,d1
0001D532 6500                       		bcs.s	loc_1A55C
0001D534 5200                       		addq.b	#1,d0
0001D536 E841                       		asr.w	#4,d1
0001D538 D041                       		add.w	d1,d0
0001D53A 6000                       		bra.s	loc_1A55C
0001D53C                            ; ===========================================================================
0001D53C                            
0001D53C                            loc_1A550:
0001D53C 0441 0027                  		subi.w	#$27,d1
0001D540 6500                       		bcs.s	loc_1A55C
0001D542 5200                       		addq.b	#1,d0
0001D544 E841                       		asr.w	#4,d1
0001D546 D041                       		add.w	d1,d0
0001D548                            
0001D548                            loc_1A55C:
0001D548 1140 001A                  		move.b	d0,obFrame(a0)
0001D54C 3038 D008                  		move.w	(v_player+obX).w,d0
0001D550 9068 0008                  		sub.w	obX(a0),d0
0001D554 6B00                       		bmi.s	loc_1A578
0001D556 0440 0140                  		subi.w	#$140,d0
0001D55A 6B00                       		bmi.s	loc_1A578
0001D55C 4A28 0001                  		tst.b	obRender(a0)
0001D560 6A00 FED2                  		bpl.w	Obj84_Delete
0001D564                            
0001D564                            loc_1A578:
0001D564 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001D56A                            ; ===========================================================================
0001D56A                            
0001D56A                            loc_1A57E:	; Routine 4
0001D56A 7000                       		moveq	#0,d0
0001D56C 1028 0028                  		move.b	obSubtype(a0),d0
0001D570 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D574 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D578 6000 FF5C                  		bra.w	loc_1A4EA
0001D57C                            ; ===========================================================================
0001D57C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D57E 0000                       		dc.w loc_1A598-off_1A590
0001D580 0000                       		dc.w loc_1A604-off_1A590
0001D582 0000                       		dc.w loc_1A604-off_1A590
0001D584                            ; ===========================================================================
0001D584                            
0001D584                            loc_1A598:
0001D584 4A28 0029                  		tst.b	$29(a0)
0001D588 6600                       		bne.s	loc_1A5D4
0001D58A 2268 0034                  		movea.l	$34(a0),a1
0001D58E 4A29 0021                  		tst.b	obColProp(a1)
0001D592 6600                       		bne.s	loc_1A5B4
0001D594 6100 D20C                  		bsr.w	BossDefeated
0001D598 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D5A0                            
0001D5A0                            loc_1A5B4:
0001D5A0 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D5A8 6400                       		bcc.s	locret_1A602
0001D5AA 42A8 003C                  		clr.l	$3C(a0)
0001D5AE 2268 0034                  		movea.l	$34(a0),a1
0001D5B2 5369 0032                  		subq.w	#1,$32(a1)
0001D5B6 4269 0030                  		clr.w	$30(a1)
0001D5BA 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D5BE 4E75                       		rts	
0001D5C0                            ; ===========================================================================
0001D5C0                            
0001D5C0                            loc_1A5D4:
0001D5C0 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D5C6 6C00                       		bge.s	loc_1A5E4
0001D5C8 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D5D0                            
0001D5D0                            loc_1A5E4:
0001D5D0 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D5D8 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D5DE 6E00                       		bgt.s	locret_1A602
0001D5E0 4268 003E                  		clr.w	$3E(a0)
0001D5E4 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D5EA 4228 0029                  		clr.b	$29(a0)
0001D5EE                            
0001D5EE                            locret_1A602:
0001D5EE 4E75                       		rts	
0001D5F0                            ; ===========================================================================
0001D5F0                            
0001D5F0                            loc_1A604:
0001D5F0 08E8 0001 0001             		bset	#1,obRender(a0)
0001D5F6 4A28 0029                  		tst.b	$29(a0)
0001D5FA 6600                       		bne.s	loc_1A646
0001D5FC 2268 0034                  		movea.l	$34(a0),a1
0001D600 4A29 0021                  		tst.b	obColProp(a1)
0001D604 6600                       		bne.s	loc_1A626
0001D606 6100 D19A                  		bsr.w	BossDefeated
0001D60A 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D612                            
0001D612                            loc_1A626:
0001D612 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D61A 6400                       		bcc.s	locret_1A674
0001D61C 42A8 003C                  		clr.l	$3C(a0)
0001D620 2268 0034                  		movea.l	$34(a0),a1
0001D624 5369 0032                  		subq.w	#1,$32(a1)
0001D628 4269 0030                  		clr.w	$30(a1)
0001D62C 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D630 4E75                       		rts	
0001D632                            ; ===========================================================================
0001D632                            
0001D632                            loc_1A646:
0001D632 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D638 6D00                       		blt.s	loc_1A656
0001D63A 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D642                            
0001D642                            loc_1A656:
0001D642 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D64A 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D650 6D00                       		blt.s	locret_1A674
0001D652 4268 003E                  		clr.w	$3E(a0)
0001D656 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D65C 4228 0029                  		clr.b	$29(a0)
0001D660                            
0001D660                            locret_1A674:
0001D660 4E75                       		rts	
0001D660 4E75                       		rts	
0001D662                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D662                            ; --------------------------------------------------------------------------------
0001D662                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D662                            ; --------------------------------------------------------------------------------
0001D662                            
0001D662                            SME_SCUpI:	
0001D662 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D666 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D66A 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D66E 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D672 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D676 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D67A 06                         SME_SCUpI_18:	dc.b 6	
0001D67B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D680 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D685 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D68A B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D68F B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D694 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D699 08                         SME_SCUpI_37:	dc.b 8	
0001D69A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D69F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6A4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6A9 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6AE B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6B3 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6B8 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6BD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6C2 0A                         SME_SCUpI_60:	dc.b $A	
0001D6C3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6C8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D6CD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D6D2 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D6D7 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D6DC D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D6E1 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D6E6 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D6EB F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D6F0 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D6F5 0C                         SME_SCUpI_93:	dc.b $C	
0001D6F6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D6FB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D700 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D705 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D70A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D70F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D714 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D719 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D71E F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D723 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D728 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D72D A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D732 0D                         SME_SCUpI_D0:	dc.b $D	
0001D733 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D738 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D73D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D742 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D747 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D74C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D751 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D756 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D75B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D760 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D765 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D76A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D76F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D774 0E                         SME_SCUpI_112:	dc.b $E	
0001D775 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D77A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D77F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D784 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D789 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D78E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D793 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D798 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D79D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7A2 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7A7 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7AC 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7B1 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7B6 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D7BB 0E                         SME_SCUpI_159:	dc.b $E	
0001D7BC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D7C1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D7C6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D7CB B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D7D0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D7D5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D7DA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D7DF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D7E4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D7E9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D7EE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D7F3 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D7F8 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D7FD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D802 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D803 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D808 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D80D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D812 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D817 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D81C D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D821 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D826 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D82B F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D830 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D835 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D83A 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D83F 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D844 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D849 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D84A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D84F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D854 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D859 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D85E B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D863 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D868 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D86D F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D872 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D877 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D87C 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D881 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D886 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D88B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D890 0E                         SME_SCUpI_22E:	dc.b $E	
0001D891 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D896 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D89B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8A0 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8A5 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8AA D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8AF D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8B4 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8B9 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8BE 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8C3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8C8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D8CD 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D8D2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8D7 0E                         SME_SCUpI_275:	dc.b $E	
0001D8D8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8DD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8E2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8E7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8EC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8F1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8F6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8FB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D900 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D905 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D90A 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D90F 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D914 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D919 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D91E 02                         SME_SCUpI_2BC:	dc.b 2	
0001D91F F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001D924 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001D92A 00                         		even
0001D92A 00                         		even
0001D92A                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001D92A                            ; ---------------------------------------------------------------------------
0001D92A                            ; Object 86 - energy balls (FZ)
0001D92A                            ; ---------------------------------------------------------------------------
0001D92A                            
0001D92A                            BossPlasma:
0001D92A 7000                       		moveq	#0,d0
0001D92C 1028 0024                  		move.b	obRoutine(a0),d0
0001D930 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001D934 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001D938                            ; ===========================================================================
0001D938 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001D93A 0000                       		dc.w Obj86_Generator-Obj86_Index
0001D93C 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001D93E 0000                       		dc.w loc_1A962-Obj86_Index
0001D940 0000                       		dc.w loc_1A982-Obj86_Index
0001D942                            ; ===========================================================================
0001D942                            
0001D942                            Obj86_Main:	; Routine 0
0001D942 317C 2588 0008             		move.w	#$2588,obX(a0)
0001D948 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D94E 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D954 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001D95C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D962 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D968 117C 0008 0017             		move.b	#8,obWidth(a0)
0001D96E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001D974 117C 0004 0001             		move.b	#4,obRender(a0)
0001D97A 08E8 0007 0001             		bset	#7,obRender(a0)
0001D980 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D984                            
0001D984                            Obj86_Generator:; Routine 2
0001D984 2268 0034                  		movea.l	$34(a0),a1
0001D988 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001D98E 6600                       		bne.s	loc_1A850
0001D990 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001D994 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001D99A 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001D9A0                            ; ===========================================================================
0001D9A0                            
0001D9A0                            loc_1A850:
0001D9A0 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D9A6 4A28 0029                  		tst.b	$29(a0)
0001D9AA 6700                       		beq.s	loc_1A86C
0001D9AC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D9B0 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D9B6 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001D9BC                            
0001D9BC                            loc_1A86C:
0001D9BC 323C 0013                  		move.w	#$13,d1
0001D9C0 343C 0008                  		move.w	#8,d2
0001D9C4 363C 0011                  		move.w	#$11,d3
0001D9C8 3828 0008                  		move.w	obX(a0),d4
0001D9CC 4EB9 0001 195E             		jsr	(SolidObject).l
0001D9D2 3038 D008                  		move.w	(v_player+obX).w,d0
0001D9D6 9068 0008                  		sub.w	obX(a0),d0
0001D9DA 6B00                       		bmi.s	loc_1A89A
0001D9DC 0440 0140                  		subi.w	#$140,d0
0001D9E0 6B00                       		bmi.s	loc_1A89A
0001D9E2 4A28 0001                  		tst.b	obRender(a0)
0001D9E6 6A00 FA4C                  		bpl.w	Obj84_Delete
0001D9EA                            
0001D9EA                            loc_1A89A:
0001D9EA 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001D9EE 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001D9F4 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001D9FA                            ; ===========================================================================
0001D9FA                            
0001D9FA                            Obj86_MakeBalls:; Routine 4
0001D9FA 4A28 0029                  		tst.b	$29(a0)
0001D9FE 6700 0000                  		beq.w	loc_1A954
0001DA02 4228 0029                  		clr.b	$29(a0)
0001DA06 D068 0030                  		add.w	$30(a0),d0
0001DA0A 0240 001E                  		andi.w	#$1E,d0
0001DA0E D4C0                       		adda.w	d0,a2
0001DA10 5868 0030                  		addq.w	#4,$30(a0)
0001DA14 4268 0032                  		clr.w	$32(a0)
0001DA18 7403                       		moveq	#3,d2
0001DA1A                            
0001DA1A                            Obj86_Loop:
0001DA1A 4EB9 0000 F9D6             		jsr	(FindNextFreeObj).l
0001DA20 6600 0000                  		bne.w	loc_1A954
0001DA24 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DA28 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DA2E 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DA34 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DA3A 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DA40 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DA48 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DA4E 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DA54 137C 0000 0020             		move.b	#0,obColType(a1)
0001DA5A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DA60 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DA66 137C 0004 0001             		move.b	#4,obRender(a1)
0001DA6C 08E9 0007 0001             		bset	#7,obRender(a1)
0001DA72 2348 0034                  		move.l	a0,$34(a1)
0001DA76 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001DA7C 3228 0032                  		move.w	$32(a0),d1
0001DA80 C3FC FFB1                  		muls.w	#-$4F,d1
0001DA84 0641 2578                  		addi.w	#$2578,d1
0001DA88 0240 001F                  		andi.w	#$1F,d0
0001DA8C 0440 0010                  		subi.w	#$10,d0
0001DA90 D041                       		add.w	d1,d0
0001DA92 3340 0030                  		move.w	d0,$30(a1)
0001DA96 5268 0032                  		addq.w	#1,$32(a0)
0001DA9A 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DAA0 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DAA4                            
0001DAA4                            loc_1A954:
0001DAA4 4A68 0032                  		tst.w	$32(a0)
0001DAA8 6600                       		bne.s	loc_1A95E
0001DAAA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DAAE                            
0001DAAE                            loc_1A95E:
0001DAAE 6000 FF0C                  		bra.w	loc_1A86C
0001DAB2                            ; ===========================================================================
0001DAB2                            
0001DAB2                            loc_1A962:	; Routine 6
0001DAB2 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DAB8 4A68 0038                  		tst.w	$38(a0)
0001DABC 6600                       		bne.s	loc_1A97E
0001DABE 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DAC4 2268 0034                  		movea.l	$34(a0),a1
0001DAC8 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DACE                            
0001DACE                            loc_1A97E:
0001DACE 6000 FEEC                  		bra.w	loc_1A86C
0001DAD2                            ; ===========================================================================
0001DAD2                            
0001DAD2                            loc_1A982:	; Routine 8
0001DAD2 7000                       		moveq	#0,d0
0001DAD4 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DAD8 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DADC 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DAE0 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DAE4 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001DAEA 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001DAF0                            ; ===========================================================================
0001DAF0 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DAF2 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DAF4 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DAF6                            ; ===========================================================================
0001DAF6                            
0001DAF6                            loc_1A9A6:
0001DAF6 3028 0030                  		move.w	$30(a0),d0
0001DAFA 9068 0008                  		sub.w	obX(a0),d0
0001DAFE E940                       		asl.w	#4,d0
0001DB00 3140 0010                  		move.w	d0,obVelX(a0)
0001DB04 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB0A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DB0E 4E75                       		rts	
0001DB10                            ; ===========================================================================
0001DB10                            
0001DB10                            loc_1A9C0:
0001DB10 4A68 0010                  		tst.w	obVelX(a0)
0001DB14 6700                       		beq.s	loc_1A9E6
0001DB16 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001DB1C 3028 0008                  		move.w	obX(a0),d0
0001DB20 9068 0030                  		sub.w	$30(a0),d0
0001DB24 6400                       		bcc.s	loc_1A9E6
0001DB26 4268 0010                  		clr.w	obVelX(a0)
0001DB2A D168 0008                  		add.w	d0,obX(a0)
0001DB2E 2268 0034                  		movea.l	$34(a0),a1
0001DB32 5369 0032                  		subq.w	#1,$32(a1)
0001DB36                            
0001DB36                            loc_1A9E6:
0001DB36 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB3C 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DB40 6600                       		bne.s	locret_1AA1C
0001DB42 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DB46 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB4C 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DB52 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DB58 7000                       		moveq	#0,d0
0001DB5A 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB5E 9068 0008                  		sub.w	obX(a0),d0
0001DB62 3140 0010                  		move.w	d0,obVelX(a0)
0001DB66 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DB6C                            
0001DB6C                            locret_1AA1C:
0001DB6C 4E75                       		rts	
0001DB6E                            ; ===========================================================================
0001DB6E                            
0001DB6E                            loc_1AA1E:
0001DB6E 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001DB74 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DB7A 6400                       		bcc.s	loc_1AA34
0001DB7C 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DB80 6700                       		beq.s	loc_1AA34
0001DB82 4E75                       		rts	
0001DB84                            ; ===========================================================================
0001DB84                            
0001DB84                            loc_1AA34:
0001DB84 2268 0034                  		movea.l	$34(a0),a1
0001DB88 5369 0038                  		subq.w	#1,$38(a1)
0001DB8C 6000 F8A6                  		bra.w	Obj84_Delete
0001DB8C 6000 F8A6                  		bra.w	Obj84_Delete
0001DB90                            		include	"_anim\Plasma Ball Launcher.asm"
0001DB90                            ; ---------------------------------------------------------------------------
0001DB90                            ; Animation script - energy ball launcher (FZ)
0001DB90                            ; ---------------------------------------------------------------------------
0001DB90 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DB92 0000                       		dc.w @redsparking-Ani_PLaunch
0001DB94 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DB96 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DB9A 00                         		even
0001DB9A 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DBA0                            		even
0001DBA0 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DBA6                            		even
0001DBA6                            		even
0001DBA6                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6                            ; Sprite mappings - energy ball	launcher (FZ)
0001DBA6                            ; ---------------------------------------------------------------------------
0001DBA6                            Map_PLaunch_internal:
0001DBA6 0000                       		dc.w @red-Map_PLaunch_internal
0001DBA8 0000                       		dc.w @white-Map_PLaunch_internal
0001DBAA 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DBAC 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DBAE 01                         @red:		dc.b 1
0001DBAF F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DBB4 01                         @white:		dc.b 1
0001DBB5 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DBBA 01                         @sparking1:	dc.b 1
0001DBBB F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DBC0 01                         @sparking2:	dc.b 1
0001DBC1 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DBC6                            		even
0001DBC6                            		even
0001DBC6                            		include	"_anim\Plasma Balls.asm"
0001DBC6                            ; ---------------------------------------------------------------------------
0001DBC6                            ; Animation script - energy balls (FZ)
0001DBC6                            ; ---------------------------------------------------------------------------
0001DBC6 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DBC8 0000                       		dc.w @short-Ani_Plasma
0001DBCA 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DBD9 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DBE8 0A05 FF                    		dc.b $A, 5, afEnd
0001DBEC 00                         		even
0001DBEC 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DBF6                            		even
0001DBF6                            		even
0001DBF6                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DBF6                            ; ---------------------------------------------------------------------------
0001DBF6                            ; Sprite mappings - energy balls (FZ)
0001DBF6                            ; ---------------------------------------------------------------------------
0001DBF6                            Map_Plasma_internal:
0001DBF6 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DBF8 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DBFA 0000                       		dc.w @white1-Map_Plasma_internal
0001DBFC 0000                       		dc.w @white2-Map_Plasma_internal
0001DBFE 0000                       		dc.w @white3-Map_Plasma_internal
0001DC00 0000                       		dc.w @white4-Map_Plasma_internal
0001DC02 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DC04 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DC06 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DC08 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DC0A 0000                       		dc.w @blank-Map_Plasma_internal
0001DC0C 02                         @fuzzy1:	dc.b 2
0001DC0D F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DC12 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DC17 02                         @fuzzy2:	dc.b 2
0001DC18 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DC1D F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DC22 02                         @white1:	dc.b 2
0001DC23 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DC28 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DC2D 02                         @white2:	dc.b 2
0001DC2E F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DC33 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DC38 02                         @white3:	dc.b 2
0001DC39 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DC3E 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DC43 02                         @white4:	dc.b 2
0001DC44 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DC49 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DC4E 01                         @fuzzy3:	dc.b 1
0001DC4F F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DC54 01                         @fuzzy4:	dc.b 1
0001DC55 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DC5A 02                         @fuzzy5:	dc.b 2
0001DC5B F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DC60 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DC65 02                         @fuzzy6:	dc.b 2
0001DC66 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DC6B F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DC70 00                         @blank:		dc.b 0
0001DC72 00                         		even
0001DC72 00                         		even
0001DC72                            
0001DC72                            		include	"_incObj\3E Prison Capsule.asm"
0001DC72                            ; ---------------------------------------------------------------------------
0001DC72                            ; Object 3E - prison capsule
0001DC72                            ; ---------------------------------------------------------------------------
0001DC72                            
0001DC72                            Prison:
0001DC72 7000                       		moveq	#0,d0
0001DC74 1028 0024                  		move.b	obRoutine(a0),d0
0001DC78 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DC7C 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DC9C 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001DCA2                            
0001DCA2                            	@delete:
0001DCA2 4EF9 0000 F466             		jmp	(DeleteObject).l
0001DCA8                            ; ===========================================================================
0001DCA8 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DCAA 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DCAC 0000                       		dc.w Pri_Switched-Pri_Index
0001DCAE 0000                       		dc.w Pri_Explosion-Pri_Index
0001DCB0 0000                       		dc.w Pri_Explosion-Pri_Index
0001DCB2 0000                       		dc.w Pri_Explosion-Pri_Index
0001DCB4 0000                       		dc.w Pri_Animals-Pri_Index
0001DCB6 0000                       		dc.w Pri_EndAct-Pri_Index
0001DCB8                            
0001DCB8 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DCB8                            
0001DCB8 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DCBC 040C 0501                  		dc.b 4,	$C, 5, 1
0001DCC0 0610 0403                  		dc.b 6,	$10, 4,	3
0001DCC4 0810 0305                  		dc.b 8,	$10, 3,	5
0001DCC8                            ; ===========================================================================
0001DCC8                            
0001DCC8                            Pri_Main:	; Routine 0
0001DCC8 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DCD0 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DCD6 117C 0004 0001             		move.b	#4,obRender(a0)
0001DCDC 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DCE2 7000                       		moveq	#0,d0
0001DCE4 1028 0028                  		move.b	obSubtype(a0),d0
0001DCE8 E548                       		lsl.w	#2,d0
0001DCEA 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DCEE 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DCF2 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DCF6 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DCFA 3028 0018                  		move.w obPriority(a0),d0 
0001DCFE E248                       		lsr.w #1,d0 
0001DD00 0240 0380                  		andi.w #$380,d0 
0001DD04 3140 0018                  		move.w d0,obPriority(a0)		
0001DD08 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DD0C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DD10 6600                       		bne.s	@not02		; if not, branch
0001DD12                            
0001DD12 117C 0006 0020             		move.b	#6,obColType(a0)
0001DD18 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DD1E                            
0001DD1E                            	@not02:
0001DD1E 4E75                       		rts	
0001DD20                            ; ===========================================================================
0001DD20                            
0001DD20                            Pri_BodyMain:	; Routine 2
0001DD20 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DD26 6700                       		beq.s	@chkopened
0001DD28 323C 002B                  		move.w	#$2B,d1
0001DD2C 343C 0018                  		move.w	#$18,d2
0001DD30 363C 0018                  		move.w	#$18,d3
0001DD34 3828 0008                  		move.w	obX(a0),d4
0001DD38 4EF9 0001 195E             		jmp	(SolidObject).l
0001DD3E                            ; ===========================================================================
0001DD3E                            
0001DD3E                            @chkopened:
0001DD3E 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DD42 6700                       		beq.s	@open		; if yes, branch
0001DD44 4228 0025                  		clr.b	ob2ndRout(a0)
0001DD48 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DD4E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DD54                            
0001DD54                            	@open:
0001DD54 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DD5A                            		
0001DD5A                            	@rts:
0001DD5A 4E75                       		rts
0001DD5C                            ; ===========================================================================
0001DD5C                            
0001DD5C                            Pri_Switched:	; Routine 4
0001DD5C 323C 0017                  		move.w	#$17,d1
0001DD60 343C 0008                  		move.w	#8,d2
0001DD64 363C 0008                  		move.w	#8,d3
0001DD68 3828 0008                  		move.w	obX(a0),d4
0001DD6C 4EB9 0001 195E             		jsr	(SolidObject).l
0001DD72 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DD78 4EB9 0000 C4E0             		jsr	(AnimateSprite).l
0001DD7E 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DD84 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DD88 6700                       		beq.s	@open2		; if yes, branch
0001DD8A                            
0001DD8A 5068 000C                  		addq.w	#8,obY(a0)
0001DD8E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DD94 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DD9A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DD9E 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DDA2 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DDA8 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DDAE 4228 0025                  		clr.b	ob2ndRout(a0)
0001DDB2 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DDB8 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DDBE 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001DDC2 6700                       		beq.s	@open2
0001DDC4 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001DDD2                            
0001DDD2                            	@open2:
0001DDD2 4E75                       		rts	
0001DDD4                            ; ===========================================================================
0001DDD4                            
0001DDD4                            Pri_Explosion:	; Routine 6, 8, $A
0001DDD4 7007                       		moveq	#7,d0
0001DDD6 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DDDA 6600                       		bne.s	@noexplosion
0001DDDC 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001DDE2 6600                       		bne.s	@noexplosion
0001DDE4 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DDE8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DDEE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DDF4 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001DDFA 7200                       		moveq	#0,d1
0001DDFC 1200                       		move.b	d0,d1
0001DDFE E409                       		lsr.b	#2,d1
0001DE00 0441 0020                  		subi.w	#$20,d1
0001DE04 D369 0008                  		add.w	d1,obX(a1)
0001DE08 E048                       		lsr.w	#8,d0
0001DE0A E608                       		lsr.b	#3,d0
0001DE0C D169 000C                  		add.w	d0,obY(a1)
0001DE10                            
0001DE10                            	@noexplosion:
0001DE10 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DE14 6700                       		beq.s	@makeanimal
0001DE16 4E75                       		rts	
0001DE18                            ; ===========================================================================
0001DE18                            
0001DE18                            @makeanimal:
0001DE18 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DE1E 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DE24 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DE2A 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DE30 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DE36 7C07                       		moveq	#7,d6
0001DE38 3A3C 009A                  		move.w	#$9A,d5
0001DE3C 78E4                       		moveq	#-$1C,d4
0001DE3E                            
0001DE3E                            	@loop:
0001DE3E 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001DE44 6600                       		bne.s	@fail
0001DE46 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DE4A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE50 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE56 D969 0008                  		add.w	d4,obX(a1)
0001DE5A 5E44                       		addq.w	#7,d4
0001DE5C 3345 0036                  		move.w	d5,$36(a1)
0001DE60 5145                       		subq.w	#8,d5
0001DE62 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001DE66                            
0001DE66                            	@fail:
0001DE66 4E75                       		rts	
0001DE68                            ; ===========================================================================
0001DE68                            
0001DE68                            Pri_Animals:	; Routine $C
0001DE68 7007                       		moveq	#7,d0
0001DE6A C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DE6E 6600                       		bne.s	@noanimal
0001DE70 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001DE76 6600                       		bne.s	@noanimal
0001DE78 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DE7C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DE82 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DE88 4EB9 0000 3B1C             		jsr	(RandomNumber).l
0001DE8E 0240 001F                  		andi.w	#$1F,d0
0001DE92 5D40                       		subq.w	#6,d0
0001DE94 4A41                       		tst.w	d1
0001DE96 6A00                       		bpl.s	@ispositive
0001DE98 4440                       		neg.w	d0
0001DE9A                            
0001DE9A                            	@ispositive:
0001DE9A D169 0008                  		add.w	d0,obX(a1)
0001DE9E 337C 000C 0036             		move.w	#$C,$36(a1)
0001DEA4                            
0001DEA4                            	@noanimal:
0001DEA4 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DEA8 6600                       		bne.s	@wait
0001DEAA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DEAE 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001DEB4                            
0001DEB4                            	@wait:
0001DEB4 4E75                       		rts	
0001DEB6                            ; ===========================================================================
0001DEB6                            
0001DEB6                            Pri_EndAct:	; Routine $E
0001DEB6 703E                       		moveq	#$3E,d0
0001DEB8 7228                       		moveq	#id_Animals,d1
0001DEBA 7440                       		moveq	#$40,d2
0001DEBC 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001DEC0                            
0001DEC0                            	@findanimal:
0001DEC0 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001DEC2 6700                       		beq.s	@found		; if yes, branch
0001DEC4 D2C2                       		adda.w	d2,a1		; next object RAM
0001DEC6 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001DECA                            
0001DECA 4EB9 0001 0C80             		jsr	(GotThroughAct1).l
0001DED0 4EF9 0000 F466             		jmp	(DeleteObject).l
0001DED6                            
0001DED6                            	@found:
0001DED6 4E75                       		rts	
0001DED6 4E75                       		rts	
0001DED8                            		include	"_anim\Prison Capsule.asm"
0001DED8                            ; ---------------------------------------------------------------------------
0001DED8                            ; Animation script - prison capsule
0001DED8                            ; ---------------------------------------------------------------------------
0001DED8 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001DEDA 0000                       		dc.w @switchflash-Ani_Pri
0001DEDC 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001DEE0                            		even
0001DEE0                            		even
0001DEE0                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001DEE0                            ; ---------------------------------------------------------------------------
0001DEE0                            ; Sprite mappings - prison capsule
0001DEE0                            ; ---------------------------------------------------------------------------
0001DEE0                            Map_Pri_internal:
0001DEE0 0000                       		dc.w @capsule-Map_Pri_internal
0001DEE2 0000                       		dc.w @switch1-Map_Pri_internal
0001DEE4 0000                       		dc.w @broken-Map_Pri_internal
0001DEE6 0000                       		dc.w @switch2-Map_Pri_internal
0001DEE8 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001DEEA 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001DEEC 0000                       		dc.w @blank-Map_Pri_internal
0001DEEE 07                         @capsule:	dc.b 7
0001DEEF E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001DEF4 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001DEF9 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001DEFE F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001DF03 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001DF08 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF0D 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DF12 01                         @switch1:	dc.b 1
0001DF13 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001DF18 06                         @broken:	dc.b 6
0001DF19 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001DF1E 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001DF23 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001DF28 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001DF2D 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001DF32 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001DF37 01                         @switch2:	dc.b 1
0001DF38 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001DF3D 02                         @unusedthing1:	dc.b 2
0001DF3E E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001DF43 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001DF48 01                         @unusedthing2:	dc.b 1
0001DF49 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001DF4E 00                         @blank:		dc.b 0
0001DF50 00                         		even
0001DF50 00                         		even
0001DF50                            
0001DF50                            		include	"_incObj\sub ReactToItem.asm"
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50                            ; Subroutine to react to obColType(a0)
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50                            
0001DF50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF50                            
0001DF50                            
0001DF50                            ReactToItem:
0001DF50 4E71                       		nop	
0001DF52 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001DF56 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001DF5A 5142                       		subq.w	#8,d2
0001DF5C 7A00                       		moveq	#0,d5
0001DF5E 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001DF62 5705                       		subq.b	#3,d5
0001DF64 9645                       		sub.w	d5,d3
0001DF66 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001DF6C 6600                       		bne.s	@notducking	; if not, branch
0001DF6E 0643 000C                  		addi.w	#$C,d3
0001DF72 7A0A                       		moveq	#$A,d5
0001DF74                            
0001DF74                            	@notducking:
0001DF74 383C 0010                  		move.w	#$10,d4
0001DF78 DA45                       		add.w	d5,d5
0001DF7A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001DF7E 3C3C 005F                  		move.w	#$5F,d6
0001DF82                            
0001DF82                            @loop:
0001DF82 4A29 0001                  		tst.b	obRender(a1)
0001DF86 6A00                       		bpl.s	@next
0001DF88 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001DF8C 6600                       		bne.s	@proximity	; if nonzero, branch
0001DF8E                            
0001DF8E                            	@next:
0001DF8E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001DF92 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001DF96                            
0001DF96 7000                       		moveq	#0,d0
0001DF98 4E75                       		rts	
0001DF9A                            ; ===========================================================================
0001DF9A                            @sizes:		;   width, height
0001DF9A 1414                       		dc.b  $14, $14		; $01
0001DF9C 0C14                       		dc.b   $C, $14		; $02
0001DF9E 140C                       		dc.b  $14,  $C		; $03
0001DFA0 0410                       		dc.b	4, $10		; $04
0001DFA2 0C12                       		dc.b   $C, $12		; $05
0001DFA4 1010                       		dc.b  $10, $10		; $06
0001DFA6 0606                       		dc.b	6,   6		; $07
0001DFA8 180C                       		dc.b  $18,  $C		; $08
0001DFAA 0C10                       		dc.b   $C, $10		; $09
0001DFAC 100C                       		dc.b  $10,  $C		; $0A
0001DFAE 0808                       		dc.b	8,   8		; $0B
0001DFB0 1410                       		dc.b  $14, $10		; $0C
0001DFB2 1408                       		dc.b  $14,   8		; $0D
0001DFB4 0E0E                       		dc.b   $E,  $E		; $0E
0001DFB6 1818                       		dc.b  $18, $18		; $0F
0001DFB8 2810                       		dc.b  $28, $10		; $10
0001DFBA 1018                       		dc.b  $10, $18		; $11
0001DFBC 0810                       		dc.b	8, $10		; $12
0001DFBE 2070                       		dc.b  $20, $70		; $13
0001DFC0 4020                       		dc.b  $40, $20		; $14
0001DFC2 8020                       		dc.b  $80, $20		; $15
0001DFC4 2020                       		dc.b  $20, $20		; $16
0001DFC6 0808                       		dc.b	8,   8		; $17
0001DFC8 0404                       		dc.b	4,   4		; $18
0001DFCA 2008                       		dc.b  $20,   8		; $19
0001DFCC 0C0C                       		dc.b   $C,  $C		; $1A
0001DFCE 0804                       		dc.b	8,   4		; $1B
0001DFD0 1804                       		dc.b  $18,   4		; $1C
0001DFD2 2804                       		dc.b  $28,   4		; $1D
0001DFD4 0408                       		dc.b	4,   8		; $1E
0001DFD6 0418                       		dc.b	4, $18		; $1F
0001DFD8 0428                       		dc.b	4, $28		; $20
0001DFDA 0420                       		dc.b	4, $20		; $21
0001DFDC 1818                       		dc.b  $18, $18		; $22
0001DFDE 0C18                       		dc.b   $C, $18		; $23
0001DFE0 4808                       		dc.b  $48,   8		; $24
0001DFE2                            ; ===========================================================================
0001DFE2                            
0001DFE2                            @proximity:
0001DFE2 0240 003F                  		andi.w	#$3F,d0
0001DFE6 D040                       		add.w	d0,d0
0001DFE8 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001DFEC 7200                       		moveq	#0,d1
0001DFEE 121A                       		move.b	(a2)+,d1
0001DFF0 3029 0008                  		move.w	obX(a1),d0
0001DFF4 9041                       		sub.w	d1,d0
0001DFF6 9042                       		sub.w	d2,d0
0001DFF8 6400                       		bcc.s	@outsidex	; branch if not touching
0001DFFA D241                       		add.w	d1,d1
0001DFFC D041                       		add.w	d1,d0
0001DFFE 6500                       		bcs.s	@withinx	; branch if touching
0001E000 6000 FF8C                  		bra.w	@next
0001E004                            ; ===========================================================================
0001E004                            
0001E004                            @outsidex:
0001E004 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E008 B044                       		cmp.w	d4,d0
0001E00A 6200 FF82                  		bhi.w	@next
0001E00E                            
0001E00E                            @withinx:
0001E00E 7200                       		moveq	#0,d1
0001E010 121A                       		move.b	(a2)+,d1
0001E012 3029 000C                  		move.w	obY(a1),d0
0001E016 9041                       		sub.w	d1,d0
0001E018 9043                       		sub.w	d3,d0
0001E01A 6400                       		bcc.s	@outsidey	; branch if not touching
0001E01C D241                       		add.w	d1,d1
0001E01E D240                       		add.w	d0,d1
0001E020 6500                       		bcs.s	@withiny	; branch if touching
0001E022 6000 FF6A                  		bra.w	@next
0001E026                            
0001E026                            ; ===========================================================================
0001E026                            
0001E026                            @outsidey:
0001E026 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E02A B045                       		cmp.w	d5,d0
0001E02C 6200 FF60                  		bhi.w	@next
0001E030                            
0001E030                            @withiny:
0001E030                            	@chktype:
0001E030 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E036 6600 0000                          	bne	NotGHZReact  ;TIS
0001E03A 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E03E 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E042 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E046 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E04A 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E04E 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E052 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E056                            NotGHZReact:                      ;TIS
0001E056 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E05A 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E05E 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E062 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E066 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E06A 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E06C 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E070                            
0001E070                            ; obColType is $40-$7F (powerups)
0001E070                            
0001E070 1029 0020                  		move.b	obColType(a1),d0
0001E074 0200 003F                  		andi.b	#$3F,d0
0001E078 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E07C 6700                       		beq.s	React_Monitor	; if yes, branch
0001E07E 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E084 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E088 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E08C                            
0001E08C                            	@invincible:
0001E08C 4E75                       		rts	
0001E08E                            ; ===========================================================================
0001E08E                            
0001E08E                            React_Monitor:
0001E08E 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E092 6A00                       		bpl.s	@movingdown	; if not, branch
0001E094                            
0001E094 3028 000C                  		move.w	obY(a0),d0
0001E098 0440 0010                  		subi.w	#$10,d0
0001E09C B069 000C                  		cmp.w	obY(a1),d0
0001E0A0 6500                       		bcs.s	@donothing
0001E0A2 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E0A6 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E0AC 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E0B0 6600                       		bne.s	@donothing
0001E0B2 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E0B6 4E75                       		rts	
0001E0B8                            ; ===========================================================================
0001E0B8                            
0001E0B8                            @movingdown:
0001E0B8 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E0BE 6600                       		bne.s	@donothing
0001E0C0 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E0C4 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E0C8                            
0001E0C8                            	@donothing:
0001E0C8 4E75                       		rts	
0001E0CA                            ; ===========================================================================
0001E0CA                            
0001E0CA                            React_Enemy:
0001E0CA 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E0CE 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E0D0 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E0D6 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E0DA 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E0E0 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E0E4                            
0001E0E4                            	@donthurtsonic:
0001E0E4 4A29 0021                  		tst.b	obColProp(a1)
0001E0E8 6700                       		beq.s	breakenemy
0001E0EA                            
0001E0EA 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E0EE 4468 0012                  		neg.w	obVelY(a0)
0001E0F2 E0E8 0010                  		asr	obVelX(a0)
0001E0F6 E0E8 0012                  		asr	obVelY(a0)
0001E0FA 137C 0000 0020             		move.b	#0,obColType(a1)
0001E100 5329 0021                  		subq.b	#1,obColProp(a1)
0001E104 6600                       		bne.s	@flagnotclear
0001E106 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E10C                            
0001E10C                            	@flagnotclear:
0001E10C 4E75                       		rts	
0001E10E                            ; ===========================================================================
0001E10E                            
0001E10E                            breakenemy:
0001E10E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E114 7000                       		moveq	#0,d0
0001E116 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E11A 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E11E 0C40 0006                  		cmpi.w	#6,d0
0001E122 6500                       		bcs.s	@bonusokay
0001E124 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E126                            
0001E126                            	@bonusokay:
0001E126 3340 003E                  		move.w	d0,$3E(a1)
0001E12A 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E12E 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E134 6500                       		bcs.s	@lessthan16	; if not, branch
0001E136 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E13A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E140                            
0001E140                            	@lessthan16:
0001E140 6100 0000                  		bsr.w	AddPoints
0001E144 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E148 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E14E 4A68 0012                  		tst.w	obVelY(a0)
0001E152 6B00                       		bmi.s	@bouncedown
0001E154 3028 000C                  		move.w	obY(a0),d0
0001E158 B069 000C                  		cmp.w	obY(a1),d0
0001E15C 6400                       		bcc.s	@bounceup
0001E15E 4468 0012                  		neg.w	obVelY(a0)
0001E162 4E75                       		rts	
0001E164                            ; ===========================================================================
0001E164                            
0001E164                            	@bouncedown:
0001E164 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E16A 4E75                       		rts	
0001E16C                            
0001E16C                            	@bounceup:
0001E16C 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E172 4E75                       		rts	
0001E174                            
0001E174 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E17C                            
0001E17C                            ; ===========================================================================
0001E17C                            
0001E17C                            React_Caterkiller:
0001E17C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E182                            
0001E182                            React_ChkHurt:
0001E182 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E186 6700                       		beq.s	notinvincible	; if not, branch
0001E188                            
0001E188                            	isflashing:
0001E188 70FF                       		moveq	#-1,d0
0001E18A 4E75                       		rts	
0001E18C                            ; ===========================================================================
0001E18C                            
0001E18C                            	notinvincible:
0001E18C 4E71                       		nop	
0001E18E 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E192 66F4                       		bne.s	isflashing	; if yes, branch
0001E194 2449                       		movea.l	a1,a2
0001E196                            
0001E196                            ; End of function ReactToItem
0001E196                            ; continue straight to HurtSonic
0001E196                            
0001E196                            ; ---------------------------------------------------------------------------
0001E196                            ; Hurting Sonic	subroutine
0001E196                            ; ---------------------------------------------------------------------------
0001E196                            
0001E196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E196                            
0001E196                            
0001E196                            HurtSonic:
0001E196 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E19A 6600                       		bne.s	@hasshield	; if yes, branch
0001E19C 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E1A0 6600                       		bne.s	@hasshield	; if yes, branch
0001E1A2 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E1A6 6600                       		bne.s	@hasshield	; if yes, branch
0001E1A8 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E1AC 6600                       		bne.s	@hasshield	; if yes, branch
0001E1AE 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E1B2 6700 0000                  		beq.w	@norings	; if not, branch
0001E1B6                            
0001E1B6 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
0001E1BC 6600                       		bne.s	@hasshield
0001E1BE 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E1C2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E1C8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E1CE                            
0001E1CE                            	@hasshield:
0001E1CE 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E1D4 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E1D6 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E1DA 6700 FFAC                  		beq.w	isflashing
0001E1DE 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E1E2 6700 FFA4                  		beq.w	isflashing
0001E1E6                            
0001E1E6                            	@hasrshield:
0001E1E6 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E1EC 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E1EE 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E1F2 6700 FF94                  		beq.w 	isflashing
0001E1F6 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E1FA 6700 FF8C                  		beq.w 	isflashing
0001E1FE 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E202 6700 FF84                  		beq.w 	isflashing
0001E206 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E20A 6700 FF7C                  		beq.w 	isflashing
0001E20E 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E212 6700 FF74                  		beq.w 	isflashing
0001E216 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E21A 6700 FF6C                  		beq.w 	isflashing
0001E21E 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E222 6700 FF64                  		beq.w 	isflashing
0001E226 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E22A 6700 FF5C                  		beq.w 	isflashing
0001E22E                            
0001E22E                            	@hasspshield:
0001E22E 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E234 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E238 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E23C 6700 FF4A                  		beq.w 	isflashing
0001E240 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E244 6700 FF42                  		beq.w 	isflashing
0001E248 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001E24C 6700 FF3A                  		beq.w 	isflashing
0001E250 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by taga-taga?
0001E254 6700 FF32                  		beq.w 	isflashing
0001E258 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E25C 6700 FF2A                  		beq.w 	isflashing
0001E260 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E264 6700 FF22                  		beq.w 	isflashing
0001E268 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E26C 6700 FF1A                  		beq.w 	isflashing
0001E270 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E274 6700 FF12                  		beq.w 	isflashing
0001E278 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E27C 6700 FF0A                  		beq.w 	isflashing
0001E280 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E284 6700 FF02                  		beq.w 	isflashing
0001E288 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E28C 6700 FEFA                  		beq.w 	isflashing
0001E290                            
0001E290 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E294 6700 FE78                  		beq.w 	breakenemy
0001E298 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E29C 6700 FE70                  		beq.w 	breakenemy
0001E2A0 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E2A4 6700 FE68                  		beq.w 	breakenemy
0001E2A8 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E2AC 6700 FE60                  		beq.w 	breakenemy
0001E2B0 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot enemy?
0001E2B4 6700 FE58                  		beq.w 	breakenemy
0001E2B8                            
0001E2B8                            
0001E2B8                            	@hurtcont:
0001E2B8 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E2BE                            		;move.b	#0,(v_gshield).w	; remove g shield
0001E2BE 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E2C4                            		
0001E2C4 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E2CA 6700                       		beq.s	@gshieldcheck	;if not, branch
0001E2CC 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E2D0                            		
0001E2D0                            	@gshieldcheck:
0001E2D0 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001E2D6 6700                       		beq.s	@hurtcont2			;if not, branch
0001E2D8 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001E2DC                            		
0001E2DC                            	@hurtcont2:
0001E2DC 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E2E2 4EB9 0001 5FB2             		jsr		Sonic_ResetOnFloor
0001E2E8 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E2EE 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E2F4 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E2FA 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E300 6700                       		beq.s	@isdry		; if not, branch
0001E302                            
0001E302 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E308 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E30E                            
0001E30E                            	@isdry:
0001E30E 3028 0008                  		move.w	obX(a0),d0
0001E312 B06A 0008                  		cmp.w	obX(a2),d0
0001E316 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E318 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E31C                            
0001E31C                            	@isleft:
0001E31C 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E322 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E328 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E32E 317C 0120 0030             		move.w	#$120,$30(a0)
0001E334 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E338 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E33A 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E33E 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E340 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E346 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E34C 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E352 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E356 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E35A 6600                       		bne.s	@sound		; if not, branch
0001E35C 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E360 6600                       		bne.s	@sound		; if not, branch
0001E362 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E366                            
0001E366                            	@sound:
0001E366 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E36C 70FF                       		moveq	#-1,d0
0001E36E 4E75                       		rts	
0001E370                            
0001E370                            	@hurtelec:
0001E370 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E376 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E37C 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E380 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E384 66E0                       		bne.s	@sound		; if not, branch
0001E386 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E38A 66DA                       		bne.s	@sound		; if not, branch
0001E38C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E390                            ; ===========================================================================
0001E390                            
0001E390                            @norings:
0001E390 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E394 6600 FE38                  		bne.w	@hasshield	; if yes, branch
0001E398                            
0001E398                            ; ---------------------------------------------------------------------------
0001E398                            ; Subroutine to	kill Sonic
0001E398                            ; ---------------------------------------------------------------------------
0001E398                            
0001E398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E398                            
0001E398                            
0001E398                            KillSonic:
0001E398 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E39C 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E3A0 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E3A6 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E3AC 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E3B2 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E3B8 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001E3BE 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E3C4 4EB9 0001 5FB2             		jsr		Sonic_ResetOnFloor
0001E3CA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E3D0 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E3D6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E3DC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E3E2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E3E8 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E3EC 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E3EE 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E3F2 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E3F4 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E3FA 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E400 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E404 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E408 6600                       		bne.s	@sound
0001E40A 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E40E                            
0001E40E                            	@sound:
0001E40E 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E414                            
0001E414                            	@dontdie:
0001E414 70FF                       		moveq	#-1,d0
0001E416 4E75                       		rts	
0001E418                            ; End of function KillSonic
0001E418                            Kill_Lava:	
0001E418 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E41E 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E424 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E428 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001E42E                            
0001E42E                            
0001E42E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E42E                            
0001E42E                            
0001E42E                            React_Special:
0001E42E 1229 0020                  		move.b	obColType(a1),d1
0001E432 0201 003F                  		andi.b	#$3F,d1
0001E436 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E43A 6700                       		beq.s	@caterkiller	; if yes, branch
0001E43C 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E440 6700                       		beq.s	@yadrin		; if yes, branch
0001E442 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E446 6700                       		beq.s	@D7orE1		; if yes, branch
0001E448 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E44C 6700                       		beq.s	@D7orE1		; if yes, branch
0001E44E 4E75                       		rts	
0001E450                            ; ===========================================================================
0001E450                            
0001E450                            @caterkiller:
0001E450 6000 FD2A                  		bra.w	React_Caterkiller
0001E454                            ; ===========================================================================
0001E454                            
0001E454                            @yadrin:
0001E454 9A40                       		sub.w	d0,d5
0001E456 0C45 0008                  		cmpi.w	#8,d5
0001E45A 6400                       		bcc.s	@normalenemy
0001E45C 3029 0008                  		move.w	obX(a1),d0
0001E460 5940                       		subq.w	#4,d0
0001E462 0829 0000 0022             		btst	#0,obStatus(a1)
0001E468 6700                       		beq.s	@noflip
0001E46A 0440 0010                  		subi.w	#$10,d0
0001E46E                            
0001E46E                            	@noflip:
0001E46E 9042                       		sub.w	d2,d0
0001E470 6400                       		bcc.s	@loc_1B13C
0001E472 0640 0018                  		addi.w	#$18,d0
0001E476 6500                       		bcs.s	@loc_1B140
0001E478 6000                       		bra.s	@normalenemy
0001E47A                            ; ===========================================================================
0001E47A                            
0001E47A                            	@loc_1B13C:
0001E47A B044                       		cmp.w	d4,d0
0001E47C 6200                       		bhi.s	@normalenemy
0001E47E                            
0001E47E                            	@loc_1B140:
0001E47E 6000 FD02                  		bra.w	React_ChkHurt
0001E482                            ; ===========================================================================
0001E482                            
0001E482                            	@normalenemy:
0001E482 6000 FC46                  		bra.w	React_Enemy
0001E486                            ; ===========================================================================
0001E486                            
0001E486                            @D7orE1:
0001E486 5229 0021                  		addq.b	#1,obColProp(a1)
0001E48A 4E75                       		rts	
0001E48C                            ; End of function React_Special
0001E48C                            
0001E48C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E48C                            
0001E48C                            React_ChkWaterTag:
0001E48C 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E492 6600 0000                  		bne	NotWaterTag
0001E496 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E49C                            	NotWaterTag:
0001E49C 4E75                       		rts
0001E49E                            
0001E49E                            React_WaterTag:
0001E49E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E4A4 6700 0000                  		beq	SkipWaterTag
0001E4A8 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E4AE                            	SkipWaterTag:
0001E4AE 4E75                       		rts
0001E4AE 4E75                       		rts
0001E4B0                            
0001E4B0                            ; ---------------------------------------------------------------------------
0001E4B0                            ; Subroutine to	show the special stage layout
0001E4B0                            ; ---------------------------------------------------------------------------
0001E4B0                            
0001E4B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4B0                            
0001E4B0                            
0001E4B0                            SS_ShowLayout:
0001E4B0 6100 0000                  		bsr.w	SS_AniWallsRings
0001E4B4 6100 0000                  		bsr.w	SS_AniItems
0001E4B8 3F05                       		move.w	d5,-(sp)
0001E4BA 43F8 8000                  		lea	($FFFF8000).w,a1
0001E4BE 1038 F780                  		move.b	(v_ssangle).w,d0
0001E4C2 0200 00FC                  		andi.b	#$FC,d0
0001E4C6 4EB9 0000 3B42             		jsr	(CalcSine).l
0001E4CC 3800                       		move.w	d0,d4
0001E4CE 3A01                       		move.w	d1,d5
0001E4D0 C9FC 0018                  		muls.w	#$18,d4
0001E4D4 CBFC 0018                  		muls.w	#$18,d5
0001E4D8 7400                       		moveq	#0,d2
0001E4DA 3438 F700                  		move.w	(v_screenposx).w,d2
0001E4DE 84FC 0018                  		divu.w	#$18,d2
0001E4E2 4842                       		swap	d2
0001E4E4 4442                       		neg.w	d2
0001E4E6 0642 FF4C                  		addi.w	#-$B4,d2
0001E4EA 7600                       		moveq	#0,d3
0001E4EC 3638 F704                  		move.w	(v_screenposy).w,d3
0001E4F0 86FC 0018                  		divu.w	#$18,d3
0001E4F4 4843                       		swap	d3
0001E4F6 4443                       		neg.w	d3
0001E4F8 0643 FF4C                  		addi.w	#-$B4,d3
0001E4FC 3E3C 000F                  		move.w	#$F,d7
0001E500                            
0001E500                            loc_1B19E:
0001E500 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E504 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E508 4440                       		neg.w	d0
0001E50A C3C2                       		muls.w	d2,d1
0001E50C C1C3                       		muls.w	d3,d0
0001E50E 2C00                       		move.l	d0,d6
0001E510 DC81                       		add.l	d1,d6
0001E512 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E516 C1C2                       		muls.w	d2,d0
0001E518 C3C3                       		muls.w	d3,d1
0001E51A D280                       		add.l	d0,d1
0001E51C 2406                       		move.l	d6,d2
0001E51E 3C3C 000F                  		move.w	#$F,d6
0001E522                            
0001E522                            loc_1B1C0:
0001E522 2002                       		move.l	d2,d0
0001E524 E080                       		asr.l	#8,d0
0001E526 32C0                       		move.w	d0,(a1)+
0001E528 2001                       		move.l	d1,d0
0001E52A E080                       		asr.l	#8,d0
0001E52C 32C0                       		move.w	d0,(a1)+
0001E52E D485                       		add.l	d5,d2
0001E530 D284                       		add.l	d4,d1
0001E532 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E536                            
0001E536 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E53A 0643 0018                  		addi.w	#$18,d3
0001E53E 51CF FFC0                  		dbf	d7,loc_1B19E
0001E542                            
0001E542 3A1F                       		move.w	(sp)+,d5
0001E544 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E54A 7000                       		moveq	#0,d0
0001E54C 3038 F704                  		move.w	(v_screenposy).w,d0
0001E550 80FC 0018                  		divu.w	#$18,d0
0001E554 C0FC 0080                  		mulu.w	#$80,d0
0001E558 D1C0                       		adda.l	d0,a0
0001E55A 7000                       		moveq	#0,d0
0001E55C 3038 F700                  		move.w	(v_screenposx).w,d0
0001E560 80FC 0018                  		divu.w	#$18,d0
0001E564 D0C0                       		adda.w	d0,a0
0001E566 49F8 8000                  		lea	($FFFF8000).w,a4
0001E56A 3E3C 000F                  		move.w	#$F,d7
0001E56E                            
0001E56E                            loc_1B20C:
0001E56E 3C3C 000F                  		move.w	#$F,d6
0001E572                            
0001E572                            loc_1B210:
0001E572 7000                       		moveq	#0,d0
0001E574 1018                       		move.b	(a0)+,d0
0001E576 6700                       		beq.s	loc_1B268
0001E578 0C00 004E                  		cmpi.b	#$4E,d0
0001E57C 6200                       		bhi.s	loc_1B268
0001E57E 3614                       		move.w	(a4),d3
0001E580 0643 0120                  		addi.w	#$120,d3
0001E584 0C43 0070                  		cmpi.w	#$70,d3
0001E588 6500                       		blo.s	loc_1B268
0001E58A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E58E 6400                       		bhs.s	loc_1B268
0001E590 342C 0002                  		move.w	2(a4),d2
0001E594 0642 00F0                  		addi.w	#$F0,d2
0001E598 0C42 0070                  		cmpi.w	#$70,d2
0001E59C 6500                       		blo.s	loc_1B268
0001E59E 0C42 0170                  		cmpi.w	#$170,d2
0001E5A2 6400                       		bhs.s	loc_1B268
0001E5A4 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E5AA E748                       		lsl.w	#3,d0
0001E5AC 4BF5 0000                  		lea	(a5,d0.w),a5
0001E5B0 225D                       		movea.l	(a5)+,a1
0001E5B2 321D                       		move.w	(a5)+,d1
0001E5B4 D241                       		add.w	d1,d1
0001E5B6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E5BA 365D                       		movea.w	(a5)+,a3
0001E5BC 7200                       		moveq	#0,d1
0001E5BE 1219                       		move.b	(a1)+,d1
0001E5C0 5301                       		subq.b	#1,d1
0001E5C2 6B00                       		bmi.s	loc_1B268
0001E5C4 4EB9 0000 F698             		jsr	(sub_D762).l
0001E5CA                            
0001E5CA                            loc_1B268:
0001E5CA 584C                       		addq.w	#4,a4
0001E5CC 51CE FFA4                  		dbf	d6,loc_1B210
0001E5D0                            
0001E5D0 41E8 0070                  		lea	$70(a0),a0
0001E5D4 51CF FF98                  		dbf	d7,loc_1B20C
0001E5D8                            
0001E5D8 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E5DC 0C05 0050                  		cmpi.b	#$50,d5
0001E5E0 6700                       		beq.s	loc_1B288
0001E5E2 24BC 0000 0000             		move.l	#0,(a2)
0001E5E8 4E75                       		rts	
0001E5EA                            ; ===========================================================================
0001E5EA                            
0001E5EA                            loc_1B288:
0001E5EA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E5F0 4E75                       		rts	
0001E5F2                            ; End of function SS_ShowLayout
0001E5F2                            
0001E5F2                            ; ---------------------------------------------------------------------------
0001E5F2                            ; Subroutine to	animate	walls and rings	in the special stage
0001E5F2                            ; ---------------------------------------------------------------------------
0001E5F2                            
0001E5F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5F2                            
0001E5F2                            
0001E5F2                            SS_AniWallsRings:
0001E5F2 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E5F8 7000                       		moveq	#0,d0
0001E5FA 1038 F780                  		move.b	(v_ssangle).w,d0
0001E5FE E408                       		lsr.b	#2,d0
0001E600 0240 000F                  		andi.w	#$F,d0
0001E604 7223                       		moveq	#$23,d1
0001E606                            
0001E606                            loc_1B2A4:
0001E606 3280                       		move.w	d0,(a1)
0001E608 5049                       		addq.w	#8,a1
0001E60A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E60E                            
0001E60E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E614 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E618 6A00                       		bpl.s	loc_1B2C8
0001E61A 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E620 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E624 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E62A                            
0001E62A                            loc_1B2C8:
0001E62A 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E630 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E634 6A00                       		bpl.s	loc_1B2E4
0001E636 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E63C 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E640 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E646                            
0001E646                            loc_1B2E4:
0001E646 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E64A 1340 0138                  		move.b	d0,$138(a1)
0001E64E 1340 0160                  		move.b	d0,$160(a1)
0001E652 1340 0148                  		move.b	d0,$148(a1)
0001E656 1340 0150                  		move.b	d0,$150(a1)
0001E65A 1340 01D8                  		move.b	d0,$1D8(a1)
0001E65E 1340 01E0                  		move.b	d0,$1E0(a1)
0001E662 1340 01E8                  		move.b	d0,$1E8(a1)
0001E666 1340 01F0                  		move.b	d0,$1F0(a1)
0001E66A 1340 01F8                  		move.b	d0,$1F8(a1)
0001E66E 1340 0200                  		move.b	d0,$200(a1)
0001E672 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E676 6A00                       		bpl.s	loc_1B326
0001E678 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E67E 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E682 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E688                            
0001E688                            loc_1B326:
0001E688 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E68C 1340 0168                  		move.b	d0,$168(a1)
0001E690 1340 0170                  		move.b	d0,$170(a1)
0001E694 1340 0178                  		move.b	d0,$178(a1)
0001E698 1340 0180                  		move.b	d0,$180(a1)
0001E69C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E6A0 6A00                       		bpl.s	loc_1B350
0001E6A2 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E6A8 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E6AC 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E6B2                            
0001E6B2                            loc_1B350:
0001E6B2 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E6B8 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E6BE 7000                       		moveq	#0,d0
0001E6C0 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E6C4 D040                       		add.w	d0,d0
0001E6C6 41F0 0000                  		lea	(a0,d0.w),a0
0001E6CA 3290                       		move.w	(a0),(a1)
0001E6CC 3368 0002 0008             		move.w	2(a0),8(a1)
0001E6D2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E6D8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E6DE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E6E4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E6EA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E6F0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E6F6 D0FC 0020                  		adda.w	#$20,a0
0001E6FA D2FC 0048                  		adda.w	#$48,a1
0001E6FE 3290                       		move.w	(a0),(a1)
0001E700 3368 0002 0008             		move.w	2(a0),8(a1)
0001E706 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E70C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E712 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E718 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E71E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E724 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E72A D0FC 0020                  		adda.w	#$20,a0
0001E72E D2FC 0048                  		adda.w	#$48,a1
0001E732 3290                       		move.w	(a0),(a1)
0001E734 3368 0002 0008             		move.w	2(a0),8(a1)
0001E73A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E740 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E746 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E74C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E752 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E758 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E75E D0FC 0020                  		adda.w	#$20,a0
0001E762 D2FC 0048                  		adda.w	#$48,a1
0001E766 3290                       		move.w	(a0),(a1)
0001E768 3368 0002 0008             		move.w	2(a0),8(a1)
0001E76E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E774 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E77A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E780 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E786 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E78C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E792 D0FC 0020                  		adda.w	#$20,a0
0001E796 D2FC 0048                  		adda.w	#$48,a1
0001E79A 4E75                       		rts	
0001E79C                            ; End of function SS_AniWallsRings
0001E79C                            
0001E79C                            ; ===========================================================================
0001E79C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E7AC 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E7BC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E7CC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E7DC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E7EC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E7FC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E80C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E81C                            ; ---------------------------------------------------------------------------
0001E81C                            ; Subroutine to	remove items when you collect them in the special stage
0001E81C                            ; ---------------------------------------------------------------------------
0001E81C                            
0001E81C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E81C                            
0001E81C                            
0001E81C                            SS_RemoveCollectedItem:
0001E81C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E822 303C 001F                  		move.w	#$1F,d0
0001E826                            
0001E826                            loc_1B4C4:
0001E826 4A12                       		tst.b	(a2)
0001E828 6700                       		beq.s	locret_1B4CE
0001E82A 504A                       		addq.w	#8,a2
0001E82C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E830                            
0001E830                            locret_1B4CE:
0001E830 4E75                       		rts	
0001E832                            ; End of function SS_RemoveCollectedItem
0001E832                            
0001E832                            ; ---------------------------------------------------------------------------
0001E832                            ; Subroutine to	animate	special	stage items when you touch them
0001E832                            ; ---------------------------------------------------------------------------
0001E832                            
0001E832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E832                            
0001E832                            
0001E832                            SS_AniItems:
0001E832 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E838 3E3C 001F                  		move.w	#$1F,d7
0001E83C                            
0001E83C                            loc_1B4DA:
0001E83C 7000                       		moveq	#0,d0
0001E83E 1010                       		move.b	(a0),d0
0001E840 6700                       		beq.s	loc_1B4E8
0001E842 E548                       		lsl.w	#2,d0
0001E844 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E848 4E91                       		jsr	(a1)
0001E84A                            
0001E84A                            loc_1B4E8:
0001E84A 5048                       		addq.w	#8,a0
0001E84C                            
0001E84C                            loc_1B4EA:
0001E84C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E850                            
0001E850 4E75                       		rts	
0001E852                            ; End of function SS_AniItems
0001E852                            
0001E852                            ; ===========================================================================
0001E852 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E856 0000 0000                  		dc.l SS_AniBumper
0001E85A 0000 0000                  		dc.l SS_Ani1Up
0001E85E 0000 0000                  		dc.l SS_AniReverse
0001E862 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E866 0000 0000                  		dc.l SS_AniGlassBlock
0001E86A                            ; ===========================================================================
0001E86A                            
0001E86A                            SS_AniRingSparks:
0001E86A 5328 0002                  		subq.b	#1,2(a0)
0001E86E 6A00                       		bpl.s	locret_1B530
0001E870 117C 0005 0002             		move.b	#5,2(a0)
0001E876 7000                       		moveq	#0,d0
0001E878 1028 0003                  		move.b	3(a0),d0
0001E87C 5228 0003                  		addq.b	#1,3(a0)
0001E880 2268 0004                  		movea.l	4(a0),a1
0001E884 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001E888 1280                       		move.b	d0,(a1)
0001E88A 6600                       		bne.s	locret_1B530
0001E88C 4290                       		clr.l	(a0)
0001E88E 42A8 0004                  		clr.l	4(a0)
0001E892                            
0001E892                            locret_1B530:
0001E892 4E75                       		rts	
0001E894                            ; ===========================================================================
0001E894 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001E89A                            ; ===========================================================================
0001E89A                            
0001E89A                            SS_AniBumper:
0001E89A 5328 0002                  		subq.b	#1,2(a0)
0001E89E 6A00                       		bpl.s	locret_1B566
0001E8A0 117C 0007 0002             		move.b	#7,2(a0)
0001E8A6 7000                       		moveq	#0,d0
0001E8A8 1028 0003                  		move.b	3(a0),d0
0001E8AC 5228 0003                  		addq.b	#1,3(a0)
0001E8B0 2268 0004                  		movea.l	4(a0),a1
0001E8B4 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001E8B8 6600                       		bne.s	loc_1B564
0001E8BA 4290                       		clr.l	(a0)
0001E8BC 42A8 0004                  		clr.l	4(a0)
0001E8C0 12BC 0025                  		move.b	#$25,(a1)
0001E8C4 4E75                       		rts	
0001E8C6                            ; ===========================================================================
0001E8C6                            
0001E8C6                            loc_1B564:
0001E8C6 1280                       		move.b	d0,(a1)
0001E8C8                            
0001E8C8                            locret_1B566:
0001E8C8 4E75                       		rts	
0001E8CA                            ; ===========================================================================
0001E8CA 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001E8D0                            ; ===========================================================================
0001E8D0                            
0001E8D0                            SS_Ani1Up:
0001E8D0 5328 0002                  		subq.b	#1,2(a0)
0001E8D4 6A00                       		bpl.s	locret_1B596
0001E8D6 117C 0005 0002             		move.b	#5,2(a0)
0001E8DC 7000                       		moveq	#0,d0
0001E8DE 1028 0003                  		move.b	3(a0),d0
0001E8E2 5228 0003                  		addq.b	#1,3(a0)
0001E8E6 2268 0004                  		movea.l	4(a0),a1
0001E8EA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001E8EE 1280                       		move.b	d0,(a1)
0001E8F0 6600                       		bne.s	locret_1B596
0001E8F2 4290                       		clr.l	(a0)
0001E8F4 42A8 0004                  		clr.l	4(a0)
0001E8F8                            
0001E8F8                            locret_1B596:
0001E8F8 4E75                       		rts	
0001E8FA                            ; ===========================================================================
0001E8FA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001E900                            ; ===========================================================================
0001E900                            
0001E900                            SS_AniReverse:
0001E900 5328 0002                  		subq.b	#1,2(a0)
0001E904 6A00                       		bpl.s	locret_1B5CC
0001E906 117C 0007 0002             		move.b	#7,2(a0)
0001E90C 7000                       		moveq	#0,d0
0001E90E 1028 0003                  		move.b	3(a0),d0
0001E912 5228 0003                  		addq.b	#1,3(a0)
0001E916 2268 0004                  		movea.l	4(a0),a1
0001E91A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001E91E 6600                       		bne.s	loc_1B5CA
0001E920 4290                       		clr.l	(a0)
0001E922 42A8 0004                  		clr.l	4(a0)
0001E926 12BC 002B                  		move.b	#$2B,(a1)
0001E92A 4E75                       		rts	
0001E92C                            ; ===========================================================================
0001E92C                            
0001E92C                            loc_1B5CA:
0001E92C 1280                       		move.b	d0,(a1)
0001E92E                            
0001E92E                            locret_1B5CC:
0001E92E 4E75                       		rts	
0001E930                            ; ===========================================================================
0001E930 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001E936                            ; ===========================================================================
0001E936                            
0001E936                            SS_AniEmeraldSparks:
0001E936 5328 0002                  		subq.b	#1,2(a0)
0001E93A 6A00                       		bpl.s	locret_1B60C
0001E93C 117C 0005 0002             		move.b	#5,2(a0)
0001E942 7000                       		moveq	#0,d0
0001E944 1028 0003                  		move.b	3(a0),d0
0001E948 5228 0003                  		addq.b	#1,3(a0)
0001E94C 2268 0004                  		movea.l	4(a0),a1
0001E950 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001E954 1280                       		move.b	d0,(a1)
0001E956 6600                       		bne.s	locret_1B60C
0001E958 4290                       		clr.l	(a0)
0001E95A 42A8 0004                  		clr.l	4(a0)
0001E95E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001E96E                            
0001E96E                            locret_1B60C:
0001E96E 4E75                       		rts	
0001E970                            ; ===========================================================================
0001E970 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001E976                            ; ===========================================================================
0001E976                            
0001E976                            SS_AniGlassBlock:
0001E976 5328 0002                  		subq.b	#1,2(a0)
0001E97A 6A00                       		bpl.s	locret_1B640
0001E97C 117C 0001 0002             		move.b	#1,2(a0)
0001E982 7000                       		moveq	#0,d0
0001E984 1028 0003                  		move.b	3(a0),d0
0001E988 5228 0003                  		addq.b	#1,3(a0)
0001E98C 2268 0004                  		movea.l	4(a0),a1
0001E990 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001E994 1280                       		move.b	d0,(a1)
0001E996 6600                       		bne.s	locret_1B640
0001E998 12A8 0004                  		move.b	4(a0),(a1)
0001E99C 4290                       		clr.l	(a0)
0001E99E 42A8 0004                  		clr.l	4(a0)
0001E9A2                            
0001E9A2                            locret_1B640:
0001E9A2 4E75                       		rts	
0001E9A4                            ; ===========================================================================
0001E9A4 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001E9AE                            
0001E9AE                            ; ---------------------------------------------------------------------------
0001E9AE                            ; Special stage	layout pointers
0001E9AE                            ; ---------------------------------------------------------------------------
0001E9AE                            SS_LayoutIndex:
0001E9AE 0000 0000                  		dc.l SS_1
0001E9B2 0000 0000                  		dc.l SS_2
0001E9B6 0000 0000                  		dc.l SS_3
0001E9BA 0000 0000                  		dc.l SS_4
0001E9BE 0000 0000                  		dc.l SS_5
0001E9C2 0000 0000                  		dc.l SS_6
0001E9C6                            		even
0001E9C6                            
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            ; Special stage start locations
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            ; Special stage start locations
0001E9C6                            ; ---------------------------------------------------------------------------
0001E9C6                            
0001E9C6                            		incbin	"startpos\ss1.bin"
0001E9CA                            		incbin	"startpos\ss2.bin"
0001E9CE                            		incbin	"startpos\ss3.bin"
0001E9D2                            		incbin	"startpos\ss4.bin"
0001E9D6                            		incbin	"startpos\ss5.bin"
0001E9DA                            		incbin	"startpos\ss6.bin"
0001E9DE                            		even
0001E9DE                            		even
0001E9DE                            
0001E9DE                            ; ---------------------------------------------------------------------------
0001E9DE                            ; Subroutine to	load special stage layout
0001E9DE                            ; ---------------------------------------------------------------------------
0001E9DE                            
0001E9DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9DE                            
0001E9DE                            
0001E9DE                            SS_Load:
0001E9DE 7000                       		moveq	#0,d0
0001E9E0 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001E9E4 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001E9E8 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001E9EE 6500                       		blo.s	SS_ChkEmldNum
0001E9F0 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001E9F6                            
0001E9F6                            SS_ChkEmldNum:
0001E9F6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001E9FC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001E9FE 7200                       		moveq	#0,d1
0001EA00 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EA04 5301                       		subq.b	#1,d1
0001EA06 6500                       		blo.s	SS_LoadData
0001EA08 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EA0C                            
0001EA0C                            SS_ChkEmldLoop:	
0001EA0C B033 1000                  		cmp.b	(a3,d1.w),d0
0001EA10 6600                       		bne.s	SS_ChkEmldRepeat
0001EA12 60CA                       		bra.s	SS_Load
0001EA14                            ; ===========================================================================
0001EA14                            
0001EA14                            SS_ChkEmldRepeat:
0001EA14 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EA18                            
0001EA18                            SS_LoadData:
0001EA18 E548                       		lsl.w	#2,d0
0001EA1A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EA1E 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EA22 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EA26 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EA2A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EA30 303C 0000                  		move.w	#0,d0
0001EA34 4EB9 0000 18D8             		jsr	(EniDec).l
0001EA3A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EA40 303C 0FFF                  		move.w	#$FFF,d0
0001EA44                            
0001EA44                            SS_ClrRAM3:
0001EA44 4299                       		clr.l	(a1)+
0001EA46 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EA4A                            
0001EA4A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EA50 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EA56 723F                       		moveq	#$3F,d1
0001EA58                            
0001EA58                            loc_1B6F6:
0001EA58 743F                       		moveq	#$3F,d2
0001EA5A                            
0001EA5A                            loc_1B6F8:
0001EA5A 12D8                       		move.b	(a0)+,(a1)+
0001EA5C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EA60                            
0001EA60 43E9 0040                  		lea	$40(a1),a1
0001EA64 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EA68                            
0001EA68 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EA6E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EA74 724D                       		moveq	#$4D,d1
0001EA76                            
0001EA76                            loc_1B714:
0001EA76 22D8                       		move.l	(a0)+,(a1)+
0001EA78 32FC 0000                  		move.w	#0,(a1)+
0001EA7C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EA82 32D8                       		move.w	(a0)+,(a1)+
0001EA84 51C9 FFF0                  		dbf	d1,loc_1B714
0001EA88                            
0001EA88 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EA8E 323C 003F                  		move.w	#$3F,d1
0001EA92                            
0001EA92                            loc_1B730:
0001EA92                            
0001EA92 4299                       		clr.l	(a1)+
0001EA94 51C9 FFFC                  		dbf	d1,loc_1B730
0001EA98                            
0001EA98 4E75                       		rts	
0001EA9A                            ; End of function SS_Load
0001EA9A                            
0001EA9A                            ; ===========================================================================
0001EA9A                            
0001EA9A                            SS_MapIndex:
0001EA9A                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EA9A                            ; ---------------------------------------------------------------------------
0001EA9A                            ; Special stage	mappings and VRAM pointers
0001EA9A                            ; ---------------------------------------------------------------------------
0001EA9A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EA9E 0142                       	dc.w $142		; VRAM setting
0001EAA0 0000 0000                  	dc.l Map_SSWalls
0001EAA4 0142                       	dc.w $142
0001EAA6 0000 0000                  	dc.l Map_SSWalls
0001EAAA 0142                       	dc.w $142
0001EAAC 0000 0000                  	dc.l Map_SSWalls
0001EAB0 0142                       	dc.w $142
0001EAB2 0000 0000                  	dc.l Map_SSWalls
0001EAB6 0142                       	dc.w $142
0001EAB8 0000 0000                  	dc.l Map_SSWalls
0001EABC 0142                       	dc.w $142
0001EABE 0000 0000                  	dc.l Map_SSWalls
0001EAC2 0142                       	dc.w $142
0001EAC4 0000 0000                  	dc.l Map_SSWalls
0001EAC8 0142                       	dc.w $142
0001EACA 0000 0000                  	dc.l Map_SSWalls
0001EACE 0142                       	dc.w $142
0001EAD0 0000 0000                  	dc.l Map_SSWalls
0001EAD4 2142                       	dc.w $2142
0001EAD6 0000 0000                  	dc.l Map_SSWalls
0001EADA 2142                       	dc.w $2142
0001EADC 0000 0000                  	dc.l Map_SSWalls
0001EAE0 2142                       	dc.w $2142
0001EAE2 0000 0000                  	dc.l Map_SSWalls
0001EAE6 2142                       	dc.w $2142
0001EAE8 0000 0000                  	dc.l Map_SSWalls
0001EAEC 2142                       	dc.w $2142
0001EAEE 0000 0000                  	dc.l Map_SSWalls
0001EAF2 2142                       	dc.w $2142
0001EAF4 0000 0000                  	dc.l Map_SSWalls
0001EAF8 2142                       	dc.w $2142
0001EAFA 0000 0000                  	dc.l Map_SSWalls
0001EAFE 2142                       	dc.w $2142
0001EB00 0000 0000                  	dc.l Map_SSWalls
0001EB04 2142                       	dc.w $2142
0001EB06 0000 0000                  	dc.l Map_SSWalls
0001EB0A 4142                       	dc.w $4142
0001EB0C 0000 0000                  	dc.l Map_SSWalls
0001EB10 4142                       	dc.w $4142
0001EB12 0000 0000                  	dc.l Map_SSWalls
0001EB16 4142                       	dc.w $4142
0001EB18 0000 0000                  	dc.l Map_SSWalls
0001EB1C 4142                       	dc.w $4142
0001EB1E 0000 0000                  	dc.l Map_SSWalls
0001EB22 4142                       	dc.w $4142
0001EB24 0000 0000                  	dc.l Map_SSWalls
0001EB28 4142                       	dc.w $4142
0001EB2A 0000 0000                  	dc.l Map_SSWalls
0001EB2E 4142                       	dc.w $4142
0001EB30 0000 0000                  	dc.l Map_SSWalls
0001EB34 4142                       	dc.w $4142
0001EB36 0000 0000                  	dc.l Map_SSWalls
0001EB3A 4142                       	dc.w $4142
0001EB3C 0000 0000                  	dc.l Map_SSWalls
0001EB40 6142                       	dc.w $6142
0001EB42 0000 0000                  	dc.l Map_SSWalls
0001EB46 6142                       	dc.w $6142
0001EB48 0000 0000                  	dc.l Map_SSWalls
0001EB4C 6142                       	dc.w $6142
0001EB4E 0000 0000                  	dc.l Map_SSWalls
0001EB52 6142                       	dc.w $6142
0001EB54 0000 0000                  	dc.l Map_SSWalls
0001EB58 6142                       	dc.w $6142
0001EB5A 0000 0000                  	dc.l Map_SSWalls
0001EB5E 6142                       	dc.w $6142
0001EB60 0000 0000                  	dc.l Map_SSWalls
0001EB64 6142                       	dc.w $6142
0001EB66 0000 0000                  	dc.l Map_SSWalls
0001EB6A 6142                       	dc.w $6142
0001EB6C 0000 0000                  	dc.l Map_SSWalls
0001EB70 6142                       	dc.w $6142
0001EB72 0001 0A58                  	dc.l Map_Bump
0001EB76 023B                       	dc.w $23B
0001EB78 0000 0000                  	dc.l Map_SS_R
0001EB7C 0570                       	dc.w $570
0001EB7E 0000 0000                  	dc.l Map_SS_R
0001EB82 0251                       	dc.w $251
0001EB84 0000 0000                  	dc.l Map_SS_R
0001EB88 0370                       	dc.w $370
0001EB8A 0000 0000                  	dc.l Map_SS_Up
0001EB8E 0263                       	dc.w $263
0001EB90 0000 0000                  	dc.l Map_SS_Down
0001EB94 0263                       	dc.w $263
0001EB96 0000 0000                  	dc.l Map_SS_R
0001EB9A 22F0                       	dc.w $22F0
0001EB9C 0000 0000                  	dc.l Map_SS_Glass
0001EBA0 0470                       	dc.w $470
0001EBA2 0000 0000                  	dc.l Map_SS_Glass
0001EBA6 05F0                       	dc.w $5F0
0001EBA8 0000 0000                  	dc.l Map_SS_Glass
0001EBAC 65F0                       	dc.w $65F0
0001EBAE 0000 0000                  	dc.l Map_SS_Glass
0001EBB2 25F0                       	dc.w $25F0
0001EBB4 0000 0000                  	dc.l Map_SS_Glass
0001EBB8 45F0                       	dc.w $45F0
0001EBBA 0000 0000                  	dc.l Map_SS_R
0001EBBE 02F0                       	dc.w $2F0
0001EBC0 0101 0A58                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EBC4 023B                       	dc.w $23B
0001EBC6 0201 0A58                  	dc.l Map_Bump+$2000000
0001EBCA 023B                       	dc.w $23B
0001EBCC 0000 0000                  	dc.l Map_SS_R
0001EBD0 0797                       	dc.w $797
0001EBD2 0000 0000                  	dc.l Map_SS_R
0001EBD6 07A0                       	dc.w $7A0
0001EBD8 0000 0000                  	dc.l Map_SS_R
0001EBDC 07A9                       	dc.w $7A9
0001EBDE 0000 0000                  	dc.l Map_SS_R
0001EBE2 0797                       	dc.w $797
0001EBE4 0000 0000                  	dc.l Map_SS_R
0001EBE8 07A0                       	dc.w $7A0
0001EBEA 0000 0000                  	dc.l Map_SS_R
0001EBEE 07A9                       	dc.w $7A9
0001EBF0 0000 BA46                  	dc.l Map_Ring
0001EBF4 2798                       	dc.w $2798
0001EBF6 0000 0000                  	dc.l Map_SS_Chaos3
0001EBFA 0770                       	dc.w $770
0001EBFC 0000 0000                  	dc.l Map_SS_Chaos3
0001EC00 2770                       	dc.w $2770
0001EC02 0000 0000                  	dc.l Map_SS_Chaos3
0001EC06 4770                       	dc.w $4770
0001EC08 0000 0000                  	dc.l Map_SS_Chaos3
0001EC0C 6770                       	dc.w $6770
0001EC0E 0000 0000                  	dc.l Map_SS_Chaos1
0001EC12 0770                       	dc.w $770
0001EC14 0000 0000                  	dc.l Map_SS_Chaos2
0001EC18 0770                       	dc.w $770
0001EC1A 0000 0000                  	dc.l Map_SS_R
0001EC1E 04F0                       	dc.w $4F0
0001EC20 0400 BA46                  	dc.l Map_Ring+$4000000
0001EC24 2798                       	dc.w $2798
0001EC26 0500 BA46                  	dc.l Map_Ring+$5000000
0001EC2A 2798                       	dc.w $2798
0001EC2C 0600 BA46                  	dc.l Map_Ring+$6000000
0001EC30 2798                       	dc.w $2798
0001EC32 0700 BA46                  	dc.l Map_Ring+$7000000
0001EC36 2798                       	dc.w $2798
0001EC38 0000 0000                  	dc.l Map_SS_Glass
0001EC3C 23F0                       	dc.w $23F0
0001EC3E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EC42 23F0                       	dc.w $23F0
0001EC44 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EC48 23F0                       	dc.w $23F0
0001EC4A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EC4E 23F0                       	dc.w $23F0
0001EC50 0000 0000                  	dc.l Map_SS_R+$2000000
0001EC54 04F0                       	dc.w $4F0
0001EC56 0000 0000                  	dc.l Map_SS_Glass
0001EC5A 05F0                       	dc.w $5F0
0001EC5C 0000 0000                  	dc.l Map_SS_Glass
0001EC60 65F0                       	dc.w $65F0
0001EC62 0000 0000                  	dc.l Map_SS_Glass
0001EC66 25F0                       	dc.w $25F0
0001EC68 0000 0000                  	dc.l Map_SS_Glass
0001EC6C 45F0                       	dc.w $45F0
0001EC6C 45F0                       	dc.w $45F0
0001EC6E                            
0001EC6E                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EC6E                            ; ---------------------------------------------------------------------------
0001EC6E                            ; Sprite mappings - special stage "R" block
0001EC6E                            ; ---------------------------------------------------------------------------
0001EC6E                            Map_SS_R_internal:
0001EC6E 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EC70 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EC72 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EC74 01                         byte_1B912:	dc.b 1
0001EC75 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC7A 01                         byte_1B918:	dc.b 1
0001EC7B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EC80 00                         byte_1B91E:	dc.b 0
0001EC82 00                         		even
0001EC82 00                         		even
0001EC82                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EC82                            ; ---------------------------------------------------------------------------
0001EC82                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EC82                            ; ---------------------------------------------------------------------------
0001EC82                            Map_SS_Glass_internal:
0001EC82 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EC84 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EC86 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EC88 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EC8A 01                         byte_1B928:	dc.b 1
0001EC8B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EC90 01                         byte_1B92E:	dc.b 1
0001EC91 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EC96 01                         byte_1B934:	dc.b 1
0001EC97 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EC9C 01                         byte_1B93A:	dc.b 1
0001EC9D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001ECA2                            		even
0001ECA2                            		even
0001ECA2                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001ECA2                            ; ---------------------------------------------------------------------------
0001ECA2                            ; Sprite mappings - special stage "UP" block
0001ECA2                            ; ---------------------------------------------------------------------------
0001ECA2                            Map_SS_Up_internal:
0001ECA2 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001ECA4 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001ECA6 01                         byte_1B944:	dc.b 1
0001ECA7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001ECAC 01                         byte_1B94A:	dc.b 1
0001ECAD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ECB2                            		even
0001ECB2                            		even
0001ECB2                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001ECB2                            ; ---------------------------------------------------------------------------
0001ECB2                            ; Sprite mappings - special stage "DOWN" block
0001ECB2                            ; ---------------------------------------------------------------------------
0001ECB2                            Map_SS_Down_internal:
0001ECB2 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001ECB4 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001ECB6 01                         byte_1B954:	dc.b 1
0001ECB7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001ECBC 01                         byte_1B95A:	dc.b 1
0001ECBD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001ECC2                            		even
0001ECC2                            		even
0001ECC2                            		include	"_maps\SS Chaos Emeralds.asm"
0001ECC2                            ; ---------------------------------------------------------------------------
0001ECC2                            ; Sprite mappings - special stage chaos	emeralds
0001ECC2                            ; ---------------------------------------------------------------------------
0001ECC2 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001ECC4 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001ECC6 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001ECC8 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001ECCA 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001ECCC 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001ECCE 01                         byte_1B96C:	dc.b 1
0001ECCF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001ECD4 01                         byte_1B972:	dc.b 1
0001ECD5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001ECDA 01                         byte_1B978:	dc.b 1
0001ECDB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001ECE0 01                         byte_1B97E:	dc.b 1
0001ECE1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001ECE6                            		even
0001ECE6                            		even
0001ECE6                            
0001ECE6                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001ECE6                            ; ---------------------------------------------------------------------------
0001ECE6                            ; Object 09 - Sonic (special stage)
0001ECE6                            ; ---------------------------------------------------------------------------
0001ECE6                            
0001ECE6                            SonicSpecial:
0001ECE6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001ECEA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001ECEC 6100 0000                  		bsr.w	SS_FixCamera
0001ECF0 6000 0000                  		bra.w	DebugMode
0001ECF4                            ; ===========================================================================
0001ECF4                            
0001ECF4                            Obj09_Normal:
0001ECF4 7000                       		moveq	#0,d0
0001ECF6 1028 0024                  		move.b	obRoutine(a0),d0
0001ECFA 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001ECFE 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001ED02                            ; ===========================================================================
0001ED02 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001ED04 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001ED06 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001ED08 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001ED0A                            ; ===========================================================================
0001ED0A                            
0001ED0A                            Obj09_Main:	; Routine 0
0001ED0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ED0E 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001ED14 117C 0007 0017             		move.b	#7,obWidth(a0)
0001ED1A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001ED22 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001ED28 117C 0004 0001             		move.b	#4,obRender(a0)
0001ED2E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001ED34 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001ED3A 08E8 0002 0022             		bset	#2,obStatus(a0)
0001ED40 08E8 0001 0022             		bset	#1,obStatus(a0)
0001ED46                            
0001ED46                            Obj09_ChkDebug:	; Routine 2
0001ED46 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001ED4A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ED4C 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001ED52 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001ED54 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001ED5A                            
0001ED5A                            Obj09_NoDebug:
0001ED5A 117C 0000 0030             		move.b	#0,$30(a0)
0001ED60 7000                       		moveq	#0,d0
0001ED62 1028 0022                  		move.b	obStatus(a0),d0
0001ED66 0240 0002                  		andi.w	#2,d0
0001ED6A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001ED6E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001ED72 4EB9 0001 6584             		jsr	(Sonic_LoadGfx).l
0001ED78 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001ED7E                            ; ===========================================================================
0001ED7E 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001ED80 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001ED82                            ; ===========================================================================
0001ED82                            
0001ED82                            Obj09_OnWall:
0001ED82 6100 0000                  		bsr.w	Obj09_Jump
0001ED86 6100 0000                  		bsr.w	Obj09_Move
0001ED8A 6100 0000                  		bsr.w	Obj09_Fall
0001ED8E 6000                       		bra.s	Obj09_Display
0001ED90                            ; ===========================================================================
0001ED90                            
0001ED90                            Obj09_InAir:
0001ED90 6100 0000                  		bsr.w	nullsub_2
0001ED94 6100 0000                  		bsr.w	Obj09_Move
0001ED98 6100 0000                  		bsr.w	Obj09_Fall
0001ED9C                            
0001ED9C                            Obj09_Display:
0001ED9C 6100 0000                  		bsr.w	Obj09_ChkItems
0001EDA0 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EDA4 4EB9 0000 F412             		jsr	(SpeedToPos).l
0001EDAA 6100 0000                  		bsr.w	SS_FixCamera
0001EDAE 3038 F780                  		move.w	(v_ssangle).w,d0
0001EDB2 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EDB6 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EDBA 4EB9 0001 61CC             		jsr	(Sonic_Animate).l
0001EDC0 4E75                       		rts	
0001EDC2                            
0001EDC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EDC2                            
0001EDC2                            
0001EDC2                            Obj09_Move:
0001EDC2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EDC8 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EDCA 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EDCE                            
0001EDCE                            Obj09_ChkRight:
0001EDCE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EDD4 6700                       		beq.s	loc_1BA78	; if not, branch
0001EDD6 6100 0000                  		bsr.w	Obj09_MoveRight
0001EDDA                            
0001EDDA                            loc_1BA78:
0001EDDA 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EDDE 0200 000C                  		andi.b	#btnL+btnR,d0
0001EDE2 6600                       		bne.s	loc_1BAA8
0001EDE4 3028 0020                  		move.w	obInertia(a0),d0
0001EDE8 6700                       		beq.s	loc_1BAA8
0001EDEA 6B00                       		bmi.s	loc_1BA9A
0001EDEC 0440 000C                  		subi.w	#$C,d0
0001EDF0 6400                       		bcc.s	loc_1BA94
0001EDF2 303C 0000                  		move.w	#0,d0
0001EDF6                            
0001EDF6                            loc_1BA94:
0001EDF6 3140 0020                  		move.w	d0,obInertia(a0)
0001EDFA 6000                       		bra.s	loc_1BAA8
0001EDFC                            ; ===========================================================================
0001EDFC                            
0001EDFC                            loc_1BA9A:
0001EDFC 0640 000C                  		addi.w	#$C,d0
0001EE00 6400                       		bcc.s	loc_1BAA4
0001EE02 303C 0000                  		move.w	#0,d0
0001EE06                            
0001EE06                            loc_1BAA4:
0001EE06 3140 0020                  		move.w	d0,obInertia(a0)
0001EE0A                            
0001EE0A                            loc_1BAA8:
0001EE0A 1038 F780                  		move.b	(v_ssangle).w,d0
0001EE0E 0600 0020                  		addi.b	#$20,d0
0001EE12 0200 00C0                  		andi.b	#$C0,d0
0001EE16 4400                       		neg.b	d0
0001EE18 4EB9 0000 3B42             		jsr	(CalcSine).l
0001EE1E C3E8 0020                  		muls.w	obInertia(a0),d1
0001EE22 D3A8 0008                  		add.l	d1,obX(a0)
0001EE26 C1E8 0020                  		muls.w	obInertia(a0),d0
0001EE2A D1A8 000C                  		add.l	d0,obY(a0)
0001EE2E 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EE32 2428 000C                  		move.l	obY(a0),d2
0001EE36 2628 0008                  		move.l	obX(a0),d3
0001EE3A 6100 0000                  		bsr.w	sub_1BCE8
0001EE3E 6700                       		beq.s	loc_1BAF2
0001EE40 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EE44 93A8 0008                  		sub.l	d1,obX(a0)
0001EE48 91A8 000C                  		sub.l	d0,obY(a0)
0001EE4C 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EE52 4E75                       		rts	
0001EE54                            ; ===========================================================================
0001EE54                            
0001EE54                            loc_1BAF2:
0001EE54 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EE58 4E75                       		rts	
0001EE5A                            ; End of function Obj09_Move
0001EE5A                            
0001EE5A                            
0001EE5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE5A                            
0001EE5A                            
0001EE5A                            Obj09_MoveLeft:
0001EE5A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EE60 3028 0020                  		move.w	obInertia(a0),d0
0001EE64 6700                       		beq.s	loc_1BB06
0001EE66 6A00                       		bpl.s	loc_1BB1A
0001EE68                            
0001EE68                            loc_1BB06:
0001EE68 0440 000C                  		subi.w	#$C,d0
0001EE6C 0C40 F800                  		cmpi.w	#-$800,d0
0001EE70 6E00                       		bgt.s	loc_1BB14
0001EE72 303C F800                  		move.w	#-$800,d0
0001EE76                            
0001EE76                            loc_1BB14:
0001EE76 3140 0020                  		move.w	d0,obInertia(a0)
0001EE7A 4E75                       		rts	
0001EE7C                            ; ===========================================================================
0001EE7C                            
0001EE7C                            loc_1BB1A:
0001EE7C 0440 0040                  		subi.w	#$40,d0
0001EE80 6400                       		bcc.s	loc_1BB22
0001EE82 4E71                       		nop	
0001EE84                            
0001EE84                            loc_1BB22:
0001EE84 3140 0020                  		move.w	d0,obInertia(a0)
0001EE88 4E75                       		rts	
0001EE8A                            ; End of function Obj09_MoveLeft
0001EE8A                            
0001EE8A                            
0001EE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EE8A                            
0001EE8A                            
0001EE8A                            Obj09_MoveRight:
0001EE8A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001EE90 3028 0020                  		move.w	obInertia(a0),d0
0001EE94 6B00                       		bmi.s	loc_1BB48
0001EE96 0640 000C                  		addi.w	#$C,d0
0001EE9A 0C40 0800                  		cmpi.w	#$800,d0
0001EE9E 6D00                       		blt.s	loc_1BB42
0001EEA0 303C 0800                  		move.w	#$800,d0
0001EEA4                            
0001EEA4                            loc_1BB42:
0001EEA4 3140 0020                  		move.w	d0,obInertia(a0)
0001EEA8 6000                       		bra.s	locret_1BB54
0001EEAA                            ; ===========================================================================
0001EEAA                            
0001EEAA                            loc_1BB48:
0001EEAA 0640 0040                  		addi.w	#$40,d0
0001EEAE 6400                       		bcc.s	loc_1BB50
0001EEB0 4E71                       		nop	
0001EEB2                            
0001EEB2                            loc_1BB50:
0001EEB2 3140 0020                  		move.w	d0,obInertia(a0)
0001EEB6                            
0001EEB6                            locret_1BB54:
0001EEB6 4E75                       		rts	
0001EEB8                            ; End of function Obj09_MoveRight
0001EEB8                            
0001EEB8                            
0001EEB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEB8                            
0001EEB8                            
0001EEB8                            Obj09_Jump:
0001EEB8 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001EEBC 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001EEC0 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001EEC2 1038 F780                  		move.b	(v_ssangle).w,d0
0001EEC6 0200 00FC                  		andi.b	#$FC,d0
0001EECA 4400                       		neg.b	d0
0001EECC 0400 0040                  		subi.b	#$40,d0
0001EED0 4EB9 0000 3B42             		jsr	(CalcSine).l
0001EED6 C3FC 0680                  		muls.w	#$680,d1
0001EEDA E081                       		asr.l	#8,d1
0001EEDC 3141 0010                  		move.w	d1,obVelX(a0)
0001EEE0 C1FC 0680                  		muls.w	#$680,d0
0001EEE4 E080                       		asr.l	#8,d0
0001EEE6 3140 0012                  		move.w	d0,obVelY(a0)
0001EEEA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EEFA                            
0001EEFA                            Obj09_NoJump:
0001EEFA 4E75                       		rts	
0001EEFC                            ; End of function Obj09_Jump
0001EEFC                            
0001EEFC                            
0001EEFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EEFC                            
0001EEFC                            
0001EEFC                            nullsub_2:
0001EEFC 4E75                       		rts	
0001EEFE                            ; End of function nullsub_2
0001EEFE                            
0001EEFE                            ; ===========================================================================
0001EEFE                            ; ---------------------------------------------------------------------------
0001EEFE                            ; unused subroutine to limit Sonic's upward vertical speed
0001EEFE                            ; ---------------------------------------------------------------------------
0001EEFE 323C FC00                  		move.w	#-$400,d1
0001EF02 B268 0012                  		cmp.w	obVelY(a0),d1
0001EF06 6F00                       		ble.s	locret_1BBB4
0001EF08 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF0C 0200 0070                  		andi.b	#btnABC,d0
0001EF10 6600                       		bne.s	locret_1BBB4
0001EF12 3141 0012                  		move.w	d1,obVelY(a0)
0001EF16                            
0001EF16                            locret_1BBB4:
0001EF16 4E75                       		rts	
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            
0001EF18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF18                            
0001EF18                            
0001EF18                            SS_FixCamera:
0001EF18 3428 000C                  		move.w	obY(a0),d2
0001EF1C 3628 0008                  		move.w	obX(a0),d3
0001EF20 3038 F700                  		move.w	(v_screenposx).w,d0
0001EF24 0443 00A0                  		subi.w	#$A0,d3
0001EF28 6500                       		bcs.s	loc_1BBCE
0001EF2A 9043                       		sub.w	d3,d0
0001EF2C 9178 F700                  		sub.w	d0,(v_screenposx).w
0001EF30                            
0001EF30                            loc_1BBCE:
0001EF30 3038 F704                  		move.w	(v_screenposy).w,d0
0001EF34 0442 0070                  		subi.w	#$70,d2
0001EF38 6500                       		bcs.s	locret_1BBDE
0001EF3A 9042                       		sub.w	d2,d0
0001EF3C 9178 F704                  		sub.w	d0,(v_screenposy).w
0001EF40                            
0001EF40                            locret_1BBDE:
0001EF40 4E75                       		rts	
0001EF42                            ; End of function SS_FixCamera
0001EF42                            
0001EF42                            ; ===========================================================================
0001EF42                            
0001EF42                            Obj09_ExitStage:
0001EF42 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001EF48 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001EF4E 6600                       		bne.s	loc_1BBF4
0001EF50 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EF56                            
0001EF56                            loc_1BBF4:
0001EF56 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001EF5C 6D00                       		blt.s	loc_1BC12
0001EF5E 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001EF64 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001EF6A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EF6E 317C 003C 0038             		move.w	#$3C,$38(a0)
0001EF74                            
0001EF74                            loc_1BC12:
0001EF74 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF78 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF7C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF80 4EB9 0001 61CC             		jsr	(Sonic_Animate).l
0001EF86 4EB9 0001 6584             		jsr	(Sonic_LoadGfx).l
0001EF8C 6100 FF8A                  		bsr.w	SS_FixCamera
0001EF90 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001EF96                            ; ===========================================================================
0001EF96                            
0001EF96                            Obj09_Exit2:
0001EF96 5368 0038                  		subq.w	#1,$38(a0)
0001EF9A 6600                       		bne.s	loc_1BC40
0001EF9C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001EFA2                            
0001EFA2                            loc_1BC40:
0001EFA2 4EB9 0001 61CC             		jsr	(Sonic_Animate).l
0001EFA8 4EB9 0001 6584             		jsr	(Sonic_LoadGfx).l
0001EFAE 6100 FF68                  		bsr.w	SS_FixCamera
0001EFB2 4EF9 0000 F426             		jmp	(DisplaySprite).l
0001EFB8                            
0001EFB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFB8                            
0001EFB8                            
0001EFB8                            Obj09_Fall:
0001EFB8 2428 000C                  		move.l	obY(a0),d2
0001EFBC 2628 0008                  		move.l	obX(a0),d3
0001EFC0 1038 F780                  		move.b	(v_ssangle).w,d0
0001EFC4 0200 00FC                  		andi.b	#$FC,d0
0001EFC8 4EB9 0000 3B42             		jsr	(CalcSine).l
0001EFCE 3828 0010                  		move.w	obVelX(a0),d4
0001EFD2 48C4                       		ext.l	d4
0001EFD4 E184                       		asl.l	#8,d4
0001EFD6 C1FC 002A                  		muls.w	#$2A,d0
0001EFDA D084                       		add.l	d4,d0
0001EFDC 3828 0012                  		move.w	obVelY(a0),d4
0001EFE0 48C4                       		ext.l	d4
0001EFE2 E184                       		asl.l	#8,d4
0001EFE4 C3FC 002A                  		muls.w	#$2A,d1
0001EFE8 D284                       		add.l	d4,d1
0001EFEA D680                       		add.l	d0,d3
0001EFEC 6100 0000                  		bsr.w	sub_1BCE8
0001EFF0 6700                       		beq.s	loc_1BCB0
0001EFF2 9680                       		sub.l	d0,d3
0001EFF4 7000                       		moveq	#0,d0
0001EFF6 3140 0010                  		move.w	d0,obVelX(a0)
0001EFFA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F000 D481                       		add.l	d1,d2
0001F002 6100 0000                  		bsr.w	sub_1BCE8
0001F006 6700                       		beq.s	loc_1BCC6
0001F008 9481                       		sub.l	d1,d2
0001F00A 7200                       		moveq	#0,d1
0001F00C 3141 0012                  		move.w	d1,obVelY(a0)
0001F010 4E75                       		rts	
0001F012                            ; ===========================================================================
0001F012                            
0001F012                            loc_1BCB0:
0001F012 D481                       		add.l	d1,d2
0001F014 6100 0000                  		bsr.w	sub_1BCE8
0001F018 6700                       		beq.s	loc_1BCD4
0001F01A 9481                       		sub.l	d1,d2
0001F01C 7200                       		moveq	#0,d1
0001F01E 3141 0012                  		move.w	d1,obVelY(a0)
0001F022 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F028                            
0001F028                            loc_1BCC6:
0001F028 E080                       		asr.l	#8,d0
0001F02A E081                       		asr.l	#8,d1
0001F02C 3140 0010                  		move.w	d0,obVelX(a0)
0001F030 3141 0012                  		move.w	d1,obVelY(a0)
0001F034 4E75                       		rts	
0001F036                            ; ===========================================================================
0001F036                            
0001F036                            loc_1BCD4:
0001F036 E080                       		asr.l	#8,d0
0001F038 E081                       		asr.l	#8,d1
0001F03A 3140 0010                  		move.w	d0,obVelX(a0)
0001F03E 3141 0012                  		move.w	d1,obVelY(a0)
0001F042 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F048 4E75                       		rts	
0001F04A                            ; End of function Obj09_Fall
0001F04A                            
0001F04A                            
0001F04A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F04A                            
0001F04A                            
0001F04A                            sub_1BCE8:
0001F04A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F050 7800                       		moveq	#0,d4
0001F052 4842                       		swap	d2
0001F054 3802                       		move.w	d2,d4
0001F056 4842                       		swap	d2
0001F058 0644 0044                  		addi.w	#$44,d4
0001F05C 88FC 0018                  		divu.w	#$18,d4
0001F060 C8FC 0080                  		mulu.w	#$80,d4
0001F064 D3C4                       		adda.l	d4,a1
0001F066 7800                       		moveq	#0,d4
0001F068 4843                       		swap	d3
0001F06A 3803                       		move.w	d3,d4
0001F06C 4843                       		swap	d3
0001F06E 0644 0014                  		addi.w	#$14,d4
0001F072 88FC 0018                  		divu.w	#$18,d4
0001F076 D2C4                       		adda.w	d4,a1
0001F078 7A00                       		moveq	#0,d5
0001F07A 1819                       		move.b	(a1)+,d4
0001F07C 6100                       		bsr.s	sub_1BD30
0001F07E 1819                       		move.b	(a1)+,d4
0001F080 6100                       		bsr.s	sub_1BD30
0001F082 D2FC 007E                  		adda.w	#$7E,a1
0001F086 1819                       		move.b	(a1)+,d4
0001F088 6100                       		bsr.s	sub_1BD30
0001F08A 1819                       		move.b	(a1)+,d4
0001F08C 6100                       		bsr.s	sub_1BD30
0001F08E 4A05                       		tst.b	d5
0001F090 4E75                       		rts	
0001F092                            ; End of function sub_1BCE8
0001F092                            
0001F092                            
0001F092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F092                            
0001F092                            
0001F092                            sub_1BD30:
0001F092 6700                       		beq.s	locret_1BD44
0001F094 0C04 0028                  		cmpi.b	#$28,d4
0001F098 6700                       		beq.s	locret_1BD44
0001F09A 0C04 003A                  		cmpi.b	#$3A,d4
0001F09E 6500                       		bcs.s	loc_1BD46
0001F0A0 0C04 004B                  		cmpi.b	#$4B,d4
0001F0A4 6400                       		bcc.s	loc_1BD46
0001F0A6                            
0001F0A6                            locret_1BD44:
0001F0A6 4E75                       		rts	
0001F0A8                            ; ===========================================================================
0001F0A8                            
0001F0A8                            loc_1BD46:
0001F0A8 1144 0030                  		move.b	d4,$30(a0)
0001F0AC 2149 0032                  		move.l	a1,$32(a0)
0001F0B0 7AFF                       		moveq	#-1,d5
0001F0B2 4E75                       		rts	
0001F0B4                            ; End of function sub_1BD30
0001F0B4                            
0001F0B4                            
0001F0B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0B4                            
0001F0B4                            
0001F0B4                            Obj09_ChkItems:
0001F0B4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F0BA 7800                       		moveq	#0,d4
0001F0BC 3828 000C                  		move.w	obY(a0),d4
0001F0C0 0644 0050                  		addi.w	#$50,d4
0001F0C4 88FC 0018                  		divu.w	#$18,d4
0001F0C8 C8FC 0080                  		mulu.w	#$80,d4
0001F0CC D3C4                       		adda.l	d4,a1
0001F0CE 7800                       		moveq	#0,d4
0001F0D0 3828 0008                  		move.w	obX(a0),d4
0001F0D4 0644 0020                  		addi.w	#$20,d4
0001F0D8 88FC 0018                  		divu.w	#$18,d4
0001F0DC D2C4                       		adda.w	d4,a1
0001F0DE 1811                       		move.b	(a1),d4
0001F0E0 6600                       		bne.s	Obj09_ChkCont
0001F0E2 4A28 003A                  		tst.b	$3A(a0)
0001F0E6 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F0EA 7800                       		moveq	#0,d4
0001F0EC 4E75                       		rts	
0001F0EE                            ; ===========================================================================
0001F0EE                            
0001F0EE                            Obj09_ChkCont:
0001F0EE 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F0F2 6600                       		bne.s	Obj09_Chk1Up
0001F0F4 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F0F8 6600                       		bne.s	Obj09_GetCont
0001F0FA 14BC 0001                  		move.b	#1,(a2)
0001F0FE 2549 0004                  		move.l	a1,4(a2)
0001F102                            
0001F102                            Obj09_GetCont:
0001F102 4EB9 0000 B5AE             		jsr	(CollectRing).l
0001F108 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F10E 6500                       		bcs.s	Obj09_NoCont
0001F110 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F116 6600                       		bne.s	Obj09_NoCont
0001F118 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F126                            
0001F126                            Obj09_NoCont:
0001F126 7800                       		moveq	#0,d4
0001F128 4E75                       		rts	
0001F12A                            ; ===========================================================================
0001F12A                            
0001F12A                            Obj09_Chk1Up:
0001F12A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F12E 6600                       		bne.s	Obj09_ChkEmer
0001F130 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F134 6600                       		bne.s	Obj09_Get1Up
0001F136 14BC 0003                  		move.b	#3,(a2)
0001F13A 2549 0004                  		move.l	a1,4(a2)
0001F13E                            
0001F13E                            Obj09_Get1Up:
0001F13E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F142 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F150 7800                       		moveq	#0,d4
0001F152 4E75                       		rts	
0001F154                            ; ===========================================================================
0001F154                            
0001F154                            Obj09_ChkEmer:
0001F154 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F158 6500                       		bcs.s	Obj09_ChkGhost
0001F15A 0C04 0040                  		cmpi.b	#$40,d4
0001F15E 6200                       		bhi.s	Obj09_ChkGhost
0001F160 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F164 6600                       		bne.s	Obj09_GetEmer
0001F166 14BC 0005                  		move.b	#5,(a2)
0001F16A 2549 0004                  		move.l	a1,4(a2)
0001F16E                            
0001F16E                            Obj09_GetEmer:
0001F16E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F174 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F176 0404 003B                  		subi.b	#$3B,d4
0001F17A 7000                       		moveq	#0,d0
0001F17C 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F180 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F184 1584 0000                  		move.b	d4,(a2,d0.w)
0001F188 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F18C                            
0001F18C                            Obj09_NoEmer:
0001F196 7800                       		moveq	#0,d4
0001F198 4E75                       		rts	
0001F19A                            ; ===========================================================================
0001F19A                            
0001F19A                            Obj09_ChkGhost:
0001F19A 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F19E 6600                       		bne.s	Obj09_ChkGhostTag
0001F1A0 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F1A6                            
0001F1A6                            Obj09_ChkGhostTag:
0001F1A6 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F1AA 6600                       		bne.s	Obj09_NoGhost
0001F1AC 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F1B2 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F1B4 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F1BA                            
0001F1BA                            Obj09_NoGhost:
0001F1BA 78FF                       		moveq	#-1,d4
0001F1BC 4E75                       		rts	
0001F1BE                            ; ===========================================================================
0001F1BE                            
0001F1BE                            Obj09_MakeGhostSolid:
0001F1BE 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F1C4 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F1C6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F1CC 723F                       		moveq	#$3F,d1
0001F1CE                            
0001F1CE                            Obj09_GhostLoop2:
0001F1CE 743F                       		moveq	#$3F,d2
0001F1D0                            
0001F1D0                            Obj09_GhostLoop:
0001F1D0 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F1D4 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F1D6 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F1DA                            
0001F1DA                            Obj09_NoReplace:
0001F1DA 5249                       		addq.w	#1,a1
0001F1DC 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F1E0 43E9 0040                  		lea	$40(a1),a1
0001F1E4 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F1E8                            
0001F1E8                            Obj09_GhostNotSolid:
0001F1E8 4228 003A                  		clr.b	$3A(a0)
0001F1EC 7800                       		moveq	#0,d4
0001F1EE 4E75                       		rts	
0001F1F0                            ; End of function Obj09_ChkItems
0001F1F0                            
0001F1F0                            
0001F1F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1F0                            
0001F1F0                            
0001F1F0                            Obj09_ChkItems2:
0001F1F0 1028 0030                  		move.b	$30(a0),d0
0001F1F4 6600                       		bne.s	Obj09_ChkBumper
0001F1F6 5328 0036                  		subq.b	#1,$36(a0)
0001F1FA 6A00                       		bpl.s	loc_1BEA0
0001F1FC 117C 0000 0036             		move.b	#0,$36(a0)
0001F202                            
0001F202                            loc_1BEA0:
0001F202 5328 0037                  		subq.b	#1,$37(a0)
0001F206 6A00                       		bpl.s	locret_1BEAC
0001F208 117C 0000 0037             		move.b	#0,$37(a0)
0001F20E                            
0001F20E                            locret_1BEAC:
0001F20E 4E75                       		rts	
0001F210                            ; ===========================================================================
0001F210                            
0001F210                            Obj09_ChkBumper:
0001F210 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F214 6600                       		bne.s	Obj09_GOAL
0001F216 2228 0032                  		move.l	$32(a0),d1
0001F21A 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F220 3401                       		move.w	d1,d2
0001F222 0241 007F                  		andi.w	#$7F,d1
0001F226 C2FC 0018                  		mulu.w	#$18,d1
0001F22A 0441 0014                  		subi.w	#$14,d1
0001F22E EE4A                       		lsr.w	#7,d2
0001F230 0242 007F                  		andi.w	#$7F,d2
0001F234 C4FC 0018                  		mulu.w	#$18,d2
0001F238 0442 0044                  		subi.w	#$44,d2
0001F23C 9268 0008                  		sub.w	obX(a0),d1
0001F240 9468 000C                  		sub.w	obY(a0),d2
0001F244 4EB9 0000 3DD4             		jsr	(CalcAngle).l
0001F24A 4EB9 0000 3B42             		jsr	(CalcSine).l
0001F250 C3FC F900                  		muls.w	#-$700,d1
0001F254 E081                       		asr.l	#8,d1
0001F256 3141 0010                  		move.w	d1,obVelX(a0)
0001F25A C1FC F900                  		muls.w	#-$700,d0
0001F25E E080                       		asr.l	#8,d0
0001F260 3140 0012                  		move.w	d0,obVelY(a0)
0001F264 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F26A 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F26E 6600                       		bne.s	Obj09_BumpSnd
0001F270 14BC 0002                  		move.b	#2,(a2)
0001F274 2028 0032                  		move.l	$32(a0),d0
0001F278 5380                       		subq.l	#1,d0
0001F27A 2540 0004                  		move.l	d0,4(a2)
0001F27E                            
0001F27E                            Obj09_BumpSnd:
0001F288                            ; ===========================================================================
0001F288                            
0001F288                            Obj09_GOAL:
0001F288 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F28C 6600                       		bne.s	Obj09_UPblock
0001F28E 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F29C 4E75                       		rts	
0001F29E                            ; ===========================================================================
0001F29E                            
0001F29E                            Obj09_UPblock:
0001F29E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F2A2 6600                       		bne.s	Obj09_DOWNblock
0001F2A4 4A28 0036                  		tst.b	$36(a0)
0001F2A8 6600 0000                  		bne.w	Obj09_NoGlass
0001F2AC 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F2B2 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F2B8 6700                       		beq.s	Obj09_UPsnd
0001F2BA E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F2BE 2268 0032                  		movea.l	$32(a0),a1
0001F2C2 5389                       		subq.l	#1,a1
0001F2C4 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F2C8                            
0001F2C8                            Obj09_UPsnd:
0001F2D2                            ; ===========================================================================
0001F2D2                            
0001F2D2                            Obj09_DOWNblock:
0001F2D2 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F2D6 6600                       		bne.s	Obj09_Rblock
0001F2D8 4A28 0036                  		tst.b	$36(a0)
0001F2DC 6600 0000                  		bne.w	Obj09_NoGlass
0001F2E0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F2E6 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F2EC 6600                       		bne.s	Obj09_DOWNsnd
0001F2EE E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F2F2 2268 0032                  		movea.l	$32(a0),a1
0001F2F6 5389                       		subq.l	#1,a1
0001F2F8 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F2FC                            
0001F2FC                            Obj09_DOWNsnd:
0001F306                            ; ===========================================================================
0001F306                            
0001F306                            Obj09_Rblock:
0001F306 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F30A 6600                       		bne.s	Obj09_ChkGlass
0001F30C 4A28 0037                  		tst.b	$37(a0)
0001F310 6600 0000                  		bne.w	Obj09_NoGlass
0001F314 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F31A 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F31E 6600                       		bne.s	Obj09_RevStage
0001F320 14BC 0004                  		move.b	#4,(a2)
0001F324 2028 0032                  		move.l	$32(a0),d0
0001F328 5380                       		subq.l	#1,d0
0001F32A 2540 0004                  		move.l	d0,4(a2)
0001F32E                            
0001F32E                            Obj09_RevStage:
0001F32E 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F33C                            ; ===========================================================================
0001F33C                            
0001F33C                            Obj09_ChkGlass:
0001F33C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F340 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F342 0C00 002E                  		cmpi.b	#$2E,d0
0001F346 6700                       		beq.s	Obj09_Glass
0001F348 0C00 002F                  		cmpi.b	#$2F,d0
0001F34C 6700                       		beq.s	Obj09_Glass
0001F34E 0C00 0030                  		cmpi.b	#$30,d0
0001F352 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F354                            
0001F354                            Obj09_Glass:
0001F354 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F358 6600                       		bne.s	Obj09_GlassSnd
0001F35A 14BC 0006                  		move.b	#6,(a2)
0001F35E 2268 0032                  		movea.l	$32(a0),a1
0001F362 5389                       		subq.l	#1,a1
0001F364 2549 0004                  		move.l	a1,4(a2)
0001F368 1011                       		move.b	(a1),d0
0001F36A 5200                       		addq.b	#1,d0		; change glass type when touched
0001F36C 0C00 0030                  		cmpi.b	#$30,d0
0001F370 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F372 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F374                            
0001F374                            Obj09_GlassUpdate:
0001F374 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F378                            
0001F378                            Obj09_GlassSnd:
0001F382                            ; ===========================================================================
0001F382                            
0001F382                            Obj09_NoGlass:
0001F382 4E75                       		rts	
0001F384                            ; End of function Obj09_ChkItems2
0001F384                            ; End of function Obj09_ChkItems2
0001F384                            
0001F384                            		include	"_incObj\10.asm"
0001F384                            ; ---------------------------------------------------------------------------
0001F384                            ; Object 10 - After-Image
0001F384                            ; ---------------------------------------------------------------------------
0001F384                            
0001F384                            Obj10:
0001F384 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F38A 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F38E                            
0001F38E 7000                             moveq   #0,d0
0001F390 1028 0024                        move.b   obRoutine(a0),d0
0001F394 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F398 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F39C                            
0001F39C                            ; ===========================================================================
0001F39C                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F39C                            ; ===========================================================================
0001F39C                            Afterimage_Index:
0001F39C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F39E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3A0 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3A2 0000                             dc.w AfterimageStart-Afterimage_Index
0001F3A4 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3A6 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3A8 0000                             dc.w NoAfterImage-Afterimage_Index
0001F3AA 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F3AC 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F3AE                            ; ===========================================================================
0001F3AE                            NoAfterImage:
0001F3AE 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F3B2 4E75                             rts
0001F3B4                            ; ===========================================================================
0001F3B4                            AfterimageStart:
0001F3B4 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F3BA 6000                             bra.s   Afterimage_Show
0001F3BC                            ; ===========================================================================
0001F3BC                            AfterimageLPrio:
0001F3BC 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F3C0                            ; ===========================================================================
0001F3C0                            Afterimage_Show:
0001F3C0 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F3C4 4EB9 0000 3B1C                   jsr   (RandomNumber).l         ; get a random number
0001F3CA 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F3CE 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F3D0 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F3D2                            
0001F3D2                            AfterimageException:
0001F3D2 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F3D8 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F3DE 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F3E4 4EF9 0000 F426                   jmp   DisplaySprite
0001F3EA                            ; ===========================================================================
0001F3EA                            AfterimageEnd:
0001F3EA 4EF9 0000 F466                   jmp   DeleteObject
0001F3EA 4EF9 0000 F466                   jmp   DeleteObject
0001F3F0                            
0001F3F0                            		include	"_inc\AnimateLevelGfx.asm"
0001F3F0                            ; ---------------------------------------------------------------------------
0001F3F0                            ; Subroutine to	animate	level graphics
0001F3F0                            ; ---------------------------------------------------------------------------
0001F3F0                            
0001F3F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F3F0                            
0001F3F0                            
0001F3F0                            AnimateLevelGfx:
0001F3F0 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F3F4 6600                       		bne.s	@ispaused	; if yes, branch
0001F3F6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F3FC 6100 0000                  		bsr.w	AniArt_GiantRing
0001F400 7000                       		moveq	#0,d0
0001F402 1038 FE10                  		move.b	(v_zone).w,d0
0001F406 D040                       		add.w	d0,d0
0001F408 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F40C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F410                            
0001F410                            	@ispaused:
0001F410 4E75                       		rts	
0001F412                            
0001F412                            ; ===========================================================================
0001F412 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F416 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F41A 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F41E 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F420                            ; ===========================================================================
0001F420                            ; ---------------------------------------------------------------------------
0001F420                            ; Animated pattern routine - Green Hill
0001F420                            ; ---------------------------------------------------------------------------
0001F420                            
0001F420                            AniArt_GHZ:
0001F420                            
0001F420                            AniArt_GHZ_Waterfall:
0001F420                            
0001F420 =00000008                  @size:		equ 8	; number of tiles per frame
0001F420                            
0001F420 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F424 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F426                            
0001F426 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F42C 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F432 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F436 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F43A 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F43E 6700                       		beq.s	@isframe0	; branch if frame 0
0001F440 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F444                            
0001F444                            	@isframe0:
0001F44E 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F452 6000 0000                  		bra.w	LoadTiles
0001F456                            ; ===========================================================================
0001F456                            
0001F456                            AniArt_GHZ_Bigflower:
0001F456                            
0001F456 =00000010                  @size:		equ 16	; number of tiles per frame
0001F456                            
0001F456 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F45A 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F45C                            
0001F45C 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F462 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F468 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F46C 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F470 0240 0001                  		andi.w	#1,d0
0001F474 6700                       		beq.s	@isframe0
0001F476 43E9 0200                  		lea	@size*$20(a1),a1
0001F47A                            
0001F47A                            	@isframe0:
0001F484 323C 000F                  		move.w	#@size-1,d1
0001F488 6000 0000                  		bra.w	LoadTiles
0001F48C                            ; ===========================================================================
0001F48C                            
0001F48C                            AniArt_GHZ_Smallflower:
0001F48C                            
0001F48C =0000000C                  @size:		equ 12	; number of tiles per frame
0001F48C                            
0001F48C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F490 6A00                       		bpl.s	@end
0001F492                            
0001F492 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F498 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F49C 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F4A0 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F4A4 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F4A8 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F4AC 6600                       		bne.s	@isframe1	; if not, branch
0001F4AE 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F4B4                            
0001F4B4                            	@isframe1:
0001F4B4 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F4B6 3200                       		move.w	d0,d1
0001F4B8 D040                       		add.w	d0,d0
0001F4BA D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F4C6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F4CC 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F4D0 323C 000B                  		move.w	#@size-1,d1
0001F4D4 6100 0000                  		bsr.w	LoadTiles
0001F4D8                            
0001F4D8                            @end:
0001F4D8 4E75                       		rts	
0001F4DA                            
0001F4DA 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F4DE                            ; ===========================================================================
0001F4DE                            ; ---------------------------------------------------------------------------
0001F4DE                            ; Animated pattern routine - Marble
0001F4DE                            ; ---------------------------------------------------------------------------
0001F4DE                            
0001F4DE                            AniArt_MZ:
0001F4DE                            
0001F4DE                            AniArt_MZ_Lava:
0001F4DE                            
0001F4DE =00000008                  @size:		equ 8	; number of tiles per frame
0001F4DE                            
0001F4DE 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F4E2 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F4E4                            
0001F4E4 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F4EA 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F4F0 7000                       		moveq	#0,d0
0001F4F2 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F4F6 5200                       		addq.b	#1,d0		; increment frame counter
0001F4F8 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F4FC 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F4FE 7000                       		moveq	#0,d0
0001F500                            
0001F500                            	@frame01or2:
0001F500 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F504 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F508 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F514 323C 0007                  		move.w	#@size-1,d1
0001F518 6100 0000                  		bsr.w	LoadTiles
0001F51C                            
0001F51C                            AniArt_MZ_Magma:
0001F51C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F520 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F522                            		
0001F522 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F528 7000                       		moveq	#0,d0
0001F52A 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F52E 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F534 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F536 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F542 7600                       		moveq	#0,d3
0001F544 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F548 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F54C 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F550 343C 0003                  		move.w	#3,d2
0001F554                            
0001F554                            	@loop:
0001F554 3003                       		move.w	d3,d0
0001F556 D040                       		add.w	d0,d0
0001F558 0240 001E                  		andi.w	#$1E,d0
0001F55C 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F562 3033 0000                  		move.w	(a3,d0.w),d0
0001F566 47F3 0000                  		lea	(a3,d0.w),a3
0001F56A 224C                       		movea.l	a4,a1
0001F56C 323C 001F                  		move.w	#$1F,d1
0001F570 4E93                       		jsr	(a3)
0001F572 5843                       		addq.w	#4,d3
0001F574 51CA FFDE                  		dbf	d2,@loop
0001F578 4E75                       		rts	
0001F57A                            ; ===========================================================================
0001F57A                            
0001F57A                            AniArt_MZ_Torch:
0001F57A                            
0001F57A =00000006                  @size:		equ 6	; number of tiles per frame
0001F57A                            
0001F57A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F57E 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F582                            		
0001F582 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F588 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F58E 7000                       		moveq	#0,d0
0001F590 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F594 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F598 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F59E C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F5A2 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F5AE 323C 0005                  		move.w	#@size-1,d1
0001F5B2 6000 0000                  		bra.w	LoadTiles
0001F5B6                            
0001F5B6                            @end:
0001F5B6 4E75                       		rts	
0001F5B8                            ; ===========================================================================
0001F5B8                            ; ---------------------------------------------------------------------------
0001F5B8                            ; Animated pattern routine - Scrap Brain
0001F5B8                            ; ---------------------------------------------------------------------------
0001F5B8                            
0001F5B8                            AniArt_SBZ:
0001F5B8                            
0001F5B8 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F5B8                            
0001F5B8 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F5BC 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F5BE                            		
0001F5BE 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F5C2 6000                       		bra.s	@chk_smokepuff2
0001F5C4                            ; ===========================================================================
0001F5C4                            
0001F5C4                            @smokepuff:
0001F5C4 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F5C8 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F5CA                            		
0001F5CA 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F5D0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F5E0 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F5E4 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F5E8 0240 0007                  		andi.w	#7,d0
0001F5EC 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F5EE 5340                       		subq.w	#1,d0
0001F5F0 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F5F4 43F1 0000                  		lea	(a1,d0.w),a1
0001F5F8 323C 000B                  		move.w	#@size-1,d1
0001F5FC 6000 0000                  		bra.w	LoadTiles
0001F600                            ; ===========================================================================
0001F600                            
0001F600                            @untilnextpuff:
0001F600 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F606                            
0001F606                            @clearsky:
0001F606 323C 0005                  		move.w	#(@size/2)-1,d1
0001F60A 6100 0000                  		bsr.w	LoadTiles
0001F60E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F614 323C 0005                  		move.w	#(@size/2)-1,d1
0001F618 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F61C                            ; ===========================================================================
0001F61C                            
0001F61C                            @chk_smokepuff2:
0001F61C 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F620 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F622                            		
0001F622 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F626 6000                       		bra.s	@end
0001F628                            ; ===========================================================================
0001F628                            
0001F628                            @smokepuff2:
0001F628 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F62C 6A00                       		bpl.s	@end		; branch if not 0
0001F62E                            		
0001F62E 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F634 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F644 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F648 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F64C 0240 0007                  		andi.w	#7,d0
0001F650 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F652 5340                       		subq.w	#1,d0
0001F654 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F658 43F1 0000                  		lea	(a1,d0.w),a1
0001F65C 323C 000B                  		move.w	#@size-1,d1
0001F660 6000 0000                  		bra.w	LoadTiles
0001F664                            ; ===========================================================================
0001F664                            
0001F664                            @untilnextpuff2:
0001F664 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F66A 609A                       		bra.s	@clearsky
0001F66C                            ; ===========================================================================
0001F66C                            
0001F66C                            @end:
0001F66C 4E75                       		rts	
0001F66E                            ; ===========================================================================
0001F66E                            ; ---------------------------------------------------------------------------
0001F66E                            ; Animated pattern routine - ending sequence
0001F66E                            ; ---------------------------------------------------------------------------
0001F66E                            
0001F66E                            AniArt_Ending:
0001F66E                            
0001F66E                            AniArt_Ending_BigFlower:
0001F66E                            
0001F66E =00000010                  @size:		equ 16	; number of tiles per frame
0001F66E                            
0001F66E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F672 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F674                            		
0001F674 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F67A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F680 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F684 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F688 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F68C 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F690 6700                       		beq.s	@isframe0	; branch if frame 0
0001F692 43E9 0200                  		lea	@size*$20(a1),a1
0001F696 45EA 0200                  		lea	@size*$20(a2),a2
0001F69A                            
0001F69A                            	@isframe0:
0001F6A4 323C 000F                  		move.w	#@size-1,d1
0001F6A8 6100 0000                  		bsr.w	LoadTiles
0001F6AC 224A                       		movea.l	a2,a1
0001F6B8 323C 000F                  		move.w	#@size-1,d1
0001F6BC 6000 0000                  		bra.w	LoadTiles
0001F6C0                            ; ===========================================================================
0001F6C0                            
0001F6C0                            AniArt_Ending_SmallFlower:
0001F6C0                            
0001F6C0 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F6C0                            
0001F6C0 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F6C4 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F6C6                            		
0001F6C6 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F6CC 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F6D0 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F6D4 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F6D8 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F6DC EF48                       		lsl.w	#7,d0		; multiply by $80
0001F6DE 3200                       		move.w	d0,d1
0001F6E0 D040                       		add.w	d0,d0
0001F6E2 D041                       		add.w	d1,d0		; multiply by 3
0001F6EE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F6F4 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F6F8 323C 000B                  		move.w	#@size-1,d1
0001F6FC 6000 0000                  		bra.w	LoadTiles
0001F700                            ; ===========================================================================
0001F700 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F708                            ; ===========================================================================
0001F708                            
0001F708                            AniArt_Ending_Flower3:
0001F708                            
0001F708 =00000010                  @size:		equ 16	; number of tiles per frame
0001F708                            
0001F708 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F70C 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F70E                            		
0001F70E 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F714 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F718 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F71C 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F720 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F724 E148                       		lsl.w	#8,d0		; multiply by $100
0001F726 D040                       		add.w	d0,d0		; multiply by 2
0001F732 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F736 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F73A 323C 000F                  		move.w	#@size-1,d1
0001F73E 6000 0000                  		bra.w	LoadTiles
0001F742                            ; ===========================================================================
0001F742 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F746                            ; ===========================================================================
0001F746                            
0001F746                            AniArt_Ending_Flower4:
0001F746                            
0001F746 =00000010                  @size:		equ 16	; number of tiles per frame
0001F746                            
0001F746 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F74A 6A00                       		bpl.s	@end		; branch if not 0
0001F74C                            		
0001F74C 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F752 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F756 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F75A 0240 0003                  		andi.w	#3,d0
0001F75E 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F762 E148                       		lsl.w	#8,d0		; multiply by $100
0001F764 D040                       		add.w	d0,d0		; multiply by 2
0001F770 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F774 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F778 323C 000F                  		move.w	#@size-1,d1
0001F77C 6000 0000                  		bra.w	LoadTiles
0001F780                            ; ===========================================================================
0001F780                            
0001F780                            @end:
0001F780 4E75                       		rts	
0001F782                            ; ===========================================================================
0001F782                            
0001F782                            AniArt_none:
0001F782 4E75                       		rts	
0001F784                            
0001F784                            ; ---------------------------------------------------------------------------
0001F784                            ; Subroutine to	transfer graphics to VRAM
0001F784                            
0001F784                            ; input:
0001F784                            ;	a1 = source address
0001F784                            ;	a6 = vdp_data_port ($C00000)
0001F784                            ;	d1 = number of tiles to load (minus one)
0001F784                            ; ---------------------------------------------------------------------------
0001F784                            
0001F784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F784                            
0001F784                            
0001F784                            LoadTiles:
0001F784 2C99                       		move.l	(a1)+,(a6)
0001F786 2C99                       		move.l	(a1)+,(a6)
0001F788 2C99                       		move.l	(a1)+,(a6)
0001F78A 2C99                       		move.l	(a1)+,(a6)
0001F78C 2C99                       		move.l	(a1)+,(a6)
0001F78E 2C99                       		move.l	(a1)+,(a6)
0001F790 2C99                       		move.l	(a1)+,(a6)
0001F792 2C99                       		move.l	(a1)+,(a6)
0001F794 51C9 FFEE                  		dbf	d1,LoadTiles
0001F798 4E75                       		rts	
0001F79A                            ; End of function LoadTiles
0001F79A                            
0001F79A                            ; ===========================================================================
0001F79A                            ; ---------------------------------------------------------------------------
0001F79A                            ; Animated pattern routine - more Marble Zone
0001F79A                            ; ---------------------------------------------------------------------------
0001F79A 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F79E 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F7A2 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F7A6 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F7AA 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F7AE 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F7B2 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F7B6 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F7BA                            ; ===========================================================================
0001F7BA                            
0001F7BA                            loc_1C3EE:
0001F7BA 2C91                       		move.l	(a1),(a6)
0001F7BC 43E9 0010                  		lea	$10(a1),a1
0001F7C0 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F7C4 4E75                       		rts	
0001F7C6                            ; ===========================================================================
0001F7C6                            
0001F7C6                            loc_1C3FA:
0001F7C6 2029 0002                  		move.l	2(a1),d0
0001F7CA 1029 0001                  		move.b	1(a1),d0
0001F7CE E098                       		ror.l	#8,d0
0001F7D0 2C80                       		move.l	d0,(a6)
0001F7D2 43E9 0010                  		lea	$10(a1),a1
0001F7D6 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F7DA 4E75                       		rts	
0001F7DC                            ; ===========================================================================
0001F7DC                            
0001F7DC                            loc_1C410:
0001F7DC 2CA9 0002                  		move.l	2(a1),(a6)
0001F7E0 43E9 0010                  		lea	$10(a1),a1
0001F7E4 51C9 FFF6                  		dbf	d1,loc_1C410
0001F7E8 4E75                       		rts	
0001F7EA                            ; ===========================================================================
0001F7EA                            
0001F7EA                            loc_1C41E:
0001F7EA 2029 0004                  		move.l	4(a1),d0
0001F7EE 1029 0003                  		move.b	3(a1),d0
0001F7F2 E098                       		ror.l	#8,d0
0001F7F4 2C80                       		move.l	d0,(a6)
0001F7F6 43E9 0010                  		lea	$10(a1),a1
0001F7FA 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F7FE 4E75                       		rts	
0001F800                            ; ===========================================================================
0001F800                            
0001F800                            loc_1C434:
0001F800 2CA9 0004                  		move.l	4(a1),(a6)
0001F804 43E9 0010                  		lea	$10(a1),a1
0001F808 51C9 FFF6                  		dbf	d1,loc_1C434
0001F80C 4E75                       		rts	
0001F80E                            ; ===========================================================================
0001F80E                            
0001F80E                            loc_1C442:
0001F80E 2029 0006                  		move.l	6(a1),d0
0001F812 1029 0005                  		move.b	5(a1),d0
0001F816 E098                       		ror.l	#8,d0
0001F818 2C80                       		move.l	d0,(a6)
0001F81A 43E9 0010                  		lea	$10(a1),a1
0001F81E 51C9 FFEE                  		dbf	d1,loc_1C442
0001F822 4E75                       		rts	
0001F824                            ; ===========================================================================
0001F824                            
0001F824                            loc_1C458:
0001F824 2CA9 0006                  		move.l	6(a1),(a6)
0001F828 43E9 0010                  		lea	$10(a1),a1
0001F82C 51C9 FFF6                  		dbf	d1,loc_1C458
0001F830 4E75                       		rts	
0001F832                            ; ===========================================================================
0001F832                            
0001F832                            loc_1C466:
0001F832 2029 0008                  		move.l	8(a1),d0
0001F836 1029 0007                  		move.b	7(a1),d0
0001F83A E098                       		ror.l	#8,d0
0001F83C 2C80                       		move.l	d0,(a6)
0001F83E 43E9 0010                  		lea	$10(a1),a1
0001F842 51C9 FFEE                  		dbf	d1,loc_1C466
0001F846 4E75                       		rts	
0001F848                            ; ===========================================================================
0001F848                            
0001F848                            loc_1C47C:
0001F848 2CA9 0008                  		move.l	8(a1),(a6)
0001F84C 43E9 0010                  		lea	$10(a1),a1
0001F850 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F854 4E75                       		rts	
0001F856                            ; ===========================================================================
0001F856                            
0001F856                            loc_1C48A:
0001F856 2029 000A                  		move.l	$A(a1),d0
0001F85A 1029 0009                  		move.b	9(a1),d0
0001F85E E098                       		ror.l	#8,d0
0001F860 2C80                       		move.l	d0,(a6)
0001F862 43E9 0010                  		lea	$10(a1),a1
0001F866 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F86A 4E75                       		rts	
0001F86C                            ; ===========================================================================
0001F86C                            
0001F86C                            loc_1C4A0:
0001F86C 2CA9 000A                  		move.l	$A(a1),(a6)
0001F870 43E9 0010                  		lea	$10(a1),a1
0001F874 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F878 4E75                       		rts	
0001F87A                            ; ===========================================================================
0001F87A                            
0001F87A                            loc_1C4AE:
0001F87A 2029 000C                  		move.l	$C(a1),d0
0001F87E 1029 000B                  		move.b	$B(a1),d0
0001F882 E098                       		ror.l	#8,d0
0001F884 2C80                       		move.l	d0,(a6)
0001F886 43E9 0010                  		lea	$10(a1),a1
0001F88A 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001F88E 4E75                       		rts	
0001F890                            ; ===========================================================================
0001F890                            
0001F890                            loc_1C4C4:
0001F890 2CA9 000C                  		move.l	$C(a1),(a6)
0001F894 43E9 0010                  		lea	$10(a1),a1
0001F898 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001F89C 4E75                       		rts	
0001F89E                            ; ===========================================================================
0001F89E                            
0001F89E                            loc_1C4D2:
0001F89E 2029 000C                  		move.l	$C(a1),d0
0001F8A2 E198                       		rol.l	#8,d0
0001F8A4 1011                       		move.b	0(a1),d0
0001F8A6 2C80                       		move.l	d0,(a6)
0001F8A8 43E9 0010                  		lea	$10(a1),a1
0001F8AC 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001F8B0 4E75                       		rts	
0001F8B2                            ; ===========================================================================
0001F8B2                            
0001F8B2                            loc_1C4E8:
0001F8B2 3CA9 000E                  		move.w	$E(a1),(a6)
0001F8B6 3C91                       		move.w	0(a1),(a6)
0001F8B8 43E9 0010                  		lea	$10(a1),a1
0001F8BC 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001F8C0 4E75                       		rts	
0001F8C2                            ; ===========================================================================
0001F8C2                            
0001F8C2                            loc_1C4FA:
0001F8C2 2011                       		move.l	0(a1),d0
0001F8C4 1029 000F                  		move.b	$F(a1),d0
0001F8C8 E098                       		ror.l	#8,d0
0001F8CA 2C80                       		move.l	d0,(a6)
0001F8CC 43E9 0010                  		lea	$10(a1),a1
0001F8D0 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001F8D4 4E75                       		rts	
0001F8D6                            
0001F8D6                            ; ---------------------------------------------------------------------------
0001F8D6                            ; Animated pattern routine - giant ring
0001F8D6                            ; ---------------------------------------------------------------------------
0001F8D6                            
0001F8D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F8D6                            
0001F8D6                            
0001F8D6                            AniArt_GiantRing:
0001F8D6                            
0001F8D6 =0000000E                  @size:		equ 14
0001F8D6                            
0001F8D6 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001F8DA 6600                       		bne.s	@loadTiles		; If so, get to work
0001F8DC 4E75                       		rts	
0001F8DE                            ; ===========================================================================
0001F8DE                            ; loc_1C518:
0001F8DE                            @loadTiles:
0001F8DE 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001F8E4 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001F8EA 7000                       		moveq	#0,d0
0001F8EC 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001F8F0 43F1 0000                  		lea	(a1,d0.w),a1
0001F8F4                            		; Turn VRAM address into VDP command
0001F8F4 0640 8000                  		addi.w	#$8000,d0
0001F8F8 E588                       		lsl.l	#2,d0
0001F8FA E448                       		lsr.w	#2,d0
0001F8FC 0040 4000                  		ori.w	#$4000,d0
0001F900 4840                       		swap	d0
0001F902                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001F902 2D40 0004                  		move.l	d0,4(a6)
0001F906                            
0001F906 323C 000D                  		move.w	#@size-1,d1
0001F90A 6000 FE78                  		bra.w	LoadTiles
0001F90E                            
0001F90E                            ; End of function AniArt_GiantRing
0001F90E                            ; End of function AniArt_GiantRing
0001F90E                            
0001F90E                            		include	"_incObj\21 HUD.asm"
0001F90E                            ; ---------------------------------------------------------------------------
0001F90E                            ; Object 21 - SCORE, TIME, RINGS
0001F90E                            ; ---------------------------------------------------------------------------
0001F90E                            
0001F90E                            HUD:
0001F90E 7000                       		moveq	#0,d0
0001F910 1028 0024                  		move.b	obRoutine(a0),d0
0001F914 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001F918 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001F91C                            ; ===========================================================================
0001F91C 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001F91E 0000                       		dc.w HUD_Flash-HUD_Index
0001F920                            ; ===========================================================================
0001F920                            
0001F920                            HUD_Main:	; Routine 0
0001F920 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F924 317C 0090 0008             		move.w	#$90,obX(a0)
0001F92A 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001F930 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001F938 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001F93E 117C 0000 0001             		move.b	#0,obRender(a0)
0001F944 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F94A                            
0001F94A                            HUD_Flash:	; Routine 2
0001F94A 7000                       		moveq	#0,d0
0001F94C 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001F952 6600                       		bne.s	@display
0001F954 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001F958 6600                       		bne.s	@norings	; if so, branch
0001F95A 5240                       		addq.w	#1,d0		; make ring counter flash red
0001F95C                            ; ===========================================================================
0001F95C                            
0001F95C                            @norings:
0001F95C 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001F962 6600                       		bne.s	@display	; if not, branch
0001F964 5440                       		addq.w	#2,d0		; make time counter flash red
0001F966                            
0001F966                            	@display:
0001F966 1140 001A                  		move.b	d0,obFrame(a0)
0001F96A 4EF9 0000 F426             		jmp	DisplaySprite
0001F96A 4EF9 0000 F426             		jmp	DisplaySprite
0001F970                            Map_HUD:	include	"_maps\HUD.asm"
0001F970                            ; ---------------------------------------------------------------------------
0001F970                            ; Sprite mappings - SCORE, TIME, RINGS
0001F970                            ; ---------------------------------------------------------------------------
0001F970                            Map_HUD_internal:
0001F970 0000                       		dc.w @allyellow-Map_HUD_internal
0001F972 0000                       		dc.w @ringred-Map_HUD_internal
0001F974 0000                       		dc.w @timered-Map_HUD_internal
0001F976 0000                       		dc.w @allred-Map_HUD_internal
0001F978 0A                         @allyellow:	dc.b $A
0001F979 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F97E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F983 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F988 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F98D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F992 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F997 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001F99C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F9A1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F9A6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9AB 00                         		dc.b 0
0001F9AC 0A                         @ringred:	dc.b $A
0001F9AD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F9B2 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F9B7 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F9BC 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001F9C1 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F9C6 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001F9CB A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001F9D0 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001F9D5 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001F9DA 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001F9DF 00                         		dc.b 0
0001F9E0 0A                         @timered:	dc.b $A
0001F9E1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001F9E6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001F9EB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001F9F0 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001F9F5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001F9FA A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001F9FF A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FA04 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA09 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA0E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA13 00                         		dc.b 0
0001FA14 0A                         @allred:	dc.b $A
0001FA15 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FA1A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FA1F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FA24 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FA29 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FA2E A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FA33 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FA38 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FA3D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FA42 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FA48 00                         		even
0001FA48 00                         		even
0001FA48                            
0001FA48                            ; ---------------------------------------------------------------------------
0001FA48                            ; Add points subroutine
0001FA48                            ; ---------------------------------------------------------------------------
0001FA48                            
0001FA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA48                            
0001FA48                            
0001FA48                            AddPoints:
0001FA48 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FA4E                            
0001FA4E                            
0001FA4E 47F8 FE26                  			lea     (v_score).w,a3
0001FA52 D193                       			add.l   d0,(a3)
0001FA54 223C 000F 423F             			move.l  #999999,d1
0001FA5A B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FA5C 6200                       			bhi.s   @belowmax ; if yes, branch
0001FA5E 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FA60                            		@belowmax:
0001FA60 2013                       			move.l  (a3),d0
0001FA62 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FA66 6500                       			blo.s   @noextralife ; if not, branch
0001FA68                            
0001FA68 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FA70 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FA74 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FA76 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FA7A 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FA88                            
0001FA88                            @locret_1C6B6:
0001FA88                            @noextralife:
0001FA88 4E75                       		rts	
0001FA8A                            ; End of function AddPoints
0001FA8A                            
0001FA8A                            		include	"_inc\HUD_Update.asm"
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            ; Subroutine to	update the HUD
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            
0001FA8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA8A                            
0001FA8A                            hudVRAM:	macro loc
0001FA8A                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FA8A                            		endm
0001FA8A                            
0001FA8A                            
0001FA8A                            HUD_Update:
0001FA8A 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FA8E 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FA92 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FA96 6700                       		beq.s	@chkrings	; if not, branch
0001FA98                            
0001FA98 4238 FE1F                  		clr.b	(f_scorecount).w
0001FA9C 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FAA2 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FAA6 6100 0000                  		bsr.w	Hud_Score
0001FAAA                            
0001FAAA                            	@chkrings:
0001FAAA 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FAAE 6700                       		beq.s	@chktime	; if not, branch
0001FAB0 6A00                       		bpl.s	@notzero
0001FAB2 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FAB6                            
0001FAB6                            	@notzero:
0001FAB6 4238 FE1D                  		clr.b	(f_ringcount).w
0001FABA 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FAC0 7200                       		moveq	#0,d1
0001FAC2 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FAC6 6100 0000                  		bsr.w	Hud_Rings
0001FACA                            
0001FACA                            	@chktime:
0001FACA 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FACE 6700                       		beq.s	@chklives	; if not, branch
0001FAD0 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FAD4 6600                       		bne.s	@chklives	; if yes, branch
0001FAD6 43F8 FE22                  		lea	(v_time).w,a1
0001FADA 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FAE0 6700                       		beq.s	TimeOver	; if yes, branch
0001FAE2                            
0001FAE2 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FAE4 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FAE8 6500                       		bcs.s	@chklives
0001FAEA 12BC 0000                  		move.b	#0,(a1)
0001FAEE 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FAF0 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FAF4 6500                       		bcs.s	@updatetime
0001FAF6 12BC 0000                  		move.b	#0,(a1)
0001FAFA 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FAFC 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FB00 6500                       		bcs.s	@updatetime
0001FB02 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FB06                            
0001FB06                            	@updatetime:
0001FB06 203C 5E40 0003             		hudVRAM	$DE40
0001FB0C 7200                       		moveq	#0,d1
0001FB0E 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FB12 6100 0000                  		bsr.w	Hud_Mins
0001FB16 203C 5EC0 0003             		hudVRAM	$DEC0
0001FB1C 7200                       		moveq	#0,d1
0001FB1E 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FB22 6100 0000                  		bsr.w	Hud_Secs
0001FB26                            
0001FB26                            	@chklives:
0001FB26 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FB2A 6700                       		beq.s	@chkbonus	; if not, branch
0001FB2C 4238 FE1C                  		clr.b	(f_lifecount).w
0001FB30 6100 0000                  		bsr.w	Hud_Lives
0001FB34                            
0001FB34                            	@chkbonus:
0001FB34 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FB38 6700                       		beq.s	@finish		; if not, branch
0001FB3A 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FB48 7200                       		moveq	#0,d1
0001FB4A 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FB4E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB52 7200                       		moveq	#0,d1
0001FB54 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FB58 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FB5C                            
0001FB5C                            	@finish:
0001FB5C 4E75                       		rts	
0001FB5E                            ; ===========================================================================
0001FB5E                            
0001FB5E                            TimeOver:
0001FB5E 4238 FE1E                  		clr.b	(f_timecount).w
0001FB62 41F8 D000                  		lea	(v_player).w,a0
0001FB66 2448                       		movea.l	a0,a2
0001FB68 6100 E82E                  		bsr.w	KillSonic
0001FB6C 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FB72 4E75                       		rts	
0001FB74                            ; ===========================================================================
0001FB74                            
0001FB74                            HudDebug:
0001FB74 6100 0000                  		bsr.w	HudDb_XY
0001FB78 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FB7C 6700                       		beq.s	@objcounter	; if not, branch
0001FB7E 6A00                       		bpl.s	@notzero
0001FB80 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FB84                            
0001FB84                            	@notzero:
0001FB84 4238 FE1D                  		clr.b	(f_ringcount).w
0001FB88 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FB8E 7200                       		moveq	#0,d1
0001FB90 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FB94 6100 0000                  		bsr.w	Hud_Rings
0001FB98                            
0001FB98                            	@objcounter:
0001FB98 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FB9E 7200                       		moveq	#0,d1
0001FBA0 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FBA4 6100 0000                  		bsr.w	Hud_Secs
0001FBA8 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FBAC 6700                       		beq.s	@chkbonus	; if not, branch
0001FBAE 4238 FE1C                  		clr.b	(f_lifecount).w
0001FBB2 6100 0000                  		bsr.w	Hud_Lives
0001FBB6                            
0001FBB6                            	@chkbonus:
0001FBB6 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FBBA 6700                       		beq.s	@finish		; if not, branch
0001FBBC 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FBCA 7200                       		moveq	#0,d1
0001FBCC 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FBD0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FBD4 7200                       		moveq	#0,d1
0001FBD6 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FBDA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FBDE                            
0001FBDE                            	@finish:
0001FBDE 4E75                       		rts	
0001FBE0                            ; End of function HUD_Update
0001FBE0                            
0001FBE0                            ; ---------------------------------------------------------------------------
0001FBE0                            ; Subroutine to	load "0" on the	HUD
0001FBE0                            ; ---------------------------------------------------------------------------
0001FBE0                            
0001FBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBE0                            
0001FBE0                            
0001FBE0                            Hud_LoadZero:
0001FBEA 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FBEE 343C 0002                  		move.w	#2,d2
0001FBF2 6000                       		bra.s	loc_1C83E
0001FBF4                            ; End of function Hud_LoadZero
0001FBF4                            
0001FBF4                            ; ---------------------------------------------------------------------------
0001FBF4                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FBF4                            ; ---------------------------------------------------------------------------
0001FBF4                            
0001FBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBF4                            
0001FBF4                            
0001FBF4                            Hud_Base:
0001FBF4 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FBFA 6100 0000                  		bsr.w	Hud_Lives
0001FC08 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FC0C 343C 000E                  		move.w	#$E,d2
0001FC10                            
0001FC10                            loc_1C83E:
0001FC10 43FA 0000                  		lea	Art_Hud(pc),a1
0001FC14                            
0001FC14                            loc_1C842:
0001FC14 323C 000F                  		move.w	#$F,d1
0001FC18 101A                       		move.b	(a2)+,d0
0001FC1A 6B00                       		bmi.s	loc_1C85E
0001FC1C 4880                       		ext.w	d0
0001FC1E EB48                       		lsl.w	#5,d0
0001FC20 47F1 0000                  		lea	(a1,d0.w),a3
0001FC24                            
0001FC24                            loc_1C852:
0001FC24 2C9B                       		move.l	(a3)+,(a6)
0001FC26 51C9 FFFC                  		dbf	d1,loc_1C852
0001FC2A                            
0001FC2A                            loc_1C858:
0001FC2A 51CA FFE8                  		dbf	d2,loc_1C842
0001FC2E                            
0001FC2E 4E75                       		rts	
0001FC30                            ; ===========================================================================
0001FC30                            
0001FC30                            loc_1C85E:
0001FC30 2CBC 0000 0000             		move.l	#0,(a6)
0001FC36 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FC3A                            
0001FC3A 60EE                       		bra.s	loc_1C858
0001FC3C                            ; End of function Hud_Base
0001FC3C                            
0001FC3C                            ; ===========================================================================
0001FC3C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FC48 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FC4C                            ; ---------------------------------------------------------------------------
0001FC4C                            ; Subroutine to	load debug mode	numbers	patterns
0001FC4C                            ; ---------------------------------------------------------------------------
0001FC4C                            
0001FC4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC4C                            
0001FC4C                            
0001FC4C                            HudDb_XY:
0001FC56 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FC5A 4841                       		swap	d1
0001FC5C 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FC60 6100                       		bsr.s	HudDb_XY2
0001FC62 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FC66 4841                       		swap	d1
0001FC68 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FC6C                            ; End of function HudDb_XY
0001FC6C                            
0001FC6C                            
0001FC6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC6C                            
0001FC6C                            
0001FC6C                            HudDb_XY2:
0001FC6C 7C07                       		moveq	#7,d6
0001FC6E 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FC74                            
0001FC74                            HudDb_XYLoop:
0001FC74 E959                       		rol.w	#4,d1
0001FC76 3401                       		move.w	d1,d2
0001FC78 0242 000F                  		andi.w	#$F,d2
0001FC7C 0C42 000A                  		cmpi.w	#$A,d2
0001FC80 6500                       		bcs.s	loc_1C8B2
0001FC82 5E42                       		addq.w	#7,d2
0001FC84                            
0001FC84                            loc_1C8B2:
0001FC84 EB4A                       		lsl.w	#5,d2
0001FC86 47F1 2000                  		lea	(a1,d2.w),a3
0001FC8A 2C9B                       		move.l	(a3)+,(a6)
0001FC8C 2C9B                       		move.l	(a3)+,(a6)
0001FC8E 2C9B                       		move.l	(a3)+,(a6)
0001FC90 2C9B                       		move.l	(a3)+,(a6)
0001FC92 2C9B                       		move.l	(a3)+,(a6)
0001FC94 2C9B                       		move.l	(a3)+,(a6)
0001FC96 2C9B                       		move.l	(a3)+,(a6)
0001FC98 2C9B                       		move.l	(a3)+,(a6)
0001FC9A 4841                       		swap	d1
0001FC9C 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FCA0                            
0001FCA0 4E75                       		rts	
0001FCA2                            ; End of function HudDb_XY2
0001FCA2                            
0001FCA2                            ; ---------------------------------------------------------------------------
0001FCA2                            ; Subroutine to	load rings numbers patterns
0001FCA2                            ; ---------------------------------------------------------------------------
0001FCA2                            
0001FCA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCA2                            
0001FCA2                            
0001FCA2                            Hud_Rings:
0001FCA2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FCA8 7C02                       		moveq	#2,d6
0001FCAA 6000                       		bra.s	Hud_LoadArt
0001FCAC                            ; End of function Hud_Rings
0001FCAC                            
0001FCAC                            ; ---------------------------------------------------------------------------
0001FCAC                            ; Subroutine to	load score numbers patterns
0001FCAC                            ; ---------------------------------------------------------------------------
0001FCAC                            
0001FCAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCAC                            
0001FCAC                            
0001FCAC                            Hud_Score:
0001FCAC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FCB2 7C05                       		moveq	#5,d6
0001FCB4                            
0001FCB4                            Hud_LoadArt:
0001FCB4 7800                       		moveq	#0,d4
0001FCB6 43FA 0000                  		lea	Art_Hud(pc),a1
0001FCBA                            
0001FCBA                            Hud_ScoreLoop:
0001FCBA 7400                       		moveq	#0,d2
0001FCBC 261A                       		move.l	(a2)+,d3
0001FCBE                            
0001FCBE                            loc_1C8EC:
0001FCBE 9283                       		sub.l	d3,d1
0001FCC0 6500                       		bcs.s	loc_1C8F4
0001FCC2 5242                       		addq.w	#1,d2
0001FCC4 60F8                       		bra.s	loc_1C8EC
0001FCC6                            ; ===========================================================================
0001FCC6                            
0001FCC6                            loc_1C8F4:
0001FCC6 D283                       		add.l	d3,d1
0001FCC8 4A42                       		tst.w	d2
0001FCCA 6700                       		beq.s	loc_1C8FE
0001FCCC 383C 0001                  		move.w	#1,d4
0001FCD0                            
0001FCD0                            loc_1C8FE:
0001FCD0 4A44                       		tst.w	d4
0001FCD2 6700                       		beq.s	loc_1C92C
0001FCD4 ED4A                       		lsl.w	#6,d2
0001FCD6 2D40 0004                  		move.l	d0,4(a6)
0001FCDA 47F1 2000                  		lea	(a1,d2.w),a3
0001FCDE 2C9B                       		move.l	(a3)+,(a6)
0001FCE0 2C9B                       		move.l	(a3)+,(a6)
0001FCE2 2C9B                       		move.l	(a3)+,(a6)
0001FCE4 2C9B                       		move.l	(a3)+,(a6)
0001FCE6 2C9B                       		move.l	(a3)+,(a6)
0001FCE8 2C9B                       		move.l	(a3)+,(a6)
0001FCEA 2C9B                       		move.l	(a3)+,(a6)
0001FCEC 2C9B                       		move.l	(a3)+,(a6)
0001FCEE 2C9B                       		move.l	(a3)+,(a6)
0001FCF0 2C9B                       		move.l	(a3)+,(a6)
0001FCF2 2C9B                       		move.l	(a3)+,(a6)
0001FCF4 2C9B                       		move.l	(a3)+,(a6)
0001FCF6 2C9B                       		move.l	(a3)+,(a6)
0001FCF8 2C9B                       		move.l	(a3)+,(a6)
0001FCFA 2C9B                       		move.l	(a3)+,(a6)
0001FCFC 2C9B                       		move.l	(a3)+,(a6)
0001FCFE                            
0001FCFE                            loc_1C92C:
0001FCFE 0680 0040 0000             		addi.l	#$400000,d0
0001FD04 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FD08                            
0001FD08 4E75                       		rts	
0001FD0A                            
0001FD0A                            ; End of function Hud_Score
0001FD0A                            ; End of function Hud_Score
0001FD0A                            
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            ; Subroutine to	load countdown numbers on the continue screen
0001FD0A                            ; ---------------------------------------------------------------------------
0001FD0A                            
0001FD0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD0A                            
0001FD0A                            
0001FD0A                            ContScrCounter:
0001FD14 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FD1A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FD20 7C01                       		moveq	#1,d6
0001FD22 7800                       		moveq	#0,d4
0001FD24 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FD28                            
0001FD28                            ContScr_Loop:
0001FD28 7400                       		moveq	#0,d2
0001FD2A 261A                       		move.l	(a2)+,d3
0001FD2C                            
0001FD2C                            loc_1C95A:
0001FD2C 9283                       		sub.l	d3,d1
0001FD2E 6500                       		blo.s	loc_1C962
0001FD30 5242                       		addq.w	#1,d2
0001FD32 60F8                       		bra.s	loc_1C95A
0001FD34                            ; ===========================================================================
0001FD34                            
0001FD34                            loc_1C962:
0001FD34 D283                       		add.l	d3,d1
0001FD36 ED4A                       		lsl.w	#6,d2
0001FD38 47F1 2000                  		lea	(a1,d2.w),a3
0001FD3C 2C9B                       		move.l	(a3)+,(a6)
0001FD3E 2C9B                       		move.l	(a3)+,(a6)
0001FD40 2C9B                       		move.l	(a3)+,(a6)
0001FD42 2C9B                       		move.l	(a3)+,(a6)
0001FD44 2C9B                       		move.l	(a3)+,(a6)
0001FD46 2C9B                       		move.l	(a3)+,(a6)
0001FD48 2C9B                       		move.l	(a3)+,(a6)
0001FD4A 2C9B                       		move.l	(a3)+,(a6)
0001FD4C 2C9B                       		move.l	(a3)+,(a6)
0001FD4E 2C9B                       		move.l	(a3)+,(a6)
0001FD50 2C9B                       		move.l	(a3)+,(a6)
0001FD52 2C9B                       		move.l	(a3)+,(a6)
0001FD54 2C9B                       		move.l	(a3)+,(a6)
0001FD56 2C9B                       		move.l	(a3)+,(a6)
0001FD58 2C9B                       		move.l	(a3)+,(a6)
0001FD5A 2C9B                       		move.l	(a3)+,(a6)
0001FD5C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FD60                            
0001FD60 4E75                       		rts	
0001FD62                            ; End of function ContScrCounter
0001FD62                            
0001FD62                            ; ===========================================================================
0001FD62                            
0001FD62                            		include	"_inc\HUD (part 2).asm"
0001FD62                            ; ---------------------------------------------------------------------------
0001FD62                            ; HUD counter sizes
0001FD62                            ; ---------------------------------------------------------------------------
0001FD62 0001 86A0                  Hud_100000:	dc.l 100000
0001FD66 0000 2710                  Hud_10000:	dc.l 10000
0001FD6A 0000 03E8                  Hud_1000:	dc.l 1000
0001FD6E 0000 0064                  Hud_100:	dc.l 100
0001FD72 0000 000A                  Hud_10:		dc.l 10
0001FD76 0000 0001                  Hud_1:		dc.l 1
0001FD7A                            
0001FD7A                            ; ---------------------------------------------------------------------------
0001FD7A                            ; Subroutine to	load time numbers patterns
0001FD7A                            ; ---------------------------------------------------------------------------
0001FD7A                            
0001FD7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD7A                            
0001FD7A                            
0001FD7A                            Hud_Mins:
0001FD7A 45F9 0001 FD76             		lea	(Hud_1).l,a2
0001FD80 7C00                       		moveq	#0,d6
0001FD82 6000                       		bra.s	loc_1C9BA
0001FD84                            ; End of function Hud_Mins
0001FD84                            
0001FD84                            
0001FD84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD84                            
0001FD84                            
0001FD84                            Hud_Secs:
0001FD84 45F9 0001 FD72             		lea	(Hud_10).l,a2
0001FD8A 7C01                       		moveq	#1,d6
0001FD8C                            
0001FD8C                            loc_1C9BA:
0001FD8C 7800                       		moveq	#0,d4
0001FD8E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD92                            
0001FD92                            Hud_TimeLoop:
0001FD92 7400                       		moveq	#0,d2
0001FD94 261A                       		move.l	(a2)+,d3
0001FD96                            
0001FD96                            loc_1C9C4:
0001FD96 9283                       		sub.l	d3,d1
0001FD98 6500                       		bcs.s	loc_1C9CC
0001FD9A 5242                       		addq.w	#1,d2
0001FD9C 60F8                       		bra.s	loc_1C9C4
0001FD9E                            ; ===========================================================================
0001FD9E                            
0001FD9E                            loc_1C9CC:
0001FD9E D283                       		add.l	d3,d1
0001FDA0 4A42                       		tst.w	d2
0001FDA2 6700                       		beq.s	loc_1C9D6
0001FDA4 383C 0001                  		move.w	#1,d4
0001FDA8                            
0001FDA8                            loc_1C9D6:
0001FDA8 ED4A                       		lsl.w	#6,d2
0001FDAA 2D40 0004                  		move.l	d0,4(a6)
0001FDAE 47F1 2000                  		lea	(a1,d2.w),a3
0001FDB2 2C9B                       		move.l	(a3)+,(a6)
0001FDB4 2C9B                       		move.l	(a3)+,(a6)
0001FDB6 2C9B                       		move.l	(a3)+,(a6)
0001FDB8 2C9B                       		move.l	(a3)+,(a6)
0001FDBA 2C9B                       		move.l	(a3)+,(a6)
0001FDBC 2C9B                       		move.l	(a3)+,(a6)
0001FDBE 2C9B                       		move.l	(a3)+,(a6)
0001FDC0 2C9B                       		move.l	(a3)+,(a6)
0001FDC2 2C9B                       		move.l	(a3)+,(a6)
0001FDC4 2C9B                       		move.l	(a3)+,(a6)
0001FDC6 2C9B                       		move.l	(a3)+,(a6)
0001FDC8 2C9B                       		move.l	(a3)+,(a6)
0001FDCA 2C9B                       		move.l	(a3)+,(a6)
0001FDCC 2C9B                       		move.l	(a3)+,(a6)
0001FDCE 2C9B                       		move.l	(a3)+,(a6)
0001FDD0 2C9B                       		move.l	(a3)+,(a6)
0001FDD2 0680 0040 0000             		addi.l	#$400000,d0
0001FDD8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FDDC                            
0001FDDC 4E75                       		rts	
0001FDDE                            ; End of function Hud_Secs
0001FDDE                            
0001FDDE                            ; ---------------------------------------------------------------------------
0001FDDE                            ; Subroutine to	load time/ring bonus numbers patterns
0001FDDE                            ; ---------------------------------------------------------------------------
0001FDDE                            
0001FDDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDDE                            
0001FDDE                            
0001FDDE                            Hud_TimeRingBonus:
0001FDDE 45F9 0001 FD6A             		lea	(Hud_1000).l,a2
0001FDE4 7C03                       		moveq	#3,d6
0001FDE6 7800                       		moveq	#0,d4
0001FDE8 43FA 0000                  		lea	Art_Hud(pc),a1
0001FDEC                            
0001FDEC                            Hud_BonusLoop:
0001FDEC 7400                       		moveq	#0,d2
0001FDEE 261A                       		move.l	(a2)+,d3
0001FDF0                            
0001FDF0                            loc_1CA1E:
0001FDF0 9283                       		sub.l	d3,d1
0001FDF2 6500                       		bcs.s	loc_1CA26
0001FDF4 5242                       		addq.w	#1,d2
0001FDF6 60F8                       		bra.s	loc_1CA1E
0001FDF8                            ; ===========================================================================
0001FDF8                            
0001FDF8                            loc_1CA26:
0001FDF8 D283                       		add.l	d3,d1
0001FDFA 4A42                       		tst.w	d2
0001FDFC 6700                       		beq.s	loc_1CA30
0001FDFE 383C 0001                  		move.w	#1,d4
0001FE02                            
0001FE02                            loc_1CA30:
0001FE02 4A44                       		tst.w	d4
0001FE04 6700                       		beq.s	Hud_ClrBonus
0001FE06 ED4A                       		lsl.w	#6,d2
0001FE08 47F1 2000                  		lea	(a1,d2.w),a3
0001FE0C 2C9B                       		move.l	(a3)+,(a6)
0001FE0E 2C9B                       		move.l	(a3)+,(a6)
0001FE10 2C9B                       		move.l	(a3)+,(a6)
0001FE12 2C9B                       		move.l	(a3)+,(a6)
0001FE14 2C9B                       		move.l	(a3)+,(a6)
0001FE16 2C9B                       		move.l	(a3)+,(a6)
0001FE18 2C9B                       		move.l	(a3)+,(a6)
0001FE1A 2C9B                       		move.l	(a3)+,(a6)
0001FE1C 2C9B                       		move.l	(a3)+,(a6)
0001FE1E 2C9B                       		move.l	(a3)+,(a6)
0001FE20 2C9B                       		move.l	(a3)+,(a6)
0001FE22 2C9B                       		move.l	(a3)+,(a6)
0001FE24 2C9B                       		move.l	(a3)+,(a6)
0001FE26 2C9B                       		move.l	(a3)+,(a6)
0001FE28 2C9B                       		move.l	(a3)+,(a6)
0001FE2A 2C9B                       		move.l	(a3)+,(a6)
0001FE2C                            
0001FE2C                            loc_1CA5A:
0001FE2C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FE30                            
0001FE30 4E75                       		rts	
0001FE32                            ; ===========================================================================
0001FE32                            
0001FE32                            Hud_ClrBonus:
0001FE32 7A0F                       		moveq	#$F,d5
0001FE34                            
0001FE34                            Hud_ClrBonusLoop:
0001FE34 2CBC 0000 0000             		move.l	#0,(a6)
0001FE3A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FE3E                            
0001FE3E 60EC                       		bra.s	loc_1CA5A
0001FE40                            ; End of function Hud_TimeRingBonus
0001FE40                            
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FE40                            ; ---------------------------------------------------------------------------
0001FE40                            
0001FE40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE40                            
0001FE40                            
0001FE40                            Hud_Lives:
0001FE40 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FE46 7200                       		moveq	#0,d1
0001FE48 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FE4C 45F9 0001 FD72             		lea	(Hud_10).l,a2
0001FE52 7C01                       		moveq	#1,d6
0001FE54 7800                       		moveq	#0,d4
0001FE56 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FE5A                            
0001FE5A                            Hud_LivesLoop:
0001FE5A 2D40 0004                  		move.l	d0,4(a6)
0001FE5E 7400                       		moveq	#0,d2
0001FE60 261A                       		move.l	(a2)+,d3
0001FE62                            
0001FE62                            loc_1CA90:
0001FE62 9283                       		sub.l	d3,d1
0001FE64 6500                       		bcs.s	loc_1CA98
0001FE66 5242                       		addq.w	#1,d2
0001FE68 60F8                       		bra.s	loc_1CA90
0001FE6A                            ; ===========================================================================
0001FE6A                            
0001FE6A                            loc_1CA98:
0001FE6A D283                       		add.l	d3,d1
0001FE6C 4A42                       		tst.w	d2
0001FE6E 6700                       		beq.s	loc_1CAA2
0001FE70 383C 0001                  		move.w	#1,d4
0001FE74                            
0001FE74                            loc_1CAA2:
0001FE74 4A44                       		tst.w	d4
0001FE76 6700                       		beq.s	Hud_ClrLives
0001FE78                            
0001FE78                            loc_1CAA6:
0001FE78 EB4A                       		lsl.w	#5,d2
0001FE7A 47F1 2000                  		lea	(a1,d2.w),a3
0001FE7E 2C9B                       		move.l	(a3)+,(a6)
0001FE80 2C9B                       		move.l	(a3)+,(a6)
0001FE82 2C9B                       		move.l	(a3)+,(a6)
0001FE84 2C9B                       		move.l	(a3)+,(a6)
0001FE86 2C9B                       		move.l	(a3)+,(a6)
0001FE88 2C9B                       		move.l	(a3)+,(a6)
0001FE8A 2C9B                       		move.l	(a3)+,(a6)
0001FE8C 2C9B                       		move.l	(a3)+,(a6)
0001FE8E                            
0001FE8E                            loc_1CABC:
0001FE8E 0680 0040 0000             		addi.l	#$400000,d0
0001FE94 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001FE98                            
0001FE98 4E75                       		rts	
0001FE9A                            ; ===========================================================================
0001FE9A                            
0001FE9A                            Hud_ClrLives:
0001FE9A 4A46                       		tst.w	d6
0001FE9C 67DA                       		beq.s	loc_1CAA6
0001FE9E 7A07                       		moveq	#7,d5
0001FEA0                            
0001FEA0                            Hud_ClrLivesLoop:
0001FEA0 2CBC 0000 0000             		move.l	#0,(a6)
0001FEA6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001FEAA 60E2                       		bra.s	loc_1CABC
0001FEAC                            ; End of function Hud_Lives
0001FEAC                            ; End of function Hud_Lives
0001FEAC                            
0001FEAC                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
000201AC                            		even
000201AC                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
000202EC                            		even
000202EC                            
000202EC                            		include	"_incObj\DebugMode.asm"
000202EC                            ; ---------------------------------------------------------------------------
000202EC                            ; When debug mode is currently in use
000202EC                            ; ---------------------------------------------------------------------------
000202EC                            
000202EC                            DebugMode:
000202EC 7000                       		moveq	#0,d0
000202EE 1038 FE08                  		move.b	(v_debuguse).w,d0
000202F2 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000202F6 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000202FA                            ; ===========================================================================
000202FA 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000202FC 0000                       		dc.w Debug_Action-Debug_Index
000202FE                            ; ===========================================================================
000202FE                            
000202FE                            Debug_Main:	; Routine 0
000202FE 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020302 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020308 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002030E 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020314 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
0002031A 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00020320 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020326 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0002032C 117C 0000 001A             		move.b	#0,obFrame(a0)
00020332 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020338 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0002033E 6600                       		bne.s	@islevel	; if not, branch
00020340                            
00020340 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020346 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0002034C 7006                       		moveq	#6,d0		; use 6th debug	item list
0002034E 6000                       		bra.s	@selectlist
00020350                            ; ===========================================================================
00020350                            
00020350                            @islevel:
00020350 7000                       		moveq	#0,d0
00020352 1038 FE10                  		move.b	(v_zone).w,d0
00020356                            
00020356                            @selectlist:
00020356 45F9 0000 0000             		lea	(DebugList).l,a2
0002035C D040                       		add.w	d0,d0
0002035E D4F2 0000                  		adda.w	(a2,d0.w),a2
00020362 3C1A                       		move.w	(a2)+,d6
00020364 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020368 6200                       		bhi.s	@noreset	; if not, branch
0002036A 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
00020370                            
00020370                            	@noreset:
00020370 6100 0000                  		bsr.w	Debug_ShowItem
00020374 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0002037A 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
00020380                            
00020380                            Debug_Action:	; Routine 2
00020380 7006                       		moveq	#6,d0
00020382 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020388 6700                       		beq.s	@isntlevel
0002038A                            
0002038A 7000                       		moveq	#0,d0
0002038C 1038 FE10                  		move.b	(v_zone).w,d0
00020390                            
00020390                            	@isntlevel:
00020390 45F9 0000 0000             		lea	(DebugList).l,a2
00020396 D040                       		add.w	d0,d0
00020398 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002039C 3C1A                       		move.w	(a2)+,d6
0002039E 6100 0000                  		bsr.w	Debug_Control
000203A2 4EF9 0000 F426             		jmp	(DisplaySprite).l
000203A8                            
000203A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000203A8                            
000203A8                            
000203A8                            Debug_Control:
000203A8 7800                       		moveq	#0,d4
000203AA 323C 0001                  		move.w	#1,d1
000203AE 1838 F605                  		move.b	(v_jpadpress1).w,d4
000203B2 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
000203B6 6600                       		bne.s	@dirpressed	; if yes, branch
000203B8                            
000203B8 1038 F604                  		move.b	(v_jpadhold1).w,d0
000203BC 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
000203C0 6600                       		bne.s	@dirheld	; if yes, branch
000203C2                            
000203C2 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000203C8 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000203CE 6000 0000                  		bra.w	Debug_ChgItem
000203D2                            ; ===========================================================================
000203D2                            
000203D2                            @dirheld:
000203D2 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000203D6 6600                       		bne.s	loc_1D01C
000203D8 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000203DE 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000203E2 6600                       		bne.s	@dirpressed
000203E4 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000203EA                            
000203EA                            @dirpressed:
000203EA 1838 F604                  		move.b	(v_jpadhold1).w,d4
000203EE                            
000203EE                            loc_1D01C:
000203EE 7200                       		moveq	#0,d1
000203F0 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000203F4 5241                       		addq.w	#1,d1
000203F6 4841                       		swap	d1
000203F8 E881                       		asr.l	#4,d1
000203FA 2428 000C                  		move.l	obY(a0),d2
000203FE 2628 0008                  		move.l	obX(a0),d3
00020402 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020406 6700                       		beq.s	loc_1D03C	; if not, branch
00020408 9481                       		sub.l	d1,d2
0002040A 6400                       		bcc.s	loc_1D03C
0002040C 7400                       		moveq	#0,d2
0002040E                            
0002040E                            loc_1D03C:
0002040E 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020412 6700                       		beq.s	loc_1D052	; if not, branch
00020414 D481                       		add.l	d1,d2
00020416 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002041C 6500                       		bcs.s	loc_1D052
0002041E 243C 07FF 0000             		move.l	#$7FF0000,d2
00020424                            
00020424                            loc_1D052:
00020424 0804 0002                  		btst	#bitL,d4
00020428 6700                       		beq.s	loc_1D05E
0002042A 9681                       		sub.l	d1,d3
0002042C 6400                       		bcc.s	loc_1D05E
0002042E 7600                       		moveq	#0,d3
00020430                            
00020430                            loc_1D05E:
00020430 0804 0003                  		btst	#bitR,d4
00020434 6700                       		beq.s	loc_1D066
00020436 D681                       		add.l	d1,d3
00020438                            
00020438                            loc_1D066:
00020438 2142 000C                  		move.l	d2,obY(a0)
0002043C 2143 0008                  		move.l	d3,obX(a0)
00020440                            
00020440                            Debug_ChgItem:
00020440 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020446 6700                       		beq.s	@createitem	; if not, branch
00020448 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002044E 6700                       		beq.s	@nextitem	; if not, branch
00020450 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00020454 6400                       		bcc.s	@display
00020456 DD38 FE06                  		add.b	d6,(v_debugitem).w
0002045A 6000                       		bra.s	@display
0002045C                            ; ===========================================================================
0002045C                            
0002045C                            @nextitem:
0002045C 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00020462 6700                       		beq.s	@createitem	; if not, branch
00020464 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020468 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0002046C 6200                       		bhi.s	@display
0002046E 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
00020474                            
00020474                            	@display:
00020474 6000 0000                  		bra.w	Debug_ShowItem
00020478                            ; ===========================================================================
00020478                            
00020478                            @createitem:
00020478 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002047E 6700                       		beq.s	@backtonormal	; if not, branch
00020480 4EB9 0000 F9C0             		jsr	(FindFreeObj).l
00020486 6600                       		bne.s	@backtonormal
00020488 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002048E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020494 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020498 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002049E 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
000204A4 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
000204AA 7000                       		moveq	#0,d0
000204AC 1038 FE06                  		move.b	(v_debugitem).w,d0
000204B0 E748                       		lsl.w	#3,d0
000204B2 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
000204B8 4E75                       		rts	
000204BA                            ; ===========================================================================
000204BA                            
000204BA                            @backtonormal:
000204BA 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
000204C0 6700                       		beq.s	@stayindebug	; if not, branch
000204C2 7000                       		moveq	#0,d0
000204C4 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
000204C8 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000204D0 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000204D6 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000204DA 3140 000A                  		move.w	d0,obX+2(a0)
000204DE 3140 000E                  		move.w	d0,obY+2(a0)
000204E2 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000204E8 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000204EE 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000204F4 6600                       		bne.s	@stayindebug	; if not, branch
000204F6                            
000204F6 4278 F780                  		clr.w	(v_ssangle).w
000204FA 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
00020500 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020508 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002050E 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020514 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
0002051A 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
00020520                            
00020520                            	@stayindebug:
00020520 4E75                       		rts	
00020522                            ; End of function Debug_Control
00020522                            
00020522                            
00020522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020522                            
00020522                            
00020522                            Debug_ShowItem:
00020522 7000                       		moveq	#0,d0
00020524 1038 FE06                  		move.b	(v_debugitem).w,d0
00020528 E748                       		lsl.w	#3,d0
0002052A 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
00020530 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020536 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0002053C 4E75                       		rts	
0002053E                            ; End of function Debug_ShowItem
0002053E                            ; End of function Debug_ShowItem
0002053E                            		include	"_inc\DebugList.asm"
0002053E                            ; ---------------------------------------------------------------------------
0002053E                            ; Debug	mode item lists
0002053E                            ; ---------------------------------------------------------------------------
0002053E                            DebugList:
0002053E 0000                       	dc.w @GHZ-DebugList
00020540 0000                       	dc.w @LZ-DebugList
00020542 0000                       	dc.w @MZ-DebugList
00020544 0000                       	dc.w @SLZ-DebugList
00020546 0000                       	dc.w @SYZ-DebugList
00020548 0000                       	dc.w @SBZ-DebugList
0002054A 0000                       	dc.w @Ending-DebugList
0002054C                            
0002054C                            dbug:	macro map,object,subtype,frame,vram
0002054C                            	dc.l map+(object<<24)
0002054C                            	dc.b subtype,frame
0002054C                            	dc.w vram
0002054C                            	endm
0002054C                            
0002054C                            @GHZ:
0002054C 0000                       	dc.w (@GHZend-@GHZ-2)/8
0002054E                            
0002054E                            ;		mappings	object		subtype	frame	VRAM setting
0002054E 2500 BA46 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020556 2600 C1F0 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002055E 1F00 AE26 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020566 2200 B2B0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002056E 2B00 C992 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020576 3600 EDD0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002057E 1800 97CC 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020586 3B00 EEF6 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002058E 4001 15B8 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020596 4100 FC52 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002059E 4200 FE78 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
000205A6 4401 0186 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
000205AE 7901 A048 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000205B6 4B00 BA96 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
000205BE 7D01 A20A 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
000205C6                            	@GHZend:
000205C6                            
000205C6                            @LZ:
000205C6 0000                       	dc.w (@LZend-@LZ-2)/8
000205C8                            
000205C8                            ;		mappings	object		subtype	frame	VRAM setting
000205C8 2500 BA46 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000205D0 2600 C1F0 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000205D8 4100 FC52 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000205E0 2C00 CA38 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000205E8 2D00 CC24 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000205F0 1601 3F7A 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000205F8 1601 3F7A 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
00020600 3300 E0A2 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020608 3200 DC62 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020610 3600 EDD0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020618 5201 2050 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
00020620 6101 41A2 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00020628 6101 41A2 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
00020630 6101 41A2 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00020638 6201 42F6 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
00020640 6101 41A2 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00020648 6101 41A2 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
00020650 6301 4658 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020658 6001 3EC4 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
00020660 6401 49A6 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020668 6501 4B2E 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
00020670 6501 4B2E 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020678 0B01 3310 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
00020680 0C01 33E0 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020688 7901 A048 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020690                            	@LZend:
00020690                            
00020690                            @MZ:
00020690 0000                       	dc.w (@MZend-@MZ-2)/8
00020692                            
00020692                            ;		mappings	object		subtype	frame	VRAM setting
00020692 2500 BA46 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002069A 2600 C1F0 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206A2 2200 B2B0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206AA 3600 EDD0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206B2 4100 FC52 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000206BA 1300 D132 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
000206C2 4601 0836 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
000206CA 6E01 90E4 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000206D2 6A01 8A8E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000206DA 3300 E0A2 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000206E2 1E00 A53E 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000206EA 5101 1D76 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000206F2 5201 1FFA 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000206FA 5300 9E0E 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020702 5401 111E 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
0002070A 5501 21EE 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020712 7801 9CB4 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002071A 7901 A048 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020722                            	@MZend:
00020722                            
00020722                            @SLZ:
00020722 0000                       	dc.w (@SLZend-@SLZ-2)/8
00020724                            
00020724                            ;		mappings	object		subtype	frame	VRAM setting
00020724 2500 BA46 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002072C 2600 C1F0 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020734 5901 2D38 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0002073C 5300 9E0E 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00020744 1800 982A 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0002074C 5A01 2E72 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00020754 5B01 302A 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0002075C 5D01 35FE 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020764 5E01 3990 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0002076C 4100 FC52 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020774 1300 D132 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0002077C 1C00 9F40 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020784 5F01 3C0E 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0002078C 6001 3EC4 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020794 7901 A048 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002079C                            	@SLZend:
0002079C                            
0002079C                            @SYZ:
0002079C 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002079E                            
0002079E                            ;		mappings	object		subtype	frame	VRAM setting
0002079E 2500 BA46 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207A6 2600 C1F0 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000207AE 3600 EDD0 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000207B6 4100 FC52 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000207BE 4301 00D8 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
000207C6 1201 08B4 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000207CE 4701 0A58 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
000207D6 1F00 AE26 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000207DE 2200 B2B0 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000207E6 5001 1848 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
000207EE 1800 9818 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
000207F6 5601 26F8 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
000207FE 3200 DC62 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020806 7801 9CB4 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002080E 7901 A048 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020816                            	@SYZend:
00020816                            
00020816                            @SBZ:
00020816 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020818                            
00020818                            ;		mappings	object		subtype	frame	VRAM setting
00020818 2500 BA46 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020820 2600 C1F0 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020828 5F01 3C0E 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020830 6001 3EC4 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020838 7801 9CB4 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020840 1501 2A94 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020848 6701 857C E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020850 5201 1FFA 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020858 3200 DC62 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020860 6901 87D6 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020868 6901 8830 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020870 6A01 8A8E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020878 5300 9E0E 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020880 5201 1FFA 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020888 6B01 8E5E 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020890 2A00 A0D0 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020898 6B01 8E5E 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
000208A0 6A01 8A8E 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
000208A8 6B01 8E5E 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
000208B0 6A01 8A8E 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
000208B8 6B01 8E5E 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
000208C0 6C01 902E 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
000208C8 6D01 0528 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
000208D0 6D01 0528 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
000208D8 6E01 90E4 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000208E0 7001 952A 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
000208E8 7101 34A4 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
000208F0 1E00 A53E 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000208F8 7901 A048 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020900                            	@SBZend:
00020900                            
00020900                            @Ending:
00020900 0000                       	dc.w (@Endingend-@Ending-2)/8
00020902                            
00020902                            ;		mappings	object		subtype	frame	VRAM setting
00020902 2500 BA46 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002090A 2500 BA46 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020912                            	@Endingend:
00020912                            
00020912                            	even
00020912                            	even
00020912                            		include	"_inc\LevelHeaders.asm"
00020912                            ; ---------------------------------------------------------------------------
00020912                            ; Level Headers
00020912                            ; ---------------------------------------------------------------------------
00020912                            
00020912                            LevelHeaders:
00020912                            
00020912                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020912                            	dc.l (plc1<<24)+lvlgfx
00020912                            	dc.l (plc2<<24)+sixteen
00020912                            	dc.l twofivesix
00020912                            	dc.b 0, music, pal, pal
00020912                            	endm
00020912                            
00020912                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020912                            ; music (unused), palette (unused), palette
00020912                            
00020912                            ;		1st PLC				2nd PLC				256x256 data			palette
00020912                            ;				level gfx*			16x16 data			music*
00020912                            
00020912 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020922 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020932 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020942 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020952 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020962 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020972 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020982                            	even
00020982                            
00020982                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020982                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020982                            		include	"_inc\Pattern Load Cues.asm"
00020982                            ; ---------------------------------------------------------------------------
00020982                            ; Pattern load cues
00020982                            ; ---------------------------------------------------------------------------
00020982                            ArtLoadCues:
00020982                            
00020982 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020984 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020986 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020988 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
0002098A                            PLC_Levels:
0002098A 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0002098C 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0002098E 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020990 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020992 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020994 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020996 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020998 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
0002099A 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0002099C 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0002099E 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
000209A0 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
000209A2 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
000209A4 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
000209A6 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
000209A8 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
000209AA 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
000209AC                            PLC_Animals:
000209AC 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
000209AE 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
000209B0 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
000209B2 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
000209B4 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
000209B6 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
000209B8 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
000209BA 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
000209BC 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
000209BE 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
000209C0 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
000209C2 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
000209C4                            
000209C4                            plcm:	macro gfx,vram
000209C4                            	dc.l gfx
000209C4                            	dc.w vram
000209C4                            	endm
000209C4                            
000209C4                            ; ---------------------------------------------------------------------------
000209C4                            ; Pattern load cues - standard block 1
000209C4                            ; ---------------------------------------------------------------------------
000209C4 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
000209C6 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
000209CC 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
000209D2 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
000209D8 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
000209DE 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
000209E4                            	PLC_Mainend:
000209E4                            ; ---------------------------------------------------------------------------
000209E4                            ; Pattern load cues - standard block 2
000209E4                            ; ---------------------------------------------------------------------------
000209E4 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
000209E6 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
000209EC                            	PLC_Main2end:
000209EC                            ; ---------------------------------------------------------------------------
000209EC                            ; Pattern load cues - explosion
000209EC                            ; ---------------------------------------------------------------------------
000209EC 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
000209EE 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
000209F4                            	PLC_Explodeend:
000209F4                            ; ---------------------------------------------------------------------------
000209F4                            ; Pattern load cues - game/time	over
000209F4                            ; ---------------------------------------------------------------------------
000209F4 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
000209F6 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
000209FC                            	PLC_GameOverend:
000209FC                            ; ---------------------------------------------------------------------------
000209FC                            ; Pattern load cues - Green Hill
000209FC                            ; ---------------------------------------------------------------------------
000209FC 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
000209FE 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020A04 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020A0A 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020A10 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020A16 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020A1C 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020A22 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020A28 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020A2E 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020A34 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020A3A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020A40 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020A46                            
00020A46 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020A48 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020A4E 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020A54 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020A5A 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020A60 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020A66 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020A6C                            	PLC_GHZ2end:
00020A6C                            ; ---------------------------------------------------------------------------
00020A6C                            ; Pattern load cues - Labyrinth
00020A6C                            ; ---------------------------------------------------------------------------
00020A6C 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020A6E 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020A74 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
00020A7A                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020A7A 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020A80 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020A86 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020A8C 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020A92 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020A98 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020A9E 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020AA4                            
00020AA4 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020AA6 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020AAC 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020AB2                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00020AB2                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020AB2 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020AB8 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020ABE 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020AC4 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020ACA 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020AD0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020AD6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020ADC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020AE2                            	PLC_LZ2end:
00020AE2                            ; ---------------------------------------------------------------------------
00020AE2                            ; Pattern load cues - Marble
00020AE2                            ; ---------------------------------------------------------------------------
00020AE2 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020AE4 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020AEA 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020AF0 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020AF6 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020AFC 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020B02 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020B08 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020B0E 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020B14 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020B1A 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020B20                            
00020B20 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020B22 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020B28 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020B2E                            		;plcm	Nem_MzSwitch, $A260	; switch
00020B2E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B34 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B3A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B40 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020B46 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020B4C                            	PLC_MZ2end:
00020B4C                            ; ---------------------------------------------------------------------------
00020B4C                            ; Pattern load cues - Star Light
00020B4C                            ; ---------------------------------------------------------------------------
00020B4C 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020B4E 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020B54 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020B5A 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020B60 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020B66 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020B6C 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020B72 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020B78 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020B7E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020B84 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020B8A                            
00020B8A 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020B8C 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020B92 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020B98 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020B9E 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020BA4 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020BAA 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020BB0                            	PLC_SLZ2end:
00020BB0                            ; ---------------------------------------------------------------------------
00020BB0                            ; Pattern load cues - Spring Yard
00020BB0                            ; ---------------------------------------------------------------------------
00020BB0 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020BB2 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020BB8                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020BB8                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020BB8 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00020BBE                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020BBE 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020BC4 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020BCA 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020BD0 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
00020BD6 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00020BDC                            
00020BDC 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020BDE                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020BDE 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020BE4 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020BEA 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020BF0                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020BF0 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
00020BF6                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020BF6 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020BFC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C02 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C08 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C0E                            	PLC_SYZ2end:
00020C0E                            ; ---------------------------------------------------------------------------
00020C0E                            ; Pattern load cues - Scrap Brain
00020C0E                            ; ---------------------------------------------------------------------------
00020C0E 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020C10 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020C16                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020C16                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020C16                            		;plcm	Nem_Girder, $5E00	; girder
00020C16 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020C1C 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C22                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020C22 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020C28 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020C2E 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020C34 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020C3A                            
00020C3A 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020C3C 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
00020C42 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020C48 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020C4E                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020C4E 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020C54 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020C5A 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020C60 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020C66 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C6C 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C72 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C78 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C7E                            	PLC_SBZ2end:
00020C7E                            ; ---------------------------------------------------------------------------
00020C7E                            ; Pattern load cues - title card
00020C7E                            ; ---------------------------------------------------------------------------
00020C7E 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020C80 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020C86                            	PLC_TitleCardend:
00020C86                            ; ---------------------------------------------------------------------------
00020C86                            ; Pattern load cues - act 3 boss
00020C86                            ; ---------------------------------------------------------------------------
00020C86 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020C88 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020C8E 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020C94 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020C9A 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020CA0 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020CA6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020CAC 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020CB2                            	PLC_Bossend:
00020CB2                            ; ---------------------------------------------------------------------------
00020CB2                            ; Pattern load cues - act 1/2 signpost
00020CB2                            ; ---------------------------------------------------------------------------
00020CB2 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020CB4 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020CBA 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020CC0 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020CC6                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020CC6                            	PLC_Signpostend:
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6                            ; Pattern load cues - beta special stage warp effect
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6                            PLC_Warp:
00020CC6                            	PLC_Warpend:
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6                            ; Pattern load cues - special stage
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020CC8 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020CCE 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020CD4 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020CDA 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020CE0 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020CE6 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020CEC 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020CF2 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020CF8 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020CFE 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020D04 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020D0A 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020D10 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020D16 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020D1C                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020D1C                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020D1C                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020D1C                            	PLC_SpeStageend:
00020D1C                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020D1C                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020D1C                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020D1C                            ; ---------------------------------------------------------------------------
00020D1C                            ; Pattern load cues - GHZ animals
00020D1C                            ; ---------------------------------------------------------------------------
00020D1C 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020D1E 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020D24 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020D2A                            	PLC_GHZAnimalsend:
00020D2A                            ; ---------------------------------------------------------------------------
00020D2A                            ; Pattern load cues - LZ animals
00020D2A                            ; ---------------------------------------------------------------------------
00020D2A 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020D2C 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020D32 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020D38                            	PLC_LZAnimalsend:
00020D38                            ; ---------------------------------------------------------------------------
00020D38                            ; Pattern load cues - MZ animals
00020D38                            ; ---------------------------------------------------------------------------
00020D38 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020D3A 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020D40 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020D46                            	PLC_MZAnimalsend:
00020D46                            ; ---------------------------------------------------------------------------
00020D46                            ; Pattern load cues - SLZ animals
00020D46                            ; ---------------------------------------------------------------------------
00020D46 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020D48 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020D4E 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020D54                            	PLC_SLZAnimalsend:
00020D54                            ; ---------------------------------------------------------------------------
00020D54                            ; Pattern load cues - SYZ animals
00020D54                            ; ---------------------------------------------------------------------------
00020D54 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020D56 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020D5C 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020D62                            	PLC_SYZAnimalsend:
00020D62                            ; ---------------------------------------------------------------------------
00020D62                            ; Pattern load cues - SBZ animals
00020D62                            ; ---------------------------------------------------------------------------
00020D62 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020D64 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020D6A 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020D70                            	PLC_SBZAnimalsend:
00020D70                            ; ---------------------------------------------------------------------------
00020D70                            ; Pattern load cues - special stage results screen
00020D70                            ; ---------------------------------------------------------------------------
00020D70 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020D72 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020D78 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020D7E                            	PLC_SpeStResultend:
00020D7E                            ; ---------------------------------------------------------------------------
00020D7E                            ; Pattern load cues - ending sequence
00020D7E                            ; ---------------------------------------------------------------------------
00020D7E 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020D80 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020D86 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020D8C 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020D92                            		;plcm	Nem_EndFlower, $7400	; flowers
00020D92 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020D98 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020D9E 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020DA4 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020DAA 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020DB0 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020DB6 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020DBC 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020DC2 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020DC8 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020DCE                            	PLC_Endingend:
00020DCE                            ; ---------------------------------------------------------------------------
00020DCE                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020DCE                            ; ---------------------------------------------------------------------------
00020DCE 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020DD0 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020DD6 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020DDC 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020DE2                            	PLC_TryAgainend:
00020DE2                            ; ---------------------------------------------------------------------------
00020DE2                            ; Pattern load cues - Eggman on SBZ 2
00020DE2                            ; ---------------------------------------------------------------------------
00020DE2 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020DE4 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020DEA 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020DF0 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020DF6                            	PLC_EggmanSBZ2end:
00020DF6                            ; ---------------------------------------------------------------------------
00020DF6                            ; Pattern load cues - final boss
00020DF6                            ; ---------------------------------------------------------------------------
00020DF6 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020DF8 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020DFE 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020E04 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E0A 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020E10 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E16                            	PLC_FZBossend:
00020E16                            ; ---------------------------------------------------------------------------
00020E16                            ; Pattern load cues - Eggman
00020E16                            ; ---------------------------------------------------------------------------
00020E16 0006                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E18 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E1E 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E24 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E2A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E30 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E36 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E3C                            	PLC_Eggend:
00020E3C                            		even
00020E3C                            ; ---------------------------------------------------------------------------
00020E3C                            ; Pattern load cue IDs
00020E3C                            ; ---------------------------------------------------------------------------
00020E3C =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020E3C =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020E3C =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020E3C =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020E3C =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020E3C =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020E3C =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020E3C =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020E3C =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020E3C =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020E3C =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020E3C =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020E3C =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020E3C =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020E3C =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020E3C =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020E3C =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020E3C =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020E3C =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020E3C =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020E3C =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020E3C =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020E3C =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020E3C =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020E3C =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020E3C =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020E3C =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020E3C =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020E3C =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020E3C =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020E3C =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020E3C =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020E3C =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020E3C =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020E3C                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024AB8 00                         		even		
00024AB8                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024B76                            		even
00024B76                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002501E                            		even
0002501E                            
0002501E                            Map_Sonic:	include	"_maps\Sonic.asm"
0002501E                            ; --------------------------------------------------------------------------------
0002501E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002501E                            ; --------------------------------------------------------------------------------
0002501E                            
0002501E                            SME_xy6nv:	
0002501E 0000 0000                  		dc.w SME_xy6nv_160-SME_xy6nv, SME_xy6nv_161-SME_xy6nv	
00025022 0000 0000                  		dc.w SME_xy6nv_176-SME_xy6nv, SME_xy6nv_1A4-SME_xy6nv	
00025026 0000 0000                  		dc.w SME_xy6nv_1D7-SME_xy6nv, SME_xy6nv_1EC-SME_xy6nv	
0002502A 0000 0000                  		dc.w SME_xy6nv_1FC-SME_xy6nv, SME_xy6nv_20C-SME_xy6nv	
0002502E 0000 0000                  		dc.w SME_xy6nv_221-SME_xy6nv, SME_xy6nv_22C-SME_xy6nv	
00025032 0000 0000                  		dc.w SME_xy6nv_23C-SME_xy6nv, SME_xy6nv_24C-SME_xy6nv	
00025036 0000 0000                  		dc.w SME_xy6nv_25C-SME_xy6nv, SME_xy6nv_271-SME_xy6nv	
0002503A 0000 0000                  		dc.w SME_xy6nv_281-SME_xy6nv, SME_xy6nv_2A5-SME_xy6nv	
0002503E 0000 0000                  		dc.w SME_xy6nv_2BF-SME_xy6nv, SME_xy6nv_2CA-SME_xy6nv	
00025042 0000 0000                  		dc.w SME_xy6nv_2DA-SME_xy6nv, SME_xy6nv_2EF-SME_xy6nv	
00025046 0000 0000                  		dc.w SME_xy6nv_2FA-SME_xy6nv, SME_xy6nv_30A-SME_xy6nv	
0002504A 0000 0000                  		dc.w SME_xy6nv_324-SME_xy6nv, SME_xy6nv_33E-SME_xy6nv	
0002504E 0000 0000                  		dc.w SME_xy6nv_35D-SME_xy6nv, SME_xy6nv_372-SME_xy6nv	
00025052 0000 0000                  		dc.w SME_xy6nv_382-SME_xy6nv, SME_xy6nv_39C-SME_xy6nv	
00025056 0000 0000                  		dc.w SME_xy6nv_3B1-SME_xy6nv, SME_xy6nv_3C1-SME_xy6nv	
0002505A 0000 0000                  		dc.w SME_xy6nv_3DB-SME_xy6nv, SME_xy6nv_3F0-SME_xy6nv	
0002505E 0000 0000                  		dc.w SME_xy6nv_3FB-SME_xy6nv, SME_xy6nv_406-SME_xy6nv	
00025062 0000 0000                  		dc.w SME_xy6nv_420-SME_xy6nv, SME_xy6nv_435-SME_xy6nv	
00025066 0000 0000                  		dc.w SME_xy6nv_440-SME_xy6nv, SME_xy6nv_450-SME_xy6nv	
0002506A 0000 0000                  		dc.w SME_xy6nv_460-SME_xy6nv, SME_xy6nv_47F-SME_xy6nv	
0002506E 0000 0000                  		dc.w SME_xy6nv_49E-SME_xy6nv, SME_xy6nv_4B3-SME_xy6nv	
00025072 0000 0000                  		dc.w SME_xy6nv_4C3-SME_xy6nv, SME_xy6nv_4DD-SME_xy6nv	
00025076 0000 0000                  		dc.w SME_xy6nv_4F2-SME_xy6nv, SME_xy6nv_502-SME_xy6nv	
0002507A 0000 0000                  		dc.w SME_xy6nv_51C-SME_xy6nv, SME_xy6nv_527-SME_xy6nv	
0002507E 0000 0000                  		dc.w SME_xy6nv_532-SME_xy6nv, SME_xy6nv_53D-SME_xy6nv	
00025082 0000 0000                  		dc.w SME_xy6nv_548-SME_xy6nv, SME_xy6nv_553-SME_xy6nv	
00025086 0000 0000                  		dc.w SME_xy6nv_55E-SME_xy6nv, SME_xy6nv_569-SME_xy6nv	
0002508A 0000 0000                  		dc.w SME_xy6nv_574-SME_xy6nv, SME_xy6nv_589-SME_xy6nv	
0002508E 0000 0000                  		dc.w SME_xy6nv_599-SME_xy6nv, SME_xy6nv_5A9-SME_xy6nv	
00025092 0000 0000                  		dc.w SME_xy6nv_5B9-SME_xy6nv, SME_xy6nv_5CE-SME_xy6nv	
00025096 0000 0000                  		dc.w SME_xy6nv_5DE-SME_xy6nv, SME_xy6nv_5EE-SME_xy6nv	
0002509A 0000 0000                  		dc.w SME_xy6nv_5FE-SME_xy6nv, SME_xy6nv_609-SME_xy6nv	
0002509E 0000 0000                  		dc.w SME_xy6nv_614-SME_xy6nv, SME_xy6nv_61F-SME_xy6nv	
000250A2 0000 0000                  		dc.w SME_xy6nv_62A-SME_xy6nv, SME_xy6nv_635-SME_xy6nv	
000250A6 0000 0000                  		dc.w SME_xy6nv_640-SME_xy6nv, SME_xy6nv_64B-SME_xy6nv	
000250AA 0000 0000                  		dc.w SME_xy6nv_656-SME_xy6nv, SME_xy6nv_66B-SME_xy6nv	
000250AE 0000 0000                  		dc.w SME_xy6nv_67B-SME_xy6nv, SME_xy6nv_686-SME_xy6nv	
000250B2 0000 0000                  		dc.w SME_xy6nv_696-SME_xy6nv, SME_xy6nv_6AB-SME_xy6nv	
000250B6 0000 0000                  		dc.w SME_xy6nv_6BB-SME_xy6nv, SME_xy6nv_6C6-SME_xy6nv	
000250BA 0000 0000                  		dc.w SME_xy6nv_6D6-SME_xy6nv, SME_xy6nv_6E6-SME_xy6nv	
000250BE 0000 0000                  		dc.w SME_xy6nv_6F6-SME_xy6nv, SME_xy6nv_724-SME_xy6nv	
000250C2 0000 0000                  		dc.w SME_xy6nv_752-SME_xy6nv, SME_xy6nv_762-SME_xy6nv	
000250C6 0000 0000                  		dc.w SME_xy6nv_772-SME_xy6nv, SME_xy6nv_782-SME_xy6nv	
000250CA 0000 0000                  		dc.w SME_xy6nv_79C-SME_xy6nv, SME_xy6nv_7AC-SME_xy6nv	
000250CE 0000 0000                  		dc.w SME_xy6nv_7BC-SME_xy6nv, SME_xy6nv_7D6-SME_xy6nv	
000250D2 0000 0000                  		dc.w SME_xy6nv_7F0-SME_xy6nv, SME_xy6nv_805-SME_xy6nv	
000250D6 0000 0000                  		dc.w SME_xy6nv_81A-SME_xy6nv, SME_xy6nv_82F-SME_xy6nv	
000250DA 0000 0000                  		dc.w SME_xy6nv_844-SME_xy6nv, SME_xy6nv_84A-SME_xy6nv	
000250DE 0000 0000                  		dc.w SME_xy6nv_850-SME_xy6nv, SME_xy6nv_856-SME_xy6nv	
000250E2 0000 0000                  		dc.w SME_xy6nv_85C-SME_xy6nv, SME_xy6nv_862-SME_xy6nv	
000250E6 0000 0000                  		dc.w SME_xy6nv_868-SME_xy6nv, SME_xy6nv_86E-SME_xy6nv	
000250EA 0000 0000                  		dc.w SME_xy6nv_87E-SME_xy6nv, SME_xy6nv_884-SME_xy6nv	
000250EE 0000 0000                  		dc.w SME_xy6nv_88F-SME_xy6nv, SME_xy6nv_895-SME_xy6nv	
000250F2 0000 0000                  		dc.w SME_xy6nv_8A0-SME_xy6nv, SME_xy6nv_8A6-SME_xy6nv	
000250F6 0000 0000                  		dc.w SME_xy6nv_8BB-SME_xy6nv, SME_xy6nv_8DF-SME_xy6nv	
000250FA 0000 0000                  		dc.w SME_xy6nv_8F9-SME_xy6nv, SME_xy6nv_909-SME_xy6nv	
000250FE 0000 0000                  		dc.w SME_xy6nv_923-SME_xy6nv, SME_xy6nv_938-SME_xy6nv	
00025102 0000 0000                  		dc.w SME_xy6nv_94D-SME_xy6nv, SME_xy6nv_962-SME_xy6nv	
00025106 0000 0000                  		dc.w SME_xy6nv_990-SME_xy6nv, SME_xy6nv_9A0-SME_xy6nv	
0002510A 0000 0000                  		dc.w SME_xy6nv_9B0-SME_xy6nv, SME_xy6nv_9C0-SME_xy6nv	
0002510E 0000 0000                  		dc.w SME_xy6nv_9C1-SME_xy6nv, SME_xy6nv_9EA-SME_xy6nv	
00025112 0000 0000                  		dc.w SME_xy6nv_A0E-SME_xy6nv, SME_xy6nv_A23-SME_xy6nv	
00025116 0000 0000                  		dc.w SME_xy6nv_A33-SME_xy6nv, SME_xy6nv_A43-SME_xy6nv	
0002511A 0000 0000                  		dc.w SME_xy6nv_A53-SME_xy6nv, SME_xy6nv_A5E-SME_xy6nv	
0002511E 0000 0000                  		dc.w SME_xy6nv_A6E-SME_xy6nv, SME_xy6nv_A7E-SME_xy6nv	
00025122 0000 0000                  		dc.w SME_xy6nv_A8E-SME_xy6nv, SME_xy6nv_A9E-SME_xy6nv	
00025126 0000 0000                  		dc.w SME_xy6nv_AB3-SME_xy6nv, SME_xy6nv_ADC-SME_xy6nv	
0002512A 0000 0000                  		dc.w SME_xy6nv_AF1-SME_xy6nv, SME_xy6nv_B06-SME_xy6nv	
0002512E 0000 0000                  		dc.w SME_xy6nv_B20-SME_xy6nv, SME_xy6nv_B3A-SME_xy6nv	
00025132 0000 0000                  		dc.w SME_xy6nv_B45-SME_xy6nv, SME_xy6nv_B5F-SME_xy6nv	
00025136 0000 0000                  		dc.w SME_xy6nv_B6F-SME_xy6nv, SME_xy6nv_B89-SME_xy6nv	
0002513A 0000 0000                  		dc.w SME_xy6nv_B94-SME_xy6nv, SME_xy6nv_BA4-SME_xy6nv	
0002513E 0000 0000                  		dc.w SME_xy6nv_BB4-SME_xy6nv, SME_xy6nv_BC4-SME_xy6nv	
00025142 0000 0000                  		dc.w SME_xy6nv_BCF-SME_xy6nv, SME_xy6nv_BDF-SME_xy6nv	
00025146 0000 0000                  		dc.w SME_xy6nv_C17-SME_xy6nv, SME_xy6nv_C36-SME_xy6nv	
0002514A 0000 0000                  		dc.w SME_xy6nv_C46-SME_xy6nv, SME_xy6nv_C6A-SME_xy6nv	
0002514E 0000 0000                  		dc.w SME_xy6nv_C75-SME_xy6nv, SME_xy6nv_C8A-SME_xy6nv	
00025152 0000 0000                  		dc.w SME_xy6nv_C9A-SME_xy6nv, SME_xy6nv_CAA-SME_xy6nv	
00025156 0000 0000                  		dc.w SME_xy6nv_CBF-SME_xy6nv, SME_xy6nv_CC5-SME_xy6nv	
0002515A 0000 0000                  		dc.w SME_xy6nv_CCB-SME_xy6nv, SME_xy6nv_CD1-SME_xy6nv	
0002515E 0000 0000                  		dc.w SME_xy6nv_CD7-SME_xy6nv, SME_xy6nv_CE2-SME_xy6nv	
00025162 0000 0000                  		dc.w SME_xy6nv_CE8-SME_xy6nv, SME_xy6nv_CEE-SME_xy6nv	
00025166 0000 0000                  		dc.w SME_xy6nv_CF4-SME_xy6nv, SME_xy6nv_D04-SME_xy6nv	
0002516A 0000 0000                  		dc.w SME_xy6nv_D14-SME_xy6nv, SME_xy6nv_D24-SME_xy6nv	
0002516E 0000 0000                  		dc.w SME_xy6nv_D34-SME_xy6nv, SME_xy6nv_D44-SME_xy6nv	
00025172 0000 0000                  		dc.w SME_xy6nv_D6D-SME_xy6nv, SME_xy6nv_D7D-SME_xy6nv	
00025176 0000 0000                  		dc.w SME_xy6nv_D8D-SME_xy6nv, SME_xy6nv_DB1-SME_xy6nv	
0002517A 0000 0000                  		dc.w SME_xy6nv_DD5-SME_xy6nv, SME_xy6nv_DEF-SME_xy6nv	
0002517E 00                         SME_xy6nv_160:	dc.b 0	
0002517F 04                         SME_xy6nv_161:	dc.b 4	
00025180 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025185 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002518A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002518F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025194 09                         SME_xy6nv_176:	dc.b 9	
00025195 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002519A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002519F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251A4 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251A9 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251AE F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251B3 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
000251B8 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
000251BD F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000251C2 0A                         SME_xy6nv_1A4:	dc.b $A	
000251C3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251C8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000251CD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251D2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251D7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251DC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251E1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000251E6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000251EB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000251F0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000251F5 04                         SME_xy6nv_1D7:	dc.b 4	
000251F6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000251FB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025200 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
00025205 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
0002520A 03                         SME_xy6nv_1EC:	dc.b 3	
0002520B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025210 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025215 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002521A 03                         SME_xy6nv_1FC:	dc.b 3	
0002521B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025220 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025225 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002522A 04                         SME_xy6nv_20C:	dc.b 4	
0002522B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025230 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025235 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002523A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002523F 02                         SME_xy6nv_221:	dc.b 2	
00025240 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025245 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002524A 03                         SME_xy6nv_22C:	dc.b 3	
0002524B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025250 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025255 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002525A 03                         SME_xy6nv_23C:	dc.b 3	
0002525B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025260 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025265 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002526A 03                         SME_xy6nv_24C:	dc.b 3	
0002526B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025270 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025275 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002527A 04                         SME_xy6nv_25C:	dc.b 4	
0002527B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025280 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025285 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002528A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002528F 03                         SME_xy6nv_271:	dc.b 3	
00025290 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025295 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002529A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002529F 07                         SME_xy6nv_281:	dc.b 7	
000252A0 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
000252A5 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
000252AA 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
000252AF F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
000252B4 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
000252B9 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
000252BE F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000252C3 05                         SME_xy6nv_2A5:	dc.b 5	
000252C4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000252C9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000252CE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000252D3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000252D8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000252DD 02                         SME_xy6nv_2BF:	dc.b 2	
000252DE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000252E3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000252E8 03                         SME_xy6nv_2CA:	dc.b 3	
000252E9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000252EE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000252F3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000252F8 04                         SME_xy6nv_2DA:	dc.b 4	
000252F9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000252FE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
00025303 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
00025308 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
0002530D 02                         SME_xy6nv_2EF:	dc.b 2	
0002530E EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
00025313 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
00025318 03                         SME_xy6nv_2FA:	dc.b 3	
00025319 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
0002531E FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025323 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025328 05                         SME_xy6nv_30A:	dc.b 5	
00025329 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002532E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025333 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025338 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002533D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025342 05                         SME_xy6nv_324:	dc.b 5	
00025343 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025348 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002534D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025352 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025357 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002535C 06                         SME_xy6nv_33E:	dc.b 6	
0002535D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025362 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025367 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002536C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025371 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025376 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002537B 04                         SME_xy6nv_35D:	dc.b 4	
0002537C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025381 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025386 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002538B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025390 03                         SME_xy6nv_372:	dc.b 3	
00025391 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025396 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002539B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
000253A0 05                         SME_xy6nv_382:	dc.b 5	
000253A1 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
000253A6 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
000253AB FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
000253B0 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
000253B5 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
000253BA 04                         SME_xy6nv_39C:	dc.b 4	
000253BB EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000253C0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000253C5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000253CA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000253CF 03                         SME_xy6nv_3B1:	dc.b 3	
000253D0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000253D5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000253DA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000253DF 05                         SME_xy6nv_3C1:	dc.b 5	
000253E0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000253E5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000253EA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000253EF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000253F4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000253F9 04                         SME_xy6nv_3DB:	dc.b 4	
000253FA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000253FF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
00025404 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
00025409 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
0002540E 02                         SME_xy6nv_3F0:	dc.b 2	
0002540F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025414 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
00025419 02                         SME_xy6nv_3FB:	dc.b 2	
0002541A F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
0002541F F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025424 05                         SME_xy6nv_406:	dc.b 5	
00025425 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002542A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002542F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025434 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025439 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002543E 04                         SME_xy6nv_420:	dc.b 4	
0002543F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025444 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025449 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002544E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025453 02                         SME_xy6nv_435:	dc.b 2	
00025454 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025459 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002545E 03                         SME_xy6nv_440:	dc.b 3	
0002545F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025464 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025469 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002546E 03                         SME_xy6nv_450:	dc.b 3	
0002546F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025474 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025479 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002547E 06                         SME_xy6nv_460:	dc.b 6	
0002547F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025484 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025489 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002548E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025493 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025498 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002549D 06                         SME_xy6nv_47F:	dc.b 6	
0002549E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000254A3 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
000254A8 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
000254AD F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
000254B2 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
000254B7 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
000254BC 04                         SME_xy6nv_49E:	dc.b 4	
000254BD FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000254C2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000254C7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000254CC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000254D1 03                         SME_xy6nv_4B3:	dc.b 3	
000254D2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000254D7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000254DC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000254E1 05                         SME_xy6nv_4C3:	dc.b 5	
000254E2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000254E7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000254EC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000254F1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000254F6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000254FB 04                         SME_xy6nv_4DD:	dc.b 4	
000254FC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025501 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
00025506 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
0002550B 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
00025510 03                         SME_xy6nv_4F2:	dc.b 3	
00025511 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
00025516 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
0002551B EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025520 05                         SME_xy6nv_502:	dc.b 5	
00025521 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025526 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002552B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025530 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025535 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002553A 02                         SME_xy6nv_51C:	dc.b 2	
0002553B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025540 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025545 02                         SME_xy6nv_527:	dc.b 2	
00025546 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002554B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025550 02                         SME_xy6nv_532:	dc.b 2	
00025551 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025556 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002555B 02                         SME_xy6nv_53D:	dc.b 2	
0002555C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025561 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025566 02                         SME_xy6nv_548:	dc.b 2	
00025567 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002556C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025571 02                         SME_xy6nv_553:	dc.b 2	
00025572 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025577 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002557C 02                         SME_xy6nv_55E:	dc.b 2	
0002557D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025582 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025587 02                         SME_xy6nv_569:	dc.b 2	
00025588 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002558D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025592 04                         SME_xy6nv_574:	dc.b 4	
00025593 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025598 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002559D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255A2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255A7 03                         SME_xy6nv_589:	dc.b 3	
000255A8 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
000255AD EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
000255B2 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
000255B7 03                         SME_xy6nv_599:	dc.b 3	
000255B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255C7 03                         SME_xy6nv_5A9:	dc.b 3	
000255C8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255CD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255D2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255D7 04                         SME_xy6nv_5B9:	dc.b 4	
000255D8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255DD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255E2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255E7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255EC 03                         SME_xy6nv_5CE:	dc.b 3	
000255ED FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255F2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255FC 03                         SME_xy6nv_5DE:	dc.b 3	
000255FD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025602 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025607 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002560C 03                         SME_xy6nv_5EE:	dc.b 3	
0002560D EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
00025612 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025617 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002561C 02                         SME_xy6nv_5FE:	dc.b 2	
0002561D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025622 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025627 02                         SME_xy6nv_609:	dc.b 2	
00025628 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002562D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025632 02                         SME_xy6nv_614:	dc.b 2	
00025633 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025638 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002563D 02                         SME_xy6nv_61F:	dc.b 2	
0002563E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025643 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025648 02                         SME_xy6nv_62A:	dc.b 2	
00025649 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002564E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025653 02                         SME_xy6nv_635:	dc.b 2	
00025654 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025659 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002565E 02                         SME_xy6nv_640:	dc.b 2	
0002565F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025664 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025669 02                         SME_xy6nv_64B:	dc.b 2	
0002566A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002566F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025674 04                         SME_xy6nv_656:	dc.b 4	
00025675 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002567A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002567F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025684 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025689 03                         SME_xy6nv_66B:	dc.b 3	
0002568A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002568F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025694 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025699 02                         SME_xy6nv_67B:	dc.b 2	
0002569A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002569F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256A4 03                         SME_xy6nv_686:	dc.b 3	
000256A5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256AA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256AF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256B4 04                         SME_xy6nv_696:	dc.b 4	
000256B5 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
000256BA F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
000256BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256C4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000256C9 03                         SME_xy6nv_6AB:	dc.b 3	
000256CA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256CF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256D4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256D9 02                         SME_xy6nv_6BB:	dc.b 2	
000256DA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000256DF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256E4 03                         SME_xy6nv_6C6:	dc.b 3	
000256E5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256EA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256EF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256F4 03                         SME_xy6nv_6D6:	dc.b 3	
000256F5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256FA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256FF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
00025704 03                         SME_xy6nv_6E6:	dc.b 3	
00025705 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
0002570A 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
0002570F F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
00025714 09                         SME_xy6nv_6F6:	dc.b 9	
00025715 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
0002571A F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002571F 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025724 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025729 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002572E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025733 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025738 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002573D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025742 09                         SME_xy6nv_724:	dc.b 9	
00025743 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025748 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002574D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025752 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025757 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002575C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025761 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025766 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002576B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025770 03                         SME_xy6nv_752:	dc.b 3	
00025771 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025776 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002577B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025780 03                         SME_xy6nv_762:	dc.b 3	
00025781 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025786 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002578B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025790 03                         SME_xy6nv_772:	dc.b 3	
00025791 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025796 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002579B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
000257A0 05                         SME_xy6nv_782:	dc.b 5	
000257A1 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
000257A6 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
000257AB F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
000257B0 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
000257B5 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
000257BA 03                         SME_xy6nv_79C:	dc.b 3	
000257BB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257C0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257C5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257CA 03                         SME_xy6nv_7AC:	dc.b 3	
000257CB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257D0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257D5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257DA 05                         SME_xy6nv_7BC:	dc.b 5	
000257DB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000257E0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000257E5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000257EA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257EF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257F4 05                         SME_xy6nv_7D6:	dc.b 5	
000257F5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000257FA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000257FF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
00025804 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
00025809 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
0002580E 04                         SME_xy6nv_7F0:	dc.b 4	
0002580F F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
00025814 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
00025819 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
0002581E F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025823 04                         SME_xy6nv_805:	dc.b 4	
00025824 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025829 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002582E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025833 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025838 04                         SME_xy6nv_81A:	dc.b 4	
00025839 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002583E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025843 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025848 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002584D 04                         SME_xy6nv_82F:	dc.b 4	
0002584E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025853 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025858 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002585D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025862 01                         SME_xy6nv_844:	dc.b 1	
00025863 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025868 01                         SME_xy6nv_84A:	dc.b 1	
00025869 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002586E 01                         SME_xy6nv_850:	dc.b 1	
0002586F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025874 01                         SME_xy6nv_856:	dc.b 1	
00025875 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002587A 01                         SME_xy6nv_85C:	dc.b 1	
0002587B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025880 01                         SME_xy6nv_862:	dc.b 1	
00025881 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025886 01                         SME_xy6nv_868:	dc.b 1	
00025887 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002588C 03                         SME_xy6nv_86E:	dc.b 3	
0002588D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025892 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025897 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002589C 01                         SME_xy6nv_87E:	dc.b 1	
0002589D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258A2 02                         SME_xy6nv_884:	dc.b 2	
000258A3 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
000258A8 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
000258AD 01                         SME_xy6nv_88F:	dc.b 1	
000258AE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258B3 02                         SME_xy6nv_895:	dc.b 2	
000258B4 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
000258B9 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
000258BE 01                         SME_xy6nv_8A0:	dc.b 1	
000258BF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258C4 04                         SME_xy6nv_8A6:	dc.b 4	
000258C5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258CA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000258CF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258D4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000258D9 07                         SME_xy6nv_8BB:	dc.b 7	
000258DA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258DF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000258E4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000258E9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000258EE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000258F3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000258F8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000258FD 05                         SME_xy6nv_8DF:	dc.b 5	
000258FE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
00025903 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
00025908 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
0002590D F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025912 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
00025917 03                         SME_xy6nv_8F9:	dc.b 3	
00025918 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
0002591D ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025922 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025927 05                         SME_xy6nv_909:	dc.b 5	
00025928 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
0002592D E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00025932 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00025937 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
0002593C F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00025941 04                         SME_xy6nv_923:	dc.b 4	
00025942 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025947 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002594C F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025951 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025956 04                         SME_xy6nv_938:	dc.b 4	
00025957 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002595C FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025961 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025966 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002596B 04                         SME_xy6nv_94D:	dc.b 4	
0002596C EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025971 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025976 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002597B EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025980 09                         SME_xy6nv_962:	dc.b 9	
00025981 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025986 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002598B F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025990 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025995 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002599A F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
0002599F 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
000259A4 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
000259A9 FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
000259AE 03                         SME_xy6nv_990:	dc.b 3	
000259AF EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
000259B4 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
000259B9 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
000259BE 03                         SME_xy6nv_9A0:	dc.b 3	
000259BF F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000259C4 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
000259C9 EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
000259CE 03                         SME_xy6nv_9B0:	dc.b 3	
000259CF F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
000259D4 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
000259D9 F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
000259DE 00                         SME_xy6nv_9C0:	dc.b 0	
000259DF 08                         SME_xy6nv_9C1:	dc.b 8	
000259E0 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259E5 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259EA F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259EF F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259F4 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259F9 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259FE 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
00025A03 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
00025A08 07                         SME_xy6nv_9EA:	dc.b 7	
00025A09 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025A0E E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025A13 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025A18 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025A1D F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025A22 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025A27 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00025A2C 04                         SME_xy6nv_A0E:	dc.b 4	
00025A2D E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025A32 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025A37 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025A3C 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025A41 03                         SME_xy6nv_A23:	dc.b 3	
00025A42 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025A47 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025A4C 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025A51 03                         SME_xy6nv_A33:	dc.b 3	
00025A52 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A57 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A5C 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A61 03                         SME_xy6nv_A43:	dc.b 3	
00025A62 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A67 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025A6C FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025A71 02                         SME_xy6nv_A53:	dc.b 2	
00025A72 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025A77 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025A7C 03                         SME_xy6nv_A5E:	dc.b 3	
00025A7D F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A82 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025A87 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025A8C 03                         SME_xy6nv_A6E:	dc.b 3	
00025A8D F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A92 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025A97 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025A9C 03                         SME_xy6nv_A7E:	dc.b 3	
00025A9D F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025AA2 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025AA7 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025AAC 03                         SME_xy6nv_A8E:	dc.b 3	
00025AAD F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025AB2 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025AB7 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025ABC 04                         SME_xy6nv_A9E:	dc.b 4	
00025ABD E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025AC2 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025AC7 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025ACC 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025AD1 08                         SME_xy6nv_AB3:	dc.b 8	
00025AD2 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025AD7 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025ADC 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025AE1 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025AE6 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025AEB F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025AF0 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025AF5 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025AFA 04                         SME_xy6nv_ADC:	dc.b 4	
00025AFB F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025B00 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025B05 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025B0A F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025B0F 04                         SME_xy6nv_AF1:	dc.b 4	
00025B10 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025B15 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025B1A F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025B1F F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025B24 05                         SME_xy6nv_B06:	dc.b 5	
00025B25 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B2A F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025B2F 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B34 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B39 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B3E 05                         SME_xy6nv_B20:	dc.b 5	
00025B3F E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B44 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025B49 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B4E 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B53 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B58 02                         SME_xy6nv_B3A:	dc.b 2	
00025B59 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B5E 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B63 05                         SME_xy6nv_B45:	dc.b 5	
00025B64 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025B69 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025B6E F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025B73 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025B78 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025B7D 03                         SME_xy6nv_B5F:	dc.b 3	
00025B7E EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B83 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B88 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B8D 05                         SME_xy6nv_B6F:	dc.b 5	
00025B8E 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025B93 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025B98 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025B9D F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025BA2 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025BA7 02                         SME_xy6nv_B89:	dc.b 2	
00025BA8 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025BAD 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025BB2 03                         SME_xy6nv_B94:	dc.b 3	
00025BB3 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BB8 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025BBD ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025BC2 03                         SME_xy6nv_BA4:	dc.b 3	
00025BC3 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025BC8 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025BCD 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025BD2 03                         SME_xy6nv_BB4:	dc.b 3	
00025BD3 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BD8 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025BDD ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025BE2 02                         SME_xy6nv_BC4:	dc.b 2	
00025BE3 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025BE8 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025BED 03                         SME_xy6nv_BCF:	dc.b 3	
00025BEE E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025BF3 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025BF8 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025BFD 0B                         SME_xy6nv_BDF:	dc.b $B	
00025BFE E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C03 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C08 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025C0D 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025C12 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025C17 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025C1C F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025C21 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025C26 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025C2B 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025C30 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025C35 06                         SME_xy6nv_C17:	dc.b 6	
00025C36 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C3B E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C40 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025C45 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025C4A 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025C4F 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025C54 03                         SME_xy6nv_C36:	dc.b 3	
00025C55 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025C5A FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025C5F 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025C64 07                         SME_xy6nv_C46:	dc.b 7	
00025C65 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025C6A 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025C6F F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025C74 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025C79 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025C7E F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025C83 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025C88 02                         SME_xy6nv_C6A:	dc.b 2	
00025C89 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025C8E F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025C93 04                         SME_xy6nv_C75:	dc.b 4	
00025C94 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C99 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025C9E F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025CA3 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025CA8 03                         SME_xy6nv_C8A:	dc.b 3	
00025CA9 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025CAE F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025CB3 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025CB8 03                         SME_xy6nv_C9A:	dc.b 3	
00025CB9 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025CBE F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025CC3 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025CC8 04                         SME_xy6nv_CAA:	dc.b 4	
00025CC9 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025CCE F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025CD3 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025CD8 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025CDD 01                         SME_xy6nv_CBF:	dc.b 1	
00025CDE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CE3 01                         SME_xy6nv_CC5:	dc.b 1	
00025CE4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CE9 01                         SME_xy6nv_CCB:	dc.b 1	
00025CEA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CEF 01                         SME_xy6nv_CD1:	dc.b 1	
00025CF0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CF5 02                         SME_xy6nv_CD7:	dc.b 2	
00025CF6 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025CFB F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025D00 01                         SME_xy6nv_CE2:	dc.b 1	
00025D01 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025D06 01                         SME_xy6nv_CE8:	dc.b 1	
00025D07 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025D0C 01                         SME_xy6nv_CEE:	dc.b 1	
00025D0D F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
00025D12 03                         SME_xy6nv_CF4:	dc.b 3	
00025D13 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
00025D18 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
00025D1D 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
00025D22 03                         SME_xy6nv_D04:	dc.b 3	
00025D23 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025D28 E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00025D2D 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D32 03                         SME_xy6nv_D14:	dc.b 3	
00025D33 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025D38 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025D3D 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D42 03                         SME_xy6nv_D24:	dc.b 3	
00025D43 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025D48 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025D4D 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D52 03                         SME_xy6nv_D34:	dc.b 3	
00025D53 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
00025D58 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00025D5D 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00025D62 08                         SME_xy6nv_D44:	dc.b 8	
00025D63 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025D68 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00025D6D F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00025D72 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
00025D77 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00025D7C 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00025D81 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
00025D86 E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
00025D8B 03                         SME_xy6nv_D6D:	dc.b 3	
00025D8C 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025D91 EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025D96 E40C 0013 F0               		dc.b $E4, $C, 0, $13, $F0	
00025D9B 03                         SME_xy6nv_D7D:	dc.b 3	
00025D9C 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025DA1 EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025DA6 E408 0013 F0               		dc.b $E4, 8, 0, $13, $F0	
00025DAB 07                         SME_xy6nv_D8D:	dc.b 7	
00025DAC 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025DB1 F402 0003 F8               		dc.b $F4, 2, 0, 3, $F8	
00025DB6 F402 0006 00               		dc.b $F4, 2, 0, 6, 0	
00025DBB EC02 0009 08               		dc.b $EC, 2, 0, 9, 8	
00025DC0 0400 000C F0               		dc.b 4, 0, 0, $C, $F0	
00025DC5 E403 000D F0               		dc.b $E4, 3, 0, $D, $F0	
00025DCA E405 0011 F8               		dc.b $E4, 5, 0, $11, $F8	
00025DCF 07                         SME_xy6nv_DB1:	dc.b 7	
00025DD0 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025DD5 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
00025DDA 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025DDF F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025DE4 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025DE9 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025DEE F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025DF3 05                         SME_xy6nv_DD5:	dc.b 5	
00025DF4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
00025DF9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
00025DFE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
00025E03 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
00025E08 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
00025E0D 02                         SME_xy6nv_DEF:	dc.b 2	
00025E0E FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
00025E13 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
00025E18                            		even
00025E18                            		even
00025E18                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025E18                            ; --------------------------------------------------------------------------------
00025E18                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025E18                            
00025E18                            SME_7rBR2:	
00025E18 0000 0000                  		dc.w SME_7rBR2_160-SME_7rBR2, SME_7rBR2_161-SME_7rBR2	
00025E1C 0000 0000                  		dc.w SME_7rBR2_16A-SME_7rBR2, SME_7rBR2_17D-SME_7rBR2	
00025E20 0000 0000                  		dc.w SME_7rBR2_192-SME_7rBR2, SME_7rBR2_19B-SME_7rBR2	
00025E24 0000 0000                  		dc.w SME_7rBR2_1A2-SME_7rBR2, SME_7rBR2_1A9-SME_7rBR2	
00025E28 0000 0000                  		dc.w SME_7rBR2_1B2-SME_7rBR2, SME_7rBR2_1B7-SME_7rBR2	
00025E2C 0000 0000                  		dc.w SME_7rBR2_1BE-SME_7rBR2, SME_7rBR2_1C5-SME_7rBR2	
00025E30 0000 0000                  		dc.w SME_7rBR2_1CC-SME_7rBR2, SME_7rBR2_1D5-SME_7rBR2	
00025E34 0000 0000                  		dc.w SME_7rBR2_1DC-SME_7rBR2, SME_7rBR2_1EB-SME_7rBR2	
00025E38 0000 0000                  		dc.w SME_7rBR2_1F6-SME_7rBR2, SME_7rBR2_1FD-SME_7rBR2	
00025E3C 0000 0000                  		dc.w SME_7rBR2_204-SME_7rBR2, SME_7rBR2_20D-SME_7rBR2	
00025E40 0000 0000                  		dc.w SME_7rBR2_212-SME_7rBR2, SME_7rBR2_219-SME_7rBR2	
00025E44 0000 0000                  		dc.w SME_7rBR2_224-SME_7rBR2, SME_7rBR2_22F-SME_7rBR2	
00025E48 0000 0000                  		dc.w SME_7rBR2_23C-SME_7rBR2, SME_7rBR2_245-SME_7rBR2	
00025E4C 0000 0000                  		dc.w SME_7rBR2_24C-SME_7rBR2, SME_7rBR2_257-SME_7rBR2	
00025E50 0000 0000                  		dc.w SME_7rBR2_260-SME_7rBR2, SME_7rBR2_267-SME_7rBR2	
00025E54 0000 0000                  		dc.w SME_7rBR2_272-SME_7rBR2, SME_7rBR2_27B-SME_7rBR2	
00025E58 0000 0000                  		dc.w SME_7rBR2_280-SME_7rBR2, SME_7rBR2_285-SME_7rBR2	
00025E5C 0000 0000                  		dc.w SME_7rBR2_290-SME_7rBR2, SME_7rBR2_299-SME_7rBR2	
00025E60 0000 0000                  		dc.w SME_7rBR2_29E-SME_7rBR2, SME_7rBR2_2A5-SME_7rBR2	
00025E64 0000 0000                  		dc.w SME_7rBR2_2AC-SME_7rBR2, SME_7rBR2_2B9-SME_7rBR2	
00025E68 0000 0000                  		dc.w SME_7rBR2_2C6-SME_7rBR2, SME_7rBR2_2CF-SME_7rBR2	
00025E6C 0000 0000                  		dc.w SME_7rBR2_2D6-SME_7rBR2, SME_7rBR2_2E1-SME_7rBR2	
00025E70 0000 0000                  		dc.w SME_7rBR2_2EA-SME_7rBR2, SME_7rBR2_2F1-SME_7rBR2	
00025E74 0000 0000                  		dc.w SME_7rBR2_2FC-SME_7rBR2, SME_7rBR2_301-SME_7rBR2	
00025E78 0000 0000                  		dc.w SME_7rBR2_306-SME_7rBR2, SME_7rBR2_30B-SME_7rBR2	
00025E7C 0000 0000                  		dc.w SME_7rBR2_310-SME_7rBR2, SME_7rBR2_315-SME_7rBR2	
00025E80 0000 0000                  		dc.w SME_7rBR2_31A-SME_7rBR2, SME_7rBR2_31F-SME_7rBR2	
00025E84 0000 0000                  		dc.w SME_7rBR2_324-SME_7rBR2, SME_7rBR2_32D-SME_7rBR2	
00025E88 0000 0000                  		dc.w SME_7rBR2_334-SME_7rBR2, SME_7rBR2_33B-SME_7rBR2	
00025E8C 0000 0000                  		dc.w SME_7rBR2_342-SME_7rBR2, SME_7rBR2_34B-SME_7rBR2	
00025E90 0000 0000                  		dc.w SME_7rBR2_352-SME_7rBR2, SME_7rBR2_359-SME_7rBR2	
00025E94 0000 0000                  		dc.w SME_7rBR2_360-SME_7rBR2, SME_7rBR2_365-SME_7rBR2	
00025E98 0000 0000                  		dc.w SME_7rBR2_36A-SME_7rBR2, SME_7rBR2_36F-SME_7rBR2	
00025E9C 0000 0000                  		dc.w SME_7rBR2_374-SME_7rBR2, SME_7rBR2_379-SME_7rBR2	
00025EA0 0000 0000                  		dc.w SME_7rBR2_37E-SME_7rBR2, SME_7rBR2_383-SME_7rBR2	
00025EA4 0000 0000                  		dc.w SME_7rBR2_388-SME_7rBR2, SME_7rBR2_391-SME_7rBR2	
00025EA8 0000 0000                  		dc.w SME_7rBR2_398-SME_7rBR2, SME_7rBR2_39D-SME_7rBR2	
00025EAC 0000 0000                  		dc.w SME_7rBR2_3A4-SME_7rBR2, SME_7rBR2_3AD-SME_7rBR2	
00025EB0 0000 0000                  		dc.w SME_7rBR2_3B4-SME_7rBR2, SME_7rBR2_3B9-SME_7rBR2	
00025EB4 0000 0000                  		dc.w SME_7rBR2_3C0-SME_7rBR2, SME_7rBR2_3C7-SME_7rBR2	
00025EB8 0000 0000                  		dc.w SME_7rBR2_3CE-SME_7rBR2, SME_7rBR2_3E1-SME_7rBR2	
00025EBC 0000 0000                  		dc.w SME_7rBR2_3F4-SME_7rBR2, SME_7rBR2_3FB-SME_7rBR2	
00025EC0 0000 0000                  		dc.w SME_7rBR2_402-SME_7rBR2, SME_7rBR2_409-SME_7rBR2	
00025EC4 0000 0000                  		dc.w SME_7rBR2_414-SME_7rBR2, SME_7rBR2_41B-SME_7rBR2	
00025EC8 0000 0000                  		dc.w SME_7rBR2_422-SME_7rBR2, SME_7rBR2_42D-SME_7rBR2	
00025ECC 0000 0000                  		dc.w SME_7rBR2_438-SME_7rBR2, SME_7rBR2_441-SME_7rBR2	
00025ED0 0000 0000                  		dc.w SME_7rBR2_44A-SME_7rBR2, SME_7rBR2_453-SME_7rBR2	
00025ED4 0000 0000                  		dc.w SME_7rBR2_45C-SME_7rBR2, SME_7rBR2_45F-SME_7rBR2	
00025ED8 0000 0000                  		dc.w SME_7rBR2_462-SME_7rBR2, SME_7rBR2_465-SME_7rBR2	
00025EDC 0000 0000                  		dc.w SME_7rBR2_468-SME_7rBR2, SME_7rBR2_46B-SME_7rBR2	
00025EE0 0000 0000                  		dc.w SME_7rBR2_46E-SME_7rBR2, SME_7rBR2_471-SME_7rBR2	
00025EE4 0000 0000                  		dc.w SME_7rBR2_478-SME_7rBR2, SME_7rBR2_47B-SME_7rBR2	
00025EE8 0000 0000                  		dc.w SME_7rBR2_480-SME_7rBR2, SME_7rBR2_483-SME_7rBR2	
00025EEC 0000 0000                  		dc.w SME_7rBR2_488-SME_7rBR2, SME_7rBR2_48B-SME_7rBR2	
00025EF0 0000 0000                  		dc.w SME_7rBR2_494-SME_7rBR2, SME_7rBR2_4A3-SME_7rBR2	
00025EF4 0000 0000                  		dc.w SME_7rBR2_4AE-SME_7rBR2, SME_7rBR2_4B5-SME_7rBR2	
00025EF8 0000 0000                  		dc.w SME_7rBR2_4C0-SME_7rBR2, SME_7rBR2_4C9-SME_7rBR2	
00025EFC 0000 0000                  		dc.w SME_7rBR2_4D2-SME_7rBR2, SME_7rBR2_4DB-SME_7rBR2	
00025F00 0000 0000                  		dc.w SME_7rBR2_4EE-SME_7rBR2, SME_7rBR2_4F5-SME_7rBR2	
00025F04 0000 0000                  		dc.w SME_7rBR2_4FC-SME_7rBR2, SME_7rBR2_503-SME_7rBR2	
00025F08 0000 0000                  		dc.w SME_7rBR2_504-SME_7rBR2, SME_7rBR2_515-SME_7rBR2	
00025F0C 0000 0000                  		dc.w SME_7rBR2_524-SME_7rBR2, SME_7rBR2_52D-SME_7rBR2	
00025F10 0000 0000                  		dc.w SME_7rBR2_534-SME_7rBR2, SME_7rBR2_53B-SME_7rBR2	
00025F14 0000 0000                  		dc.w SME_7rBR2_542-SME_7rBR2, SME_7rBR2_545-SME_7rBR2	
00025F18 0000 0000                  		dc.w SME_7rBR2_54C-SME_7rBR2, SME_7rBR2_553-SME_7rBR2	
00025F1C 0000 0000                  		dc.w SME_7rBR2_55A-SME_7rBR2, SME_7rBR2_561-SME_7rBR2	
00025F20 0000 0000                  		dc.w SME_7rBR2_56A-SME_7rBR2, SME_7rBR2_57B-SME_7rBR2	
00025F24 0000 0000                  		dc.w SME_7rBR2_584-SME_7rBR2, SME_7rBR2_58D-SME_7rBR2	
00025F28 0000 0000                  		dc.w SME_7rBR2_598-SME_7rBR2, SME_7rBR2_5A3-SME_7rBR2	
00025F2C 0000 0000                  		dc.w SME_7rBR2_5A8-SME_7rBR2, SME_7rBR2_5B3-SME_7rBR2	
00025F30 0000 0000                  		dc.w SME_7rBR2_5BA-SME_7rBR2, SME_7rBR2_5C5-SME_7rBR2	
00025F34 0000 0000                  		dc.w SME_7rBR2_5CA-SME_7rBR2, SME_7rBR2_5D1-SME_7rBR2	
00025F38 0000 0000                  		dc.w SME_7rBR2_5D8-SME_7rBR2, SME_7rBR2_5DF-SME_7rBR2	
00025F3C 0000 0000                  		dc.w SME_7rBR2_5E4-SME_7rBR2, SME_7rBR2_5EB-SME_7rBR2	
00025F40 0000 0000                  		dc.w SME_7rBR2_602-SME_7rBR2, SME_7rBR2_60F-SME_7rBR2	
00025F44 0000 0000                  		dc.w SME_7rBR2_616-SME_7rBR2, SME_7rBR2_625-SME_7rBR2	
00025F48 0000 0000                  		dc.w SME_7rBR2_62A-SME_7rBR2, SME_7rBR2_633-SME_7rBR2	
00025F4C 0000 0000                  		dc.w SME_7rBR2_63A-SME_7rBR2, SME_7rBR2_641-SME_7rBR2	
00025F50 0000 0000                  		dc.w SME_7rBR2_64A-SME_7rBR2, SME_7rBR2_64D-SME_7rBR2	
00025F54 0000 0000                  		dc.w SME_7rBR2_650-SME_7rBR2, SME_7rBR2_653-SME_7rBR2	
00025F58 0000 0000                  		dc.w SME_7rBR2_656-SME_7rBR2, SME_7rBR2_659-SME_7rBR2	
00025F5C 0000 0000                  		dc.w SME_7rBR2_65C-SME_7rBR2, SME_7rBR2_65F-SME_7rBR2	
00025F60 0000 0000                  		dc.w SME_7rBR2_662-SME_7rBR2, SME_7rBR2_669-SME_7rBR2	
00025F64 0000 0000                  		dc.w SME_7rBR2_670-SME_7rBR2, SME_7rBR2_677-SME_7rBR2	
00025F68 0000 0000                  		dc.w SME_7rBR2_67E-SME_7rBR2, SME_7rBR2_685-SME_7rBR2	
00025F6C 0000 0000                  		dc.w SME_7rBR2_696-SME_7rBR2, SME_7rBR2_69D-SME_7rBR2	
00025F70 0000 0000                  		dc.w SME_7rBR2_6A4-SME_7rBR2, SME_7rBR2_6B3-SME_7rBR2	
00025F74 0000 0000                  		dc.w SME_7rBR2_6C2-SME_7rBR2, SME_7rBR2_6CD-SME_7rBR2	
00025F78 00                         SME_7rBR2_160:	dc.b 0	
00025F79 0420 0070 0320 0B20 0E     SME_7rBR2_161:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025F82 0920 0020 0B20 0E10 0300+  SME_7rBR2_16A:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025F95 0A20 0020 0B20 0E10 0300+  SME_7rBR2_17D:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025FAA 04B6 C606 D200 0920 0E     SME_7rBR2_192:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025FB3 0350 1150 1720 0E          SME_7rBR2_19B:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025FBA 0350 2050 1720 0E          SME_7rBR2_1A2:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025FC1 0450 2050 1710 2700 0E     SME_7rBR2_1A9:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025FCA 02B6 D316 DF               SME_7rBR2_1B2:	dc.b 2, $B6, $D3, $16, $DF	
00025FCF 0356 E126 E736 EA          SME_7rBR2_1B7:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025FD6 0356 E126 E736 EE          SME_7rBR2_1BE:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025FDD 03B6 F226 FE27 01          SME_7rBR2_1C5:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025FE4 0420 0B20 0E87 0A07 13     SME_7rBR2_1CC:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025FED 0380 2920 0B20 0E          SME_7rBR2_1D5:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025FF4 0750 3A50 4010 4600 3530+  SME_7rBR2_1DC:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026003 05B0 4800 3530 3600 3400+  SME_7rBR2_1EB:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
0002600E 0380 5A57 0400 09          SME_7rBR2_1F6:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00026015 03F7 1437 2407 28          SME_7rBR2_1FD:	dc.b 3, $F7, $14, $37, $24, 7, $28	
0002601C 0450 5450 6350 6910 6F     SME_7rBR2_204:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00026025 0250 54B0 71               SME_7rBR2_20D:	dc.b 2, $50, $54, $B0, $71	
0002602A 0357 0457 2907 2F          SME_7rBR2_212:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00026031 0530 7D50 8100 3310 3430+  SME_7rBR2_219:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
0002603C 0550 8750 8D20 9350 9600+  SME_7rBR2_224:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00026047 0650 8710 9D30 9F50 A330+  SME_7rBR2_22F:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00026054 0450 AE10 B470 B620 BE     SME_7rBR2_23C:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
0002605D 03F9 7539 8539 89          SME_7rBR2_245:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00026064 0550 C130 C770 CB20 D310+  SME_7rBR2_24C:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
0002606F 0450 C110 D870 DA20 E2     SME_7rBR2_257:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00026078 03F9 8D39 9D39 A1          SME_7rBR2_260:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
0002607F 0550 8710 9D00 9370 E520+  SME_7rBR2_267:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
0002608A 0470 F050 F810 FE51 00     SME_7rBR2_272:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00026093 0270 F0B1 06               SME_7rBR2_27B:	dc.b 2, $70, $F0, $B1, 6	
00026098 0281 1858 F9               SME_7rBR2_280:	dc.b 2, $81, $18, $58, $F9	
0002609D 0508 FF39 0009 04B9 0529+  SME_7rBR2_285:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
000260A8 0451 1251 2111 2751 29     SME_7rBR2_290:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
000260B1 0251 12B1 2F               SME_7rBR2_299:	dc.b 2, $51, $12, $B1, $2F	
000260B6 0329 1479 1719 1F          SME_7rBR2_29E:	dc.b 3, $29, $14, $79, $17, $19, $1F	
000260BD 0370 F001 0681 3B          SME_7rBR2_2A5:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
000260C4 0651 4411 4A11 4C81 4E01+  SME_7rBR2_2AC:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
000260D1 0651 4421 5911 5C11 5E81+  SME_7rBR2_2B9:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
000260DE 0451 6911 6F81 7111 7A     SME_7rBR2_2C6:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
000260E7 03F9 A529 B529 B8          SME_7rBR2_2CF:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
000260EE 0551 7C21 8211 8571 8721+  SME_7rBR2_2D6:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
000260F9 0451 7C11 9281 9411 9D     SME_7rBR2_2E1:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00026102 03F9 BB29 CB19 CE          SME_7rBR2_2EA:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00026109 0551 4481 9F11 5E11 A801+  SME_7rBR2_2F1:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00026114 0251 AAB1 B0               SME_7rBR2_2FC:	dc.b 2, $51, $AA, $B1, $B0	
00026119 02B7 3057 3C               SME_7rBR2_301:	dc.b 2, $B7, $30, $57, $3C	
0002611E 0250 54B1 BC               SME_7rBR2_306:	dc.b 2, $50, $54, $B1, $BC	
00026123 0257 3CB7 42               SME_7rBR2_30B:	dc.b 2, $57, $3C, $B7, $42	
00026128 0251 AAB1 C8               SME_7rBR2_310:	dc.b 2, $51, $AA, $B1, $C8	
0002612D 0257 3CB7 4E               SME_7rBR2_315:	dc.b 2, $57, $3C, $B7, $4E	
00026132 0250 54B1 D4               SME_7rBR2_31A:	dc.b 2, $50, $54, $B1, $D4	
00026137 0257 3CB7 5A               SME_7rBR2_31F:	dc.b 2, $57, $3C, $B7, $5A	
0002613C 0451 E011 E6B1 E801 F4     SME_7rBR2_324:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00026145 03F8 7128 8128 84          SME_7rBR2_32D:	dc.b 3, $F8, $71, $28, $81, $28, $84	
0002614C 0351 F511 FBB1 FD          SME_7rBR2_334:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00026153 03B8 BD78 C901 F4          SME_7rBR2_33B:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
0002615A 0451 E012 09B2 0B01 F4     SME_7rBR2_342:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00026163 03B8 D178 DD01 F4          SME_7rBR2_34B:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
0002616A 0351 F511 FBB2 17          SME_7rBR2_352:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026171 0378 E5B8 ED01 F4          SME_7rBR2_359:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
00026178 0252 23B2 29               SME_7rBR2_360:	dc.b 2, $52, $23, $B2, $29	
0002617D 0258 87B8 8D               SME_7rBR2_365:	dc.b 2, $58, $87, $B8, $8D	
00026182 0251 12B2 35               SME_7rBR2_36A:	dc.b 2, $51, $12, $B2, $35	
00026187 0258 87B8 99               SME_7rBR2_36F:	dc.b 2, $58, $87, $B8, $99	
0002618C 0252 23B2 41               SME_7rBR2_374:	dc.b 2, $52, $23, $B2, $41	
00026191 0258 87B8 A5               SME_7rBR2_379:	dc.b 2, $58, $87, $B8, $A5	
00026196 0251 12B2 4D               SME_7rBR2_37E:	dc.b 2, $51, $12, $B2, $4D	
0002619B 0258 87B8 B1               SME_7rBR2_383:	dc.b 2, $58, $87, $B8, $B1	
000261A0 0452 5912 5FB2 6102 6D     SME_7rBR2_388:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
000261A9 03B9 2129 2D59 30          SME_7rBR2_391:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
000261B0 0272 6EB2 76               SME_7rBR2_398:	dc.b 2, $72, $6E, $B2, $76	
000261B5 03B9 3629 4259 45          SME_7rBR2_39D:	dc.b 3, $B9, $36, $29, $42, $59, $45	
000261BC 0452 5912 82B2 8402 6D     SME_7rBR2_3A4:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
000261C5 03B9 4B29 5759 5A          SME_7rBR2_3AD:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
000261CC 0272 6EB2 90               SME_7rBR2_3B4:	dc.b 2, $72, $6E, $B2, $90	
000261D1 03B9 6029 6C59 6F          SME_7rBR2_3B9:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
000261D8 03B4 EE24 FA54 FD          SME_7rBR2_3C0:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
000261DF 03B5 0325 0F55 12          SME_7rBR2_3C7:	dc.b 3, $B5, 3, $25, $F, $55, $12	
000261E6 0925 1E55 2105 3715 1815+  SME_7rBR2_3CE:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
000261F9 0925 2D55 3005 3615 2715+  SME_7rBR2_3E1:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
0002620C 03F6 6416 7436 76          SME_7rBR2_3F4:	dc.b 3, $F6, $64, $16, $74, $36, $76	
00026213 03B6 8176 8D16 95          SME_7rBR2_3FB:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
0002621A 03F5 3835 4805 4C          SME_7rBR2_402:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00026221 05B5 4D35 5915 5D15 5F25+  SME_7rBR2_409:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
0002622C 03B5 6425 7055 73          SME_7rBR2_414:	dc.b 3, $B5, $64, $25, $70, $55, $73	
00026233 03B5 7925 8555 88          SME_7rBR2_41B:	dc.b 3, $B5, $79, $25, $85, $55, $88	
0002623A 0555 9425 9A05 AD55 8E55+  SME_7rBR2_422:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
00026245 0525 A355 A605 AC55 9D55+  SME_7rBR2_42D:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
00026250 04B5 BA25 C625 C925 CC     SME_7rBR2_438:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
00026259 04B5 AE25 CF25 D225 D5     SME_7rBR2_441:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
00026262 04F5 D825 E805 EB05 EC     SME_7rBR2_44A:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
0002626B 04F5 ED25 FD16 0016 02     SME_7rBR2_453:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
00026274 01F2 9C                    SME_7rBR2_45C:	dc.b 1, $F2, $9C	
00026277 01F6 2B                    SME_7rBR2_45F:	dc.b 1, $F6, $2B	
0002627A 01F2 AC                    SME_7rBR2_462:	dc.b 1, $F2, $AC	
0002627D 01F6 3B                    SME_7rBR2_465:	dc.b 1, $F6, $3B	
00026280 01F2 BC                    SME_7rBR2_468:	dc.b 1, $F2, $BC	
00026283 01F6 4B                    SME_7rBR2_46B:	dc.b 1, $F6, $4B	
00026286 01F2 CC                    SME_7rBR2_46E:	dc.b 1, $F2, $CC	
00026289 0386 5B36 7A26 7E          SME_7rBR2_471:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026290 01F2 DC                    SME_7rBR2_478:	dc.b 1, $F2, $DC	
00026293 02B2 EC22 F8               SME_7rBR2_47B:	dc.b 2, $B2, $EC, $22, $F8	
00026298 01F2 FB                    SME_7rBR2_480:	dc.b 1, $F2, $FB	
0002629B 02B3 0B23 17               SME_7rBR2_483:	dc.b 2, $B3, $B, $23, $17	
000262A0 01F3 1A                    SME_7rBR2_488:	dc.b 1, $F3, $1A	
000262A3 0453 2AB3 3018 1508 17     SME_7rBR2_48B:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
000262AC 0753 3C73 4213 4A03 4C08+  SME_7rBR2_494:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
000262BB 0528 1BB8 1E28 2A18 2D08+  SME_7rBR2_4A3:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
000262C6 03B8 3038 3C18 40          SME_7rBR2_4AE:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
000262CD 05B4 8834 9413 FD03 FF0A+  SME_7rBR2_4B5:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
000262D8 0427 6627 6927 6C20 0E     SME_7rBR2_4C0:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
000262E1 0413 4D73 4F23 5703 5A     SME_7rBR2_4C9:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
000262EA 0423 5B23 5EF3 6108 42     SME_7rBR2_4D2:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
000262F3 0928 5338 5678 4303 6408+  SME_7rBR2_4DB:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026306 03B3 7173 7D00 71          SME_7rBR2_4EE:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002630D 03F8 5B18 6B38 6D          SME_7rBR2_4F5:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00026314 03F8 0138 113A CE          SME_7rBR2_4FC:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
0002631B 00                         SME_7rBR2_503:	dc.b 0	
0002631C 0839 E219 EF29 E619 E919+  SME_7rBR2_504:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
0002632D 0739 E219 EF29 E619 E919+  SME_7rBR2_515:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
0002633C 0439 E289 E619 EF59 F1     SME_7rBR2_524:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00026345 0373 9D03 A533 A6          SME_7rBR2_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
0002634C 0373 8533 8D23 91          SME_7rBR2_534:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00026353 0376 9736 9F06 A3          SME_7rBR2_53B:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
0002635A 0183 94                    SME_7rBR2_542:	dc.b 1, $83, $94	
0002635D 0376 9736 9F06 A3          SME_7rBR2_545:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00026364 0373 8533 8D23 91          SME_7rBR2_54C:	dc.b 3, $73, $85, $33, $8D, $23, $91	
0002636B 0373 9D03 A533 A6          SME_7rBR2_553:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026372 0373 AA33 B223 B6          SME_7rBR2_55A:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026379 04B3 B903 C603 C503 C7     SME_7rBR2_561:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026382 0856 1113 C303 C503 C613+  SME_7rBR2_56A:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026393 04B3 DA33 E603 EA03 EB     SME_7rBR2_57B:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002639C 04B3 C833 D403 D803 D9     SME_7rBR2_584:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
000263A5 0583 EC13 F553 F713 FD03+  SME_7rBR2_58D:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
000263B0 0584 0014 0953 F713 FD03+  SME_7rBR2_598:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
000263BB 0284 0B74 14               SME_7rBR2_5A3:	dc.b 2, $84, $B, $74, $14	
000263C0 0534 9824 9C34 9F34 A304+  SME_7rBR2_5A8:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
000263CB 0384 1C24 2514 28          SME_7rBR2_5B3:	dc.b 3, $84, $1C, $24, $25, $14, $28	
000263D2 0504 A834 A934 AD34 B124+  SME_7rBR2_5BA:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
000263DD 0284 2A74 33               SME_7rBR2_5C5:	dc.b 2, $84, $2A, $74, $33	
000263E2 03B7 DF17 EB27 ED          SME_7rBR2_5CA:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
000263E9 0384 1C24 3B14 3E          SME_7rBR2_5D1:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
000263F0 03B7 F017 FC27 FE          SME_7rBR2_5D8:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
000263F7 0254 40B4 46               SME_7rBR2_5DF:	dc.b 2, $54, $40, $B4, $46	
000263FC 0374 5214 5AB4 5C          SME_7rBR2_5E4:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026403 0B74 6814 7004 7924 7504+  SME_7rBR2_5EB:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
0002641A 0674 7A14 7054 8204 7924+  SME_7rBR2_602:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00026427 0354 C9B4 CF10 6D          SME_7rBR2_60F:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
0002642E 0714 C334 C514 BE04 BD14+  SME_7rBR2_616:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
0002643D 02F4 DB24 EB               SME_7rBR2_625:	dc.b 2, $F4, $DB, $24, $EB	
00026442 04B6 A416 B026 B206 B1     SME_7rBR2_62A:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
0002644B 03B6 B516 C126 C3          SME_7rBR2_633:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
00026452 03B9 D129 DD19 E0          SME_7rBR2_63A:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00026459 0427 6F37 7237 7627 7A     SME_7rBR2_641:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
00026462 01F7 7E                    SME_7rBR2_64A:	dc.b 1, $F7, $7E	
00026465 01F7 8E                    SME_7rBR2_64D:	dc.b 1, $F7, $8E	
00026468 01F7 9E                    SME_7rBR2_650:	dc.b 1, $F7, $9E	
0002646B 01F7 AE                    SME_7rBR2_653:	dc.b 1, $F7, $AE	
0002646E 01F7 BE                    SME_7rBR2_656:	dc.b 1, $F7, $BE	
00026471 01FA 08                    SME_7rBR2_659:	dc.b 1, $FA, 8	
00026474 01FA BD                    SME_7rBR2_65C:	dc.b 1, $FA, $BD	
00026477 01BA 18                    SME_7rBR2_65F:	dc.b 1, $BA, $18	
0002647A 03FA 243A 341A 38          SME_7rBR2_662:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
00026481 035A 46BA 3A0A 4C          SME_7rBR2_669:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
00026488 03BA 4D5A 590A 5F          SME_7rBR2_670:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
0002648F 03BA 605A 6C0A 72          SME_7rBR2_677:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
00026496 03BA 735A 7F0A 85          SME_7rBR2_67E:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
0002649D 085A 7F0A 852A 781A 7C0A+  SME_7rBR2_685:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
000264AE 0320 0EFA 8C3A 9C          SME_7rBR2_696:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
000264B5 0320 0EFA A02A B0          SME_7rBR2_69D:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
000264BC 0720 0E2A 912A 952A 980A+  SME_7rBR2_6A4:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
000264CB 0750 3A50 4010 4600 3530+  SME_7rBR2_6B3:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
000264DA 05B0 4800 3530 3600 3400+  SME_7rBR2_6C2:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
000264E5 0380 5A57 0400 09          SME_7rBR2_6CD:	dc.b 3, $80, $5A, $57, 4, 0, 9	
000264EC                            		even
000264EC                            		even
000264EC                            
000264EC                            ; ---------------------------------------------------------------------------
000264EC                            ; Uncompressed graphics	- Sonic
000264EC                            ; ---------------------------------------------------------------------------
000264EC                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004DC8C                            		even
0004DC8C                            ; ---------------------------------------------------------------------------
0004DC8C                            ; Compressed graphics - various
0004DC8C                            ; ---------------------------------------------------------------------------
0004DC8C                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004E94C                            		even
0004E94C                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
0004F60C                            		even
0004F60C                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
000502CC                            		even
000502CC                            Art_Shield:	incbin	"artunc\Shield.bin"
00050F8C                            		even
00050F8C                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0005138C                            		even
0005138C                            
0005138C                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0005138C                            ; ---------------------------------------------------------------------------
0005138C                            ; Sprite mappings - walls of the special stage
0005138C                            ; ---------------------------------------------------------------------------
0005138C                            Map_SSWalls_internal:
0005138C 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0005138E 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
00051390 0000                       		dc.w byte_2C590-Map_SSWalls_internal
00051392 0000                       		dc.w byte_2C596-Map_SSWalls_internal
00051394 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
00051396 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
00051398 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0005139A 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0005139C 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0005139E 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
000513A0 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
000513A2 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
000513A4 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
000513A6 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
000513A8 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
000513AA 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
000513AC 01                         byte_2C584:	dc.b 1
000513AD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000513B2 01                         byte_2C58A:	dc.b 1
000513B3 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000513B8 01                         byte_2C590:	dc.b 1
000513B9 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000513BE 01                         byte_2C596:	dc.b 1
000513BF F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000513C4 01                         byte_2C59C:	dc.b 1
000513C5 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000513CA 01                         byte_2C5A2:	dc.b 1
000513CB F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
000513D0 01                         byte_2C5A8:	dc.b 1
000513D1 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
000513D6 01                         byte_2C5AE:	dc.b 1
000513D7 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
000513DC 01                         byte_2C5B4:	dc.b 1
000513DD F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
000513E2 01                         byte_2C5BA:	dc.b 1
000513E3 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
000513E8 01                         byte_2C5C0:	dc.b 1
000513E9 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
000513EE 01                         byte_2C5C6:	dc.b 1
000513EF F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
000513F4 01                         byte_2C5CC:	dc.b 1
000513F5 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
000513FA 01                         byte_2C5D2:	dc.b 1
000513FB F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00051400 01                         byte_2C5D8:	dc.b 1
00051401 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00051406 01                         byte_2C5DE:	dc.b 1
00051407 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0005140C                            		even
0005140C                            		even
0005140C                            
0005140C                            ; ---------------------------------------------------------------------------
0005140C                            ; Compressed graphics - special stage
0005140C                            ; ---------------------------------------------------------------------------
0005140C                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
00051D44                            		even
00051D44                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
00051E78                            		even
00051E78                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
00052B08                            		even
00052B08                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
00052E08                            		even
00052E08                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
000532FC                            		even
000532FC                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
000533EA                            		even
000533EA                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
000534BA                            		even
000534BA                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
000535B0                            		even
000535B0                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0005360E                            		even
0005360E                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
000536A0                            		even
000536A0                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
00053762                            		even
00053762                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00053830                            		even
00053830                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
000538FC                            		even
000538FC                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
000539C4                            		even
000539C4                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00053A8E                            		even
00053A8E                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
00053B5E                            		even
00053B5E                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00053D52                            		even
00053D52                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
00053EBA                            		even
00053EBA                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
00053F6A                            		even
00053F6A                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
00054044                            		even
00054044                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
000540C8                            		even
000540C8                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
00054246                            		even
00054246                            ; ---------------------------------------------------------------------------
00054246                            ; Compressed graphics - GHZ stuff
00054246                            ; ---------------------------------------------------------------------------
00054246                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
000542A8                            		even
000542A8                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
000543C2                            		even
000543C2                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
000544E0                            		even
000544E0                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00054528                            		even
00054528                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
000546C6                            		even
000546C6                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00054742                            		even
00054742                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
00054956                            		even
00054956                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
00054A82                            		even
00054A82                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
00054BD6                            		even
00054BD6                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00054C86                            		even
00054C86                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
00054CE6                            		even
00054CE6                            ; ---------------------------------------------------------------------------
00054CE6                            ; Compressed graphics - LZ stuff
00054CE6                            ; ---------------------------------------------------------------------------
00054CE6                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00054DBE                            		even
00054DBE                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
000555B2                            		even
000555B2                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00055744 00                         		even
00055744                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
000558AE                            		even
000558AE                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00055EEE 00                         		even
00055EEE                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00055F90 00                         		even
00055F90                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
0005600A 00                         		even
0005600A                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00056170 00                         		even
00056170                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
000561F6 00                         		even
000561F6                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00056362                            		even
00056362                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00056844                            		even
00056844                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
000569B4                            		even
000569B4                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
00056C6C                            		even
00056C6C                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00056DB2                            		even
00056DB2                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00056EDC                            		even
00056EDC                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
0005705C 00                         		even
0005705C                            ; ---------------------------------------------------------------------------
0005705C                            ; Compressed graphics - MZ stuff
0005705C                            ; ---------------------------------------------------------------------------
0005705C                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000572EA                            		even
000572EA                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
000573A8                            		even
000573A8                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00057480                            		even
00057480                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
000574D4                            		even
000574D4                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
000577F2 00                         		even
000577F2                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00058108                            		even
00058108                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00058260                            		even
00058260                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
000582E8                            		even
000582E8                            ; ---------------------------------------------------------------------------
000582E8                            ; Compressed graphics - SLZ stuff
000582E8                            ; ---------------------------------------------------------------------------
000582E8                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00058524                            		even
00058524                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
0005866A                            		even
0005866A                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
000588AE                            		even
000588AE                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
0005894A 00                         		even
0005894A                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00058A2C                            		even
00058A2C                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00058C0E                            		even
00058C0E                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00058D1A                            		even
00058D1A                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00058DBE                            		even
00058DBE                            ; ---------------------------------------------------------------------------
00058DBE                            ; Compressed graphics - SYZ stuff
00058DBE                            ; ---------------------------------------------------------------------------
00058DBE                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00058F4E                            		even
00058F4E                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
00058FB0                            		even
00058FB0                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000590CC 00                         		even
000590CC                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
0005935A                            		even
0005935A                            ; ---------------------------------------------------------------------------
0005935A                            ; Compressed graphics - SBZ stuff
0005935A                            ; ---------------------------------------------------------------------------
0005935A                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
000593AE                            		even
000593AE                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
0005964A                            		even
0005964A                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005983A                            		even
0005983A                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
000599D8                            		even
000599D8                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00059D08                            		even
00059D08                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00059EE6                            		even
00059EE6                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
00059F3E                            		even
00059F3E                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005A0F0 00                         		even
0005A0F0                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005A2C0 00                         		even
0005A2C0                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005A44E                            		even
0005A44E                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005A4E8                            		even
0005A4E8                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005A540                            		even
0005A540                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005A63C                            		even
0005A63C                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005A752                            		even
0005A752                            ; ---------------------------------------------------------------------------
0005A752                            ; Compressed graphics - enemies
0005A752                            ; ---------------------------------------------------------------------------
0005A752                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005AB9A 00                         		even
0005AB9A                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005B08A 00                         		even
0005B08A                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005B36E 00                         		even
0005B36E                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005B72E                            		even
0005B72E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005B916                            		even
0005B916                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005C044 00                         		even
0005C044                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005C2CC 00                         		even
0005C2CC                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005C568 00                         		even
0005C568                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005CB3C                            		even
0005CB3C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005CDCE                            		even
0005CDCE                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005D418 00                         		even
0005D418                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005D854                            		even
0005D854                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005DB62 00                         		even
0005DB62                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005DDC2                            		even
0005DDC2                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005E0C0                            		even
0005E0C0                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005E2EC 00                         		even
0005E2EC                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005E47A                            		even
0005E47A                            ; ---------------------------------------------------------------------------
0005E47A                            ; Compressed graphics - various
0005E47A                            ; ---------------------------------------------------------------------------
0005E47A                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005EAC8 00                         		even
0005EAC8                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005EC40 00                         		even
0005EC40                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005ED62 00                         		even
0005ED62                            Nem_Ring:	incbin	"artnem\Rings.bin"
0005EEB6 00                         		even
0005EEB6                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0005F344                            		even
0005F344                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0005F9B8                            		even
0005F9B8                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0005FA52 00                         		even
0005FA52                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0005FBE4                            		even
0005FBE4                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0005FD02 00                         		even
0005FD02                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0005FDEE                            		even
0005FDEE                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
00060366                            		even
00060366                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
00060450                            		even
00060450                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
000605C4                            		even
000605C4                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0006094C 00                         		even
0006094C                            ; ---------------------------------------------------------------------------
0006094C                            ; Compressed graphics - continue screen
0006094C                            ; ---------------------------------------------------------------------------
0006094C                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
00060C20 00                         		even
00060C20                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
00060EBA 00                         		even
00060EBA                            ; ---------------------------------------------------------------------------
00060EBA                            ; Compressed graphics - animals
00060EBA                            ; ---------------------------------------------------------------------------
00060EBA                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
00061012                            		even
00061012                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0006116E                            		even
0006116E                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
000612EA                            		even
000612EA                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
00061406                            		even
00061406                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
00061580                            		even
00061580                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
000616BA                            		even
000616BA                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
00061816                            		even
00061816                            ; ---------------------------------------------------------------------------
00061816                            ; Compressed graphics - primary patterns and block mappings
00061816                            ; ---------------------------------------------------------------------------
00061816                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
000621DE                            		even
000621DE                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
00063AAC                            		even
00063AAC                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00065040                            		even
00065040                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
0006743A                            		even
0006743A                            Blk16_TS:	incbin	"map16\TS.bin"
000676BE                            		even
000676BE                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
000687FC                            		even
000687FC                            Blk256_TS:	incbin	"map256\TS.bin"
000693AA                            		even
000693AA                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006A548                            		even
0006A548                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006D9F0                            		even
0006D9F0                            Blk256_LZ:	incbin	"map256\LZ.bin"
00070F12                            		even
00070F12                            Blk16_MZ:	incbin	"map16\MZ.bin"
00071700                            		even
00071700                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00074198                            		even
00074198                            		incbin	"map256\MZ (JP1).bin"
0007621A                            		even
0007621A                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
0007689C                            		even
0007689C                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007A306                            		even
0007A306                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007C710                            		even
0007C710                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007D2DE                            		even
0007D2DE                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
00080A86                            		even
00080A86                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
000823A2                            		even
000823A2                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
00082F9C                            		even
00082F9C                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
000857DE                            		even
000857DE                            		incbin	"map256\SBZ (JP1).bin"
0008636E                            		even
0008636E                            ; ---------------------------------------------------------------------------
0008636E                            ; Compressed graphics - bosses and ending sequence
0008636E                            ; ---------------------------------------------------------------------------
0008636E                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00086BD6                            		even
00086BD6                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00086EC0                            		even
00086EC0                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00087744                            		even
00087744                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00087F82 00                         		even
00087F82                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00088750 00                         		even
00088750                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00088C78                            		even
00088C78                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00088D98                            		even
00088D98                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00088FA0 00                         		even
00088FA0                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
0008A17E                            		even
0008A17E                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
0008AAC2                            		even
0008AAC2                            		even
0008AAC2                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
0008B052                            		even
0008B052                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
0008B2DA                            		even
0008B2DA                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008B8D8                            		even
0008B8D8                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
0008BB60                            		even
0008BB60                            
0008BB60 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
0008BBA0                            ; ---------------------------------------------------------------------------
0008BBA0                            ; Collision data
0008BBA0                            ; ---------------------------------------------------------------------------
0008BBA0                            AngleMap:	incbin	"collide\Angle Map.bin"
0008BCA0                            		even
0008BCA0                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
0008CCA0                            		even
0008CCA0                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008DCA0                            		even
0008DCA0                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008DE4C                            		even
0008DE4C                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008E0F0                            		even
0008E0F0                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008E26A 00                         		even
0008E26A                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008E45E                            		even
0008E45E                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008E656 00                         		even
0008E656                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008E826                            		even
0008E826                            ; ---------------------------------------------------------------------------
0008E826                            ; Special Stage layouts
0008E826                            ; ---------------------------------------------------------------------------
0008E826                            SS_1:		incbin	"sslayout\1.bin"
0008EAA0                            		even
0008EAA0                            SS_2:		incbin	"sslayout\2.bin"
0008EEB2                            		even
0008EEB2                            SS_3:		incbin	"sslayout\3.bin"
0008F20E                            		even
0008F20E                            SS_4:		incbin	"sslayout\4.bin"
0008F6E8                            		even
0008F6E8                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008FB98                            			even
0008FB98                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008FE8A                            		even
0008FE8A                            ; ---------------------------------------------------------------------------
0008FE8A                            ; Animated uncompressed graphics
0008FE8A                            ; ---------------------------------------------------------------------------
0008FE8A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0009008A                            		even
0009008A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0009048A                            		even
0009048A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0009090A                            		even
0009090A                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
00090C0A                            		even
00090C0A                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0009120A                            		even
0009120A                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0009150A                            		even
0009150A                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
00091F8A                            		even
00091F8A                            
00091F8A                            ; ---------------------------------------------------------------------------
00091F8A                            ; Level	layout index
00091F8A                            ; ---------------------------------------------------------------------------
00091F8A                            Level_Index:
00091F8A                            		; GHZ
00091F8A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00091F90 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00091F96 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00091F9C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00091FA2                            		; LZ
00091FA2 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00091FA8 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00091FAE 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00091FB4 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00091FBA                            		; MZ
00091FBA 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00091FC0 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00091FC6 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00091FCC 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00091FD2                            		; SLZ
00091FD2 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00091FD8 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00091FDE 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00091FE4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00091FEA                            		; SYZ
00091FEA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00091FF0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00091FF6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00091FFC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00092002                            		; SBZ
00092002 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00092008 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0009200E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00092014 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0009201A                            		; Ending
0009201A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00092020 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00092026 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0009202C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00092032                            
00092032                            Level_GHZ1:	incbin	"levels\ghz1.bin"
00092264                            		even
00092264 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00092268                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0009238A                            		even
0009238A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0009238E                            Level_GHZ3:	incbin	"levels\ghz3.bin"
000924B0                            		even
000924B0                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
000924F2                            		even
000924F2 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000924F6 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000924FA                            
000924FA                            Level_LZ1:	incbin	"levels\lz1.bin"
000925BC                            		even
000925BC                            Level_LZbg:	incbin	"levels\lzbg.bin"
000926BE                            		even
000926BE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000926C2                            Level_LZ2:	incbin	"levels\lz2.bin"
0009275C                            		even
0009275C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00092760                            Level_LZ3:	incbin	"levels\lz3.bin"
0009287A                            		even
0009287A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0009287E                            Level_SBZ3:	incbin	"levels\sbz3.bin"
00092938                            		even
00092938 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0009293C                            
0009293C                            Level_MZ1:	incbin	"levels\mz1.bin"
00092A2E                            		even
00092A2E                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
00092B50                            		even
00092B50                            Level_MZ2:	incbin	"levels\mz2.bin"
00092C42                            		even
00092C42                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
00092D64                            		even
00092D64 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00092D68                            Level_MZ3:	incbin	"levels\mz3.bin"
00092E02                            		even
00092E02                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
00092F24                            		even
00092F24 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00092F28 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00092F2C                            
00092F2C                            Level_SLZ1:	incbin	"levels\slz1.bin"
0009303E                            		even
0009303E                            Level_SLZbg:	incbin	"levels\slzbg.bin"
000930B8                            		even
000930B8                            Level_SLZ2:	incbin	"levels\slz2.bin"
000931A8                            		even
000931A8                            Level_SLZ3:	incbin	"levels\slz3.bin"
000932C2                            		even
000932C2 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000932C6                            
000932C6                            Level_SYZ1:	incbin	"levels\syz1.bin"
000933CA                            		even
000933CA                            		incbin	"levels\syzbg (JP1).bin"
00093404                            		even
00093404 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00093408                            Level_SYZ2:	incbin	"levels\syz2.bin"
0009350C                            		even
0009350C 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00093510                            Level_SYZ3:	incbin	"levels\syz3.bin"
0009366A 00                         		even
0009366A 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0009366E 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00093672                            
00093672                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00093794                            		even
00093794                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
000937D2                            		even
000937D2                            Level_SBZ2:	incbin	"levels\sbz2.bin"
00093914                            		even
00093914                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
00093A7E                            		even
00093A7E 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00093A82 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00093A86                            Level_End:	incbin	"levels\ending.bin"
00093AB6 00                         		even
00093AB6 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00093ABA                            
00093ABA                            
00093ABA                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000946FA                            		even
000946FA                            
00094700                            
00094700                            ; ---------------------------------------------------------------------------
00094700                            ; Sprite locations index
00094700                            ; ---------------------------------------------------------------------------
00094700                            ObjPos_Index:
00094700                            		; GHZ
00094700 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094704 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094708 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009470C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094710                            		; LZ
00094710 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094714 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094718 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009471C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094720                            		; MZ
00094720 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094724 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094728 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009472C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094730                            		; SLZ
00094730 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094734 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094738 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009473C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094740                            		; SYZ
00094740 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094744 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094748 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009474C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094750                            		; SBZ
00094750 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094754 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094758 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009475C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094760                            		; Ending
00094760 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094764 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094768 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009476C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00094770                            		; --- Put extra object data here. ---
00094770                            ObjPosLZPlatform_Index:
00094770 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00094774 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00094778 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009477C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00094780                            ObjPosSBZPlatform_Index:
00094780 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00094784 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00094788 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009478C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00094790 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00094796                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00094E02                            		even
00094E02                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00095252                            		even
00095252                            		incbin	"objpos\ghz3 (JP1).bin"
0009585E                            		even
0009585E                            		incbin	"objpos\lz1 (JP1).bin"
00095894                            		even
00095894                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00095BD6                            		even
00095BD6                            		incbin	"objpos\lz3 (JP1).bin"
0009619A                            		even
0009619A                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
000966E0                            		even
000966E0                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00096712                            		even
00096712                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00096744                            		even
00096744                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
00096776                            		even
00096776                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000967A8                            		even
000967A8                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
000967F2                            		even
000967F2                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00096830                            		even
00096830                            		incbin	"objpos\mz1 (JP1).bin"
00096E30                            		even
00096E30                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
0009722C                            		even
0009722C                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
000974FC                            		even
000974FC                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00097A30                            		even
00097A30                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00097E9E                            		even
00097E9E                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00098480                            		even
00098480                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00098702                            		even
00098702                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00098858                            		even
00098858                            		incbin	"objpos\syz3 (JP1).bin"
00098894                            		even
00098894                            		incbin	"objpos\sbz1 (JP1).bin"
000988DC                            		even
000988DC                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00098906                            		even
00098906                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00098942                            		even
00098942                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00098974                            		even
00098974                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
000989A6                            		even
000989A6                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
000989D8                            		even
000989D8                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00098A0A                            		even
00098A0A                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00098A3C                            		even
00098A3C                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00098A74                            		even
00098A74                            ObjPos_End:	incbin	"objpos\ending.bin"
00098BD0                            		even
00098BD0 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00098BD6                            
00098BD6                            		dcb.b $63C,$FF
00099212                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00099212                            
00099212                            SoundDriver:	include "s1.sounddriver.asm"
00099212                            ; ---------------------------------------------------------------------------
00099212                            ; Modified (early?) SMPS 68k Type 1b
00099212                            ; ---------------------------------------------------------------------------
00099212                            ; Go_SoundTypes:
00099212 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00099216                            ; Go_SoundD0:
00099216 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
0009921A 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0009921E 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00099222                            ; off_719A0:
00099222 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00099226 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
0009922A                            ; ---------------------------------------------------------------------------
0009922A                            ; PSG instruments used in music
0009922A                            ; ---------------------------------------------------------------------------
0009922A                            PSG_Index:
0009922A 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00099236 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00099242 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0009924E                            PSG1:		incbin	"sound/psg/psg1.bin"
00099265                            PSG2:		incbin	"sound/psg/psg2.bin"
0009926C                            PSG3:		incbin	"sound/psg/psg3.bin"
0009927D                            PSG4:		incbin	"sound/psg/psg4.bin"
00099288                            PSG6:		incbin	"sound/psg/psg6.bin"
00099297                            PSG5:		incbin	"sound/psg/psg5.bin"
000992C1                            PSG7:		incbin	"sound/psg/psg7.bin"
000992DD                            PSG8:		incbin	"sound/psg/psg8.bin"
00099305                            PSG9:		incbin	"sound/psg/psg9.bin"
00099316                            ; ---------------------------------------------------------------------------
00099316                            ; New tempos for songs during speed shoes
00099316                            ; ---------------------------------------------------------------------------
00099316                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00099316                            ; tempos while speed shoes are active. If you don't want that, you should add
00099316                            ; their "correct" sped-up main tempos to the list.
00099316                            ; byte_71A94:
00099316                            SpeedUpIndex:
00099316 07                         		dc.b 7		; GHZ
00099317 72                         		dc.b $72	; LZ
00099318 73                         		dc.b $73	; MZ
00099319 26                         		dc.b $26	; SLZ
0009931A 15                         		dc.b $15	; SYZ
0009931B 08                         		dc.b 8		; SBZ
0009931C FF                         		dc.b $FF	; Invincibility
0009931D 05                         		dc.b 5		; Extra Life
0009931E                            		;dc.b ?		; Special Stage
0009931E                            		;dc.b ?		; Title Screen
0009931E                            		;dc.b ?		; Ending
0009931E                            		;dc.b ?		; Boss
0009931E                            		;dc.b ?		; FZ
0009931E                            		;dc.b ?		; Sonic Got Through
0009931E                            		;dc.b ?		; Game Over
0009931E                            		;dc.b ?		; Continue Screen
0009931E                            		;dc.b ?		; Credits
0009931E                            		;dc.b ?		; Drowning
0009931E                            		;dc.b ?		; Get Emerald
0009931E                            
0009931E                            ; ---------------------------------------------------------------------------
0009931E                            ; Music	Pointers
0009931E                            ; ---------------------------------------------------------------------------
0009931E                            MusicIndex:
0009931E 0000 0000                  ptr_mus81:	dc.l Music81
00099322 0000 0000                  ptr_mus82:	dc.l Music82
00099326 0000 0000                  ptr_mus83:	dc.l Music83
0009932A 0000 0000                  ptr_mus84:	dc.l Music84
0009932E 0000 0000                  ptr_mus85:	dc.l Music85
00099332 0000 0000                  ptr_mus86:	dc.l Music86
00099336 0000 0000                  ptr_mus87:	dc.l Music87
0009933A 0000 0000                  ptr_mus88:	dc.l Music88
0009933E 0000 0000                  ptr_mus89:	dc.l Music89
00099342 0000 0000                  ptr_mus8A:	dc.l Music8A
00099346 0000 0000                  ptr_mus8B:	dc.l Music8B
0009934A 0000 0000                  ptr_mus8C:	dc.l Music8C
0009934E 0000 0000                  ptr_mus8D:	dc.l Music8D
00099352 0000 0000                  ptr_mus8E:	dc.l Music8E
00099356 0000 0000                  ptr_mus8F:	dc.l Music8F
0009935A 0000 0000                  ptr_mus90:	dc.l Music90
0009935E 0000 0000                  ptr_mus91:	dc.l Music91
00099362 0000 0000                  ptr_mus92:	dc.l Music92
00099366 0000 0000                  ptr_mus93:	dc.l Music93
0009936A 0000 0000                  ptr_mus94:	dc.l Music94
0009936E 0000 0000                  ptr_mus95:	dc.l Music95
00099372 0000 0000                  ptr_mus96:	dc.l Music96
00099376 0000 0000                  ptr_mus97:	dc.l Music97
0009937A 0000 0000                  ptr_mus98:	dc.l Music98
0009937E 0000 0000                  ptr_mus99:	dc.l Music99
00099382 0000 0000                  ptr_mus9A:	dc.l Music9A
00099386 0000 0000                  ptr_mus9B:	dc.l Music9B
0009938A 0000 0000                  ptr_mus9C:	dc.l Music9C
0009938E                            ptr_musend
0009938E                            ; ---------------------------------------------------------------------------
0009938E                            ; Priority of sound. New music or SFX must have a priority higher than or equal
0009938E                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
0009938E                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
0009938E                            ; any music or SFX can override it (as long as it can override whatever was
0009938E                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
0009938E                            ; will only override special SFX and music will only override music.
0009938E                            ; ---------------------------------------------------------------------------
0009938E                            ; SoundTypes:
0009938E                            SoundPriorities:
0009938E 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
0009939D 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000993AD 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000993BD 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000993CD 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000993DD 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
000993ED 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
000993F2                            
000993F2                            ; ---------------------------------------------------------------------------
000993F2                            ; Subroutine to update music more than once per frame
000993F2                            ; (Called by horizontal & vert. interrupts)
000993F2                            ; ---------------------------------------------------------------------------
000993F2                            
000993F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000993F2                            
000993F2                            ; sub_71B4C:
000993F2                            UpdateMusic:
000993F2 33FC 0100 00A1 1100        		stopZ80
000993FA 4E71                       		nop	
000993FC 4E71                       		nop	
000993FE 4E71                       		nop	
00099400                            ; loc_71B5A:
00099400                            @updateloop:
00099400 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00099408 66F6                       		bne.s	@updateloop			; If so, wait
0009940A                            
0009940A 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00099412 6700                       		beq.s	@driverinput			; Branch if yes
00099414 33FC 0000 00A1 1100        		startZ80
0009941C 4E71                       		nop	
0009941E 4E71                       		nop	
00099420 4E71                       		nop	
00099422 4E71                       		nop	
00099424 4E71                       		nop	
00099426 60CA                       		bra.s	UpdateMusic
00099428                            ; ===========================================================================
00099428                            ; loc_71B82:
00099428                            @driverinput:
00099428 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0009942E 422E 000E                  		clr.b	f_voice_selector(a6)
00099432 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00099436 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009943A 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
0009943E 6600                       		bne.s	@skipdelay
00099440 4EBA 0000                  		jsr	TempoWait(pc)
00099444                            ; loc_71B9E:
00099444                            @skipdelay:
00099444 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00099448 6700                       		beq.s	@skipfadeout
0009944A 4EBA 0000                  		jsr	DoFadeOut(pc)
0009944E                            ; loc_71BA8:
0009944E                            @skipfadeout:
0009944E 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00099452 6700                       		beq.s	@skipfadein
00099454 4EBA 0000                  		jsr	DoFadeIn(pc)
00099458                            ; loc_71BB2:
00099458                            @skipfadein:
00099458                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00099458 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
0009945C 6700                       		beq.s	@nosndinput		; if not, branch
0009945E 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00099462                            ; loc_71BBC:
00099462                            @nosndinput:
00099462 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00099468 6700                       		beq.s	@nonewsound		; If yes, branch
0009946A 4EBA 0000                  		jsr	PlaySoundID(pc)
0009946E                            ; loc_71BC8:
0009946E                            @nonewsound:
0009946E 4A38 C901                  		tst.b	($FFFFC901).w
00099472 6700                       		beq.s	@cont
00099474 5338 C901                  		subq.b	#1,($FFFFC901).w
00099478                            		
00099478                            @cont:
00099478 4BEE 0040                  		lea	v_music_dac_track(a6),a5
0009947C 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
0009947E 6A00                       		bpl.s	@dacdone		; Branch if not
00099480 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00099484                            ; loc_71BD4:
00099484                            @dacdone:
00099484 422E 0008                  		clr.b	f_updating_dac(a6)
00099488 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009948A                            ; loc_71BDA:
0009948A                            @bgmfmloop:
0009948A DAFC 0030                  		adda.w	#TrackSz,a5
0009948E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099490 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00099492 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00099496                            ; loc_71BE6:
00099496                            @bgmfmnext:
00099496 51CF FFF2                  		dbf	d7,@bgmfmloop
0009949A                            
0009949A 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
0009949C                            ; loc_71BEC:
0009949C                            @bgmpsgloop:
0009949C DAFC 0030                  		adda.w	#TrackSz,a5
000994A0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000994A2 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000994A4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000994A8                            ; loc_71BF8:
000994A8                            @bgmpsgnext:
000994A8 51CF FFF2                  		dbf	d7,@bgmpsgloop
000994AC                            
000994AC 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000994B2 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000994B4                            ; loc_71C04:
000994B4                            @sfxfmloop:
000994B4 DAFC 0030                  		adda.w	#TrackSz,a5
000994B8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000994BA 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000994BC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000994C0                            ; loc_71C10:
000994C0                            @sfxfmnext:
000994C0 51CF FFF2                  		dbf	d7,@sfxfmloop
000994C4                            
000994C4 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
000994C6                            ; loc_71C16:
000994C6                            @sfxpsgloop:
000994C6 DAFC 0030                  		adda.w	#TrackSz,a5
000994CA 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000994CC 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
000994CE 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000994D2                            ; loc_71C22:
000994D2                            @sfxpsgnext:
000994D2 51CF FFF2                  		dbf	d7,@sfxpsgloop
000994D6                            		
000994D6 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
000994DC DAFC 0030                  		adda.w	#TrackSz,a5
000994E0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000994E2 6A00                       		bpl.s	@specfmdone		; Branch if not
000994E4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000994E8                            ; loc_71C38:
000994E8                            @specfmdone:
000994E8 DAFC 0030                  		adda.w	#TrackSz,a5
000994EC 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
000994EE 6A00                       		bpl.s	DoStartZ80		; Branch if not
000994F0 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000994F4                            ; loc_71C44:
000994F4                            DoStartZ80:
000994F4 33FC 0000 00A1 1100        		startZ80
000994FC 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00099502 6700                       		beq.s @end ; if not, branch
00099504 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
0009950A 6600                       		bne.s @end ; if not, branch
0009950C 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00099512 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00099516                            
00099516                            	@end:
00099516 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
0009951A 4E75                       		rts
0009951C                            ; End of function UpdateMusic
0009951C                            
0009951C                            
0009951C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009951C                            
0009951C                            ; sub_71C4E: UpdateDAC:
0009951C                            DACUpdateTrack:
0009951C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00099520 6600                       		bne.s	@locret				; Return if not
00099522 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00099528                            ;DACDoNext:
00099528 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
0009952C                            ; loc_71C5E:
0009952C                            @sampleloop:
0009952C 7A00                       		moveq	#0,d5
0009952E 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00099530 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00099534 6500                       		blo.s	@notcoord	; Branch if not
00099536 4EBA 0000                  		jsr	CoordFlag(pc)
0009953A 60F0                       		bra.s	@sampleloop
0009953C                            ; ===========================================================================
0009953C                            ; loc_71C6E:
0009953C                            @notcoord:
0009953C 4A05                       		tst.b	d5			; Is it a sample?
0009953E 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00099540 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00099544 1A1C                       		move.b	(a4)+,d5		; Get another byte
00099546 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00099548 534C                       		subq.w	#1,a4			; Put byte back
0009954A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00099550 6000                       		bra.s	@gotsampleduration
00099552                            ; ===========================================================================
00099552                            ; loc_71C84:
00099552                            @gotduration:
00099552 4EBA 0000                  		jsr	SetDuration(pc)
00099556                            ; loc_71C88:
00099556                            @gotsampleduration:
00099556 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
0009955A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009955E 6600                       		bne.s	@locret			; Return if yes
00099560 7000                       		moveq	#0,d0
00099562 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00099566 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
0009956A 6700                       		beq.s	@locret			; Return if yes
0009956C 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00099570 6600                       		bne.s	@timpani		; Various timpani
00099572 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00099578                            ; locret_71CAA:
00099578                            @locret:
00099578 4E75                       		rts	
0009957A                            ; ===========================================================================
0009957A                            ; loc_71CAC:
0009957A                            @timpani:
0009957A 0400 0088                  		subi.b	#$88,d0		; Convert into an index
0009957E 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00099582                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00099582                            		; use this value from then on.
00099582 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00099588 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00099590 4E75                       		rts	
00099592                            ; End of function DACUpdateTrack
00099592                            
00099592                            ; ===========================================================================
00099592                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00099592                            ; Also, $8C-$8D are so slow you may want to skip them.
00099592                            ; byte_71CC4:
00099592 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00099598                            
00099598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099598                            
00099598                            ; sub_71CCA:
00099598                            FMUpdateTrack:
00099598 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
0009959C 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
0009959E 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
000995A2 4EBA 0000                  		jsr	FMDoNext(pc)
000995A6 4EBA 0000                  		jsr	FMPrepareNote(pc)
000995AA 6000 0000                  		bra.w	FMNoteOn
000995AE                            ; ===========================================================================
000995AE                            ; loc_71CE0:
000995AE                            @notegoing:
000995AE 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
000995B2 4EBA 0000                  		jsr	DoModulation(pc)
000995B6 6000 0000                  		bra.w	FMUpdateFreq
000995BA                            ; End of function FMUpdateTrack
000995BA                            
000995BA                            
000995BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000995BA                            
000995BA                            ; sub_71CEC:
000995BA                            FMDoNext:
000995BA 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
000995BE 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
000995C2                            ; loc_71CF4:
000995C2                            @noteloop:
000995C2 7A00                       		moveq	#0,d5
000995C4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000995C6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
000995CA 6500                       		blo.s	@gotnote	; Branch if not
000995CC 4EBA 0000                  		jsr	CoordFlag(pc)
000995D0 60F0                       		bra.s	@noteloop
000995D2                            ; ===========================================================================
000995D2                            ; loc_71D04:
000995D2                            @gotnote:
000995D2 4EBA 0000                  		jsr	FMNoteOff(pc)
000995D6 4A05                       		tst.b	d5		; Is this a note?
000995D8 6A00                       		bpl.s	@gotduration	; Branch if not
000995DA 4EBA 0000                  		jsr	FMSetFreq(pc)
000995DE 1A1C                       		move.b	(a4)+,d5	; Get another byte
000995E0 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
000995E2 534C                       		subq.w	#1,a4		; Otherwise, put it back
000995E4 6000 0000                  		bra.w	FinishTrackUpdate
000995E8                            ; ===========================================================================
000995E8                            ; loc_71D1A:
000995E8                            @gotduration:
000995E8 4EBA 0000                  		jsr	SetDuration(pc)
000995EC 6000 0000                  		bra.w	FinishTrackUpdate
000995F0                            ; End of function FMDoNext
000995F0                            
000995F0                            
000995F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000995F0                            
000995F0                            ; sub_71D22:
000995F0                            FMSetFreq:
000995F0 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
000995F4 6700                       		beq.s	TrackSetRest
000995F6 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
000995FA 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
000995FE E34D                       		lsl.w	#1,d5
00099600 41FA 0000                  		lea	FMFrequencies(pc),a0
00099604 3C30 5000                  		move.w	(a0,d5.w),d6
00099608 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
0009960C 4E75                       		rts	
0009960E                            ; End of function FMSetFreq
0009960E                            
0009960E                            
0009960E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009960E                            
0009960E                            ; sub_71D40:
0009960E                            SetDuration:
0009960E 1005                       		move.b	d5,d0
00099610 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00099614                            ; loc_71D46:
00099614                            @multloop:
00099614 5301                       		subq.b	#1,d1
00099616 6700                       		beq.s	@donemult
00099618 D005                       		add.b	d5,d0
0009961A 60F8                       		bra.s	@multloop
0009961C                            ; ===========================================================================
0009961C                            ; loc_71D4E:
0009961C                            @donemult:
0009961C 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00099620 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00099624 4E75                       		rts	
00099626                            ; End of function SetDuration
00099626                            
00099626                            ; ===========================================================================
00099626                            ; loc_71D58:
00099626                            TrackSetRest:
00099626 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009962A 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
0009962E                            
0009962E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009962E                            
0009962E                            ; sub_71D60:
0009962E                            FinishTrackUpdate:
0009962E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00099632 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00099638 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
0009963C 6600                       		bne.s	@locret				; If so, branch
0009963E 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00099644 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00099648 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
0009964C 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
0009964E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00099652 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00099656 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
0009965A 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
0009965E 1018                       		move.b	(a0)+,d0			; Get steps
00099660 E208                       		lsr.b	#1,d0				; Halve them
00099662 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00099666 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
0009966A                            ; locret_71D9C:
0009966A                            @locret:
0009966A 4E75                       		rts	
0009966C                            ; End of function FinishTrackUpdate
0009966C                            
0009966C                            
0009966C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009966C                            
0009966C                            ; sub_71D9E: NoteFillUpdate
0009966C                            NoteTimeoutUpdate:
0009966C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00099670 6700                       		beq.s	@locret
00099672 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00099676 6600                       		bne.s	@locret				; Return if it hasn't expired
00099678 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
0009967C 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00099680 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00099684 4EBA 0000                  		jsr	FMNoteOff(pc)
00099688 584F                       		addq.w	#4,sp				; Do not return to caller
0009968A 4E75                       		rts	
0009968C                            ; ===========================================================================
0009968C                            ; loc_71DBE:
0009968C                            @psgnoteoff:
0009968C 4EBA 0000                  		jsr	PSGNoteOff(pc)
00099690 584F                       		addq.w	#4,sp		; Do not return to caller
00099692                            ; locret_71DC4:
00099692                            @locret:
00099692 4E75                       		rts	
00099694                            ; End of function NoteTimeoutUpdate
00099694                            
00099694                            
00099694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099694                            
00099694                            ; sub_71DC6:
00099694                            DoModulation:
00099694 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00099696 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
0009969A 6700                       		beq.s	@locret				; Return if not
0009969C 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
000996A0 6700                       		beq.s	@waitdone			; If yes, branch
000996A2 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
000996A6 4E75                       		rts	
000996A8                            ; ===========================================================================
000996A8                            ; loc_71DDA:
000996A8                            @waitdone:
000996A8 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
000996AC 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
000996AE 4E75                       		rts	
000996B0                            ; ===========================================================================
000996B0                            ; loc_71DE2:
000996B0                            @updatemodulation:
000996B0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
000996B4 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
000996BA 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
000996BE 6600                       		bne.s	@calcfreq			; If nonzero, branch
000996C0 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
000996C6 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
000996CA 4E75                       		rts	
000996CC                            ; ===========================================================================
000996CC                            ; loc_71DFE:
000996CC                            @calcfreq:
000996CC 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
000996D0 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
000996D4 4886                       		ext.w	d6
000996D6 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
000996DA 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
000996DE DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
000996E2 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
000996E4                            ; locret_71E16:
000996E4                            @locret:
000996E4 4E75                       		rts	
000996E6                            ; End of function DoModulation
000996E6                            
000996E6                            
000996E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000996E6                            
000996E6                            ; sub_71E18:
000996E6                            FMPrepareNote:
000996E6 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
000996EA 6600                       		bne.s	locret_71E48		; Return if so
000996EC 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
000996F0 6700                       		beq.s	FMSetRest		; Branch if zero
000996F2                            ; loc_71E24:
000996F2                            FMUpdateFreq:
000996F2 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
000996F6 4880                       		ext.w	d0
000996F8 DC40                       		add.w	d0,d6			; Add note frequency
000996FA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000996FE 6600                       		bne.s	locret_71E48		; Return if so
00099700 3206                       		move.w	d6,d1
00099702 E049                       		lsr.w	#8,d1
00099704 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00099708 4EBA 0000                  		jsr	WriteFMIorII(pc)
0009970C 1206                       		move.b	d6,d1
0009970E 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00099712 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00099716                            ; locret_71E48:
00099716                            locret_71E48:
00099716 4E75                       		rts	
00099718                            ; ===========================================================================
00099718                            ; loc_71E4A:
00099718                            FMSetRest:
00099718 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009971C 4E75                       		rts	
0009971E                            ; End of function FMPrepareNote
0009971E                            
0009971E                            ; ===========================================================================
0009971E                            ; loc_71E50:
0009971E                            PauseMusic:
0009971E 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00099720 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00099726 6700 0000                  		beq.w	@unpausedallfm
0009972A 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00099730 7602                       		moveq	#2,d3
00099732 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00099736 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00099738                            ; loc_71E6A:
00099738                            @killpanloop:
00099738 4EBA 0000                  		jsr	WriteFMI(pc)
0009973C 4EBA 0000                  		jsr	WriteFMII(pc)
00099740 5200                       		addq.b	#1,d0
00099742 51CB FFF4                  		dbf	d3,@killpanloop
00099746                            
00099746 7602                       		moveq	#2,d3
00099748 7028                       		moveq	#$28,d0		; Key on/off register
0009974A                            ; loc_71E7C:
0009974A                            @noteoffloop:
0009974A 1203                       		move.b	d3,d1		; FM1, FM2, FM3
0009974C 4EBA 0000                  		jsr	WriteFMI(pc)
00099750 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00099752 4EBA 0000                  		jsr	WriteFMI(pc)
00099756 51CB FFF2                  		dbf	d3,@noteoffloop
0009975A                            
0009975A 4EBA 0000                  		jsr	PSGSilenceAll(pc)
0009975E 6000 FD94                  		bra.w	DoStartZ80
00099762                            ; ===========================================================================
00099762                            ; loc_71E94:
00099762                            @unpausemusic:
00099762 422E 0003                  		clr.b	f_pausemusic(a6)
00099766 7630                       		moveq	#TrackSz,d3
00099768 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
0009976C 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
0009976E                            ; loc_71EA0:
0009976E                            @bgmfmloop:
0009976E 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00099772 6700                       		beq.s	@bgmfmnext		; Branch if not
00099774 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00099778 6600                       		bne.s	@bgmfmnext		; Branch if yes
0009977A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009977E 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00099782 4EBA 0000                  		jsr	WriteFMIorII(pc)
00099786                            ; loc_71EB8:
00099786                            @bgmfmnext:
00099786 DAC3                       		adda.w	d3,a5
00099788 51CC FFE4                  		dbf	d4,@bgmfmloop
0009978C                            
0009978C 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00099790 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00099792                            ; loc_71EC4:
00099792                            @sfxfmloop:
00099792 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00099796 6700                       		beq.s	@sfxfmnext		; Branch if not
00099798 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0009979C 6600                       		bne.s	@sfxfmnext		; Branch if yes
0009979E 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000997A2 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000997A6 4EBA 0000                  		jsr	WriteFMIorII(pc)
000997AA                            ; loc_71EDC:
000997AA                            @sfxfmnext:
000997AA DAC3                       		adda.w	d3,a5
000997AC 51CC FFE4                  		dbf	d4,@sfxfmloop
000997B0                            
000997B0 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
000997B4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000997B8 6700                       		beq.s	@unpausedallfm		; Branch if not
000997BA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000997BE 6600                       		bne.s	@unpausedallfm		; Branch if yes
000997C0 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
000997C4 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
000997C8 4EBA 0000                  		jsr	WriteFMIorII(pc)
000997CC                            ; loc_71EFE:
000997CC                            @unpausedallfm:
000997CC 6000 FD26                  		bra.w	DoStartZ80
000997D0                            
000997D0                            ; ---------------------------------------------------------------------------
000997D0                            ; Subroutine to	play a sound or	music track
000997D0                            ; ---------------------------------------------------------------------------
000997D0                            
000997D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000997D0                            
000997D0                            ; Sound_Play:
000997D0                            CycleSoundQueue:
000997D0 2079 0009 9212             		movea.l	(Go_SoundPriorities).l,a0
000997D6 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
000997DA 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
000997DC 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
000997DE                            ; loc_71F12:
000997DE                            @inputloop:
000997DE 1011                       		move.b	(a1),d0			; move track number to d0
000997E0 1200                       		move.b	d0,d1
000997E2 4219                       		clr.b	(a1)+			; Clear entry
000997E4 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
000997E8 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
000997EA 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
000997F0 6700                       		beq.s	@havesound		; If yes, branch
000997F2 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
000997F6 6000                       		bra.s	@nextinput
000997F8                            ; ===========================================================================
000997F8                            ; loc_71F2C:
000997F8                            @havesound:
000997F8 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
000997FC 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00099800 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00099802 6500                       		blo.s	@nextinput		; Branch if yes
00099804 1602                       		move.b	d2,d3			; Store new priority
00099806 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
0009980A                            ; loc_71F3E:
0009980A                            @nextinput:
0009980A 51CC FFD2                  		dbf	d4,@inputloop
0009980E                            
0009980E 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00099810 6B00                       		bmi.s	@locret
00099812 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00099814                            ; locret_71F4A:
00099814                            @locret:
00099814 4E75                       		rts	
00099816                            ; End of function CycleSoundQueue
00099816                            
00099816                            
00099816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099816                            
00099816                            ; Sound_ChkValue:
00099816                            PlaySoundID:
00099816 7E00                       		moveq	#0,d7
00099818 1E2E 0009                  		move.b	v_sound_id(a6),d7
0009981C 6700 0000                  		beq.w	StopAllSound
00099820 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00099822 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00099828                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00099828                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00099828                            		; See LevSel_NoCheat for more.
00099828 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
0009982C 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00099830 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00099834 6500 0000                  		blo.w	@locret			; Return if yes
00099838 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
0009983C 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00099840 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00099844 6500 0000                  		blo.w	@locret			; Return if yes
00099848 0C07 00D1                  		cmpi.b	#$D1,d7
0009984C 6500 0000                  		bcs.w	Sound_PlaySpecial
00099850 0C07 00DF                  		cmp.b	#$DF,d7
00099854 6F00 0000                  		ble.w	Sound_D1toDF
00099858 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
0009985C 6500 0000                  		blo.w	@locret			; Return if yes
00099860 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00099864 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00099866                            ; locret_71F8C:
00099866                            @locret:
00099866 4E75                       		rts	
00099868                            ; ===========================================================================
00099868                            
00099868                            Sound_E0toE4:
00099868 0407 00E0                  		subi.b	#flg__First,d7
0009986C E54F                       		lsl.w	#2,d7
0009986E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00099872                            ; ===========================================================================
00099872                            
00099872                            Sound_ExIndex:
00099872 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00099876 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
0009987A 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
0009987E 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00099882 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00099886                            ptr_flgend
00099886                            ; ===========================================================================
00099886                            ; ---------------------------------------------------------------------------
00099886                            ; Play "Say-gaa" PCM sound
00099886                            ; ---------------------------------------------------------------------------
00099886                            ; Sound_E1: PlaySega:
00099886                            PlaySegaSound:
00099886 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
0009988E 33FC 0000 00A1 1100        		startZ80
00099896 323C 0011                  		move.w	#$11,d1
0009989A                            ; loc_71FC0:
0009989A                            @busyloop_outer:
0009989A 303C FFFF                  		move.w	#-1,d0
0009989E                            ; loc_71FC4:
0009989E                            @busyloop:
0009989E 4E71                       		nop	
000998A0 51C8 FFFC                  		dbf	d0,@busyloop
000998A4                            
000998A4 51C9 FFF4                  		dbf	d1,@busyloop_outer
000998A8                            
000998A8 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
000998AA 4E75                       		rts	
000998AC                            ; ===========================================================================
000998AC                            ; ---------------------------------------------------------------------------
000998AC                            ; Play music track $81-$9F
000998AC                            ; ---------------------------------------------------------------------------
000998AC                            ; Sound_81to9F:
000998AC                            Sound_PlayBGM:
000998AC 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
000998B0 6600                       		bne.s	@bgmnot1up		; if not, branch
000998B2 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
000998B6 6600 0000                  		bne.w	@locdblret		; if yes, branch
000998BA 4BEE 0040                  		lea	v_music_track_ram(a6),a5
000998BE 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
000998C0                            ; loc_71FE6:
000998C0                            @clearsfxloop:
000998C0 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000998C4 DAFC 0030                  		adda.w	#TrackSz,a5
000998C8 51C8 FFF6                  		dbf	d0,@clearsfxloop
000998CC                            
000998CC 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000998D0 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
000998D2                            ; loc_71FF8:
000998D2                            @cleartrackplayloop:
000998D2 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
000998D6 DAFC 0030                  		adda.w	#TrackSz,a5
000998DA 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
000998DE                            
000998DE 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000998E0 204E                       		movea.l	a6,a0
000998E2 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000998E6 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
000998EA                            ; loc_72012:
000998EA                            @backupramloop:
000998EA 22D8                       		move.l	(a0)+,(a1)+
000998EC 51C8 FFFC                  		dbf	d0,@backupramloop
000998F0                            
000998F0 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
000998F6 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
000998F8 6000                       		bra.s	@bgm_loadMusic
000998FA                            ; ===========================================================================
000998FA                            ; loc_72024:
000998FA                            @bgmnot1up:
000998FA 422E 0027                  		clr.b	f_1up_playing(a6)
000998FE 422E 0026                  		clr.b	v_fadein_counter(a6)
00099902                            ; loc_7202C:
00099902                            @bgm_loadMusic:
00099902 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00099906 2879 0009 9222             		movea.l	(Go_SpeedUpIndex).l,a4
0009990C 0407 0081                  		subi.b	#bgm__First,d7
00099910 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00099916 2879 0009 921A             		movea.l	(Go_MusicIndex).l,a4
0009991C E54F                       		lsl.w	#2,d7
0009991E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00099922 7000                       		moveq	#0,d0
00099924 3014                       		move.w	(a4),d0			; load voice pointer
00099926 D08C                       		add.l	a4,d0			; It is a relative pointer
00099928 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
0009992C 102C 0005                  		move.b	5(a4),d0		; load tempo
00099930 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00099934                            		;tst.b	f_speedup(a6)
00099934                            		;beq.s	@nospeedshoes
00099934                            		;move.b	v_speeduptempo(a6),d0
00099934                            ; loc_72068:
00099934                            ;@nospeedshoes:
00099934 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00099938 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
0009993C 7200                       		moveq	#0,d1
0009993E 264C                       		movea.l	a4,a3
00099940 5C4C                       		addq.w	#6,a4			; Point past header
00099942 7E00                       		moveq	#0,d7
00099944 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00099948 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
0009994C 5307                       		subq.b	#1,d7
0009994E 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00099952 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00099956 7C30                       		moveq	#TrackSz,d6
00099958 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
0009995C 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00099960 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00099964                            ; loc_72098:
00099964                            @bmg_fmloadloop:
00099964 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00099968 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0009996C 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00099970 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00099974 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00099978 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0009997C 7000                       		moveq	#0,d0
0009997E 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00099980 D08B                       		add.l	a3,d0				; Relative pointer
00099982 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00099986 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
0009998A D2C6                       		adda.w	d6,a1
0009998C 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00099990                            		
00099990 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00099996 6600                       		bne.s	@silencefm6
00099998 702B                       		moveq	#$2B,d0		; DAC enable/disable register
0009999A 7200                       		moveq	#0,d1		; Disable DAC
0009999C 4EBA 0000                  		jsr	WriteFMI(pc)
000999A0 6000 0000                  		bra.w	@bgm_fmdone
000999A4                            ; ===========================================================================
000999A4                            ; loc_720D8:
000999A4                            @silencefm6:
000999A4 7028                       		moveq	#$28,d0		; Key on/off register
000999A6 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000999A8 4EBA 0000                  		jsr	WriteFMI(pc)
000999AC 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000999B0 727F                       		moveq	#$7F,d1		; Total silence
000999B2 4EBA 0000                  		jsr	WriteFMII(pc)
000999B6 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000999BA 727F                       		moveq	#$7F,d1		; Total silence
000999BC 4EBA 0000                  		jsr	WriteFMII(pc)
000999C0 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000999C4 727F                       		moveq	#$7F,d1		; Total silence
000999C6 4EBA 0000                  		jsr	WriteFMII(pc)
000999CA 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000999CE 727F                       		moveq	#$7F,d1		; Total silence
000999D0 4EBA 0000                  		jsr	WriteFMII(pc)
000999D4 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000999D8 123C 00C0                  		move.b	#$C0,d1		; Stereo
000999DC 4EBA 0000                  		jsr	WriteFMII(pc)
000999E0                            ; loc_72114:
000999E0                            @bgm_fmdone:
000999E0 7E00                       		moveq	#0,d7
000999E2 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000999E6 6700                       		beq.s	@bgm_psgdone	; branch if zero
000999E8 5307                       		subq.b	#1,d7
000999EA 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
000999EE 45FA 0000                  		lea	PSGInitBytes(pc),a2
000999F2                            ; loc_72126:
000999F2                            @bgm_psgloadloop:
000999F2 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000999F6 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000999FA 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000999FE 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00099A02 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00099A06 7000                       		moveq	#0,d0
00099A08 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00099A0A D08B                       		add.l	a3,d0				; Relative pointer
00099A0C 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00099A10 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00099A14 101C                       		move.b	(a4)+,d0			; load redundant byte
00099A16 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00099A1A D2C6                       		adda.w	d6,a1
00099A1C 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00099A20                            ; loc_72154:
00099A20                            @bgm_psgdone:
00099A20 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00099A24 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00099A26                            ; loc_7215A:
00099A26                            @sfxstoploop:
00099A26 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00099A28 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00099A2C 7000                       		moveq	#0,d0
00099A2E 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00099A32 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00099A34 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00099A36 E508                       		lsl.b	#2,d0			; Convert to index
00099A38 6000                       		bra.s	@gotchannelindex
00099A3A                            ; ===========================================================================
00099A3A                            ; loc_7216E:
00099A3A                            @sfxpsgchannel:
00099A3A E608                       		lsr.b	#3,d0		; Convert to index
00099A3C                            ; loc_72170:
00099A3C                            @gotchannelindex:
00099A3C 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00099A40 2070 0000                  		movea.l	(a0,d0.w),a0
00099A44 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00099A48                            ; loc_7217C:
00099A48                            @sfxnext:
00099A48 D2C6                       		adda.w	d6,a1
00099A4A 51CF FFDA                  		dbf	d7,@sfxstoploop
00099A4E                            
00099A4E 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00099A52 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00099A54 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099A5A                            ; loc_7218E:
00099A5A                            @checkspecialpsg:
00099A5A 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00099A5E 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00099A60 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099A66                            ; loc_7219A:
00099A66                            @sendfmnoteoff:
00099A66 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00099A6A 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00099A6C                            ; loc_721A0:
00099A6C                            @fmnoteoffloop:
00099A6C 4EBA 0000                  		jsr	FMNoteOff(pc)
00099A70 DAC6                       		adda.w	d6,a5
00099A72 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00099A76 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00099A78                            ; loc_721AC:
00099A78                            @psgnoteoffloop:
00099A78 4EBA 0000                  		jsr	PSGNoteOff(pc)
00099A7C DAC6                       		adda.w	d6,a5
00099A7E 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00099A82                            ; loc_721B6:
00099A82                            @locdblret:
00099A82 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00099A84 4E75                       		rts	
00099A86                            ; ===========================================================================
00099A86                            ; byte_721BA:
00099A86 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00099A8E 00                         		even
00099A8E                            ; byte_721C2:
00099A8E 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00099A92 00                         		even
00099A92                            ; ===========================================================================
00099A92                            ; ---------------------------------------------------------------------------
00099A92                            ; Play Spin Dash sound effect
00099A92                            ; ---------------------------------------------------------------------------
00099A92                            Sound_D1toDF:
00099A92 4A2E 0027                  		tst.b	$27(a6)
00099A96 6600 0000                  		bne.w	loc_722C6
00099A9A 4A2E 0004                  		tst.b	4(a6)
00099A9E 6600 0000                  		bne.w	loc_722C6
00099AA2 4A2E 0024                  		tst.b	$24(a6)
00099AA6 6600 0000                  		bne.w	loc_722C6
00099AAA 4238 C900                  		clr.b	($FFFFC900).w
00099AAE 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00099AB2 6600                       		bne.s	@cont3	; if not, branch
00099AB4 3F00                       		move.w	d0,-(sp)
00099AB6 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00099ABA 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00099ABE 6600                       		bne.s	@cont1		; if it is, branch
00099AC0 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00099AC4                            		
00099AC4                            @cont1:
00099AC4 5200                       		addq.b	#1,d0
00099AC6 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00099ACA 6400                       		bcc.s	@cont2		; if it has, branch
00099ACC 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00099AD0                            		
00099AD0                            @cont2:
00099AD0 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00099AD6 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00099ADC 301F                       		move.w	(sp)+,d0
00099ADE                            		
00099ADE                            @cont3:	
00099ADE 2079 0009 921E             		movea.l	(Go_SoundIndex).l,a0
00099AE4 0407 00A0                  		sub.b	#$A0,d7
00099AE8 6000                       		bra.s	SoundEffects_Common
00099AEA                            ; ---------------------------------------------------------------------------
00099AEA                            ; Play normal sound effect
00099AEA                            ; ---------------------------------------------------------------------------
00099AEA                            ; Sound_A0toCF:
00099AEA                            Sound_PlaySFX:
00099AEA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00099AEE 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00099AF2 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00099AF6 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00099AFA 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00099AFE 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00099B02 4238 C900                  		clr.b	($FFFFC900).w
00099B06 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00099B0A 6600                       		bne.s	Sound_notB5		; if not, branch
00099B0C 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00099B10 6600                       		bne.s	loc_721EE		; Branch if not
00099B12 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00099B16                            
00099B16                            loc_721EE:
00099B16 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00099B1C                            
00099B1C                            Sound_notB5:
00099B1C 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00099B20 6600                       		bne.s	Sound_notA7		; if not, branch
00099B22 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00099B26 6600 0000                  		bne.w	locret_722C4			; Return if not
00099B2A 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00099B30                            		
00099B30                            Sound_notA7:
00099B30 2079 0009 921E             		movea.l	(Go_SoundIndex).l,a0
00099B36 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00099B3A                            
00099B3A                            SoundEffects_Common:		
00099B3A E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00099B3C 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00099B40 224B                       		movea.l	a3,a1
00099B42 7200                       		moveq	#0,d1
00099B44 3219                       		move.w	(a1)+,d1		; Voice pointer
00099B46 D28B                       		add.l	a3,d1			; Relative pointer
00099B48 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00099B4A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00099B4A                            		; index entry is above $3F will cause a crash. This is actually the same way that
00099B4A                            		; this bug is fixed in Ristar's driver.
00099B4A 7E00                       		moveq	#0,d7	
00099B4C 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00099B4E 5307                       		subq.b	#1,d7
00099B50 7C30                       		moveq	#TrackSz,d6
00099B52                            
00099B52                            loc_72228:
00099B52 7600                       		moveq	#0,d3
00099B54 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00099B58 1803                       		move.b	d3,d4
00099B5A 6B00                       		bmi.s	loc_72244	; Branch if PSG
00099B5C 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00099B5E E54B                       		lsl.w	#2,d3
00099B60 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00099B64 2A75 3000                  		movea.l	(a5,d3.w),a5
00099B68 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00099B6C 6000                       		bra.s	loc_7226E
00099B6E                            ; ===========================================================================
00099B6E                            
00099B6E                            loc_72244:
00099B6E E64B                       		lsr.w	#3,d3
00099B70 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
00099B74 2A75 3000                  		movea.l	(a5,d3.w),a5
00099B78 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00099B7C 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00099B80 6600                       		bne.s	loc_7226E	; Branch if not
00099B82 1004                       		move.b	d4,d0
00099B84 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
00099B88 13C0 00C0 0011             		move.b	d0,(psg_input).l
00099B8E 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00099B92 13C0 00C0 0011             		move.b	d0,(psg_input).l
00099B98                            
00099B98                            loc_7226E:
00099B98 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
00099B9C 2A75 3000                  		movea.l	(a5,d3.w),a5
00099BA0 244D                       		movea.l	a5,a2
00099BA2 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00099BA4                            
00099BA4                            loc_72276:
00099BA4 429A                       		clr.l	(a2)+
00099BA6 51C8 FFFC                  		dbf	d0,loc_72276
00099BAA                            
00099BAA 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
00099BAC 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00099BB0 7000                       		moveq	#0,d0
00099BB2 3019                       		move.w	(a1)+,d0			; Track data pointer
00099BB4 D08B                       		add.l	a3,d0				; Relative pointer
00099BB6 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00099BBA 3B59 0008                  		move.w	(a1)+,8(a5)
00099BBE 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00099BC2 6700                       		beq.s	@cont		; if not, branch
00099BC4 3F00                       		move.w	d0,-(sp)
00099BC6 1038 C902                  		move.b	($FFFFC902).w,d0
00099BCA D12D 0008                  		add.b	d0,8(a5)
00099BCE 301F                       		move.w	(sp)+,d0
00099BD0                            		
00099BD0                            @cont:
00099BD0 1B7C 0001 000E             		move.b	#1,$E(a5)
00099BD6 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00099BDA 4A04                       		tst.b	d4				; Is this a PSG channel?
00099BDC 6B00                       		bmi.s	loc_722A8		; Branch if yes
00099BDE 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00099BE4 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00099BE8                            
00099BE8                            loc_722A8:
00099BE8 51CF FF68                  		dbf	d7,loc_72228
00099BEC                            
00099BEC 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00099BF0 6A00                       		bpl.s	loc_722B8				; Branch if not
00099BF2 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099BF8                            
00099BF8                            loc_722B8:
00099BF8 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00099BFC 6A00                       		bpl.s	locret_722C4						; Branch if not
00099BFE 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099C04                            
00099C04                            locret_722C4:
00099C04 4E75                       		rts	
00099C06                            ; ===========================================================================
00099C06                            
00099C06                            loc_722C6:
00099C06 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00099C08 4E75                       		rts	
00099C0A                            ; ===========================================================================
00099C0A                            ; ---------------------------------------------------------------------------
00099C0A                            ; RAM addresses for FM and PSG channel variables used by the SFX
00099C0A                            ; ---------------------------------------------------------------------------
00099C0A                            ; dword_722CC: BGMChannelRAM:
00099C0A                            SFX_BGMChannelRAM:
00099C0A 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00099C0E 0000 0000                  		dc.l 0
00099C12 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00099C16 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00099C1A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00099C1E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00099C22 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00099C26 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00099C2A                            ; dword_722EC: SFXChannelRAM:
00099C2A                            SFX_SFXChannelRAM:
00099C2A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00099C2E 0000 0000                  		dc.l 0
00099C32 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00099C36 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00099C3A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00099C3E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00099C42 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00099C46 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00099C4A                            ; ===========================================================================
00099C4A                            ; ---------------------------------------------------------------------------
00099C4A                            ; Play GHZ waterfall sound
00099C4A                            ; ---------------------------------------------------------------------------
00099C4A                            ; Sound_D0toDF:
00099C4A                            Sound_PlaySpecial:
00099C4A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00099C4E 6600 0000                  		bne.w	@locret			; Return if so
00099C52 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00099C56 6600 0000                  		bne.w	@locret			; Exit if it is
00099C5A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00099C5E 6600 0000                  		bne.w	@locret			; Exit if it is
00099C62 2079 0009 9216             		movea.l	(Go_SpecSoundIndex).l,a0
00099C68 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00099C6C E54F                       		lsl.w	#2,d7
00099C6E 2670 7000                  		movea.l	(a0,d7.w),a3
00099C72 224B                       		movea.l	a3,a1
00099C74 7000                       		moveq	#0,d0
00099C76 3019                       		move.w	(a1)+,d0			; Voice pointer
00099C78 D08B                       		add.l	a3,d0				; Relative pointer
00099C7A 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00099C7E 1A19                       		move.b	(a1)+,d5			; Dividing timing
00099C80                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00099C80                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00099C80 7E00                       		moveq	#0,d7	
00099C82 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00099C84 5307                       		subq.b	#1,d7
00099C86 7C30                       		moveq	#TrackSz,d6
00099C88                            ; loc_72348:
00099C88                            @sfxloadloop:
00099C88 1829 0001                  		move.b	1(a1),d4					; Voice control bits
00099C8C 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00099C8E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099C94 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00099C98 6000                       		bra.s	@sfxinitpsg
00099C9A                            ; ===========================================================================
00099C9A                            ; loc_7235A:
00099C9A                            @sfxoverridepsg:
00099C9A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099CA0 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00099CA4                            ; loc_72364:
00099CA4                            @sfxinitpsg:
00099CA4 244D                       		movea.l	a5,a2
00099CA6 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00099CA8                            ; loc_72368:
00099CA8                            @clearsfxtrackram:
00099CA8 429A                       		clr.l	(a2)+
00099CAA 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00099CAE                            
00099CAE 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00099CB0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00099CB4 7000                       		moveq	#0,d0
00099CB6 3019                       		move.w	(a1)+,d0			; Track data pointer
00099CB8 D08B                       		add.l	a3,d0				; Relative pointer
00099CBA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00099CBE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00099CC2 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00099CC8 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
00099CCC 4A04                       		tst.b	d4				; Is this a PSG channel?
00099CCE 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00099CD0 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00099CD6                            ; loc_72396:
00099CD6                            @sfxpsginitdone:
00099CD6 51CF FFB0                  		dbf	d7,@sfxloadloop
00099CDA                            
00099CDA 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00099CDE 6A00                       		bpl.s	@doneoverride					; Branch if not
00099CE0 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099CE6                            ; loc_723A6:
00099CE6                            @doneoverride:
00099CE6 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00099CEA 6A00                       		bpl.s	@locret						; Branch if not
00099CEC 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00099CF2 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00099CF6 13C4 00C0 0011             		move.b	d4,(psg_input).l
00099CFC 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00099D00 13C4 00C0 0011             		move.b	d4,(psg_input).l
00099D06                            ; locret_723C6:
00099D06                            @locret:
00099D06 4E75                       		rts	
00099D08                            ; End of function PlaySoundID
00099D08                            
00099D08                            ; ===========================================================================
00099D08                            ; ---------------------------------------------------------------------------
00099D08                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00099D08                            ; ---------------------------------------------------------------------------
00099D08                            ; The first block would have been used for overriding the music tracks
00099D08                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00099D08                            ; The third block would be used to set up the Special SFX
00099D08                            ; The second block, however, is for the SFX tracks, which have a higher priority
00099D08                            ; and would be checked for if they're currently playing
00099D08                            ; If they are, then the third block would be used again, this time to mark
00099D08                            ; the new tracks as 'currently playing'
00099D08                            
00099D08                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00099D08                            
00099D08                            ; BGMFM4PSG3RAM:
00099D08                            ;SpecSFX_BGMChannelRAM:
00099D08 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00099D0C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00099D10                            ; SFXFM4PSG3RAM:
00099D10                            ;SpecSFX_SFXChannelRAM:
00099D10 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00099D14 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00099D18                            ; SpecialSFXFM4PSG3RAM:
00099D18                            ;SpecSFX_SpecSFXChannelRAM:
00099D18 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00099D1C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00099D20                            
00099D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099D20                            
00099D20                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00099D20                            StopSFX:
00099D20 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00099D22 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00099D26 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00099D28                            ; loc_723EA:
00099D28                            @trackloop:
00099D28 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00099D2A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00099D2E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00099D32 7600                       		moveq	#0,d3
00099D34 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00099D38 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00099D3A 4EBA 0000                  		jsr	FMNoteOff(pc)
00099D3E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00099D42 6600                       		bne.s	@getfmpointer					; Branch if not
00099D44 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00099D48 6A00                       		bpl.s	@getfmpointer					; Branch if not
00099D4A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00099D4A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00099D4A                            		; is playing its sound!
00099D4A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00099D4E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00099D52 6000                       		bra.s	@gotfmpointer
00099D54                            ; ===========================================================================
00099D54                            ; loc_72416:
00099D54                            @getfmpointer:
00099D54 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00099D56 E50B                       		lsl.b	#2,d3
00099D58 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00099D5C 264D                       		movea.l	a5,a3
00099D5E 2A70 3000                  		movea.l	(a0,d3.w),a5
00099D62 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00099D66                            ; loc_72428:
00099D66                            @gotfmpointer:
00099D66 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00099D6A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00099D6E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00099D72 4EBA 0000                  		jsr	SetVoice(pc)
00099D76 2A4B                       		movea.l	a3,a5
00099D78 6000                       		bra.s	@nexttrack
00099D7A                            ; ===========================================================================
00099D7A                            ; loc_7243C:
00099D7A                            @trackpsg:
00099D7A 4EBA 0000                  		jsr	PSGNoteOff(pc)
00099D7E 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00099D82 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00099D86 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00099D88 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
00099D8C 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00099D8E E60B                       		lsr.b	#3,d3
00099D90 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00099D94 2070 3000                  		movea.l	(a0,d3.w),a0
00099D98                            ; loc_7245A:
00099D98                            @gotpsgpointer:
00099D98 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00099D9C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00099DA0 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00099DA6 6600                       		bne.s	@nexttrack			; Branch if not
00099DA8 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00099DB0                            ; loc_72472:
00099DB0                            @nexttrack:
00099DB0 DAFC 0030                  		adda.w	#TrackSz,a5
00099DB4 51CF FF72                  		dbf	d7,@trackloop
00099DB8                            
00099DB8 4E75                       		rts	
00099DBA                            ; End of function StopSFX
00099DBA                            
00099DBA                            
00099DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099DBA                            
00099DBA                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
00099DBA                            StopSpecialSFX:
00099DBA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00099DBE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099DC0 6A00                       		bpl.s	@fadedfm		; Branch if not
00099DC2 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00099DC6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00099DCA 6600                       		bne.s	@fadedfm		; Branch if not
00099DCC 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00099DD0 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00099DD4 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00099DD8 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00099DDC 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099DDE 6A00                       		bpl.s	@fadedfm		; Branch if not
00099DE0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00099DE4 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00099DE8 4EBA 0000                  		jsr	SetVoice(pc)
00099DEC                            ; loc_724AE:
00099DEC                            @fadedfm:
00099DEC 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00099DF0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099DF2 6A00                       		bpl.s	@fadedpsg		; Branch if not
00099DF4 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00099DF8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00099DFC 6600                       		bne.s	@fadedpsg		; Return if not
00099DFE 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00099E02 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00099E06 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00099E0A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00099E0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099E10 6A00                       		bpl.s	@fadedpsg		; Return if not
00099E12 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00099E18 6600                       		bne.s	@fadedpsg			; Return if not
00099E1A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00099E22                            ; locret_724E4:
00099E22                            @fadedpsg:
00099E22 4E75                       		rts	
00099E24                            ; End of function StopSpecialSFX
00099E24                            
00099E24                            ; ===========================================================================
00099E24                            ; ---------------------------------------------------------------------------
00099E24                            ; Fade out music
00099E24                            ; ---------------------------------------------------------------------------
00099E24                            ; Sound_E0:
00099E24                            FadeOutMusic:
00099E24 4EBA FEFA                  		jsr	StopSFX(pc)
00099E28 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00099E2C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00099E32 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00099E38 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00099E3C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00099E40 4E75                       		rts	
00099E42                            
00099E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099E42                            
00099E42                            ; sub_72504:
00099E42                            DoFadeOut:
00099E42 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00099E46 6700                       		beq.s	@continuefade		; Branch if yes
00099E48 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00099E4C 4E75                       		rts	
00099E4E                            ; ===========================================================================
00099E4E                            ; loc_72510:
00099E4E                            @continuefade:
00099E4E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00099E52 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00099E56 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00099E5C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00099E60 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00099E62                            ; loc_72524:
00099E62                            @fmloop:
00099E62 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099E64 6A00                       		bpl.s	@nextfm			; Branch if not
00099E66 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00099E6A 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00099E6C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00099E70 6000                       		bra.s	@nextfm
00099E72                            ; ===========================================================================
00099E72                            ; loc_72534:
00099E72                            @sendfmtl:
00099E72 4EBA 0000                  		jsr	SendVoiceTL(pc)
00099E76                            ; loc_72538:
00099E76                            @nextfm:
00099E76 DAFC 0030                  		adda.w	#TrackSz,a5
00099E7A 51CF FFE6                  		dbf	d7,@fmloop
00099E7E                            
00099E7E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00099E80                            ; loc_72542:
00099E80                            @psgloop:
00099E80 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099E82 6A00                       		bpl.s	@nextpsg		; branch if not
00099E84 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00099E88 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00099E8E 6500                       		blo.s	@sendpsgvol		; Branch if not
00099E90 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00099E94 6000                       		bra.s	@nextpsg
00099E96                            ; ===========================================================================
00099E96                            ; loc_72558:
00099E96                            @sendpsgvol:
00099E96 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
00099E9A 4EBA 0000                  		jsr	SetPSGVolume(pc)
00099E9E                            ; loc_72560:
00099E9E                            @nextpsg:
00099E9E DAFC 0030                  		adda.w	#TrackSz,a5
00099EA2 51CF FFDC                  		dbf	d7,@psgloop
00099EA6                            
00099EA6 4E75                       		rts	
00099EA8                            ; End of function DoFadeOut
00099EA8                            
00099EA8                            
00099EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099EA8                            
00099EA8                            ; sub_7256A:
00099EA8                            FMSilenceAll:
00099EA8 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
00099EAA 7028                       		moveq	#$28,d0		; FM key on/off register
00099EAC                            ; loc_7256E:
00099EAC                            @noteoffloop:
00099EAC 1203                       		move.b	d3,d1
00099EAE 4EBA 0000                  		jsr	WriteFMI(pc)
00099EB2 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00099EB4 4EBA 0000                  		jsr	WriteFMI(pc)
00099EB8 51CB FFF2                  		dbf	d3,@noteoffloop
00099EBC                            
00099EBC 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00099EBE 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00099EC0 7802                       		moveq	#2,d4		; ... for all 3 channels...
00099EC2                            ; loc_72584:
00099EC2                            @channelloop:
00099EC2 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00099EC4                            ; loc_72586:
00099EC4                            @channeltlloop:
00099EC4 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00099EC8 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
00099ECC 5840                       		addq.w	#4,d0		; Next TL operator
00099ECE 51CB FFF4                  		dbf	d3,@channeltlloop
00099ED2                            
00099ED2 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00099ED6 51CC FFEA                  		dbf	d4,@channelloop
00099EDA                            
00099EDA 4E75                       		rts	
00099EDC                            ; End of function FMSilenceAll
00099EDC                            
00099EDC                            ; ===========================================================================
00099EDC                            ; ---------------------------------------------------------------------------
00099EDC                            ; Stop music
00099EDC                            ; ---------------------------------------------------------------------------
00099EDC                            ; Sound_E4: StopSoundAndMusic:
00099EDC                            StopAllSound:
00099EDC 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00099EDE 123C 0080                  		move.b	#$80,d1		; Enable DAC
00099EE2 4EBA 0000                  		jsr	WriteFMI(pc)
00099EE6 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00099EE8 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00099EEA 4EBA 0000                  		jsr	WriteFMI(pc)
00099EEE 204E                       		movea.l	a6,a0
00099EF0                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00099EF0                            		; Remove the '-$10' to fix this.
00099EF0 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00099EF4                            ; loc_725B6:
00099EF4                            @clearramloop:
00099EF4 4298                       		clr.l	(a0)+
00099EF6 51C8 FFFC                  		dbf	d0,@clearramloop
00099EFA                            
00099EFA 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00099F00 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00099F04 6000 0000                  		bra.w	PSGSilenceAll
00099F08                            
00099F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099F08                            
00099F08                            ; sub_725CA:
00099F08                            InitMusicPlayback:
00099F08 204E                       		movea.l	a6,a0
00099F0A                            		; Save several values
00099F0A 1216                       		move.b	v_sndprio(a6),d1
00099F0C 142E 0027                  		move.b	f_1up_playing(a6),d2
00099F10 162E 002A                  		move.b	f_speedup(a6),d3
00099F14 182E 0026                  		move.b	v_fadein_counter(a6),d4
00099F18                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00099F18 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00099F1C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00099F20                            ; loc_725E4:
00099F20                            @clearramloop:
00099F20 4298                       		clr.l	(a0)+
00099F22 51C8 FFFC                  		dbf	d0,@clearramloop
00099F26                            
00099F26                            		; Restore the values saved above
00099F26 1C81                       		move.b	d1,v_sndprio(a6)
00099F28 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00099F2C 1D43 002A                  		move.b	d3,f_speedup(a6)
00099F30 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00099F34 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00099F38 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00099F3E                            		; DANGER! This silences ALL channels, even the ones being used
00099F3E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00099F3E                            		; doesn't affect SFX channels, either.
00099F3E                            		; This should be replaced with an 'rts'.
00099F3E 4EBA FF68                  		jsr	FMSilenceAll(pc)
00099F42 6000 0000                  		bra.w	PSGSilenceAll
00099F46                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00099F46                            		; don't do a very good job of setting up the music tracks.
00099F46                            		; Tracks that aren't defined in a music file's header don't have
00099F46                            		; their channels defined, meaning @sendfmnoteoff won't silence
00099F46                            		; hardware properly. In combination with removing the above
00099F46                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00099F46                            		; notes.
00099F46                            		; To fix this, I suggest using this code, instead of an 'rts':
00099F46                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00099F46                            		;lea	FMDACInitBytes(pc),a2
00099F46                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00099F46                            		;bsr.s	@writeloop
00099F46                            		;lea	PSGInitBytes(pc),a2
00099F46                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00099F46                            
00099F46                            ;@writeloop:
00099F46                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00099F46                            		;lea	TrackSz(a1),a1		; Next track
00099F46                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00099F46                            
00099F46                            		;rts
00099F46                            	
00099F46                            ; End of function InitMusicPlayback
00099F46                            
00099F46                            
00099F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099F46                            
00099F46                            ; sub_7260C:
00099F46                            TempoWait:
00099F46 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00099F4C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00099F50 7030                       		moveq	#TrackSz,d0
00099F52 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00099F54                            ; loc_7261A:
00099F54                            @tempoloop:
00099F54 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00099F56 D0C0                       		adda.w	d0,a0	; Advance to next track
00099F58 51C9 FFFA                  		dbf	d1,@tempoloop
00099F5C                            
00099F5C 4E75                       		rts	
00099F5E                            ; End of function TempoWait
00099F5E                            
00099F5E                            ; ===========================================================================
00099F5E                            ; ---------------------------------------------------------------------------
00099F5E                            ; Speed	up music
00099F5E                            ; ---------------------------------------------------------------------------
00099F5E                            ; Sound_E2:
00099F5E                            SpeedUpMusic:
00099F5E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00099F62 6600                       		bne.s	@speedup_1up
00099F64 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00099F6A 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00099F70 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
00099F76 4E75                       		rts	
00099F78                            ; ===========================================================================
00099F78                            ; loc_7263E:
00099F78                            @speedup_1up:
00099F78 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00099F7E 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00099F84 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00099F8A 4E75                       		rts	
00099F8C                            ; ===========================================================================
00099F8C                            ; ---------------------------------------------------------------------------
00099F8C                            ; Change music back to normal speed
00099F8C                            ; ---------------------------------------------------------------------------
00099F8C                            ; Sound_E3:
00099F8C                            SlowDownMusic:
00099F8C 4A2E 0027                  		tst.b	f_1up_playing(a6)
00099F90 6600                       		bne.s	@slowdown_1up
00099F92 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
00099F98 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00099F9E 422E 002A                  		clr.b	f_speedup(a6)
00099FA2 4E75                       		rts	
00099FA4                            ; ===========================================================================
00099FA4                            ; loc_7266A:
00099FA4                            @slowdown_1up:
00099FA4 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00099FAA 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00099FB0 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00099FB4 4E75                       		rts	
00099FB6                            
00099FB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00099FB6                            
00099FB6                            ; sub_7267C:
00099FB6                            DoFadeIn:
00099FB6 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00099FBA 6700                       		beq.s	@continuefade		; Branch if yes
00099FBC 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00099FC0 4E75                       		rts	
00099FC2                            ; ===========================================================================
00099FC2                            ; loc_72688:
00099FC2                            @continuefade:
00099FC2 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00099FC6 6700                       		beq.s	@fadedone		; Branch if yes
00099FC8 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00099FCC 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00099FD2 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00099FD6 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00099FD8                            ; loc_7269E:
00099FD8                            @fmloop:
00099FD8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099FDA 6A00                       		bpl.s	@nextfm			; Branch if not
00099FDC 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00099FE0 4EBA 0000                  		jsr	SendVoiceTL(pc)
00099FE4                            ; loc_726AA:
00099FE4                            @nextfm:
00099FE4 DAFC 0030                  		adda.w	#TrackSz,a5
00099FE8 51CF FFEE                  		dbf	d7,@fmloop
00099FEC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00099FEE                            ; loc_726B4:
00099FEE                            @psgloop:
00099FEE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00099FF0 6A00                       		bpl.s	@nextpsg		; Branch if not
00099FF2 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00099FF6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00099FFA 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00099FFE 6500                       		blo.s	@sendpsgvol		; Branch if yes
0009A000 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0009A002                            ; loc_726C8:
0009A002                            @sendpsgvol:
0009A002 4EBA 0000                  		jsr	SetPSGVolume(pc)
0009A006                            ; loc_726CC:
0009A006                            @nextpsg:
0009A006 DAFC 0030                  		adda.w	#TrackSz,a5
0009A00A 51CF FFE2                  		dbf	d7,@psgloop
0009A00E 4E75                       		rts	
0009A010                            ; ===========================================================================
0009A010                            ; loc_726D6:
0009A010                            @fadedone:
0009A010 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0009A016 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0009A01A 4E75                       		rts	
0009A01C                            ; End of function DoFadeIn
0009A01C                            
0009A01C                            ; ===========================================================================
0009A01C                            ; loc_726E2:
0009A01C                            FMNoteOn:
0009A01C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
0009A020 6600                       		bne.s	@locret		; Return if so
0009A022 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009A026 6600                       		bne.s	@locret		; Return if so
0009A028 7028                       		moveq	#$28,d0		; Note on/off register
0009A02A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0009A02E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0009A032 6000 0000                  		bra.w	WriteFMI
0009A036                            ; ===========================================================================
0009A036                            ; locret_726FC:
0009A036                            @locret:
0009A036 4E75                       		rts	
0009A038                            
0009A038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A038                            
0009A038                            ; sub_726FE:
0009A038                            FMNoteOff:
0009A038 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
0009A03C 6600                       		bne.s	locret_72714	; Return if yes
0009A03E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A042 6600                       		bne.s	locret_72714	; Return if yes
0009A044                            ; loc_7270A:
0009A044                            SendFMNoteOff:
0009A044 7028                       		moveq	#$28,d0		; Note on/off register
0009A046 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0009A04A 6000 0000                  		bra.w	WriteFMI
0009A04E                            ; ===========================================================================
0009A04E                            
0009A04E                            locret_72714:
0009A04E 4E75                       		rts	
0009A050                            ; End of function FMNoteOff
0009A050                            
0009A050                            ; ===========================================================================
0009A050                            ; loc_72716:
0009A050                            WriteFMIorIIMain:
0009A050 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0009A054 6600                       		bne.s	@locret		; Return if yes
0009A056 6000 0000                  		bra.w	WriteFMIorII
0009A05A                            ; ===========================================================================
0009A05A                            ; locret_72720:
0009A05A                            @locret:
0009A05A 4E75                       		rts	
0009A05C                            
0009A05C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A05C                            
0009A05C                            ; sub_72722:
0009A05C                            WriteFMIorII:
0009A05C 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0009A062 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0009A064 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0009A068                            ; End of function WriteFMIorII
0009A068                            
0009A068                            
0009A068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A068                            
0009A068                            ; The reason I think this is an *early* SMPS 68k Type 1b
0009A068                            ; is because this subroutine is the one from Type 1a:
0009A068                            ; other Type 1b drivers have a newer, optimised version.
0009A068                            ; The driver itself is Type 1b, with this odd exception.
0009A068                            
0009A068                            ; sub_7272E:
0009A068                            WriteFMI:
0009A068 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A06E 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A072 66F4                       		bne.s	WriteFMI	; Loop if so
0009A074 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
0009A07A 4E71                       		nop	
0009A07C 4E71                       		nop	
0009A07E 4E71                       		nop	
0009A080                            ; loc_72746:
0009A080                            @waitloop:
0009A080 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A086 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A08A 66F4                       		bne.s	@waitloop	; Loop if so
0009A08C                            
0009A08C 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
0009A092 4E75                       		rts	
0009A094                            ; End of function WriteFMI
0009A094                            
0009A094                            ; ===========================================================================
0009A094                            ; loc_7275A:
0009A094                            WriteFMIIPart:
0009A094 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
0009A098 0882 0002                  		bclr	#2,d2			; Clear chip toggle
0009A09C D002                       		add.b	d2,d0			; Add in to destination register
0009A09E                            
0009A09E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A09E                            
0009A09E                            ; sub_72764:
0009A09E                            WriteFMII:
0009A09E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A0A4 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A0A8 66F4                       		bne.s	WriteFMII	; Loop if so
0009A0AA 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
0009A0B0 4E71                       		nop	
0009A0B2 4E71                       		nop	
0009A0B4 4E71                       		nop	
0009A0B6                            ; loc_7277C:
0009A0B6                            @waitloop:
0009A0B6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0009A0BC 0802 0007                  		btst	#7,d2		; Is FM busy?
0009A0C0 66F4                       		bne.s	@waitloop	; Loop if so
0009A0C2                            
0009A0C2 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
0009A0C8 4E75                       		rts	
0009A0CA                            ; End of function WriteFMII
0009A0CA                            
0009A0CA                            ; ===========================================================================
0009A0CA                            ; ---------------------------------------------------------------------------
0009A0CA                            ; FM Note Values: b-0 to a#8
0009A0CA                            ; ---------------------------------------------------------------------------
0009A0CA                            ; word_72790: FM_Notes:
0009A0CA                            FMFrequencies:
0009A0CA 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
0009A0E2 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
0009A0FA 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0009A112 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0009A12A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0009A142 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0009A15A 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0009A172 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
0009A18A                            
0009A18A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A18A                            
0009A18A                            ; sub_72850:
0009A18A                            PSGUpdateTrack:
0009A18A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
0009A18E 6600                       		bne.s	@notegoing
0009A190 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
0009A194 4EBA 0000                  		jsr	PSGDoNext(pc)
0009A198 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
0009A19C 6000 0000                  		bra.w	PSGDoVolFX
0009A1A0                            ; ===========================================================================
0009A1A0                            ; loc_72866:
0009A1A0                            @notegoing:
0009A1A0 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
0009A1A4 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
0009A1A8 4EBA F4EA                  		jsr	DoModulation(pc)
0009A1AC 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
0009A1B0 4E75                       		rts
0009A1B2                            ; End of function PSGUpdateTrack
0009A1B2                            
0009A1B2                            
0009A1B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A1B2                            
0009A1B2                            ; sub_72878:
0009A1B2                            PSGDoNext:
0009A1B2 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
0009A1B6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
0009A1BA                            ; loc_72880:
0009A1BA                            @noteloop:
0009A1BA 7A00                       		moveq	#0,d5
0009A1BC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
0009A1BE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
0009A1C2 6500                       		blo.s	@gotnote	; Branch if not
0009A1C4 4EBA 0000                  		jsr	CoordFlag(pc)
0009A1C8 60F0                       		bra.s	@noteloop
0009A1CA                            ; ===========================================================================
0009A1CA                            ; loc_72890:
0009A1CA                            @gotnote:
0009A1CA 4A05                       		tst.b	d5		; Is it a note?
0009A1CC 6A00                       		bpl.s	@gotduration	; Branch if not
0009A1CE 4EBA 0000                  		jsr	PSGSetFreq(pc)
0009A1D2 1A1C                       		move.b	(a4)+,d5	; Get another byte
0009A1D4 4A05                       		tst.b	d5		; Is it a duration?
0009A1D6 6A00                       		bpl.s	@gotduration	; Branch if yes
0009A1D8 534C                       		subq.w	#1,a4		; Put byte back
0009A1DA 6000 F452                  		bra.w	FinishTrackUpdate
0009A1DE                            ; ===========================================================================
0009A1DE                            ; loc_728A4:
0009A1DE                            @gotduration:
0009A1DE 4EBA F42E                  		jsr	SetDuration(pc)
0009A1E2 6000 F44A                  		bra.w	FinishTrackUpdate
0009A1E6                            ; End of function PSGDoNext
0009A1E6                            
0009A1E6                            
0009A1E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A1E6                            
0009A1E6                            ; sub_728AC:
0009A1E6                            PSGSetFreq:
0009A1E6 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
0009A1EA 6500                       		bcs.s	@restpsg	; If $80, put track at rest
0009A1EC DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
0009A1F0 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
0009A1F4 E34D                       		lsl.w	#1,d5
0009A1F6 41FA 0000                  		lea	PSGFrequencies(pc),a0
0009A1FA 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
0009A200 6000 F42C                  		bra.w	FinishTrackUpdate
0009A204                            ; ===========================================================================
0009A204                            ; loc_728CA:
0009A204                            @restpsg:
0009A204 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A208 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0009A20E 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0009A212 6000 0000                  		bra.w	PSGNoteOff
0009A216                            ; End of function PSGSetFreq
0009A216                            
0009A216                            
0009A216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A216                            
0009A216                            ; sub_728DC:
0009A216                            PSGDoNoteOn:
0009A216 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0009A21A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0009A21C                            ; End of function PSGDoNoteOn
0009A21C                            
0009A21C                            
0009A21C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A21C                            
0009A21C                            ; sub_728E2:
0009A21C                            PSGUpdateFreq:
0009A21C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
0009A220 4880                       		ext.w	d0
0009A222 DC40                       		add.w	d0,d6		; Add to frequency
0009A224 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0009A228 6600                       		bne.s	@locret		; Return if yes
0009A22A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009A22E 6600                       		bne.s	@locret		; Return if yes
0009A230 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0009A234 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
0009A238 6600                       		bne.s	@notnoise	; Branch if not
0009A23A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0009A23E                            ; loc_72904:
0009A23E                            @notnoise:
0009A23E 3206                       		move.w	d6,d1
0009A240 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0009A244 8001                       		or.b	d1,d0		; Latch tone data to channel
0009A246 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0009A248 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0009A24C 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009A252 13C6 00C0 0011             		move.b	d6,(psg_input).l
0009A258                            ; locret_7291E:
0009A258                            @locret:
0009A258 4E75                       		rts	
0009A25A                            ; End of function PSGUpdateFreq
0009A25A                            
0009A25A                            ; ===========================================================================
0009A25A                            ; loc_72920:
0009A25A                            PSGSetRest:
0009A25A 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
0009A25E 4E75                       		rts	
0009A260                            
0009A260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A260                            
0009A260                            ; sub_72926:
0009A260                            PSGUpdateVolFX:
0009A260 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0009A264 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0009A268                            ; loc_7292E:
0009A268                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0009A268 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
0009A26C 7000                       		moveq	#0,d0
0009A26E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
0009A272 6700                       		beq.s	SetPSGVolume
0009A274 2079 0009 9226             		movea.l	(Go_PSGIndex).l,a0
0009A27A 5340                       		subq.w	#1,d0
0009A27C E548                       		lsl.w	#2,d0
0009A27E 2070 0000                  		movea.l	(a0,d0.w),a0
0009A282 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0009A286 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
0009A28A 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
0009A28E 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
0009A292 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
0009A294 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
0009A298 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
0009A29A                            ; loc_72960:
0009A29A                            @gotflutter:
0009A29A DC40                       		add.w	d0,d6		; Add volume envelope value to volume
0009A29C 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
0009A2A0 6500                       		blo.s	SetPSGVolume	; Branch if not
0009A2A2 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
0009A2A4                            ; End of function PSGUpdateVolFX
0009A2A4                            
0009A2A4                            
0009A2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A2A4                            
0009A2A4                            ; sub_7296A:
0009A2A4                            SetPSGVolume:
0009A2A4 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009A2A8 6600                       		bne.s	locret_7298A	; Return if so
0009A2AA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A2AE 6600                       		bne.s	locret_7298A	; Return if so
0009A2B0 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
0009A2B4 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
0009A2B6                            ; loc_7297C:
0009A2B6                            PSGSendVolume:
0009A2B6 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
0009A2BA 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
0009A2BE 13C6 00C0 0011             		move.b	d6,(psg_input).l
0009A2C4                            
0009A2C4                            locret_7298A:
0009A2C4 4E75                       		rts	
0009A2C6                            ; ===========================================================================
0009A2C6                            ; loc_7298C: PSGCheckNoteFill:
0009A2C6                            PSGCheckNoteTimeout:
0009A2C6 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0009A2CA 67EA                       		beq.s	PSGSendVolume			; Branch if not
0009A2CC 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
0009A2D0 66E4                       		bne.s	PSGSendVolume			; Branch if not
0009A2D2 4E75                       		rts	
0009A2D4                            ; End of function SetPSGVolume
0009A2D4                            
0009A2D4                            ; ===========================================================================
0009A2D4                            ; loc_7299A: FlutterDone:
0009A2D4                            VolEnvHold:
0009A2D4 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0009A2D8 4E75                       		rts	
0009A2DA                            
0009A2DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A2DA                            
0009A2DA                            ; sub_729A0:
0009A2DA                            PSGNoteOff:
0009A2DA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A2DE 6600                       		bne.s	locret_729B4	; Return if so
0009A2E0                            ; loc_729A6:
0009A2E0                            SendPSGNoteOff:
0009A2E0 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
0009A2E4 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
0009A2E8 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009A2EE                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0009A2EE                            		; risk of music accidentally playing noise because it can't detect if
0009A2EE                            		; the PSG4/noise channel needs muting on track initialisation.
0009A2EE                            		; S&K's driver fixes it by doing this:
0009A2EE 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
0009A2F2 6600                       		bne.s	locret_729B4
0009A2F4 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
0009A2FC                            
0009A2FC                            locret_729B4:
0009A2FC 4E75                       		rts	
0009A2FE                            ; End of function PSGNoteOff
0009A2FE                            
0009A2FE                            
0009A2FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A2FE                            
0009A2FE                            ; sub_729B6:
0009A2FE                            PSGSilenceAll:
0009A2FE 41F9 00C0 0011             		lea	(psg_input).l,a0
0009A304 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
0009A308 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
0009A30C 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
0009A310 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
0009A314 4E75                       		rts	
0009A316                            ; End of function PSGSilenceAll
0009A316                            
0009A316                            ; ===========================================================================
0009A316                            ; word_729CE:
0009A316                            PSGFrequencies:
0009A316 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
0009A326 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
0009A336 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
0009A346 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
0009A356 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
0009A366 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
0009A376 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
0009A386 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
0009A396 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
0009A3A2                            
0009A3A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A3A2                            
0009A3A2                            ; sub_72A5A:
0009A3A2                            CoordFlag:
0009A3A2 0445 00E0                  		subi.w	#$E0,d5
0009A3A6 E54D                       		lsl.w	#2,d5
0009A3A8 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
0009A3AC                            ; End of function CoordFlag
0009A3AC                            
0009A3AC                            ; ===========================================================================
0009A3AC                            ; loc_72A64:
0009A3AC                            coordflagLookup:
0009A3AC 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
0009A3B0                            ; ===========================================================================
0009A3B0 6000 0000                  		bra.w	cfDetune		; $E1
0009A3B4                            ; ===========================================================================
0009A3B4 6000 0000                  		bra.w	cfSetCommunication	; $E2
0009A3B8                            ; ===========================================================================
0009A3B8 6000 0000                  		bra.w	cfJumpReturn		; $E3
0009A3BC                            ; ===========================================================================
0009A3BC 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
0009A3C0                            ; ===========================================================================
0009A3C0 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
0009A3C4                            ; ===========================================================================
0009A3C4 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
0009A3C8                            ; ===========================================================================
0009A3C8 6000 0000                  		bra.w	cfHoldNote		; $E7
0009A3CC                            ; ===========================================================================
0009A3CC 6000 0000                  		bra.w	cfNoteTimeout		; $E8
0009A3D0                            ; ===========================================================================
0009A3D0 6000 0000                  		bra.w	cfChangeTransposition	; $E9
0009A3D4                            ; ===========================================================================
0009A3D4 6000 0000                  		bra.w	cfSetTempo		; $EA
0009A3D8                            ; ===========================================================================
0009A3D8 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0009A3DC                            ; ===========================================================================
0009A3DC 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
0009A3E0                            ; ===========================================================================
0009A3E0 6000 0000                  		bra.w	cfClearPush		; $ED
0009A3E4                            ; ===========================================================================
0009A3E4 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
0009A3E8                            ; ===========================================================================
0009A3E8 6000 0000                  		bra.w	cfSetVoice		; $EF
0009A3EC                            ; ===========================================================================
0009A3EC 6000 0000                  		bra.w	cfModulation		; $F0
0009A3F0                            ; ===========================================================================
0009A3F0 6000 0000                  		bra.w	cfEnableModulation	; $F1
0009A3F4                            ; ===========================================================================
0009A3F4 6000 0000                  		bra.w	cfStopTrack		; $F2
0009A3F8                            ; ===========================================================================
0009A3F8 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
0009A3FC                            ; ===========================================================================
0009A3FC 6000 0000                  		bra.w	cfDisableModulation	; $F4
0009A400                            ; ===========================================================================
0009A400 6000 0000                  		bra.w	cfSetPSGTone		; $F5
0009A404                            ; ===========================================================================
0009A404 6000 0000                  		bra.w	cfJumpTo		; $F6
0009A408                            ; ===========================================================================
0009A408 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0009A40C                            ; ===========================================================================
0009A40C 6000 0000                  		bra.w	cfJumpToGosub		; $F8
0009A410                            ; ===========================================================================
0009A410 6000 0000                  		bra.w	cfOpF9			; $F9
0009A414                            ; ===========================================================================
0009A414                            ; loc_72ACC:
0009A414                            cfPanningAMSFMS:
0009A414 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
0009A416 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009A41A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009A41C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
0009A420 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
0009A424 8200                       		or.b	d0,d1			; Mask in new value
0009A426 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009A42A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009A42E 6000 FC20                  		bra.w	WriteFMIorIIMain
0009A432                            ; ===========================================================================
0009A432                            
0009A432                            locret_72AEA:
0009A432 4E75                       		rts	
0009A434                            ; ===========================================================================
0009A434                            ; loc_72AEC: cfAlterNotes:
0009A434                            cfDetune:
0009A434 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
0009A438 4E75                       		rts	
0009A43A                            ; ===========================================================================
0009A43A                            ; loc_72AF2: cfUnknown1:
0009A43A                            cfSetCommunication:
0009A43A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0009A43E 4E75                       		rts	
0009A440                            ; ===========================================================================
0009A440                            ; loc_72AF8:
0009A440                            cfJumpReturn:
0009A440 7000                       		moveq	#0,d0
0009A442 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
0009A446 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009A44A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
0009A452 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
0009A454 5800                       		addq.b	#4,d0			; Actually 'pop' value
0009A456 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0009A45A 4E75                       		rts	
0009A45C                            ; ===========================================================================
0009A45C                            ; loc_72B14:
0009A45C                            cfFadeInToPrevious:
0009A45C 204E                       		movea.l	a6,a0
0009A45E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0009A462 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
0009A466                            ; loc_72B1E:
0009A466                            @restoreramloop:
0009A466 20D9                       		move.l	(a1)+,(a0)+
0009A468 51C8 FFFC                  		dbf	d0,@restoreramloop
0009A46C                            
0009A46C 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
0009A472 264D                       		movea.l	a5,a3
0009A474 1C3C 0028                  		move.b	#$28,d6
0009A478 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
0009A47C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0009A47E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0009A482                            ; loc_72B3A:
0009A482                            @fmloop:
0009A482 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009A486 6700                       		beq.s	@nextfm		; Branch if not
0009A488 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009A48C DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
0009A490 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A494 6600                       		bne.s	@nextfm		; Branch if yes
0009A496 7000                       		moveq	#0,d0
0009A498 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
0009A49C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009A4A0 4EBA 0000                  		jsr	SetVoice(pc)
0009A4A4                            ; loc_72B5C:
0009A4A4                            @nextfm:
0009A4A4 DAFC 0030                  		adda.w	#TrackSz,a5
0009A4A8 51CF FFD8                  		dbf	d7,@fmloop
0009A4AC                            
0009A4AC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
0009A4AE                            ; loc_72B66:
0009A4AE                            @psgloop:
0009A4AE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
0009A4B2 6700                       		beq.s	@nextpsg	; Branch if not
0009A4B4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0009A4B8 4EBA FE20                  		jsr	PSGNoteOff(pc)
0009A4BC DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
0009A4C0                            ; loc_72B78:
0009A4C0                            @nextpsg:
0009A4C0 DAFC 0030                  		adda.w	#TrackSz,a5
0009A4C4 51CF FFE8                  		dbf	d7,@psgloop
0009A4C8                            		
0009A4C8 2A4B                       		movea.l	a3,a5
0009A4CA 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
0009A4D0 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
0009A4D6 422E 0027                  		clr.b	f_1up_playing(a6)
0009A4DA 33FC 0000 00A1 1100        		startZ80
0009A4E2 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
0009A4E4 4E75                       		rts	
0009A4E6                            ; ===========================================================================
0009A4E6                            ; loc_72B9E:
0009A4E6                            cfSetTempoDivider:
0009A4E6 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
0009A4EA 4E75                       		rts	
0009A4EC                            ; ===========================================================================
0009A4EC                            ; loc_72BA4: cfSetVolume:
0009A4EC                            cfChangeFMVolume:
0009A4EC 101C                       		move.b	(a4)+,d0		; Get parameter
0009A4EE D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
0009A4F2 6000 0000                  		bra.w	SendVoiceTL
0009A4F6                            ; ===========================================================================
0009A4F6                            ; loc_72BAE: cfPreventAttack:
0009A4F6                            cfHoldNote:
0009A4F6 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
0009A4FA 4E75                       		rts	
0009A4FC                            ; ===========================================================================
0009A4FC                            ; loc_72BB4: cfNoteFill
0009A4FC                            cfNoteTimeout:
0009A4FC 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
0009A500 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
0009A504 4E75                       		rts	
0009A506                            ; ===========================================================================
0009A506                            ; loc_72BBE: cfAddKey:
0009A506                            cfChangeTransposition:
0009A506 101C                       		move.b	(a4)+,d0		; Get parameter
0009A508 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
0009A50C 4E75                       		rts	
0009A50E                            ; ===========================================================================
0009A50E                            ; loc_72BC6:
0009A50E                            cfSetTempo:
0009A50E 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
0009A512 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
0009A516 4E75                       		rts	
0009A518                            ; ===========================================================================
0009A518                            ; loc_72BD0: cfSetTempoMod:
0009A518                            cfSetTempoDividerAll:
0009A518 41EE 0040                  		lea	v_music_track_ram(a6),a0
0009A51C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
0009A51E 7230                       		moveq	#TrackSz,d1
0009A520 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
0009A522                            ; loc_72BDA:
0009A522                            @trackloop:
0009A522 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
0009A526 D0C1                       		adda.w	d1,a0
0009A528 51CA FFF8                  		dbf	d2,@trackloop
0009A52C                            
0009A52C 4E75                       		rts	
0009A52E                            ; ===========================================================================
0009A52E                            ; loc_72BE6: cfChangeVolume:
0009A52E                            cfChangePSGVolume:
0009A52E 101C                       		move.b	(a4)+,d0		; Get volume change
0009A530 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
0009A534 4E75                       		rts	
0009A536                            ; ===========================================================================
0009A536                            ; loc_72BEE:
0009A536                            cfClearPush:
0009A536 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
0009A53A 4E75                       		rts	
0009A53C                            ; ===========================================================================
0009A53C                            ; loc_72BF4:
0009A53C                            cfStopSpecialFM4:
0009A53C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0009A540 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009A544 4EBA FAF2                  		jsr	FMNoteOff(pc)
0009A548 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
0009A54C 6B00                       		bmi.s	@locexit					; Branch if yes
0009A54E 264D                       		movea.l	a5,a3
0009A550 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
0009A554 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009A558 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009A55C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A560 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009A564 4EBA 0000                  		jsr	SetVoice(pc)
0009A568 2A4B                       		movea.l	a3,a5
0009A56A                            ; loc_72C22:
0009A56A                            @locexit:
0009A56A 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
0009A56C 4E75                       		rts	
0009A56E                            ; ===========================================================================
0009A56E                            ; loc_72C26:
0009A56E                            cfSetVoice:
0009A56E 7000                       		moveq	#0,d0
0009A570 101C                       		move.b	(a4)+,d0		; Get new voice
0009A572 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
0009A576 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
0009A57A 6600 0000                  		bne.w	locret_72CAA		; Return if yes
0009A57E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
0009A582 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
0009A586 6700                       		beq.s	SetVoice		; If yes, branch
0009A588 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
0009A58C 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
0009A590 6B00                       		bmi.s	SetVoice		; If yes, branch
0009A592 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
0009A596                            
0009A596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A596                            
0009A596                            ; sub_72C4E:
0009A596                            SetVoice:
0009A596 5340                       		subq.w	#1,d0
0009A598 6B00                       		bmi.s	@havevoiceptr
0009A59A 323C 0019                  		move.w	#25,d1
0009A59E                            ; loc_72C56:
0009A59E                            @voicemultiply:
0009A59E D2C1                       		adda.w	d1,a1
0009A5A0 51C8 FFFC                  		dbf	d0,@voicemultiply
0009A5A4                            ; loc_72C5C:
0009A5A4                            @havevoiceptr:
0009A5A4 1219                       		move.b	(a1)+,d1		; feedback/algorithm
0009A5A6 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
0009A5AA 1801                       		move.b	d1,d4
0009A5AC 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
0009A5B0 4EBA FAAA                  		jsr	WriteFMIorII(pc)
0009A5B4 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
0009A5B8 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
0009A5BA                            ; loc_72C72:
0009A5BA                            @sendvoiceloop:
0009A5BA 101A                       		move.b	(a2)+,d0
0009A5BC 1219                       		move.b	(a1)+,d1
0009A5BE 4EBA FA9C                  		jsr	WriteFMIorII(pc)
0009A5C2 51CB FFF6                  		dbf	d3,@sendvoiceloop
0009A5C6                            
0009A5C6 7A03                       		moveq	#3,d5
0009A5C8 0244 0007                  		andi.w	#7,d4			; Get algorithm
0009A5CC 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
0009A5D0 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
0009A5D4                            ; loc_72C8C:
0009A5D4                            @sendtlloop:
0009A5D4 101A                       		move.b	(a2)+,d0
0009A5D6 1219                       		move.b	(a1)+,d1
0009A5D8 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009A5DA 6400                       		bcc.s	@sendtl		; Branch if not
0009A5DC D203                       		add.b	d3,d1		; Include additional attenuation
0009A5DE                            ; loc_72C96:
0009A5DE                            @sendtl:
0009A5DE 4EBA FA7C                  		jsr	WriteFMIorII(pc)
0009A5E2 51CD FFF0                  		dbf	d5,@sendtlloop
0009A5E6                            		
0009A5E6 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
0009A5EA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
0009A5EE 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
0009A5F2                            
0009A5F2                            locret_72CAA:
0009A5F2 4E75                       		rts	
0009A5F4                            ; End of function SetVoice
0009A5F4                            
0009A5F4                            ; ===========================================================================
0009A5F4                            ; byte_72CAC:
0009A5F4 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0009A5FC                            
0009A5FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009A5FC                            
0009A5FC                            ; sub_72CB4:
0009A5FC                            SendVoiceTL:
0009A5FC 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009A600 6600                       		bne.s	@locret		; Return if so
0009A602 7000                       		moveq	#0,d0
0009A604 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009A608 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
0009A60C 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009A610 6700                       		beq.s	@gotvoiceptr
0009A612                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
0009A612                            		; of a6!
0009A612 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
0009A616 4A2E 000E                  		tst.b	f_voice_selector(a6)
0009A61A 6B00                       		bmi.s	@gotvoiceptr
0009A61C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
0009A620                            ; loc_72CD8:
0009A620                            @gotvoiceptr:
0009A620 5340                       		subq.w	#1,d0
0009A622 6B00                       		bmi.s	@gotvoice
0009A624 323C 0019                  		move.w	#25,d1
0009A628                            ; loc_72CE0:
0009A628                            @voicemultiply:
0009A628 D2C1                       		adda.w	d1,a1
0009A62A 51C8 FFFC                  		dbf	d0,@voicemultiply
0009A62E                            ; loc_72CE6:
0009A62E                            @gotvoice:
0009A62E D2FC 0015                  		adda.w	#21,a1				; Want TL
0009A632 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
0009A636 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
0009A63A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
0009A63E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
0009A642 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
0009A646 6B00                       		bmi.s	@locret				; If negative, stop
0009A648 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
0009A64A                            ; loc_72D02:
0009A64A                            @sendtlloop:
0009A64A 101A                       		move.b	(a2)+,d0
0009A64C 1219                       		move.b	(a1)+,d1
0009A64E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
0009A650 6400                       		bcc.s	@senttl		; Branch if not
0009A652 D203                       		add.b	d3,d1		; Include additional attenuation
0009A654 6500                       		bcs.s	@senttl		; Branch on overflow
0009A656 4EBA FA04                  		jsr	WriteFMIorII(pc)
0009A65A                            ; loc_72D12:
0009A65A                            @senttl:
0009A65A 51CD FFEE                  		dbf	d5,@sendtlloop
0009A65E                            ; locret_72D16:
0009A65E                            @locret:
0009A65E 4E75                       		rts	
0009A660                            ; End of function SendVoiceTL
0009A660                            
0009A660                            ; ===========================================================================
0009A660                            ; byte_72D18:
0009A660                            FMInstrumentOperatorTable:
0009A660 30                         		dc.b  $30		; Detune/multiple operator 1
0009A661 38                         		dc.b  $38		; Detune/multiple operator 3
0009A662 34                         		dc.b  $34		; Detune/multiple operator 2
0009A663 3C                         		dc.b  $3C		; Detune/multiple operator 4
0009A664 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
0009A665 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
0009A666 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
0009A667 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
0009A668 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
0009A669 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
0009A66A 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
0009A66B 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
0009A66C 70                         		dc.b  $70		; Secondary decay rate operator 1
0009A66D 78                         		dc.b  $78		; Secondary decay rate operator 3
0009A66E 74                         		dc.b  $74		; Secondary decay rate operator 2
0009A66F 7C                         		dc.b  $7C		; Secondary decay rate operator 4
0009A670 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
0009A671 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
0009A672 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
0009A673 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
0009A674                            FMInstrumentOperatorTable_End
0009A674                            ; byte_72D2C:
0009A674                            FMInstrumentTLTable:
0009A674 40                         		dc.b  $40		; Total level operator 1
0009A675 48                         		dc.b  $48		; Total level operator 3
0009A676 44                         		dc.b  $44		; Total level operator 2
0009A677 4C                         		dc.b  $4C		; Total level operator 4
0009A678                            FMInstrumentTLTable_End
0009A678                            ; ===========================================================================
0009A678                            ; loc_72D30:
0009A678                            cfModulation:
0009A678 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
0009A67C 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
0009A680 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
0009A684 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
0009A688 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0009A68C 101C                       		move.b	(a4)+,d0			; Modulation steps...
0009A68E E208                       		lsr.b	#1,d0				; ... divided by 2...
0009A690 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
0009A694 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
0009A698 4E75                       		rts	
0009A69A                            ; ===========================================================================
0009A69A                            ; loc_72D52:
0009A69A                            cfEnableModulation:
0009A69A 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
0009A69E 4E75                       		rts	
0009A6A0                            ; ===========================================================================
0009A6A0                            ; loc_72D58:
0009A6A0                            cfStopTrack:
0009A6A0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0009A6A4 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0009A6A8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009A6AC 6B00                       		bmi.s	@stoppsg		; Branch if yes
0009A6AE 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
0009A6B2 6B00 0000                  		bmi.w	@locexit		; Exit if yes
0009A6B6 4EBA F980                  		jsr	FMNoteOff(pc)
0009A6BA 6000                       		bra.s	@stoppedchannel
0009A6BC                            ; ===========================================================================
0009A6BC                            ; loc_72D74:
0009A6BC                            @stoppsg:
0009A6BC 4EBA FC1C                  		jsr	PSGNoteOff(pc)
0009A6C0                            ; loc_72D78:
0009A6C0                            @stoppedchannel:
0009A6C0 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
0009A6C4 6A00 0000                  		bpl.w	@locexit		; Exit if not
0009A6C8 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0009A6CA 7000                       		moveq	#0,d0
0009A6CC 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
0009A6D0 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
0009A6D2 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
0009A6D6 264D                       		movea.l	a5,a3
0009A6D8 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0009A6DC 6600                       		bne.s	@getpointer		; Branch if not
0009A6DE 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0009A6E2 6A00                       		bpl.s	@getpointer		; Branch if not
0009A6E4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009A6E8 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0009A6EC 6000                       		bra.s	@gotpointer
0009A6EE                            ; ===========================================================================
0009A6EE                            ; loc_72DA8:
0009A6EE                            @getpointer:
0009A6EE 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
0009A6F0 E508                       		lsl.b	#2,d0
0009A6F2 2A70 0000                  		movea.l	(a0,d0.w),a5
0009A6F6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009A6F8 6A00                       		bpl.s	@novoiceupd		; Branch if not
0009A6FA 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
0009A6FE                            ; loc_72DB8:
0009A6FE                            @gotpointer:
0009A6FE 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009A702 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009A706 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0009A70A 4EBA FE8A                  		jsr	SetVoice(pc)
0009A70E                            ; loc_72DC8:
0009A70E                            @novoiceupd:
0009A70E 2A4B                       		movea.l	a3,a5
0009A710 6000                       		bra.s	@locexit
0009A712                            ; ===========================================================================
0009A712                            ; loc_72DCC:
0009A712                            @getpsgptr:
0009A712 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0009A716 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
0009A718 6A00                       		bpl.s	@getchannelptr	; Branch if not
0009A71A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
0009A71E 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009A720 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
0009A724 6700                       		beq.s	@gotchannelptr	; Branch if yes
0009A726                            ; loc_72DE0:
0009A726                            @getchannelptr:
0009A726 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
0009A72A E608                       		lsr.b	#3,d0
0009A72C 2070 0000                  		movea.l	(a0,d0.w),a0
0009A730                            ; loc_72DEA:
0009A730                            @gotchannelptr:
0009A730 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
0009A734 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
0009A738 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
0009A73E 6600                       		bne.s	@locexit			; Branch if not
0009A740 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
0009A748                            ; loc_72E02:
0009A748                            @locexit:
0009A748 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
0009A74A 4E75                       		rts	
0009A74C                            ; ===========================================================================
0009A74C                            ; loc_72E06:
0009A74C                            cfSetPSGNoise:
0009A74C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
0009A752 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
0009A756 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
0009A75A 6600                       		bne.s	@locret				; Return if yes
0009A75C 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
0009A764                            ; locret_72E1E:
0009A764                            @locret:
0009A764 4E75                       		rts	
0009A766                            ; ===========================================================================
0009A766                            ; loc_72E20:
0009A766                            cfDisableModulation:
0009A766 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
0009A76A 4E75                       		rts	
0009A76C                            ; ===========================================================================
0009A76C                            ; loc_72E26:
0009A76C                            cfSetPSGTone:
0009A76C 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
0009A770 4E75                       		rts	
0009A772                            ; ===========================================================================
0009A772                            ; loc_72E2C:
0009A772                            cfJumpTo:
0009A772 101C                       		move.b	(a4)+,d0	; High byte of offset
0009A774 E148                       		lsl.w	#8,d0		; Shift it into place
0009A776 101C                       		move.b	(a4)+,d0	; Low byte of offset
0009A778 D8C0                       		adda.w	d0,a4		; Add to current position
0009A77A 534C                       		subq.w	#1,a4		; Put back one byte
0009A77C 4E75                       		rts	
0009A77E                            ; ===========================================================================
0009A77E                            ; loc_72E38:
0009A77E                            cfRepeatAtPos:
0009A77E 7000                       		moveq	#0,d0
0009A780 101C                       		move.b	(a4)+,d0			; Loop index
0009A782 121C                       		move.b	(a4)+,d1			; Repeat count
0009A784 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
0009A788 6600                       		bne.s	@loopexists			; Branch if yes
0009A78A 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
0009A78E                            ; loc_72E48:
0009A78E                            @loopexists:
0009A78E 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
0009A792 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
0009A794 544C                       		addq.w	#2,a4				; Skip target address
0009A796 4E75                       		rts	
0009A798                            ; ===========================================================================
0009A798                            ; loc_72E52:
0009A798                            cfJumpToGosub:
0009A798 7000                       		moveq	#0,d0
0009A79A 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
0009A79E 5900                       		subq.b	#4,d0				; Add space for another target
0009A7A0 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
0009A7A4 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
0009A7A8 60C8                       		bra.s	cfJumpTo
0009A7AA                            ; ===========================================================================
0009A7AA                            ; loc_72E64:
0009A7AA                            cfOpF9:
0009A7AA 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
0009A7AE 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009A7B2 4EBA F8B4                  		jsr	WriteFMI(pc)
0009A7B6 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
0009A7BA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
0009A7BE 6000 F8A8                  		bra.w	WriteFMI
0009A7C2                            ; ===========================================================================
0009A7C2                            
0009A7C2                            Kos_Z80:
0009A7C2                            		incbin	"sound\z80.bin", 0, $15
0009A7D7 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
0009A7D8                            		incbin	"sound\z80.bin", $16, 6
0009A7DE 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
0009A7DF                            		incbin	"sound\z80.bin", $1D, $93
0009A872 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
0009A874                            		incbin	"sound\z80.bin", $B2, 1
0009A875 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
0009A877                            		incbin	"sound\z80.bin", $B5, $16AB
0009BF18                            		even
0009BF18                            
0009BF18                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009D23C 00                         		even
0009D23C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009EAC4                            		even
0009EAC4                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A6444 00                         		even
000A6444                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A7C58 00                         		even
000A7C58                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A89FE                            		even
000A89FE                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A9DB6                            		even
000A9DB6                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000AA6AE 00                         		even
000AA6AE                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000AA6AE                            extralifejingle_Header:
000AA6AE                            	smpsHeaderStartSong 1
000AA6B0 0703                       	smpsHeaderChan      $07, $03
000AA6B2 0100                       	smpsHeaderTempo     $01, $00
000AA6B4                            
000AA6B8 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000AA6BC 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000AA6C0 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000AA6C4 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000AA6C8 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000AA6CC 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000AA6E2                            
000AA6E2                            ; DAC Data
000AA6E2                            extralifejingle_DAC:
000AA6E2 807F 55                    	dc.b	nRst, $7F, $55
000AA6E5 E4                         	smpsFade
000AA6E6                            ; PSG1 Data
000AA6E6                            extralifejingle_PSG1:
000AA6E6                            ; PSG2 Data
000AA6E6                            extralifejingle_PSG2:
000AA6E6                            ; PSG3 Data
000AA6E6                            extralifejingle_PSG3:
000AA6E6 F2                         	smpsStop
000AA6E7                            
000AA6E7                            ; FM1 Data
000AA6E7                            extralifejingle_FM1:
000AA6E7 EF00                       	smpsSetvoice        $00
000AA6E9 E616                       	smpsAlterVol        $16
000AA6EB E0C0                       	smpsPan             panCenter, $00
000AA6ED A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000AA6F9 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000AA6FD F2                         	smpsStop
000AA6FE                            
000AA6FE                            ; FM2 Data
000AA6FE                            extralifejingle_FM2:
000AA6FE EF01                       	smpsSetvoice        $01
000AA700 E616                       	smpsAlterVol        $16
000AA702 E0C0                       	smpsPan             panCenter, $00
000AA704 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000AA710 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000AA714 F2                         	smpsStop
000AA715                            
000AA715                            ; FM3 Data
000AA715                            extralifejingle_FM3:
000AA715 EF01                       	smpsSetvoice        $01
000AA717 E616                       	smpsAlterVol        $16
000AA719 E0C0                       	smpsPan             panCenter, $00
000AA71B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000AA727 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000AA72B F2                         	smpsStop
000AA72C                            
000AA72C                            ; FM4 Data
000AA72C                            extralifejingle_FM4:
000AA72C EF02                       	smpsSetvoice        $02
000AA72E E0C0                       	smpsPan             panCenter, $00
000AA730 8001                       	dc.b	nRst, $01
000AA732 E616                       	smpsAlterVol        $16
000AA734 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000AA740 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000AA744 F2                         	smpsStop
000AA745                            
000AA745                            ; FM5 Data
000AA745                            extralifejingle_FM5:
000AA745 EF03                       	smpsSetvoice        $03
000AA747 E602                       	smpsAlterVol        $02
000AA749 E0C0                       	smpsPan             panCenter, $00
000AA74B 8001                       	dc.b	nRst, $01
000AA74D EF05                       	smpsSetvoice        $05
000AA74F E60A                       	smpsAlterVol        $0A
000AA751 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000AA75D B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000AA769 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000AA775 C1C4 80                    	dc.b	nE5, nG5, nRst
000AA778 F2                         	smpsStop
000AA779                            
000AA779                            ; FM6 Data
000AA779                            extralifejingle_FM6:
000AA779 EF04                       	smpsSetvoice        $04
000AA77B E607                       	smpsAlterVol        $07
000AA77D E0C0                       	smpsPan             panCenter, $00
000AA77F 8001                       	dc.b	nRst, $01
000AA781 EF06                       	smpsSetvoice        $06
000AA783 E6F9                       	smpsAlterVol        $F9
000AA785 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000AA78C F2                         	smpsStop
000AA78D                            
000AA78D                            extralifejingle_Voices:
000AA78D                            ;	Voice $00
000AA78D                            ;	$3A
000AA78D                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000AA78D                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000AA78D                            	smpsVcAlgorithm     $02
000AA78D                            	smpsVcFeedback      $07
000AA78D                            	smpsVcUnusedBits    $00
000AA78D                            	smpsVcDetune        $03, $07, $07, $03
000AA78D                            	smpsVcCoarseFreq    $01, $04, $03, $04
000AA78D                            	smpsVcRateScale     $00, $00, $00, $00
000AA78D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA78D                            	smpsVcAmpMod        $00, $00, $00, $00
000AA78D                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000AA78D                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA78D                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA78D                            	smpsVcReleaseRate   $05, $03, $03, $03
000AA7A6                            
000AA7A6                            ;	Voice $01
000AA7A6                            ;	$3A
000AA7A6                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000AA7A6                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000AA7A6                            	smpsVcAlgorithm     $02
000AA7A6                            	smpsVcFeedback      $07
000AA7A6                            	smpsVcUnusedBits    $00
000AA7A6                            	smpsVcDetune        $03, $07, $07, $03
000AA7A6                            	smpsVcCoarseFreq    $01, $04, $03, $04
000AA7A6                            	smpsVcRateScale     $00, $00, $00, $00
000AA7A6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA7A6                            	smpsVcAmpMod        $00, $00, $00, $00
000AA7A6                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000AA7A6                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA7A6                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA7A6                            	smpsVcReleaseRate   $05, $03, $03, $03
000AA7BF                            
000AA7BF                            ;	Voice $02
000AA7BF                            ;	$3A
000AA7BF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000AA7BF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000AA7BF                            	smpsVcAlgorithm     $02
000AA7BF                            	smpsVcFeedback      $07
000AA7BF                            	smpsVcUnusedBits    $00
000AA7BF                            	smpsVcDetune        $03, $07, $07, $03
000AA7BF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000AA7BF                            	smpsVcRateScale     $00, $00, $00, $00
000AA7BF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AA7BF                            	smpsVcAmpMod        $00, $00, $00, $00
000AA7BF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000AA7BF                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA7BF                            	smpsVcDecayLevel    $00, $00, $00, $00
000AA7BF                            	smpsVcReleaseRate   $05, $03, $03, $03
000AA7D8                            
000AA7D8                            ;	Voice $03
000AA7D8                            ;	$00
000AA7D8                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000AA7D8                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000AA7D8                            	smpsVcAlgorithm     $00
000AA7D8                            	smpsVcFeedback      $00
000AA7D8                            	smpsVcUnusedBits    $00
000AA7D8                            	smpsVcDetune        $00, $00, $00, $00
000AA7D8                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000AA7D8                            	smpsVcRateScale     $00, $00, $00, $00
000AA7D8                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000AA7D8                            	smpsVcAmpMod        $00, $00, $00, $00
000AA7D8                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000AA7D8                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA7D8                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AA7D8                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000AA7F1                            
000AA7F1                            ;	Voice $04
000AA7F1                            ;	$03
000AA7F1                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000AA7F1                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000AA7F1                            	smpsVcAlgorithm     $03
000AA7F1                            	smpsVcFeedback      $00
000AA7F1                            	smpsVcUnusedBits    $00
000AA7F1                            	smpsVcDetune        $03, $04, $04, $06
000AA7F1                            	smpsVcCoarseFreq    $01, $00, $00, $06
000AA7F1                            	smpsVcRateScale     $00, $00, $00, $00
000AA7F1                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000AA7F1                            	smpsVcAmpMod        $00, $00, $00, $00
000AA7F1                            	smpsVcDecayRate1    $01, $02, $05, $0E
000AA7F1                            	smpsVcDecayRate2    $06, $04, $00, $01
000AA7F1                            	smpsVcDecayLevel    $01, $01, $06, $0A
000AA7F1                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000AA80A                            
000AA80A                            ;	Voice $05
000AA80A                            ;	$34
000AA80A                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000AA80A                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000AA80A                            	smpsVcAlgorithm     $04
000AA80A                            	smpsVcFeedback      $06
000AA80A                            	smpsVcUnusedBits    $00
000AA80A                            	smpsVcDetune        $07, $00, $07, $03
000AA80A                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000AA80A                            	smpsVcRateScale     $00, $01, $00, $02
000AA80A                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000AA80A                            	smpsVcAmpMod        $00, $00, $00, $00
000AA80A                            	smpsVcDecayRate1    $08, $07, $07, $14
000AA80A                            	smpsVcDecayRate2    $00, $00, $00, $00
000AA80A                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000AA80A                            	smpsVcReleaseRate   $07, $07, $04, $06
000AA823                            
000AA823                            ;	Voice $06
000AA823                            ;	$30
000AA823                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000AA823                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000AA823                            	smpsVcAlgorithm     $00
000AA823                            	smpsVcFeedback      $06
000AA823                            	smpsVcUnusedBits    $00
000AA823                            	smpsVcDetune        $00, $00, $00, $00
000AA823                            	smpsVcCoarseFreq    $01, $00, $00, $01
000AA823                            	smpsVcRateScale     $01, $00, $00, $02
000AA823                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000AA823                            	smpsVcAmpMod        $00, $00, $00, $00
000AA823                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000AA823                            	smpsVcDecayRate2    $08, $05, $18, $08
000AA823                            	smpsVcDecayLevel    $01, $00, $00, $06
000AA823                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000AA83C                            
000AA83C                            
000AA83C                            		even
000AA83C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000AB094 00                         		even
000AB094                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000AB5B4                            		even
000AB5B4                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000AB876 00                         		even
000AB876                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000AC6CE                            		even
000AC6CE                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000AC91A 00                         		even
000AC91A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000ACC50 00                         		even
000ACC50                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000ACDFC 00                         		even
000ACDFC                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AD00A 00                         		even
000AD00A                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AD2EE 00                         		even
000AD2EE                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000ADA1E 00                         		even
000ADA1E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000ADAEC                            		even
000ADAEC                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000ADF5A 00                         		even
000ADF5A                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000AEA50                            		even
000AEA50                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000AF5A6                            		even
000AF5A6                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000B08AC 00                         		even
000B08AC                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000B08AC                            PasswordEntry_Header:
000B08AC                            	smpsHeaderStartSong 3
000B08AE 0603                       	smpsHeaderChan      $06, $03
000B08B0 0105                       	smpsHeaderTempo     $01, $05
000B08B2                            
000B08B6 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000B08BA 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000B08BE 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000B08C2 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000B08C6 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000B08DC                            
000B08DC                            ; FM1 Data
000B08DC                            PasswordEntry_FM1:
000B08DC EF00                       	smpsSetvoice        $00
000B08E3                            
000B08E3                            PasswordEntry_Jump00:
000B08E3 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000B08EF C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000B08FB C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000B0907 C918 CB                    	dc.b	nC6, $18, nD6
000B090A F6FF D7                    	smpsJump            PasswordEntry_Jump00
000B090D                            
000B090D                            ; FM2 Data
000B090D                            PasswordEntry_FM2:
000B090D EF01                       	smpsSetvoice        $01
000B090F                            
000B090F                            PasswordEntry_Jump03:
000B090F B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000B091B AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000B0927 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000B0933 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000B093D F6FF D0                    	smpsJump            PasswordEntry_Jump03
000B0940                            
000B0940                            ; FM3 Data
000B0940                            PasswordEntry_FM3:
000B0940 E080                       	smpsPan             panLeft, $00
000B0942 EF02                       	smpsSetvoice        $02
000B0944                            
000B0944                            PasswordEntry_Jump02:
000B0944 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000B0950 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000B095C C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000B0968 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000B0974 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000B0980 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000B098C BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000B0998 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000B09A4 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000B09B0 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000B09BC BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000B09C4 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000B09C7                            
000B09C7                            ; FM4 Data
000B09C7                            PasswordEntry_FM4:
000B09C7 E040                       	smpsPan             panRight, $00
000B09C9 EF02                       	smpsSetvoice        $02
000B09CB                            
000B09CB                            PasswordEntry_Jump01:
000B09CB C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000B09D7 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000B09E3 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000B09EF C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000B09FB BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000B0A07 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000B0A13 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000B0A1F BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000B0A2B BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000B0A37 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000B0A43 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000B0A4B F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000B0A4E                            
000B0A4E                            ; FM5 Data
000B0A4E                            PasswordEntry_FM5:
000B0A4E EF00                       	smpsSetvoice        $00
000B0A50 E1FB                       	smpsAlterNote       $FB
000B0A52 800C                       	dc.b	nRst, $0C
000B0A54 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000B0A57                            
000B0A57                            ; PSG1 Data
000B0A57                            PasswordEntry_PSG1:
000B0A57 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000B0A63 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000B0A6F C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000B0A7B CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000B0A87 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000B0A93 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000B0A9F C810 C408                  	dc.b	nB5, $10, nG5, $08
000B0AA3 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000B0AA6                            
000B0AA6                            ; PSG2 Data
000B0AA6                            PasswordEntry_PSG2:
000B0AA6 E1FF                       	smpsAlterNote       $FF
000B0AA8 800C                       	dc.b	nRst, $0C
000B0AAA F6FF AB                    	smpsJump            PasswordEntry_PSG1
000B0AAD                            
000B0AAD                            ; PSG3 Data
000B0AAD                            PasswordEntry_PSG3:
000B0AAD F502                       	smpsPSGvoice        fTone_02
000B0AAF F3E7                       	smpsPSGform         $E7
000B0AB1 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000B0ABD C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000B0AC9 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000B0AD0 F503                       	smpsPSGvoice        fTone_03
000B0AD2 C5                         	dc.b	nAb5
000B0AD3 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000B0AD6                            
000B0AD6                            ; DAC Data
000B0AD6                            PasswordEntry_DAC:
000B0AD6 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000B0AE2 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000B0AEA F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000B0AEF 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000B0AFB 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000B0B03                            
000B0B03                            PasswordEntry_Loop00:
000B0B03 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000B0B0F 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000B0B17 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000B0B1C 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000B0B28 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000B0B32 F6FF A2                    	smpsJump            PasswordEntry_DAC
000B0B35                            
000B0B35                            PasswordEntry_Voices:
000B0B35                            ;	Voice $00
000B0B35                            ;	$04
000B0B35                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000B0B35                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000B0B35                            	smpsVcAlgorithm     $04
000B0B35                            	smpsVcFeedback      $00
000B0B35                            	smpsVcUnusedBits    $00
000B0B35                            	smpsVcDetune        $00, $00, $00, $00
000B0B35                            	smpsVcCoarseFreq    $00, $01, $01, $02
000B0B35                            	smpsVcRateScale     $00, $00, $00, $00
000B0B35                            	smpsVcAttackRate    $12, $1F, $10, $1F
000B0B35                            	smpsVcAmpMod        $00, $00, $00, $00
000B0B35                            	smpsVcDecayRate1    $04, $0B, $03, $09
000B0B35                            	smpsVcDecayRate2    $05, $00, $00, $03
000B0B35                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000B0B35                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0B4E                            
000B0B4E                            ;	Voice $01
000B0B4E                            ;	$39
000B0B4E                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000B0B4E                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000B0B4E                            	smpsVcAlgorithm     $01
000B0B4E                            	smpsVcFeedback      $07
000B0B4E                            	smpsVcUnusedBits    $00
000B0B4E                            	smpsVcDetune        $00, $04, $06, $00
000B0B4E                            	smpsVcCoarseFreq    $00, $00, $01, $03
000B0B4E                            	smpsVcRateScale     $01, $01, $01, $00
000B0B4E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0B4E                            	smpsVcAmpMod        $00, $00, $00, $00
000B0B4E                            	smpsVcDecayRate1    $09, $09, $11, $10
000B0B4E                            	smpsVcDecayRate2    $00, $00, $00, $06
000B0B4E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000B0B4E                            	smpsVcReleaseRate   $08, $08, $08, $08
000B0B67                            
000B0B67                            ;	Voice $02
000B0B67                            ;	$2C
000B0B67                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000B0B67                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000B0B67                            	smpsVcAlgorithm     $04
000B0B67                            	smpsVcFeedback      $05
000B0B67                            	smpsVcUnusedBits    $00
000B0B67                            	smpsVcDetune        $00, $02, $00, $04
000B0B67                            	smpsVcCoarseFreq    $00, $03, $00, $01
000B0B67                            	smpsVcRateScale     $00, $00, $00, $00
000B0B67                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0B67                            	smpsVcAmpMod        $00, $00, $00, $00
000B0B67                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000B0B67                            	smpsVcDecayRate2    $05, $00, $05, $04
000B0B67                            	smpsVcDecayLevel    $08, $08, $05, $04
000B0B67                            	smpsVcReleaseRate   $06, $05, $06, $05
000B0B80                            
000B0B80                            
000B0B80                            		even	
000B0B80                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000B0B80                            ToxicLandfill_Header:
000B0B80                            	smpsHeaderStartSong 1
000B0B82 0603                       	smpsHeaderChan      $06, $03
000B0B84 0208                       	smpsHeaderTempo     $02, $08
000B0B86                            
000B0B8A 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000B0B8E 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000B0B92 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000B0B96 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000B0B9A 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000B0BB0                            
000B0BB0                            ; DAC Data
000B0BB0                            ToxicLandfill_DAC:
000B0BB0 E0C0                       	smpsPan             panCenter, $00
000B0BB2 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000B0BBE 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000B0BC9                            
000B0BC9                            ToxicLandfill_Loop00:
000B0BC9 82                         	dc.b	dSnare
000B0BCA                            
000B0BCA                            ToxicLandfill_Loop01:
000B0BCA 82                         	dc.b	dSnare
000B0BCB                            
000B0BCB                            ToxicLandfill_Jump00:
000B0BCB 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000B0BD7 0381 0603                  	dc.b	$03, dKick, $06, $03
000B0BDB F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000B0BE0 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000B0BEC 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000B0BF4 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000B0BF9                            
000B0BF9                            ToxicLandfill_Loop06:
000B0BF9 82                         	dc.b	dSnare
000B0BFA                            
000B0BFA                            ToxicLandfill_Loop02:
000B0BFA 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000B0BFE F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000B0C03                            
000B0C03                            ToxicLandfill_Loop03:
000B0C03 8281 81                    	dc.b	dSnare, dKick, dKick
000B0C06 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000B0C0B                            
000B0C0B                            ToxicLandfill_Loop04:
000B0C0B 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000B0C0F F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000B0C14 8182 81                    	dc.b	dKick, dSnare, dKick
000B0C17                            
000B0C17                            ToxicLandfill_Loop05:
000B0C17 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000B0C1C F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000B0C21 0303 03                    	dc.b	$03, $03, $03
000B0C24 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000B0C29                            
000B0C29                            ToxicLandfill_Loop08:
000B0C29 03                         	dc.b	$03
000B0C2A                            
000B0C2A                            ToxicLandfill_Loop07:
000B0C2A 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000B0C33 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000B0C38 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000B0C3F F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000B0C44                            
000B0C44                            ToxicLandfill_Loop0D:
000B0C44 82                         	dc.b	dSnare
000B0C45                            
000B0C45                            ToxicLandfill_Loop09:
000B0C45 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000B0C49 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000B0C4E                            
000B0C4E                            ToxicLandfill_Loop0A:
000B0C4E 8281 81                    	dc.b	dSnare, dKick, dKick
000B0C51 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000B0C56                            
000B0C56                            ToxicLandfill_Loop0B:
000B0C56 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000B0C5A F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000B0C5F 8182 81                    	dc.b	dKick, dSnare, dKick
000B0C62                            
000B0C62                            ToxicLandfill_Loop0C:
000B0C62 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000B0C67 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000B0C6C 0303 03                    	dc.b	$03, $03, $03
000B0C6F F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000B0C74                            
000B0C74                            ToxicLandfill_Loop0E:
000B0C74 03                         	dc.b	$03
000B0C75                            
000B0C75                            ToxicLandfill_Loop0F:
000B0C75 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000B0C81 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000B0C86 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000B0C8B 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000B0C97 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000B0C9F F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000B0CA4                            
000B0CA4                            ToxicLandfill_Loop10:
000B0CA4 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000B0CAD F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000B0CB2 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000B0CBA F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000B0CBF F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000B0CC2                            
000B0CC2                            ; FM1 Data
000B0CC2                            ToxicLandfill_FM1:
000B0CC2 E0C0                       	smpsPan             panCenter, $00
000B0CC4 EF00                       	smpsSetvoice        $00
000B0CC6 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B0CD2 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000B0CDA                            
000B0CDA                            ToxicLandfill_Loop44:
000B0CDA AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B0CE6 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B0CF2 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B0CFE A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B0D02 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000B0D07                            
000B0D07                            ToxicLandfill_Loop46:
000B0D07 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B0D13 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B0D1F 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B0D2B AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B0D33                            
000B0D33                            ToxicLandfill_Loop45:
000B0D33 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B0D37 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000B0D3C AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B0D43 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000B0D48                            
000B0D48                            ToxicLandfill_Loop47:
000B0D48 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B0D54 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000B0D59                            
000B0D59                            ToxicLandfill_Loop48:
000B0D59 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B0D64 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000B0D69 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000B0D6E                            
000B0D6E                            ToxicLandfill_Loop4A:
000B0D6E B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B0D7A B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B0D86 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B0D92 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B0D9A                            
000B0D9A                            ToxicLandfill_Loop49:
000B0D9A B602 B501                  	dc.b	nF4, $02, nE4, $01
000B0D9E F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000B0DA3 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B0DAA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000B0DAF                            
000B0DAF                            ToxicLandfill_Loop4B:
000B0DAF B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B0DBB 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B0DC7 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B0DD3 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B0DD7 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000B0DDC                            
000B0DDC                            ToxicLandfill_Loop4C:
000B0DDC BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B0DE7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000B0DEC                            
000B0DEC                            ToxicLandfill_Loop4D:
000B0DEC BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B0DF7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000B0DFC F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000B0E01 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000B0E04                            
000B0E04                            ; FM2 Data
000B0E04                            ToxicLandfill_FM2:
000B0E04 E0C0                       	smpsPan             panCenter, $00
000B0E06 EF00                       	smpsSetvoice        $00
000B0E08 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B0E14 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000B0E1C                            
000B0E1C                            ToxicLandfill_Loop3A:
000B0E1C B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000B0E28 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000B0E34 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000B0E40 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000B0E44 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000B0E49                            
000B0E49                            ToxicLandfill_Loop3C:
000B0E49 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000B0E55 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000B0E61 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000B0E6D B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000B0E75                            
000B0E75                            ToxicLandfill_Loop3B:
000B0E75 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000B0E79 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000B0E7E AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000B0E85 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000B0E8A                            
000B0E8A                            ToxicLandfill_Loop3D:
000B0E8A AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000B0E96 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000B0E9B                            
000B0E9B                            ToxicLandfill_Loop3E:
000B0E9B ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000B0EA6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000B0EAB F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000B0EB0                            
000B0EB0                            ToxicLandfill_Loop40:
000B0EB0 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000B0EBC B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000B0EC8 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000B0ED4 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000B0EDC                            
000B0EDC                            ToxicLandfill_Loop3F:
000B0EDC BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000B0EE0 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000B0EE5 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000B0EEC F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000B0EF1                            
000B0EF1                            ToxicLandfill_Loop41:
000B0EF1 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000B0EFD 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000B0F09 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000B0F15 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000B0F19 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000B0F1E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000B0F2A B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000B0F36 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000B0F42 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000B0F4E 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000B0F5A 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000B0F60                            
000B0F60                            ToxicLandfill_Loop42:
000B0F60 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000B0F6B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000B0F70                            
000B0F70                            ToxicLandfill_Loop43:
000B0F70 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000B0F7B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000B0F80 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000B0F85 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000B0F91 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000B0F9B F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000B0F9E                            
000B0F9E                            ; FM3 Data
000B0F9E                            ToxicLandfill_FM3:
000B0F9E E0C0                       	smpsPan             panCenter, $00
000B0FA0 EF01                       	smpsSetvoice        $01
000B0FA2                            
000B0FA2                            ToxicLandfill_Loop2D:
000B0FA2 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000B0FAE 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000B0FBA 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000B0FC3 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000B0FC8 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000B0FD4 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000B0FE0 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000B0FEC A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000B0FF4                            
000B0FF4                            ToxicLandfill_Loop2E:
000B0FF4 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1000 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000B1005 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B1011 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B1017 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000B101C                            
000B101C                            ToxicLandfill_Loop31:
000B101C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B1021                            
000B1021                            ToxicLandfill_Loop2F:
000B1021 9999 A3                    	dc.b	nC2, nC2, nBb2
000B1024 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000B1029 99A3                       	dc.b	nC2, nBb2
000B102B                            
000B102B                            ToxicLandfill_Loop30:
000B102B 99A3 99                    	dc.b	nC2, nBb2, nC2
000B102E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000B1033 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B1038 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000B103D                            
000B103D                            ToxicLandfill_Loop32:
000B103D A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B1049 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000B104E                            
000B104E                            ToxicLandfill_Loop33:
000B104E A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B1058 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000B105D F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000B1062                            
000B1062                            ToxicLandfill_Loop36:
000B1062 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000B1067                            
000B1067                            ToxicLandfill_Loop34:
000B1067 9999 A3                    	dc.b	nC2, nC2, nBb2
000B106A F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000B106F 99A3                       	dc.b	nC2, nBb2
000B1071                            
000B1071                            ToxicLandfill_Loop35:
000B1071 99A3 99                    	dc.b	nC2, nBb2, nC2
000B1074 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000B1079 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000B107E F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000B1083                            
000B1083                            ToxicLandfill_Loop37:
000B1083 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B108F F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000B1094 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000B10A0 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000B10A6 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000B10AB                            
000B10AB                            ToxicLandfill_Loop38:
000B10AB A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000B10B6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000B10BB                            
000B10BB                            ToxicLandfill_Loop39:
000B10BB A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000B10C5 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000B10CA F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000B10CF F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000B10D2                            
000B10D2                            ; FM4 Data
000B10D2                            ToxicLandfill_FM4:
000B10D2 E0C0                       	smpsPan             panCenter, $00
000B10D4 EF01                       	smpsSetvoice        $01
000B10D6                            
000B10D6                            ToxicLandfill_Loop20:
000B10D6 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000B10E2 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000B10EE 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000B10F7 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000B10FC 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000B1108 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000B1114 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000B1120 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000B1125                            
000B1125                            ToxicLandfill_Loop21:
000B1125 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B1131 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000B1136 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B1142 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B1148 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000B114D                            
000B114D                            ToxicLandfill_Loop24:
000B114D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B1152                            
000B1152                            ToxicLandfill_Loop22:
000B1152 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B1155 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000B115A 8D97                       	dc.b	nC1, nBb1
000B115C                            
000B115C                            ToxicLandfill_Loop23:
000B115C 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B115F F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000B1164 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B1169 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000B116E                            
000B116E                            ToxicLandfill_Loop25:
000B116E 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B117A F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000B117F                            
000B117F                            ToxicLandfill_Loop26:
000B117F 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B1189 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000B118E F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000B1193                            
000B1193                            ToxicLandfill_Loop29:
000B1193 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000B1198                            
000B1198                            ToxicLandfill_Loop27:
000B1198 8D8D 97                    	dc.b	nC1, nC1, nBb1
000B119B F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000B11A0 8D97                       	dc.b	nC1, nBb1
000B11A2                            
000B11A2                            ToxicLandfill_Loop28:
000B11A2 8D97 8D                    	dc.b	nC1, nBb1, nC1
000B11A5 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000B11AA 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000B11AF F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000B11B4                            
000B11B4                            ToxicLandfill_Loop2A:
000B11B4 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000B11C0 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000B11C5 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000B11D1 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000B11D7 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000B11DC                            
000B11DC                            ToxicLandfill_Loop2B:
000B11DC 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000B11E7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000B11EC                            
000B11EC                            ToxicLandfill_Loop2C:
000B11EC 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000B11F6 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000B11FB F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000B1200 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000B1203                            
000B1203                            ; FM5 Data
000B1203                            ToxicLandfill_FM5:
000B1203 E0C0                       	smpsPan             panCenter, $00
000B1205 E6FA                       	smpsAlterVol			-$06		
000B1207 E102                       	smpsDetune			$02	
000B1209 EF00                       	smpsSetvoice        $00
000B120B 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000B1217 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000B121C                            
000B121C                            ToxicLandfill_Jump01:
000B121C E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000B121F                            
000B121F                            ToxicLandfill_Loop11:
000B121F AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000B122B 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000B1237 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000B1243 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000B1247 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000B124C                            
000B124C                            ToxicLandfill_Loop13:
000B124C AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B1258 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000B1264 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000B1270 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000B1278                            
000B1278                            ToxicLandfill_Loop12:
000B1278 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000B127C F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000B1281 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000B1288 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000B128D                            
000B128D                            ToxicLandfill_Loop14:
000B128D B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000B1299 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000B129E                            
000B129E                            ToxicLandfill_Loop15:
000B129E B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B12A9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000B12AE F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000B12B3                            
000B12B3                            ToxicLandfill_Loop17:
000B12B3 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000B12BF B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000B12CB AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000B12D7 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000B12DF                            
000B12DF                            ToxicLandfill_Loop16:
000B12DF B602 B501                  	dc.b	nF4, $02, nE4, $01
000B12E3 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000B12E8 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000B12EF F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000B12F4                            
000B12F4                            ToxicLandfill_Loop18:
000B12F4 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000B1300 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000B130C B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000B1318 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000B131C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000B1321                            
000B1321                            ToxicLandfill_Loop19:
000B1321 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B132C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000B1331                            
000B1331                            ToxicLandfill_Loop1A:
000B1331 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B133C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000B1341                            
000B1341                            ToxicLandfill_Loop1B:
000B1341 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B134C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000B1351 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000B135D B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000B1369 EF02                       	smpsSetvoice        $02
000B136B E1FE                       	smpsDetune			-$02
000B136D E606                       	smpsAlterVol		$06
000B136F                            	
000B136F                            ToxicLandfill_Loop1C:
000B136F B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000B137B F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000B1380                            
000B1380                            ToxicLandfill_Loop1D:
000B1380 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000B138B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000B1390                            
000B1390                            ToxicLandfill_Loop1E:
000B1390 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000B139B F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000B13A0                            
000B13A0                            ToxicLandfill_Loop1F:
000B13A0 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000B13AB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000B13B0 EF00                       	smpsSetvoice        $00
000B13B2 E102                       	smpsDetune			$02
000B13B4 E6FA                       	smpsAlterVol		-$06	
000B13B6 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000B13B9                            
000B13B9                            ; PSG1 Data
000B13B9                            ToxicLandfill_PSG1:
000B13B9 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B13BE                            
000B13BE                            ToxicLandfill_Jump04:
000B13BE 80                         	dc.b	nRst
000B13BF                            
000B13BF                            ToxicLandfill_Loop57:
000B13BF 60                         	dc.b	$60
000B13C0 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000B13C5                            
000B13C5                            ToxicLandfill_Loop58:
000B13C5 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B13D1 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000B13D6                            
000B13D6                            ToxicLandfill_Loop59:
000B13D6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B13E1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000B13E6                            
000B13E6                            ToxicLandfill_Loop5A:
000B13E6 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B13F1 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000B13F6 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B1402 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000B140E                            
000B140E                            ToxicLandfill_Loop5B:
000B140E 6E                         	dc.b	$6E
000B140F F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000B1414                            
000B1414                            ToxicLandfill_Loop5C:
000B1414 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1420 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000B1425                            
000B1425                            ToxicLandfill_Loop5D:
000B1425 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000B1430 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000B1435 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000B143A                            
000B143A                            ToxicLandfill_Loop5E:
000B143A A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000B1445 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000B144A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000B1456 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000B1462 01                         	dc.b	$01
000B1463 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000B1466                            
000B1466                            ; PSG2 Data
000B1466                            ToxicLandfill_PSG2:
000B1466 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000B146B                            
000B146B                            ToxicLandfill_Jump03:
000B146B 80                         	dc.b	nRst
000B146C                            
000B146C                            ToxicLandfill_Loop50:
000B146C 60                         	dc.b	$60
000B146D F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000B1472 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B147E A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B148A 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B1496 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B14A2 9E                         	dc.b	nF2
000B14A3                            
000B14A3                            ToxicLandfill_Loop51:
000B14A3 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B14AE F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000B14B3 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B14BF 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000B14CB 0580                       	dc.b	$05, nRst
000B14CD                            
000B14CD                            ToxicLandfill_Loop52:
000B14CD 60                         	dc.b	$60
000B14CE F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000B14D3 01                         	dc.b	$01
000B14D4                            
000B14D4                            ToxicLandfill_Loop53:
000B14D4 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B14E0 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000B14EC 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B14F8 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000B1504 9E                         	dc.b	nF2
000B1505 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000B150A                            
000B150A                            ToxicLandfill_Loop54:
000B150A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B1515 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000B151A                            
000B151A                            ToxicLandfill_Loop55:
000B151A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000B1525 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000B152A                            
000B152A                            ToxicLandfill_Loop56:
000B152A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000B1535 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000B153A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000B1546 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000B1552 01                         	dc.b	$01
000B1553 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000B1556                            
000B1556                            ; PSG3 Data
000B1556                            ToxicLandfill_PSG3:
000B1556 F3E7                       	smpsPSGform         $E7
000B1558 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000B1560                            
000B1560                            ToxicLandfill_Loop4E:
000B1560 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000B1565 F501                       	smpsPSGvoice        fTone_01
000B1567 0C                         	dc.b	$0C
000B1568 F502                       	smpsPSGvoice        fTone_02
000B156A F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000B156F 0603 03                    	dc.b	$06, $03, $03
000B1572 F501                       	smpsPSGvoice        fTone_01
000B1574 06                         	dc.b	$06
000B1575 F502                       	smpsPSGvoice        fTone_02
000B1577 03                         	dc.b	$03
000B1578 F501                       	smpsPSGvoice        fTone_01
000B157A 0906 0606                  	dc.b	$09, $06, $06, $06
000B157E                            
000B157E                            ToxicLandfill_Jump02:
000B157E E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000B1586 F502                       	smpsPSGvoice        fTone_02
000B1588 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000B158C F501                       	smpsPSGvoice        fTone_01
000B158E 18                         	dc.b	$18
000B158F F502                       	smpsPSGvoice        fTone_02
000B1591 1806                       	dc.b	$18, $06
000B1593 F501                       	smpsPSGvoice        fTone_01
000B1595 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B159B F502                       	smpsPSGvoice        fTone_02
000B159D 1818 18                    	dc.b	$18, $18, $18
000B15A0 F501                       	smpsPSGvoice        fTone_01
000B15A2 18                         	dc.b	$18
000B15A3 F502                       	smpsPSGvoice        fTone_02
000B15A5 1806                       	dc.b	$18, $06
000B15A7 F501                       	smpsPSGvoice        fTone_01
000B15A9 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000B15B5 F502                       	smpsPSGvoice        fTone_02
000B15B7 1818 18                    	dc.b	$18, $18, $18
000B15BA F501                       	smpsPSGvoice        fTone_01
000B15BC 18                         	dc.b	$18
000B15BD F502                       	smpsPSGvoice        fTone_02
000B15BF 1806                       	dc.b	$18, $06
000B15C1 F501                       	smpsPSGvoice        fTone_01
000B15C3 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000B15C9 F502                       	smpsPSGvoice        fTone_02
000B15CB 1818 18                    	dc.b	$18, $18, $18
000B15CE F501                       	smpsPSGvoice        fTone_01
000B15D0 18                         	dc.b	$18
000B15D1 F502                       	smpsPSGvoice        fTone_02
000B15D3 1806                       	dc.b	$18, $06
000B15D5 F501                       	smpsPSGvoice        fTone_01
000B15D7 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000B15DC                            
000B15DC                            ToxicLandfill_Loop4F:
000B15DC 59E7                       	dc.b	$59, smpsNoAttack
000B15DE F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000B15E3 5A                         	dc.b	$5A
000B15E4 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000B15E7                            
000B15E7                            
000B15E7                            ToxicLandfill_Voices:
000B15E7                            ;	Voice $00
000B15E7                            ;	$29
000B15E7                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000B15E7                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000B15E7                            	smpsVcAlgorithm     $01
000B15E7                            	smpsVcFeedback      $05
000B15E7                            	smpsVcUnusedBits    $00
000B15E7                            	smpsVcDetune        $00, $00, $00, $03
000B15E7                            	smpsVcCoarseFreq    $01, $02, $02, $03
000B15E7                            	smpsVcRateScale     $00, $00, $00, $00
000B15E7                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000B15E7                            	smpsVcAmpMod        $00, $00, $00, $00
000B15E7                            	smpsVcDecayRate1    $0B, $00, $02, $00
000B15E7                            	smpsVcDecayRate2    $03, $00, $02, $03
000B15E7                            	smpsVcDecayLevel    $01, $00, $01, $00
000B15E7                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000B1600                            	
000B1600                            ;	Voice $01
000B1600                            ;	$18
000B1600                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000B1600                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000B1600                            	smpsVcAlgorithm     $00
000B1600                            	smpsVcFeedback      $03
000B1600                            	smpsVcUnusedBits    $00
000B1600                            	smpsVcDetune        $03, $03, $03, $03
000B1600                            	smpsVcCoarseFreq    $01, $00, $00, $07
000B1600                            	smpsVcRateScale     $02, $00, $03, $02
000B1600                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000B1600                            	smpsVcAmpMod        $00, $00, $00, $00
000B1600                            	smpsVcDecayRate1    $01, $04, $06, $0D
000B1600                            	smpsVcDecayRate2    $05, $03, $0A, $08
000B1600                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000B1600                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1619                            
000B1619                            ;	Voice $02
000B1619                            ;	$2C
000B1619                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000B1619                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000B1619                            	smpsVcAlgorithm     $04
000B1619                            	smpsVcFeedback      $05
000B1619                            	smpsVcUnusedBits    $00
000B1619                            	smpsVcDetune        $03, $03, $07, $07
000B1619                            	smpsVcCoarseFreq    $04, $04, $08, $02
000B1619                            	smpsVcRateScale     $00, $00, $00, $00
000B1619                            	smpsVcAttackRate    $12, $1F, $12, $1F
000B1619                            	smpsVcAmpMod        $00, $00, $00, $00
000B1619                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000B1619                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1619                            	smpsVcDecayLevel    $01, $00, $01, $00
000B1619                            	smpsVcReleaseRate   $06, $00, $06, $00
000B1632                            		even			
000B1632                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000B1632                            RRZ2_Header:
000B1632                            	smpsHeaderStartSong 1
000B1634 0603                       	smpsHeaderChan      $06, $03
000B1636 0104                       	smpsHeaderTempo     $01, $04
000B1638                            
000B163C 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000B1640 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000B1644 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000B1648 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000B164C 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000B1662                            
000B1662                            ; FM1 Data
000B1662                            RRZ2_FM1:
000B1662 E0C0                       	smpsPan             panCenter, $00
000B1669 EF03                       	smpsSetvoice        $03
000B166B B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000B1677 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000B1683 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000B168F B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000B169B 8080                       	dc.b	nRst, nRst
000B169D EF00                       	smpsSetvoice        $00
000B169F B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000B16AB B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000B16B7 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000B16C3 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000B16CF 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000B16DB B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000B16E7 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000B16F3 3280 60                    	dc.b	$32, nRst, $60
000B16F6 EF05                       	smpsSetvoice        $05
000B16F8 E9F4                       	smpsAlterPitch      $F4
000B16FA B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000B1706 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000B170E E90C                       	smpsAlterPitch      $0C
000B1710 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000B171C 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000B1728 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000B172E F6FF 32                    	smpsJump            RRZ2_FM1
000B1731                            
000B1731                            ; FM2 Data
000B1731                            RRZ2_FM2:
000B1731 E0C0                       	smpsPan             panCenter, $00
000B1738 EF01                       	smpsSetvoice        $01
000B173A                            
000B173A                            RRZ2_Jump02:
000B173A 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000B1746 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000B1752 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000B175E 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000B176A 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000B1776 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000B1782 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000B178E 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000B1796                            
000B1796                            RRZ2_Loop07:
000B1796 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B17A2 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B17AE 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B17B6 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000B17BB                            
000B17BB                            RRZ2_Loop08:
000B17BB 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000B17C7 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000B17D3 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000B17DB F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000B17E0 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000B17EC 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000B17F8 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000B1804 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000B1810 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000B181C 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000B1828 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000B1834 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000B1840 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000B184C A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000B1858 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000B1864 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000B1870 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000B187C 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000B1888 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B1894 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B18A0 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B18AC 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B18B8 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B18C4 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B18D0 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B18DC 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B18E8 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B18F4 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B1900 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000B190C 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000B1918 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000B1924 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000B1930 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000B193C 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000B1948 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000B1954 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000B1960 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000B196C 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000B1978 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000B1984 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000B198B F6FD AD                    	smpsJump            RRZ2_Jump02
000B198E                            
000B198E                            ; FM3 Data
000B198E                            RRZ2_FM3:
000B198E E080                       	smpsPan             panLeft, $00
000B1995                            
000B1995                            RRZ2_Jump01:
000B1995 EF02                       	smpsSetvoice        $02
000B1997                            
000B1997                            RRZ2_Loop05:
000B1997 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B19A3 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B19AF 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B19BB 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B19C7 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B19CD F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000B19D2 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B19DE 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B19EA 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B19F6 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B1A02 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B1A0A                            
000B1A0A                            RRZ2_Loop06:
000B1A0A AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B1A16 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B1A22 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B1A2E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B1A3A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B1A46 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B1A52 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B1A5E B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B1A69 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000B1A6E AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000B1A7A 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000B1A86 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000B1A92 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000B1A9E 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000B1AAA B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000B1AB6 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000B1AC2 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000B1ACD EF05                       	smpsSetvoice        $05
000B1ACF 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000B1ADB B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000B1AE7 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000B1AF3 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000B1AFF B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000B1B0B B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000B1B17 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000B1B1D E6FA                       	smpsAlterVol        $FA
000B1B1F A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000B1B2B 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000B1B37 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B1B43 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000B1B4F 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000B1B5B 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000B1B67 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000B1B73 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000B1B7D E606                       	smpsAlterVol        $06
000B1B7F F6FE 14                    	smpsJump            RRZ2_Jump01
000B1B82                            
000B1B82                            ; FM4 Data
000B1B82                            RRZ2_FM4:
000B1B82 E040                       	smpsPan             panRight, $00
000B1B89                            
000B1B89                            RRZ2_Jump00:
000B1B89 EF02                       	smpsSetvoice        $02
000B1B8B                            
000B1B8B                            RRZ2_Loop03:
000B1B8B AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B1B97 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B1BA3 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B1BAF AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B1BBB ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B1BC0 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000B1BC5 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B1BD1 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B1BDD 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B1BE9 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B1BF5 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B1BFB                            
000B1BFB                            RRZ2_Loop04:
000B1BFB A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B1C07 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B1C13 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B1C1F 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B1C2B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B1C37 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B1C43 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B1C4F A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000B1C5A F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000B1C5F A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000B1C6B 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000B1C77 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000B1C83 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000B1C8F 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000B1C9B A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000B1CA7 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000B1CB3 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000B1CBF EF05                       	smpsSetvoice        $05
000B1CC1 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000B1CCD B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000B1CD9 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000B1CE5 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000B1CF1 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000B1CFD ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000B1D09 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000B1D15 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000B1D19 E6FA                       	smpsAlterVol        $FA
000B1D1B A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000B1D27 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000B1D33 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000B1D3F A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000B1D4B 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000B1D57 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000B1D63 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000B1D6F B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000B1D77 E606                       	smpsAlterVol        $06
000B1D79 F6FE 0E                    	smpsJump            RRZ2_Jump00
000B1D7C                            
000B1D7C                            ; FM5 Data
000B1D7C                            RRZ2_FM5:
000B1D81 8010                       	dc.b	nRst, $10
000B1D83 E101                       	smpsAlterNote       $01
000B1D85 F6F8 DB                    	smpsJump            RRZ2_FM1
000B1D88                            
000B1D88                            ; PSG1 Data
000B1D88                            RRZ2_PSG1:
000B1D8D F507                       	smpsPSGvoice        stone_1D
000B1D8F B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B1D9B 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B1DA7 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B1DB3 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000B1DBF ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000B1DC5 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000B1DCA B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000B1DD6 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000B1DE2 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000B1DEE 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000B1DFA B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000B1E02 F507                       	smpsPSGvoice        stone_26
000B1E04 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B1E10 804A                       	dc.b	nRst, $4A
000B1E12                            
000B1E12                            RRZ2_Loop0D:
000B1E12 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000B1E1E 804A                       	dc.b	nRst, $4A
000B1E20 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000B1E25 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000B1E31 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000B1E3D BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000B1E41                            
000B1E41                            RRZ2_Loop0E:
000B1E41 F507                       	smpsPSGvoice        stone_23
000B1E43 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000B1E4F 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000B1E5B 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000B1E67 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000B1E6E F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000B1E73                            
000B1E73                            RRZ2_Loop0F:
000B1E73 F507                       	smpsPSGvoice        stone_1D
000B1E75 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000B1E81 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000B1E8D 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000B1E99 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000B1E9E 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B1EAA B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B1EB6 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B1EC2 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B1ECE B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B1EDA B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B1EE6 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000B1EED F6FE 99                    	smpsJump            RRZ2_PSG1
000B1EF0                            
000B1EF0                            ; PSG2 Data
000B1EF0                            RRZ2_PSG2:
000B1EF5 F507                       	smpsPSGvoice        stone_1D
000B1EF7                            
000B1EF7                            RRZ2_Loop09:
000B1EF7 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B1F03 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B1F0F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B1F1B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000B1F27 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000B1F2C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000B1F31 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000B1F3D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000B1F49 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000B1F55 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000B1F61 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000B1F67 F507                       	smpsPSGvoice        stone_26
000B1F69 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000B1F75 804A                       	dc.b	nRst, $4A
000B1F77                            
000B1F77                            RRZ2_Loop0A:
000B1F77 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B1F83 804A                       	dc.b	nRst, $4A
000B1F85 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000B1F8A B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000B1F96 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000B1FA2 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000B1FA6                            
000B1FA6                            RRZ2_Loop0B:
000B1FA6 F507                       	smpsPSGvoice        stone_23
000B1FA8 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000B1FB4 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000B1FC0 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000B1FCC 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000B1FD3 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000B1FD8                            
000B1FD8                            RRZ2_Loop0C:
000B1FD8 F507                       	smpsPSGvoice        stone_1D
000B1FDA B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000B1FE6 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000B1FF2 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000B1FFE E760                       	dc.b	smpsNoAttack, $60
000B2000 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000B2005 800D                       	dc.b	nRst, $0D
000B2007 EC02                       	smpsPSGAlterVol     $02
000B2009 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B2015 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000B2021 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000B202D 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000B2039 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000B2045 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000B2051 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000B2059 ECFE                       	smpsPSGAlterVol     $FE
000B205B F6FE 93                    	smpsJump            RRZ2_PSG2
000B205E                            
000B205E                            ; PSG3 Data
000B205E                            RRZ2_PSG3:
000B205E F3E7                       	smpsPSGform         $E7
000B2060 8060 80                    	dc.b	nRst, $60, nRst
000B2063 F800 00                    	smpsCall            RRZ2_Call00
000B2066 F800 00                    	smpsCall            RRZ2_Call00
000B2069 F800 00                    	smpsCall            RRZ2_Call01
000B206C                            
000B206C                            RRZ2_Jump03:
000B206C F800 00                    	smpsCall            RRZ2_Call00
000B206F F6FF FB                    	smpsJump            RRZ2_Jump03
000B2072                            
000B2072                            RRZ2_Call00:
000B2072 F502                       	smpsPSGvoice        stone_0F
000B2074 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B207B F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000B2080 E3                         	smpsReturn
000B2081                            
000B2081                            RRZ2_Call01:
000B2081 F502                       	smpsPSGvoice        stone_0F
000B2083 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B208A F502                       	smpsPSGvoice        stone_0F
000B208C B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000B2093 F502                       	smpsPSGvoice        stone_0F
000B2095 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000B209C F503                       	smpsPSGvoice        stone_04
000B209E B10C                       	dc.b	nC4, $0C
000B20A0 F502                       	smpsPSGvoice        stone_0F
000B20A2 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000B20A6 E3                         	smpsReturn
000B20A7                            
000B20A7                            ; DAC Data
000B20A7                            RRZ2_DAC:
000B20A7 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000B20B3 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000B20BF 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000B20CB 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000B20D7 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000B20E3 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B20EF 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000B20FB 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B2107 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B2113 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000B211F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000B212B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000B2137 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000B213D                            
000B213D                            RRZ2_Loop00:
000B213D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B2149 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B2155 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B2161 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B216D 80                         	dc.b	nRst
000B216E F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000B2173 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B217F 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B218B 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B2197 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000B21A3 82                         	dc.b	dSnare
000B21A4                            
000B21A4                            RRZ2_Loop01:
000B21A4 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B21B0 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B21BC 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000B21C8 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B21D4 80                         	dc.b	nRst
000B21D5 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000B21DA 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000B21E6 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000B21F2 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000B21FE 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000B220A 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000B2216 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000B2222 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000B222E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B223A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B2246 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B2252 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B225E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B226A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B2276 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000B2282 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000B228E 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000B229A 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000B22A6 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000B22B2 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000B22BE 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000B22CA 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000B22D6                            
000B22D6                            RRZ2_Loop02:
000B22D6 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B22E2 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B22EE 80                         	dc.b	nRst
000B22EF F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000B22F4 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000B2300 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000B230C 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000B2318 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000B231D F6FD 88                    	smpsJump            RRZ2_DAC
000B2320                            
000B2320                            RRZ2_Voices:
000B2320                            ;	Voice $00
000B2320                            ;	$3A
000B2320                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000B2320                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000B2320                            	smpsVcAlgorithm     $02
000B2320                            	smpsVcFeedback      $07
000B2320                            	smpsVcUnusedBits    $00
000B2320                            	smpsVcDetune        $03, $07, $07, $03
000B2320                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000B2320                            	smpsVcRateScale     $00, $01, $01, $02
000B2320                            	smpsVcAttackRate    $17, $14, $1F, $1F
000B2320                            	smpsVcAmpMod        $00, $00, $00, $00
000B2320                            	smpsVcDecayRate1    $05, $0A, $14, $03
000B2320                            	smpsVcDecayRate2    $01, $01, $05, $01
000B2320                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000B2320                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B2339                            
000B2339                            ;	Voice $01
000B2339                            ;	$3C
000B2339                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000B2339                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000B2339                            	smpsVcAlgorithm     $04
000B2339                            	smpsVcFeedback      $07
000B2339                            	smpsVcUnusedBits    $00
000B2339                            	smpsVcDetune        $00, $00, $00, $00
000B2339                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B2339                            	smpsVcRateScale     $00, $00, $00, $00
000B2339                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000B2339                            	smpsVcAmpMod        $00, $00, $00, $00
000B2339                            	smpsVcDecayRate1    $05, $12, $03, $11
000B2339                            	smpsVcDecayRate2    $02, $09, $04, $07
000B2339                            	smpsVcDecayLevel    $01, $02, $03, $05
000B2339                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B2352                            
000B2352                            ;	Voice $02
000B2352                            ;	$3A
000B2352                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000B2352                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000B2352                            	smpsVcAlgorithm     $02
000B2352                            	smpsVcFeedback      $07
000B2352                            	smpsVcUnusedBits    $00
000B2352                            	smpsVcDetune        $03, $01, $00, $07
000B2352                            	smpsVcCoarseFreq    $01, $01, $04, $03
000B2352                            	smpsVcRateScale     $02, $02, $03, $02
000B2352                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B2352                            	smpsVcAmpMod        $00, $00, $00, $00
000B2352                            	smpsVcDecayRate1    $0A, $03, $05, $05
000B2352                            	smpsVcDecayRate2    $02, $03, $02, $03
000B2352                            	smpsVcDecayLevel    $07, $05, $06, $06
000B2352                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B236B                            
000B236B                            ;	Voice $03
000B236B                            ;	$3E
000B236B                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000B236B                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000B236B                            	smpsVcAlgorithm     $06
000B236B                            	smpsVcFeedback      $07
000B236B                            	smpsVcUnusedBits    $00
000B236B                            	smpsVcDetune        $00, $00, $00, $00
000B236B                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000B236B                            	smpsVcRateScale     $00, $00, $00, $00
000B236B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B236B                            	smpsVcAmpMod        $00, $00, $00, $00
000B236B                            	smpsVcDecayRate1    $00, $00, $06, $03
000B236B                            	smpsVcDecayRate2    $0C, $07, $06, $08
000B236B                            	smpsVcDecayLevel    $00, $00, $00, $01
000B236B                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B2384                            
000B2384                            ;	Voice $04
000B2384                            ;	$3C
000B2384                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000B2384                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000B2384                            	smpsVcAlgorithm     $04
000B2384                            	smpsVcFeedback      $07
000B2384                            	smpsVcUnusedBits    $00
000B2384                            	smpsVcDetune        $01, $01, $07, $07
000B2384                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B2384                            	smpsVcRateScale     $00, $00, $00, $00
000B2384                            	smpsVcAttackRate    $1E, $19, $1E, $17
000B2384                            	smpsVcAmpMod        $00, $00, $00, $00
000B2384                            	smpsVcDecayRate1    $01, $07, $01, $04
000B2384                            	smpsVcDecayRate2    $00, $00, $00, $00
000B2384                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B2384                            	smpsVcReleaseRate   $08, $07, $08, $07
000B239D                            
000B239D                            ;	Voice $05
000B239D                            ;	$16
000B239D                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000B239D                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000B239D                            	smpsVcAlgorithm     $06
000B239D                            	smpsVcFeedback      $02
000B239D                            	smpsVcUnusedBits    $00
000B239D                            	smpsVcDetune        $03, $03, $07, $07
000B239D                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000B239D                            	smpsVcRateScale     $00, $00, $00, $00
000B239D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B239D                            	smpsVcAmpMod        $00, $00, $00, $00
000B239D                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000B239D                            	smpsVcDecayRate2    $05, $07, $0A, $07
000B239D                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000B239D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B23B6                            
000B23B6                            
000B23B6                            		even				
000B23B6                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B2F98                            		even
000B2F98                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B2F98                            Tribute_Header:
000B2F98                            	smpsHeaderStartSong 3
000B2F9A 0603                       	smpsHeaderChan      $06, $03
000B2F9C 0106                       	smpsHeaderTempo     $01, $06
000B2F9E                            
000B2FA2 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B2FA6 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B2FAA 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B2FAE 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B2FB2 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B2FB6                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B2FC8                            
000B2FC8                            ; FM1 Data
000B2FC8                            Tribute_FM1:
000B2FC8 EF00                       	smpsSetvoice        $00
000B2FCA F800 00                    	smpsCall            Tribute_Call05
000B2FCD E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B2FD9 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B2FE5 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B2FEC F800 00                    	smpsCall            Tribute_Call05
000B2FEF E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B2FFB 94                         	dc.b	nG1
000B2FFC EA09                       	smpsSetTempoMod     $09
000B2FFE E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3004                            
000B3004                            Tribute_Loop05:
000B3004 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B3010 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B301C 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B3028 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B3034 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B3040 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B304C 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B3053 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B3058 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B3064 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B306C F800 00                    	smpsCall            Tribute_Call00
000B306F F2                         	smpsStop
000B3070                            
000B3070                            Tribute_Call05:
000B3070 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B307C E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B3088 809B                       	dc.b	nRst, nD2
000B308A E3                         	smpsReturn
000B308B                            
000B308B                            Tribute_Call00:
000B308B 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B3097 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B30A3 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B30A8 E3                         	smpsReturn
000B30A9                            
000B30A9                            ; FM2 Data
000B30A9                            Tribute_FM2:
000B30A9 EF01                       	smpsSetvoice        $01
000B30AB B512 B306                  	dc.b	nE4, $12, nD4, $06
000B30AF E60A                       	smpsFMAlterVol      $0A
000B30B1 0680                       	dc.b	$06, nRst
000B30B3 E6F6                       	smpsFMAlterVol      $F6
000B30B5 B8                         	dc.b	nG4
000B30B6 E60A                       	smpsFMAlterVol      $0A
000B30B8 0680                       	dc.b	$06, nRst
000B30BA E6F6                       	smpsFMAlterVol      $F6
000B30BC B6B5                       	dc.b	nF4, nE4
000B30BE E60A                       	smpsFMAlterVol      $0A
000B30C0 06                         	dc.b	$06
000B30C1 E6F6                       	smpsFMAlterVol      $F6
000B30C3 B1                         	dc.b	nC4
000B30C4 E60A                       	smpsFMAlterVol      $0A
000B30C6 06                         	dc.b	$06
000B30C7 E6F6                       	smpsFMAlterVol      $F6
000B30C9 B3                         	dc.b	nD4
000B30CA EF02                       	smpsSetvoice        $02
000B30CC E918                       	smpsAlterPitch      $18
000B30CE F800 00                    	smpsCall            Tribute_Call04
000B30D1 EF01                       	smpsSetvoice        $01
000B30D3 E9E8                       	smpsAlterPitch      $E8
000B30D5 F800 00                    	smpsCall            Tribute_Call04
000B30D8 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B30E0 E60A                       	smpsFMAlterVol      $0A
000B30E2 06                         	dc.b	$06
000B30E3 E6F6                       	smpsFMAlterVol      $F6
000B30E5 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B30E9 E60A                       	smpsFMAlterVol      $0A
000B30EB 0680                       	dc.b	$06, nRst
000B30ED E6F6                       	smpsFMAlterVol      $F6
000B30EF B8                         	dc.b	nG4
000B30F0 E60A                       	smpsFMAlterVol      $0A
000B30F2 0680                       	dc.b	$06, nRst
000B30F4 E6F6                       	smpsFMAlterVol      $F6
000B30F6 B6B5                       	dc.b	nF4, nE4
000B30F8 E60A                       	smpsFMAlterVol      $0A
000B30FA 06                         	dc.b	$06
000B30FB E6F6                       	smpsFMAlterVol      $F6
000B30FD B1                         	dc.b	nC4
000B30FE E60A                       	smpsFMAlterVol      $0A
000B3100 06                         	dc.b	$06
000B3101 E6F6                       	smpsFMAlterVol      $F6
000B3103 B3                         	dc.b	nD4
000B3104 EF02                       	smpsSetvoice        $02
000B3106 E918                       	smpsAlterPitch      $18
000B3108 F800 00                    	smpsCall            Tribute_Call04
000B310B EF01                       	smpsSetvoice        $01
000B310D E9E8                       	smpsAlterPitch      $E8
000B310F F800 00                    	smpsCall            Tribute_Call04
000B3112 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B311A                            
000B311A                            Tribute_Loop04:
000B311A 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B311E E60A                       	smpsFMAlterVol      $0A
000B3120 06                         	dc.b	$06
000B3121 E6F6                       	smpsFMAlterVol      $F6
000B3123 B50C                       	dc.b	nE4, $0C
000B3125 E60A                       	smpsFMAlterVol      $0A
000B3127 06                         	dc.b	$06
000B3128 E6F6                       	smpsFMAlterVol      $F6
000B312A 06                         	dc.b	$06
000B312B E60A                       	smpsFMAlterVol      $0A
000B312D 06                         	dc.b	$06
000B312E E6F6                       	smpsFMAlterVol      $F6
000B3130 06                         	dc.b	$06
000B3131 E60A                       	smpsFMAlterVol      $0A
000B3133 06                         	dc.b	$06
000B3134 E6F6                       	smpsFMAlterVol      $F6
000B3136 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B3139 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B313E 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B3142 E60A                       	smpsFMAlterVol      $0A
000B3144 06                         	dc.b	$06
000B3145 E6F6                       	smpsFMAlterVol      $F6
000B3147 B50C                       	dc.b	nE4, $0C
000B3149 E60A                       	smpsFMAlterVol      $0A
000B314B 06                         	dc.b	$06
000B314C E6F6                       	smpsFMAlterVol      $F6
000B314E 06                         	dc.b	$06
000B314F E60A                       	smpsFMAlterVol      $0A
000B3151 06                         	dc.b	$06
000B3152 E6F6                       	smpsFMAlterVol      $F6
000B3154 06                         	dc.b	$06
000B3155 E60A                       	smpsFMAlterVol      $0A
000B3157 06                         	dc.b	$06
000B3158 E6F6                       	smpsFMAlterVol      $F6
000B315A B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B3160 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B3165 B51E                       	dc.b	nE4, $1E
000B3167 E60A                       	smpsFMAlterVol      $0A
000B3169 06                         	dc.b	$06
000B316A E6F6                       	smpsFMAlterVol      $F6
000B316C B62A                       	dc.b	nF4, $2A
000B316E E60A                       	smpsFMAlterVol      $0A
000B3170 06                         	dc.b	$06
000B3171 E6F6                       	smpsFMAlterVol      $F6
000B3173 B52A                       	dc.b	nE4, $2A
000B3175 E60A                       	smpsFMAlterVol      $0A
000B3177 06                         	dc.b	$06
000B3178 E6F6                       	smpsFMAlterVol      $F6
000B317A B52A                       	dc.b	nE4, $2A
000B317C E60A                       	smpsFMAlterVol      $0A
000B317E 06                         	dc.b	$06
000B317F E6F6                       	smpsFMAlterVol      $F6
000B3181 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B3185 E60A                       	smpsFMAlterVol      $0A
000B3187 06                         	dc.b	$06
000B3188 E6F6                       	smpsFMAlterVol      $F6
000B318A B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B318E F800 00                    	smpsCall            Tribute_Call03
000B3191 F2                         	smpsStop
000B3192                            
000B3192                            Tribute_Call04:
000B3192 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B3198 E60A                       	smpsFMAlterVol      $0A
000B319A 0680                       	dc.b	$06, nRst
000B319C E6F6                       	smpsFMAlterVol      $F6
000B319E B8                         	dc.b	nG4
000B319F E60A                       	smpsFMAlterVol      $0A
000B31A1 0680                       	dc.b	$06, nRst
000B31A3 E6F6                       	smpsFMAlterVol      $F6
000B31A5 B6B5                       	dc.b	nF4, nE4
000B31A7 E60A                       	smpsFMAlterVol      $0A
000B31A9 06                         	dc.b	$06
000B31AA E6F6                       	smpsFMAlterVol      $F6
000B31AC B1                         	dc.b	nC4
000B31AD E60A                       	smpsFMAlterVol      $0A
000B31AF 06                         	dc.b	$06
000B31B0 E6F6                       	smpsFMAlterVol      $F6
000B31B2 B3                         	dc.b	nD4
000B31B3 E3                         	smpsReturn
000B31B4                            
000B31B4                            Tribute_Call03:
000B31B4 E918                       	smpsAlterPitch      $18
000B31B6 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B31BF E60A                       	smpsFMAlterVol      $0A
000B31C1 06                         	dc.b	$06
000B31C2 E6F6                       	smpsFMAlterVol      $F6
000B31C4 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B31CB E60A                       	smpsFMAlterVol      $0A
000B31CD 06                         	dc.b	$06
000B31CE E6F6                       	smpsFMAlterVol      $F6
000B31D0 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B31D7 E60A                       	smpsFMAlterVol      $0A
000B31D9 06                         	dc.b	$06
000B31DA E6F6                       	smpsFMAlterVol      $F6
000B31DC E9E8                       	smpsAlterPitch      $E8
000B31DE E3                         	smpsReturn
000B31DF                            
000B31DF                            ; FM3 Data
000B31DF                            Tribute_FM3:
000B31DF EF01                       	smpsSetvoice        $01
000B31E1 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B31E5 E60A                       	smpsFMAlterVol      $0A
000B31E7 0680                       	dc.b	$06, nRst
000B31E9 E6F6                       	smpsFMAlterVol      $F6
000B31EB B3                         	dc.b	nD4
000B31EC E60A                       	smpsFMAlterVol      $0A
000B31EE 0680                       	dc.b	$06, nRst
000B31F0 E6F6                       	smpsFMAlterVol      $F6
000B31F2 B1B1                       	dc.b	nC4, nC4
000B31F4 E60A                       	smpsFMAlterVol      $0A
000B31F6 06                         	dc.b	$06
000B31F7 E6F6                       	smpsFMAlterVol      $F6
000B31F9 AE                         	dc.b	nA3
000B31FA E60A                       	smpsFMAlterVol      $0A
000B31FC 06                         	dc.b	$06
000B31FD E6F6                       	smpsFMAlterVol      $F6
000B31FF B0                         	dc.b	nB3
000B3200 EF02                       	smpsSetvoice        $02
000B3202 E918                       	smpsAlterPitch      $18
000B3204 E080                       	smpsPan             panLeft, $00
000B3206 F800 00                    	smpsCall            Tribute_Call02
000B3209 EF01                       	smpsSetvoice        $01
000B320B E9E8                       	smpsAlterPitch      $E8
000B320D E0C0                       	smpsPan             panCenter, $00
000B320F F800 00                    	smpsCall            Tribute_Call02
000B3212 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B321A E60A                       	smpsFMAlterVol      $0A
000B321C 06                         	dc.b	$06
000B321D E6F6                       	smpsFMAlterVol      $F6
000B321F B112 B006                  	dc.b	nC4, $12, nB3, $06
000B3223 E60A                       	smpsFMAlterVol      $0A
000B3225 0680                       	dc.b	$06, nRst
000B3227 E6F6                       	smpsFMAlterVol      $F6
000B3229 B3                         	dc.b	nD4
000B322A E60A                       	smpsFMAlterVol      $0A
000B322C 0680                       	dc.b	$06, nRst
000B322E E6F6                       	smpsFMAlterVol      $F6
000B3230 B1B1                       	dc.b	nC4, nC4
000B3232 E60A                       	smpsFMAlterVol      $0A
000B3234 06                         	dc.b	$06
000B3235 E6F6                       	smpsFMAlterVol      $F6
000B3237 AE                         	dc.b	nA3
000B3238 E60A                       	smpsFMAlterVol      $0A
000B323A 06                         	dc.b	$06
000B323B E6F6                       	smpsFMAlterVol      $F6
000B323D B0                         	dc.b	nB3
000B323E EF02                       	smpsSetvoice        $02
000B3240 E918                       	smpsAlterPitch      $18
000B3242 E080                       	smpsPan             panLeft, $00
000B3244 F800 00                    	smpsCall            Tribute_Call02
000B3247 EF01                       	smpsSetvoice        $01
000B3249 E9E8                       	smpsAlterPitch      $E8
000B324B E0C0                       	smpsPan             panCenter, $00
000B324D F800 00                    	smpsCall            Tribute_Call02
000B3250 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3258                            
000B3258                            Tribute_Loop03:
000B3258 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B325C E60A                       	smpsFMAlterVol      $0A
000B325E 06                         	dc.b	$06
000B325F E6F6                       	smpsFMAlterVol      $F6
000B3261 0C                         	dc.b	$0C
000B3262 E60A                       	smpsFMAlterVol      $0A
000B3264 06                         	dc.b	$06
000B3265 E6F6                       	smpsFMAlterVol      $F6
000B3267 06                         	dc.b	$06
000B3268 E60A                       	smpsFMAlterVol      $0A
000B326A 06                         	dc.b	$06
000B326B E6F6                       	smpsFMAlterVol      $F6
000B326D 06                         	dc.b	$06
000B326E E60A                       	smpsFMAlterVol      $0A
000B3270 06                         	dc.b	$06
000B3271 E6F6                       	smpsFMAlterVol      $F6
000B3273 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B3276 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B327B 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B327F E60A                       	smpsFMAlterVol      $0A
000B3281 06                         	dc.b	$06
000B3282 E6F6                       	smpsFMAlterVol      $F6
000B3284 0C                         	dc.b	$0C
000B3285 E60A                       	smpsFMAlterVol      $0A
000B3287 06                         	dc.b	$06
000B3288 E6F6                       	smpsFMAlterVol      $F6
000B328A 06                         	dc.b	$06
000B328B E60A                       	smpsFMAlterVol      $0A
000B328D 06                         	dc.b	$06
000B328E E6F6                       	smpsFMAlterVol      $F6
000B3290 06                         	dc.b	$06
000B3291 E60A                       	smpsFMAlterVol      $0A
000B3293 06                         	dc.b	$06
000B3294 E6F6                       	smpsFMAlterVol      $F6
000B3296 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B329D E60A                       	smpsFMAlterVol      $0A
000B329F 06                         	dc.b	$06
000B32A0 E6F6                       	smpsFMAlterVol      $F6
000B32A2 0C                         	dc.b	$0C
000B32A3 E60A                       	smpsFMAlterVol      $0A
000B32A5 06                         	dc.b	$06
000B32A6 E6F6                       	smpsFMAlterVol      $F6
000B32A8 06                         	dc.b	$06
000B32A9 E60A                       	smpsFMAlterVol      $0A
000B32AB 06                         	dc.b	$06
000B32AC E6F6                       	smpsFMAlterVol      $F6
000B32AE 06                         	dc.b	$06
000B32AF E60A                       	smpsFMAlterVol      $0A
000B32B1 06                         	dc.b	$06
000B32B2 E6F6                       	smpsFMAlterVol      $F6
000B32B4 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B32BA F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B32BF B11E                       	dc.b	nC4, $1E
000B32C1 E60A                       	smpsFMAlterVol      $0A
000B32C3 06                         	dc.b	$06
000B32C4 E6F6                       	smpsFMAlterVol      $F6
000B32C6 B12A                       	dc.b	nC4, $2A
000B32C8 E60A                       	smpsFMAlterVol      $0A
000B32CA 06                         	dc.b	$06
000B32CB E6F6                       	smpsFMAlterVol      $F6
000B32CD B12A                       	dc.b	nC4, $2A
000B32CF E60A                       	smpsFMAlterVol      $0A
000B32D1 06                         	dc.b	$06
000B32D2 E6F6                       	smpsFMAlterVol      $F6
000B32D4 B12A                       	dc.b	nC4, $2A
000B32D6 E60A                       	smpsFMAlterVol      $0A
000B32D8 06                         	dc.b	$06
000B32D9 E6F6                       	smpsFMAlterVol      $F6
000B32DB B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B32DF E60A                       	smpsFMAlterVol      $0A
000B32E1 06                         	dc.b	$06
000B32E2 E6F6                       	smpsFMAlterVol      $F6
000B32E4 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B32E8 E9F4                       	smpsAlterPitch      $F4
000B32EA F8FE C8                    	smpsCall            Tribute_Call03
000B32ED E90C                       	smpsAlterPitch      $0C
000B32EF F2                         	smpsStop
000B32F0                            
000B32F0                            Tribute_Call02:
000B32F0 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B32F6 E60A                       	smpsFMAlterVol      $0A
000B32F8 0680                       	dc.b	$06, nRst
000B32FA E6F6                       	smpsFMAlterVol      $F6
000B32FC B3                         	dc.b	nD4
000B32FD E60A                       	smpsFMAlterVol      $0A
000B32FF 0680                       	dc.b	$06, nRst
000B3301 E6F6                       	smpsFMAlterVol      $F6
000B3303 B1B1                       	dc.b	nC4, nC4
000B3305 E60A                       	smpsFMAlterVol      $0A
000B3307 06                         	dc.b	$06
000B3308 E6F6                       	smpsFMAlterVol      $F6
000B330A AE                         	dc.b	nA3
000B330B E60A                       	smpsFMAlterVol      $0A
000B330D 06                         	dc.b	$06
000B330E E6F6                       	smpsFMAlterVol      $F6
000B3310 B0                         	dc.b	nB3
000B3311 E3                         	smpsReturn
000B3312                            
000B3312                            ; FM4 Data
000B3312                            Tribute_FM4:
000B3312 EF01                       	smpsSetvoice        $01
000B3314 AC12 06                    	dc.b	nG3, $12, $06
000B3317 E60A                       	smpsFMAlterVol      $0A
000B3319 0680                       	dc.b	$06, nRst
000B331B E6F6                       	smpsFMAlterVol      $F6
000B331D AF                         	dc.b	nBb3
000B331E E60A                       	smpsFMAlterVol      $0A
000B3320 0680                       	dc.b	$06, nRst
000B3322 E6F6                       	smpsFMAlterVol      $F6
000B3324 ACAC                       	dc.b	nG3, nG3
000B3326 E60A                       	smpsFMAlterVol      $0A
000B3328 06                         	dc.b	$06
000B3329 E6F6                       	smpsFMAlterVol      $F6
000B332B AA                         	dc.b	nF3
000B332C E60A                       	smpsFMAlterVol      $0A
000B332E 06                         	dc.b	$06
000B332F E6F6                       	smpsFMAlterVol      $F6
000B3331 AC                         	dc.b	nG3
000B3332 EF02                       	smpsSetvoice        $02
000B3334 E918                       	smpsAlterPitch      $18
000B3336 E040                       	smpsPan             panRight, $00
000B3338 F800 00                    	smpsCall            Tribute_Call01
000B333B EF01                       	smpsSetvoice        $01
000B333D E9E8                       	smpsAlterPitch      $E8
000B333F E0C0                       	smpsPan             panCenter, $00
000B3341 F800 00                    	smpsCall            Tribute_Call01
000B3344 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B334C E60A                       	smpsFMAlterVol      $0A
000B334E 06                         	dc.b	$06
000B334F E6F6                       	smpsFMAlterVol      $F6
000B3351 AC12 06                    	dc.b	nG3, $12, $06
000B3354 E60A                       	smpsFMAlterVol      $0A
000B3356 0680                       	dc.b	$06, nRst
000B3358 E6F6                       	smpsFMAlterVol      $F6
000B335A AF                         	dc.b	nBb3
000B335B E60A                       	smpsFMAlterVol      $0A
000B335D 0680                       	dc.b	$06, nRst
000B335F E6F6                       	smpsFMAlterVol      $F6
000B3361 ACAC                       	dc.b	nG3, nG3
000B3363 E60A                       	smpsFMAlterVol      $0A
000B3365 06                         	dc.b	$06
000B3366 E6F6                       	smpsFMAlterVol      $F6
000B3368 AA                         	dc.b	nF3
000B3369 E60A                       	smpsFMAlterVol      $0A
000B336B 06                         	dc.b	$06
000B336C E6F6                       	smpsFMAlterVol      $F6
000B336E AC                         	dc.b	nG3
000B336F EF02                       	smpsSetvoice        $02
000B3371 E918                       	smpsAlterPitch      $18
000B3373 E040                       	smpsPan             panRight, $00
000B3375 F800 00                    	smpsCall            Tribute_Call01
000B3378 EF01                       	smpsSetvoice        $01
000B337A E9E8                       	smpsAlterPitch      $E8
000B337C E0C0                       	smpsPan             panCenter, $00
000B337E F800 00                    	smpsCall            Tribute_Call01
000B3381 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3389                            
000B3389                            Tribute_Loop02:
000B3389 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B338D E60A                       	smpsFMAlterVol      $0A
000B338F 06                         	dc.b	$06
000B3390 E6F6                       	smpsFMAlterVol      $F6
000B3392 0C                         	dc.b	$0C
000B3393 E60A                       	smpsFMAlterVol      $0A
000B3395 06                         	dc.b	$06
000B3396 E6F6                       	smpsFMAlterVol      $F6
000B3398 06                         	dc.b	$06
000B3399 E60A                       	smpsFMAlterVol      $0A
000B339B 06                         	dc.b	$06
000B339C E6F6                       	smpsFMAlterVol      $F6
000B339E 06                         	dc.b	$06
000B339F E60A                       	smpsFMAlterVol      $0A
000B33A1 06                         	dc.b	$06
000B33A2 E6F6                       	smpsFMAlterVol      $F6
000B33A4 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B33A7 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B33AC 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B33B0 E60A                       	smpsFMAlterVol      $0A
000B33B2 06                         	dc.b	$06
000B33B3 E6F6                       	smpsFMAlterVol      $F6
000B33B5 0C                         	dc.b	$0C
000B33B6 E60A                       	smpsFMAlterVol      $0A
000B33B8 06                         	dc.b	$06
000B33B9 E6F6                       	smpsFMAlterVol      $F6
000B33BB 06                         	dc.b	$06
000B33BC E60A                       	smpsFMAlterVol      $0A
000B33BE 06                         	dc.b	$06
000B33BF E6F6                       	smpsFMAlterVol      $F6
000B33C1 06                         	dc.b	$06
000B33C2 E60A                       	smpsFMAlterVol      $0A
000B33C4 06                         	dc.b	$06
000B33C5 E6F6                       	smpsFMAlterVol      $F6
000B33C7 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B33CE E60A                       	smpsFMAlterVol      $0A
000B33D0 06                         	dc.b	$06
000B33D1 E6F6                       	smpsFMAlterVol      $F6
000B33D3 0C                         	dc.b	$0C
000B33D4 E60A                       	smpsFMAlterVol      $0A
000B33D6 06                         	dc.b	$06
000B33D7 E6F6                       	smpsFMAlterVol      $F6
000B33D9 06                         	dc.b	$06
000B33DA E60A                       	smpsFMAlterVol      $0A
000B33DC 06                         	dc.b	$06
000B33DD E6F6                       	smpsFMAlterVol      $F6
000B33DF 06                         	dc.b	$06
000B33E0 E60A                       	smpsFMAlterVol      $0A
000B33E2 06                         	dc.b	$06
000B33E3 E6F6                       	smpsFMAlterVol      $F6
000B33E5 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B33EB F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B33F0 AC1E                       	dc.b	nG3, $1E
000B33F2 E60A                       	smpsFMAlterVol      $0A
000B33F4 06                         	dc.b	$06
000B33F5 E6F6                       	smpsFMAlterVol      $F6
000B33F7 AD2A                       	dc.b	nAb3, $2A
000B33F9 E60A                       	smpsFMAlterVol      $0A
000B33FB 06                         	dc.b	$06
000B33FC E6F6                       	smpsFMAlterVol      $F6
000B33FE AC2A                       	dc.b	nG3, $2A
000B3400 E60A                       	smpsFMAlterVol      $0A
000B3402 06                         	dc.b	$06
000B3403 E6F6                       	smpsFMAlterVol      $F6
000B3405 AE2A                       	dc.b	nA3, $2A
000B3407 E60A                       	smpsFMAlterVol      $0A
000B3409 06                         	dc.b	$06
000B340A E6F6                       	smpsFMAlterVol      $F6
000B340C AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B3410 E60A                       	smpsFMAlterVol      $0A
000B3412 06                         	dc.b	$06
000B3413 E6F6                       	smpsFMAlterVol      $F6
000B3415 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B341B F2                         	smpsStop
000B341C                            
000B341C                            Tribute_Call01:
000B341C AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B3422 E60A                       	smpsFMAlterVol      $0A
000B3424 0680                       	dc.b	$06, nRst
000B3426 E6F6                       	smpsFMAlterVol      $F6
000B3428 AF                         	dc.b	nBb3
000B3429 E60A                       	smpsFMAlterVol      $0A
000B342B 0680                       	dc.b	$06, nRst
000B342D E6F6                       	smpsFMAlterVol      $F6
000B342F ACAC                       	dc.b	nG3, nG3
000B3431 E60A                       	smpsFMAlterVol      $0A
000B3433 06                         	dc.b	$06
000B3434 E6F6                       	smpsFMAlterVol      $F6
000B3436 AA                         	dc.b	nF3
000B3437 E60A                       	smpsFMAlterVol      $0A
000B3439 06                         	dc.b	$06
000B343A E6F6                       	smpsFMAlterVol      $F6
000B343C AC                         	dc.b	nG3
000B343D E3                         	smpsReturn
000B343E                            
000B343E                            ; FM5 Data
000B343E                            Tribute_FM5:
000B343E EF02                       	smpsSetvoice        $02
000B3440                            
000B3440                            Tribute_Jump00:
000B3440 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B344C 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B3458 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B3464 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B3470                            
000B3470                            Tribute_Loop01:
000B3470 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B347C BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B3488 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B3494 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B34A0 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B34AC 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B34B8 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B34BC F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B34C1 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B34CD 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B34D9 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B34E5 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B34EF E918                       	smpsAlterPitch      $18
000B34F1 F8FB 98                    	smpsCall            Tribute_Call00
000B34F4 E9E8                       	smpsAlterPitch      $E8
000B34F6 F2                         	smpsStop
000B34F7                            
000B34F7                            ; FM6 Data
000B34F7                            Tribute_FM6:
000B34F7 EF02                       	smpsSetvoice        $02
000B34F9 E040                       	smpsPan             panRight, $00
000B3500 E104                       	smpsAlterNote       $04
000B3502 8006                       	dc.b	nRst, $06
000B3504 F6FF 3A                    	smpsJump            Tribute_Jump00
000B3507                            
000B3507                            ; PSG1 Data
000B3507                            Tribute_PSG1:
000B3507 F505                       	smpsPSGvoice        sTone_09
000B350E A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B351A E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B3529 ECFD                       	smpsPSGAlterVol     $FD
000B352B                            
000B352B                            Tribute_Jump01:
000B352B F505                       	smpsPSGvoice        sTone_09
000B352D F800 00                    	smpsCall            Tribute_Call07
000B3530 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B353C B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B3545 F800 00                    	smpsCall            Tribute_Call07
000B3548 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B3554 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B3560 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B356C B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B3578 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B3584 E918                       	smpsAlterPitch      $18
000B3586 F8FB 03                    	smpsCall            Tribute_Call00
000B3589 E9E8                       	smpsAlterPitch      $E8
000B358B F2                         	smpsStop
000B358C                            
000B358C                            Tribute_Call07:
000B358C B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B3598 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B35A4 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B35B0 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B35BC 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B35C8 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B35D4 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B35DD E3                         	smpsReturn
000B35DE                            
000B35DE                            ; PSG2 Data
000B35DE                            Tribute_PSG2:
000B35DE F505                       	smpsPSGvoice        sTone_09
000B35E5 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B35F1 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B35FB ECFF                       	smpsPSGAlterVol     $FF
000B3602 8006                       	dc.b	nRst, $06
000B3604 F6FF 25                    	smpsJump            Tribute_Jump01
000B3607                            
000B3607                            ; PSG3 Data
000B3607                            Tribute_PSG3:
000B3607 F3E7                       	smpsPSGform         $E7
000B3609 F502                       	smpsPSGvoice        sTone_02
000B360B AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B3612 F501                       	smpsPSGvoice        sTone_05
000B3614 0680 18                    	dc.b	$06, nRst, $18
000B3617 F502                       	smpsPSGvoice        sTone_02
000B3619 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B361D F501                       	smpsPSGvoice        sTone_05
000B361F 06                         	dc.b	$06
000B3620 F502                       	smpsPSGvoice        sTone_02
000B3622 06                         	dc.b	$06
000B3623 F501                       	smpsPSGvoice        sTone_05
000B3625 06                         	dc.b	$06
000B3626 F502                       	smpsPSGvoice        sTone_02
000B3628 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B3630 F501                       	smpsPSGvoice        sTone_05
000B3632 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B3637 F502                       	smpsPSGvoice        sTone_02
000B3639 06                         	dc.b	$06
000B363A F501                       	smpsPSGvoice        sTone_05
000B363C 06                         	dc.b	$06
000B363D F502                       	smpsPSGvoice        sTone_02
000B363F 06                         	dc.b	$06
000B3640 F501                       	smpsPSGvoice        sTone_05
000B3642 06                         	dc.b	$06
000B3643 F502                       	smpsPSGvoice        sTone_02
000B3645 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B3649 F501                       	smpsPSGvoice        sTone_05
000B364B 06                         	dc.b	$06
000B364C F502                       	smpsPSGvoice        sTone_02
000B364E 06                         	dc.b	$06
000B364F F501                       	smpsPSGvoice        sTone_05
000B3651 06                         	dc.b	$06
000B3652 F502                       	smpsPSGvoice        sTone_02
000B3654 0C                         	dc.b	$0C
000B3655 F502                       	smpsPSGvoice        sTone_02
000B3657 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B365E F501                       	smpsPSGvoice        sTone_05
000B3660 06                         	dc.b	$06
000B3661 F502                       	smpsPSGvoice        sTone_02
000B3663 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B3669 F501                       	smpsPSGvoice        sTone_05
000B366B 06                         	dc.b	$06
000B366C F502                       	smpsPSGvoice        sTone_02
000B366E 06                         	dc.b	$06
000B366F F501                       	smpsPSGvoice        sTone_05
000B3671 06                         	dc.b	$06
000B3672 F502                       	smpsPSGvoice        sTone_02
000B3674 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B367C F501                       	smpsPSGvoice        sTone_05
000B367E 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B3682                            
000B3682                            Tribute_Loop06:
000B3682 F800 00                    	smpsCall            Tribute_Call06
000B3685 800C                       	dc.b	nRst, $0C
000B3687 F502                       	smpsPSGvoice        sTone_02
000B3689 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B3691 F800 00                    	smpsCall            Tribute_Call06
000B3694 800C                       	dc.b	nRst, $0C
000B3696 F502                       	smpsPSGvoice        sTone_02
000B3698 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B369E F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B36A3 E718                       	dc.b	smpsNoAttack, $18
000B36A5 F502                       	smpsPSGvoice        sTone_02
000B36A7 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B36B3 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B36B4 F2                         	smpsStop
000B36B5                            
000B36B5                            Tribute_Call06:
000B36B5 F502                       	smpsPSGvoice        sTone_02
000B36B7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B36BF F501                       	smpsPSGvoice        sTone_05
000B36C1 06                         	dc.b	$06
000B36C2 F502                       	smpsPSGvoice        sTone_02
000B36C4 06                         	dc.b	$06
000B36C5 F501                       	smpsPSGvoice        sTone_05
000B36C7 0680 0C                    	dc.b	$06, nRst, $0C
000B36CA F502                       	smpsPSGvoice        sTone_02
000B36CC AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B36D5 F502                       	smpsPSGvoice        sTone_02
000B36D7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B36DF F501                       	smpsPSGvoice        sTone_05
000B36E1 06                         	dc.b	$06
000B36E2 F502                       	smpsPSGvoice        sTone_02
000B36E4 06                         	dc.b	$06
000B36E5 F501                       	smpsPSGvoice        sTone_05
000B36E7 06                         	dc.b	$06
000B36E8 E3                         	smpsReturn
000B36E9                            
000B36E9                            ; DAC Data
000B36E9                            Tribute_DAC:
000B36E9 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B36F3 E690                       	smpsFMAlterVol      $90
000B36F5 8A0C                       	dc.b	dLowTimpani, $0C
000B36F7 E670                       	smpsFMAlterVol      $70
000B36F9 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B3701 E6F9                       	smpsFMAlterVol      $F9
000B3703 88                         	dc.b	dHiTimpani
000B3704 E607                       	smpsFMAlterVol      $07
000B3706 8982                       	dc.b	dMidTimpani, dSnare
000B3708 E690                       	smpsFMAlterVol      $90
000B370A 8A                         	dc.b	dLowTimpani
000B370B E670                       	smpsFMAlterVol      $70
000B370D 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B3719 06                         	dc.b	$06
000B371A E690                       	smpsFMAlterVol      $90
000B371C 8A0C                       	dc.b	dLowTimpani, $0C
000B371E E670                       	smpsFMAlterVol      $70
000B3720 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B372A                            
000B372A                            Tribute_Loop00:
000B372A 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B3736 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B373C E6F9                       	smpsFMAlterVol      $F9
000B373E 88                         	dc.b	dHiTimpani
000B373F E607                       	smpsFMAlterVol      $07
000B3741 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B374D 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B3754 E607                       	smpsFMAlterVol      $07
000B3756 88                         	dc.b	dHiTimpani
000B3757 E6F9                       	smpsFMAlterVol      $F9
000B3759 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B375F F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B3764 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B3768 E6F9                       	smpsFMAlterVol      $F9
000B376A 8804                       	dc.b	dHiTimpani, $04
000B376C E607                       	smpsFMAlterVol      $07
000B376E 89                         	dc.b	dMidTimpani
000B376F E690                       	smpsFMAlterVol      $90
000B3771 8A                         	dc.b	dLowTimpani
000B3772 E670                       	smpsFMAlterVol      $70
000B3774 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B3780 6081 36                    	dc.b	$60, dKick, $36
000B3783 E6F9                       	smpsFMAlterVol      $F9
000B3785 8806                       	dc.b	dHiTimpani, $06
000B3787 E607                       	smpsFMAlterVol      $07
000B3789 89                         	dc.b	dMidTimpani
000B378A E690                       	smpsFMAlterVol      $90
000B378C 8A                         	dc.b	dLowTimpani
000B378D E670                       	smpsFMAlterVol      $70
000B378F 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B379B 8182                       	dc.b	dKick, dSnare
000B379D E6F9                       	smpsFMAlterVol      $F9
000B379F 88                         	dc.b	dHiTimpani
000B37A0 E607                       	smpsFMAlterVol      $07
000B37A2 8982                       	dc.b	dMidTimpani, dSnare
000B37A4 E690                       	smpsFMAlterVol      $90
000B37A6 8A                         	dc.b	dLowTimpani
000B37A7 E670                       	smpsFMAlterVol      $70
000B37A9 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B37B0 E690                       	smpsFMAlterVol      $90
000B37B2 8A                         	dc.b	dLowTimpani
000B37B3 E670                       	smpsFMAlterVol      $70
000B37B5 8281                       	dc.b	dSnare, dKick
000B37B7 F2                         	smpsStop
000B37B8                            
000B37B8                            Tribute_Voices:
000B37B8                            ;	Voice $00
000B37B8                            ;	$3B
000B37B8                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B37B8                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B37B8                            	smpsVcAlgorithm     $03
000B37B8                            	smpsVcFeedback      $07
000B37B8                            	smpsVcUnusedBits    $00
000B37B8                            	smpsVcDetune        $00, $00, $03, $05
000B37B8                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B37B8                            	smpsVcRateScale     $02, $01, $02, $03
000B37B8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B37B8                            	smpsVcAmpMod        $00, $00, $00, $00
000B37B8                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B37B8                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B37B8                            	smpsVcDecayLevel    $05, $03, $07, $05
000B37B8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B37D1                            
000B37D1                            ;	Voice $01
000B37D1                            ;	$3D
000B37D1                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B37D1                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B37D1                            	smpsVcAlgorithm     $05
000B37D1                            	smpsVcFeedback      $07
000B37D1                            	smpsVcUnusedBits    $00
000B37D1                            	smpsVcDetune        $00, $00, $00, $05
000B37D1                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B37D1                            	smpsVcRateScale     $00, $00, $00, $02
000B37D1                            	smpsVcAttackRate    $19, $19, $19, $14
000B37D1                            	smpsVcAmpMod        $00, $00, $00, $00
000B37D1                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B37D1                            	smpsVcDecayRate2    $04, $04, $04, $07
000B37D1                            	smpsVcDecayLevel    $01, $01, $01, $03
000B37D1                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B37EA                            
000B37EA                            ;	Voice $02
000B37EA                            ;	$1F
000B37EA                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B37EA                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B37EA                            	smpsVcAlgorithm     $07
000B37EA                            	smpsVcFeedback      $03
000B37EA                            	smpsVcUnusedBits    $00
000B37EA                            	smpsVcDetune        $01, $00, $03, $02
000B37EA                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B37EA                            	smpsVcRateScale     $02, $02, $02, $02
000B37EA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B37EA                            	smpsVcAmpMod        $00, $00, $00, $00
000B37EA                            	smpsVcDecayRate1    $07, $09, $07, $06
000B37EA                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B37EA                            	smpsVcDecayLevel    $09, $09, $09, $09
000B37EA                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B3803                            
000B3803                            
000B3804 00                         		even		
000B3804                            ; ---------------------------------------------------------------------------
000B3804                            ; Sound	effect pointers
000B3804                            ; ---------------------------------------------------------------------------
000B3804                            SoundIndex:
000B3804 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B3808 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B380C 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B3810 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B3814 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B3818 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B381C 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B3820 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B3824 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B3828 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B382C 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B3830 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B3834 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B3838 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B383C 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B3840 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B3844 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B3848 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B384C 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B3850 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B3854 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B3858 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B385C 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B3860 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B3864 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B3868 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B386C 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B3870 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B3874 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B3878 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B387C 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B3880 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B3884 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B3888 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B388C 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B3890 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B3894 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B3898 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B389C 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B38A0 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B38A4 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B38A8 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B38AC 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B38B0 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B38B4 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B38B8 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B38BC 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B38C0 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B38C4                            ptr_sndend
000B38C4                            ; ---------------------------------------------------------------------------
000B38C4                            ; Special sound effect pointers
000B38C4                            ; ---------------------------------------------------------------------------
000B38C4                            SpecSoundIndex:
000B38C4 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B38C8 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B38CC 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B38D0 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B38D4 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B38D8 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B38DC                            ptr_specend
000B38DC                            SoundA0:	include	"sound/sfx/Jump.asm"
000B38DC                            SndA0_Jump_Header:
000B38DC                            	smpsHeaderStartSong 1
000B38DE 01                         	smpsHeaderTempoSFX  $01
000B38DF 01                         	smpsHeaderChanSFX   $01
000B38E0                            
000B38E6                            
000B38E6                            ; PSG2 Data
000B38E6                            SndA0_Jump_PSG2:
000B38E6 F500                       	smpsPSGvoice        $00
000B38E8 9E05                       	dc.b	nF2, $05
000B38EF A315                       	dc.b	nBb2, $15
000B38F1 F2                         	smpsStop
000B38F2                            
000B38F2                            ; Song seems to not use any FM voices
000B38F2                            SndA0_Jump_Voices:
000B38F2                            SndA0_Jump_Voices:
000B38F2                            		even
000B38F2                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B391C                            		even
000B391C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B391C                            SndDF_Header:
000B391C                            	smpsHeaderStartSong 3
000B391E 01                         	smpsHeaderTempoSFX  $01
000B391F 01                         	smpsHeaderChanSFX   $01
000B3920                            
000B3926                            
000B3926                            ; FM5 Data
000B3926                            SndDF_FM5:
000B3926 EF00                       	smpsSetvoice        $00
000B3928                            
000B3928                            SndDF_Loop00:
000B3928 F800 00                    	smpsCall            SndDF_Call00
000B392B E905                       	smpsAlterPitch $05
000B392D E608                       	smpsFMAlterVol      $08
000B392F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B3934 E9EC                       	smpsAlterPitch $EC
000B3936 E6E0                       	smpsFMAlterVol      $E0
000B3938 F2                         	smpsStop
000B3939                            
000B3939                            SndDF_Call00:
000B3939 9902                       	dc.b	nC2, $02
000B393B E901                       	smpsAlterPitch $01
000B393D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B3942 E9F6                       	smpsAlterPitch $F6
000B3944 E3                         	smpsReturn
000B3945                            
000B3945                            SndDF_Voices:
000B3945                            ;	Voice $00
000B3945                            ;	$07
000B3945                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B3945                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B3945                            	smpsVcAlgorithm     $07
000B3945                            	smpsVcFeedback      $00
000B3945                            	smpsVcUnusedBits    $00
000B3945                            	smpsVcDetune        $00, $00, $00, $00
000B3945                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B3945                            	smpsVcRateScale     $00, $00, $00, $00
000B3945                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B3945                            	smpsVcAmpMod        $00, $00, $00, $00
000B3945                            	smpsVcDecayRate1    $00, $00, $00, $00
000B3945                            	smpsVcDecayRate2    $00, $00, $00, $00
000B3945                            	smpsVcDecayLevel    $01, $01, $01, $01
000B3945                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B395E                            		even
000B395E                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B3990                            		even
000B3990                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B39D4 00                         		even
000B39D4                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B39D4                            SndD2_Header:
000B39D4                            	smpsHeaderStartSong 3
000B39D6 01                         	smpsHeaderTempoSFX  $01
000B39D7 01                         	smpsHeaderChanSFX   $01
000B39D8                            
000B39DE                            
000B39DE                            ; FM4 Data
000B39DE                            SndD2_FM4:
000B39DE EF00                       	smpsSetvoice        $00
000B39E5 C645                       	dc.b	nA5, $45
000B39E7 F2                         	smpsStop
000B39E8                            
000B39E8                            SndD2_Voices:
000B39E8                            ;	Voice $00
000B39E8                            ;	$04
000B39E8                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B39E8                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B39E8                            	smpsVcAlgorithm     $04
000B39E8                            	smpsVcFeedback      $00
000B39E8                            	smpsVcUnusedBits    $00
000B39E8                            	smpsVcDetune        $04, $00, $00, $02
000B39E8                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B39E8                            	smpsVcRateScale     $00, $00, $00, $00
000B39E8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B39E8                            	smpsVcAmpMod        $00, $00, $00, $00
000B39E8                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B39E8                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B39E8                            	smpsVcDecayLevel    $00, $01, $00, $01
000B39E8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3A02 00                         		even
000B3A02                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B3A32                            		even
000B3A32                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B3A62                            		even
000B3A62                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B3A96                            		even
000B3A96                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B3AA8                            		even
000B3AA8                            SoundAA:	include	"sound/sfx/Splash.asm"
000B3AA8                            SndA2_Header:
000B3AA8                            	smpsHeaderStartSong 3
000B3AAA 01                         	smpsHeaderTempoSFX  $01
000B3AAB 02                         	smpsHeaderChanSFX   $02
000B3AAC                            
000B3AB8                            
000B3AB8                            ; FM3 Data
000B3AB8                            SndA2_FM3:
000B3AB8 EF00                       	smpsSetvoice        $00
000B3ABF 8106                       	dc.b	nC0, $06
000B3AC1                            
000B3AC1                            SndA2_Loop00:
000B3AC1 810E                       	dc.b	nC0, $0E
000B3AC3 E60E                       	smpsAlterVol      $0E
000B3AC5 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B3ACA F2                         	smpsStop
000B3ACB                            
000B3ACB                            ; FM4 Data
000B3ACB                            SndA2_FM4:
000B3ACB EF01                       	smpsSetvoice        $01
000B3ACD A606 14                    	dc.b	nCs3, $06, $14
000B3AD0 F2                         	smpsStop
000B3AD1                            
000B3AD1                            SndA2_Voices:
000B3AD1                            ;	Voice $00
000B3AD1                            ;	$F9
000B3AD1                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B3AD1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B3AD1                            	smpsVcAlgorithm     $01
000B3AD1                            	smpsVcFeedback      $07
000B3AD1                            	smpsVcUnusedBits    $03
000B3AD1                            	smpsVcDetune        $03, $01, $03, $02
000B3AD1                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B3AD1                            	smpsVcRateScale     $00, $00, $00, $00
000B3AD1                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B3AD1                            	smpsVcAmpMod        $00, $00, $00, $00
000B3AD1                            	smpsVcDecayRate1    $02, $09, $18, $05
000B3AD1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B3AD1                            	smpsVcDecayLevel    $02, $04, $02, $01
000B3AD1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3AEA                            
000B3AEA                            ;	Voice $01
000B3AEA                            ;	$00
000B3AEA                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B3AEA                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B3AEA                            	smpsVcAlgorithm     $00
000B3AEA                            	smpsVcFeedback      $00
000B3AEA                            	smpsVcUnusedBits    $00
000B3AEA                            	smpsVcDetune        $00, $00, $00, $00
000B3AEA                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B3AEA                            	smpsVcRateScale     $00, $00, $03, $03
000B3AEA                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B3AEA                            	smpsVcAmpMod        $00, $00, $00, $00
000B3AEA                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B3AEA                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B3AEA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B3AEA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3B04 00                         		even
000B3B04                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B3B04                            Sound_3E_Header:
000B3B04                            	smpsHeaderStartSong 3
000B3B06 01                         	smpsHeaderTempoSFX  $01
000B3B07 01                         	smpsHeaderChanSFX   $01
000B3B08                            
000B3B0E                            
000B3B0E                            ; FM5 Data
000B3B0E                            Sound_3E_3F_40_41_FM5:
000B3B0E EF00                       	smpsSetvoice        $00
000B3B10 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B3B15 F2                         	smpsStop
000B3B16                            
000B3B16                            Sound_3E_Voices:
000B3B16                            ;	Voice $00
000B3B16                            ;	$0C
000B3B16                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B3B16                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B3B16                            	smpsVcAlgorithm     $04
000B3B16                            	smpsVcFeedback      $01
000B3B16                            	smpsVcUnusedBits    $00
000B3B16                            	smpsVcDetune        $03, $03, $02, $00
000B3B16                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B3B16                            	smpsVcRateScale     $00, $00, $00, $00
000B3B16                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B3B16                            	smpsVcAmpMod        $00, $00, $00, $00
000B3B16                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B3B16                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B3B16                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B3B16                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3B2F                            
000B3B2F                            
000B3B30 00                         		even
000B3B30                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B3B64                            		even
000B3B64                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B3B9A                            		even
000B3B9A                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B3B9A                            Sound_70_Header:
000B3B9A                            	smpsHeaderStartSong 3
000B3B9C 01                         	smpsHeaderTempoSFX  $01
000B3B9D 02                         	smpsHeaderChanSFX   $02
000B3B9E                            
000B3BAA                            
000B3BAA                            ; FM5 Data
000B3BAA                            Sound_70_FM5:
000B3BAA EF00                       	smpsSetvoice        $00
000B3BAC 8001                       	dc.b	nRst, $01
000B3BB3 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B3BB7 F2                         	smpsStop
000B3BB8                            
000B3BB8                            ; PSG3 Data
000B3BB8                            Sound_70_PSG3:
000B3BB8 F500                       	smpsPSGvoice        sTone_0D
000B3BBA 800B                       	dc.b	nRst, $0B
000B3BBC F3E7                       	smpsPSGform         $E7
000B3BBE C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B3BC1                            
000B3BC1                            Sound_70_Loop00:
000B3BC1 02                         	dc.b	$02
000B3BC2 EC01                       	smpsPSGAlterVol     $01
000B3BC4 E7                         	dc.b	smpsNoAttack
000B3BC5 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B3BCA F2                         	smpsStop
000B3BCB                            
000B3BCB                            Sound_70_Voices:
000B3BCB                            ;	Voice $00
000B3BCB                            ;	$FA
000B3BCB                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B3BCB                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B3BCB                            	smpsVcAlgorithm     $02
000B3BCB                            	smpsVcFeedback      $07
000B3BCB                            	smpsVcUnusedBits    $03
000B3BCB                            	smpsVcDetune        $00, $00, $00, $00
000B3BCB                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B3BCB                            	smpsVcRateScale     $00, $00, $00, $00
000B3BCB                            	smpsVcAttackRate    $13, $0F, $11, $12
000B3BCB                            	smpsVcAmpMod        $00, $00, $00, $00
000B3BCB                            	smpsVcDecayRate1    $02, $09, $18, $05
000B3BCB                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B3BCB                            	smpsVcDecayLevel    $02, $04, $02, $01
000B3BCB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3BE4                            
000B3BE4                            
000B3BE4                            		even
000B3BE4                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B3C12                            		even
000B3C12                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B3C44                            		even
000B3C44                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B3C70                            		even
000B3C70                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B3CC0                            		even
000B3CC0                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B3D0A                            		even
000B3D0A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B3D66                            		even
000B3D66                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B3D94                            		even
000B3D94                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B3D94                            SpikesSFX_Header:
000B3D94                            	smpsHeaderStartSong 3
000B3D96 01                         	smpsHeaderTempoSFX  $01
000B3D97 02                         	smpsHeaderChanSFX   $02
000B3D98                            
000B3DA4                            
000B3DA4                            ; FM6 Data
000B3DA4                            SndB7_FM3:
000B3DA4 EF01                       	smpsSetvoice        $01
000B3DAB B105                       	dc.b	nC4, $05
000B3DAD F1                         	smpsModOn
000B3DAE E10A                       	smpsAlterNote       $0A
000B3DB0 E601                       	smpsAlterVol        $01
000B3DB2 F2                         	smpsStop
000B3DB3                            
000B3DB3                            ; FM5 Data
000B3DB3                            SndB7_FM5:
000B3DB3 8005                       	dc.b	nRst, $05			 
000B3DB5 EF00                       	smpsSetvoice        $00
000B3DB7 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B3DBD F2                         	smpsStop
000B3DBE                            
000B3DBE                            SndB7_Voices:
000B3DBE                            ;	Voice $00
000B3DBE                            ;	$34
000B3DBE                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B3DBE                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B3DBE                            	smpsVcAlgorithm     $04
000B3DBE                            	smpsVcFeedback      $06
000B3DBE                            	smpsVcUnusedBits    $00
000B3DBE                            	smpsVcDetune        $0D, $00, $00, $00
000B3DBE                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B3DBE                            	smpsVcRateScale     $00, $00, $00, $00
000B3DBE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3DBE                            	smpsVcAmpMod        $00, $00, $00, $00
000B3DBE                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B3DBE                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B3DBE                            	smpsVcDecayLevel    $03, $05, $01, $03
000B3DBE                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B3DD7                            
000B3DD7                            ;	Voice $01
000B3DD7                            ;	$FA
000B3DD7                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B3DD7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B3DD7                            	smpsVcAlgorithm     $02
000B3DD7                            	smpsVcFeedback      $07
000B3DD7                            	smpsVcUnusedBits    $03
000B3DD7                            	smpsVcDetune        $03, $01, $03, $02
000B3DD7                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B3DD7                            	smpsVcRateScale     $00, $00, $00, $00
000B3DD7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3DD7                            	smpsVcAmpMod        $00, $00, $00, $00
000B3DD7                            	smpsVcDecayRate1    $02, $09, $18, $05
000B3DD7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B3DD7                            	smpsVcDecayLevel    $02, $04, $02, $01
000B3DD7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3DF0                            		even
000B3DF0                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B3E2C                            		even
000B3E2C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B3E2C                            SndBD_Header:
000B3E2C                            	smpsHeaderStartSong 3
000B3E2E 01                         	smpsHeaderTempoSFX  $01
000B3E2F 01                         	smpsHeaderChanSFX   $01
000B3E30                            
000B3E36                            
000B3E36                            ; FM6 Data
000B3E36                            SndBD_FM3:
000B3E36 EF00                       	smpsSetvoice        $00
000B3E38                            
000B3E38                            SndBD_Loop00:
000B3E38 C009                       	dc.b	nEb5, $09
000B3E3A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B3E3F F2                         	smpsStop
000B3E40                            
000B3E40                            SndBD_Voices:
000B3E40                            ;	Voice $00
000B3E40                            ;	$02
000B3E40                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B3E40                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B3E40                            	smpsVcAlgorithm     $02
000B3E40                            	smpsVcFeedback      $00
000B3E40                            	smpsVcUnusedBits    $00
000B3E40                            	smpsVcDetune        $00, $02, $05, $00
000B3E40                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B3E40                            	smpsVcRateScale     $00, $00, $00, $00
000B3E40                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B3E40                            	smpsVcAmpMod        $00, $00, $00, $00
000B3E40                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B3E40                            	smpsVcDecayRate2    $00, $00, $00, $01
000B3E40                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B3E40                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3E5A 00                         		even
000B3E5A                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B3E5A                            Sound_59_Header:
000B3E5A                            	smpsHeaderStartSong 3
000B3E5C 01                         	smpsHeaderTempoSFX  $01
000B3E5D 04                         	smpsHeaderChanSFX   $04
000B3E5E                            
000B3E76                            
000B3E76                            ; FM3 Data
000B3E76                            Sound_59_FM3:
000B3E76 E040                       	smpsPan             panRight, $00
000B3E78 8002                       	dc.b	nRst, $02
000B3E7A F600 00                    	smpsJump            Sound_59_FM4
000B3E7D                            
000B3E7D                            ; FM5 Data
000B3E7D                            Sound_59_FM5:
000B3E7D E080                       	smpsPan             panLeft, $00
000B3E7F 8001                       	dc.b	nRst, $01
000B3E81                            
000B3E81                            ; FM4 Data
000B3E81                            Sound_59_FM4:
000B3E81 EF00                       	smpsSetvoice        $00
000B3E88 8110                       	dc.b	nC0, $10
000B3E8A F2                         	smpsStop
000B3E8B                            
000B3E8B                            ; PSG3 Data
000B3E8B                            Sound_59_PSG3:
000B3E90 F3E7                       	smpsPSGform         $E7
000B3E92                            
000B3E92                            Sound_59_Loop00:
000B3E92 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B3E95 EC03                       	smpsPSGAlterVol     $03
000B3E97 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B3E9C F2                         	smpsStop
000B3E9D                            
000B3E9D                            Sound_59_Voices:
000B3E9D                            ;	Voice $00
000B3E9D                            ;	$F9
000B3E9D                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B3E9D                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B3E9D                            	smpsVcAlgorithm     $01
000B3E9D                            	smpsVcFeedback      $07
000B3E9D                            	smpsVcUnusedBits    $03
000B3E9D                            	smpsVcDetune        $03, $01, $03, $02
000B3E9D                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B3E9D                            	smpsVcRateScale     $00, $00, $00, $00
000B3E9D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3E9D                            	smpsVcAmpMod        $00, $00, $00, $00
000B3E9D                            	smpsVcDecayRate1    $02, $09, $18, $05
000B3E9D                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B3E9D                            	smpsVcDecayLevel    $02, $04, $02, $01
000B3E9D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3EB6                            
000B3EB6                            
000B3EB6                            		even
000B3EB6                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B3EDE                            		even
000B3EDE                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B3F0A                            		even
000B3F0A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B3F0A                            Sound_B6_Header:
000B3F0A                            	smpsHeaderStartSong 3
000B3F0C 01                         	smpsHeaderTempoSFX  $01
000B3F0D 02                         	smpsHeaderChanSFX   $02
000B3F0E                            
000B3F1A                            
000B3F1A                            ; FM5 Data
000B3F1A                            Sound_B6_FM5:
000B3F1A EF00                       	smpsSetvoice        $00
000B3F21 CD0F                       	dc.b	nE6, $0F
000B3F23 F2                         	smpsStop
000B3F24                            
000B3F24                            ; PSG3 Data
000B3F24                            Sound_B6_PSG3:
000B3F24 F507                       	smpsPSGvoice        sTone_1D
000B3F26 8006                       	dc.b	nRst, $06
000B3F2D F3E7                       	smpsPSGform         $E7
000B3F2F CD4F                       	dc.b	nE6, $4F
000B3F31 F2                         	smpsStop
000B3F32                            
000B3F32                            Sound_B6_Voices:
000B3F32                            ;	Voice $00
000B3F32                            ;	$3D
000B3F32                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B3F32                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B3F32                            	smpsVcAlgorithm     $05
000B3F32                            	smpsVcFeedback      $07
000B3F32                            	smpsVcUnusedBits    $00
000B3F32                            	smpsVcDetune        $00, $00, $00, $00
000B3F32                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B3F32                            	smpsVcRateScale     $00, $00, $00, $00
000B3F32                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B3F32                            	smpsVcAmpMod        $00, $00, $00, $00
000B3F32                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B3F32                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B3F32                            	smpsVcDecayLevel    $02, $04, $02, $01
000B3F32                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B3F4B                            
000B3F4B                            
000B3F4C 00                         		even
000B3F4C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B3FA0                            		even
000B3FA0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B3FDA                            		even
000B3FDA                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B404C                            		even
000B404C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B407A                            		even
000B407A                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B40B4                            		even
000B40B4                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B40B4                            SndC1_Header:
000B40B4                            	smpsHeaderStartSong 3
000B40B6 01                         	smpsHeaderTempoSFX  $01
000B40B7 01                         	smpsHeaderChanSFX   $01
000B40B8                            
000B40BE                            
000B40BE                            ; FM4 Data
000B40BE                            SndC1_FM4:
000B40BE EF00                       	smpsSetvoice        $00
000B40C0 D506 40                    	dc.b	nC7, $06, $40
000B40C3 F2                         	smpsStop
000B40C4                            
000B40C4                            SndC1_Voices:
000B40C4                            ;	Voice $00
000B40C4                            ;	$38
000B40C4                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B40C4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B40C4                            	smpsVcAlgorithm     $00
000B40C4                            	smpsVcFeedback      $07
000B40C4                            	smpsVcUnusedBits    $00
000B40C4                            	smpsVcDetune        $00, $00, $00, $00
000B40C4                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B40C4                            	smpsVcRateScale     $00, $00, $00, $00
000B40C4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B40C4                            	smpsVcAmpMod        $00, $00, $00, $00
000B40C4                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B40C4                            	smpsVcDecayRate2    $00, $00, $00, $00
000B40C4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B40C4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B40DE 00                         		even
000B40DE                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B4158                            		even
000B4158                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B4180                            		even
000B4180                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B4180                            Sound_B0_Header:
000B4180                            	smpsHeaderStartSong 3
000B4182 01                         	smpsHeaderTempoSFX  $01
000B4183 03                         	smpsHeaderChanSFX   $03
000B4184                            
000B4196                            
000B4196                            ; FM5 Data
000B4196                            Sound_B0_FM5:
000B4196 EF00                       	smpsSetvoice        $00
000B4198 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B419E F2                         	smpsStop
000B419F                            
000B419F                            ; FM4 Data
000B419F                            Sound_B0_FM4:
000B419F EF01                       	smpsSetvoice        $01
000B41A1 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B41A5 F2                         	smpsStop
000B41A6                            
000B41A6                            ; FM3 Data
000B41A6                            Sound_B0_FM3:
000B41A6 EF02                       	smpsSetvoice        $02
000B41A8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B41AF F2                         	smpsStop
000B41B0                            
000B41B0                            Sound_B0_Voices:
000B41B0                            ;	Voice $00
000B41B0                            ;	$3B
000B41B0                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B41B0                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B41B0                            	smpsVcAlgorithm     $03
000B41B0                            	smpsVcFeedback      $07
000B41B0                            	smpsVcUnusedBits    $00
000B41B0                            	smpsVcDetune        $00, $00, $00, $00
000B41B0                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B41B0                            	smpsVcRateScale     $02, $00, $00, $00
000B41B0                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B41B0                            	smpsVcAmpMod        $00, $00, $00, $00
000B41B0                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B41B0                            	smpsVcDecayRate2    $00, $00, $00, $00
000B41B0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B41B0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B41C9                            
000B41C9                            ;	Voice $01
000B41C9                            ;	$04
000B41C9                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B41C9                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B41C9                            	smpsVcAlgorithm     $04
000B41C9                            	smpsVcFeedback      $00
000B41C9                            	smpsVcUnusedBits    $00
000B41C9                            	smpsVcDetune        $04, $07, $07, $03
000B41C9                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B41C9                            	smpsVcRateScale     $00, $00, $00, $00
000B41C9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B41C9                            	smpsVcAmpMod        $00, $00, $00, $00
000B41C9                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B41C9                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B41C9                            	smpsVcDecayLevel    $00, $01, $00, $01
000B41C9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B41E2                            
000B41E2                            ;	Voice $02
000B41E2                            ;	$3C
000B41E2                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B41E2                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B41E2                            	smpsVcAlgorithm     $04
000B41E2                            	smpsVcFeedback      $07
000B41E2                            	smpsVcUnusedBits    $00
000B41E2                            	smpsVcDetune        $00, $00, $00, $00
000B41E2                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B41E2                            	smpsVcRateScale     $00, $00, $00, $00
000B41E2                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B41E2                            	smpsVcAmpMod        $00, $00, $00, $00
000B41E2                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B41E2                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B41E2                            	smpsVcDecayLevel    $02, $09, $09, $01
000B41E2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B41FB                            
000B41FB                            
000B41FC 00                         		even
000B41FC                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B423E                            		even
000B423E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B426C                            		even
000B426C                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B427E                            		even
000B427E                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B42AC                            		even
000B42AC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B42DA                            		even
000B42DA                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B4326                            		even
000B4326                            SoundCC:	include	"sound/sfx/Spring.asm"
000B4326                            Spring_Header:
000B4326                            	smpsHeaderStartSong 1
000B4328 01                         	smpsHeaderTempoSFX  $01
000B4329 01                         	smpsHeaderChanSFX   $01
000B432A                            
000B4330                            
000B4330                            ; FM6 Data
000B4330                            Spring_FM6:
000B4330 EF00                       	smpsSetvoice        $00
000B4332 8001                       	dc.b	nRst, $01
000B4339 B006                       	dc.b	nB3, $06
000B433B F4                         	smpsModOff
000B433C EF01                       	smpsSetvoice        $01
000B433E                            
000B433E                            Spring_Loop00:
000B433E BD02                       	dc.b	nC5, $02
000B4340 E601                       	smpsAlterVol      $01
000B4342 E7                         	dc.b	smpsNoAttack
000B4343 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B4348 F2                         	smpsStop
000B4349                            
000B4349                            Spring_Voices:
000B4349                            ;	Voice $00
000B4349                            ;	$20
000B4349                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B4349                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B4349                            	smpsVcAlgorithm     $00
000B4349                            	smpsVcFeedback      $04
000B4349                            	smpsVcUnusedBits    $00
000B4349                            	smpsVcDetune        $03, $03, $03, $03
000B4349                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B4349                            	smpsVcRateScale     $02, $02, $03, $03
000B4349                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4349                            	smpsVcAmpMod        $00, $00, $00, $00
000B4349                            	smpsVcDecayRate1    $06, $09, $06, $07
000B4349                            	smpsVcDecayRate2    $08, $06, $06, $07
000B4349                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B4349                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B4362                            
000B4362                            ;	Voice $01
000B4362                            ;	$20
000B4362                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B4362                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B4362                            	smpsVcAlgorithm     $00
000B4362                            	smpsVcFeedback      $04
000B4362                            	smpsVcUnusedBits    $00
000B4362                            	smpsVcDetune        $03, $03, $03, $03
000B4362                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B4362                            	smpsVcRateScale     $02, $02, $02, $02
000B4362                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4362                            	smpsVcAmpMod        $00, $00, $00, $00
000B4362                            	smpsVcDecayRate1    $06, $09, $06, $07
000B4362                            	smpsVcDecayRate2    $08, $06, $06, $07
000B4362                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B4362                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B437C 00                         		even
000B437C                            SoundCD:	include	"sound/sfx/Beep.asm"
000B437C                            Snd99_Header:
000B437C                            	smpsHeaderStartSong 3
000B437E 01                         	smpsHeaderTempoSFX  $01
000B437F 01                         	smpsHeaderChanSFX   $01
000B4380                            
000B4386                            
000B4386                            ; FM4 Data
000B4386                            Snd99_FM4:
000B4386 EF00                       	smpsSetvoice        $00
000B4388 B502                       	dc.b	nE4, $02
000B438A F2                         	smpsStop
000B438B                            
000B438B                            Snd99_Voices:
000B438B                            ;	Voice $00
000B438B                            ;	$07
000B438B                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B438B                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B438B                            	smpsVcAlgorithm     $07
000B438B                            	smpsVcFeedback      $00
000B438B                            	smpsVcUnusedBits    $00
000B438B                            	smpsVcDetune        $00, $00, $00, $00
000B438B                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B438B                            	smpsVcRateScale     $00, $00, $00, $00
000B438B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B438B                            	smpsVcAmpMod        $00, $00, $00, $00
000B438B                            	smpsVcDecayRate1    $00, $00, $00, $00
000B438B                            	smpsVcDecayRate2    $00, $00, $00, $00
000B438B                            	smpsVcDecayLevel    $00, $00, $00, $00
000B438B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B43A4                            		even
000B43A4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B43D2                            		even
000B43D2                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B43D2                            SignpostCD_Header:
000B43D2                            	smpsHeaderStartSong 3
000B43D4 01                         	smpsHeaderTempoSFX  $01
000B43D5 02                         	smpsHeaderChanSFX   $02
000B43D6                            
000B43E2                            
000B43E2                            ; FM5 Data
000B43E2                            Snd9D_FM5:
000B43E2 8004                       	dc.b	nRst, $04
000B43E4                            
000B43E4                            ; FM4 Data
000B43E4                            Snd9D_FM4:
000B43E4 EF00                       	smpsSetvoice        $00
000B43E6                            
000B43E6                            Snd9D_Loop00:
000B43E6 B405                       	dc.b	nEb4, $05
000B43E8 E604                       	smpsFMAlterVol      $04
000B43EA F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B43EF F2                         	smpsStop
000B43F0                            
000B43F0                            Snd9D_Voices:
000B43F0                            ;	Voice $00
000B43F0                            ;	$F4
000B43F0                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B43F0                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B43F0                            	smpsVcAlgorithm     $04
000B43F0                            	smpsVcFeedback      $06
000B43F0                            	smpsVcUnusedBits    $03
000B43F0                            	smpsVcDetune        $00, $00, $00, $00
000B43F0                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B43F0                            	smpsVcRateScale     $00, $00, $00, $00
000B43F0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B43F0                            	smpsVcAmpMod        $00, $00, $00, $00
000B43F0                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B43F0                            	smpsVcDecayRate2    $08, $05, $00, $00
000B43F0                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B43F0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B440A 00                         		even
000B440A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B4444                            		even
000B4444                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B4444                            Sound_41_Header:
000B4444                            	smpsHeaderStartSong 3
000B4446 01                         	smpsHeaderTempoSFX  $01
000B4447 01                         	smpsHeaderChanSFX   $01
000B4448                            
000B444E                            	
000B444E                            Sound41_FM5:
000B444E EF00                       	smpsSetvoice        $00
000B4450 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B4455 F2                         	smpsStop
000B4456                            
000B4456                            Sound_41_Voices:
000B4456                            ;	Voice $00
000B4456                            ;	$36
000B4456                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B4456                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B4456                            	smpsVcAlgorithm     $06
000B4456                            	smpsVcFeedback      $06
000B4456                            	smpsVcUnusedBits    $00
000B4456                            	smpsVcDetune        $00, $00, $01, $00
000B4456                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B4456                            	smpsVcRateScale     $00, $00, $00, $00
000B4456                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B4456                            	smpsVcAmpMod        $00, $00, $00, $00
000B4456                            	smpsVcDecayRate1    $00, $00, $00, $00
000B4456                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B4456                            	smpsVcDecayLevel    $00, $00, $00, $00
000B4456                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B446F                            
000B446F                            
000B4470 00                         		even
000B4470                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B4470                            Snd9B_Header:
000B4470                            	smpsHeaderStartSong 3
000B4472 01                         	smpsHeaderTempoSFX  $01
000B4473 01                         	smpsHeaderChanSFX   $01
000B4474                            
000B447A                            
000B447A                            ; FM5 Data
000B447A                            Snd9B_FM5:
000B447A EF00                       	smpsSetvoice        $00
000B447C 8001                       	dc.b	nRst, $01
000B4483 CA25                       	dc.b	nCs6, $25
000B4485 F4                         	smpsModOff
000B4486                            
000B4486                            Snd9B_Loop00:
000B4486 E7                         	dc.b	smpsNoAttack
000B4487 E601                       	smpsFMAlterVol      $01
000B4489 D102                       	dc.b	nAb6, $02
000B448B F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B4490 F2                         	smpsStop
000B4491                            
000B4491                            Snd9B_Voices:
000B4491                            ;	Voice $00
000B4491                            ;	$3C
000B4491                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B4491                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B4491                            	smpsVcAlgorithm     $04
000B4491                            	smpsVcFeedback      $07
000B4491                            	smpsVcUnusedBits    $00
000B4491                            	smpsVcDetune        $00, $00, $04, $00
000B4491                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B4491                            	smpsVcRateScale     $00, $00, $00, $00
000B4491                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B4491                            	smpsVcAmpMod        $00, $00, $00, $00
000B4491                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B4491                            	smpsVcDecayRate2    $00, $00, $00, $00
000B4491                            	smpsVcDecayLevel    $00, $00, $00, $00
000B4491                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B44AA                            
000B44AA                            
000B44AA                            		even		
000B44AA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B4542                            		even
000B4542                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B454E                            		even				
000B454E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B458A                            		even			
000B458A                            		; Don't let Sega sample cross $8000-byte boundary
000B458A                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 21D2                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 247C                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3B10                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 212C                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3B10                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE21                            ; ============================================================================
000BEE22 00                         		even
000BEE22                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF322                            		even
000BF322                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4CE                            		even
000BF4CE                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA38                            		even
000BFA38                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFAB8                            		even
000BFAB8                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE4                            		even
000BFAE4                            		even
000BFAE4                            
000BFAE4                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D368                                        even
0013D368                            
0013D368                            Art_Dust:	incbin	artunc\spindust.bin
0013ECA8                            
0013ECA8                            ; ===============================================================
0013ECA8                            ; ==============================================================
0013ECA8                            ; --------------------------------------------------------------
0013ECA8                            ; Debugging modules
0013ECA8                            ; --------------------------------------------------------------
0013ECA8                            
0013ECA8                               include   "ErrorHandler.asm"
0013ECA8                            
0013ECA8                            ; ===============================================================
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Error handling and debugging modules
0013ECA8                            ; 2016-2017, Vladikcomper
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Error handler functions and calls
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Error handler control flags
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            ; Screen appearence flags
0013ECA8 =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECA8 =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECA8 =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECA8                            
0013ECA8                            ; Advanced execution flags
0013ECA8                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECA8 =00000020                  _eh_return		equ	$20
0013ECA8 =00000040                  _eh_enter_console	equ	$40
0013ECA8 =00000080                  _eh_align_offset	equ	$80
0013ECA8                            
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            ; Errors vector table
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            ; Default screen configuration
0013ECA8 =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECA8                            
0013ECA8                            ; ---------------------------------------------------------------
0013ECA8                            
0013ECA8                            BusError:
0013ECA8 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBA                            
0013ECBA                            AddressError:
0013ECBA 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD0                            
0013ECD0                            IllegalInstr:
0013ECD0 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEC                            
0013ECEC                            ZeroDivide:
0013ECEC 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED00                            
0013ED00                            ChkInstr:
0013ED00 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED18                            
0013ED18                            TrapvInstr:
0013ED18 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED32                            
0013ED32                            PrivilegeViol:
0013ED32 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED4E                            
0013ED4E                            Trace:
0013ED4E 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5C                            
0013ED5C                            Line1010Emu:
0013ED5C 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED74                            
0013ED74                            Line1111Emu:
0013ED74 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8C                            
0013ED8C                            ErrorExcept:
0013ED8C 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA4                            
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            ; Import error handler global functions
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            
0013EDA4                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA4                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA4                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA4                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA4                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA4                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA4                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA4                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA4                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA4                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA4                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA4                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA4                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA4                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA4                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA4                            
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            ; Error handler external functions (compiled only when used)
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            
0013EDA4                            
0013EDA4                            
0013EDA4                            
0013EDA4                            
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            ; Include error handler binary module
0013EDA4                            ; ---------------------------------------------------------------
0013EDA4                            
0013EDA4                            ErrorHandler:
0013EDA4                            	incbin	ErrorHandler.bin
001407B8                            
001407B8                            ; ---------------------------------------------------------------
001407B8                            ; WARNING!
001407B8                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407B8                            ;	Symbol data should be appended here after ROM is compiled
001407B8                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407B8                            ;	to resolve symbol names.
001407B8                            ; ---------------------------------------------------------------
001407B8                            ; ---------------------------------------------------------------
001407B8                            
001407B8                            ; end of 'ROM'
001407B8                            		even
001407B8                            EndOfRom:
001407B8                            
001407B8                            
