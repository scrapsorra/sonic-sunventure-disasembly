00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dFloorTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Shield variables
00000000 =00000033                  shield_LastLoadedDPLC:    equ $33
00000000 =0000003C                  shield_DPLC_Address:    equ $3C
00000000 =00000038                  shield_Art_Address:    equ $38
00000000 =00000036                  shield_vram_art:    equ $36
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            
00000000 =0000000B                  mainspr_mapframe    = $B
00000000 =0000000E                  mainspr_width        = $E
00000000 =0000000F                  mainspr_childsprites     = $F    ; amount of child sprites
00000000 =00000014                  mainspr_height        = $14
00000000 =00000010                  sub2_x_pos        = $10    ;x_vel
00000000 =00000012                  sub2_y_pos        = $12    ;y_vel
00000000 =00000015                  sub2_mapframe        = $15
00000000 =00000016                  sub3_x_pos        = $16    ;y_radius
00000000 =00000018                  sub3_y_pos        = $18    ;priority
00000000 =0000001B                  sub3_mapframe        = $1B    ;anim_frame
00000000 =0000001C                  sub4_x_pos        = $1C    ;anim
00000000 =0000001E                  sub4_y_pos        = $1E    ;anim_frame_duration
00000000 =00000021                  sub4_mapframe        = $21    ;collision_property
00000000 =00000022                  sub5_x_pos        = $22    ;status
00000000 =00000024                  sub5_y_pos        = $24    ;routine
00000000 =00000027                  sub5_mapframe        = $27
00000000 =00000028                  sub6_x_pos        = $28    ;subtype
00000000 =0000002A                  sub6_y_pos        = $2A
00000000 =0000002D                  sub6_mapframe        = $2D
00000000 =0000002E                  sub7_x_pos        = $2E
00000000 =00000030                  sub7_y_pos        = $30
00000000 =00000033                  sub7_mapframe        = $33
00000000 =00000034                  sub8_x_pos        = $34
00000000 =00000036                  sub8_y_pos        = $36
00000000 =00000039                  sub8_mapframe        = $39
00000000 =0000003A                  sub9_x_pos        = $3A
00000000 =0000003C                  sub9_y_pos        = $3C
00000000 =0000003F                  sub9_mapframe        = $3F
00000000 =00000006                  next_subspr       = $6
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm_RRZ2:	equ ((ptr_mus9A-MusicIndex)/4)+bgm__First
00000000                            bgm_TTZBF:	equ ((ptr_mus9B-MusicIndex)/4)+bgm__First
00000000                            bgm_Tribute:	equ ((ptr_mus9C-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Leap3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_GetAir2:		equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_hurtblue:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A1                  fr_Transform1	equ	$A1
00000000 =000000A2                  fr_Transform2	equ	$A2
00000000 =000000A3                  fr_Transform3	equ	$A3
00000000 =000000A4                  fr_Transform4	equ	$A4
00000000 =000000A5                  fr_Transform5	equ	$A5
00000000 =000000A6                  fr_Transform6	equ	$A6
00000000 =000000A7                  fr_Transform7	equ	$A7
00000000 =000000A8                  fr_Transform8	equ	$A8
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000 =000000A9                  fr_Transform9	equ	$A9
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000 =FFFFF608                  v_loadhud:		equ	$FFFFF608
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CD                  v_homingattack:	equ $FFFFF5CD
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            
00000000                            ; Ring managers-related stuff
00000000 =000001FF                  Max_Rings:	equ 511 ; default. maximum number possible is 759
00000000 =00000400                  Rings_Space:	equ (Max_Rings+1)*2
00000000                            
00000000 =FFFF8300                  Ring_Positions:	equ $FFFF8300
00000000 =FFFF8700                  Ring_start_addr_ROM:	equ Ring_Positions+Rings_Space
00000000 =FFFF8704                  Ring_end_addr_ROM:	equ Ring_Positions+Rings_Space+4
00000000 =FFFF8708                  Ring_start_addr_RAM:	equ Ring_Positions+Rings_Space+8
00000000 =FFFF870A                  Perfect_rings_left:		equ Ring_Positions+Rings_Space+$A
00000000 =FFFF870C                  Rings_manager_routine:		equ Ring_Positions+Rings_Space+$C
00000000 =FFFF870D                  v_level_started_flag:		equ Ring_Positions+Rings_Space+$D
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000 =FFFF870E                  Ring_consumption_table:		equ Ring_Positions+Rings_Space+$E
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                                include   "Debugger.asm"
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Error handling and debugging modules
00000000                            ; 2016-2017, Vladikcomper
00000000                            ; 2020 mod - AURORA FIELDS
00000000                            ; ---------------------------------------------------------------
00000000                            ; Debugging macros definitions file
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ===============================================================
00000000                            ; ---------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            ; ----------------------------
00000000                            ; Arguments formatting flags
00000000                            ; ----------------------------
00000000                            
00000000                            ; General arguments format flags
00000000 =00000080                  hex		equ		$80				; flag to display as hexadecimal number
00000000 =00000090                  dec		equ		$90				; flag to display as decimal number
00000000 =000000A0                  bin		equ		$A0				; flag to display as binary number
00000000 =000000B0                  sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
00000000 =000000C0                  symdisp		equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
00000000 =000000DF                  str		equ		$DF				; flag to display as string (treat as offset, insert string from that offset)
00000000 =000000D0                  asm		equ		$D0				; flag to display as code (treat as offset, decode from that offset)
00000000                            
00000000                            ; NOTES:
00000000                            ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
00000000                            ;		In case, you need a different formatting for the displacement part (different text color and such),
00000000                            ;		use "sym|split", so the displacement won't be displayed until symdisp is met
00000000                            ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
00000000                            ;		display a garbage offset.
00000000                            ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
00000000                            ;		otherwise, the "symdisp" results are undefined.
00000000                            ;	* When using "str" flag, the argument should point to string offset that will be inserted.
00000000                            ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
00000000                            ;		only console control flags (see below).
00000000                            ;	* The "asm" flag will use "setpat" flag to switch text color, and will reset pattern to normal again.
00000000                            ;		you must reapply any pattern you used before yourself.
00000000                            ;	* The "asm" flag will overwrite $FF0000-$FF0080, so be careful when viewing RAM.
00000000                            
00000000                            
00000000                            ; Additional flags ...
00000000                            ; ... for number formatters (hex, dec, bin)
00000000 =00000008                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
00000000                            
00000000                            ; ... for symbol formatter (sym)
00000000 =00000008                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
00000000 =00000004                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
00000000                            
00000000                            ; ... for symbol displacement formatter (symdisp)
00000000 =00000008                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
00000000                            
00000000                            ; Argument type flags:
00000000                            ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
00000000                            ; - ONLY USE when writting down strings manually with DC.B
00000000 =00000000                  byte	equ		0
00000000 =00000001                  word	equ		1
00000000 =00000003                  long	equ		3
00000000                            
00000000                            ; -----------------------
00000000                            ; Console control flags
00000000                            ; -----------------------
00000000                            
00000000                            ; Plain control flags: no arguments following
00000000 =000000E0                  endl	equ		$E0				; "End of line": flag for line break
00000000 =000000E6                  cr	equ		$E6				; "Carriage return": jump to the beginning of the line
00000000 =000000E8                  pal0	equ		$E8				; use palette line #0
00000000 =000000EA                  pal1	equ		$EA				; use palette line #1
00000000 =000000EC                  pal2	equ		$EC				; use palette line #2
00000000 =000000EE                  pal3	equ		$EE				; use palette line #3
00000000                            
00000000                            ; Parametrized control flags: followed by 1-byte argument
00000000 =000000F0                  setw	equ		$F0				; set line width: number of characters before automatic line break
00000000 =000000F4                  setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
00000000 =000000F8                  setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
00000000 =000000FA                  setx	equ		$FA				; set x-position
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------
00000000                            
00000000                            RaiseError &
00000000                            
00000000                            	pea	*(pc)
00000000                            	move.w	sr, -(sp)
00000000                            	__FSTRING_GenerateArgumentsCode \string
00000000                            	jsr		ErrorHandler
00000000                            	__FSTRING_GenerateDecodedString \string
00000000                            	if strlen("\console_program")						; if console program offset is specified ...
00000000                            		dc.b	\opts+_eh_enter_console|(((*&1)^1)*_eh_align_offset)	; add flag "_eh_align_offset" if the next byte is at odd offset ...
00000000                            		even								; ... to tell Error handler to skip this byte, so it'll jump to ...
00000000                            		jmp	\console_program					; ... an aligned "jmp" instruction that calls console program itself
00000000                            	else
00000000                            		dc.b	\opts+0							; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
00000000                            		even								; ... in case \opts argument is empty or skipped
00000000                            	endc
00000000                            	even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            Console &
00000000                            
00000000                            	if strcmp("\0","write")|strcmp("\0","writeline")
00000000                            		move.w	sr, -(sp)
00000000                            		__FSTRING_GenerateArgumentsCode \1
00000000                            		movem.l	a0-a2/d7, -(sp)
00000000                            		if (__sp>0)
00000000                            			lea	4*4(sp), a2
00000000                            		endc
00000000                            		lea	@str\@(pc), a1
00000000                            		jsr	ErrorHandler.__global__console_\0\_formatted
00000000                            		movem.l	(sp)+, a0-a2/d7
00000000                            		if (__sp>8)
00000000                            			lea	__sp(sp), sp
00000000                            		elseif (__sp>0)
00000000                            			addq.w	#__sp, sp
00000000                            		endc
00000000                            		move.w	(sp)+, sr
00000000                            		bra.w	@instr_end\@
00000000                            	@str\@:
00000000                            		__FSTRING_GenerateDecodedString \1
00000000                            		even
00000000                            	@instr_end\@:
00000000                            
00000000                            	elseif strcmp("\0","run")
00000000                            		jsr	ErrorHandler.__extern__console_only
00000000                            		jsr	\1
00000000                            		bra.s	*
00000000                            
00000000                            	elseif strcmp("\0","setxy")
00000000                            		move.w	sr, -(sp)
00000000                            		movem.l	d0-d1, -(sp)
00000000                            		move.w	\2, -(sp)
00000000                            		move.w	\1, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_setposasxy_stack
00000000                            		addq.w	#4, sp
00000000                            		movem.l	(sp)+, d0-d1
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	elseif strcmp("\0","breakline")
00000000                            		move.w	sr, -(sp)
00000000                            		jsr	ErrorHandler.__global__console_startnewline
00000000                            		move.w	(sp)+, sr
00000000                            
00000000                            	else
00000000                            		inform	2,"""\0"" isn't a member of ""Console"""
00000000                            
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __ErrorMessage &
00000000                            		__FSTRING_GenerateArgumentsCode \string
00000000                            		jsr		ErrorHandler
00000000                            		__FSTRING_GenerateDecodedString \string
00000000                            		dc.b	\opts+0
00000000                            		even
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateArgumentsCode &
00000000                            
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            	__stack:set	0						; size of actual stack
00000000                            	__sp:	set	0						; stack displacement
00000000                            
00000000                            	; Parse string itself
00000000                            	while (__pos)
00000000                            
00000000                            		; Retrive expression in brackets following % char
00000000                                	__endpos:	set	instr(__pos+1,\string,'>')
00000000                                	__midpos:	set	instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__substr:	substr	__pos+1+1,__endpos-1,\string		; .type ea param
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %(.w d0 hex) )
00000000                            		if "\__type">>8="."
00000000                            			__operand:	substr	__pos+1+1,__midpos-1,\string	; .type ea
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            
00000000                            			if "\__type"=".b"
00000000                            				pushp	"move\__operand\,1(sp)"
00000000                            				pushp	"subq.w	#2, sp"
00000000                            				__stack: = __stack+2
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".w"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+2
00000000                            
00000000                            			elseif "\__type"=".l"
00000000                            				pushp	"move\__operand\,-(sp)"
00000000                            				__stack: = __stack+1
00000000                            				__sp: = __sp+4
00000000                            
00000000                            			else
00000000                            				fatal 'Unrecognized type in string operand: %<\__substr>'
00000000                            			endc
00000000                            		endc
00000000                            
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Generate stack code
00000000                            	rept __stack
00000000                            		popp	__command
00000000                            		\__command
00000000                            	endr
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------
00000000                            __FSTRING_GenerateDecodedString &
00000000                            
00000000                            	__lpos:	set	1						; start position
00000000                            	__pos:	set 	instr(\string,'%<')				; token position
00000000                            
00000000                            	while (__pos)
00000000                            
00000000                            		; Write part of string before % token
00000000                            		__substr:	substr	__lpos,__pos-1,\string
00000000                            		dc.b	"\__substr"
00000000                            
00000000                            		; Retrive expression in brakets following % char
00000000                                	__endpos:	set		instr(__pos+1,\string,'>')
00000000                                	__midpos:	set		instr(__pos+5,\string,' ')
00000000                                	if (__midpos<1)|(__midpos>__endpos)
00000000                            			__midpos: = __endpos
00000000                                	endc
00000000                            		__type:		substr	__pos+1+1,__pos+1+1+1,\string		; .type
00000000                            
00000000                            		; Expression is an effective address (e.g. %<.w d0 hex> )
00000000                            		if "\__type">>8="."
00000000                            			__param:	substr	__midpos+1,__endpos-1,\string	; param
00000000                            			if strlen("\__param")<1
00000000                            				__param: substr ,,"hex"			; if param is ommited, set it to "hex"
00000000                            			endc
00000000                            			if "\__type"=".b"
00000000                            				dc.b	\__param
00000000                            			elseif "\__type"=".w"
00000000                            				dc.b	\__param|1
00000000                            			else
00000000                            				dc.b	\__param|3
00000000                            			endc
00000000                            
00000000                            		; Expression is an inline constant (e.g. %<endl> )
00000000                            		else
00000000                            			__substr:	substr	__pos+1+1,__endpos-1,\string
00000000                            			dc.b	\__substr
00000000                            		endc
00000000                            
00000000                            		__lpos:	set	__endpos+1
00000000                            		__pos:	set	instr(__pos+1,\string,'%<')
00000000                            	endw
00000000                            
00000000                            	; Write part of string before the end
00000000                            	__substr:	substr	__lpos,,\string
00000000                            	dc.b	"\__substr"
00000000                            	dc.b	0
00000000                            	endm
00000000                            	endm
00000000                            	
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console1:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 7400                       		moveq	#0,d2
00001D20 7000                       		moveq	#0,d0
00001D22 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D26 D040                       		add.w	d0,d0
00001D28 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D2C 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D30                            ; End of function PaletteCycle
00001D30                            
00001D30                            ; ===========================================================================
00001D30                            ; ---------------------------------------------------------------------------
00001D30                            ; Palette cycling routines
00001D30                            ; ---------------------------------------------------------------------------
00001D30 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D32 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D34 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D36 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D38 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D3C 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D3E                            
00001D3E                            
00001D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3E                            
00001D3E                            
00001D3E                            PCycle_Title:
00001D3E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D44 6000                       		bra.s	PCycGHZ_Go
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            PCycle_GHZ:
00001D46 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D4C                            
00001D4C                            PCycGHZ_Go:
00001D4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D50 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D52                            
00001D52 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D58 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D5C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D60 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D64 E748                       		lsl.w	#3,d0
00001D66 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D72                            
00001D72                            PCycGHZ_Skip:
00001D72 4E75                       		rts	
00001D74                            ; End of function PCycle_GHZ
00001D74                            
00001D74                            
00001D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D74                            
00001D74                            
00001D74                            PCycle_LZ:
00001D74                            ; Waterfalls
00001D74 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D78 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7A                            
00001D7A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D80 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D84 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D88 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D8C E748                       		lsl.w	#3,d0
00001D8E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D94 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D9C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA2                            
00001DA2                            	PCycLZ_NotSBZ3:
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DAE 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            PCycLZ_Skip1:
00001DBA                            ; Conveyor belts
00001DBA                            		;move.w	(v_framecount).w,d0
00001DBA                            		;andi.w	#7,d0
00001DBA                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBA                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBA                            		;moveq	#1,d1
00001DBA                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBA                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBA                            		;neg.w	d1
00001DBA                            
00001DBA                            	;PCycLZ_NoRev:
00001DBA                            		;move.w	(v_pal_buffer).w,d0
00001DBA                            		;andi.w	#3,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;cmpi.w	#3,d0
00001DBA                            		;bcs.s	loc_1A0A
00001DBA                            		;move.w	d0,d1
00001DBA                            		;moveq	#0,d0
00001DBA                            		;tst.w	d1
00001DBA                            		;bpl.s	loc_1A0A
00001DBA                            		;moveq	#2,d0
00001DBA                            
00001DBA                            ;loc_1A0A:
00001DBA                            		;move.w	d0,(v_pal_buffer).w
00001DBA                            		;add.w	d0,d0
00001DBA                            		;move.w	d0,d1
00001DBA                            		;add.w	d0,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;lea	(Pal_LZCyc2).l,a0
00001DBA                            		;lea	(v_pal_dry+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            		;lea	(Pal_LZCyc3).l,a0
00001DBA                            		;lea	(v_pal_water+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            ;PCycLZ_Skip2:
00001DBA 4E75                       		rts	
00001DBC                            ; End of function PCycle_LZ
00001DBC                            
00001DBC                            ; ===========================================================================
00001DBC 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC4                            ; ===========================================================================
00001DC4                            
00001DC4                            PCycle_MZ:
00001DC4 4E75                       		rts	
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            PalCycle_SLZ:
00001DC6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCA 6A00                       		bpl.s	locret_1A80
00001DCC 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DD6 5240                       		addq.w	#1,d0
00001DD8 0C40 0006                  		cmpi.w	#6,d0
00001DDC 6500                       		bcs.s	loc_1A60
00001DDE 7000                       		moveq	#0,d0
00001DE0                            
00001DE0                            loc_1A60:
00001DE0 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE4 3200                       		move.w	d0,d1
00001DE6 D241                       		add.w	d1,d1
00001DE8 D041                       		add.w	d1,d0
00001DEA D040                       		add.w	d0,d0
00001DEC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DF6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E00                            
00001E00                            locret_1A80:
00001E00 4E75                       		rts	
00001E02                            ; End of function PalCycle_SLZ
00001E02                            
00001E02                            
00001E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E02                            
00001E02                            
00001E02                            PalCycle_SYZ:
00001E02 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E06 6A00                       		bpl.s	locret_1AC6
00001E08 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E0E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E12 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E16 0240 0003                  		andi.w	#3,d0
00001E1A E548                       		lsl.w	#2,d0
00001E1C 3200                       		move.w	d0,d1
00001E1E D040                       		add.w	d0,d0
00001E20 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E26 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E2E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E32 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E38 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E3C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E40 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E46                            
00001E46                            locret_1AC6:
00001E46 4E75                       		rts	
00001E48                            ; End of function PalCycle_SYZ
00001E48                            
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            PalCycle_SBZ:
00001E48 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E4E 4A38 FE11                  		tst.b	(v_act).w
00001E52 6700                       		beq.s	loc_1ADA
00001E54 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5A                            
00001E5A                            loc_1ADA:
00001E5A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E5E 321A                       		move.w	(a2)+,d1
00001E60                            
00001E60                            loc_1AE0:
00001E60 5311                       		subq.b	#1,(a1)
00001E62 6B00                       		bmi.s	loc_1AEA
00001E64 5489                       		addq.l	#2,a1
00001E66 5C8A                       		addq.l	#6,a2
00001E68 6000                       		bra.s	loc_1B06
00001E6A                            ; ===========================================================================
00001E6A                            
00001E6A                            loc_1AEA:
00001E6A 12DA                       		move.b	(a2)+,(a1)+
00001E6C 1011                       		move.b	(a1),d0
00001E6E 5200                       		addq.b	#1,d0
00001E70 B01A                       		cmp.b	(a2)+,d0
00001E72 6500                       		bcs.s	loc_1AF6
00001E74 7000                       		moveq	#0,d0
00001E76                            
00001E76                            loc_1AF6:
00001E76 12C0                       		move.b	d0,(a1)+
00001E78 0240 000F                  		andi.w	#$F,d0
00001E7C D040                       		add.w	d0,d0
00001E7E 305A                       		movea.w	(a2)+,a0
00001E80 365A                       		movea.w	(a2)+,a3
00001E82 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E86                            
00001E86                            loc_1B06:
00001E86 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E8E 6A00                       		bpl.s	locret_1B64
00001E90 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E96 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E9C 4A38 FE11                  		tst.b	(v_act).w
00001EA0 6700                       		beq.s	loc_1B2E
00001EA2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EA8 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EAE                            
00001EAE                            loc_1B2E:
00001EAE 72FF                       		moveq	#-1,d1
00001EB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB4 6700                       		beq.s	loc_1B38
00001EB6 4441                       		neg.w	d1
00001EB8                            
00001EB8                            loc_1B38:
00001EB8 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EBC 0240 0003                  		andi.w	#3,d0
00001EC0 D041                       		add.w	d1,d0
00001EC2 0C40 0003                  		cmpi.w	#3,d0
00001EC6 6500                       		bcs.s	loc_1B52
00001EC8 3200                       		move.w	d0,d1
00001ECA 7000                       		moveq	#0,d0
00001ECC 4A41                       		tst.w	d1
00001ECE 6A00                       		bpl.s	loc_1B52
00001ED0 7002                       		moveq	#2,d0
00001ED2                            
00001ED2                            loc_1B52:
00001ED2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001ED6 D040                       		add.w	d0,d0
00001ED8 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EDC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE4                            
00001EE4                            locret_1B64:
00001EE4 4E75                       		rts	
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            
00001EE6                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001F06                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001F26                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001F46                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F58                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F6A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001FD2                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FF6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00002016                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00002026                            Pal_SYZCyc1_2:	incbin	"palette\Cycle - SYZ1 Act 2.bin"
00002046                            Pal_SYZCyc2_2:	incbin	"palette\Cycle - SYZ2 Act 2.bin"
00002056                            Pal_SYZCyc1_3:	incbin	"palette\Cycle - SYZ1 Act 3.bin"
00002076                            Pal_SYZCyc2_3:	incbin	"palette\Cycle - SYZ2 Act 3.bin"
00002086                            
00002086                            		include	"_inc\SBZ Palette Scripts.asm"
00002086                            ; ---------------------------------------------------------------------------
00002086                            ; Scrap Brain Zone palette cycling script
00002086                            ; ---------------------------------------------------------------------------
00002086                            
00002086                            mSBZp:	macro duration,colors,paladdress,ramaddress
00002086                            	dc.b duration, colors
00002086                            	dc.w paladdress, ramaddress
00002086                            	endm
00002086                            
00002086                            ; duration in frames, number of colors, palette address, RAM address
00002086                            
00002086                            Pal_SBZCycList1:
00002086 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00002088 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000208E 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002094 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
0000209A 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
000020A0 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000020A6 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
000020AC 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000020B2 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000020B8 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000020BE                            end_SBZCycList1:
000020BE                            	even
000020BE                            
000020BE                            Pal_SBZCycList2:
000020BE 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
000020C0 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
000020C6 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
000020CC 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
000020D2 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
000020D8 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
000020DE 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
000020E4 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
000020EA                            end_SBZCycList2:
000020EA                            	even
000020EA                            	even
000020EA                            
000020EA                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
000020FA                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000210A                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000211A                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00002126                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00002136                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00002146                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00002166                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002170                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002180                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
0000218C                            ; ---------------------------------------------------------------------------
0000218C                            ; Subroutine to	fade in from black
0000218C                            ; ---------------------------------------------------------------------------
0000218C                            
0000218C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000218C                            
0000218C                            
0000218C                            PaletteFadeIn:
0000218C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002192                            
00002192                            PalFadeIn_Alt:				; start position and size are already set
00002192 7000                       		moveq	#0,d0
00002194 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002198 1038 F626                  		move.b	(v_pfade_start).w,d0
0000219C D0C0                       		adda.w	d0,a0
0000219E 7200                       		moveq	#cBlack,d1
000021A0 1038 F627                  		move.b	(v_pfade_size).w,d0
000021A4                            
000021A4                            	@fill:
000021A4 30C1                       		move.w	d1,(a0)+
000021A6 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000021AA                            
000021AA 383C 0015                  		move.w	#$15,d4
000021AE                            
000021AE                            	@mainloop:
000021AE 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000021B4 6100 0000                  		bsr.w	WaitForVBla
000021B8 6100                       		bsr.s	FadeIn_FromBlack
000021BA 6100 F5EA                  		bsr.w	RunPLC
000021BE 51CC FFEE                  		dbf	d4,@mainloop
000021C2 4E75                       		rts	
000021C4                            ; End of function PaletteFadeIn
000021C4                            
000021C4                            
000021C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021C4                            
000021C4                            
000021C4                            FadeIn_FromBlack:
000021C4 7000                       		moveq	#0,d0
000021C6 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021CA 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000021CE 1038 F626                  		move.b	(v_pfade_start).w,d0
000021D2 D0C0                       		adda.w	d0,a0
000021D4 D2C0                       		adda.w	d0,a1
000021D6 1038 F627                  		move.b	(v_pfade_size).w,d0
000021DA                            
000021DA                            	@addcolour:
000021DA 6100                       		bsr.s	FadeIn_AddColour ; increase colour
000021DC 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
000021E0                            
000021E0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
000021E6 6600                       		bne.s	@exit		; if not, branch
000021E8                            
000021E8 7000                       		moveq	#0,d0
000021EA 41F8 FA80                  		lea	(v_pal_water).w,a0
000021EE 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
000021F2 1038 F626                  		move.b	(v_pfade_start).w,d0
000021F6 D0C0                       		adda.w	d0,a0
000021F8 D2C0                       		adda.w	d0,a1
000021FA 1038 F627                  		move.b	(v_pfade_size).w,d0
000021FE                            
000021FE                            	@addcolour2:
000021FE 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002200 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002204                            
00002204                            @exit:
00002204 4E75                       		rts	
00002206                            ; End of function FadeIn_FromBlack
00002206                            
00002206                            
00002206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002206                            
00002206                            
00002206                            FadeIn_AddColour:
00002206                            @addblue:
00002206 3419                       		move.w	(a1)+,d2
00002208 3610                       		move.w	(a0),d3
0000220A B642                       		cmp.w	d2,d3		; is colour already at threshold level?
0000220C 6700                       		beq.s	@next		; if yes, branch
0000220E 3203                       		move.w	d3,d1
00002210 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002214 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002216 6200                       		bhi.s	@addgreen	; if yes, branch
00002218 30C1                       		move.w	d1,(a0)+	; update palette
0000221A 4E75                       		rts	
0000221C                            ; ===========================================================================
0000221C                            
0000221C                            @addgreen:
0000221C 3203                       		move.w	d3,d1
0000221E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002222 B242                       		cmp.w	d2,d1
00002224 6200                       		bhi.s	@addred
00002226 30C1                       		move.w	d1,(a0)+	; update palette
00002228 4E75                       		rts	
0000222A                            ; ===========================================================================
0000222A                            
0000222A                            @addred:
0000222A 5458                       		addq.w	#2,(a0)+	; increase red value
0000222C 4E75                       		rts	
0000222E                            ; ===========================================================================
0000222E                            
0000222E                            @next:
0000222E 5448                       		addq.w	#2,a0		; next colour
00002230 4E75                       		rts	
00002232                            ; End of function FadeIn_AddColour
00002232                            
00002232                            
00002232                            ; ---------------------------------------------------------------------------
00002232                            ; Subroutine to fade out to black
00002232                            ; ---------------------------------------------------------------------------
00002232                            
00002232                            
00002232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002232                            
00002232                            
00002232                            PaletteFadeOut:
00002232 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002238 383C 0015                  		move.w	#$15,d4
0000223C                            
0000223C                            	@mainloop:
0000223C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002242 6100 0000                  		bsr.w	WaitForVBla
00002246 6100                       		bsr.s	FadeOut_ToBlack
00002248 6100 F55C                  		bsr.w	RunPLC
0000224C 51CC FFEE                  		dbf	d4,@mainloop
00002250 4E75                       		rts	
00002252                            ; End of function PaletteFadeOut
00002252                            
00002252                            
00002252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002252                            
00002252                            
00002252                            FadeOut_ToBlack:
00002252 7000                       		moveq	#0,d0
00002254 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002258 1038 F626                  		move.b	(v_pfade_start).w,d0
0000225C D0C0                       		adda.w	d0,a0
0000225E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002262                            
00002262                            	@decolour:
00002262 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00002264 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002268                            
00002268 7000                       		moveq	#0,d0
0000226A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000226E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002272 D0C0                       		adda.w	d0,a0
00002274 1038 F627                  		move.b	(v_pfade_size).w,d0
00002278                            
00002278                            	@decolour2:
00002278 6100                       		bsr.s	FadeOut_DecColour
0000227A 51C8 FFFC                  		dbf	d0,@decolour2
0000227E 4E75                       		rts	
00002280                            ; End of function FadeOut_ToBlack
00002280                            
00002280                            
00002280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002280                            
00002280                            
00002280                            FadeOut_DecColour:
00002280                            @dered:
00002280 3410                       		move.w	(a0),d2
00002282 6700                       		beq.s	@next
00002284 3202                       		move.w	d2,d1
00002286 0241 000E                  		andi.w	#$E,d1
0000228A 6700                       		beq.s	@degreen
0000228C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000228E 4E75                       		rts	
00002290                            ; ===========================================================================
00002290                            
00002290                            @degreen:
00002290 3202                       		move.w	d2,d1
00002292 0241 00E0                  		andi.w	#$E0,d1
00002296 6700                       		beq.s	@deblue
00002298 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000229C 4E75                       		rts	
0000229E                            ; ===========================================================================
0000229E                            
0000229E                            @deblue:
0000229E 3202                       		move.w	d2,d1
000022A0 0241 0E00                  		andi.w	#$E00,d1
000022A4 6700                       		beq.s	@next
000022A6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            @next:
000022AC 5448                       		addq.w	#2,a0
000022AE 4E75                       		rts	
000022B0                            ; End of function FadeOut_DecColour
000022B0                            
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            ; Subroutine to	fade in from white (Special Stage)
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PaletteWhiteIn:
000022B0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B6 7000                       		moveq	#0,d0
000022B8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022BC 1038 F626                  		move.b	(v_pfade_start).w,d0
000022C0 D0C0                       		adda.w	d0,a0
000022C2 323C 0EEE                  		move.w	#cWhite,d1
000022C6 1038 F627                  		move.b	(v_pfade_size).w,d0
000022CA                            
000022CA                            	@fill:
000022CA 30C1                       		move.w	d1,(a0)+
000022CC 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
000022D0                            
000022D0 383C 0015                  		move.w	#$15,d4
000022D4                            
000022D4                            	@mainloop:
000022D4 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022DA 6100 0000                  		bsr.w	WaitForVBla
000022DE 6100                       		bsr.s	WhiteIn_FromWhite
000022E0 6100 F4C4                  		bsr.w	RunPLC
000022E4 51CC FFEE                  		dbf	d4,@mainloop
000022E8 4E75                       		rts	
000022EA                            ; End of function PaletteWhiteIn
000022EA                            
000022EA                            
000022EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EA                            
000022EA                            
000022EA                            WhiteIn_FromWhite:
000022EA 7000                       		moveq	#0,d0
000022EC 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022F0 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
000022F4 1038 F626                  		move.b	(v_pfade_start).w,d0
000022F8 D0C0                       		adda.w	d0,a0
000022FA D2C0                       		adda.w	d0,a1
000022FC 1038 F627                  		move.b	(v_pfade_size).w,d0
00002300                            
00002300                            	@decolour:
00002300 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002302 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002306                            
00002306 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000230C 6600                       		bne.s	@exit		; if not, branch
0000230E 7000                       		moveq	#0,d0
00002310 41F8 FA80                  		lea	(v_pal_water).w,a0
00002314 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002318 1038 F626                  		move.b	(v_pfade_start).w,d0
0000231C D0C0                       		adda.w	d0,a0
0000231E D2C0                       		adda.w	d0,a1
00002320 1038 F627                  		move.b	(v_pfade_size).w,d0
00002324                            
00002324                            	@decolour2:
00002324 6100                       		bsr.s	WhiteIn_DecColour
00002326 51C8 FFFC                  		dbf	d0,@decolour2
0000232A                            
0000232A                            	@exit:
0000232A 4E75                       		rts	
0000232C                            ; End of function WhiteIn_FromWhite
0000232C                            
0000232C                            
0000232C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232C                            
0000232C                            
0000232C                            WhiteIn_DecColour:
0000232C                            @deblue:
0000232C 3419                       		move.w	(a1)+,d2
0000232E 3610                       		move.w	(a0),d3
00002330 B642                       		cmp.w	d2,d3
00002332 6700                       		beq.s	@next
00002334 3203                       		move.w	d3,d1
00002336 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000233A 6500                       		blo.s	@degreen
0000233C B242                       		cmp.w	d2,d1
0000233E 6500                       		blo.s	@degreen
00002340 30C1                       		move.w	d1,(a0)+
00002342 4E75                       		rts	
00002344                            ; ===========================================================================
00002344                            
00002344                            @degreen:
00002344 3203                       		move.w	d3,d1
00002346 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000234A 6500                       		blo.s	@dered
0000234C B242                       		cmp.w	d2,d1
0000234E 6500                       		blo.s	@dered
00002350 30C1                       		move.w	d1,(a0)+
00002352 4E75                       		rts	
00002354                            ; ===========================================================================
00002354                            
00002354                            @dered:
00002354 5558                       		subq.w	#2,(a0)+	; decrease red value
00002356 4E75                       		rts	
00002358                            ; ===========================================================================
00002358                            
00002358                            @next:
00002358 5448                       		addq.w	#2,a0
0000235A 4E75                       		rts	
0000235C                            ; End of function WhiteIn_DecColour
0000235C                            
0000235C                            ; ---------------------------------------------------------------------------
0000235C                            ; Subroutine to fade to white (Special Stage)
0000235C                            ; ---------------------------------------------------------------------------
0000235C                            
0000235C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000235C                            
0000235C                            
0000235C                            PaletteWhiteOut:
0000235C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002362 383C 0015                  		move.w	#$15,d4
00002366                            
00002366                            	@mainloop:
00002366 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000236C 6100 0000                  		bsr.w	WaitForVBla
00002370 6100                       		bsr.s	WhiteOut_ToWhite
00002372 6100 F432                  		bsr.w	RunPLC
00002376 51CC FFEE                  		dbf	d4,@mainloop
0000237A 4E75                       		rts	
0000237C                            ; End of function PaletteWhiteOut
0000237C                            
0000237C                            
0000237C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000237C                            
0000237C                            
0000237C                            WhiteOut_ToWhite:
0000237C 7000                       		moveq	#0,d0
0000237E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002382 1038 F626                  		move.b	(v_pfade_start).w,d0
00002386 D0C0                       		adda.w	d0,a0
00002388 1038 F627                  		move.b	(v_pfade_size).w,d0
0000238C                            
0000238C                            	@addcolour:
0000238C 6100                       		bsr.s	WhiteOut_AddColour
0000238E 51C8 FFFC                  		dbf	d0,@addcolour
00002392                            
00002392 7000                       		moveq	#0,d0
00002394 41F8 FA80                  		lea	(v_pal_water).w,a0
00002398 1038 F626                  		move.b	(v_pfade_start).w,d0
0000239C D0C0                       		adda.w	d0,a0
0000239E 1038 F627                  		move.b	(v_pfade_size).w,d0
000023A2                            
000023A2                            	@addcolour2:
000023A2 6100                       		bsr.s	WhiteOut_AddColour
000023A4 51C8 FFFC                  		dbf	d0,@addcolour2
000023A8 4E75                       		rts	
000023AA                            ; End of function WhiteOut_ToWhite
000023AA                            
000023AA                            
000023AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023AA                            
000023AA                            
000023AA                            WhiteOut_AddColour:
000023AA                            @addred:
000023AA 3410                       		move.w	(a0),d2
000023AC 0C42 0EEE                  		cmpi.w	#cWhite,d2
000023B0 6700                       		beq.s	@next
000023B2 3202                       		move.w	d2,d1
000023B4 0241 000E                  		andi.w	#$E,d1
000023B8 0C41 000E                  		cmpi.w	#cRed,d1
000023BC 6700                       		beq.s	@addgreen
000023BE 5458                       		addq.w	#2,(a0)+	; increase red value
000023C0 4E75                       		rts	
000023C2                            ; ===========================================================================
000023C2                            
000023C2                            @addgreen:
000023C2 3202                       		move.w	d2,d1
000023C4 0241 00E0                  		andi.w	#$E0,d1
000023C8 0C41 00E0                  		cmpi.w	#cGreen,d1
000023CC 6700                       		beq.s	@addblue
000023CE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000023D2 4E75                       		rts	
000023D4                            ; ===========================================================================
000023D4                            
000023D4                            @addblue:
000023D4 3202                       		move.w	d2,d1
000023D6 0241 0E00                  		andi.w	#$E00,d1
000023DA 0C41 0E00                  		cmpi.w	#cBlue,d1
000023DE 6700                       		beq.s	@next
000023E0 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000023E4 4E75                       		rts	
000023E6                            ; ===========================================================================
000023E6                            
000023E6                            @next:
000023E6 5448                       		addq.w	#2,a0
000023E8 4E75                       		rts	
000023EA                            ; End of function WhiteOut_AddColour
000023EA                            
000023EA                            ; ---------------------------------------------------------------------------
000023EA                            ; Palette cycling routine - Sega logo
000023EA                            ; ---------------------------------------------------------------------------
000023EA                            
000023EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000023EA                            
000023EA                            
000023EA                            PalCycle_Sega:
000023EA 4A38 F635                  		tst.b	(v_pcyc_time+1).w
000023EE 6600                       		bne.s	loc_206A
000023F0 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023F4 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000023FA 7205                       		moveq	#5,d1
000023FC 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002400                            
00002400                            loc_2020:
00002400 6A00                       		bpl.s	loc_202A
00002402 5448                       		addq.w	#2,a0
00002404 5341                       		subq.w	#1,d1
00002406 5440                       		addq.w	#2,d0
00002408 60F6                       		bra.s	loc_2020
0000240A                            ; ===========================================================================
0000240A                            
0000240A                            loc_202A:
0000240A 3400                       		move.w	d0,d2
0000240C 0242 001E                  		andi.w	#$1E,d2
00002410 6600                       		bne.s	loc_2034
00002412 5440                       		addq.w	#2,d0
00002414                            
00002414                            loc_2034:
00002414 0C40 0060                  		cmpi.w	#$60,d0
00002418 6400                       		bhs.s	loc_203E
0000241A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000241E                            
0000241E                            loc_203E:
0000241E 5440                       		addq.w	#2,d0
00002420 51C9 FFE8                  		dbf	d1,loc_202A
00002424                            
00002424 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002428 5440                       		addq.w	#2,d0
0000242A 3400                       		move.w	d0,d2
0000242C 0242 001E                  		andi.w	#$1E,d2
00002430 6600                       		bne.s	loc_2054
00002432 5440                       		addq.w	#2,d0
00002434                            
00002434                            loc_2054:
00002434 0C40 0064                  		cmpi.w	#$64,d0
00002438 6D00                       		blt.s	loc_2062
0000243A 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002440 70F4                       		moveq	#-$C,d0
00002442                            
00002442                            loc_2062:
00002442 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002446 7001                       		moveq	#1,d0
00002448 4E75                       		rts	
0000244A                            ; ===========================================================================
0000244A                            
0000244A                            loc_206A:
0000244A 5338 F634                  		subq.b	#1,(v_pcyc_time).w
0000244E 6A00                       		bpl.s	loc_20BC
00002450 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
00002456 3038 F632                  		move.w	(v_pcyc_num).w,d0
0000245A 0640 000C                  		addi.w	#$C,d0
0000245E 0C40 0030                  		cmpi.w	#$30,d0
00002462 6500                       		blo.s	loc_2088
00002464 7000                       		moveq	#0,d0
00002466 4E75                       		rts	
00002468                            ; ===========================================================================
00002468                            
00002468                            loc_2088:
00002468 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000246C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002472 41F0 0000                  		lea	(a0,d0.w),a0
00002476 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
0000247A 22D8                       		move.l	(a0)+,(a1)+
0000247C 22D8                       		move.l	(a0)+,(a1)+
0000247E 3298                       		move.w	(a0)+,(a1)
00002480 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002484 7000                       		moveq	#0,d0
00002486 722C                       		moveq	#$2C,d1
00002488                            
00002488                            loc_20A8:
00002488 3400                       		move.w	d0,d2
0000248A 0242 001E                  		andi.w	#$1E,d2
0000248E 6600                       		bne.s	loc_20B2
00002490 5440                       		addq.w	#2,d0
00002492                            
00002492                            loc_20B2:
00002492 3390 0000                  		move.w	(a0),(a1,d0.w)
00002496 5440                       		addq.w	#2,d0
00002498 51C9 FFEE                  		dbf	d1,loc_20A8
0000249C                            
0000249C                            loc_20BC:
0000249C 7001                       		moveq	#1,d0
0000249E 4E75                       		rts	
000024A0                            ; End of function PalCycle_Sega
000024A0                            
000024A0                            ; ===========================================================================
000024A0                            
000024A0                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000024AC                            Pal_Sega2:	incbin	"palette\Sega2.bin"
000024DC                            
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            ; Subroutines to load palettes
000024DC                            
000024DC                            ; input:
000024DC                            ;	d0 = index number for palette
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            
000024DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000024DC                            
000024DC                            
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            ; Subroutines to load pallets
000024DC                            ; ---------------------------------------------------------------------------
000024DC                            
000024DC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024DC                            
000024DC                            PalLoad1:
000024DC 1238 FE11                  		move.b ($FFFFFE11),d1
000024E0 43F9 0000 0000             		lea (PalPointers).l,a1
000024E6 0C01 0000                  		cmp.b #0,d1
000024EA 6700 0000                  		beq.w PalLoad1_Continue
000024EE 43F9 0000 0000             		lea (PalPointers2).l,a1
000024F4 0C01 0001                  		cmp.b #1,d1
000024F8 6700 0000                  		beq.w PalLoad1_Continue
000024FC 43F9 0000 0000             		lea (PalPointers3).l,a1
00002502                            
00002502                            PalLoad1_Continue:
00002502 E748                       		lsl.w #3,d0
00002504 D2C0                       		adda.w d0,a1
00002506 2459                       		movea.l (a1)+,a2
00002508 3659                       		movea.w (a1)+,a3
0000250A D6FC 0080                  		adda.w #$80,a3
0000250E 3E19                       		move.w (a1)+,d7
00002510                            
00002510                            loc_2110:
00002510 26DA                       		move.l (a2)+,(a3)+
00002512 51CF FFFC                  		dbf d7,loc_2110
00002516 4E75                       		rts
00002518                             ; End of function PalLoad1
00002518                            
00002518                            
00002518                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002518                            
00002518                            PalLoad2:
00002518 1238 FE11                  		move.b ($FFFFFE11),d1
0000251C 43F9 0000 0000             		lea (PalPointers).l,a1
00002522 0C01 0000                  		cmp.b #0,d1
00002526 6700 0000                  		beq.w PalLoad2_Continue
0000252A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002530 0C01 0001                  		cmp.b #1,d1
00002534 6700 0000                  		beq.w PalLoad2_Continue
00002538 43F9 0000 0000             		lea (PalPointers3).l,a1
0000253E                            
0000253E                            
0000253E                            PalLoad2_Continue:
0000253E E748                       		lsl.w #3,d0
00002540 D2C0                       		adda.w d0,a1
00002542 2459                       		movea.l (a1)+,a2
00002544 3659                       		movea.w (a1)+,a3
00002546 3E19                       		move.w (a1)+,d7
00002548                            
00002548                            loc_2128:
00002548 26DA                       		move.l (a2)+,(a3)+
0000254A 51CF FFFC                  		dbf d7,loc_2128
0000254E 4E75                       		rts
00002550                            ; End of function PalLoad2
00002550                            
00002550                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00002550                            
00002550                            
00002550                            PalLoad_Loop: ;Quick load - TIS
00002550                                    
00002550 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
00002552 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
00002556 4E75                               rts
00002558                            
00002558                            ; ---------------------------------------------------------------------------
00002558                            ; Underwater pallet loading subroutine
00002558                            ; ---------------------------------------------------------------------------
00002558                            
00002558                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002558                            
00002558                            PalLoad3_Water:
00002558 1238 FE11                  		move.b ($FFFFFE11),d1
0000255C 43F9 0000 0000             		lea (PalPointers).l,a1
00002562 0C01 0000                  		cmp.b #0,d1
00002566 6700 0000                  		beq.w PalLoad3_Continue
0000256A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002570 0C01 0001                  		cmp.b #1,d1
00002574 6700 0000                  		beq.w PalLoad3_Continue
00002578 43F9 0000 0000             		lea (PalPointers3).l,a1
0000257E                            
0000257E                            PalLoad3_Continue:
0000257E E748                       		lsl.w #3,d0
00002580 D2C0                       		adda.w d0,a1
00002582 2459                       		movea.l (a1)+,a2
00002584 3659                       		movea.w (a1)+,a3
00002586 96FC 0080                  		suba.w #$80,a3
0000258A 3E19                       		move.w (a1)+,d7
0000258C                            
0000258C                            loc_2144:
0000258C 26DA                       		move.l (a2)+,(a3)+
0000258E 51CF FFFC                  		dbf d7,loc_2144
00002592 4E75                       		rts
00002594                            ; End of function PalLoad3_Water
00002594                            
00002594                            
00002594                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002594                            
00002594                            
00002594                            PalLoad4_Water:
00002594 1238 FE11                  		move.b ($FFFFFE11),d1
00002598 43F9 0000 0000             		lea (PalPointers).l,a1
0000259E 0C01 0000                  		cmp.b #0,d1
000025A2 6700 0000                  		beq.w PalLoad4_Continue
000025A6 43F9 0000 0000             		lea (PalPointers2).l,a1
000025AC 0C01 0001                  		cmp.b #1,d1
000025B0 6700 0000                  		beq.w PalLoad4_Continue
000025B4 43F9 0000 0000             		lea (PalPointers3).l,a1
000025BA                            
000025BA                            PalLoad4_Continue:
000025BA E748                       		lsl.w #3,d0
000025BC D2C0                       		adda.w d0,a1
000025BE 2459                       		movea.l (a1)+,a2
000025C0 3659                       		movea.w (a1)+,a3
000025C2 96FC 0100                  		suba.w #$100,a3
000025C6 3E19                       		move.w (a1)+,d7
000025C8                            loc_2160:
000025C8 26DA                       		move.l (a2)+,(a3)+
000025CA 51CF FFFC                  		dbf d7,loc_2160
000025CE 4E75                       		rts
000025D0                             ; End of function PalLoad4_Water
000025D0                            
000025D0                            ; ===========================================================================
000025D0                            
000025D0                            		include	"_inc\Palette Pointers.asm"
000025D0                            ; ---------------------------------------------------------------------------
000025D0                            ; Palette pointers
000025D0                            ; ---------------------------------------------------------------------------
000025D0                            
000025D0                            palp:	macro paladdress,ramaddress,colors
000025D0                            	dc.l paladdress
000025D0                            	dc.w ramaddress, (colors>>1)-1
000025D0                            	endm
000025D0                            
000025D0                            PalPointers:
000025D0                            
000025D0                            ; palette address, RAM address, colors
000025D0                            
000025D0 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000025D8 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000025E0 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000025E8 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000025F0                            Pal_Levels:
000025F0 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
000025F8 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002600 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
00002608 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002610 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
00002618 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002620 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002628 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002630 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002638 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002640 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002648 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002650 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002658 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002660 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002668 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002670 0000 0000 FB00 001F        ptr_Pal_Ending2:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002678 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002680 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
00002688 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002690 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
00002698 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000026A0 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000026A8 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000026B0 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
000026B8 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
000026C0 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
000026C8 0000 0000 FB00 0007        ptr_Pal_Sonic11:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
000026D0 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
000026D8 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
000026E0 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
000026E8 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
000026F0 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
000026F8 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002700 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002708 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002710 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002718 0000 0000 FB00 0007        ptr_Pal_SonWater11:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002720 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002728 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002730 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002738 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002740 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002748 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002750 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002758 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002760 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002768 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002770                            			even
00002770                            
00002770                            PalPointers2:
00002770                            
00002770                            ; palette address, RAM address, colors
00002770                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002770 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002778 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002780 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002788 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002790                            Pal_Levels_2:
00002790 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002798 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000027A0 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000027A8 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000027B0 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000027B8 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000027C0 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000027C8 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
000027D0 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000027D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000027E0 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000027E8 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000027F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000027F8 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002800 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002808 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002810 0000 0000 FB00 001F        ptr_Pal_Ending2_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002818 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002820 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002828 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002830 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002838 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002840 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002848 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002850 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002858 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002860 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002868 0000 0000 FB00 0007        ptr_Pal_Sonic11_D:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002870 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002878 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002880 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002888 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002890 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002898 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
000028A0 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
000028A8 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
000028B0 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
000028B8 0000 0000 FB00 0007        ptr_Pal_SonWater11_D:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
000028C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
000028C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
000028D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
000028D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
000028E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
000028E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
000028F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
000028F8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002900 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002908 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_D:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002910                            			even
00002910                            			
00002910                            PalPointers3:
00002910                            			
00002910                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002910 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002918 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002920 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002928 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002930                            Pal_Levels_3:
00002930 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002938 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002940 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
00002948 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002950 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
00002958 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002960 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002968 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002970 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002978 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002980 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002988 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002990 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002998 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000029A0 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000029A8 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000029B0 0000 0000 FB00 001F        ptr_Pal_Ending2_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000029B8 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000029C0 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000029C8 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000029D0 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000029D8 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000029E0 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000029E8 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000029F0 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000029F8 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002A00 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002A08 0000 0000 FB00 0007        ptr_Pal_Sonic11_E:		palp	Pal_Sonic11,v_pal_dry,$10		; $1E (29) - Sonic (DeltaWooloo)
00002A10 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $1F (30) - Sonic Underwater (Sonic 1)
00002A18 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $20 (31) - Sonic Underwater (Beta)
00002A20 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $21 (32) - Sonic Underwater (Midnight)
00002A28 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $22 (33) - Sonic Underwater (C2)
00002A30 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $23 (34) - Sonic Underwater (Crackers)
00002A38 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $24 (35) - Sonic Underwater (RHS)
00002A40 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $25 (36) - Sonic Underwater (Socket)
00002A48 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $26 (37) - Sonic Underwater (Cringe)
00002A50 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $27 (38) - Sonic Underwater (Darker)
00002A58 0000 0000 FB00 0007        ptr_Pal_SonWater11_E:		palp	Pal_SonWater11,v_pal_dry,$10		; $28 (39) - Sonic Underwater (Darker)
00002A60 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2_E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $28 (40) - Sonic Underwater (Sonic 1)
00002A68 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3_E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $29 (41) - Sonic Underwater (Beta)
00002A70 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4_E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $2A (42) - Sonic Underwater (Midnight)
00002A78 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5_E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $2B (43) - Sonic Underwater (C2)
00002A80 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6_E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $2C (44) - Sonic Underwater (Crackers)
00002A88 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7_E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $2D (45) - Sonic Underwater (RHS)
00002A90 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8_E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $2E (46) - Sonic Underwater (Socket)
00002A98 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9_E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $2F (47) - Sonic Underwater (Cringe)
00002AA0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10_E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $30 (48) - Sonic Underwater (Darker)
00002AA8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat11_E:	palp	Pal_SBZ3SonWat11,v_pal_dry,$10	; $31 (49) - Sonic Underwater (DeltaWooloo)
00002AB0                            			even
00002AB0                            
00002AB0                            
00002AB0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
00002AB0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
00002AB0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
00002AB0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
00002AB0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
00002AB0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
00002AB0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
00002AB0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
00002AB0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
00002AB0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
00002AB0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
00002AB0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
00002AB0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
00002AB0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
00002AB0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
00002AB0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002AB0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
00002AB0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
00002AB0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
00002AB0 =00000013                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
00002AB0 =00000015                  palid_Ending2:		equ (ptr_Pal_Ending-PalPointers)/8
00002AB0 =00000015                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
00002AB0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
00002AB0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
00002AB0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
00002AB0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
00002AB0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
00002AB0 =0000003F                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
00002AB0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002AB0 =0000006C                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
00002AB0 =0000006D                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
00002AB0 =0000006E                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
00002AB0 =0000006F                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
00002AB0 =00000070                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
00002AB0 =00000073                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
00002AB0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
00002AB0 =00000016                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
00002AB0 =00000017                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
00002AB0 =00000018                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
00002AB0 =00000019                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
00002AB0 =0000001A                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
00002AB0 =0000001B                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
00002AB0 =0000001C                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
00002AB0 =0000001D                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
00002AB0 =0000001E                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
00002AB0 =0000001F                  palid_Sonic11:		equ (ptr_Pal_Sonic11-PalPointers)/8
00002AB0 =00000020                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
00002AB0 =00000021                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
00002AB0 =00000022                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
00002AB0 =00000023                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
00002AB0 =00000024                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
00002AB0 =00000025                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
00002AB0 =00000026                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
00002AB0 =00000027                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
00002AB0 =00000028                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
00002AB0 =00000029                  palid_SonWater11:		equ (ptr_Pal_SonWater11-PalPointers)/8
00002AB0 =0000002A                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
00002AB0 =0000002B                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
00002AB0 =0000002C                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
00002AB0 =0000002D                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
00002AB0 =0000002E                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
00002AB0 =0000002F                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
00002AB0 =00000030                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
00002AB0 =00000031                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
00002AB0 =00000032                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
00002AB0 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002AB0 =00000033                  palid_SBZ3SonWat11:		equ (ptr_Pal_SBZ3SonWat11-PalPointers)/8
00002AB0                            		
00002AB0                            		;include	"_inc\Palette Pointers2.asm"
00002AB0                            		
00002AB0                            		;include	"_inc\Palette Pointers3.asm"
00002AB0                            		
00002AB0                            
00002AB0                            ; ---------------------------------------------------------------------------
00002AB0                            ; Palette data
00002AB0                            ; ---------------------------------------------------------------------------
00002AB0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002B30                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002BB0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002C30                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002C50                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002CB0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002D10                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002D70                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002DD0                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002E30                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002E90                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002F10                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002F90                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00003010                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00003070                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
000030D0                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003130                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003190                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000031F0                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003250                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000032B0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003310                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003370                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000033D0                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003430                            Pal_Special:	incbin	"palette\Special Stage.bin"
000034B0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003510                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003590                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000035B0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000035D0                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000035F0                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003670                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000036B0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003730                            Pal_Options:	incbin	"palette\Options.bin"
000037B0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000037D0                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000037F0                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003810                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003830                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003850                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003870                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003890                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000038B0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000038D0                            Pal_Sonic11:	incbin	"palette\Sonic Pal\11 DeltaWooloo.bin"
000038F0                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003910                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003930                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003950                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003970                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003990                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000039B0                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000039D0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000039F0                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003A10                            Pal_SonWater11:	incbin	"palette\Sonic Pal\11 DeltaWooloo Underwater.bin"
00003A30                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003A50                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003A70                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003A90                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003AB0                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003AD0                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
00003AF0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003B10                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003B30                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003B50                            Pal_SBZ3SonWat11:	incbin	"palette\Sonic Pal\11 DeltaWooloo SBZ3.bin"
00003B70                            ; ---------------------------------------------------------------------------
00003B70                            ; Subroutine to	wait for VBlank routines to complete
00003B70                            ; ---------------------------------------------------------------------------
00003B70                            
00003B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B70                            
00003B70                            
00003B70                            WaitForVBla:
00003B70 46FC 2300                  		enable_ints
00003B74                            
00003B74                            	@wait:
00003B74 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003B78 66FA                       		bne.s	@wait		; if not, branch
00003B7A 4E75                       		rts	
00003B7C                            ; End of function WaitForVBla
00003B7C                            
00003B7C                            		include	"_incObj\sub RandomNumber.asm"
00003B7C                            ; ---------------------------------------------------------------------------
00003B7C                            ; Subroutine to	generate a pseudo-random number	in d0
00003B7C                            ; ---------------------------------------------------------------------------
00003B7C                            
00003B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003B7C                            
00003B7C                            
00003B7C                            RandomNumber:
00003B7C 2238 F636                  		move.l	(v_random).w,d1
00003B80 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003B82 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003B88                            
00003B88                            	@scramble:
00003B88 2001                       		move.l	d1,d0
00003B8A E581                       		asl.l	#2,d1
00003B8C D280                       		add.l	d0,d1
00003B8E E781                       		asl.l	#3,d1
00003B90 D280                       		add.l	d0,d1
00003B92 3001                       		move.w	d1,d0
00003B94 4841                       		swap	d1
00003B96 D041                       		add.w	d1,d0
00003B98 3200                       		move.w	d0,d1
00003B9A 4841                       		swap	d1
00003B9C 21C1 F636                  		move.l	d1,(v_random).w
00003BA0 4E75                       		rts	
00003BA0 4E75                       		rts	
00003BA2                            		include	"_incObj\sub CalcSine.asm"
00003BA2                            ; ---------------------------------------------------------------------------
00003BA2                            ; Subroutine calculate a sine
00003BA2                            
00003BA2                            ; input:
00003BA2                            ;	d0 = angle
00003BA2                            
00003BA2                            ; output:
00003BA2                            ;	d0 = sine
00003BA2                            ;	d1 = cosine
00003BA2                            ; ---------------------------------------------------------------------------
00003BA2                            
00003BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003BA2                            
00003BA2                            
00003BA2                            CalcSine:
00003BA2 0240 00FF                          andi.w  #$FF,d0
00003BA6 5040                               addq.w  #8,d0
00003BA8 D040                               add.w   d0,d0
00003BAA 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003BAE 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003BB2 4E75                               rts
00003BB4                            ; End of function CalcSine
00003BB4                            
00003BB4                            ; ===========================================================================
00003BB4                            
00003BB4                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003E34                            
00003E34                            ; ===========================================================================
00003E34                            ; ===========================================================================
00003E34                            		include	"_incObj\sub CalcAngle.asm"
00003E34                            ; ---------------------------------------------------------------------------
00003E34                            ; Subroutine calculate an angle
00003E34                            
00003E34                            ; input:
00003E34                            ;	d1 = x-axis distance
00003E34                            ;	d2 = y-axis distance
00003E34                            
00003E34                            ; output:
00003E34                            ;	d0 = angle
00003E34                            ; ---------------------------------------------------------------------------
00003E34                            
00003E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E34                            
00003E34                            
00003E34                            CalcAngle:
00003E34 48E7 1800                  		movem.l	d3-d4,-(sp)
00003E38 7600                       		moveq	#0,d3
00003E3A 7800                       		moveq	#0,d4
00003E3C 3601                       		move.w	d1,d3
00003E3E 3802                       		move.w	d2,d4
00003E40 8843                       		or.w	d3,d4
00003E42 6700                       		beq.s	loc_2D04
00003E44 3802                       		move.w	d2,d4
00003E46 4A43                       		tst.w	d3
00003E48 6A00 0000                  		bpl.w	loc_2CC2
00003E4C 4443                       		neg.w	d3
00003E4E                            
00003E4E                            loc_2CC2:
00003E4E 4A44                       		tst.w	d4
00003E50 6A00 0000                  		bpl.w	loc_2CCA
00003E54 4444                       		neg.w	d4
00003E56                            
00003E56                            loc_2CCA:
00003E56 B843                       		cmp.w	d3,d4
00003E58 6400 0000                  		bcc.w	loc_2CDC
00003E5C E18C                       		lsl.l	#8,d4
00003E5E 88C3                       		divu.w	d3,d4
00003E60 7000                       		moveq	#0,d0
00003E62 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003E66 6000                       		bra.s	loc_2CE6
00003E68                            ; ===========================================================================
00003E68                            
00003E68                            loc_2CDC:
00003E68 E18B                       		lsl.l	#8,d3
00003E6A 86C4                       		divu.w	d4,d3
00003E6C 7040                       		moveq	#$40,d0
00003E6E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003E72                            
00003E72                            loc_2CE6:
00003E72 4A41                       		tst.w	d1
00003E74 6A00 0000                  		bpl.w	loc_2CF2
00003E78 4440                       		neg.w	d0
00003E7A 0640 0080                  		addi.w	#$80,d0
00003E7E                            
00003E7E                            loc_2CF2:
00003E7E 4A42                       		tst.w	d2
00003E80 6A00 0000                  		bpl.w	loc_2CFE
00003E84 4440                       		neg.w	d0
00003E86 0640 0100                  		addi.w	#$100,d0
00003E8A                            
00003E8A                            loc_2CFE:
00003E8A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E8E 4E75                       		rts	
00003E90                            ; ===========================================================================
00003E90                            
00003E90                            loc_2D04:
00003E90 303C 0040                  		move.w	#$40,d0
00003E94 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003E98 4E75                       		rts	
00003E9A                            ; End of function CalcAngle
00003E9A                            
00003E9A                            ; ===========================================================================
00003E9A                            
00003E9A                            Angle_Data:	incbin	"misc\angles.bin"
00003F9C                            
00003F9C                            ; ===========================================================================
00003F9C                            ; ===========================================================================
00003F9C                            
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C                            ; Sega screen
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C                            
00003F9C                            GM_Sega:
00003FA4 6100 D7F2                  		bsr.w	ClearPLC
00003FA8 6100 E288                  		bsr.w	PaletteFadeOut
00003FAC 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003FB2 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003FB6 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003FBA 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003FBE 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003FC2 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003FC6 4238 F64E                  		clr.b	(f_wtr_state).w
00003FCA 46FC 2700                  		disable_ints
00003FCE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003FD2 0200 00BF                  		andi.b	#$BF,d0
00003FD6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003FDC 6100 D1F2                  		bsr.w	ClearScreen
00003FEA 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003FF0 6100 D35C                  		bsr.w	NemDec
00003FF4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FFA 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00004000 303C 0000                  		move.w	#0,d0
00004004 6100 D8D2                  		bsr.w	EniDec
00004008                            
00004008 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
0000401C 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00004030                            
00004030 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004034 6B00                       			bmi.s   @loadpal
00004036 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
0000404A                            
0000404A                            	@loadpal:
0000404A 7000                       		moveq	#palid_SegaBG,d0
0000404C 6100 E4CA                  		bsr.w	PalLoad2	; load Sega logo palette
00004050 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00004056 7E3F                               moveq    #$3F,d7
00004058                             
00004058                                .loop:
00004058 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
0000405C 51CF FFFA                          dbf        d7,.loop
00004060 6100 E12A                          bsr.w     PaletteFadeIn ; added to allow fade in			
00004064 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
0000406A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00004070 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00004076 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
0000407C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004080 0000 0040                  		ori.b	#$40,d0
00004084 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000408A                            
0000408A                            Sega_WaitPal:
0000408A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00004090 6100 FADE                  		bsr.w	WaitForVBla
00004094 6100 E354                  		bsr.w	PalCycle_Sega
00004098 66F0                       		bne.s	Sega_WaitPal
0000409A                            
000040A2 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
000040A8 6100 FAC6                  		bsr.w	WaitForVBla
000040AC 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000040B2                            
000040B2                            Sega_WaitEnd:
000040B2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
000040B8 6100 FAB6                  		bsr.w	WaitForVBla
000040BC 4A78 F614                  		tst.w	(v_demolength).w
000040C0 6700                       		beq.s	Sega_GotoTitle
000040C2 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000040C8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000040CA                            
000040CA                            Sega_GotoTitle:
000040CA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
000040D0 4E75                       		rts	
000040D2                            ; ===========================================================================
000040D2                            
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            ; Title	screen
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            
000040D2                            GM_Title:
000040DA 6100 D6BC                  		bsr.w	ClearPLC
000040DE 6100 E152                  		bsr.w	PaletteFadeOut
000040E2 46FC 2700                  		disable_ints
000040E6 6100 D16E                  		bsr.w	SoundDriverLoad
000040EA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000040F0 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000040F4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000040F8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000040FC 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00004100 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00004104 3CBC 8B03                  		move.w	#$8B03,(a6)
00004108 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
0000410C 4238 F64E                  		clr.b	(f_wtr_state).w
00004110 6100 D0BE                  		bsr.w	ClearScreen
00004114                            		;jsr		SHC2022 
00004114                            
00004114 43F8 D000                  		lea	(v_objspace).w,a1
00004118 7000                       		moveq	#0,d0
0000411A 323C 07FF                  		move.w	#$7FF,d1
0000411E                            
0000411E                            	Tit_ClrObj1:
0000411E 22C0                       		move.l	d0,(a1)+
00004120 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00004124                            
00004124 6100 E066                  		bsr.w	PaletteFadeIn
00004128 46FC 2700                  		disable_ints
00004136 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000413C 6100 D210                  		bsr.w	NemDec
0000414A 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004150 6100 D1FC                  		bsr.w	NemDec
0000415E 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
00004164 6100 D1E8                  		bsr.w 	NemDec
00004168 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004176 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
0000417C 323C 028F                  		move.w	#$28F,d1
00004180                            
00004180                            	Tit_LoadText:
00004180 3C9D                       		move.w	(a5)+,(a6)
00004182 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
00004186                            
00004186 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
0000418C 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
00004192 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00004198 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
0000419E 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000041A4 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000041AA 6100 0000                  		bsr.w	LevelSizeLoad
000041AE 6100 0000                  		bsr.w	DeformLayers
000041B2 43F8 B000                  		lea	(v_16x16).w,a1
000041B6 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000041BC 303C 0000                  		move.w	#0,d0
000041C0 6100 D716                  		bsr.w	EniDec
000041C4 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000041CA 43F9 00FF 0000             		lea	(v_256x256).l,a1
000041D0 6100 D884                  		bsr.w	KosDec
000041D4 6100 0000                  		bsr.w	LevelLayoutLoad
000041D8 6100 E058                  		bsr.w	PaletteFadeOut
000041DC 46FC 2700                  		disable_ints
000041E0 6100 CFEE                  		bsr.w	ClearScreen
000041E4 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000041EA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000041F0 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000041F4 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000041F8 343C 6000                  		move.w	#$6000,d2
000041FC 6100 0000                  		bsr.w	DrawChunks
00004200 43F9 00FF 0000             		lea	($FF0000).l,a1
00004206 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000420C 303C 0000                  		move.w	#0,d0
00004210 6100 D6C6                  		bsr.w	EniDec
00004214                            
00004214 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
00004228                            
00004232 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
00004238 6100 D114                  		bsr.w	NemDec
0000423C 7001                       		moveq	#palid_Title,d0	; load title screen palette
0000423E 6100 E29C                  		bsr.w	PalLoad1
0000424A 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004250 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
00004256 43F8 D080                  		lea	(v_objspace+$80).w,a1
0000425A 7000                       		moveq	#0,d0
0000425C 323C 0007                  		move.w	#7,d1
00004260                            
00004260                            	Tit_ClrObj2:
00004260 22C0                       		move.l	d0,(a1)+
00004262 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
00004266                            
00004266 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
0000426C 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004272 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
00004276                            
00004276 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000427A 6A00                       			bpl.s   @isjap		; if yes, branch
0000427C                            
0000427C 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004282 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
00004288                            	@isjap:
00004288 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
0000428E 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
00004294 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000429A 6100 0000                  		bsr.w	DeformLayers
0000429E 4EB9 0000 0000             		jsr	(BuildSprites).l
000042A4 7000                       		moveq	#plcid_Main,d0
000042A6 6100 D4C4                  		bsr.w	NewPLC
000042AA 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000042B0 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000042B6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000042BA 0000 0040                  		ori.b	#$40,d0
000042BE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000042C4 6100 DEC6                  		bsr.w	PaletteFadeIn
000042C8                            
000042C8                            Tit_MainLoop:
000042C8 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000042CE 6100 F8A0                  		bsr.w	WaitForVBla
000042D2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000042D8 6100 0000                  		bsr.w	DeformLayers
000042DC 4EB9 0000 0000             		jsr	(BuildSprites).l
000042E2 6100 DA5A                  		bsr.w	PCycle_Title
000042E6 6100 D4BE                  		bsr.w	RunPLC
000042EA 3038 D008                  		move.w	(v_objspace+obX).w,d0
000042EE 5440                       		addq.w	#2,d0
000042F0 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
000042F4 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
000042F8 6500                       		blo.s	Tit_ChkRegion	; if not, branch
000042FA                            
000042FA 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004300 4E75                       		rts	
00004302                            ; ===========================================================================
00004302                            
00004302                            Tit_ChkRegion:
00004302 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004306 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
00004308                            
00004308 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
0000430E 6000                       		bra.s	Tit_EnterCheat
00004310                            
00004310                            	Tit_RegionJap:
00004310 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004316                            
00004316                            Tit_EnterCheat:
00004316 3038 FFE4                  		move.w	(v_title_dcount).w,d0
0000431A D0C0                       		adda.w	d0,a0
0000431C 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004320 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004324 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004326 6600                       		bne.s	Tit_ResetCheat	; if not, branch
00004328 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000432C 4A00                       		tst.b	d0
0000432E 6600                       		bne.s	Tit_CountC
00004330 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004334 3238 FFE6                  		move.w	(v_title_ccount).w,d1
00004338 E249                       		lsr.w	#1,d1
0000433A 0241 0003                  		andi.w	#3,d1
0000433E 6700                       		beq.s	Tit_PlayRing
00004340 4A38 FFF8                  		tst.b	(v_megadrive).w
00004344 6A00                       		bpl.s	Tit_PlayRing
00004346 7201                       		moveq	#1,d1
00004348 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
0000434C                            
0000434C                            	Tit_PlayRing:
0000434C 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000435A 6000                       		bra.s	Tit_CountC
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            Tit_ResetCheat:
0000435C 4A00                       		tst.b	d0
0000435E 6700                       		beq.s	Tit_CountC
00004360 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
00004366 6700                       		beq.s	Tit_CountC
00004368 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
0000436E                            
0000436E                            Tit_CountC:
0000436E 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004372 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
00004376 6700                       		beq.s	loc_3230	; if not, branch
00004378 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
0000437C                            		
0000437C                            loc_3230:
0000437C 4A78 F614                  		tst.w	(v_demolength).w
00004380 6700 0000                  		beq.w	GotoDemo
00004384 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000438A 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
0000438E                            
0000438E                            Tit_ChkLevSel:
0000438E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00004392 6700 0000                  		beq.w	@cont	; if not, play level
00004396 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
0000439C 6700 0000                  		beq.w	@cont	; if not, play level
000043A0 6000 0000                  		bra.w	Tit_LevelSelect
000043A4                            
000043A4                            	@cont:		
000043A4 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
000043AA 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
000043AE 7400                       		moveq	#0,d2
000043B0 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
000043B4 D442                       		add.w	d2,d2            ; multiply by 2
000043B6 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
000043BA 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000043BE                            
000043BE                            ; ===========================================================================
000043BE                            Tit_Menu_Choice:
000043BE 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000043C0 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000043C2                            ; ===========================================================================
000043C2                            
000043C2                            Menu_Options:
000043C2 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
000043C8 4E75                       		rts
000043CA                            
000043CA                            Tit_LevelSelect:	
000043CA 7002                       		moveq	#palid_LevelSel,d0
000043CC 6100 E14A                  		bsr.w	PalLoad2	; load level select palette
000043D0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000043D4 7000                       		moveq	#0,d0
000043D6 323C 00DF                  		move.w	#$DF,d1
000043DA                            
000043DA                            	Tit_ClrScroll1:
000043DA 22C0                       		move.l	d0,(a1)+
000043DC 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000043E0                            
000043E0 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000043E4 46FC 2700                  		disable_ints
000043E8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000043F8 323C 03FF                  		move.w	#$3FF,d1
000043FC                            
000043FC                            	Tit_ClrScroll2:
000043FC 2C80                       		move.l	d0,(a6)
000043FE 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004402                            
00004402 6100 0000                  		bsr.w	LevSelTextLoad
00004406                            
00004406                            ; ---------------------------------------------------------------------------
00004406                            ; Level	Select
00004406                            ; ---------------------------------------------------------------------------
00004406                            
00004406                            LevelSelect:
00004406 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000440C 6100 F762                  		bsr.w	WaitForVBla
00004410 6100 0000                  		bsr.w	LevSelControls
00004414 6100 D390                  		bsr.w	RunPLC
00004418 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000441C 66E8                       		bne.s	LevelSelect
0000441E 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
00004424 67E0                       		beq.s	LevelSelect	; if not, branch
00004426 3038 FF82                  		move.w	(v_levselitem).w,d0
0000442A 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
0000442E 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004430 3038 FF84                  		move.w	(v_levselsound).w,d0
00004434 0640 0080                  		addi.w	#$80,d0
00004438                            		;cmpi.w	#$9F,d0		; is sound $9F being played?
00004438                            		;beq.s	LevSel_Ending	; if yes, branch
00004438                            		;cmpi.w	#$9E,d0		; is sound $9E being played?
00004438                            		;beq.s	LevSel_Credits	; if yes, branch
00004438                            
00004438                            LevSel_PlaySnd:
00004438 6100 CE66                  		bsr.w	PlaySound_Special
0000443C 60C8                       		bra.s	LevelSelect
0000443E                            ; ===========================================================================
0000443E                            
0000443E                            LevSel_Ending:
0000443E 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004444 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000444A 4E75                       		rts	
0000444C                            ; ===========================================================================
0000444C                            
0000444C                            LevSel_Credits:
0000444C 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000445A 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004460 4E75                       		rts	
00004462                            ; ===========================================================================
00004462                            
00004462                            LevSel_Level_SS:
00004462 D040                       		add.w	d0,d0
00004464 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00004468 6B00 FF9C                  		bmi.w	LevelSelect
0000446C 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004470 6600                       		bne.s	LevSel_Level	; if not, branch
00004472 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004478 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000447C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004482 7000                       		moveq	#0,d0
00004484 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004488 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000448C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004490 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004498 4E75                       		rts	
0000449A                            ; ===========================================================================
0000449A                            
0000449A                            LevSel_Level:
0000449A 0240 3FFF                  		andi.w	#$3FFF,d0
0000449E 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000044A2                            
000044A2                            PlayLevel:
000044A2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000044A8 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044AE 7000                       		moveq	#0,d0
000044B0 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044B4 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044B8 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044BC 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000044C0 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000044C4 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000044C8 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000044CC 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000044D2 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044E2 4E75                       		rts	
000044E4                            ; ===========================================================================
000044E4                            ; ---------------------------------------------------------------------------
000044E4                            ; Level	select - level pointers
000044E4                            ; ---------------------------------------------------------------------------
000044E4                            		; correct level order
000044E4 0000                       		dc.b id_GHZ, 0
000044E6 0001                       		dc.b id_GHZ, 1
000044E8 0002                       		dc.b id_GHZ, 2
000044EA 0200                       		dc.b id_MZ, 0
000044EC 0201                       		dc.b id_MZ, 1
000044EE 0202                       		dc.b id_MZ, 2
000044F0 0400                       		dc.b id_SYZ, 0
000044F2 0401                       		dc.b id_SYZ, 1
000044F4 0402                       		dc.b id_SYZ, 2
000044F6 0100                       		dc.b id_LZ, 0
000044F8 0101                       		dc.b id_LZ, 1
000044FA 0102                       		dc.b id_LZ, 2
000044FC 0300                       		dc.b id_SLZ, 0
000044FE 0301                       		dc.b id_SLZ, 1
00004500 0302                       		dc.b id_SLZ, 2
00004502 0500                       		dc.b id_SBZ, 0
00004504 0501                       		dc.b id_SBZ, 1
00004506 0103                       		dc.b id_LZ, 3
00004508 0502                       		dc.b id_SBZ, 2
0000450A 0700                       		dc.b id_SS, 0		; Special Stage
0000450C 8000                       		dc.w $8000		; Sound Test
0000450E                            		even
0000450E                            ; ---------------------------------------------------------------------------
0000450E                            ; Level	select codes
0000450E                            ; ---------------------------------------------------------------------------
0000450E 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004516                            		even
00004516                            
00004516 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
0000451C                            		even
0000451C                            ; ===========================================================================
0000451C                            
0000451C                            ; ---------------------------------------------------------------------------
0000451C                            ; Demo mode
0000451C                            ; ---------------------------------------------------------------------------
0000451C                            
0000451C                            GotoDemo:
0000451C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004522                            
00004522                            loc_33B6:
00004522 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004528 6100 F646                  		bsr.w	WaitForVBla
0000452C 6100 0000                  		bsr.w	DeformLayers
00004530 6100 D7EC                  		bsr.w	PaletteCycle
00004534 6100 D270                  		bsr.w	RunPLC
00004538 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000453C 5440                       		addq.w	#2,d0
0000453E 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004542 0C40 1C00                  		cmpi.w	#$1C00,d0
00004546 6500                       		blo.s	loc_33E4
00004548 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000454E 4E75                       		rts	
00004550                            ; ===========================================================================
00004550                            
00004550                            loc_33E4:
00004550 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004556 6600 FE36                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000455A 4A78 F614                  		tst.w	(v_demolength).w
0000455E 6600 FFC2                  		bne.w	loc_33B6
0000456A 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
0000456E 0240 0007                  		andi.w	#7,d0
00004572 D040                       		add.w	d0,d0
00004574 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00004578 31C0 FE10                  		move.w	d0,(v_zone).w
0000457C 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004580 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004586 6500                       		blo.s	loc_3422	; if yes, branch
00004588 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
0000458E                            
0000458E                            loc_3422:
0000458E 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004594 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
0000459A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000459E 6600                       		bne.s	Demo_Level	; if not, branch
000045A0 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000045A6 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000045AA 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000045AE                            
000045AE                            Demo_Level:
000045AE 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000045B4 7000                       		moveq	#0,d0
000045B6 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000045BA 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000045BE 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000045C2 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000045CA 4E75                       		rts	
000045CC                            ; ===========================================================================
000045CC                            ; ---------------------------------------------------------------------------
000045CC                            ; Levels used in demos
000045CC                            ; ---------------------------------------------------------------------------
000045CC                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000045D4                            		even
000045D4                            
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Subroutine to	change what you're selecting in the level select
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            
000045D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045D4                            
000045D4                            
000045D4                            LevSelControls:
000045D4 1238 F605                  		move.b	(v_jpadpress1).w,d1
000045D8 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000045DC 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000045DE 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000045E2 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000045E4                            
000045E4                            LevSel_UpDown:
000045E4 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000045EA 1238 F604                  		move.b	(v_jpadhold1).w,d1
000045EE 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
000045F2 6700                       		beq.s	LevSel_SndTest	; if not, branch
000045F4 3038 FF82                  		move.w	(v_levselitem).w,d0
000045F8 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
000045FC 6700                       		beq.s	LevSel_Down	; if not, branch
000045FE 5340                       		subq.w	#1,d0		; move up 1 selection
00004600 6400                       		bhs.s	LevSel_Down
00004602 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004604                            
00004604                            LevSel_Down:
00004604 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004608 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000460A 5240                       		addq.w	#1,d0		; move down 1 selection
0000460C 0C40 0015                  		cmpi.w	#$15,d0
00004610 6500                       		blo.s	LevSel_Refresh
00004612 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004614                            
00004614                            LevSel_Refresh:
00004614 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004618 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000461C 4E75                       		rts	
0000461E                            ; ===========================================================================
0000461E                            
0000461E                            LevSel_SndTest:
0000461E 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004624 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004626 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000462A 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
0000462E 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004630 3038 FF84                  		move.w	(v_levselsound).w,d0
00004634 0801 0002                  		btst	#bitL,d1	; is left pressed?
00004638 6700                       		beq.s	LevSel_Right	; if not, branch
0000463A 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000463C 6400                       		bhs.s	LevSel_Right
0000463E 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
00004640                            
00004640                            LevSel_Right:
00004640 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004644 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004646 5240                       		addq.w	#1,d0		; add 1	to sound test
00004648 0C40 0056                  		cmpi.w	#$56,d0
0000464C 6500                       		blo.s	LevSel_Refresh2
0000464E 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
00004650                            
00004650                            LevSel_Refresh2:
00004650 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004654 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00004658                            
00004658                            LevSel_NoMove:
00004658 4E75                       		rts	
0000465A                            ; End of function LevSelControls
0000465A                            
0000465A                            ; ---------------------------------------------------------------------------
0000465A                            ; Subroutine to load level select text
0000465A                            ; ---------------------------------------------------------------------------
0000465A                            
0000465A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000465A                            
0000465A                            
0000465A                            LevSelTextLoad:
0000465A                            
0000465A =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000465A                            					; $E210 is a VRAM address
0000465A                            
0000465A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004660 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004666 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000466C 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004670 7214                       		moveq	#$14,d1		; number of lines of text
00004672                            
00004672                            	LevSel_DrawAll:
00004672 2D44 0004                  		move.l	d4,4(a6)
00004676 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000467A 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004680 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004684                            
00004684 7000                       		moveq	#0,d0
00004686 3038 FF82                  		move.w	(v_levselitem).w,d0
0000468A 3200                       		move.w	d0,d1
0000468C 283C 6210 0003             		move.l	#textpos,d4
00004692 EF48                       		lsl.w	#7,d0
00004694 4840                       		swap	d0
00004696 D880                       		add.l	d0,d4
00004698 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000469E E749                       		lsl.w	#3,d1
000046A0 3001                       		move.w	d1,d0
000046A2 D241                       		add.w	d1,d1
000046A4 D240                       		add.w	d0,d1
000046A6 D2C1                       		adda.w	d1,a1
000046A8 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000046AC 2D44 0004                  		move.l	d4,4(a6)
000046B0 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000046B4 363C E680                  		move.w	#$E680,d3
000046B8 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000046BE 6600                       		bne.s	LevSel_DrawSnd
000046C0 363C C680                  		move.w	#$C680,d3
000046C4                            
000046C4                            LevSel_DrawSnd:
000046CE 3038 FF84                  		move.w	(v_levselsound).w,d0
000046D2 0640 0080                  		addi.w	#$80,d0
000046D6 1400                       		move.b	d0,d2
000046D8 E808                       		lsr.b	#4,d0
000046DA 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000046DE 1002                       		move.b	d2,d0
000046E0 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000046E4 4E75                       		rts	
000046E6                            ; End of function LevSelTextLoad
000046E6                            
000046E6                            
000046E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046E6                            
000046E6                            
000046E6                            LevSel_ChgSnd:
000046E6 0240 000F                  		andi.w	#$F,d0
000046EA 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
000046EE 6500                       		blo.s	LevSel_Numb	; if not, branch
000046F0 5E00                       		addi.b	#7,d0		; use alpha characters
000046F2                            
000046F2                            	LevSel_Numb:
000046F2 D043                       		add.w	d3,d0
000046F4 3C80                       		move.w	d0,(a6)
000046F6 4E75                       		rts	
000046F8                            ; End of function LevSel_ChgSnd
000046F8                            
000046F8                            
000046F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046F8                            
000046F8                            
000046F8                            LevSel_ChgLine:
000046F8 7417                       		moveq	#$17,d2		; number of characters per line
000046FA                            
000046FA                            	LevSel_LineLoop:
000046FA 7000                       		moveq	#0,d0
000046FC 1019                       		move.b	(a1)+,d0	; get character
000046FE 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004700 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004704 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004708 4E75                       		rts	
0000470A                            
0000470A                            
0000470A                            	LevSel_CharOk:
0000470A D043                       		add.w	d3,d0		; combine char with VRAM setting
0000470C 3C80                       		move.w	d0,(a6)		; send to VRAM
0000470E 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004712 4E75                       		rts	
00004714                            ; End of function LevSel_ChgLine
00004714                            
00004714                            ; ===========================================================================
00004714                            ; ---------------------------------------------------------------------------
00004714                            ; Level	select menu text
00004714                            ; ---------------------------------------------------------------------------
00004714                            		incbin	"misc\Level Select Text (JP1).bin"
0000490C                            		even
0000490C                            ; ---------------------------------------------------------------------------
0000490C                            ; Music	playlist
0000490C                            ; ---------------------------------------------------------------------------
0000490C                            MusicList:
0000490C 00                         			dc.b bgm_GHZ    ; GHZ1
0000490D 00                                 	dc.b bgm_LZ    ; GHZ2
0000490E 00                                 	dc.b bgm_Seaside   ; GHZ3
0000490F 00                                 	dc.b bgm_LZ    ; GHZ4
00004910 00                                 	dc.b bgm_Stop    ; LZ1
00004911 00                                 	dc.b bgm_Stop   ; LZ2
00004912 00                                 	dc.b bgm_Stop    ; LZ3
00004913 00                                 	dc.b bgm_SBZ3    ; LZ4
00004914 00                                 	dc.b bgm_MZ    ; MZ1
00004915 00                                 	dc.b bgm_SBZ    ; MZ2
00004916 00                                 	dc.b bgm_RRZ2   ; MZ3
00004917 00                                 	dc.b bgm_SBZ    ; MZ4
00004918 00                                 	dc.b bgm_LZ    ; SLZ1
00004919 00                                 	dc.b bgm_LZ    ; SLZ2
0000491A 00                                 	dc.b bgm_LZ    ; SLZ3
0000491B 00                                 	dc.b bgm_LZ    ; SLZ4
0000491C 00                                 	dc.b bgm_SYZ    ; SYZ1
0000491D 00                                 	dc.b bgm_SLZ    ; SYZ2
0000491E 00                                 	dc.b bgm_SLZ    ; SYZ3
0000491F 00                                 	dc.b bgm_SLZ    ; SYZ4
00004920 00                                 	dc.b bgm_SBZ    ; SBZ1
00004921 00                                 	dc.b bgm_SBZ    ; SBZ2
00004922 00                                 	dc.b bgm_FZ		; SBZ3
00004923 00                                 	dc.b bgm_SBZ    ; SBZ4
00004924 00                                 	dc.b bgm_GHZ    ; GHZ1
00004925 00                                 	dc.b bgm_GHZ    ; GHZ1
00004926 00                                 	dc.b bgm_GHZ    ; GHZ1
00004927 00                                 	dc.b bgm_GHZ    ; GHZ1
00004928                                    	even
00004928                            ; ===========================================================================
00004928                            
00004928                            ; ---------------------------------------------------------------------------
00004928                            ; Level
00004928                            ; ---------------------------------------------------------------------------
00004928                            
00004928                            GM_Level:
00004928 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS - reset water state
0000492E                            
0000492E 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004934 4A78 FFF0                  		tst.w	(f_demo).w
00004938 6B00                       		bmi.s	Level_NoMusicFade
00004942                            
00004942                            	Level_NoMusicFade:
00004942 6100 CE54                  		bsr.w	ClearPLC
00004946 6100 D8EA                  		bsr.w	PaletteFadeOut
0000494A 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000494E 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
00004950 46FC 2700                  		disable_ints
0000495E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004964 6100 C9E8                  		bsr.w	NemDec
00004968 46FC 2300                  		enable_ints
0000496C 7000                       		moveq	#0,d0
0000496E 1038 FE10                  		move.b	(v_zone).w,d0
00004972 E948                       		lsl.w	#4,d0
00004974 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000497A 45F2 0000                  		lea	(a2,d0.w),a2
0000497E 7000                       		moveq	#0,d0
00004980 1012                       		move.b	(a2),d0
00004982 6700                       		beq.s	loc_37FC
00004984 6100 CDB4                  		bsr.w	AddPLC		; load level patterns
00004988                            
00004988                            loc_37FC:
00004988 7000                       		moveq	#plcid_Main2,d0
0000498A 6100 CDAE                  		bsr.w	AddPLC		; load standard	patterns
0000498E 4EB9 0000 0000             		jsr		LoadLifeIcon
00004994                            		
00004994                            Level_ClrRam:
00004994 43F8 D000                  		lea	(v_objspace).w,a1
00004998 7000                       		moveq	#0,d0
0000499A 323C 07FF                  		move.w	#$7FF,d1
0000499E                            
0000499E                            	Level_ClrObjRam:
0000499E 22C0                       		move.l	d0,(a1)+
000049A0 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000049A4                            
000049A4 43F8 F628                  		lea	($FFFFF628).w,a1
000049A8 7000                       		moveq	#0,d0
000049AA 323C 0015                  		move.w	#$15,d1
000049AE                            
000049AE                            	Level_ClrVars1:
000049AE 22C0                       		move.l	d0,(a1)+
000049B0 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000049B4                            
000049B4 43F8 F700                  		lea	(v_screenposx).w,a1
000049B8 7000                       		moveq	#0,d0
000049BA 323C 003F                  		move.w	#$3F,d1
000049BE                            
000049BE                            	Level_ClrVars2:
000049BE 22C0                       		move.l	d0,(a1)+
000049C0 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000049C4                            
000049C4 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000049C8 7000                       		moveq	#0,d0
000049CA 323C 0047                  		move.w	#$47,d1
000049CE                            
000049CE                            	Level_ClrVars3:
000049CE 22C0                       		move.l	d0,(a1)+
000049D0 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000049D4                            
000049D4 46FC 2700                  		disable_ints
000049D8 6100 C7F6                  		bsr.w	ClearScreen
000049DC 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000049E2 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000049E6 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000049EA 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000049EE 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000049F2 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000049F6 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000049FA 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000049FE 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004A04 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00004A08 31FC C800 C8FC             		ResetDMAQueue	
00004A0E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A14 6600                       		bne.s	Level_LoadPal	; if not, branch
00004A16                            
00004A16 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004A1A 7000                       		moveq	#0,d0
00004A1C 1038 FE11                  		move.b	(v_act).w,d0
00004A20 D040                       		add.w	d0,d0
00004A22 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004A28 3031 0000                  		move.w	(a1,d0.w),d0
00004A2C 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004A30 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004A34 31C0 F64A                  		move.w	d0,(v_waterpos3).w
00004A38 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004A3C 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004A40 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
00004A46                            
00004A46                            Level_LoadPal:
00004A46 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004A4C 46FC 2300                  		move	#$2300,sr
00004A50 4EB9 0000 0000             		jsr		LoadPlayerPal
00004A56 6100 DAC0                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004A5A 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004A60 6600                       		bne.s	Level_GetBgm	; if not, branch
00004A62 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
00004A68 6100 DAEE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004A6C 4A38 FE30                  		tst.b	($FFFFFE30).w
00004A70 6700                       		beq.s	Level_GetBgm
00004A72 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004A78                            
00004A78                            	Level_GetBgm:
00004A78 4A78 FFF0                  		tst.w	(f_demo).w
00004A7C 6B00                               	bmi.s	Level_SkipTtlCard
00004A7E 7000                               	moveq	#0,d0
00004A80 3038 FE10                  		move.w	(v_zone).w,d0
00004A84 E418                       		ror.b	#2,d0
00004A86 EC48                       		lsr.w   #6,d0
00004A88 43F9 0000 490C                     	lea	(MusicList).l,a1 ; load    music playlist
00004A8E 1031 0000                          	move.b	(a1,d0.w),d0
00004A92 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
00004A96 6100 C802                          	bsr.w	PlaySound    ; play music
00004A9A 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004AA0                            
00004AA0                            
00004AA0                            Level_TtlCardLoop:
00004AA0 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004AA6 6100 F0C8                  		bsr.w	WaitForVBla
00004AAA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004AB0 4EB9 0000 0000             		jsr	(BuildSprites).l
00004AB6 6100 CCEE                  		bsr.w	RunPLC
00004ABA 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004ABE B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004AC2 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004AC4 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004AC8 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004ACA 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004AD0                            
00004AD0                            	Level_SkipTtlCard:
00004AD0 4EB9 0000 0000             		jsr		LoadPlayerPal
00004AD6 6100 DA04                  		bsr.w	PalLoad1	; load Sonic's palette
00004ADA 6100 0000                  		bsr.w	LevelSizeLoad
00004ADE 6100 0000                  		bsr.w	DeformLayers
00004AE2 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004AE8 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004AEC 6100 0000                  		bsr.w	LoadTilesFromStart
00004AF0 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004AF6 6100 0000                  		bsr.w	ColIndexLoad
00004AFA 6100 0000                  		bsr.w	LZWaterFeatures
00004AFE 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004B04 4A78 FFF0                  		tst.w	(f_demo).w
00004B08 6B00                       		bmi.s	Level_ChkDebug
00004B0A 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004B10                            
00004B10                            Level_ChkDebug:
00004B10 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004B14 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B16 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004B1C 6700                       		beq.s	Level_ChkWater	; if not, branch
00004B1E 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004B24                            
00004B24                            Level_ChkWater:
00004B24 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004B2A 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004B30 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004B36 6600                       		bne.s	Level_LoadObj	; if not, branch
00004B38 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004B3E 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004B44 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004B4A 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004B50                            
00004B50                            Level_LoadObj:
00004B50 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004B56 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004B5C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004B62 7000                       		moveq	#0,d0
00004B64 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004B68 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004B6A 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004B6E 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004B72 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004B76                            
00004B76                            	Level_SkipClr:
00004B76 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004B7A 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004B7E 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004B82 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004B86 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004B8A 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004B8E 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004B92 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004B96 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004B9A 31C0 FE02                  		move.w	d0,(f_restart).w
00004B9E 31C0 FE04                  		move.w	d0,(v_framecount).w
00004BA2 6100 0000                  		bsr.w	OscillateNumInit
00004BA6 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004BAC 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004BB2 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004BB8 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004BBE 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004BC4 7000                       		moveq	#0,d0
00004BC6 1038 FE10                  		move.b	(v_zone).w,d0
00004BCA E548                       		lsl.w	#2,d0
00004BCC 2271 0000                  		movea.l	(a1,d0.w),a1
00004BD0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004BD4 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004BD6 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004BDC 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004BE0 5340                       		subq.w	#1,d0
00004BE2 E548                       		lsl.w	#2,d0
00004BE4 2271 0000                  		movea.l	(a1,d0.w),a1
00004BE8                            
00004BE8                            Level_Demo:
00004BE8 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004BEE 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004BF2 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004BF8 4A78 FFF0                  		tst.w	(f_demo).w
00004BFC 6A00                       		bpl.s	Level_ChkWaterPal
00004BFE 31FC 021C F614             		move.w	#540,(v_demolength).w
00004C04 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004C0A 6600                       		bne.s	Level_ChkWaterPal
00004C0C 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004C12                            
00004C12                            Level_ChkWaterPal:
00004C12 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004C18 6600                       		bne.s	Level_Delay	; if not, branch
00004C1A 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004C1C 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004C22 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004C24 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004C26                            
00004C26                            	Level_WtrNotSbz:
00004C26 6100 D96C                  		bsr.w	PalLoad4_Water
00004C2A                            
00004C2A                            Level_Delay:
00004C2A 323C 0003                  		move.w	#3,d1
00004C2E                            
00004C2E                            	Level_DelayLoop:
00004C2E 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C34 6100 EF3A                  		bsr.w	WaitForVBla
00004C38 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004C3C                            
00004C3C 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004C42 6100 D54E                  		bsr.w	PalFadeIn_Alt
00004C46 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004C4A 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004C4C 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004C50 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004C54 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004C58 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004C5C 6000                       		bra.s	Level_StartGame
00004C5E                            ; ===========================================================================
00004C5E                            
00004C5E                            Level_ClrCardArt:
00004C5E 7000                       		moveq	#plcid_Explode,d0
00004C60 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004C66 7000                       		moveq	#0,d0
00004C68 1038 FE10                  		move.b	(v_zone).w,d0
00004C6C 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004C70 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004C76                            
00004C76                            Level_StartGame:
00004C76 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004C7C                            
00004C7C                            ; ---------------------------------------------------------------------------
00004C7C                            ; Main level loop (when	all title card and loading sequences are finished)
00004C7C                            ; ---------------------------------------------------------------------------
00004C7C                            
00004C7C                            Level_MainLoop:
00004C7C 6100 C62E                  		bsr.w	PauseGame
00004C80 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C86 6100 EEE8                  		bsr.w	WaitForVBla
00004C8A 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004C8E 6100 0000                  		bsr.w	MoveSonicInDemo
00004C92 6100 0000                  		bsr.w	LZWaterFeatures
00004C96 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C9C 4A78 FE02                  			tst.w   (f_restart).w
00004CA0 6600 FC86                  			bne     GM_Level
00004CA4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004CA8 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004CAA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004CB0 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004CB2                            
00004CB2                            	Level_DoScroll:
00004CB2 6100 0000                  		bsr.w	DeformLayers
00004CB6                            
00004CB6                            	Level_SkipScroll:
00004CB6 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CBC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CC2 6100 D05A                  		bsr.w	PaletteCycle
00004CC6 6100 CADE                  		bsr.w	RunPLC
00004CCA 6100 0000                  		bsr.w	OscillateNumDo
00004CCE 6100 0000                  		bsr.w	SynchroAnimate
00004CD2 6100 0000                  		bsr.w	SignpostArtLoad
00004CD6                            
00004CD6 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004CDC 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004CDE 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004CE4 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004CE8 4E75                       		rts	
00004CEA                            ; ===========================================================================
00004CEA                            
00004CEA                            Level_ChkDemo:
00004CEA 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004CEE 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004CF0 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004CF4 6700                       		beq.s	Level_EndDemo	; if not, branch
00004CF6 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004CFC 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004D00 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D06 4E75                       		rts	
00004D08                            ; ===========================================================================
00004D08                            
00004D08                            Level_EndDemo:
00004D08 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004D0E 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004D10 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004D16 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004D1A 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004D1C 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004D22                            
00004D22                            Level_FadeDemo:
00004D22 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004D28 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004D2E 4278 F794                  		clr.w	(v_palchgspeed).w
00004D32                            
00004D32                            	Level_FDLoop:
00004D32 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004D38 6100 EE36                  		bsr.w	WaitForVBla
00004D3C 6100 0000                  		bsr.w	MoveSonicInDemo
00004D40 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004D46 4EB9 0000 0000             		jsr	(BuildSprites).l
00004D4C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004D52 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004D56 6A00                       		bpl.s	loc_3BC8
00004D58 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004D5E 6100 D4F2                  		bsr.w	FadeOut_ToBlack
00004D62                            
00004D62                            loc_3BC8:
00004D62 4A78 F614                  		tst.w	(v_demolength).w
00004D66 66CA                       		bne.s	Level_FDLoop
00004D68 4E75                       		rts	
00004D6A                            ; ===========================================================================
00004D6A                            
00004D6A                            		include	"_inc\LZWaterFeatures.asm"
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            ; Subroutine to	do special water effects in Labyrinth Zone
00004D6A                            ; ---------------------------------------------------------------------------
00004D6A                            
00004D6A                            LZWaterFeatures:
00004D6A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004D70 6600                       		bne.s	@notlabyrinth	; if not, branch
00004D72 4A38 F744                  			tst.b   (f_nobgscroll).w
00004D76 6600                       			bne.s	@setheight
00004D78 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004D7E 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004D80                            
00004D80 6100 0000                  		bsr.w	LZWindTunnels
00004D84 6100 0000                  		bsr.w	LZWaterSlides
00004D88 6100 0000                  		bsr.w	LZDynamicWater
00004D8C                            
00004D8C                            @setheight:
00004D8C 4238 F64E                  		clr.b	(f_wtr_state).w
00004D90 7000                       		moveq	#0,d0
00004D92 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004D96 E248                       		lsr.w	#1,d0
00004D98 D078 F648                  		add.w	(v_waterpos2).w,d0
00004D9C 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004DA0 3038 F646                  		move.w	(v_waterpos1).w,d0
00004DA4 9078 F704                  		sub.w	(v_screenposy).w,d0
00004DA8 6400                       		bcc.s	@isbelow
00004DAA 4A40                       		tst.w	d0
00004DAC 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004DAE                            
00004DAE 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004DB4 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004DBA                            
00004DBA                            	@isbelow:
00004DBA 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004DBE 6500                       		bcs.s	@isvisible	; if yes, branch
00004DC0 303C 00DF                  		move.w	#223,d0
00004DC4                            
00004DC4                            	@isvisible:
00004DC4 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004DC8                            
00004DC8                            @notlabyrinth:
00004DC8 4E75                       		rts	
00004DCA                            ; ===========================================================================
00004DCA                            ; ---------------------------------------------------------------------------
00004DCA                            ; Initial water heights
00004DCA                            ; ---------------------------------------------------------------------------
00004DCA 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004DCC 0328                       		dc.w $328	; Labyrinth 2
00004DCE 0900                       		dc.w $900	; Labyrinth 3
00004DD0 0228                       		dc.w $228	; Scrap Brain 3
00004DD2                            		even
00004DD2                            ; ===========================================================================
00004DD2                            
00004DD2                            ; ---------------------------------------------------------------------------
00004DD2                            ; Labyrinth dynamic water routines
00004DD2                            ; ---------------------------------------------------------------------------
00004DD2                            
00004DD2                            LZDynamicWater:
00004DD2 7000                       		moveq	#0,d0
00004DD4 1038 FE11                  		move.b	(v_act).w,d0
00004DD8 D040                       		add.w	d0,d0
00004DDA 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004DDE 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004DE2 7200                       		moveq	#0,d1
00004DE4 1238 F64C                  		move.b	(f_water).w,d1
00004DE8 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004DEC 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004DF0 6700                       		beq.s	@exit		; if water level is correct, branch
00004DF2 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004DF4 4441                       		neg.w	d1		; set water to move up instead
00004DF6                            
00004DF6                            	@movewater:
00004DF6 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004DFA                            
00004DFA                            	@exit:
00004DFA 4E75                       		rts	
00004DFC                            ; ===========================================================================
00004DFC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004DFE 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004E00 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004E02 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004E04                            ; ===========================================================================
00004E04                            
00004E04                            DynWater_LZ1:
00004E04 4E75                       		rts	
00004E06                            ; ===========================================================================
00004E06                            
00004E06                            DynWater_LZ2:
00004E06 3038 F700                  		move.w	(v_screenposx).w,d0
00004E0A 323C 0328                  		move.w	#$328,d1
00004E0E 0C40 0500                  		cmpi.w	#$500,d0
00004E12 6500                       		bcs.s	@setwater
00004E14 323C 03C8                  		move.w	#$3C8,d1
00004E18 0C40 0B00                  		cmpi.w	#$B00,d0
00004E1C 6500                       		bcs.s	@setwater
00004E1E 323C 0428                  		move.w	#$428,d1
00004E22                            
00004E22                            	@setwater:
00004E22 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E26 4E75                       		rts	
00004E28                            ; ===========================================================================
00004E28                            
00004E28                            DynWater_LZ3:
00004E28 3038 F700                  		move.w	(v_screenposx).w,d0
00004E2C 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004E30 6600                       		bne.s	@routine2
00004E32                            
00004E32 323C 0900                  		move.w	#$900,d1
00004E36 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004E3A 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004E3C 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004E42 6500                       		bcs.s	@setwaterlz3
00004E44 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004E4A 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004E4C                            
00004E4C 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004E50 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004E56 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004E64                            
00004E64                            	@setwaterlz3:
00004E64 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E68 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004E6C 4E75                       		rts	
00004E6E                            ; ===========================================================================
00004E6E                            
00004E6E                            @routine2:
00004E6E 5302                       		subq.b	#1,d2
00004E70 6600                       		bne.s	@routine3
00004E72 323C 04C8                  		move.w	#$4C8,d1
00004E76 0C40 0770                  		cmpi.w	#$770,d0
00004E7A 6500                       		bcs.s	@setwater2
00004E7C 323C 0308                  		move.w	#$308,d1
00004E80 0C40 1400                  		cmpi.w	#$1400,d0
00004E84 6500                       		bcs.s	@setwater2
00004E86 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004E8C 6700                       		beq.s	@sonicislow
00004E8E 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004E94 6400                       		bcc.s	@sonicislow	; if yes, branch
00004E96 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004E9C 6400                       		bcc.s	@setwater2
00004E9E                            
00004E9E                            @sonicislow:
00004E9E 323C 0508                  		move.w	#$508,d1
00004EA2 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004EA6 0C40 1770                  		cmpi.w	#$1770,d0
00004EAA 6500                       		bcs.s	@setwater2
00004EAC 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004EB2                            
00004EB2                            	@setwater2:
00004EB2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EB6 4E75                       		rts	
00004EB8                            ; ===========================================================================
00004EB8                            
00004EB8                            @routine3:
00004EB8 5302                       		subq.b	#1,d2
00004EBA 6600                       		bne.s	@routine4
00004EBC 323C 0508                  		move.w	#$508,d1
00004EC0 0C40 1860                  		cmpi.w	#$1860,d0
00004EC4 6500                       		bcs.s	@setwater3
00004EC6 323C 0188                  		move.w	#$188,d1
00004ECA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004ECE 6400                       		bcc.s	@loc_3DC6
00004ED0 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004ED4 6600                       		bne.s	@setwater3
00004ED6                            
00004ED6                            	@loc_3DC6:
00004ED6 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004EDC                            
00004EDC                            	@setwater3:
00004EDC 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EE0 4E75                       		rts	
00004EE2                            ; ===========================================================================
00004EE2                            
00004EE2                            @routine4:
00004EE2 5302                       		subq.b	#1,d2
00004EE4 6600                       		bne.s	@routine5
00004EE6 323C 0188                  		move.w	#$188,d1
00004EEA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004EEE 6500                       		bcs.s	@setwater4
00004EF0 323C 0900                  		move.w	#$900,d1
00004EF4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004EF8 6500                       		bcs.s	@setwater4
00004EFA 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004F00 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004F06 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004F0C 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004F12 4E75                       		rts	
00004F14                            ; ===========================================================================
00004F14                            
00004F14                            @setwater4:
00004F14 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004F18 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004F1C 4E75                       		rts	
00004F1E                            ; ===========================================================================
00004F1E                            
00004F1E                            @routine5:
00004F1E 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004F22 6500                       		bcs.s	@dontset	; if not, branch
00004F24 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004F2A                            
00004F2A                            	@dontset:
00004F2A 4E75                       		rts	
00004F2C                            ; ===========================================================================
00004F2C                            
00004F2C                            DynWater_SBZ3:
00004F2C                            	;	move.w	#$228,d1
00004F2C                            	;	cmpi.w	#$F00,(v_screenposx).w
00004F2C                            	;	bcs.s	@setwater
00004F2C                            	;	move.w	#$4C8,d1
00004F2C                            
00004F2C                            	;@setwater:
00004F2C                            		;move.w	d1,(v_waterpos3).w
00004F2C 4E75                       		rts
00004F2E                            
00004F2E                            ; ---------------------------------------------------------------------------
00004F2E                            ; Labyrinth Zone "wind tunnels"	subroutine
00004F2E                            ; ---------------------------------------------------------------------------
00004F2E                            
00004F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F2E                            
00004F2E                            
00004F2E                            LZWindTunnels:
00004F2E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004F32 6600 0000                  		bne.w	@quit	; if yes, branch
00004F36 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004F3C 7000                       		moveq	#0,d0
00004F3E 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004F42 E748                       		lsl.w	#3,d0		; multiply by 8
00004F44 D4C0                       		adda.w	d0,a2		; add to address for data
00004F46 7200                       		moveq	#0,d1
00004F48 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004F4C 6600                       		bne.s	@notact1	; if not, branch
00004F4E 7201                       		moveq	#1,d1
00004F50 514A                       		subq.w	#8,a2		; use different data for act 1
00004F52                            
00004F52                            	@notact1:
00004F52 43F8 D000                  		lea	(v_player).w,a1
00004F56                            
00004F56                            @chksonic:
00004F56 3029 0008                  		move.w	obX(a1),d0
00004F5A B052                       		cmp.w	(a2),d0
00004F5C 6500 0000                  		bcs.w	@chknext
00004F60 B06A 0004                  		cmp.w	4(a2),d0
00004F64 6400 0000                  		bcc.w	@chknext
00004F68 3429 000C                  		move.w	obY(a1),d2
00004F6C B46A 0002                  		cmp.w	2(a2),d2
00004F70 6500                       		bcs.s	@chknext
00004F72 B46A 0006                  		cmp.w	6(a2),d2
00004F76 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004F78 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F7C 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004F80 6600                       		bne.s	@skipsound	; if not, branch
00004F8C                            
00004F8C                            	@skipsound:
00004F8C 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004F90 6600 0000                  		bne.w	@quit	; if yes, branch
00004F94 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004F9A 6400                       		bcc.s	@clrquit	; if yes, branch
00004F9C 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004FA2 0440 0080                  		subi.w	#$80,d0
00004FA6 B052                       		cmp.w	(a2),d0
00004FA8 6400                       		bcc.s	@movesonic
00004FAA 7002                       		moveq	#2,d0
00004FAC 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004FB2 6600                       		bne.s	@notact2	; if not, branch
00004FB4 4440                       		neg.w	d0
00004FB6                            
00004FB6                            	@notact2:
00004FB6 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004FBA                            
00004FBA                            @movesonic:
00004FBA 5869 0008                  		addq.w	#4,obX(a1)
00004FBE 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004FC4 337C 0000 0012             		move.w	#0,obVelY(a1)
00004FCA 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004FD0 08E9 0001 0022             		bset	#1,obStatus(a1)
00004FD6 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004FDC 6700                       		beq.s	@down		; if not, branch
00004FDE 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004FE2                            
00004FE2                            	@down:
00004FE2 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004FE8 6700                       		beq.s	@end		; if not, branch
00004FEA 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004FEE                            
00004FEE                            	@end:
00004FEE 4E75                       		rts	
00004FF0                            ; ===========================================================================
00004FF0                            
00004FF0                            @chknext:
00004FF0 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004FF2 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004FF6 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004FFA 6700                       		beq.s	@quit		; if yes, branch
00004FFC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00005002                            
00005002                            @clrquit:
00005002 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00005006                            
00005006                            @quit:
00005006 4E75                       		rts	
00005008                            ; End of function LZWindTunnels
00005008                            
00005008                            ; ===========================================================================
00005008                            
00005008                            		;    left, top,  right, bottom boundaries
00005008 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00005010 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00005018 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00005020 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00005028 0C80 0600 13D0 0780        		dc.w $C80, $600, $13D0, $780 ; SBZ act 3 values
00005030                            		even
00005030                            
00005030                            ; ---------------------------------------------------------------------------
00005030                            ; Labyrinth Zone water slide subroutine
00005030                            ; ---------------------------------------------------------------------------
00005030                            
00005030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005030                            
00005030                            
00005030                            LZWaterSlides:
00005030 43F8 D000                  		lea	(v_player).w,a1
00005034 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
0000503A 6600                       		bne.s	loc_3F6A	; if not, branch
0000503C 3029 000C                  		move.w	obY(a1),d0
00005040 E248                       		lsr.w	#1,d0
00005042 0240 0380                  		andi.w	#$380,d0
00005046 1229 0008                  		move.b	obX(a1),d1
0000504A 0241 007F                  		andi.w	#$7F,d1
0000504E D041                       		add.w	d1,d0
00005050 45F8 A400                  		lea	(v_lvllayout).w,a2
00005054 1032 0000                  		move.b	(a2,d0.w),d0
00005058 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
0000505C 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
0000505E                            
0000505E                            loc_3F62:
0000505E B022                       		cmp.b	-(a2),d0
00005060 57C9 FFFC                  		dbeq	d1,loc_3F62
00005064 6700                       		beq.s	LZSlide_Move
00005066                            
00005066                            loc_3F6A:
00005066 4A38 F7CA                  		tst.b	(f_jumponly).w
0000506A 6700                       		beq.s	locret_3F7A
0000506C 337C 0005 003E             		move.w	#5,$3E(a1)
00005072 4238 F7CA                  		clr.b	(f_jumponly).w
00005076                            
00005076                            locret_3F7A:
00005076 4E75                       		rts	
00005078                            ; ===========================================================================
00005078                            
00005078                            LZSlide_Move:
00005078 0C41 0003                  		cmpi.w	#3,d1
0000507C 6400                       		bcc.s	loc_3F84
0000507E 4E71                       		nop	
00005080                            
00005080                            loc_3F84:
00005080 08A9 0000 0022             		bclr	#0,obStatus(a1)
00005086 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
0000508A 1340 0020                  		move.b	d0,obInertia(a1)
0000508E 6A00                       		bpl.s	loc_3F9A
00005090 08E9 0000 0022             		bset	#0,obStatus(a1)
00005096                            
00005096                            loc_3F9A:
00005096 4229 0021                  		clr.b	obInertia+1(a1)
0000509A 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
000050A0 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
000050A6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000050AA 0200 001F                  		andi.b	#$1F,d0
000050AE 6600                       		bne.s	locret_3FBE
000050BA                            
000050BA                            locret_3FBE:
000050BA 4E75                       		rts	
000050BC                            ; End of function LZWaterSlides
000050BC                            
000050BC                            ; ===========================================================================
000050BC                            ; byte_3FC0:
000050BC                            Slide_Speeds:
000050BC 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
000050C4 00                         		even
000050C4                            
000050C4                            Slide_Chunks:
000050C4 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
000050C5                            ; byte_3FCF
000050C5                            Slide_Chunks_End
000050C6 00                         		even
000050C6 00                         		even
000050C6                            		include	"_inc\MoveSonicInDemo.asm"
000050C6                            ; ---------------------------------------------------------------------------
000050C6                            ; Subroutine to	move Sonic in demo mode
000050C6                            ; ---------------------------------------------------------------------------
000050C6                            
000050C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050C6                            
000050C6                            
000050C6                            MoveSonicInDemo:
000050C6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000050CA 6600                       		bne.s	MDemo_On	; if yes, branch
000050CC 4E75                       		rts	
000050CE                            ; ===========================================================================
000050CE                            
000050CE                            ; This is an unused subroutine for recording a demo
000050CE                            
000050CE                            DemoRecorder:
000050CE 43F9 0008 0000             		lea	($80000).l,a1
000050D4 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000050D8 D2C0                       		adda.w	d0,a1
000050DA 1038 F604                  		move.b	(v_jpadhold1).w,d0
000050DE B011                       		cmp.b	(a1),d0
000050E0 6600                       		bne.s	@next
000050E2 5229 0001                  		addq.b	#1,1(a1)
000050E6 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000050EC 6700                       		beq.s	@next
000050EE 4E75                       		rts	
000050F0                            
000050F0                            	@next:
000050F0 1340 0002                  		move.b	d0,2(a1)
000050F4 137C 0000 0003             		move.b	#0,3(a1)
000050FA 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
000050FE 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
00005104 4E75                       		rts	
00005106                            ; ===========================================================================
00005106                            
00005106                            MDemo_On:
00005106 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
0000510A 6A00                       		bpl.s	@dontquit	; if not, branch
0000510C 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005110 6B00                       		bmi.s	@dontquit	; if yes, branch
00005112 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005118                            
00005118                            	@dontquit:
00005118 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
0000511E 7000                       		moveq	#0,d0
00005120 1038 FE10                  		move.b	(v_zone).w,d0
00005124 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
0000512A 6600                       		bne.s	@notspecial	; if not, branch
0000512C 7006                       		moveq	#6,d0		; use demo #6
0000512E                            
0000512E                            	@notspecial:
0000512E E548                       		lsl.w	#2,d0
00005130 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
00005134 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005138 6A00                       		bpl.s	@notcredits	; if not, branch
0000513A 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
00005140 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00005144 5340                       		subq.w	#1,d0
00005146 E548                       		lsl.w	#2,d0
00005148 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
0000514C                            
0000514C                            	@notcredits:
0000514C 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00005150 D2C0                       		adda.w	d0,a1
00005152 1011                       		move.b	(a1),d0
00005154 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005158 1200                       		move.b	d0,d1
0000515A 7400                       			moveq	#0,d2
0000515C B500                       		eor.b	d2,d0
0000515E 10C1                       		move.b	d1,(a0)+
00005160 C001                       		and.b	d1,d0
00005162 10C0                       		move.b	d0,(a0)+
00005164 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005168 6400                       		bcc.s	@end
0000516A 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
00005170 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005174                            
00005174                            	@end:
00005174 4E75                       		rts	
00005176                            ; End of function MoveSonicInDemo
00005176                            
00005176                            ; ===========================================================================
00005176                            ; ---------------------------------------------------------------------------
00005176                            ; Demo sequence	pointers
00005176                            ; ---------------------------------------------------------------------------
00005176 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
0000517A 0000 0000                  		dc.l Demo_GHZ
0000517E 0000 0000                  		dc.l Demo_MZ
00005182 0000 0000                  		dc.l Demo_MZ
00005186 0000 0000                  		dc.l Demo_SYZ
0000518A 0000 0000                  		dc.l Demo_SYZ
0000518E 0000 0000                  		dc.l Demo_SS
00005192 0000 0000                  		dc.l Demo_SS
00005196                            
00005196 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
0000519A 0000 0000                  		dc.l Demo_EndMZ
0000519E 0000 0000                  		dc.l Demo_EndSYZ
000051A2 0000 0000                  		dc.l Demo_EndLZ
000051A6 0000 0000                  		dc.l Demo_EndSLZ
000051AA 0000 0000                  		dc.l Demo_EndSBZ1
000051AE 0000 0000                  		dc.l Demo_EndSBZ2
000051B2 0000 0000                  		dc.l Demo_EndGHZ2
000051B6                            
000051B6 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000051C6 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000051D6 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000051E6                            		even
000051E6                            		even
000051E6                            
000051E6                            ; ---------------------------------------------------------------------------
000051E6                            ; Collision index pointer loading subroutine
000051E6                            ; ---------------------------------------------------------------------------
000051E6                            
000051E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051E6                            
000051E6                            
000051E6                            ColIndexLoad:
000051E6 7000                       		moveq	#0,d0
000051E8 1038 FE10                  		move.b	(v_zone).w,d0
000051EC E548                       		lsl.w	#2,d0
000051EE 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
000051F4 4E75                       		rts	
000051F6                            ; End of function ColIndexLoad
000051F6                            
000051F6                            ; ===========================================================================
000051F6                            ; ---------------------------------------------------------------------------
000051F6                            ; Collision index pointers
000051F6                            ; ---------------------------------------------------------------------------
000051F6 0000 0000                  ColPointers:	dc.l Col_GHZ
000051FA 0000 0000                  		dc.l Col_LZ
000051FE 0000 0000                  		dc.l Col_MZ
00005202 0000 0000                  		dc.l Col_SLZ
00005206 0000 0000                  		dc.l Col_SYZ
0000520A 0000 0000                  		dc.l Col_SBZ
0000520E                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
0000520E                            
0000520E                            		include	"_inc\Oscillatory Routines.asm"
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            ; Oscillating number subroutines
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            
0000520E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000520E                            
0000520E                            ; Initialise the values
0000520E                            
0000520E                            OscillateNumInit:
0000520E 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005212 45F9 0000 0000             		lea	(@baselines).l,a2
00005218 7220                       		moveq	#$20,d1
0000521A                            
0000521A                            	@loop:
0000521A 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
0000521C 51C9 FFFC                  		dbf	d1,@loop
00005220 4E75                       		rts	
00005222                            
00005222                            
00005222                            ; ===========================================================================
00005222 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
00005224 0080 0000                  		dc.w $80, 0
00005228 0080 0000                  		dc.w $80, 0
0000522C 0080 0000                  		dc.w $80, 0
00005230 0080 0000                  		dc.w $80, 0
00005234 0080 0000                  		dc.w $80, 0
00005238 0080 0000                  		dc.w $80, 0
0000523C 0080 0000                  		dc.w $80, 0
00005240 0080 0000                  		dc.w $80, 0
00005244 0080 0000                  		dc.w $80, 0
00005248 50F0 011E                  		dc.w $50F0, $11E
0000524C 2080 00B4                  		dc.w $2080, $B4
00005250 3080 010E                  		dc.w $3080, $10E
00005254 5080 01C2                  		dc.w $5080, $1C2
00005258 7080 0276                  		dc.w $7080, $276
0000525C 0080 0000                  		dc.w $80, 0
00005260 0080 0000                  		dc.w $80, 0
00005264                            		even
00005264                            
00005264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005264                            
00005264                            ; Oscillate values
00005264                            
00005264                            OscillateNumDo:
00005264 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
0000526A 6400                       		bcc.s	@end		; if yes, branch
0000526C 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005270 45F9 0000 0000             		lea	(@settings).l,a2
00005276 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005278 720F                       		moveq	#$F,d1
0000527A                            
0000527A                            @loop:
0000527A 341A                       		move.w	(a2)+,d2	; get frequency
0000527C 381A                       		move.w	(a2)+,d4	; get amplitude
0000527E 0303                       		btst	d1,d3		; check oscillation direction
00005280 6600                       		bne.s	@down		; branch if 1
00005282                            
00005282                            	@up:
00005282 3029 0002                  		move.w	2(a1),d0	; get current rate
00005286 D042                       		add.w	d2,d0		; add frequency
00005288 3340 0002                  		move.w	d0,2(a1)
0000528C D151                       		add.w	d0,0(a1)	; add rate to value
0000528E B811                       		cmp.b	0(a1),d4
00005290 6200                       		bhi.s	@next
00005292 03C3                       		bset	d1,d3
00005294 6000                       		bra.s	@next
00005296                            
00005296                            	@down:
00005296 3029 0002                  		move.w	2(a1),d0
0000529A 9042                       		sub.w	d2,d0
0000529C 3340 0002                  		move.w	d0,2(a1)
000052A0 D151                       		add.w	d0,0(a1)
000052A2 B811                       		cmp.b	0(a1),d4
000052A4 6300                       		bls.s	@next
000052A6 0383                       		bclr	d1,d3
000052A8                            
000052A8                            	@next:
000052A8 5849                       		addq.w	#4,a1
000052AA 51C9 FFCE                  		dbf	d1,@loop
000052AE 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000052B2                            
000052B2                            @end:
000052B2 4E75                       		rts	
000052B4                            ; End of function OscillateNumDo
000052B4                            
000052B4                            ; ===========================================================================
000052B4 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000052B8 0002 0018                  		dc.w 2,	$18
000052BC 0002 0020                  		dc.w 2,	$20
000052C0 0002 0030                  		dc.w 2,	$30
000052C4 0004 0020                  		dc.w 4,	$20
000052C8 0008 0008                  		dc.w 8,	8
000052CC 0008 0040                  		dc.w 8,	$40
000052D0 0004 0040                  		dc.w 4,	$40
000052D4 0002 0050                  		dc.w 2,	$50
000052D8 0002 0050                  		dc.w 2,	$50
000052DC 0002 0020                  		dc.w 2,	$20
000052E0 0003 0030                  		dc.w 3,	$30
000052E4 0005 0050                  		dc.w 5,	$50
000052E8 0007 0070                  		dc.w 7,	$70
000052EC 0002 0010                  		dc.w 2,	$10
000052F0 0002 0010                  		dc.w 2,	$10
000052F4                            		even
000052F4                            		even
000052F4                            
000052F4                            ; ---------------------------------------------------------------------------
000052F4                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
000052F4                            ; ---------------------------------------------------------------------------
000052F4                            
000052F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052F4                            
000052F4                            
000052F4                            SynchroAnimate:
000052F4                            
000052F4                            ; Used for GHZ spiked log
000052F4                            Sync1:
000052F4 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
000052F8 6A00                       		bpl.s	Sync2		; if not, branch
000052FA 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005300 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00005304 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
0000530A                            
0000530A                            ; Used for rings and giant rings
0000530A                            Sync2:
0000530A 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0000530E 6A00                       		bpl.s	Sync3
00005310 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005316 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0000531A 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005320                            
00005320                            ; Used for nothing
00005320                            Sync3:
00005320 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
00005324 6A00                       		bpl.s	Sync4
00005326 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0000532C 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00005330 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005336 6500                       		blo.s	Sync4
00005338 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
0000533E                            
0000533E                            ; Used for bouncing rings
0000533E                            Sync4:
0000533E 4A38 FEC6                  		tst.b	(v_ani3_time).w
00005342 6700                       		beq.s	SyncEnd
00005344 7000                       		moveq	#0,d0
00005346 1038 FEC6                  		move.b	(v_ani3_time).w,d0
0000534A D078 FEC8                  		add.w	(v_ani3_buf).w,d0
0000534E 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00005352 EF58                       		rol.w	#7,d0
00005354 0240 0003                  		andi.w	#3,d0
00005358 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
0000535C 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00005360                            
00005360                            SyncEnd:
00005360 4E75                       		rts	
00005362                            ; End of function SynchroAnimate
00005362                            
00005362                            ; ---------------------------------------------------------------------------
00005362                            ; End-of-act signpost pattern loading subroutine
00005362                            ; ---------------------------------------------------------------------------
00005362                            
00005362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005362                            
00005362                            
00005362                            SignpostArtLoad:
00005362 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005366 6600 0000                  		bne.w	@exit		; if yes, branch
0000536A 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00005370 6700                       		beq.s	@exit		; if yes, branch
00005372                            
00005372 3038 F700                  		move.w	(v_screenposx).w,d0
00005376 3238 F72A                  		move.w	(v_limitright2).w,d1
0000537A 0441 0100                  		subi.w	#$100,d1
0000537E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00005380 6D00                       		blt.s	@exit		; if not, branch
00005382 4A38 FE1E                  		tst.b	(f_timecount).w
00005386 6700                       		beq.s	@exit
00005388 B278 F728                  		cmp.w	(v_limitleft2).w,d1
0000538C 6700                       		beq.s	@exit
0000538E 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005392 7000                       		moveq	#plcid_Signpost,d0
00005394 6000 C3D6                  		bra.w	NewPLC		; load signpost	patterns
00005398                            
00005398                            	@exit:
00005398 4E75                       		rts	
0000539A                            ; End of function SignpostArtLoad
0000539A                            
0000539A                            ; ===========================================================================
0000539A                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
0000541A                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
0000554A                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000055CA                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000056CA                            ; ===========================================================================
000056CA                            
000056CA                            ; ---------------------------------------------------------------------------
000056CA                            ; Special Stage
000056CA                            ; ---------------------------------------------------------------------------
000056CA                            
000056CA                            GM_Special:
000056D2 6100 CC88                  		bsr.w	PaletteWhiteOut
000056D6 46FC 2700                  		disable_ints
000056DA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000056E0 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000056E4 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
000056E8 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
000056EE 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
000056F2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000056F6 0200 00BF                  		andi.b	#$BF,d0
000056FA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005700 6100 BACE                  		bsr.w	ClearScreen
00005704 46FC 2300                  		enable_ints
00005708 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
0000572A                            
0000572A                            	SS_WaitForDMA:
0000572A 3215                       		move.w	(a5),d1		; read control port ($C00004)
0000572C 0801 0001                  		btst	#1,d1		; is DMA running?
00005730 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
00005732 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005736 6100 0000                  		bsr.w	SS_BGLoad
0000573A 7000                       		moveq	#plcid_SpecialStage,d0
0000573C 6100 C168                  		bsr.w	QuickPLC	; load special stage patterns
00005740                            
00005740 43F8 D000                  		lea	(v_objspace).w,a1
00005744 7000                       		moveq	#0,d0
00005746 323C 07FF                  		move.w	#$7FF,d1
0000574A                            	SS_ClrObjRam:
0000574A 22C0                       		move.l	d0,(a1)+
0000574C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005750                            
00005750 43F8 F700                  		lea	(v_screenposx).w,a1
00005754 7000                       		moveq	#0,d0
00005756 323C 003F                  		move.w	#$3F,d1
0000575A                            	SS_ClrRam1:
0000575A 22C0                       		move.l	d0,(a1)+
0000575C 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00005760                            
00005760 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00005764 7000                       		moveq	#0,d0
00005766 323C 0027                  		move.w	#$27,d1
0000576A                            	SS_ClrRam2:
0000576A 22C0                       		move.l	d0,(a1)+
0000576C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00005770                            
00005770 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00005774 7000                       		moveq	#0,d0
00005776 323C 007F                  		move.w	#$7F,d1
0000577A                            	SS_ClrNemRam:
0000577A 22C0                       		move.l	d0,(a1)+
0000577C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00005780                            
00005780 4238 F64E                  		clr.b	(f_wtr_state).w
00005784 4278 FE02                  		clr.w	(f_restart).w
00005788 700A                       		moveq	#palid_Special,d0
0000578A 6100 CD50                  		bsr.w	PalLoad1	; load special stage palette
0000578E 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
00005794 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
0000579C 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000057A4 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000057AA 6100 0000                  		bsr.w	PalCycle_SS
000057AE 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000057B2 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000057C0 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000057C6 43F9 0000 5176             		lea	(DemoDataPtr).l,a1
000057CC 7006                       		moveq	#6,d0
000057CE E548                       		lsl.w	#2,d0
000057D0 2271 0000                  		movea.l	(a1,d0.w),a1
000057D4 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000057DA 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000057DE 4278 FE20                  		clr.w	(v_rings).w
000057E2 4238 FE1B                  		clr.b	(v_lifecount).w
000057E6 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
000057EC 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000057F2 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
000057F6 6700                       		beq.s	SS_NoDebug	; if not, branch
000057F8 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
000057FE 6700                       		beq.s	SS_NoDebug	; if not, branch
00005800 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005806                            
00005806                            	SS_NoDebug:
00005806 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000580A 0000 0040                  		ori.b	#$40,d0
0000580E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005814 6100 CA9A                  		bsr.w	PaletteWhiteIn
00005818                            
00005818                            ; ---------------------------------------------------------------------------
00005818                            ; Main Special Stage loop
00005818                            ; ---------------------------------------------------------------------------
00005818                            
00005818                            SS_MainLoop:
00005818 6100 BA92                  		bsr.w	PauseGame
0000581C 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00005822 6100 E34C                  		bsr.w	WaitForVBla
00005826 6100 F89E                  		bsr.w	MoveSonicInDemo
0000582A 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005830 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005836 4EB9 0000 0000             		jsr	(BuildSprites).l
0000583C 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005842 6100 0000                  		bsr.w	SS_BGAnimate
00005846 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000584A 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000584C 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00005850 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00005854                            
00005854                            	SS_ChkEnd:
00005854 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0000585A 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
0000585E                            
0000585E 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005862 6600 0000                  		bne.w	SS_ToLevel
00005866 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000586C 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00005872 6500                       		blo.s	SS_Finish	; if not, branch
00005874 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005878                            
00005878                            SS_Finish:
00005878 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
0000587E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005884 4278 F794                  		clr.w	(v_palchgspeed).w
00005888                            
00005888                            	SS_FinLoop:
00005888 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
0000588E 6100 E2E0                  		bsr.w	WaitForVBla
00005892 6100 F832                  		bsr.w	MoveSonicInDemo
00005896 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000589C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000058A2 4EB9 0000 0000             		jsr	(BuildSprites).l
000058A8 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000058AE 6100 0000                  		bsr.w	SS_BGAnimate
000058B2 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000058B6 6A00                       		bpl.s	loc_47D4
000058B8 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000058BE 6100 CABC                  		bsr.w	WhiteOut_ToWhite
000058C2                            
000058C2                            loc_47D4:
000058C2 4A78 F614                  		tst.w	(v_demolength).w
000058C6 66C0                       		bne.s	SS_FinLoop
000058C8                            
000058C8 46FC 2700                  		disable_ints
000058CC 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000058D2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000058D6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000058DA 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000058DE 6100 B8F0                  		bsr.w	ClearScreen
000058EC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000058F2 6100 BA5A                  		bsr.w	NemDec
000058F6 4EB9 0000 0000             		jsr	(Hud_Base).l
000058FC 31FC C800 C8FC             		ResetDMAQueue	
00005902 46FC 2300                  		enable_ints
00005906 7011                       		moveq	#palid_SSResult,d0
00005908 6100 CC0E                  		bsr.w	PalLoad2	; load results screen palette
0000590C 7000                       		moveq	#plcid_Main,d0
0000590E 6100 BE5C                  		bsr.w	NewPLC
00005912 7000                       		moveq	#plcid_SSResult,d0
00005914 6100 BE24                  		bsr.w	AddPLC		; load results screen patterns
00005918 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000591E 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00005924 3038 FE20                  		move.w	(v_rings).w,d0
00005928 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000592C 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
0000593A                            
0000593A 43F8 D000                  		lea	(v_objspace).w,a1
0000593E 7000                       		moveq	#0,d0
00005940 323C 07FF                  		move.w	#$7FF,d1
00005944                            	SS_EndClrObjRam:
00005944 22C0                       		move.l	d0,(a1)+
00005946 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000594A                            
0000594A 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
00005950                            
00005950                            SS_NormalExit:
00005950 6100 B95A                  		bsr.w	PauseGame
00005954 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
0000595A 6100 E214                  		bsr.w	WaitForVBla
0000595E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005964 4EB9 0000 0000             		jsr	(BuildSprites).l
0000596A 6100 BE3A                  		bsr.w	RunPLC
0000596E 4A78 FE02                  		tst.w	(f_restart).w
00005972 67DC                       		beq.s	SS_NormalExit
00005974 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005978 66D6                       		bne.s	SS_NormalExit
00005982 6100 C9D8                  		bsr.w	PaletteWhiteOut
00005986 4E75                       		rts	
00005988                            ; ===========================================================================
00005988                            
00005988                            SS_ToSegaScreen:
00005988 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
0000598E 4E75                       		rts
00005990                            
00005990 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
00005996 67F0                       		beq.s	SS_ToSegaScreen
00005998 4E75                       		rts
0000599A                            
0000599A                            ; ---------------------------------------------------------------------------
0000599A                            ; Special stage	background loading subroutine
0000599A                            ; ---------------------------------------------------------------------------
0000599A                            
0000599A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000599A                            
0000599A                            
0000599A                            SS_BGLoad:
0000599A 43F9 00FF 0000             		lea	($FF0000).l,a1
000059A0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000059A6 303C 4051                  		move.w	#$4051,d0
000059AA 6100 BF2C                  		bsr.w	EniDec
000059AE 263C 5000 0001             		move.l	#$50000001,d3
000059B4 45F9 00FF 0080             		lea	($FF0080).l,a2
000059BA 7E06                       		moveq	#6,d7
000059BC                            
000059BC                            loc_48BE:
000059BC 2003                       		move.l	d3,d0
000059BE 7C03                       		moveq	#3,d6
000059C0 7800                       		moveq	#0,d4
000059C2 0C47 0003                  		cmpi.w	#3,d7
000059C6 6400                       		bhs.s	loc_48CC
000059C8 7801                       		moveq	#1,d4
000059CA                            
000059CA                            loc_48CC:
000059CA 7A07                       		moveq	#7,d5
000059CC                            
000059CC                            loc_48CE:
000059CC 224A                       		movea.l	a2,a1
000059CE 0A04 0001                  		eori.b	#1,d4
000059D2 6600                       		bne.s	loc_48E2
000059D4 0C47 0006                  		cmpi.w	#6,d7
000059D8 6600                       		bne.s	loc_48F2
000059DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000059E0                            
000059E0                            loc_48E2:
000059E0 48E7 F800                  		movem.l	d0-d4,-(sp)
000059E4 7207                       		moveq	#7,d1
000059E6 7407                       		moveq	#7,d2
000059E8 6100 B93A                  		bsr.w	TilemapToVRAM
000059EC 4CDF 001F                  		movem.l	(sp)+,d0-d4
000059F0                            
000059F0                            loc_48F2:
000059F0 0680 0010 0000             		addi.l	#$100000,d0
000059F6 51CD FFD4                  		dbf	d5,loc_48CE
000059FA 0680 0380 0000             		addi.l	#$3800000,d0
00005A00 0A04 0001                  		eori.b	#1,d4
00005A04 51CE FFC4                  		dbf	d6,loc_48CC
00005A08 0683 1000 0000             		addi.l	#$10000000,d3
00005A0E 6A00                       		bpl.s	loc_491C
00005A10 4843                       		swap	d3
00005A12 0683 0000 C000             		addi.l	#$C000,d3
00005A18 4843                       		swap	d3
00005A1A                            
00005A1A                            loc_491C:
00005A1A D4FC 0080                  		adda.w	#$80,a2
00005A1E 51CF FF9C                  		dbf	d7,loc_48BE
00005A22 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A28 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005A2E 303C 4000                  		move.w	#$4000,d0
00005A32 6100 BEA4                  		bsr.w	EniDec
00005A36 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A3C 203C 4000 0003             		move.l	#$40000003,d0
00005A42 723F                       		moveq	#$3F,d1
00005A44 741F                       		moveq	#$1F,d2
00005A46 6100 B8DC                  		bsr.w	TilemapToVRAM
00005A4A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005A50 203C 5000 0003             		move.l	#$50000003,d0
00005A56 723F                       		moveq	#$3F,d1
00005A58 743F                       		moveq	#$3F,d2
00005A5A 6100 B8C8                  		bsr.w	TilemapToVRAM
00005A5E 4E75                       		rts	
00005A60                            ; End of function SS_BGLoad
00005A60                            
00005A60                            ; ---------------------------------------------------------------------------
00005A60                            ; Palette cycling routine - special stage
00005A60                            ; ---------------------------------------------------------------------------
00005A60                            
00005A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005A60                            
00005A60                            
00005A60                            PalCycle_SS:
00005A60 4A78 F63A                  		tst.w	(f_pause).w
00005A64 6600                       		bne.s	locret_49E6
00005A66 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005A6A 6A00                       		bpl.s	locret_49E6
00005A6C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005A72 3038 F79A                  		move.w	(v_palss_num).w,d0
00005A76 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005A7A 0240 001F                  		andi.w	#$1F,d0
00005A7E E548                       		lsl.w	#2,d0
00005A80 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00005A86 D0C0                       		adda.w	d0,a0
00005A88 1018                       		move.b	(a0)+,d0
00005A8A 6A00                       		bpl.s	loc_4992
00005A8C 303C 01FF                  		move.w	#$1FF,d0
00005A90                            
00005A90                            loc_4992:
00005A90 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005A94 7000                       		moveq	#0,d0
00005A96 1018                       		move.b	(a0)+,d0
00005A98 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005A9C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005AA2 43F1 0000                  		lea	(a1,d0.w),a1
00005AA6 303C 8200                  		move.w	#-$7E00,d0
00005AAA 1019                       		move.b	(a1)+,d0
00005AAC 3C80                       		move.w	d0,(a6)
00005AAE 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005AB2 303C 8400                  		move.w	#-$7C00,d0
00005AB6 1018                       		move.b	(a0)+,d0
00005AB8 3C80                       		move.w	d0,(a6)
00005ABA 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005AC4 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005ACC 7000                       		moveq	#0,d0
00005ACE 1018                       		move.b	(a0)+,d0
00005AD0 6B00                       		bmi.s	loc_49E8
00005AD2 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005AD8 D2C0                       		adda.w	d0,a1
00005ADA 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005ADE 24D9                       		move.l	(a1)+,(a2)+
00005AE0 24D9                       		move.l	(a1)+,(a2)+
00005AE2 24D9                       		move.l	(a1)+,(a2)+
00005AE4                            
00005AE4                            locret_49E6:
00005AE4 4E75                       		rts	
00005AE6                            ; ===========================================================================
00005AE6                            
00005AE6                            loc_49E8:
00005AE6 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005AEA 0C40 008A                  		cmpi.w	#$8A,d0
00005AEE 6500                       		blo.s	loc_49F4
00005AF0 5241                       		addq.w	#1,d1
00005AF2                            
00005AF2                            loc_49F4:
00005AF2 C2FC 002A                  		mulu.w	#$2A,d1
00005AF6 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005AFC D2C1                       		adda.w	d1,a1
00005AFE 0240 007F                  		andi.w	#$7F,d0
00005B02 0880 0000                  		bclr	#0,d0
00005B06 6700                       		beq.s	loc_4A18
00005B08 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005B0C 24D1                       		move.l	(a1),(a2)+
00005B0E 24E9 0004                  		move.l	4(a1),(a2)+
00005B12 24E9 0008                  		move.l	8(a1),(a2)+
00005B16                            
00005B16                            loc_4A18:
00005B16 D2FC 000C                  		adda.w	#$C,a1
00005B1A 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005B1E 0C40 000A                  		cmpi.w	#$A,d0
00005B22 6500                       		blo.s	loc_4A2E
00005B24 0440 000A                  		subi.w	#$A,d0
00005B28 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005B2C                            
00005B2C                            loc_4A2E:
00005B2C 3200                       		move.w	d0,d1
00005B2E D040                       		add.w	d0,d0
00005B30 D041                       		add.w	d1,d0
00005B32 D2C0                       		adda.w	d0,a1
00005B34 24D9                       		move.l	(a1)+,(a2)+
00005B36 34D9                       		move.w	(a1)+,(a2)+
00005B38 4E75                       		rts	
00005B3A                            ; End of function PalCycle_SS
00005B3A                            
00005B3A                            ; ===========================================================================
00005B3A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005B4A                            
00005B4A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005B5A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005B6A FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005B7A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005B8A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005B9A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005BAA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005BBA                            		even
00005BBA 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005BC8                            		even
00005BC8                            
00005BC8                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005C10                            		even
00005C10                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005CE2                            		even
00005CE2                            
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            ; Subroutine to	make the special stage background animated
00005CE2                            ; ---------------------------------------------------------------------------
00005CE2                            
00005CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005CE2                            
00005CE2                            
00005CE2                            SS_BGAnimate:
00005CE2 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005CE6 6600                       		bne.s	loc_4BF6
00005CE8 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005CEE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005CF4                            
00005CF4                            loc_4BF6:
00005CF4 0C40 0008                  		cmpi.w	#8,d0
00005CF8 6400                       		bhs.s	loc_4C4E
00005CFA 0C40 0006                  		cmpi.w	#6,d0
00005CFE 6600                       		bne.s	loc_4C10
00005D00 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005D04 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005D08 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005D0E                            
00005D0E                            loc_4C10:
00005D0E 7000                       		moveq	#0,d0
00005D10 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005D14 4440                       		neg.w	d0
00005D16 4840                       		swap	d0
00005D18 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005D1E 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D22 7609                       		moveq	#9,d3
00005D24                            
00005D24                            loc_4C26:
00005D24 302B 0002                  		move.w	2(a3),d0
00005D28 6100 DE78                  		bsr.w	CalcSine
00005D2C 7400                       		moveq	#0,d2
00005D2E 1419                       		move.b	(a1)+,d2
00005D30 C1C2                       		muls.w	d2,d0
00005D32 E080                       		asr.l	#8,d0
00005D34 36C0                       		move.w	d0,(a3)+
00005D36 1419                       		move.b	(a1)+,d2
00005D38 4882                       		ext.w	d2
00005D3A D55B                       		add.w	d2,(a3)+
00005D3C 51CB FFE6                  		dbf	d3,loc_4C26
00005D40 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005D44 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005D4A 6000                       		bra.s	loc_4C7E
00005D4C                            ; ===========================================================================
00005D4C                            
00005D4C                            loc_4C4E:
00005D4C 0C40 000C                  		cmpi.w	#$C,d0
00005D50 6600                       		bne.s	loc_4C74
00005D52 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005D56 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005D5A 243C 0001 8000             		move.l	#$18000,d2
00005D60 7206                       		moveq	#6,d1
00005D62                            
00005D62                            loc_4C64:
00005D62 2013                       		move.l	(a3),d0
00005D64 9082                       		sub.l	d2,d0
00005D66 26C0                       		move.l	d0,(a3)+
00005D68 0482 0000 2000             		subi.l	#$2000,d2
00005D6E 51C9 FFF2                  		dbf	d1,loc_4C64
00005D72                            
00005D72                            loc_4C74:
00005D72 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005D76 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005D7C                            
00005D7C                            loc_4C7E:
00005D7C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005D80 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005D84 4440                       		neg.w	d0
00005D86 4840                       		swap	d0
00005D88 7600                       		moveq	#0,d3
00005D8A 161A                       		move.b	(a2)+,d3
00005D8C 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005D90 4442                       		neg.w	d2
00005D92 0242 00FF                  		andi.w	#$FF,d2
00005D96 E54A                       		lsl.w	#2,d2
00005D98                            
00005D98                            loc_4C9A:
00005D98 301B                       		move.w	(a3)+,d0
00005D9A 544B                       		addq.w	#2,a3
00005D9C 7200                       		moveq	#0,d1
00005D9E 121A                       		move.b	(a2)+,d1
00005DA0 5341                       		subq.w	#1,d1
00005DA2                            
00005DA2                            loc_4CA4:
00005DA2 2380 2000                  		move.l	d0,(a1,d2.w)
00005DA6 5842                       		addq.w	#4,d2
00005DA8 0242 03FC                  		andi.w	#$3FC,d2
00005DAC 51C9 FFF4                  		dbf	d1,loc_4CA4
00005DB0 51CB FFE6                  		dbf	d3,loc_4C9A
00005DB4 4E75                       		rts	
00005DB6                            ; End of function SS_BGAnimate
00005DB6                            
00005DB6                            ; ===========================================================================
00005DB6 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005DC2                            		even
00005DC2 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005DCA                            		even
00005DCA 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005DDE                            		even
00005DDE                            
00005DDE                            ; ===========================================================================
00005DDE                            
00005DDE                            ; ---------------------------------------------------------------------------
00005DDE                            ; Continue screen
00005DDE                            ; ---------------------------------------------------------------------------
00005DDE                            
00005DDE                            GM_Continue:
00005DDE 6100 C452                  		bsr.w	PaletteFadeOut
00005DE2 46FC 2700                  		disable_ints
00005DE6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005DEA 0200 00BF                  		andi.b	#$BF,d0
00005DEE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DF4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005DFA 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005DFE 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005E02 6100 B3CC                  		bsr.w	ClearScreen
00005E06 31FC C800 C8FC             		ResetDMAQueue
00005E0C 43F8 D000                  		lea	(v_objspace).w,a1
00005E10 7000                       		moveq	#0,d0
00005E12 323C 07FF                  		move.w	#$7FF,d1
00005E16                            	Cont_ClrObjRam:
00005E16 22C0                       		move.l	d0,(a1)+
00005E18 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005E1C                            
00005E26 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005E2C 6100 B520                  		bsr.w	NemDec
00005E3A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005E40 6100 B50C                  		bsr.w	NemDec
00005E4E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005E54 6100 B4F8                  		bsr.w	NemDec
00005E58 720A                       		moveq	#10,d1
00005E5A 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005E60 7012                       		moveq	#palid_Continue,d0
00005E62 6100 C678                  		bsr.w	PalLoad1	; load continue	screen palette
00005E6E 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005E74 42B8 F700                  		clr.l	(v_screenposx).w
00005E78 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005E80 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005E86 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005E8C 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005E92 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005E98 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005E9E 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005EA4 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005EAA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005EB0 4EB9 0000 0000             		jsr	(BuildSprites).l
00005EB6 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005EBA 0000 0040                  		ori.b	#$40,d0
00005EBE 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005EC4 6100 C2C6                  		bsr.w	PaletteFadeIn
00005EC8                            
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            ; Continue screen main loop
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            
00005EC8                            Cont_MainLoop:
00005EC8 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005ECE 6100 DCA0                  		bsr.w	WaitForVBla
00005ED2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005ED8 6400                       		bhs.s	loc_4DF2
00005EDA 46FC 2700                  		disable_ints
00005EDE 3238 F614                  		move.w	(v_demolength).w,d1
00005EE2 82FC 003C                  		divu.w	#$3C,d1
00005EE6 0281 0000 000F             		andi.l	#$F,d1
00005EEC 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005EF2 46FC 2300                  		enable_ints
00005EF6                            
00005EF6                            loc_4DF2:
00005EF6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005EFC 4EB9 0000 0000             		jsr	(BuildSprites).l
00005F02 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005F08 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005F0A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005F10 64B6                       		bhs.s	Cont_MainLoop
00005F12 4A78 F614                  		tst.w	(v_demolength).w
00005F16 6600 FFB0                  		bne.w	Cont_MainLoop
00005F1A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005F20 4E75                       		rts	
00005F22                            ; ===========================================================================
00005F22                            
00005F22                            Cont_GotoLevel:
00005F22 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005F28 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005F2E 7000                       		moveq	#0,d0
00005F30 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005F34 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005F38 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005F3C 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005F40 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005F44 4E75                       		rts	
00005F46                            ; ===========================================================================
00005F46                            
00005F46                            		include	"_incObj\80 Continue Screen Elements.asm"
00005F46                            ; ---------------------------------------------------------------------------
00005F46                            ; Object 80 - Continue screen elements
00005F46                            ; ---------------------------------------------------------------------------
00005F46                            
00005F46                            ContScrItem:
00005F46 7000                       		moveq	#0,d0
00005F48 1028 0024                  		move.b	$24(a0),d0
00005F4C 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005F50 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005F54                            ; ===========================================================================
00005F54 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005F56 0000                       		dc.w CSI_Display-CSI_Index
00005F58 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005F5A 0000                       		dc.w CSI_ChkDel-CSI_Index
00005F5C                            ; ===========================================================================
00005F5C                            
00005F5C                            CSI_Main:	; Routine 0
00005F5C 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F60 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005F68 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005F6E 117C 0000 0001             		move.b	#0,obRender(a0)
00005F74 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005F7A 317C 0120 0008             		move.w	#$120,obX(a0)
00005F80 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005F86 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005F8C                            
00005F8C                            CSI_Display:	; Routine 2
00005F8C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F92                            ; ===========================================================================
00005F92                            
00005F92                            	CSI_MiniSonicPos:
00005F92 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005FA4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005FB0                            
00005FB0                            CSI_MakeMiniSonic:
00005FB0                            		; Routine 4
00005FB0 2248                       		movea.l	a0,a1
00005FB2 45F9 0000 5F92             		lea	(CSI_MiniSonicPos).l,a2
00005FB8 7200                       		moveq	#0,d1
00005FBA 1238 FE18                  		move.b	(v_continues).w,d1
00005FBE 5501                       		subq.b	#2,d1
00005FC0 6400                       		bcc.s	CSI_MoreThan1
00005FC2 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005FC8                            
00005FC8                            	CSI_MoreThan1:
00005FC8 7601                       		moveq	#1,d3
00005FCA 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005FCE 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005FD0                            
00005FD0 7600                       		moveq	#0,d3
00005FD2 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005FD4                            
00005FD4                            	CSI_FewerThan16:
00005FD4 1401                       		move.b	d1,d2
00005FD6 0202 0001                  		andi.b	#1,d2
00005FDA                            
00005FDA                            CSI_MiniSonicLoop:
00005FDA 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005FDE 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005FE2 4A02                       		tst.b	d2		; do you have an even number of continues?
00005FE4 6700                       		beq.s	CSI_Even	; if yes, branch
00005FE6 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005FEC                            
00005FEC                            	CSI_Even:
00005FEC 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005FF2 137C 0006 001A             		move.b	#6,obFrame(a1)
00005FF8 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005FFE 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00006006 337C 8551 0002             		move.w	#$8551,obGfx(a1)
0000600C 137C 0000 0001             		move.b	#0,obRender(a1)
00006012 43E9 0040                  		lea	$40(a1),a1
00006016 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
0000601A                            
0000601A 43E9 FFC0                  		lea	-$40(a1),a1
0000601E 1343 0028                  		move.b	d3,obSubtype(a1)
00006022                            
00006022                            CSI_ChkDel:	; Routine 6
00006022 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00006026 6700                       		beq.s	CSI_Animate	; if yes, branch
00006028 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
0000602E 6500                       		bcs.s	CSI_Animate	; if not, branch
00006030 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00006034 0200 0001                  		andi.b	#1,d0
00006038 6600                       		bne.s	CSI_Animate
0000603A 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
0000603E 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00006040 4E75                       		rts	
00006042                            
00006042                            CSI_Animate:
00006042 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00006046 0200 000F                  		andi.b	#$F,d0
0000604A 6600                       		bne.s	CSI_Display2
0000604C 0868 0000 001A             		bchg	#0,obFrame(a0)
00006052                            
00006052                            	CSI_Display2:
00006052 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006058                            ; ===========================================================================
00006058                            
00006058                            CSI_Delete:
00006058 4EF9 0000 0000             		jmp	(DeleteObject).l
00006058 4EF9 0000 0000             		jmp	(DeleteObject).l
0000605E                            		include	"_incObj\81 Continue Screen Sonic.asm"
0000605E                            ; ---------------------------------------------------------------------------
0000605E                            ; Object 81 - Sonic on the continue screen
0000605E                            ; ---------------------------------------------------------------------------
0000605E                            
0000605E                            ContSonic:
0000605E 7000                       		moveq	#0,d0
00006060 1028 0024                  		move.b	obRoutine(a0),d0
00006064 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00006068 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
0000606C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006072                            ; ===========================================================================
00006072 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00006074 0000                       		dc.w CSon_ChkLand-CSon_Index
00006076 0000                       		dc.w CSon_Animate-CSon_Index
00006078 0000                       		dc.w CSon_Run-CSon_Index
0000607A                            ; ===========================================================================
0000607A                            
0000607A                            CSon_Main:	; Routine 0
0000607A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000607E 317C 00A0 0008             		move.w	#$A0,obX(a0)
00006084 317C 00C0 000C             		move.w	#$C0,obY(a0)
0000608A 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006092 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006098 117C 0004 0001             		move.b	#4,obRender(a0)
0000609E 317C 0100 0018             		move.w	#$100,obPriority(a0)
000060A4 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
000060AA 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
000060B0                            
000060B0                            CSon_ChkLand:	; Routine 2
000060B0 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
000060B6 6600                       		bne.s	CSon_ShowFall	; if not, branch
000060B8                            
000060B8 5428 0024                  		addq.b	#2,obRoutine(a0)
000060BC 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
000060C0 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
000060C8 317C 8500 0002             		move.w	#$8500,obGfx(a0)
000060CE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000060D4 6000                       		bra.s	CSon_Animate
000060D6                            
000060D6                            CSon_ShowFall:
000060D6 4EB9 0000 0000             		jsr	(SpeedToPos).l
000060DC 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000060E2 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060E8                            ; ===========================================================================
000060E8                            
000060E8                            CSon_Animate:	; Routine 4
000060E8 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
000060EC 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
000060EE 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
000060F4 4EF9 0000 0000             		jmp	(AnimateSprite).l
000060FA                            
000060FA                            CSon_GetUp:
000060FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000060FE 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006106 317C 0780 0002             		move.w	#$780,obGfx(a0)
0000610C 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006112 4268 0020                  		clr.w	obInertia(a0)
00006116 5168 000C                  		subq.w	#8,obY(a0)
00006122                            
00006122                            CSon_Run:	; Routine 6
00006122 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00006128 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000612A 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006130 6000                       		bra.s	CSon_ShowRun
00006132                            
00006132                            CSon_AddInertia:
00006132 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
00006138                            
00006138                            CSon_ShowRun:
00006138 4EB9 0000 0000             		jsr	(SpeedToPos).l
0000613E 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006144 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006144 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000614A                            		include	"_anim\Continue Screen Sonic.asm"
0000614A                            ; ---------------------------------------------------------------------------
0000614A                            ; Animation script - Sonic on the continue screen
0000614A                            ; ---------------------------------------------------------------------------
0000614A 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
0000614C 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
00006156                            		even
00006156                            		even
00006156                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00006156                            ; --------------------------------------------------------------------------------
00006156                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006156                            ; --------------------------------------------------------------------------------
00006156                            
00006156                            SME_phED7:	
00006156 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
0000615A 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
0000615E 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
00006162 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
00006166 0B                         SME_phED7_10:	dc.b $B	
00006167 F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
0000616C F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
00006171 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
00006176 F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
0000617B F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
00006180 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
00006185 F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
0000618A F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
0000618F 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
00006194 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
00006199 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
0000619E 03                         SME_phED7_48:	dc.b 3	
0000619F 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
000061A4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061A9 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061AE 03                         SME_phED7_58:	dc.b 3	
000061AF 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
000061B4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061B9 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061BE 03                         SME_phED7_68:	dc.b 3	
000061BF 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
000061C4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
000061C9 F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
000061CE 02                         SME_phED7_78:	dc.b 2	
000061CF 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
000061D4 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
000061D9 01                         SME_phED7_83:	dc.b 1	
000061DA 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000061DF 01                         SME_phED7_89:	dc.b 1	
000061E0 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
000061E5 01                         SME_phED7_8F:	dc.b 1	
000061E6 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
000061EC 00                         		even
000061EC 00                         		even
000061EC                            
000061EC                            ; ===========================================================================
000061EC                            ; ---------------------------------------------------------------------------
000061EC                            ; Ending sequence in Green Hill	Zone
000061EC                            ; ---------------------------------------------------------------------------
000061EC                            
000061EC                            GM_Ending:
000061F4 6100 C03C                  		bsr.w	PaletteFadeOut
000061F8                            
000061F8 43F8 D000                  		lea	(v_objspace).w,a1
000061FC 7000                       		moveq	#0,d0
000061FE 323C 07FF                  		move.w	#$7FF,d1
00006202                            	End_ClrObjRam:
00006202 22C0                       		move.l	d0,(a1)+
00006204 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006208                            
00006208 43F8 F628                  		lea	($FFFFF628).w,a1
0000620C 7000                       		moveq	#0,d0
0000620E 323C 0015                  		move.w	#$15,d1
00006212                            	End_ClrRam1:
00006212 22C0                       		move.l	d0,(a1)+
00006214 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006218                            
00006218 43F8 F700                  		lea	(v_screenposx).w,a1
0000621C 7000                       		moveq	#0,d0
0000621E 323C 003F                  		move.w	#$3F,d1
00006222                            	End_ClrRam2:
00006222 22C0                       		move.l	d0,(a1)+
00006224 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006228                            
00006228 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000622C 7000                       		moveq	#0,d0
0000622E 323C 0047                  		move.w	#$47,d1
00006232                            	End_ClrRam3:
00006232 22C0                       		move.l	d0,(a1)+
00006234 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006238                            
00006238 46FC 2700                  		disable_ints
0000623C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006240 0200 00BF                  		andi.b	#$BF,d0
00006244 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000624A 6100 AF84                  		bsr.w	ClearScreen
0000624E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006254 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006258 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000625C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006260 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006264 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006268 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000626C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006270 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006276 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000627A 31FC 001E FE14             		move.w	#30,(v_air).w
00006280 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006286 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
0000628C 6700                       		beq.s	End_LoadData	; if yes, branch
0000628E 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
00006294                            
00006294                            End_LoadData:
00006294 7000                       		moveq	#plcid_Ending,d0
00006296 6100 B60E                  		bsr.w	QuickPLC	; load ending sequence patterns
0000629A 4EB9 0000 0000             		jsr	(Hud_Base).l
000062A0 6100 0000                  		bsr.w	LevelSizeLoad
000062A4 6100 0000                  		bsr.w	DeformLayers
000062A8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000062AE 6100 0000                  		bsr.w	LevelDataLoad
000062B2 6100 0000                  		bsr.w	LoadTilesFromStart
000062B6 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000062BE 46FC 2300                  		enable_ints
000062C2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000062C8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000062CC 6100 B788                  		bsr.w	KosDec
000062D0 4EB9 0000 0000             		jsr		LoadPlayerPal
000062D6 6100 C204                  		bsr.w	PalLoad1	; load Sonic's palette
000062E2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000062E8 6700                       		beq.s	End_LoadSonic	; if not, branch
000062EA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000062F0                            
000062F0                            End_LoadSonic:
000062F0 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000062F6 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
000062FC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00006302 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006308 31FC F600 D020             		move.w	#$F600,(v_player+obInertia).w ; set Sonic's speed
0000630E 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00006314 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000631A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006320 4EB9 0000 0000             		jsr	(BuildSprites).l
00006326 7000                       		moveq	#0,d0
00006328 31C0 FE20                  		move.w	d0,(v_rings).w
0000632C 21C0 FE22                  		move.l	d0,(v_time).w
00006330 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006334 11C0 FE2C                  		move.b	d0,(v_shield).w
00006338 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000633C 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006340 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006344 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006348 31C0 FE02                  		move.w	d0,(f_restart).w
0000634C 31C0 FE04                  		move.w	d0,(v_framecount).w
00006350 6100 EEBC                  		bsr.w	OscillateNumInit
00006354 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000635A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006360 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006366 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000636C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006372 6100 D7FC                  		bsr.w	WaitForVBla
00006376 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000637A 0000 0040                  		ori.b	#$40,d0
0000637E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006384 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000638A 6100 BE00                  		bsr.w	PaletteFadeIn
0000638E                            
0000638E                            ; ---------------------------------------------------------------------------
0000638E                            ; Main ending sequence loop
0000638E                            ; ---------------------------------------------------------------------------
0000638E                            
0000638E                            End_MainLoop:
0000638E 6100 AF1C                  		bsr.w	PauseGame
00006392 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006398 6100 D7D6                  		bsr.w	WaitForVBla
0000639C 5278 FE04                  		addq.w	#1,(v_framecount).w
000063A0 6100 0000                  		bsr.w	End_MoveSonic
000063A4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000063AA 6100 0000                  		bsr.w	DeformLayers
000063AE 4EB9 0000 0000             		jsr	(BuildSprites).l
000063B4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000063BA 6100 B962                  		bsr.w	PaletteCycle
000063BE 6100 EEA4                  		bsr.w	OscillateNumDo
000063C2 6100 EF30                  		bsr.w	SynchroAnimate
000063C6 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000063CC 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000063CE                            
000063CE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000063D4 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000063DA 4E75                       		rts	
000063DC                            ; ===========================================================================
000063DC                            
000063DC                            End_ChkEmerald:
000063DC 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000063E0 6700 FFAC                  		beq.w	End_MainLoop	; if not, branch
000063E4                            
000063E4 4278 FE02                  		clr.w	(f_restart).w
000063E8 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000063EE 4278 F794                  		clr.w	(v_palchgspeed).w
000063F2                            
000063F2                            	End_AllEmlds:
000063F2 6100 AEB8                  		bsr.w	PauseGame
000063F6 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000063FC 6100 D772                  		bsr.w	WaitForVBla
00006400 5278 FE04                  		addq.w	#1,(v_framecount).w
00006404 6100 0000                  		bsr.w	End_MoveSonic
00006408 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000640E 6100 0000                  		bsr.w	DeformLayers
00006412 4EB9 0000 0000             		jsr	(BuildSprites).l
00006418 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000641E 6100 EE44                  		bsr.w	OscillateNumDo
00006422 6100 EED0                  		bsr.w	SynchroAnimate
00006426 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000642A 6A00                       		bpl.s	End_SlowFade
0000642C 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00006432 6100 BF48                  		bsr.w	WhiteOut_ToWhite
00006436                            
00006436                            	End_SlowFade:
00006436 4A78 FE02                  		tst.w	(f_restart).w
0000643A 6700 FFB6                  		beq.w	End_AllEmlds
0000643E 4278 FE02                  		clr.w	(f_restart).w
00006442 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006448 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000644E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006454 47F8 F700                  		lea	(v_screenposx).w,a3
00006458 49F8 A400                  		lea	(v_lvllayout).w,a4
0000645C 343C 4000                  		move.w	#$4000,d2
00006460 6100 0000                  		bsr.w	DrawChunks
00006464 7015                       		moveq	#palid_Ending,d0
00006466 6100 C074                  		bsr.w	PalLoad1	; load ending palette
0000646A 6100 BE44                  		bsr.w	PaletteWhiteIn
0000646E 6000 FF1E                  		bra.w	End_MainLoop
00006472                            
00006472                            ; ---------------------------------------------------------------------------
00006472                            ; Subroutine controlling Sonic on the ending sequence
00006472                            ; ---------------------------------------------------------------------------
00006472                            
00006472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006472                            
00006472                            
00006472                            End_MoveSonic:
00006472 1038 F7D7                  		move.b	(v_sonicend).w,d0
00006476 6600                       		bne.s	End_MoveSon2
00006478 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
0000647E 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006480                            
00006480 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006484 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
0000648A 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
00006490 4E75                       		rts	
00006492                            ; ===========================================================================
00006492                            
00006492                            End_MoveSon2:
00006492 5500                       		subq.b	#2,d0
00006494 6600                       		bne.s	End_MoveSon3
00006496 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
0000649C 6500                       		blo.s	End_MoveSonExit	; if not, branch
0000649E                            
0000649E 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000064A2 7000                       		moveq	#0,d0
000064A4 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000064A8 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000064AC 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000064B0 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000064B6 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000064BC 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000064C2 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000064C8 4E75                       		rts	
000064CA                            ; ===========================================================================
000064CA                            
000064CA                            End_MoveSon3:
000064CA 5500                       		subq.b	#2,d0
000064CC 6600                       		bne.s	End_MoveSonExit
000064CE 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000064D2 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000064D8 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000064DE 4278 D024                  		clr.w	(v_player+obRoutine).w
000064E2                            
000064E2                            End_MoveSonExit:
000064E2 4E75                       		rts	
000064E4                            ; End of function End_MoveSonic
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            ; Object 87 - Sonic on ending sequence
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            
000064E4                            EndSonic:
000064E4 7000                       		moveq	#0,d0
000064E6 1028 0025                  		move.b	ob2ndRout(a0),d0
000064EA 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
000064EE 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
000064F2 4EF9 0000 0000             		jmp	(DisplaySprite).l
000064F8                            ; ===========================================================================
000064F8 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
000064FC 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006500 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006504 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006508 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
0000650C                            
0000650C =00000030                  eson_time:	equ $30	; time to wait between events
0000650C                            ; ===========================================================================
0000650C                            
0000650C                            ESon_Main:	; Routine 0
0000650C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006512 6700                       		beq.s	ESon_Main2	; if yes, branch
00006514 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
0000651A 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006520 4E75                       		rts	
00006522                            ; ===========================================================================
00006522                            
00006522                            ESon_Main2:
00006522 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006526 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
0000652E 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006534 117C 0004 0001             		move.b	#4,obRender(a0)
0000653A 4228 0022                  		clr.b	obStatus(a0)
0000653E 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006544 117C 0000 001A             		move.b	#0,obFrame(a0)
0000654A 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006550                            
00006550                            ESon_MakeEmeralds:
00006550                            		; Routine 2
00006550 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
00006554 6600                       		bne.s	ESon_Wait
00006556 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000655A 317C 0001 001C             		move.w	#1,obAnim(a0)
00006560 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
00006566                            
00006566                            	ESon_Wait:
00006566 4E75                       		rts	
00006568                            ; ===========================================================================
00006568                            
00006568                            Obj87_LookUp:	; Routine 6
00006568 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006570 6600                       		bne.s	locret_5480
00006572 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006578 317C 005A 0030             		move.w	#90,eson_time(a0)
0000657E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006582                            
00006582                            locret_5480:
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            Obj87_ClrObjRam:
00006584                            		; Routine 8
00006584 5368 0030                  		subq.w	#1,eson_time(a0)
00006588 6600                       		bne.s	ESon_Wait2
0000658A 43F8 D400                  		lea	(v_objspace+$400).w,a1
0000658E 323C 00FF                  		move.w	#$FF,d1
00006592                            
00006592                            Obj87_ClrLoop:
00006592 4299                       		clr.l	(a1)+
00006594 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006598 31FC 0001 FE02             		move.w	#1,(f_restart).w
0000659E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065A2 117C 0001 001C             		move.b	#1,obAnim(a0)
000065A8 317C 003C 0030             		move.w	#60,eson_time(a0)
000065AE                            
000065AE                            ESon_Wait2:
000065AE 4E75                       		rts	
000065B0                            ; ===========================================================================
000065B0                            
000065B0                            Obj87_MakeLogo:	; Routine $C
000065B0 5368 0030                  		subq.w	#1,eson_time(a0)
000065B4 6600                       		bne.s	ESon_Wait3
000065B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065BA 317C 00B4 0030             		move.w	#180,eson_time(a0)
000065C0 117C 0002 001C             		move.b	#2,obAnim(a0)
000065C6 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000065CC                            
000065CC                            ESon_Wait3:
000065CC 4E75                       		rts	
000065CE                            ; ===========================================================================
000065CE                            
000065CE                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000065CE 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000065D4 4EF9 0000 0000             		jmp	(AnimateSprite).l
000065DA                            ; ===========================================================================
000065DA                            
000065DA                            Obj87_Leap:	; Routine $10
000065DA 5368 0030                  		subq.w	#1,eson_time(a0)
000065DE 6600                       		bne.s	ESon_Wait4
000065E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000065E4 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000065EC 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000065F2 117C 0004 0001             		move.b	#4,obRender(a0)
000065F8 4228 0022                  		clr.b	obStatus(a0)
000065FC 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006602 117C 0005 001A             		move.b	#5,obFrame(a0)
00006608 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
0000660E 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006614 60B8                       		bra.s	Obj87_Animate
00006616                            ; ===========================================================================
00006616                            
00006616                            ESon_Wait4:
00006616 4E75                       		rts	
00006616 4E75                       		rts	
00006618                            		include "_anim\Ending Sequence Sonic.asm"
00006618                            ; ---------------------------------------------------------------------------
00006618                            ; Animation script - Sonic on the ending sequence
00006618                            ; ---------------------------------------------------------------------------
00006618 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
0000661A 0000                       		dc.w byte_552A-AniScript_ESon
0000661C 0000                       		dc.w byte_5534-AniScript_ESon
0000661E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000662C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006636 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000663E                            		even
0000663E                            		even
0000663E                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            ; Object 88 - chaos emeralds on	the ending sequence
0000663E                            ; ---------------------------------------------------------------------------
0000663E                            
0000663E                            EndChaos:
0000663E 7000                       		moveq	#0,d0
00006640 1028 0024                  		move.b	obRoutine(a0),d0
00006644 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006648 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
0000664C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006652                            ; ===========================================================================
00006652 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
00006654 0000                       		dc.w ECha_Move-ECha_Index
00006656                            
00006656 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
00006656 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
00006656 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
00006656 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
00006656                            ; ===========================================================================
00006656                            
00006656                            ECha_Main:	; Routine 0
00006656 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
0000665C 6700                       		beq.s	ECha_CreateEms
0000665E 588F                       		addq.l	#4,sp
00006660 4E75                       		rts	
00006662                            ; ===========================================================================
00006662                            
00006662                            ECha_CreateEms:
00006662 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006668 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
0000666E 2248                       		movea.l	a0,a1
00006670 7600                       		moveq	#0,d3
00006672 7401                       		moveq	#1,d2
00006674 7205                       		moveq	#5,d1
00006676                            
00006676                            	ECha_LoadLoop:
00006676 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
0000667A 5429 0024                  		addq.b	#2,obRoutine(a1)
0000667E 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006686 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
0000668C 137C 0004 0001             		move.b	#4,obRender(a1)
00006692 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006698 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
0000669E 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000066A4 1342 001C                  		move.b	d2,obAnim(a1)
000066A8 1342 001A                  		move.b	d2,obFrame(a1)
000066AC 5202                       		addq.b	#1,d2
000066AE 1343 0026                  		move.b	d3,obAngle(a1)
000066B2 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000066B6 43E9 0040                  		lea	$40(a1),a1
000066BA 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000066BE                            
000066BE                            ECha_Move:	; Routine 2
000066BE 3028 003E                  		move.w	echa_angle(a0),d0
000066C2 D168 0026                  		add.w	d0,obAngle(a0)
000066C6 1028 0026                  		move.b	obAngle(a0),d0
000066CA 4EB9 0000 3BA2             		jsr	(CalcSine).l
000066D0 7800                       		moveq	#0,d4
000066D2 1828 003C                  		move.b	echa_radius(a0),d4
000066D6 C3C4                       		muls.w	d4,d1
000066D8 E081                       		asr.l	#8,d1
000066DA C1C4                       		muls.w	d4,d0
000066DC E080                       		asr.l	#8,d0
000066DE D268 0038                  		add.w	echa_origX(a0),d1
000066E2 D068 003A                  		add.w	echa_origY(a0),d0
000066E6 3141 0008                  		move.w	d1,obX(a0)
000066EA 3140 000C                  		move.w	d0,obY(a0)
000066EE                            
000066EE                            	ECha_Expand:
000066EE 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
000066F4 6700                       		beq.s	ECha_Rotate
000066F6 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
000066FC                            
000066FC                            	ECha_Rotate:
000066FC 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006702 6700                       		beq.s	ECha_Rise
00006704 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
0000670A                            
0000670A                            	ECha_Rise:
0000670A 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006710 6700                       		beq.s	ECha_End
00006712 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
00006716                            
00006716                            ECha_End:
00006716 4E75                       		rts	
00006716 4E75                       		rts	
00006718                            		include	"_incObj\89 Ending Sequence STH.asm"
00006718                            ; ---------------------------------------------------------------------------
00006718                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006718                            ; ---------------------------------------------------------------------------
00006718                            
00006718                            EndSTH:
00006718 7000                       		moveq	#0,d0
0000671A 1028 0024                  		move.b	$24(a0),d0
0000671E 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
00006722 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
00006726 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000672C                            ; ===========================================================================
0000672C 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
0000672E 0000                       		dc.w ESth_Move-ESth_Index
00006730 0000                       		dc.w ESth_GotoCredits-ESth_Index
00006732                            
00006732 =00000030                  esth_time:	equ $30		; time until exit
00006732                            ; ===========================================================================
00006732                            
00006732                            ESth_Main:	; Routine 0
00006732 5428 0024                  		addq.b	#2,obRoutine(a0)
00006736 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
0000673C 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
00006742 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
0000674A 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006750 117C 0000 0001             		move.b	#0,obRender(a0)
00006756 317C 0000 0018             		move.w	#0,obPriority(a0)
0000675C                            
0000675C                            ESth_Move:	; Routine 2
0000675C 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
00006762 6700                       		beq.s	ESth_Delay	; if yes, branch
00006764 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
0000676A 4E75                       		rts
0000676C                            
0000676C                            ESth_Delay:
0000676C 5428 0024                  		addq.b	#2,obRoutine(a0)
00006770 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
00006776                            
00006776                            ESth_GotoCredits:
00006776                            		; Routine 4
00006776 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
0000677A 6A00                       		bpl.s	ESth_Wait
0000677C 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006782                            
00006782                            	ESth_Wait:
00006782 4E75                       		rts
00006784                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006784                            ; --------------------------------------------------------------------------------
00006784                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006784                            ; --------------------------------------------------------------------------------
00006784                            
00006784                            SME_6jV7R:	
00006784 0000 0000                  		dc.w SME_6jV7R_10-SME_6jV7R, SME_6jV7R_1B-SME_6jV7R	
00006788 0000 0000                  		dc.w SME_6jV7R_2B-SME_6jV7R, SME_6jV7R_36-SME_6jV7R	
0000678C 0000 0000                  		dc.w SME_6jV7R_4B-SME_6jV7R, SME_6jV7R_60-SME_6jV7R	
00006790 0000 0000                  		dc.w SME_6jV7R_70-SME_6jV7R, SME_6jV7R_94-SME_6jV7R	
00006794 02                         SME_6jV7R_10:	dc.b 2	
00006795 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
0000679A 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
0000679F 03                         SME_6jV7R_1B:	dc.b 3	
000067A0 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0	
000067A5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	
000067AA 0C0C 000C F0               		dc.b $C, $C, 0, $C, $F0	
000067AF 02                         SME_6jV7R_2B:	dc.b 2	
000067B0 EC09 0018 F8               		dc.b $EC, 9, 0, $18, $F8	
000067B5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0	
000067BA 04                         SME_6jV7R_36:	dc.b 4	
000067BB F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000067C0 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000067C5 E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000067CA EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000067CF 04                         SME_6jV7R_4B:	dc.b 4	
000067D0 F40B 002A F8               		dc.b $F4, $B, 0, $2A, $F8	
000067D5 EC08 0036 F8               		dc.b $EC, 8, 0, $36, $F8	
000067DA E404 0039 00               		dc.b $E4, 4, 0, $39, 0	
000067DF EC02 003B 10               		dc.b $EC, 2, 0, $3B, $10	
000067E4 03                         SME_6jV7R_60:	dc.b 3	
000067E5 EC06 004C F0               		dc.b $EC, 6, 0, $4C, $F0	
000067EA EC06 084C 00               		dc.b $EC, 6, 8, $4C, 0	
000067EF 040D 0052 F0               		dc.b 4, $D, 0, $52, $F0	
000067F4 07                         SME_6jV7R_70:	dc.b 7	
000067F5 B20C 005A F8               		dc.b $B2, $C, 0, $5A, $F8	
000067FA BA0F 005E F0               		dc.b $BA, $F, 0, $5E, $F0	
000067FF BA05 006E 10               		dc.b $BA, 5, 0, $6E, $10	
00006804 CA02 0072 10               		dc.b $CA, 2, 0, $72, $10	
00006809 DA0C 0075 F0               		dc.b $DA, $C, 0, $75, $F0	
0000680E E208 0079 F8               		dc.b $E2, 8, 0, $79, $F8	
00006813 EA05 007C F8               		dc.b $EA, 5, 0, $7C, $F8	
00006818 18                         SME_6jV7R_94:	dc.b $18	
00006819 800F 0080 F8               		dc.b $80, $F, 0, $80, $F8	
0000681E 900B 0090 E0               		dc.b $90, $B, 0, $90, $E0	
00006823 900B 009C 18               		dc.b $90, $B, 0, $9C, $18	
00006828 980B 00A8 30               		dc.b $98, $B, 0, $A8, $30	
0000682D A00F 00B4 58               		dc.b $A0, $F, 0, $B4, $58	
00006832 8800 00C4 F0               		dc.b $88, 0, 0, $C4, $F0	
00006837 8005 00C5 18               		dc.b $80, 5, 0, $C5, $18	
0000683C A00F 00C9 F8               		dc.b $A0, $F, 0, $C9, $F8	
00006841 B00B 00D9 E0               		dc.b $B0, $B, 0, $D9, $E0	
00006846 B80F 00E5 38               		dc.b $B8, $F, 0, $E5, $38	
0000684B A805 00F5 48               		dc.b $A8, 5, 0, $F5, $48	
00006850 C002 00F9 58               		dc.b $C0, 2, 0, $F9, $58	
00006855 C00F 00FC F8               		dc.b $C0, $F, 0, $FC, $F8	
0000685A B80F 010C 18               		dc.b $B8, $F, 1, $C, $18	
0000685F B008 011C 18               		dc.b $B0, 8, 1, $1C, $18	
00006864 D80D 011F 30               		dc.b $D8, $D, 1, $1F, $30	
00006869 D808 0127 18               		dc.b $D8, 8, 1, $27, $18	
0000686E D80F 012A D8               		dc.b $D8, $F, 1, $2A, $D8	
00006873 E00D 013A F8               		dc.b $E0, $D, 1, $3A, $F8	
00006878 E000 0142 28               		dc.b $E0, 0, 1, $42, $28	
0000687D D004 0143 E0               		dc.b $D0, 4, 1, $43, $E0	
00006882 E805 0145 C8               		dc.b $E8, 5, 1, $45, $C8	
00006887 F80C 0149 C8               		dc.b $F8, $C, 1, $49, $C8	
0000688C F006 014D F8               		dc.b $F0, 6, 1, $4D, $F8	
00006892 00                         		even
00006892 00                         		even
00006892                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006892                            ; --------------------------------------------------------------------------------
00006892                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006892                            ; --------------------------------------------------------------------------------
00006892                            
00006892                            SME_0ZTmS:	
00006892 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006896 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000689A 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
0000689E 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000068A0 01                         SME_0ZTmS_E:	dc.b 1	
000068A1 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000068A6 01                         SME_0ZTmS_14:	dc.b 1	
000068A7 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000068AC 01                         SME_0ZTmS_1A:	dc.b 1	
000068AD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000068B2 01                         SME_0ZTmS_20:	dc.b 1	
000068B3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000068B8 01                         SME_0ZTmS_26:	dc.b 1	
000068B9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000068BE 01                         SME_0ZTmS_2C:	dc.b 1	
000068BF F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000068C4 01                         SME_0ZTmS_32:	dc.b 1	
000068C5 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000068CA                            		even
000068CA                            		even
000068CA                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000068CA                            ; --------------------------------------------------------------------------------
000068CA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000068CA                            ; --------------------------------------------------------------------------------
000068CA                            
000068CA                            SME_WuUDZ:	
000068CA 0000                       		dc.w SME_WuUDZ_2-SME_WuUDZ	
000068CC 03                         SME_WuUDZ_2:	dc.b 3	
000068CD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0	
000068D2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0	
000068D7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10	
000068DC                            		even
000068DC                            		even
000068DC                            
000068DC                            ; ===========================================================================
000068DC                            ; ---------------------------------------------------------------------------
000068DC                            ; Credits ending sequence
000068DC                            ; ---------------------------------------------------------------------------
000068DC                            
000068DC                            GM_Credits:
000068DC                            		
000068DC 6100 AEBA                  		bsr.w	ClearPLC
000068E0 6100 B950                  		bsr.w	PaletteFadeOut
000068E4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000068EA 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000068EE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000068F2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000068F6 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000068FA 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
000068FE 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006902 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006906 4238 F64E                  		clr.b	(f_wtr_state).w
0000690A 6100 A8C4                  		bsr.w	ClearScreen
0000690E                            
0000690E 43F8 D000                  		lea	(v_objspace).w,a1
00006912 7000                       		moveq	#0,d0
00006914 323C 07FF                  		move.w	#$7FF,d1
00006918                            	TryAg_ClrObjRam:
00006918 22C0                       		move.l	d0,(a1)+
0000691A 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000691E                            
0000691E 7000                       		moveq	#plcid_TryAgain,d0
00006920 6100 AF84                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006924                            
00006924 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006928 7000                       		moveq	#0,d0
0000692A 323C 001F                  		move.w	#$1F,d1
0000692E                            	TryAg_ClrPal:
0000692E 22C0                       		move.l	d0,(a1)+
00006930 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006934                            
00006934 7015                       		moveq	#palid_Ending,d0
00006936 6100 BBA4                  		bsr.w	PalLoad1	; load ending palette
0000693A 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
0000693E 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006944 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000694A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006950 31FC 0B40 F614             		move.w	#2880,(v_demolength).w ; show screen for 48 seconds
00006956 6100 B834                  		bsr.w	PaletteFadeIn
0000695A                            
0000695A                            ; ---------------------------------------------------------------------------
0000695A                            ; "TRY AGAIN" and "END"	screen main loop
0000695A                            ; ---------------------------------------------------------------------------
0000695A                            TryAg_MainLoop:
0000695A 6100 A950                  		bsr.w	PauseGame
0000695E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006964 6100 D20A                  		bsr.w	WaitForVBla
00006968 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000696E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006974 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000697A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000697C 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006980 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006982 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
00006988 67D0                       		beq.s	TryAg_MainLoop
0000698A                            
0000698A                            TryAg_Exit:
0000698A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006990 4E75                       		rts	
00006992                            
00006992                            ; ===========================================================================
00006992                            
00006992                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006992                            ; ---------------------------------------------------------------------------
00006992                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006992                            ; ---------------------------------------------------------------------------
00006992                            
00006992                            EndEggman:
00006992 7000                       		moveq	#0,d0
00006994 1028 0024                  		move.b	obRoutine(a0),d0
00006998 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
0000699C 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000069A0 4EF9 0000 0000             		jmp	(DisplaySprite).l
000069A6                            ; ===========================================================================
000069A6 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000069A8 0000                       		dc.w EEgg_Animate-EEgg_Index
000069AA 0000                       		dc.w EEgg_Juggle-EEgg_Index
000069AC 0000                       		dc.w EEgg_Wait-EEgg_Index
000069AE                            
000069AE =00000030                  eegg_time:	equ $30		; time between juggle motions
000069AE                            ; ===========================================================================
000069AE                            
000069AE                            EEgg_Main:	; Routine 0
000069AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000069B2 317C 0120 0008             		move.w	#$120,obX(a0)
000069B8 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000069BE 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000069C6 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000069CC 117C 0000 0001             		move.b	#0,obRender(a0)
000069D2 317C 0100 0018             		move.w	#$100,obPriority(a0)
000069D8 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000069DE 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000069E4 6700                       		beq.s	EEgg_Animate	; if yes, branch
000069E6                            
000069E6 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000069EC 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000069F2 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000069F8 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
000069FE                            
000069FE                            EEgg_Animate:	; Routine 2
000069FE 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006A04 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006A0A                            ; ===========================================================================
00006A0A                            
00006A0A                            EEgg_Juggle:	; Routine 4
00006A0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00006A0E 7002                       		moveq	#2,d0
00006A10 0828 0000 001C             		btst	#0,obAnim(a0)
00006A16 6700                       		beq.s	@noflip
00006A18 4440                       		neg.w	d0
00006A1A                            
00006A1A                            	@noflip:
00006A1A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006A1E 7205                       		moveq	#5,d1
00006A20                            
00006A20                            @emeraldloop:
00006A20 1340 003E                  		move.b	d0,$3E(a1)
00006A24 3400                       		move.w	d0,d2
00006A26 E742                       		asl.w	#3,d2
00006A28 D529 0026                  		add.b	d2,obAngle(a1)
00006A2C 43E9 0040                  		lea	$40(a1),a1
00006A30 51C9 FFEE                  		dbf	d1,@emeraldloop
00006A34 5228 001A                  		addq.b	#1,obFrame(a0)
00006A38 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006A3E                            
00006A3E                            EEgg_Wait:	; Routine 6
00006A3E 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006A42 6A00                       		bpl.s	@nochg		; branch if time remains
00006A44 0868 0000 001C             		bchg	#0,obAnim(a0)
00006A4A 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006A50                            
00006A50                            	@nochg:
00006A50 4E75                       		rts	
00006A50 4E75                       		rts	
00006A52                            		include "_anim\Try Again & End Eggman.asm"
00006A52                            ; ---------------------------------------------------------------------------
00006A52                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006A52                            ; ---------------------------------------------------------------------------
00006A52 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006A54 0000                       		dc.w @tryagain2-Ani_EEgg
00006A56 0000                       		dc.w @end-Ani_EEgg
00006A58 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006A5C 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006A60 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006A72                            		even
00006A72                            		even
00006A72                            		include	"_incObj\8C Try Again Emeralds.asm"
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            TryChaos:
00006A72 7000                       		moveq	#0,d0
00006A74 1028 0024                  		move.b	obRoutine(a0),d0
00006A78 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006A7C 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006A80 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006A86                            ; ===========================================================================
00006A86 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00006A88 0000                       		dc.w TCha_Move-TCha_Index
00006A8A                            ; ===========================================================================
00006A8A                            
00006A8A                            TCha_Main:	; Routine 0
00006A8A 2248                       		movea.l	a0,a1
00006A8C 7400                       		moveq	#0,d2
00006A8E 7600                       		moveq	#0,d3
00006A90 7205                       		moveq	#5,d1
00006A92 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006A96                            
00006A96                            @makeemerald:
00006A96 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006A9A 5429 0024                  		addq.b	#2,obRoutine(a1)
00006A9E 237C 0000 6892 0004        		move.l	#Map_ECha,obMap(a1)
00006AA6 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006AAC 137C 0000 0001             		move.b	#0,obRender(a1)
00006AB2 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006AB8 337C 0104 0008             		move.w	#$104,obX(a1)
00006ABE 337C 0120 0038             		move.w	#$120,$38(a1)
00006AC4 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006ACA 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006AD0 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006AD6 47F8 FE58                  		lea	(v_emldlist).w,a3
00006ADA                            
00006ADA                            	@chkemerald:
00006ADA 7000                       		moveq	#0,d0
00006ADC 1038 FE57                  		move.b	(v_emeralds).w,d0
00006AE0 5340                       		subq.w	#1,d0
00006AE2 6500                       		bcs.s	@loc_5B42
00006AE4                            
00006AE4                            	@chkloop:
00006AE4 B433 0000                  		cmp.b	(a3,d0.w),d2
00006AE8 6600                       		bne.s	@notgot
00006AEA 5202                       		addq.b	#1,d2
00006AEC 60EC                       		bra.s	@chkemerald
00006AEE                            ; ===========================================================================
00006AEE                            
00006AEE                            	@notgot:
00006AEE 51C8 FFF4                  		dbf	d0,@chkloop
00006AF2                            
00006AF2                            @loc_5B42:
00006AF2 1342 001A                  		move.b	d2,obFrame(a1)
00006AF6 5229 001A                  		addq.b	#1,obFrame(a1)
00006AFA 5202                       		addq.b	#1,d2
00006AFC 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006B02 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006B06 1343 001F                  		move.b	d3,obDelayAni(a1)
00006B0A 0643 000A                  		addi.w	#10,d3
00006B0E 43E9 0040                  		lea	$40(a1),a1
00006B12 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006B16                            
00006B16                            TCha_Move:	; Routine 2
00006B16 4A68 003E                  		tst.w	$3E(a0)
00006B1A 6700                       		beq.s	locret_5BBA
00006B1C 4A28 001E                  		tst.b	obTimeFrame(a0)
00006B20 6700                       		beq.s	loc_5B78
00006B22 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006B26 6600                       		bne.s	loc_5B80
00006B28                            
00006B28                            loc_5B78:
00006B28 3028 003E                  		move.w	$3E(a0),d0
00006B2C D168 0026                  		add.w	d0,obAngle(a0)
00006B30                            
00006B30                            loc_5B80:
00006B30 1028 0026                  		move.b	obAngle(a0),d0
00006B34 6700                       		beq.s	loc_5B8C
00006B36 0C00 0080                  		cmpi.b	#$80,d0
00006B3A 6600                       		bne.s	loc_5B96
00006B3C                            
00006B3C                            loc_5B8C:
00006B3C 4268 003E                  		clr.w	$3E(a0)
00006B40 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006B46                            
00006B46                            loc_5B96:
00006B46 4EB9 0000 3BA2             		jsr	(CalcSine).l
00006B4C 7800                       		moveq	#0,d4
00006B4E 1828 003C                  		move.b	$3C(a0),d4
00006B52 C3C4                       		muls.w	d4,d1
00006B54 E081                       		asr.l	#8,d1
00006B56 C1C4                       		muls.w	d4,d0
00006B58 E080                       		asr.l	#8,d0
00006B5A D268 0038                  		add.w	$38(a0),d1
00006B5E D068 003A                  		add.w	$3A(a0),d0
00006B62 3141 0008                  		move.w	d1,obX(a0)
00006B66 3140 000A                  		move.w	d0,obScreenY(a0)
00006B6A                            
00006B6A                            locret_5BBA:
00006B6A 4E75                       		rts	
00006B6A 4E75                       		rts	
00006B6C                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006B6C                            ; ---------------------------------------------------------------------------
00006B6C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006B6C                            ; ---------------------------------------------------------------------------
00006B6C                            Map_EEgg_internal:
00006B6C 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006B6E 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006B70 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006B72 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006B74 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006B76 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006B78 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006B7A 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006B7C 08                         M_EEgg_Try1:	dc.b 8
00006B7D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006B82 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006B87 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006B8C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006B91 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006B96 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006B9B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BA0 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BA5 08                         M_EEgg_Try2:	dc.b 8
00006BA6 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006BAB F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006BB0 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006BB5 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006BBA 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006BBF 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006BC4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BC9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BCE 08                         M_EEgg_Try3:	dc.b 8
00006BCF E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006BD4 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006BD9 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006BDE F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006BE3 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006BE8 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006BED 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006BF2 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006BF7 08                         M_EEgg_Try4:	dc.b 8
00006BF8 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006BFD F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006C02 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006C07 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006C0C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006C11 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006C16 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006C1B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006C20 0C                         M_EEgg_End1:	dc.b $C
00006C21 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006C26 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006C2B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006C30 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006C35 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006C3A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006C3F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006C44 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006C49 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006C4E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006C53 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C58 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C5D 0A                         M_EEgg_End2:	dc.b $A
00006C5E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006C63 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006C68 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006C6D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006C72 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006C77 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006C7C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006C81 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006C86 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006C8B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006C90 0A                         M_EEgg_End3:	dc.b $A
00006C91 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006C96 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006C9B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006CA0 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006CA5 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006CAA EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006CAF 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006CB4 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006CB9 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006CBE 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006CC3 0C                         M_EEgg_End4:	dc.b $C
00006CC4 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006CC9 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006CCE 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006CD3 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006CD8 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006CDD FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006CE2 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006CE7 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006CEC 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006CF1 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006CF6 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006CFB 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006D00                            		even
00006D00                            		even
00006D00                            
00006D00                            ; ---------------------------------------------------------------------------
00006D00                            ; Ending sequence demos
00006D00                            ; ---------------------------------------------------------------------------
00006D00                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006D2E                            		even
00006D2E                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006D6E                            		even
00006D6E                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006D9E                            		even
00006D9E                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006DCE                            		even
00006DCE                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006DEE                            		even
00006DEE                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006E0E                            		even
00006E0E                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006E3E                            		even
00006E3E                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006E6E                            		even
00006E6E                            
00006E6E                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006E6E                            ; ---------------------------------------------------------------------------
00006E6E                            ; Subroutine to	load level boundaries and start	locations
00006E6E                            ; ---------------------------------------------------------------------------
00006E6E                            
00006E6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E6E                            
00006E6E                            
00006E6E                            LevelSizeLoad:
00006E6E 7000                       		moveq	#0,d0
00006E70 11C0 F740                  		move.b	d0,($FFFFF740).w
00006E74 11C0 F741                  		move.b	d0,($FFFFF741).w
00006E78 11C0 F746                  		move.b	d0,($FFFFF746).w
00006E7C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006E80 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006E84 3038 FE10                  		move.w	(v_zone).w,d0
00006E88 ED08                       		lsl.b	#6,d0
00006E8A E848                       		lsr.w	#4,d0
00006E8C 3200                       		move.w	d0,d1
00006E8E D040                       		add.w	d0,d0
00006E90 D041                       		add.w	d1,d0
00006E92 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006E96 3018                       		move.w	(a0)+,d0
00006E98 31C0 F730                  		move.w	d0,($FFFFF730).w
00006E9C 2018                       		move.l	(a0)+,d0
00006E9E 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006EA2 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006EA6 2018                       		move.l	(a0)+,d0
00006EA8 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006EAC 21C0 F724                  		move.l	d0,(v_limittop1).w
00006EB0 3038 F728                  		move.w	(v_limitleft2).w,d0
00006EB4 0640 0240                  		addi.w	#$240,d0
00006EB8 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006EBC 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006EC2 3018                       		move.w	(a0)+,d0
00006EC4 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006EC8 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006ECE 6000 0000                  		bra.w	LevSz_ChkLamp
00006ED2                            
00006ED2                            ; ===========================================================================
00006ED2                            ; ---------------------------------------------------------------------------
00006ED2                            ; Level size array
00006ED2                            ; ---------------------------------------------------------------------------
00006ED2                            LevelSizeArray:
00006ED2                            		; GHZ
00006ED2 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006EDE 0004 0000 2E60 0000 0300+  		dc.w $0004, $0000, $2E60, $0000, $0300, $0060
00006EEA 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006EF6 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006F02                            		; LZ
00006F02 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006F0E 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006F1A 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006F26 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006F32                            		; MZ
00006F32 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006F3E 0004 0000 2DE0 0000 0520+  		dc.w $0004, $0000, $2DE0, $0000, $0520, $0060
00006F4A 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006F56 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006F62                            		; SLZ
00006F62 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006F6E 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006F7A 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006F86 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006F92                            		; SYZ
00006F92 0004 0000 1B00 0000 0520+  		dc.w $0004, $0000, $1B00, $0000, $0520, $0060
00006F9E 0004 0000 1B60 0000 0520+  		dc.w $0004, $0000, $1B60, $0000, $0520, $0060
00006FAA 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006FB6 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006FC2                            		; SBZ
00006FC2 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006FCE 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006FDA 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006FE6 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006FF2                            		; Ending
00006FF2 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006FFE 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
0000700A 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00007016 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00007022                            
00007022                            ; ---------------------------------------------------------------------------
00007022                            ; Ending start location array
00007022                            ; ---------------------------------------------------------------------------
00007022                            EndingStLocArray:
00007022                            		include	"_inc\Start Location Array - Ending.asm"
00007022                            ; ---------------------------------------------------------------------------
00007022                            ; Ending start location array
00007022                            ; ---------------------------------------------------------------------------
00007022                            
00007022                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00007026                            		incbin	"startpos\mz2 (Credits demo).bin"
0000702A                            		incbin	"startpos\syz3 (Credits demo).bin"
0000702E                            		incbin	"startpos\lz3 (Credits demo).bin"
00007032                            		incbin	"startpos\slz3 (Credits demo).bin"
00007036                            		incbin	"startpos\sbz1 (Credits demo).bin"
0000703A                            		incbin	"startpos\sbz2 (Credits demo).bin"
0000703E                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00007042                            		even
00007042                            		even
00007042                            
00007042                            ; ===========================================================================
00007042                            
00007042                            LevSz_ChkLamp:
00007042 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00007046 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00007048                            
00007048 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
0000704E 3238 D008                  		move.w	(v_player+obX).w,d1
00007052 3038 D00C                  		move.w	(v_player+obY).w,d0
00007056 6000                       		bra.s	LevSz_SkipStartPos
00007058                            ; ===========================================================================
00007058                            
00007058                            LevSz_StartLoc:
00007058 3038 FE10                  		move.w	(v_zone).w,d0
0000705C ED08                       		lsl.b	#6,d0
0000705E E848                       		lsr.w	#4,d0
00007060 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00007064 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00007068 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000706A                            
0000706A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000706E 5340                       		subq.w	#1,d0
00007070 E548                       		lsl.w	#2,d0
00007072 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00007076                            
00007076                            LevSz_SonicPos:
00007076 7200                       		moveq	#0,d1
00007078 3219                       		move.w	(a1)+,d1
0000707A 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
0000707E 7000                       		moveq	#0,d0
00007080 3011                       		move.w	(a1),d0
00007082 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00007086                            
00007086                            SetScreen:
00007086                            	LevSz_SkipStartPos:
00007086 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
0000708A 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
0000708E 743F                       		moveq #63,d2 ; begin a 64-step loop 
00007090                            @looppoint: 
00007090 34C1                       		move.w d1,(a2)+ ; fill in X 
00007092 34C0                       		move.w d0,(a2)+ ; fill in Y 
00007094 51CA FFFA                  		dbf d2,@looppoint ; loop	
00007098 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
0000709C 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
0000709E 7200                       		moveq	#0,d1
000070A0                            
000070A0                            	SetScr_WithinLeft:
000070A0 3438 F72A                  		move.w	(v_limitright2).w,d2
000070A4 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000070A6 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000070A8 3202                       		move.w	d2,d1
000070AA                            
000070AA                            	SetScr_WithinRight:
000070AA 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
000070AE                            
000070AE 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
000070B2 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
000070B4 7000                       		moveq	#0,d0
000070B6                            
000070B6                            	SetScr_WithinTop:
000070B6 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
000070BA 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
000070BC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000070C0                            
000070C0                            	SetScr_WithinBottom:
000070C0 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
000070C4 6100 0000                  		bsr.w	BgScrollSpeed
000070C8 7000                       		moveq	#0,d0
000070CA 1038 FE10                  		move.b	(v_zone).w,d0
000070CE E508                       		lsl.b	#2,d0
000070D0 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
000070D6 4E75                       		rts
000070D8                            ; ===========================================================================
000070D8                            ; ---------------------------------------------------------------------------
000070D8                            ; Sonic start location array
000070D8                            ; ---------------------------------------------------------------------------
000070D8                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
000070D8                            ; ---------------------------------------------------------------------------
000070D8                            ; Sonic start location array
000070D8                            ; ---------------------------------------------------------------------------
000070D8                            
000070D8                            		incbin	"startpos\ghz1.bin"
000070DC                            		incbin	"startpos\ghz2.bin"
000070E0                            		incbin	"startpos\ghz3.bin"
000070E4 0080 00A8                  		dc.w	$80,$A8
000070E8                            
000070E8                            		incbin	"startpos\lz1.bin"
000070EC                            		incbin	"startpos\lz2.bin"
000070F0                            		incbin	"startpos\lz3.bin"
000070F4                            		incbin	"startpos\sbz3.bin"
000070F8                            
000070F8                            		incbin	"startpos\mz1.bin"
000070FC                            		incbin	"startpos\mz2.bin"
00007100                            		incbin	"startpos\mz3.bin"
00007104 0080 00A8                  		dc.w	$80,$A8
00007108                            
00007108                            		incbin	"startpos\slz1.bin"
0000710C                            		incbin	"startpos\slz2.bin"
00007110                            		incbin	"startpos\slz3.bin"
00007114 0080 00A8                  		dc.w	$80,$A8
00007118                            
00007118                            		incbin	"startpos\syz1.bin"
0000711C                            		incbin	"startpos\syz2.bin"
00007120                            		incbin	"startpos\syz3.bin"
00007124 0080 00A8                  		dc.w	$80,$A8
00007128                            
00007128                            		incbin	"startpos\sbz1.bin"
0000712C                            		incbin	"startpos\sbz2.bin"
00007130                            		incbin	"startpos\fz.bin"
00007134 0080 00A8                  		dc.w	$80,$A8
00007138                            
00007138                            
00007138                            		incbin	"startpos\end1.bin"
0000713C                            		incbin	"startpos\end2.bin"
00007140 0080 00A8                  		dc.w	$80,$A8
00007144 0080 00A8                  		dc.w	$80,$A8
00007148                            
00007148                            		even
00007148                            		even
00007148                            
00007148                            ; ---------------------------------------------------------------------------
00007148                            ; Which	256x256	tiles contain loops or roll-tunnels
00007148                            ; ---------------------------------------------------------------------------
00007148                            
00007148                            LoopTileNums:
00007148                            
00007148                            ; 		loop	loop	tunnel	tunnel
00007148                            
00007148 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
0000714C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007150 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007154 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
00007158 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
0000715C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007160 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007164                            
00007164                            		even
00007164                            
00007164                            ; ---------------------------------------------------------------------------
00007164                            ; Subroutine to	set scroll speed of some backgrounds
00007164                            ; ---------------------------------------------------------------------------
00007164                            
00007164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007164                            
00007164                            
00007164                            BgScrollSpeed:
00007164 4A38 FE30                  		tst.b	(v_lastlamp).w
00007168 6600                       		bne.s	loc_6206
0000716A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000716E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007172 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
00007176 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000717A 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
0000717E                            
0000717E                            loc_6206:
0000717E 7400                       		moveq	#0,d2
00007180 1438 FE10                  		move.b	(v_zone).w,d2
00007184 D442                       		add.w	d2,d2
00007186 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000718A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000718E                            ; End of function BgScrollSpeed
0000718E                            
0000718E                            ; ===========================================================================
0000718E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007192 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007196 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000719A 0000                       		dc.w BgScroll_End-BgScroll_Index
0000719C                            ; ===========================================================================
0000719C                            
0000719C                            BgScroll_GHZ:
0000719C 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071A0 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000071A4 42B8 F714                  		clr.l	(v_bg2screenposy).w
000071A8 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000071AC 45F8 A800                  		lea	($FFFFA800).w,a2
000071B0 429A                       		clr.l	(a2)+
000071B2 429A                       		clr.l	(a2)+
000071B4 429A                       		clr.l	(a2)+
000071B6 4E75                       		rts
000071B8                            ; ===========================================================================
000071B8                            
000071B8                            BgScroll_LZ:
000071B8 E280                       		asr.l	#1,d0
000071BA 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071BE 4E75                       		rts	
000071C0                            ; ===========================================================================
000071C0                            
000071C0                            BgScroll_MZ:
000071C0 4E75                       		rts	
000071C2                            ; ===========================================================================
000071C2                            
000071C2                            BgScroll_SLZ:
000071C2 E280                       		asr.l	#1,d0
000071C4 0640 00C0                  		addi.w	#$C0,d0
000071C8 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071CC 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071D0 4E75                       		rts	
000071D2                            ; ===========================================================================
000071D2                            
000071D2                            BgScroll_SYZ:
000071D2 E980                       		asl.l	#4,d0
000071D4 2400                       		move.l	d0,d2
000071D6 E380                       		asl.l	#1,d0
000071D8 D082                       		add.l	d2,d0
000071DA E080                       		asr.l	#8,d0
000071DC 5240                       		addq.w	#1,d0
000071DE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071E2 42B8 F708                  		clr.l	(v_bgscreenposx).w
000071E6 4E75                       		rts	
000071E8                            ; ===========================================================================
000071E8                            
000071E8                            BgScroll_SBZ:
000071E8 0240 07F8                  		andi.w	#$7F8,d0
000071EC E640                       		asr.w	#3,d0
000071EE 5240                       		addq.w	#1,d0
000071F0 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000071F4 4E75                       		rts	
000071F6                            ; ===========================================================================
000071F6                            
000071F6                            BgScroll_End:
000071F6 3038 F700                  		move.w	(v_screenposx).w,d0
000071FA E240                       		asr.w	#1,d0
000071FC 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007200 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007204 E440                       		asr.w	#2,d0
00007206 3200                       		move.w	d0,d1
00007208 D040                       		add.w	d0,d0
0000720A D041                       		add.w	d1,d0
0000720C 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007210 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007214 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007218 42B8 F71C                  		clr.l	(v_bg3screenposy).w
0000721C 45F8 A800                  		lea	($FFFFA800).w,a2
00007220 429A                       		clr.l	(a2)+
00007222 429A                       		clr.l	(a2)+
00007224 429A                       		clr.l	(a2)+
00007226 4E75                       		rts
00007226 4E75                       		rts
00007228                            		include	"_inc\DeformLayers (JP1).asm"
00007228                            ; ---------------------------------------------------------------------------
00007228                            ; Background layer deformation subroutines
00007228                            ; ---------------------------------------------------------------------------
00007228                            
00007228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007228                            
00007228                            
00007228                            DeformLayers:
00007228 4A38 F744                  		tst.b	(f_nobgscroll).w
0000722C 6700                       		beq.s	@bgscroll
0000722E 4E75                       		rts	
00007230                            ; ===========================================================================
00007230                            
00007230                            	@bgscroll:
00007230 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007234 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
00007238 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
0000723C 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007240 6100 0000                  		bsr.w	ScrollHoriz
00007244 6100 0000                  		bsr.w	ScrollVertical
00007248 6100 0000                  		bsr.w	DynamicLevelEvents
0000724C 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007252 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007258 7000                       		moveq	#0,d0
0000725A 1038 FE10                  		move.b	(v_zone).w,d0
0000725E D040                       		add.w	d0,d0
00007260 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007264 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007268                            ; End of function DeformLayers
00007268                            
00007268                            ; ===========================================================================
00007268                            ; ---------------------------------------------------------------------------
00007268                            ; Offset index for background layer deformation	code
00007268                            ; ---------------------------------------------------------------------------
00007268 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000726C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007270 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007274 0000                       		dc.w Deform_GHZ-Deform_Index
00007276                            ; ---------------------------------------------------------------------------
00007276                            ; Green	Hill Zone background layer deformation code
00007276                            ; ---------------------------------------------------------------------------
00007276                            
00007276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007276                            
00007276                            
00007276                            Deform_GHZ:
00007276                            	;cmpi.b    #id_Title,(v_gamemode).w
00007276                            	;beq.w    Deform_Title
00007276                            
00007276                            ;Deform_GHZ_Stage:
00007276                            	; block 3 - distant mountains
00007276 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000727A 48C4                       		ext.l	d4
0000727C EB84                       		asl.l	#5,d4
0000727E 2204                       		move.l	d4,d1
00007280 E384                       		asl.l	#1,d4
00007282 D881                       		add.l	d1,d4
00007284 7C00                       		moveq	#0,d6
00007286 6100 0000                  		bsr.w	BGScroll_Block3
0000728A                            	; block 2 - hills & waterfalls
0000728A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000728E 48C4                       		ext.l	d4
00007290 EF84                       		asl.l	#7,d4
00007292 7C00                       		moveq	#0,d6
00007294 6100 0000                  		bsr.w	BGScroll_Block2
00007298                            	; calculate Y position
00007298 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000729C 3038 F704                  		move.w	(v_screenposy).w,d0
000072A0 0240 07FF                  		andi.w	#$7FF,d0
000072A4 EA48                       		lsr.w	#5,d0
000072A6 4440                       		neg.w	d0
000072A8 0640 0020                  		addi.w	#$20,d0
000072AC 6A00                       		bpl.s	@limitY
000072AE 7000                       		moveq	#0,d0
000072B0                            	@limitY:
000072B0 3800                       		move.w	d0,d4
000072B2 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000072B6 3038 F700                  		move.w	(v_screenposx).w,d0
000072BA 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072C0 6600                       		bne.s	@notTitle
000072C2 7000                       		moveq	#0,d0	; reset foreground position in title screen
000072C4                            	@notTitle:
000072C4 4440                       		neg.w	d0
000072C6 4840                       		swap	d0
000072C8                            	; auto-scroll clouds
000072C8 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000072CC 069A 0001 0000             		addi.l	#$10000,(a2)+
000072D2 069A 0000 C000             		addi.l	#$C000,(a2)+
000072D8 069A 0000 8000             		addi.l	#$8000,(a2)+
000072DE                            	; calculate background scroll	
000072DE 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000072E2 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000072E6 4440                       		neg.w	d0
000072E8 323C 001F                  		move.w	#$1F,d1
000072EC 9244                       		sub.w	d4,d1
000072EE 6500                       		bcs.s	@gotoCloud2
000072F0                            	@cloudLoop1:		; upper cloud (32px)
000072F0 22C0                       		move.l	d0,(a1)+
000072F2 51C9 FFFC                  		dbf	d1,@cloudLoop1
000072F6                            
000072F6                            	@gotoCloud2:
000072F6 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000072FA D078 F718                  		add.w	(v_bg3screenposx).w,d0
000072FE 4440                       		neg.w	d0
00007300 323C 000F                  		move.w	#$F,d1
00007304                            	@cloudLoop2:		; middle cloud (16px)
00007304 22C0                       		move.l	d0,(a1)+
00007306 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000730A                            
0000730A 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
0000730E D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007312 4440                       		neg.w	d0
00007314 323C 000F                  		move.w	#$F,d1
00007318                            	@cloudLoop3:		; lower cloud (16px)
00007318 22C0                       		move.l	d0,(a1)+
0000731A 51C9 FFFC                  		dbf	d1,@cloudLoop3
0000731E                            
0000731E 323C 002F                  		move.w	#$2F,d1
00007322 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007326 4440                       		neg.w	d0
00007328                            	@mountainLoop:		; distant mountains (48px)
00007328 22C0                       		move.l	d0,(a1)+
0000732A 51C9 FFFC                  		dbf	d1,@mountainLoop
0000732E                            
0000732E 323C 0027                  		move.w	#$27,d1
00007332 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007336 4440                       		neg.w	d0
00007338                            	@hillLoop:			; hills & waterfalls (40px)
00007338 22C0                       		move.l	d0,(a1)+
0000733A 51C9 FFFC                  		dbf	d1,@hillLoop
0000733E                            
0000733E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007342 3438 F700                  		move.w	(v_screenposx).w,d2
00007346 9440                       		sub.w	d0,d2
00007348 48C2                       		ext.l	d2
0000734A E182                       		asl.l	#8,d2
0000734C 85FC 0068                  		divs.w	#$68,d2
00007350 48C2                       		ext.l	d2
00007352 E182                       		asl.l	#8,d2
00007354 7600                       		moveq	#0,d3
00007356 3600                       		move.w	d0,d3
00007358 323C 0047                  		move.w	#$47,d1
0000735C D244                       		add.w	d4,d1
0000735E                            	@waterLoop:			; water deformation
0000735E 3003                       		move.w	d3,d0
00007360 4440                       		neg.w	d0
00007362 22C0                       		move.l	d0,(a1)+
00007364 4843                       		swap	d3
00007366 D682                       		add.l	d2,d3
00007368 4843                       		swap	d3
0000736A 51C9 FFF2                  		dbf	d1,@waterLoop
0000736E 4E75                       		rts
00007370                            ; End of function Deform_GHZ
00007370                            
00007370                            Deform_Title:
00007370 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007374 48C4                       		ext.l	d4
00007376 EB84                       		asl.l	#5,d4
00007378 2204                       		move.l	d4,d1
0000737A E384                       		asl.l	#1,d4
0000737C D881                       		add.l	d1,d4
0000737E 7A00                       		moveq	#0,d5
00007380 6100 0000                  		bsr.w	BGScroll_Block1
00007384 6100 0000                  		bsr.w	BGScroll_Block3
00007388 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000738C 3038 F704                  		move.w	(v_screenposy).w,d0
00007390 0240 07FF                  		andi.w	#$7FF,d0
00007394 EA48                       		lsr.w	#5,d0
00007396 4440                       		neg.w	d0
00007398 0640 0026                  		addi.w	#$26,d0
0000739C 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000073A0 3800                       		move.w	d0,d4
000073A2 6100 0000                  		bsr.w	BGScroll_Block3
000073A6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000073AC 323C 006F                  		move.w	#$6F,d1
000073B0 9244                       		sub.w	d4,d1
000073B2 3038 F700                  		move.w	(v_screenposx).w,d0
000073B6 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000073BC 6600                       		bne.s	loc_633C
000073BE 7000                       		moveq	#0,d0
000073C0                            
000073C0                            loc_633C:
000073C0 4440                       		neg.w	d0
000073C2 4840                       		swap	d0
000073C4 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000073C8 4440                       		neg.w	d0
000073CA                            
000073CA                            loc_6346:
000073CA 22C0                       		move.l	d0,(a1)+
000073CC 51C9 FFFC                  		dbf	d1,loc_6346
000073D0 323C 0027                  		move.w	#$27,d1
000073D4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073D8 4440                       		neg.w	d0
000073DA                            
000073DA                            loc_6356:
000073DA 22C0                       		move.l	d0,(a1)+
000073DC 51C9 FFFC                  		dbf	d1,loc_6356
000073E0 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000073E4 0640 0000                  		addi.w	#0,d0
000073E8 3438 F700                  		move.w	(v_screenposx).w,d2
000073EC 0642 FE00                  		addi.w	#-$200,d2
000073F0 9440                       		sub.w	d0,d2
000073F2 48C2                       		ext.l	d2
000073F4 E182                       		asl.l	#8,d2
000073F6 85FC 0068                  		divs.w	#$68,d2
000073FA 48C2                       		ext.l	d2
000073FC E182                       		asl.l	#8,d2
000073FE 7600                       		moveq	#0,d3
00007400 3600                       		move.w	d0,d3
00007402 323C 0047                  		move.w	#$47,d1
00007406 D244                       		add.w	d4,d1
00007408                            
00007408                            loc_6384:
00007408 3003                       		move.w	d3,d0
0000740A 4440                       		neg.w	d0
0000740C 22C0                       		move.l	d0,(a1)+
0000740E 4843                       		swap	d3
00007410 D682                       		add.l	d2,d3
00007412 4843                       		swap	d3
00007414 51C9 FFF2                  		dbf	d1,loc_6384
00007418 4E75                       		rts	
0000741A                            
0000741A                            ; ===========================================================================
0000741A                            ; ---------------------------------------------------------------------------
0000741A                            ; Labyrinth Zone background layer deformation code
0000741A                            ; ---------------------------------------------------------------------------
0000741A                            
0000741A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000741A                            
0000741A                            
0000741A                            Deform_LZ:
0000741A                            	; plain background scroll
0000741A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000741E 48C4                       		ext.l	d4
00007420 EF84                       		asl.l	#7,d4
00007422 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007426 48C5                       		ext.l	d5
00007428 EF85                       		asl.l	#7,d5
0000742A 6100 0000                  		bsr.w	BGScroll_XY
0000742E                            
0000742E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007434 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
0000743A 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
00007440 1438 F7D8                  		move.b	(v_lz_deform).w,d2
00007444 1602                       		move.b	d2,d3
00007446 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
0000744C                            
0000744C D478 F70C                  		add.w	(v_bgscreenposy).w,d2
00007450 0242 00FF                  		andi.w	#$FF,d2
00007454 D678 F704                  		add.w	(v_screenposy).w,d3
00007458 0243 00FF                  		andi.w	#$FF,d3
0000745C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007460 323C 00DF                  		move.w	#$DF,d1
00007464 3038 F700                  		move.w	(v_screenposx).w,d0
00007468 4440                       		neg.w	d0
0000746A 3C00                       		move.w	d0,d6
0000746C 4840                       		swap	d0
0000746E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007472 4440                       		neg.w	d0
00007474 3838 F646                  		move.w	(v_waterpos1).w,d4
00007478 3A38 F704                  		move.w	(v_screenposy).w,d5
0000747C                            	; write normal scroll before meeting water position
0000747C                            	@normalLoop:		
0000747C BA44                       		cmp.w	d4,d5	; is current y >= water y?
0000747E 6C00                       		bge.s	@underwaterLoop	; if yes, branch
00007480 22C0                       		move.l	d0,(a1)+
00007482 5245                       		addq.w	#1,d5
00007484 5202                       		addq.b	#1,d2
00007486 5203                       		addq.b	#1,d3
00007488 51C9 FFF2                  		dbf	d1,@normalLoop
0000748C 4E75                       		rts
0000748E                            	; apply water deformation when underwater
0000748E                            	@underwaterLoop:
0000748E 1833 3000                  		move.b	(a3,d3),d4
00007492 4884                       		ext.w	d4
00007494 D846                       		add.w	d6,d4
00007496 32C4                       		move.w	d4,(a1)+
00007498 1832 2000                  		move.b	(a2,d2),d4
0000749C 4884                       		ext.w	d4
0000749E D840                       		add.w	d0,d4
000074A0 32C4                       		move.w	d4,(a1)+
000074A2 5202                       		addq.b	#1,d2
000074A4 5203                       		addq.b	#1,d3
000074A6 51C9 FFE6                  		dbf	d1,@underwaterLoop
000074AA 4E75                       		rts
000074AC                            
000074AC                            Lz_Scroll_Data:
000074AC 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
000074BC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074CC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074DC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074EC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000074FC 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000750C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000751C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000752C FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
0000753C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000754C 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
0000755C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000756C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000757C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000758C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0000759C 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000075AC                            ; End of function Deform_LZ
000075AC                            
000075AC                            ; ---------------------------------------------------------------------------
000075AC                            ; Marble Zone background layer deformation code
000075AC                            ; ---------------------------------------------------------------------------
000075AC                            
000075AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075AC                            
000075AC                            
000075AC                            Deform_MZ:
000075AC                            	; block 1 - dungeon interior
000075AC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075B0 48C4                       		ext.l	d4
000075B2 ED84                       		asl.l	#6,d4
000075B4 2204                       		move.l	d4,d1
000075B6 E384                       		asl.l	#1,d4
000075B8 D881                       		add.l	d1,d4
000075BA 7C02                       		moveq	#2,d6
000075BC 6100 0000                  		bsr.w	BGScroll_Block1
000075C0                            	; block 3 - mountains
000075C0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075C4 48C4                       		ext.l	d4
000075C6 ED84                       		asl.l	#6,d4
000075C8 7C06                       		moveq	#6,d6
000075CA 6100 0000                  		bsr.w	BGScroll_Block3
000075CE                            	; block 2 - bushes & antique buildings
000075CE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000075D2 48C4                       		ext.l	d4
000075D4 EF84                       		asl.l	#7,d4
000075D6 7C04                       		moveq	#4,d6
000075D8 6100 0000                  		bsr.w	BGScroll_Block2
000075DC                            	; calculate y-position of background
000075DC 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
000075E0 3238 F704                  		move.w	(v_screenposy).w,d1
000075E4 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
000075E8 6500                       		bcs.s	@noYscroll
000075EA 3401                       		move.w	d1,d2
000075EC D241                       		add.w	d1,d1
000075EE D242                       		add.w	d2,d1
000075F0 E441                       		asr.w	#2,d1
000075F2 D041                       		add.w	d1,d0
000075F4                            	@noYscroll:
000075F4 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000075F8 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
000075FC 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007600 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007606                            	; do something with redraw flags
00007606 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
0000760A 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
0000760E 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007612 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007616 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
0000761A                            	; calculate background scroll buffer
0000761A 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
0000761E 3438 F700                  		move.w	(v_screenposx).w,d2
00007622 4442                       		neg.w	d2
00007624 3002                       		move.w	d2,d0
00007626 E440                       		asr.w	#2,d0
00007628 9042                       		sub.w	d2,d0
0000762A 48C0                       		ext.l	d0
0000762C E780                       		asl.l	#3,d0
0000762E 81FC 0005                  		divs.w	#5,d0
00007632 48C0                       		ext.l	d0
00007634 E980                       		asl.l	#4,d0
00007636 E180                       		asl.l	#8,d0
00007638 7600                       		moveq	#0,d3
0000763A 3602                       		move.w	d2,d3
0000763C E243                       		asr.w	#1,d3
0000763E 323C 0004                  		move.w	#4,d1
00007642                            	@cloudLoop:		
00007642 32C3                       		move.w	d3,(a1)+
00007644 4843                       		swap	d3
00007646 D680                       		add.l	d0,d3
00007648 4843                       		swap	d3
0000764A 51C9 FFF6                  		dbf	d1,@cloudLoop
0000764E                            
0000764E 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007652 4440                       		neg.w	d0
00007654 323C 0001                  		move.w	#1,d1
00007658                            	@mountainLoop:		
00007658 32C0                       		move.w	d0,(a1)+
0000765A 51C9 FFFC                  		dbf	d1,@mountainLoop
0000765E                            
0000765E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007662 4440                       		neg.w	d0
00007664 323C 0008                  		move.w	#8,d1
00007668                            	@bushLoop:		
00007668 32C0                       		move.w	d0,(a1)+
0000766A 51C9 FFFC                  		dbf	d1,@bushLoop
0000766E                            
0000766E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007672 4440                       		neg.w	d0
00007674 323C 000F                  		move.w	#$F,d1
00007678                            	@interiorLoop:		
00007678 32C0                       		move.w	d0,(a1)+
0000767A 51C9 FFFC                  		dbf	d1,@interiorLoop
0000767E                            
0000767E 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007682 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007686 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
0000768A 3400                       		move.w	d0,d2
0000768C 0C40 0100                  		cmpi.w	#$100,d0
00007690 6500                       		bcs.s	@limitY
00007692 303C 0100                  		move.w	#$100,d0
00007696                            	@limitY:
00007696 0240 01F0                  		andi.w	#$1F0,d0
0000769A E648                       		lsr.w	#3,d0
0000769C 45F2 0000                  		lea	(a2,d0),a2
000076A0 6000 0000                  		bra.w	Bg_Scroll_X
000076A4                            ; End of function Deform_MZ
000076A4                            
000076A4                            ; ---------------------------------------------------------------------------
000076A4                            ; Star Light Zone background layer deformation code
000076A4                            ; ---------------------------------------------------------------------------
000076A4                            
000076A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076A4                            
000076A4                            
000076A4                            Deform_SLZ:
000076A4                            	; vertical scrolling
000076A4 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000076A8 48C5                       		ext.l	d5
000076AA EF85                       		asl.l	#7,d5
000076AC 6100 0000                  		bsr.w	Bg_Scroll_Y
000076B0 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000076B6                            	; calculate background scroll buffer
000076B6 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000076BA 3438 F700                  		move.w	(v_screenposx).w,d2
000076BE 4442                       		neg.w	d2
000076C0 3002                       		move.w	d2,d0
000076C2 E640                       		asr.w	#3,d0
000076C4 9042                       		sub.w	d2,d0
000076C6 48C0                       		ext.l	d0
000076C8 E980                       		asl.l	#4,d0
000076CA 81FC 001C                  		divs.w	#$1C,d0
000076CE 48C0                       		ext.l	d0
000076D0 E980                       		asl.l	#4,d0
000076D2 E180                       		asl.l	#8,d0
000076D4 7600                       		moveq	#0,d3
000076D6 3602                       		move.w	d2,d3
000076D8 323C 001B                  		move.w	#$1B,d1
000076DC                            	@starLoop:		
000076DC 32C3                       		move.w	d3,(a1)+
000076DE 4843                       		swap	d3
000076E0 D680                       		add.l	d0,d3
000076E2 4843                       		swap	d3
000076E4 51C9 FFF6                  		dbf	d1,@starLoop
000076E8                            
000076E8 3002                       		move.w	d2,d0
000076EA E640                       		asr.w	#3,d0
000076EC 3200                       		move.w	d0,d1
000076EE E241                       		asr.w	#1,d1
000076F0 D041                       		add.w	d1,d0
000076F2 323C 0004                  		move.w	#4,d1
000076F6                            	@buildingLoop1:		; distant black buildings
000076F6 32C0                       		move.w	d0,(a1)+
000076F8 51C9 FFFC                  		dbf	d1,@buildingLoop1
000076FC                            
000076FC 3002                       		move.w	d2,d0
000076FE E440                       		asr.w	#2,d0
00007700 323C 0004                  		move.w	#4,d1
00007704                            	@buildingLoop2:		; closer buildings
00007704 32C0                       		move.w	d0,(a1)+
00007706 51C9 FFFC                  		dbf	d1,@buildingLoop2
0000770A                            
0000770A 3002                       		move.w	d2,d0
0000770C E240                       		asr.w	#1,d0
0000770E 323C 001D                  		move.w	#$1D,d1
00007712                            	@bottomLoop:		; bottom part of background
00007712 32C0                       		move.w	d0,(a1)+
00007714 51C9 FFFC                  		dbf	d1,@bottomLoop
00007718                            
00007718 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000771C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007720 3400                       		move.w	d0,d2
00007722 0440 00C0                  		subi.w	#$C0,d0
00007726 0240 03F0                  		andi.w	#$3F0,d0
0000772A E648                       		lsr.w	#3,d0
0000772C 45F2 0000                  		lea	(a2,d0),a2
00007730                            ;-------------------------------------------------------------------------------
00007730                            ;-------------------------------------------------------------------------------
00007730                            Bg_Scroll_X:
00007730 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007734 323C 000E                  		move.w	#$E,d1
00007738 3038 F700                  		move.w	(v_screenposx).w,d0
0000773C 4440                       		neg.w	d0
0000773E 4840                       		swap	d0
00007740 0242 000F                  		andi.w	#$F,d2
00007744 D442                       		add.w	d2,d2
00007746 301A                       		move.w	(a2)+,d0
00007748 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
0000774C                            	@blockLoop:
0000774C 301A                       		move.w	(a2)+,d0
0000774E                            	@pixelJump:		
0000774E 22C0                       		move.l	d0,(a1)+
00007750 22C0                       		move.l	d0,(a1)+
00007752 22C0                       		move.l	d0,(a1)+
00007754 22C0                       		move.l	d0,(a1)+
00007756 22C0                       		move.l	d0,(a1)+
00007758 22C0                       		move.l	d0,(a1)+
0000775A 22C0                       		move.l	d0,(a1)+
0000775C 22C0                       		move.l	d0,(a1)+
0000775E 22C0                       		move.l	d0,(a1)+
00007760 22C0                       		move.l	d0,(a1)+
00007762 22C0                       		move.l	d0,(a1)+
00007764 22C0                       		move.l	d0,(a1)+
00007766 22C0                       		move.l	d0,(a1)+
00007768 22C0                       		move.l	d0,(a1)+
0000776A 22C0                       		move.l	d0,(a1)+
0000776C 22C0                       		move.l	d0,(a1)+
0000776E 51C9 FFDC                  		dbf	d1,@blockLoop
00007772 4E75                       		rts
00007774                            
00007774                            ; ---------------------------------------------------------------------------
00007774                            ; Spring Yard Zone background layer deformation	code
00007774                            ; ---------------------------------------------------------------------------
00007774                            
00007774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007774                            
00007774                            
00007774                            Deform_SYZ:
00007774                            	; vertical scrolling
00007774 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007778 48C5                       		ext.l	d5
0000777A E985                       		asl.l	#4,d5
0000777C 2205                       		move.l	d5,d1
0000777E E385                       		asl.l	#1,d5
00007780 DA81                       		add.l	d1,d5
00007782 6100 0000                  		bsr.w	Bg_Scroll_Y
00007786 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000778C                            	; calculate background scroll buffer
0000778C 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007790 3438 F700                  		move.w	(v_screenposx).w,d2
00007794 4442                       		neg.w	d2
00007796 3002                       		move.w	d2,d0
00007798 E640                       		asr.w	#3,d0
0000779A 9042                       		sub.w	d2,d0
0000779C 48C0                       		ext.l	d0
0000779E E780                       		asl.l	#3,d0
000077A0 81FC 0008                  		divs.w	#8,d0
000077A4 48C0                       		ext.l	d0
000077A6 E980                       		asl.l	#4,d0
000077A8 E180                       		asl.l	#8,d0
000077AA 7600                       		moveq	#0,d3
000077AC 3602                       		move.w	d2,d3
000077AE E243                       		asr.w	#1,d3
000077B0 323C 0007                  		move.w	#7,d1
000077B4                            	@cloudLoop:		
000077B4 32C3                       		move.w	d3,(a1)+
000077B6 4843                       		swap	d3
000077B8 D680                       		add.l	d0,d3
000077BA 4843                       		swap	d3
000077BC 51C9 FFF6                  		dbf	d1,@cloudLoop
000077C0                            
000077C0 3002                       		move.w	d2,d0
000077C2 E640                       		asr.w	#3,d0
000077C4 323C 0004                  		move.w	#4,d1
000077C8                            	@mountainLoop:		
000077C8 32C0                       		move.w	d0,(a1)+
000077CA 51C9 FFFC                  		dbf	d1,@mountainLoop
000077CE                            
000077CE 3002                       		move.w	d2,d0
000077D0 E440                       		asr.w	#2,d0
000077D2 323C 0005                  		move.w	#5,d1
000077D6                            	@buildingLoop:		
000077D6 32C0                       		move.w	d0,(a1)+
000077D8 51C9 FFFC                  		dbf	d1,@buildingLoop
000077DC                            
000077DC 3002                       		move.w	d2,d0
000077DE 3202                       		move.w	d2,d1
000077E0 E241                       		asr.w	#1,d1
000077E2 9041                       		sub.w	d1,d0
000077E4 48C0                       		ext.l	d0
000077E6 E980                       		asl.l	#4,d0
000077E8 81FC 000E                  		divs.w	#$E,d0
000077EC 48C0                       		ext.l	d0
000077EE E980                       		asl.l	#4,d0
000077F0 E180                       		asl.l	#8,d0
000077F2 7600                       		moveq	#0,d3
000077F4 3602                       		move.w	d2,d3
000077F6 E243                       		asr.w	#1,d3
000077F8 323C 000D                  		move.w	#$D,d1
000077FC                            	@bushLoop:		
000077FC 32C3                       		move.w	d3,(a1)+
000077FE 4843                       		swap	d3
00007800 D680                       		add.l	d0,d3
00007802 4843                       		swap	d3
00007804 51C9 FFF6                  		dbf	d1,@bushLoop
00007808                            
00007808 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000780C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007810 3400                       		move.w	d0,d2
00007812 0240 01F0                  		andi.w	#$1F0,d0
00007816 E648                       		lsr.w	#3,d0
00007818 45F2 0000                  		lea	(a2,d0),a2
0000781C 6000 FF12                  		bra.w	Bg_Scroll_X
00007820                            ; End of function Deform_SYZ
00007820                            
00007820                            ; ---------------------------------------------------------------------------
00007820                            ; Scrap	Brain Zone background layer deformation	code
00007820                            ; ---------------------------------------------------------------------------
00007820                            
00007820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007820                            
00007820                            
00007820                            Deform_SBZ:
00007820 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007824 48C4                       		ext.l	d4
00007826 ED84                       		asl.l	#6,d4
00007828 3A38 F73C                  		move.w	(v_scrshifty).w,d5
0000782C 48C5                       		ext.l	d5
0000782E E985                       		asl.l	#4,d5
00007830 E385                       		asl.l	#1,d5
00007832 6100 0000                  		bsr.w	BGScroll_XY
00007836 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000783C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007840 323C 00DF                  		move.w	#223,d1
00007844 3038 F700                  		move.w	(v_screenposx).w,d0
00007848 4440                       		neg.w	d0
0000784A 4840                       		swap	d0
0000784C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007850 4440                       		neg.w	d0
00007852                            
00007852                            loc_6576:
00007852 22C0                       		move.l	d0,(a1)+
00007854 51C9 FFFC                  		dbf	d1,loc_6576
00007858 4E75                       		rts	
0000785A                            ;-------------------------------------------------------------------------------
0000785A                            Deform_SBZ2:;loc_68A2:
0000785A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000785E 48C4                       		ext.l	d4
00007860 ED84                       		asl.l	#6,d4
00007862 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007866 48C5                       		ext.l	d5
00007868 E985                       		asl.l	#4,d5
0000786A E385                       		asl.l	#1,d5
0000786C 6100 0000                  		bsr.w	BGScroll_XY
00007870 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007876 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000787A 323C 00DF                  		move.w	#223,d1
0000787E 3038 F700                  		move.w	(v_screenposx).w,d0
00007882 4440                       		neg.w	d0
00007884 4840                       		swap	d0
00007886 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000788A 4440                       		neg.w	d0
0000788C                            
0000788C                            loc_6577:
0000788C 22C0                       		move.l	d0,(a1)+
0000788E 51C9 FFFC                  		dbf	d1,loc_6577
00007892 4E75                       		rts	
00007894                            
00007894                            ; ---------------------------------------------------------------------------
00007894                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007894                            ; ---------------------------------------------------------------------------
00007894                            
00007894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007894                            
00007894                            
00007894                            ScrollHoriz:
00007894 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007898 6100                       		bsr.s	MoveScreenHoriz
0000789A 3038 F700                  		move.w	(v_screenposx).w,d0
0000789E 0240 0010                  		andi.w	#$10,d0
000078A2 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000078A6 B300                       		eor.b	d1,d0
000078A8 6600                       		bne.s	@return
000078AA 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
000078B0 3038 F700                  		move.w	(v_screenposx).w,d0
000078B4 9044                       		sub.w	d4,d0		; compare new with old screen position
000078B6 6A00                       		bpl.s	@scrollRight
000078B8                            
000078B8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
000078BE 4E75                       		rts	
000078C0                            
000078C0                            	@scrollRight:
000078C0 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
000078C6                            
000078C6                            	@return:
000078C6 4E75                       		rts	
000078C8                            ; End of function ScrollHoriz
000078C8                            
000078C8                            
000078C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078C8                            
000078C8                            MoveScreenHoriz:
000078C8 4A38 FF8B                  		tst.b	($FFFFFF8B).w
000078CC 6700 0000                  		beq.w	@cont		
000078D0 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
000078D6                            		
000078D6                            	@cont:		
000078D6 3238 C904                  		move.w	($FFFFC904).w,d1
000078DA 6700                       		beq.s	@cont1
000078DC 0441 0100                  		sub.w	#$100,d1
000078E0 31C1 C904                  		move.w	d1,($FFFFC904).w
000078E4 7200                       		moveq	#0,d1
000078E6 1238 C904                  		move.b	($FFFFC904).w,d1
000078EA E509                       		lsl.b	#2,d1
000078EC 5801                       		addq.b	#4,d1
000078EE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000078F2 9001                       		sub.b	d1,d0
000078F4 43F8 CB00                  		lea	($FFFFCB00).w,a1
000078F8 3031 0000                  		move.w	(a1,d0.w),d0
000078FC 0240 3FFF                  		and.w	#$3FFF,d0
00007900 6000                       		bra.s	@cont2
00007902                            		
00007902                            @cont1:
00007902 3038 D008                  		move.w	($FFFFD008).w,d0
00007906                            		
00007906                            @cont2:
00007906 9078 F700                  		sub.w	($FFFFF700).w,d0
0000790A 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
0000790E 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007910 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007914 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007916 4278 F73A                          clr.w    (v_scrshiftx).w
0000791A 4E75                               rts 
0000791C                            ; ===========================================================================
0000791C                            
0000791C                            SH_AheadOfMid:
0000791C 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007920 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007922 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007926                            
00007926                                SH_Ahead16:
00007926 D078 F700                          add.w    (v_screenposx).w,d0
0000792A B078 F72A                          cmp.w    (v_limitright2).w,d0
0000792E 6D00                               blt.s    SH_SetScreen
00007930 3038 F72A                          move.w    (v_limitright2).w,d0
00007934                            
00007934                            SH_SetScreen:
00007934 3200                               move.w    d0,d1
00007936 9278 F700                          sub.w    (v_screenposx).w,d1
0000793A E141                               asl.w    #8,d1
0000793C 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007940 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007944 4E75                               rts 
00007946                            ; ===========================================================================
00007946                            
00007946                            SH_BehindMid:
00007946 0C40 FFF0                  		cmpi.w	#-$10,d0
0000794A 6400                       		bcc.s	@cont
0000794C 303C FFF0                  		move.w	#-$10,d0	
00007950                            
00007950                            @cont:
00007950 D078 F700                  		add.w	(v_screenposx).w,d0
00007954 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007958 6EDA                       		bgt.s	SH_SetScreen
0000795A 3038 F728                  		move.w	(v_limitleft2).w,d0
0000795E 60D4                       		bra.s	SH_SetScreen
00007960                            ; End of function MoveScreenHoriz
00007960                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007960                            
00007960                            MoveScreenHorizEXT:
00007960 3238 C904                  		move.w	($FFFFC904).w,d1
00007964 6700                       		beq.s	@cont1
00007966 0441 0100                  		sub.w	#$100,d1
0000796A 31C1 C904                  		move.w	d1,($FFFFC904).w
0000796E 7200                       		moveq	#0,d1
00007970 1238 C904                  		move.b	($FFFFC904).w,d1
00007974 E509                       		lsl.b	#2,d1
00007976 5801                       		addq.b	#4,d1
00007978 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000797C 9001                       		sub.b	d1,d0
0000797E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007982 3031 0000                  		move.w	(a1,d0.w),d0
00007986 0240 3FFF                  		and.w	#$3FFF,d0
0000798A 6000                       		bra.s	@cont2
0000798C                            		
0000798C                            @cont1:
0000798C 3038 D008                  		move.w	($FFFFD008).w,d0
00007990                            		
00007990                            @cont2:
00007990 9078 F700                  		sub.w	($FFFFF700).w,d0
00007994 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007998 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
0000799A 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
0000799C 6000                               bra.s    SHEXT_AheadOfMid    ; branch
0000799E                            ; ===========================================================================
0000799E                            
0000799E                            SHEXT_ProperlyFramed:
0000799E 4278 F73A                          clr.w    (v_scrshiftx).w
000079A2 4E75                               rts 
000079A4                            ; ===========================================================================
000079A4                            
000079A4                            SHEXT_AheadOfMid:
000079A4 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
000079A8 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
000079AA 303C 0010                          move.w    #16,d0        ; set to 16 if greater
000079AE                            
000079AE                            SHEXT_Ahead16:
000079AE D078 F700                          add.w    (v_screenposx).w,d0
000079B2 B078 F72A                          cmp.w    (v_limitright2).w,d0
000079B6 6D00                               blt.s    SHEXT_SetScreen
000079B8 3038 F72A                          move.w    (v_limitright2).w,d0
000079BC                            
000079BC                            SHEXT_SetScreen:
000079BC 3200                               move.w    d0,d1
000079BE 9278 F700                          sub.w    (v_screenposx).w,d1
000079C2 E141                               asl.w    #8,d1
000079C4 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
000079C8 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
000079CC 4E75                               rts
000079CE                            
000079CE                            ; ===========================================================================
000079CE                            
000079CE                            SHEXT_BehindMid:
000079CE 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
000079D2 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
000079D4 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
000079D8                            
000079D8                            SHEXT_Behind16:
000079D8 D078 F700                          add.w    (v_screenposx).w,d0
000079DC B078 F728                          cmp.w    (v_limitleft2).w,d0
000079E0 6EDA                               bgt.s    SHEXT_SetScreen
000079E2 3038 F728                          move.w    (v_limitleft2).w,d0
000079E6 60D4                               bra.s    SHEXT_SetScreen
000079E8                                  
000079E8                            ; End of function MoveScreenHoriz
000079E8                            
000079E8                            
000079E8                            ; ---------------------------------------------------------------------------
000079E8                            ; Subroutine to	scroll the level vertically as Sonic moves
000079E8                            ; ---------------------------------------------------------------------------
000079E8                            
000079E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E8                            
000079E8                            
000079E8                            ScrollVertical:
000079E8 7200                       		moveq	#0,d1
000079EA 3038 D00C                  		move.w	(v_player+obY).w,d0
000079EE 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
000079F2 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
000079F8 6700                       		beq.s	SV_NotRolling	; if not, branch
000079FA 5B40                       		subq.w	#5,d0
000079FC                            
000079FC                            	SV_NotRolling:
000079FC 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00007A02 6700                       		beq.s	loc_664A	; if not, branch
00007A04                            
00007A04 0640 0020                  		addi.w	#32,d0
00007A08 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A0C 6500                       		bcs.s	loc_6696
00007A0E 0440 0040                  		subi.w	#64,d0
00007A12 6400                       		bcc.s	loc_6696
00007A14 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A18 6600                       		bne.s	loc_66A8
00007A1A 6000                       		bra.s	loc_6656
00007A1C                            ; ===========================================================================
00007A1C                            
00007A1C                            loc_664A:
00007A1C 9078 F73E                  		sub.w	(v_lookshift).w,d0
00007A20 6600                       		bne.s	loc_665C
00007A22 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00007A26 6600                       		bne.s	loc_66A8
00007A28                            
00007A28                            loc_6656:
00007A28 4278 F73C                  		clr.w	(v_scrshifty).w
00007A2C 4E75                       		rts	
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            loc_665C:
00007A2E 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00007A34 6600                       		bne.s	loc_6684
00007A36 3238 D020                  		move.w	(v_player+obInertia).w,d1
00007A3A 6A00                       		bpl.s	loc_666C
00007A3C 4441                       		neg.w	d1
00007A3E                            
00007A3E                            loc_666C:
00007A3E 0C41 0800                  		cmpi.w	#$800,d1
00007A42 6400                       		bcc.s	loc_6696
00007A44 323C 0600                  		move.w	#$600,d1
00007A48 0C40 0006                  		cmpi.w	#6,d0
00007A4C 6E00                       		bgt.s	loc_66F6
00007A4E 0C40 FFFA                  		cmpi.w	#-6,d0
00007A52 6D00                       		blt.s	loc_66C0
00007A54 6000                       		bra.s	loc_66AE
00007A56                            ; ===========================================================================
00007A56                            
00007A56                            loc_6684:
00007A56 323C 0200                  		move.w	#$200,d1
00007A5A 0C40 0002                  		cmpi.w	#2,d0
00007A5E 6E00                       		bgt.s	loc_66F6
00007A60 0C40 FFFE                  		cmpi.w	#-2,d0
00007A64 6D00                       		blt.s	loc_66C0
00007A66 6000                       		bra.s	loc_66AE
00007A68                            ; ===========================================================================
00007A68                            
00007A68                            loc_6696:
00007A68 323C 1000                  		move.w	#$1000,d1
00007A6C 0C40 0010                  		cmpi.w	#$10,d0
00007A70 6E00                       		bgt.s	loc_66F6
00007A72 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A76 6D00                       		blt.s	loc_66C0
00007A78 6000                       		bra.s	loc_66AE
00007A7A                            ; ===========================================================================
00007A7A                            
00007A7A                            loc_66A8:
00007A7A 7000                       		moveq	#0,d0
00007A7C 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00007A80                            
00007A80                            loc_66AE:
00007A80 7200                       		moveq	#0,d1
00007A82 3200                       		move.w	d0,d1
00007A84 D278 F704                  		add.w	(v_screenposy).w,d1
00007A88 4A40                       		tst.w	d0
00007A8A 6A00 0000                  		bpl.w	loc_6700
00007A8E 6000 0000                  		bra.w	loc_66CC
00007A92                            ; ===========================================================================
00007A92                            
00007A92                            loc_66C0:
00007A92 4441                       		neg.w	d1
00007A94 48C1                       		ext.l	d1
00007A96 E181                       		asl.l	#8,d1
00007A98 D2B8 F704                  		add.l	(v_screenposy).w,d1
00007A9C 4841                       		swap	d1
00007A9E                            
00007A9E                            loc_66CC:
00007A9E B278 F72C                  		cmp.w	(v_limittop2).w,d1
00007AA2 6E00                       		bgt.s	loc_6724
00007AA4 0C41 FF00                  		cmpi.w	#-$100,d1
00007AA8 6E00                       		bgt.s	loc_66F0
00007AAA 0241 07FF                  		andi.w	#$7FF,d1
00007AAE 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007AB4 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00007ABA 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007AC0 6000                       		bra.s	loc_6724
00007AC2                            ; ===========================================================================
00007AC2                            
00007AC2                            loc_66F0:
00007AC2 3238 F72C                  		move.w	(v_limittop2).w,d1
00007AC6 6000                       		bra.s	loc_6724
00007AC8                            ; ===========================================================================
00007AC8                            
00007AC8                            loc_66F6:
00007AC8 48C1                       		ext.l	d1
00007ACA E181                       		asl.l	#8,d1
00007ACC D2B8 F704                  		add.l	(v_screenposy).w,d1
00007AD0 4841                       		swap	d1
00007AD2                            
00007AD2                            loc_6700:
00007AD2 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00007AD6 6D00                       		blt.s	loc_6724
00007AD8 0441 0800                  		subi.w	#$800,d1
00007ADC 6500                       		bcs.s	loc_6720
00007ADE 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00007AE4 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00007AEA 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00007AF0 6000                       		bra.s	loc_6724
00007AF2                            ; ===========================================================================
00007AF2                            
00007AF2                            loc_6720:
00007AF2 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00007AF6                            
00007AF6                            loc_6724:
00007AF6 3838 F704                  		move.w	(v_screenposy).w,d4
00007AFA 4841                       		swap	d1
00007AFC 2601                       		move.l	d1,d3
00007AFE 96B8 F704                  		sub.l	(v_screenposy).w,d3
00007B02 E09B                       		ror.l	#8,d3
00007B04 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00007B08 21C1 F704                  		move.l	d1,(v_screenposy).w
00007B0C 3038 F704                  		move.w	(v_screenposy).w,d0
00007B10 0240 0010                  		andi.w	#$10,d0
00007B14 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00007B18 B300                       		eor.b	d1,d0
00007B1A 6600                       		bne.s	@return
00007B1C 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00007B22 3038 F704                  		move.w	(v_screenposy).w,d0
00007B26 9044                       		sub.w	d4,d0
00007B28 6A00                       		bpl.s	@scrollBottom
00007B2A 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00007B30 4E75                       		rts	
00007B32                            ; ===========================================================================
00007B32                            
00007B32                            	@scrollBottom:
00007B32 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00007B38                            
00007B38                            	@return:
00007B38 4E75                       		rts	
00007B3A                            ; End of function ScrollVertical
00007B3A                            
00007B3A                            
00007B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B3A                            ; Scrolls background and sets redraw flags.
00007B3A                            ; d4 - background x offset * $10000
00007B3A                            ; d5 - background y offset * $10000
00007B3A                            
00007B3A                            BGScroll_XY:
00007B3A 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007B3E 2002                       		move.l	d2,d0
00007B40 D084                       		add.l	d4,d0
00007B42 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007B46 2200                       		move.l	d0,d1
00007B48 4841                       		swap	d1
00007B4A 0241 0010                  		andi.w	#$10,d1
00007B4E 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007B52 B701                       		eor.b	d3,d1
00007B54 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00007B56 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007B5C 9082                       		sub.l	d2,d0	; new - old
00007B5E 6A00                       		bpl.s	@scrollRight
00007B60 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00007B66 6000                       		bra.s	BGScroll_YRelative
00007B68                            	@scrollRight:
00007B68 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00007B6E                            BGScroll_YRelative:
00007B6E 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007B72 2003                       		move.l	d3,d0
00007B74 D085                       		add.l	d5,d0
00007B76 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007B7A 2200                       		move.l	d0,d1
00007B7C 4841                       		swap	d1
00007B7E 0241 0010                  		andi.w	#$10,d1
00007B82 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007B86 B501                       		eor.b	d2,d1
00007B88 6600                       		bne.s	@return
00007B8A 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007B90 9083                       		sub.l	d3,d0
00007B92 6A00                       		bpl.s	@scrollBottom
00007B94 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007B9A 4E75                       		rts
00007B9C                            	@scrollBottom:
00007B9C 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007BA2                            	@return:
00007BA2 4E75                       		rts
00007BA4                            ; End of function BGScroll_XY
00007BA4                            
00007BA4                            Bg_Scroll_Y:
00007BA4 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00007BA8 2003                       		move.l	d3,d0
00007BAA D085                       		add.l	d5,d0
00007BAC 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00007BB0 2200                       		move.l	d0,d1
00007BB2 4841                       		swap	d1
00007BB4 0241 0010                  		andi.w	#$10,d1
00007BB8 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007BBC B501                       		eor.b	d2,d1
00007BBE 6600                       		bne.s	@return
00007BC0 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007BC6 9083                       		sub.l	d3,d0
00007BC8 6A00                       		bpl.s	@scrollBottom
00007BCA 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00007BD0 4E75                       		rts
00007BD2                            	@scrollBottom:
00007BD2 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00007BD8                            	@return:
00007BD8 4E75                       		rts
00007BDA                            
00007BDA                            
00007BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BDA                            
00007BDA                            
00007BDA                            BGScroll_YAbsolute:
00007BDA 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00007BDE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007BE2 3200                       		move.w	d0,d1
00007BE4 0241 0010                  		andi.w	#$10,d1
00007BE8 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00007BEC B501                       		eor.b	d2,d1
00007BEE 6600                       		bne.s	@return
00007BF0 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00007BF6 9043                       		sub.w	d3,d0
00007BF8 6A00                       		bpl.s	@scrollBottom
00007BFA 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00007C00 4E75                       		rts
00007C02                            	@scrollBottom:
00007C02 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00007C08                            	@return:
00007C08 4E75                       		rts
00007C0A                            ; End of function BGScroll_YAbsolute
00007C0A                            
00007C0A                            
00007C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C0A                            ; d6 - bit to set for redraw
00007C0A                            
00007C0A                            BGScroll_Block1:
00007C0A 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00007C0E 2002                       		move.l	d2,d0
00007C10 D084                       		add.l	d4,d0
00007C12 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00007C16 2200                       		move.l	d0,d1
00007C18 4841                       		swap	d1
00007C1A 0241 0010                  		andi.w	#$10,d1
00007C1E 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00007C22 B701                       		eor.b	d3,d1
00007C24 6600                       		bne.s	@return
00007C26 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00007C2C 9082                       		sub.l	d2,d0
00007C2E 6A00                       		bpl.s	@scrollRight
00007C30 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007C34 6000                       		bra.s	@return
00007C36                            	@scrollRight:
00007C36 5206                       		addq.b	#1,d6
00007C38 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00007C3C                            	@return:
00007C3C 4E75                       		rts
00007C3E                            ; End of function BGScroll_Block1
00007C3E                            
00007C3E                            
00007C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C3E                            
00007C3E                            
00007C3E                            BGScroll_Block2:
00007C3E 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00007C42 2002                       		move.l	d2,d0
00007C44 D084                       		add.l	d4,d0
00007C46 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00007C4A 2200                       		move.l	d0,d1
00007C4C 4841                       		swap	d1
00007C4E 0241 0010                  		andi.w	#$10,d1
00007C52 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00007C56 B701                       		eor.b	d3,d1
00007C58 6600                       		bne.s	@return
00007C5A 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00007C60 9082                       		sub.l	d2,d0
00007C62 6A00                       		bpl.s	@scrollRight
00007C64 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007C68 6000                       		bra.s	@return
00007C6A                            	@scrollRight:
00007C6A 5206                       		addq.b	#1,d6
00007C6C 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00007C70                            	@return:
00007C70 4E75                       		rts
00007C72                            ;-------------------------------------------------------------------------------
00007C72                            BGScroll_Block3:
00007C72 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00007C76 2002                       		move.l	d2,d0
00007C78 D084                       		add.l	d4,d0
00007C7A 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00007C7E 2200                       		move.l	d0,d1
00007C80 4841                       		swap	d1
00007C82 0241 0010                  		andi.w	#$10,d1
00007C86 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00007C8A B701                       		eor.b	d3,d1
00007C8C 6600                       		bne.s	@return
00007C8E 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00007C94 9082                       		sub.l	d2,d0
00007C96 6A00                       		bpl.s	@scrollRight
00007C98 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007C9C 6000                       		bra.s	@return
00007C9E                            	@scrollRight:
00007C9E 5206                       		addq.b	#1,d6
00007CA0 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00007CA4                            	@return:
00007CA4 4E75                       		rts
00007CA4 4E75                       		rts
00007CA6                            
00007CA6                            
00007CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CA6                            
00007CA6                            ; sub_6886:
00007CA6                            LoadTilesAsYouMove_BGOnly:
00007CA6 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007CAC 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007CB2 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00007CB6 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00007CBA 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007CBE 343C 6000                  		move.w	#$6000,d2
00007CC2 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007CC6 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00007CCA 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00007CCE 6000 0000                  		bra.w	DrawBGScrollBlock2
00007CD2                            ; End of function sub_6886
00007CD2                            
00007CD2                            ; ---------------------------------------------------------------------------
00007CD2                            ; Subroutine to	display	correct	tiles as you move
00007CD2                            ; ---------------------------------------------------------------------------
00007CD2                            
00007CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CD2                            
00007CD2                            
00007CD2                            LoadTilesAsYouMove:
00007CD2 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00007CD8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00007CDE                            		; First, update the background
00007CDE 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00007CE2 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00007CE6 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00007CEA 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00007CEE 6100 0000                  		bsr.w	DrawBGScrollBlock1
00007CF2 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00007CF6 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00007CFA 6100 0000                  		bsr.w	DrawBGScrollBlock2
00007CFE                            		; REV01 added a third scroll block, though, technically,
00007CFE                            		; the RAM for it was already there in REV00
00007CFE 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00007D02 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00007D06 6100 0000                  		bsr.w	DrawBGScrollBlock3
00007D0A                            		; Then, update the foreground
00007D0A 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00007D0E 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00007D12 49F8 A400                  		lea	(v_lvllayout).w,a4
00007D16 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00007D1A                            		; The FG's update function is inlined here
00007D1A 4A12                       		tst.b	(a2)
00007D1C 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00007D1E 0892 0000                  		bclr	#0,(a2)
00007D22 6700                       		beq.s	loc_6908
00007D24                            		; Draw new tiles at the top
00007D24 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00007D26 7AF0                       		moveq	#-16,d5 ; X coordinate
00007D28 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D2C 78F0                       		moveq	#-16,d4 ; Y coordinate
00007D2E 7AF0                       		moveq	#-16,d5 ; X coordinate
00007D30 6100 0000                  		bsr.w	DrawBlocks_LR
00007D34                            
00007D34                            loc_6908:
00007D34 0892 0001                  		bclr	#1,(a2)
00007D38 6700                       		beq.s	loc_6922
00007D3A                            		; Draw new tiles at the bottom
00007D3A 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00007D3E 7AF0                       		moveq	#-16,d5
00007D40 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D44 383C 00E0                  		move.w	#224,d4
00007D48 7AF0                       		moveq	#-16,d5
00007D4A 6100 0000                  		bsr.w	DrawBlocks_LR
00007D4E                            
00007D4E                            loc_6922:
00007D4E 0892 0002                  		bclr	#2,(a2)
00007D52 6700                       		beq.s	loc_6938
00007D54                            		; Draw new tiles on the left
00007D54 78F0                       		moveq	#-16,d4
00007D56 7AF0                       		moveq	#-16,d5
00007D58 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D5C 78F0                       		moveq	#-16,d4
00007D5E 7AF0                       		moveq	#-16,d5
00007D60 6100 0000                  		bsr.w	DrawBlocks_TB
00007D64                            
00007D64                            loc_6938:
00007D64 0892 0003                  		bclr	#3,(a2)
00007D68 6700                       		beq.s	locret_6952
00007D6A                            		; Draw new tiles on the right
00007D6A 78F0                       		moveq	#-16,d4
00007D6C 3A3C 0140                  		move.w	#320,d5
00007D70 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D74 78F0                       		moveq	#-16,d4
00007D76 3A3C 0140                  		move.w	#320,d5
00007D7A 6100 0000                  		bsr.w	DrawBlocks_TB
00007D7E                            
00007D7E                            locret_6952:
00007D7E 4E75                       		rts	
00007D80                            ; End of function LoadTilesAsYouMove
00007D80                            
00007D80                            
00007D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D80                            
00007D80                            ; sub_6954:
00007D80                            DrawBGScrollBlock1:
00007D80 4A12                       		tst.b	(a2)
00007D82 6700 0000                  		beq.w	locret_69F2
00007D86 0892 0000                  		bclr	#0,(a2)
00007D8A 6700                       		beq.s	loc_6972
00007D8C                            		; Draw new tiles at the top
00007D8C 78F0                       		moveq	#-16,d4
00007D8E 7AF0                       		moveq	#-16,d5
00007D90 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007D94 78F0                       		moveq	#-16,d4
00007D96 7AF0                       		moveq	#-16,d5
00007D98 6100 0000                  			bsr.w	DrawBlocks_LR
00007D9C                            
00007D9C                            loc_6972:
00007D9C 0892 0001                  		bclr	#1,(a2)
00007DA0 6700                       		beq.s	loc_698E
00007DA2                            		; Draw new tiles at the top
00007DA2 383C 00E0                  		move.w	#224,d4
00007DA6 7AF0                       		moveq	#-16,d5
00007DA8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00007DAC 383C 00E0                  		move.w	#224,d4
00007DB0 7AF0                       		moveq	#-16,d5
00007DB2 6100 0000                  			bsr.w	DrawBlocks_LR
00007DB6                            
00007DB6                            loc_698E:
00007DB6 0892 0002                  		bclr	#2,(a2)
00007DBA                            
00007DBA                            
00007DBA 6700                       			beq.s	locj_6D56
00007DBC                            			; Draw new tiles on the left
00007DBC 78F0                       			moveq	#-16,d4
00007DBE 7AF0                       			moveq	#-16,d5
00007DC0 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007DC4 78F0                       			moveq	#-16,d4
00007DC6 7AF0                       			moveq	#-16,d5
00007DC8 6100 0000                  			bsr.w	DrawBlocks_TB
00007DCC                            	locj_6D56:
00007DCC                            
00007DCC 0892 0003                  			bclr	#3,(a2)
00007DD0 6700                       			beq.s	locj_6D70
00007DD2                            			; Draw new tiles on the right
00007DD2 78F0                       			moveq	#-16,d4
00007DD4 3A3C 0140                  			move.w	#320,d5
00007DD8 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007DDC 78F0                       			moveq	#-16,d4
00007DDE 3A3C 0140                  			move.w	#320,d5
00007DE2 6100 0000                  			bsr.w	DrawBlocks_TB
00007DE6                            	locj_6D70:
00007DE6                            
00007DE6 0892 0004                  			bclr	#4,(a2)
00007DEA 6700                       			beq.s	locj_6D88
00007DEC                            			; Draw entire row at the top
00007DEC 78F0                       			moveq	#-16,d4
00007DEE 7A00                       			moveq	#0,d5
00007DF0 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007DF4 78F0                       			moveq	#-16,d4
00007DF6 7A00                       			moveq	#0,d5
00007DF8 7C1F                       			moveq	#(512/16)-1,d6
00007DFA 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007DFE                            	locj_6D88:
00007DFE                            
00007DFE 0892 0005                  			bclr	#5,(a2)
00007E02 6700                       			beq.s	locret_69F2
00007E04                            			; Draw entire row at the bottom
00007E04 383C 00E0                  			move.w	#224,d4
00007E08 7A00                       			moveq	#0,d5
00007E0A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007E0E 383C 00E0                  			move.w	#224,d4
00007E12 7A00                       			moveq	#0,d5
00007E14 7C1F                       			moveq	#(512/16)-1,d6
00007E16 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007E1A                            
00007E1A                            locret_69F2:
00007E1A 4E75                       		rts	
00007E1C                            ; End of function DrawBGScrollBlock1
00007E1C                            
00007E1C                            
00007E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E1C                            
00007E1C                            ; Essentially, this draws everything that isn't scroll block 1
00007E1C                            ; sub_69F4:
00007E1C                            DrawBGScrollBlock2:
00007E1C                            
00007E1C 4A12                       			tst.b	(a2)
00007E1E 6700 0000                  			beq.w	locj_6DF2
00007E22 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00007E28 6700 0000                  			beq.w	Draw_SBz
00007E2C 0892 0000                  			bclr	#0,(a2)
00007E30 6700                       			beq.s	locj_6DD2
00007E32                            			; Draw new tiles on the left
00007E32 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00007E36 7AF0                       			moveq	#-16,d5
00007E38 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E3C 383C 0070                  			move.w	#224/2,d4
00007E40 7AF0                       			moveq	#-16,d5
00007E42 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00007E44 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007E48                            	locj_6DD2:
00007E48 0892 0001                  			bclr	#1,(a2)
00007E4C 6700                       			beq.s	locj_6DF2
00007E4E                            			; Draw new tiles on the right
00007E4E 383C 0070                  			move.w	#224/2,d4
00007E52 3A3C 0140                  			move.w	#320,d5
00007E56 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007E5A 383C 0070                  			move.w	#224/2,d4
00007E5E 3A3C 0140                  			move.w	#320,d5
00007E62 7C02                       			moveq	#3-1,d6
00007E64 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007E68                            	locj_6DF2:
00007E68 4E75                       			rts
00007E6A                            ;===============================================================================
00007E6A                            	locj_6DF4:
00007E6A 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00007E7A 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007E8A 0200                       			dc.b $02,$00						
00007E8C                            ;===============================================================================
00007E8C                            	Draw_SBz:
00007E8C 78F0                       			moveq	#-16,d4
00007E8E 0892 0000                  			bclr	#0,(a2)
00007E92 6600                       			bne.s	locj_6E28
00007E94 0892 0001                  			bclr	#1,(a2)
00007E98 6700                       			beq.s	locj_6E72
00007E9A 383C 00E0                  			move.w	#224,d4
00007E9E                            	locj_6E28:
00007E9E 41F9 0000 7E6B             			lea	(locj_6DF4+1).l,a0
00007EA4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007EA8 D044                       			add.w	d4,d0
00007EAA 0240 01F0                  			andi.w	#$1F0,d0
00007EAE E848                       			lsr.w	#4,d0
00007EB0 1030 0000                  			move.b	(a0,d0.w),d0
00007EB4 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00007EBA 3673 0000                  			movea.w	(a3,d0.w),a3
00007EBE 6700                       			beq.s	locj_6E5E
00007EC0 7AF0                       			moveq	#-16,d5
00007EC2 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007EC6 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007ECA 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007ECE 6100 0000                  			bsr.w	DrawBlocks_LR
00007ED2 6000                       			bra.s	locj_6E72
00007ED4                            ;===============================================================================
00007ED4                            	locj_6E5E:
00007ED4 7A00                       			moveq	#0,d5
00007ED6 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007EDA 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00007EDE 4CDF 0030                  			movem.l	(sp)+,d4/d5
00007EE2 7C1F                       			moveq	#(512/16)-1,d6
00007EE4 6100 0000                  			bsr.w	DrawBlocks_LR_3
00007EE8                            	locj_6E72:
00007EE8 4A12                       			tst.b	(a2)
00007EEA 6600                       			bne.s	locj_6E78
00007EEC 4E75                       			rts
00007EEE                            ;===============================================================================			
00007EEE                            	locj_6E78:
00007EEE 78F0                       			moveq	#-16,d4
00007EF0 7AF0                       			moveq	#-16,d5
00007EF2 1012                       			move.b	(a2),d0
00007EF4 0200 00A8                  			andi.b	#$A8,d0
00007EF8 6700                       			beq.s	locj_6E8C
00007EFA E208                       			lsr.b	#1,d0
00007EFC 1480                       			move.b	d0,(a2)
00007EFE 3A3C 0140                  			move.w	#320,d5
00007F02                            	locj_6E8C:
00007F02 41F9 0000 7E6A             			lea	(locj_6DF4).l,a0
00007F08 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007F0C 0240 01F0                  			andi.w	#$1F0,d0
00007F10 E848                       			lsr.w	#4,d0
00007F12 41F0 0000                  			lea	(a0,d0.w),a0
00007F16 6000 0000                  			bra.w	locj_6FEC						
00007F1A                            ;===============================================================================
00007F1A                            
00007F1A                            
00007F1A                            	; locj_6EA4:
00007F1A                            	DrawBGScrollBlock3:
00007F1A 4A12                       			tst.b	(a2)
00007F1C 6700 0000                  			beq.w	locj_6EF0
00007F20 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00007F26 6700 0000                  			beq.w	Draw_Mz
00007F2A 0892 0000                  			bclr	#0,(a2)
00007F2E 6700                       			beq.s	locj_6ED0
00007F30                            			; Draw new tiles on the left
00007F30 383C 0040                  			move.w	#$40,d4
00007F34 7AF0                       			moveq	#-16,d5
00007F36 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F3A 383C 0040                  			move.w	#$40,d4
00007F3E 7AF0                       			moveq	#-16,d5
00007F40 7C02                       			moveq	#3-1,d6
00007F42 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F46                            	locj_6ED0:
00007F46 0892 0001                  			bclr	#1,(a2)
00007F4A 6700                       			beq.s	locj_6EF0
00007F4C                            			; Draw new tiles on the right
00007F4C 383C 0040                  			move.w	#$40,d4
00007F50 3A3C 0140                  			move.w	#320,d5
00007F54 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007F58 383C 0040                  			move.w	#$40,d4
00007F5C 3A3C 0140                  			move.w	#320,d5
00007F60 7C02                       			moveq	#3-1,d6
00007F62 6100 0000                  			bsr.w	DrawBlocks_TB_2
00007F66                            	locj_6EF0:
00007F66 4E75                       			rts
00007F68                            	locj_6EF2:
00007F68 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00007F78 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007F88 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007F98 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FA8 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FB8 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00007FC8 0200                       			dc.b $02,$00
00007FCA                            ;===============================================================================
00007FCA                            	Draw_Mz:
00007FCA 78F0                       			moveq	#-16,d4
00007FCC 0892 0000                  			bclr	#0,(a2)
00007FD0 6600                       			bne.s	locj_6F66
00007FD2 0892 0001                  			bclr	#1,(a2)
00007FD6 6700                       			beq.s	locj_6FAE
00007FD8 383C 00E0                  			move.w	#224,d4
00007FDC                            	locj_6F66:
00007FDC 41F9 0000 7F69             			lea	(locj_6EF2+1).l,a0
00007FE2 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007FE6 0440 0200                  			subi.w	#$200,d0
00007FEA D044                       			add.w	d4,d0
00007FEC 0240 07F0                  			andi.w	#$7F0,d0
00007FF0 E848                       			lsr.w	#4,d0
00007FF2 1030 0000                  			move.b	(a0,d0.w),d0
00007FF6 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00007FFA 6700                       			beq.s	locj_6F9A
00007FFC 7AF0                       			moveq	#-16,d5
00007FFE 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008002 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008006 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000800A 6100 0000                  			bsr.w	DrawBlocks_LR
0000800E 6000                       			bra.s	locj_6FAE
00008010                            ;===============================================================================
00008010                            	locj_6F9A:
00008010 7A00                       			moveq	#0,d5
00008012 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008016 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000801A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000801E 7C1F                       			moveq	#(512/16)-1,d6
00008020 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008024                            	locj_6FAE:
00008024 4A12                       			tst.b	(a2)
00008026 6600                       			bne.s	locj_6FB4
00008028 4E75                       			rts
0000802A                            ;===============================================================================			
0000802A                            	locj_6FB4:
0000802A 78F0                       			moveq	#-16,d4
0000802C 7AF0                       			moveq	#-16,d5
0000802E 1012                       			move.b	(a2),d0
00008030 0200 00A8                  			andi.b	#$A8,d0
00008034 6700                       			beq.s	locj_6FC8
00008036 E208                       			lsr.b	#1,d0
00008038 1480                       			move.b	d0,(a2)
0000803A 3A3C 0140                  			move.w	#320,d5
0000803E                            	locj_6FC8:
0000803E 41F9 0000 7F68             			lea	(locj_6EF2).l,a0
00008044 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008048 0440 0200                  			subi.w	#$200,d0
0000804C 0240 07F0                  			andi.w	#$7F0,d0
00008050 E848                       			lsr.w	#4,d0
00008052 41F0 0000                  			lea	(a0,d0.w),a0
00008056 6000 0000                  			bra.w	locj_6FEC
0000805A                            ;===============================================================================			
0000805A                            	locj_6FE4:
0000805A FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008062                            	locj_6FEC:
00008062 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008064 2E3C 0080 0000             			move.l	#$800000,d7
0000806A                            	locj_6FF4:			
0000806A 7000                       			moveq	#0,d0
0000806C 1018                       			move.b	(a0)+,d0
0000806E 0112                       			btst	d0,(a2)
00008070 6700                       			beq.s	locj_701C
00008072 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008076 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
0000807A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000807E 6100 0000                  			bsr.w	GetBlockData
00008082 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008086 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000808A 6100 0000                  			bsr.w	DrawBlock
0000808E 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008092                            	locj_701C:
00008092 0644 0010                  			addi.w	#16,d4
00008096 51CE FFD2                  			dbf	d6,locj_6FF4
0000809A 4212                       			clr.b	(a2)
0000809C 4E75                       			rts			
0000809E                            
0000809E                            
0000809E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000809E                            
0000809E                            ; Don't be fooled by the name: this function's for drawing from left to right
0000809E                            ; when the camera's moving up or down
0000809E                            ; DrawTiles_LR:
0000809E                            DrawBlocks_LR:
0000809E 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000080A0                            ; DrawTiles_LR_2:
000080A0                            DrawBlocks_LR_2:
000080A0 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000080A6 2200                       		move.l	d0,d1
000080A8                            
000080A8                            	@loop:
000080A8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000080AC 6100 0000                  		bsr.w	GetBlockData
000080B0 2001                       		move.l	d1,d0
000080B2 6100 0000                  		bsr.w	DrawBlock
000080B6 5801                       		addq.b	#4,d1		; Two tiles ahead
000080B8 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000080BC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000080C0 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000080C4 51CE FFE2                  		dbf	d6,@loop
000080C8 4E75                       		rts
000080CA                            ; End of function DrawBlocks_LR
000080CA                            
000080CA                            ; DrawTiles_LR_3:
000080CA                            DrawBlocks_LR_3:
000080CA 2E3C 0080 0000             		move.l	#$800000,d7
000080D0 2200                       		move.l	d0,d1
000080D2                            
000080D2                            	@loop:
000080D2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000080D6 6100 0000                  		bsr.w	GetBlockData_2
000080DA 2001                       		move.l	d1,d0
000080DC 6100 0000                  		bsr.w	DrawBlock
000080E0 5801                       		addq.b	#4,d1
000080E2 0201 007F                  		andi.b	#$7F,d1
000080E6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000080EA 0645 0010                  		addi.w	#16,d5
000080EE 51CE FFE2                  		dbf	d6,@loop
000080F2 4E75                       		rts	
000080F4                            ; End of function DrawBlocks_LR_3
000080F4                            
000080F4                            
000080F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080F4                            
000080F4                            ; Don't be fooled by the name: this function's for drawing from top to bottom
000080F4                            ; when the camera's moving left or right
000080F4                            ; DrawTiles_TB:
000080F4                            DrawBlocks_TB:
000080F4 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
000080F6                            ; DrawTiles_TB_2:
000080F6                            DrawBlocks_TB_2:
000080F6 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000080FC 2200                       		move.l	d0,d1
000080FE                            
000080FE                            	@loop:
000080FE 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008102 6100 0000                  		bsr.w	GetBlockData
00008106 2001                       		move.l	d1,d0
00008108 6100 0000                  		bsr.w	DrawBlock
0000810C 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008110 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
00008114 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008118 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
0000811C 51CE FFE0                  		dbf	d6,@loop
00008120 4E75                       		rts	
00008122                            ; End of function DrawBlocks_TB_2
00008122                            
00008122                            
00008122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008122                            
00008122                            ; Draws a block's worth of tiles
00008122                            ; Parameters:
00008122                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008122                            ; a1 = Pointer to block
00008122                            ; a5 = Pointer to VDP command port
00008122                            ; a6 = Pointer to VDP data port
00008122                            ; d0 = VRAM command to access plane
00008122                            ; d2 = VRAM plane A/B specifier
00008122                            ; d7 = Plane row delta
00008122                            ; DrawTiles:
00008122                            DrawBlock:
00008122 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008124 4840                       		swap	d0
00008126 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
0000812A 6600                       		bne.s	DrawFlipY
0000812C 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
00008130 6600                       		bne.s	DrawFlipX
00008132 2A80                       		move.l	d0,(a5)
00008134 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008136 D087                       		add.l	d7,d0		; Next row
00008138 2A80                       		move.l	d0,(a5)
0000813A 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            
0000813E                            DrawFlipX:
0000813E 2A80                       		move.l	d0,(a5)
00008140 2819                       		move.l	(a1)+,d4
00008142 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008148 4844                       		swap	d4		; Swap the tiles around
0000814A 2C84                       		move.l	d4,(a6)		; Write top two tiles
0000814C D087                       		add.l	d7,d0		; Next row
0000814E 2A80                       		move.l	d0,(a5)
00008150 2819                       		move.l	(a1)+,d4
00008152 0A84 0800 0800             		eori.l	#$8000800,d4
00008158 4844                       		swap	d4
0000815A 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
0000815C 4E75                       		rts	
0000815E                            ; ===========================================================================
0000815E                            
0000815E                            DrawFlipY:
0000815E 0810 0003                  		btst	#3,(a0)
00008162 6600                       		bne.s	DrawFlipXY
00008164 2A80                       		move.l	d0,(a5)
00008166 2A19                       		move.l	(a1)+,d5
00008168 2819                       		move.l	(a1)+,d4
0000816A 0A84 1000 1000             		eori.l	#$10001000,d4
00008170 2C84                       		move.l	d4,(a6)
00008172 D087                       		add.l	d7,d0
00008174 2A80                       		move.l	d0,(a5)
00008176 0A85 1000 1000             		eori.l	#$10001000,d5
0000817C 2C85                       		move.l	d5,(a6)
0000817E 4E75                       		rts	
00008180                            ; ===========================================================================
00008180                            
00008180                            DrawFlipXY:
00008180 2A80                       		move.l	d0,(a5)
00008182 2A19                       		move.l	(a1)+,d5
00008184 2819                       		move.l	(a1)+,d4
00008186 0A84 1800 1800             		eori.l	#$18001800,d4
0000818C 4844                       		swap	d4
0000818E 2C84                       		move.l	d4,(a6)
00008190 D087                       		add.l	d7,d0
00008192 2A80                       		move.l	d0,(a5)
00008194 0A85 1800 1800             		eori.l	#$18001800,d5
0000819A 4845                       		swap	d5
0000819C 2C85                       		move.l	d5,(a6)
0000819E 4E75                       		rts	
000081A0                            ; End of function DrawBlocks
000081A0                            
000081A0                            ; ===========================================================================
000081A0                            ; unused garbage
000081A0                            
000081A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A0                            
000081A0                            ; Gets address of block at a certain coordinate
000081A0                            ; Parameters:
000081A0                            ; a4 = Pointer to level layout
000081A0                            ; d4 = Relative Y coordinate
000081A0                            ; d5 = Relative X coordinate
000081A0                            ; Returns:
000081A0                            ; a0 = Address of block metadata
000081A0                            ; a1 = Address of block
000081A0                            ; DrawBlocks:
000081A0                            GetBlockData:
000081A0 DA53                       			add.w	(a3),d5
000081A2                            	GetBlockData_2:
000081A2 D86B 0004                  			add.w	4(a3),d4
000081A6 43F8 B000                  			lea	(v_16x16).w,a1
000081AA                            		; Turn Y coordinate into index into level layout
000081AA 3604                       		move.w	d4,d3
000081AC E24B                       		lsr.w	#1,d3
000081AE 0243 0380                  		andi.w	#$380,d3
000081B2                            		; Turn X coordinate into index into level layout
000081B2 E64D                       		lsr.w	#3,d5
000081B4 3005                       		move.w	d5,d0
000081B6 EA48                       		lsr.w	#5,d0
000081B8 0240 007F                  		andi.w	#$7F,d0
000081BC                            		; Get chunk from level layout
000081BC D043                       		add.w	d3,d0
000081BE 76FF                       		moveq	#-1,d3
000081C0 1634 0000                  		move.b	(a4,d0.w),d3
000081C4 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000081C6                            		; Turn chunk ID into index into chunk table
000081C6 5303                       		subq.b	#1,d3
000081C8 0243 007F                  		andi.w	#$7F,d3
000081CC EE5B                       		ror.w	#7,d3
000081CE                            		; Turn Y coordinate into index into chunk
000081CE D844                       		add.w	d4,d4
000081D0 0244 01E0                  		andi.w	#$1E0,d4
000081D4                            		; Turn X coordinate into index into chunk
000081D4 0245 001E                  		andi.w	#$1E,d5
000081D8                            		; Get block metadata from chunk
000081D8 D644                       		add.w	d4,d3
000081DA D645                       		add.w	d5,d3
000081DC 2043                       		movea.l	d3,a0
000081DE 3610                       		move.w	(a0),d3
000081E0                            		; Turn block ID into address
000081E0 0243 03FF                  		andi.w	#$3FF,d3
000081E4 E74B                       		lsl.w	#3,d3
000081E6 D2C3                       		adda.w	d3,a1
000081E8                            
000081E8                            locret_6C1E:
000081E8 4E75                       		rts	
000081EA                            ; End of function GetBlockData
000081EA                            
000081EA                            
000081EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081EA                            
000081EA                            ; Produces a VRAM plane access command from coordinates
000081EA                            ; Parameters:
000081EA                            ; d4 = Relative Y coordinate
000081EA                            ; d5 = Relative X coordinate
000081EA                            ; Returns VDP command in d0
000081EA                            Calc_VRAM_Pos:
000081EA DA53                       			add.w	(a3),d5
000081EC                            	Calc_VRAM_Pos_2:
000081EC D86B 0004                  			add.w	4(a3),d4
000081F0                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000081F0                            		; Also note that this wraps the value to the size of the plane:
000081F0                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000081F0 0244 00F0                  		andi.w	#$F0,d4
000081F4 0245 01F0                  		andi.w	#$1F0,d5
000081F8                            		; Transform the adjusted coordinates into a VDP command
000081F8 E94C                       		lsl.w	#4,d4
000081FA E44D                       		lsr.w	#2,d5
000081FC D845                       		add.w	d5,d4
000081FE 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008200 4840                       		swap	d0
00008202 3004                       		move.w	d4,d0
00008204 4E75                       		rts	
00008206                            ; End of function Calc_VRAM_Pos
00008206                            
00008206                            
00008206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008206                            ; not used
00008206                            
00008206                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008206                            ; VRAM layout: the only difference is the high bits of the
00008206                            ; plane's VRAM address, which are 10 instead of 11.
00008206                            ; Both the foreground and background are at $C000 and $E000
00008206                            ; respectively, so this one starting at $8000 makes no sense.
00008206                            ; sub_6C3C:
00008206                            Calc_VRAM_Pos_Unknown:
00008206 D86B 0004                  		add.w	4(a3),d4
0000820A DA53                       		add.w	(a3),d5
0000820C 0244 00F0                  		andi.w	#$F0,d4
00008210 0245 01F0                  		andi.w	#$1F0,d5
00008214 E94C                       		lsl.w	#4,d4
00008216 E44D                       		lsr.w	#2,d5
00008218 D845                       		add.w	d5,d4
0000821A 7002                       		moveq	#2,d0
0000821C 4840                       		swap	d0
0000821E 3004                       		move.w	d4,d0
00008220 4E75                       		rts	
00008222                            ; End of function Calc_VRAM_Pos_Unknown
00008222                            
00008222                            ; ---------------------------------------------------------------------------
00008222                            ; Subroutine to	load tiles as soon as the level	appears
00008222                            ; ---------------------------------------------------------------------------
00008222                            
00008222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008222                            
00008222                            
00008222                            LoadTilesFromStart:
00008222 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008228 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000822E 47F8 F700                  		lea	(v_screenposx).w,a3
00008232 49F8 A400                  		lea	(v_lvllayout).w,a4
00008236 343C 4000                  		move.w	#$4000,d2
0000823A 6100                       		bsr.s	DrawChunks
0000823C 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00008240 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008244 343C 6000                  		move.w	#$6000,d2
00008248 4A38 FE10                  			tst.b	(v_zone).w
0000824C 6700 0000                  			beq.w	Draw_GHz_Bg
00008250 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008256 6700 0000                  			beq.w	Draw_Mz_Bg
0000825A 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
00008260 6700 0000                  			beq.w	Draw_SBz_Bg
00008264 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
0000826A 6700 0000                  			beq.w	Draw_GHz_Bg
0000826E                            ; End of function LoadTilesFromStart
0000826E                            
0000826E                            
0000826E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000826E                            
0000826E                            
0000826E                            DrawChunks:
0000826E 78F0                       		moveq	#-16,d4
00008270 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008272                            
00008272                            	@loop:
00008272 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008276 7A00                       		moveq	#0,d5
00008278 3204                       		move.w	d4,d1
0000827A 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000827E 3801                       		move.w	d1,d4
00008280 7A00                       		moveq	#0,d5
00008282 7C1F                       		moveq	#(512/16)-1,d6
00008284 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008288 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000828C 0644 0010                  		addi.w	#16,d4
00008290 51CE FFE0                  		dbf	d6,@loop
00008294 4E75                       		rts	
00008296                            ; End of function DrawChunks
00008296                            
00008296                            	Draw_GHz_Bg:
00008296 7800                       			moveq	#0,d4
00008298 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000829A                            	locj_7224:			
0000829A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000829E 41F9 0000 0000             			lea	(locj_724a),a0
000082A4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000082A8 D044                       			add.w	d4,d0
000082AA 0240 00F0                  			andi.w	#$F0,d0
000082AE 6100 0000                  			bsr.w	locj_72Ba
000082B2 4CDF 0070                  			movem.l	(sp)+,d4-d6
000082B6 0644 0010                  			addi.w	#16,d4
000082BA 51CE FFDE                  			dbf	d6,locj_7224
000082BE 4E75                       			rts
000082C0                            	locj_724a:
000082C0 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000082D0                            ;-------------------------------------------------------------------------------
000082D0                            	Draw_Mz_Bg:;locj_725a:
000082D0 78F0                       			moveq	#-16,d4
000082D2 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000082D4                            	locj_725E:			
000082D4 48E7 0E00                  			movem.l	d4-d6,-(sp)
000082D8 41F8 7F69                  			lea	(locj_6EF2+1),a0
000082DC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000082E0 0440 0200                  			subi.w	#$200,d0
000082E4 D044                       			add.w	d4,d0
000082E6 0240 07F0                  			andi.w	#$7F0,d0
000082EA 6100 0000                  			bsr.w	locj_72Ba
000082EE 4CDF 0070                  			movem.l	(sp)+,d4-d6
000082F2 0644 0010                  			addi.w	#16,d4
000082F6 51CE FFDC                  			dbf	d6,locj_725E
000082FA 4E75                       			rts
000082FC                            ;-------------------------------------------------------------------------------
000082FC                            	Draw_SBz_Bg:;locj_7288:
000082FC 78F0                       			moveq	#-16,d4
000082FE 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008300                            	locj_728C:			
00008300 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008304 41F8 7E6B                  			lea	(locj_6DF4+1),a0
00008308 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000830C D044                       			add.w	d4,d0
0000830E 0240 01F0                  			andi.w	#$1F0,d0
00008312 6100 0000                  			bsr.w	locj_72Ba
00008316 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000831A 0644 0010                  			addi.w	#16,d4
0000831E 51CE FFE0                  			dbf	d6,locj_728C
00008322 4E75                       			rts
00008324                            ;-------------------------------------------------------------------------------
00008324                            	locj_72B2:
00008324 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
0000832C                            	locj_72Ba:
0000832C E848                       			lsr.w	#4,d0
0000832E 1030 0000                  			move.b	(a0,d0.w),d0
00008332 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008336 6700                       			beq.s	locj_72da
00008338 7AF0                       			moveq	#-16,d5
0000833A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000833E 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
00008342 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008346 6100 FD56                  			bsr.w	DrawBlocks_LR
0000834A 6000                       			bra.s	locj_72EE
0000834C                            	locj_72da:
0000834C 7A00                       			moveq	#0,d5
0000834E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008352 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008356 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000835A 7C1F                       			moveq	#(512/16)-1,d6
0000835C 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
00008360                            	locj_72EE:
00008360 4E75                       			rts
00008362                            
00008362                            ; ---------------------------------------------------------------------------
00008362                            ; Subroutine to load basic level data
00008362                            ; ---------------------------------------------------------------------------
00008362                            
00008362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008362                            
00008362                            
00008362                            LevelDataLoad:
00008362 7000                       		moveq	#0,d0
00008364 1038 FE10                  		move.b	(v_zone).w,d0
00008368 E948                       		lsl.w	#4,d0
0000836A 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00008370 45F2 0000                  		lea	(a2,d0.w),a2
00008374 2F0A                       		move.l	a2,-(sp)
00008376 588A                       		addq.l	#4,a2
00008378 205A                       		movea.l	(a2)+,a0
0000837A 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000837E 303C 0000                  		move.w	#0,d0
00008382 6100 9554                  		bsr.w	EniDec
00008386 205A                       		movea.l	(a2)+,a0
00008388 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000838E 6100 96C6                  		bsr.w	KosDec
00008392 6100 0000                  		bsr.w	LevelLayoutLoad
00008396 301A                       		move.w	(a2)+,d0
00008398 3012                       		move.w	(a2),d0
0000839A 0240 00FF                  		andi.w	#$FF,d0
0000839E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000083A4 6600                       		bne.s	@notSBZ3	; if not, branch
000083A6 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000083A8                            
000083A8                            	@notSBZ3:
000083A8 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000083AE 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000083B0 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000083B6 6600                       		bne.s	@normalpal	; if not, branch
000083B8                            
000083B8                            	@isSBZorFZ:
000083B8 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000083BA                            
000083BA                            	@normalpal:
000083BA 6100 A120                  		bsr.w	PalLoad1	; load palette (based on d0)
000083BE 245F                       		movea.l	(sp)+,a2
000083C0 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000083C2 7000                       		moveq	#0,d0
000083C4 1012                       		move.b	(a2),d0
000083C6 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000083C8 6100 9370                  		bsr.w	AddPLC		; load pattern load cues
000083CC                            
000083CC                            	@skipPLC:
000083CC 4E75                       		rts	
000083CE                            ; End of function LevelDataLoad
000083CE                            
000083CE                            ; ---------------------------------------------------------------------------
000083CE                            ; Level	layout loading subroutine
000083CE                            ; ---------------------------------------------------------------------------
000083CE                            
000083CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083CE                            
000083CE                            
000083CE                            LevelLayoutLoad:
000083CE 47F8 A400                  		lea	(v_lvllayout).w,a3
000083D2 323C 01FF                  		move.w	#$1FF,d1
000083D6 7000                       		moveq	#0,d0
000083D8                            
000083D8                            LevLoad_ClrRam:
000083D8 26C0                       		move.l	d0,(a3)+
000083DA 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000083DE                            
000083DE 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000083E2 7200                       		moveq	#0,d1
000083E4 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000083E8 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
000083EC 7202                       		moveq	#2,d1
000083EE                            ; End of function LevelLayoutLoad
000083EE                            
000083EE                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000083EE                            
000083EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083EE                            
000083EE                            
000083EE                            LevelLayoutLoad2:
000083EE 3038 FE10                  		move.w	(v_zone).w,d0
000083F2 ED08                       		lsl.b	#6,d0
000083F4 EA48                       		lsr.w	#5,d0
000083F6 3400                       		move.w	d0,d2
000083F8 D040                       		add.w	d0,d0
000083FA D042                       		add.w	d2,d0
000083FC D041                       		add.w	d1,d0
000083FE 43F9 0000 0000             		lea	(Level_Index).l,a1
00008404 3031 0000                  		move.w	(a1,d0.w),d0
00008408 43F1 0000                  		lea	(a1,d0.w),a1
0000840C 7200                       		moveq	#0,d1
0000840E 3401                       		move.w	d1,d2
00008410 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008412 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008414                            
00008414                            LevLoad_NumRows:
00008414 3001                       		move.w	d1,d0
00008416 204B                       		movea.l	a3,a0
00008418                            
00008418                            LevLoad_Row:
00008418 10D9                       		move.b	(a1)+,(a0)+
0000841A 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
0000841E 47EB 0080                  		lea	$80(a3),a3	; do next row
00008422 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008426 4E75                       		rts	
00008428                            ; End of function LevelLayoutLoad2
00008428                            
00008428                            		include	"_inc\DynamicLevelEvents.asm"
00008428                            ; ---------------------------------------------------------------------------
00008428                            ; Dynamic level events
00008428                            ; ---------------------------------------------------------------------------
00008428                            
00008428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008428                            
00008428                            
00008428                            DynamicLevelEvents:
00008428 7000                       		moveq	#0,d0
0000842A 1038 FE10                  		move.b	(v_zone).w,d0
0000842E D040                       		add.w	d0,d0
00008430 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008434 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008438 7202                       		moveq	#2,d1
0000843A 3038 F726                  		move.w	(v_limitbtm1).w,d0
0000843E 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008442 6700                       		beq.s	DLE_NoChg	; if not, branch
00008444 6400                       		bcc.s	loc_6DAC
00008446                            
00008446 4441                       		neg.w	d1
00008448 3038 F704                  		move.w	(v_screenposy).w,d0
0000844C B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008450 6300                       		bls.s	loc_6DA0
00008452 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008456 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
0000845C                            
0000845C                            loc_6DA0:
0000845C D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008460 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008466                            
00008466                            DLE_NoChg:
00008466 4E75                       		rts	
00008468                            ; ===========================================================================
00008468                            
00008468                            loc_6DAC:
00008468 3038 F704                  		move.w	(v_screenposy).w,d0
0000846C 5040                       		addq.w	#8,d0
0000846E B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008472 6500                       		bcs.s	loc_6DC4
00008474 0838 0001 D022             		btst	#1,(v_player+obStatus).w
0000847A 6700                       		beq.s	loc_6DC4
0000847C D241                       		add.w	d1,d1
0000847E D241                       		add.w	d1,d1
00008480                            
00008480                            loc_6DC4:
00008480 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008484 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
0000848A 4E75                       		rts	
0000848C                            ; End of function DynamicLevelEvents
0000848C                            
0000848C                            ; ===========================================================================
0000848C                            ; ---------------------------------------------------------------------------
0000848C                            ; Offset index for dynamic level events
0000848C                            ; ---------------------------------------------------------------------------
0000848C 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008490 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008494 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008498 0000                       		dc.w DLE_Ending-DLE_Index
0000849A                            ; ===========================================================================
0000849A                            ; ---------------------------------------------------------------------------
0000849A                            ; Green	Hill Zone dynamic level events
0000849A                            ; ---------------------------------------------------------------------------
0000849A                            
0000849A                            DLE_GHZ:
0000849A 7000                       		moveq	#0,d0
0000849C 1038 FE11                  		move.b	(v_act).w,d0
000084A0 D040                       		add.w	d0,d0
000084A2 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
000084A6 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
000084AA                            ; ===========================================================================
000084AA 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
000084AC 0000                       		dc.w DLE_GHZ2-DLE_GHZx
000084AE 0000                       		dc.w DLE_GHZ3-DLE_GHZx
000084B0                            ; ===========================================================================
000084B0                            
000084B0                            DLE_GHZ1:
000084B0 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000084B6 6600                       		bne.s	gohere
000084B8 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000084BE 4E75                       		rts
000084C0                            gohere:
000084C0 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
000084C6 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
000084CC 6500                       		bcs.s	locret_6E08	; if not, branch
000084CE 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
000084D4                            
000084D4                            locret_6E08:
000084D4 4E75                       		rts	
000084D6                            ; ===========================================================================
000084D6                            
000084D6                            DLE_GHZ2:
000084D6 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000084DC 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000084E2 6500                       		bcs.s	locret_6E3A
000084E4 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
000084EA 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000084F0 6500                       		bcs.s	locret_6E3A
000084F2 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000084F8 6500                       		bcs.s	loc_6E9A
000084FA 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008500 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008506 6400                       		bcc.s	loc_6E8F
00008508 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
0000850E 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008514                            
00008514                            loc_6E8F:
00008514 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
0000851A 6400                       		bcc.s	loc_6E9A
0000851C                            
0000851C                            locret_6E3A:
0000851C 4E75                       		rts	
0000851E                            ; ===========================================================================
0000851E                            
0000851E                            loc_6E9A:
0000851E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008524 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008528 4E75                       		rts		
0000852A                            ; ===========================================================================
0000852A                            
0000852A                            DLE_GHZ3:
0000852A 7000                       		moveq	#0,d0
0000852C 1038 F742                  		move.b	(v_dle_routine).w,d0
00008530 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008534 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008538                            ; ===========================================================================
00008538 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
0000853A 0000                       		dc.w DLE_GHZ3boss-off_6E4A
0000853C 0000                       		dc.w DLE_GHZ3end-off_6E4A
0000853E                            ; ===========================================================================
0000853E                            
0000853E                            DLE_GHZ3main:
0000853E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008544 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
0000854A 6500                       		bcs.s	locret_6E96
0000854C 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008552 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008558 6500                       		bcs.s	locret_6E96
0000855A 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008560 6500                       		bcs.s	loc_6E98
00008562 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008568 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
0000856E 6400                       		bcc.s	loc_6E8E
00008570 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008576 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
0000857C                            
0000857C                            loc_6E8E:
0000857C 0C78 1300 F700             		cmpi.w	#$1300,(v_screenposx).w
00008582 6400                       		bcc.s	loc_6E98
00008584                            
00008584                            locret_6E96:
00008584 4E75                       		rts	
00008586                            ; ===========================================================================
00008586                            
00008586                            loc_6E98:
00008586 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
0000858C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008590 4E75                       		rts	
00008592                            ; ===========================================================================
00008592                            
00008592                            DLE_GHZ3boss:
00008592 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008598 6400                       		bcc.s	loc_6EB0
0000859A 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000859E                            
0000859E                            loc_6EB0:
0000859E 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
000085A4 6500                       		bcs.s	locret_6EE8
000085A6 6100 0000                  		bsr.w	FindFreeObj
000085AA 6600                       		bne.s	loc_6ED0
000085AC 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
000085B0 337C 2A60 0008             		move.w	#$2A60,obX(a1)
000085B6 337C 0280 000C             		move.w	#$280,obY(a1)
000085BC                            
000085BC                            loc_6ED0:
000085C4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000085CA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000085CE 7000                       		moveq	#plcid_Boss,d0
000085D0 6000 9168                  		bra.w	AddPLC		; load boss patterns
000085D4                            ; ===========================================================================
000085D4                            
000085D4                            locret_6EE8:
000085D4 4E75                       		rts	
000085D6                            ; ===========================================================================
000085D6                            
000085D6                            DLE_GHZ3end:
000085D6 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000085DC 4E75                       		rts	
000085DE                            ; ===========================================================================
000085DE                            ; ---------------------------------------------------------------------------
000085DE                            ; Labyrinth Zone dynamic level events
000085DE                            ; ---------------------------------------------------------------------------
000085DE                            
000085DE                            DLE_LZ:
000085DE 7000                       		moveq	#0,d0
000085E0 1038 FE11                  		move.b	(v_act).w,d0
000085E4 D040                       		add.w	d0,d0
000085E6 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
000085EA 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
000085EE                            ; ===========================================================================
000085EE 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
000085F0 0000                       		dc.w DLE_LZ12-DLE_LZx
000085F2 0000                       		dc.w DLE_LZ3-DLE_LZx
000085F4 0000                       		dc.w DLE_SBZ3-DLE_LZx
000085F6                            ; ===========================================================================
000085F6                            
000085F6                            DLE_LZ12:
000085F6 4E75                       		rts	
000085F8                            ; ===========================================================================
000085F8                            
000085F8                            DLE_LZ3:
000085F8 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
000085FC 6700                       		beq.s	loc_6F28	; if not, branch
000085FE 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008602 0C11 0007                  		cmpi.b	#7,(a1)
00008606 6700                       		beq.s	loc_6F28
00008608 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008614                            
00008614                            loc_6F28:
00008614 4A38 F742                  		tst.b	(v_dle_routine).w
00008618 6600                       		bne.s	locret_6F64
0000861A 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008620 6500                       		bcs.s	locret_6F62
00008622 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008628 6400                       		bcc.s	locret_6F62
0000862A 6100 0000                  		bsr.w	FindFreeObj
0000862E 6600                       		bne.s	loc_6F4A
00008630 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008634                            
00008634                            loc_6F4A:
0000863C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008642 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008646 7000                       		moveq	#plcid_Boss,d0
00008648 6000 90F0                  		bra.w	AddPLC		; load boss patterns
0000864C                            ; ===========================================================================
0000864C                            
0000864C                            locret_6F62:
0000864C 4E75                       		rts	
0000864E                            ; ===========================================================================
0000864E                            
0000864E                            locret_6F64:
0000864E 4E75                       		rts	
00008650                            ; ===========================================================================
00008650                            
00008650                            DLE_SBZ3:
00008650 4A38 F742                          tst.b	(v_dle_routine).w
00008654 6600                               bne.s   loc_6C28
00008656 4A38 F7E1                  		tst.b	(f_switch+$1).w	; has switch $F	been pressed?
0000865A 6700                       		beq.s	loc_6C28	; if not, branch
00008664 11FC 0001 F742             		move.b	#1, (v_dle_routine).w
0000866A                            loc_6C28:
0000866A 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008670 6500                       		bcs.s	locret_6F8C
00008672 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008678 6400                       		bcc.s	locret_6F8C	; if not, branch
0000867A 4238 FE30                  		clr.b	(v_lastlamp).w
0000867E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008684 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
0000868A 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008690                            
00008690                            locret_6F8C:
00008690 4E75                       		rts	
00008692                            ; ===========================================================================
00008692                            ; ---------------------------------------------------------------------------
00008692                            ; Marble Zone dynamic level events
00008692                            ; ---------------------------------------------------------------------------
00008692                            
00008692                            DLE_MZ:
00008692 7000                       		moveq	#0,d0
00008694 1038 FE11                  		move.b	(v_act).w,d0
00008698 D040                       		add.w	d0,d0
0000869A 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
0000869E 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
000086A2                            ; ===========================================================================
000086A2 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000086A4 0000                       		dc.w DLE_MZ2-DLE_MZx
000086A6 0000                       		dc.w DLE_MZ3-DLE_MZx
000086A8                            ; ===========================================================================
000086A8                            
000086A8                            DLE_MZ1:
000086A8 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000086AE 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
000086B4 6500                       		bcs.s	locret_6FE8
000086B6 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
000086BC                            
000086BC                            locret_6FE8:
000086BC 4E75                       		rts	
000086BE                            
000086BE                            ; ===========================================================================
000086BE                            
000086BE                            DLE_MZ2:
000086BE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
000086C4 0C78 2110 F700             		cmpi.w	#$2110,(v_screenposx).w
000086CA 6500                       		bcs.s	locret_6FE9
000086CC 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
000086D2                            		
000086D2                            locret_6FE9:
000086D2 4E75                       		rts	
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            DLE_MZ3:
000086D4 7000                       		moveq	#0,d0
000086D6 1038 F742                  		move.b	(v_dle_routine).w,d0
000086DA 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000086DE 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000086E2                            ; ===========================================================================
000086E2 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
000086E4 0000                       		dc.w DLE_MZ3cutscene-off_7098
000086E6 0000                       		dc.w DLE_MZ3boss2-off_7098
000086E8 0000                       		dc.w DLE_MZ3end-off_7098
000086EA                            ; ===========================================================================
000086EA                            
000086EA                            DLE_MZ3boss:
000086EA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000086F0 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
000086F6 6500                       		bcs.s	locret_70E8
000086F8 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000086FE 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008704 6500                       		bcs.s	locret_70E8
00008706 6100 0000                  		bsr.w	FindFreeObj
0000870A 6600                       		bne.s	loc_70D0
0000870C 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008710 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008716 337C 022C 000C             		move.w	#$22C,obY(a1)
0000871C                            
0000871C                            loc_70D0:
00008724 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000872A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000872E 7000                       		moveq	#plcid_Boss,d0
00008730 6000 9008                  		bra.w	AddPLC		; load boss patterns
00008734                            ; ===========================================================================
00008734                            
00008734                            locret_70E8:
00008734 4E75                       		rts	
00008736                            		
00008736                            DLE_MZ3cutscene:
00008736 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000873C 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
00008742 6500                       		bcs.s	locret_8298
00008744 6100 0000                  		bsr.w	FindFreeObj
00008748 6600                       		bne.s	locret_8298
0000874A 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
0000874E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008752 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008754 6000 8FE4                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008758                            ; ===========================================================================
00008758                            
00008758                            locret_8298:
00008758 4E75                       		rts	
0000875A                            ; ===========================================================================
0000875A                            
0000875A                            DLE_MZ3boss2:
0000875A 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008760 6500                       		bcs.s	loc_72C6
00008762 6100 0000                  		bsr.w	FindFreeObj
00008766 6600                       		bne.s	loc_72C0
00008768 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
0000876C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008778                            
00008778                            loc_72C0:
00008778 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000877E                            
0000877E                            loc_72C6:
0000877E 6000                       		bra.s	loc_72D2
00008780                            ; ===========================================================================
00008780                            
00008780                            DLE_MZ3end:
00008780 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008786 6500                       		bcs.s	loc_72D2
00008788 4E75                       		rts	
0000878A                            ; ===========================================================================
0000878A                            
0000878A                            loc_72D2:
0000878A 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008790 4E75                       		rts
00008792                            
00008792                            
00008792                            ; ===========================================================================
00008792                            ; ---------------------------------------------------------------------------
00008792                            ; Star Light Zone dynamic level events
00008792                            ; ---------------------------------------------------------------------------
00008792                            
00008792                            DLE_SLZ:
00008792 7000                       		moveq	#0,d0
00008794 1038 FE11                  		move.b	(v_act).w,d0
00008798 D040                       		add.w	d0,d0
0000879A 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
0000879E 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
000087A2                            ; ===========================================================================
000087A2 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
000087A4 0000                       		dc.w DLE_SLZ12-DLE_SLZx
000087A6 0000                       		dc.w DLE_SLZ3-DLE_SLZx
000087A8                            ; ===========================================================================
000087A8                            
000087A8                            DLE_SLZ12:
000087A8 4E75                       		rts	
000087AA                            ; ===========================================================================
000087AA                            
000087AA                            DLE_SLZ3:
000087AA 7000                       		moveq	#0,d0
000087AC 1038 F742                  		move.b	(v_dle_routine).w,d0
000087B0 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000087B4 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000087B8                            ; ===========================================================================
000087B8 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000087BA 0000                       		dc.w DLE_SLZ3boss-off_7118
000087BC 0000                       		dc.w DLE_SLZ3end-off_7118
000087BE                            ; ===========================================================================
000087BE                            
000087BE                            DLE_SLZ3main:
000087BE 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000087C4 6500                       		bcs.s	locret_7130
000087C6 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000087CC 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087D0                            
000087D0                            locret_7130:
000087D0 4E75                       		rts	
000087D2                            ; ===========================================================================
000087D2                            
000087D2                            DLE_SLZ3boss:
000087D2 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000087D8 6500                       		bcs.s	locret_715C
000087DA 6100 0000                  		bsr.w	FindFreeObj
000087DE 6600                       		bne.s	loc_7144
000087E0 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
000087E4                            
000087E4                            loc_7144:
000087EC 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000087F2 5438 F742                  		addq.b	#2,(v_dle_routine).w
000087F6 7000                       		moveq	#plcid_Boss,d0
000087F8 6000 8F40                  		bra.w	AddPLC		; load boss patterns
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            locret_715C:
000087FC 4E75                       		rts	
000087FE                            ; ===========================================================================
000087FE                            
000087FE                            DLE_SLZ3end:
000087FE 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008804 4E75                       		rts
00008806 4E75                       		rts
00008808                            ; ===========================================================================
00008808                            ; ---------------------------------------------------------------------------
00008808                            ; Spring Yard Zone dynamic level events
00008808                            ; ---------------------------------------------------------------------------
00008808                            
00008808                            DLE_SYZ:
00008808 7000                       		moveq	#0,d0
0000880A 1038 FE11                  		move.b	(v_act).w,d0
0000880E D040                       		add.w	d0,d0
00008810 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008814 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008818                            ; ===========================================================================
00008818 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
0000881A 0000                       		dc.w DLE_SYZ2-DLE_SYZx
0000881C 0000                       		dc.w DLE_SYZ3-DLE_SYZx
0000881E                            ; ===========================================================================
0000881E                            
0000881E                            DLE_SYZ1:
0000881E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008824 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
0000882A 6500                       		bcs.s	locret_71A2
0000882C 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008832 4E75                       		rts	
00008834                            ; ===========================================================================
00008834                            
00008834                            DLE_SYZ2:
00008834 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000883A 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008840 6500                       		bcs.s	locret_71A2
00008842 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008848 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
0000884E 6500                       		bcs.s	locret_71A2
00008850 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008856                            
00008856                            locret_71A2:
00008856 4E75                       		rts	
00008858                            ; ===========================================================================
00008858                            
00008858                            DLE_SYZ3:
00008858 7000                       		moveq	#0,d0
0000885A 1038 F742                  		move.b	(v_dle_routine).w,d0
0000885E 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008862 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008866                            ; ===========================================================================
00008866 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008868 0000                       		dc.w DLE_SYZ3boss-off_71B2
0000886A 0000                       		dc.w DLE_SYZ3end-off_71B2
0000886C                            ; ===========================================================================
0000886C                            
0000886C                            DLE_SYZ3main:
0000886C 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008872 6500                       		bcs.s	locret_71CE
00008874 6100 0000                  		bsr.w	FindFreeObj
00008878 6600                       		bne.s	locret_71CE
0000887A 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
0000887E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008882                            
00008882                            locret_71CE:
00008882 4E75                       		rts	
00008884                            ; ===========================================================================
00008884                            
00008884                            DLE_SYZ3boss:
00008884 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
0000888A 6500                       		bcs.s	locret_7200
0000888C 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008892 6100 0000                  		bsr.w	FindFreeObj
00008896 6600                       		bne.s	loc_71EC
00008898 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
0000889C 5438 F742                  		addq.b	#2,(v_dle_routine).w
000088A0                            
000088A0                            loc_71EC:
000088A8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000088AE 7000                       		moveq	#plcid_Boss,d0
000088B0 6000 8E88                  		bra.w	AddPLC		; load boss patterns
000088B4                            ; ===========================================================================
000088B4                            
000088B4                            locret_7200:
000088B4 4E75                       		rts	
000088B6                            ; ===========================================================================
000088B6                            
000088B6                            DLE_SYZ3end:
000088B6 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000088BC 4E75                       		rts	
000088BE                            ; ===========================================================================
000088BE                            ; ---------------------------------------------------------------------------
000088BE                            ; Scrap	Brain Zone dynamic level events
000088BE                            ; ---------------------------------------------------------------------------
000088BE                            
000088BE                            DLE_SBZ:
000088BE 7000                       		moveq	#0,d0
000088C0 1038 FE11                  		move.b	(v_act).w,d0
000088C4 D040                       		add.w	d0,d0
000088C6 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000088CA 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000088CE                            ; ===========================================================================
000088CE 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000088D0 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000088D2 0000                       		dc.w DLE_FZ-DLE_SBZx
000088D4                            ; ===========================================================================
000088D4                            
000088D4                            DLE_SBZ1:
000088D4 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000088DA 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
000088E0 6500                       		bcs.s	locret_7242
000088E2 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
000088E8 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000088EE 6500                       		bcs.s	locret_7242
000088F0 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
000088F6                            
000088F6                            locret_7242:
000088F6 4E75                       		rts	
000088F8                            ; ===========================================================================
000088F8                            
000088F8                            DLE_SBZ2:
000088F8 7000                       		moveq	#0,d0
000088FA 1038 F742                  		move.b	(v_dle_routine).w,d0
000088FE 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008902 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008906                            ; ===========================================================================
00008906 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008908 0000                       		dc.w DLE_SBZ2boss-off_7252
0000890A 0000                       		dc.w DLE_SBZ2boss2-off_7252
0000890C 0000                       		dc.w DLE_SBZ2end-off_7252
0000890E                            ; ===========================================================================
0000890E                            
0000890E                            DLE_SBZ2main:
0000890E 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008914 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
0000891A 6500                       		bcs.s	locret_727A
0000891C 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008922 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008928 6500                       		bcs.s	locret_727A
0000892A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000892E                            
0000892E                            locret_727A:
0000892E 4E75                       		rts	
00008930                            ; ===========================================================================
00008930                            
00008930                            DLE_SBZ2boss:
00008930 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008936 6500                       		bcs.s	locret_7298
00008938 6100 0000                  		bsr.w	FindFreeObj
0000893C 6600                       		bne.s	locret_7298
0000893E 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008942 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008946 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008948 6000 8DF0                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
0000894C                            ; ===========================================================================
0000894C                            
0000894C                            locret_7298:
0000894C 4E75                       		rts	
0000894E                            ; ===========================================================================
0000894E                            
0000894E                            DLE_SBZ2boss2:
0000894E 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008954 6500                       		bcs.s	loc_72B6
00008956 6100 0000                  		bsr.w	FindFreeObj
0000895A 6600                       		bne.s	loc_72B0
0000895C 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008960 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008964                            
00008964                            loc_72B0:
00008964 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000896A                            
0000896A                            loc_72B6:
0000896A 6000                       		bra.s	loc_72C2
0000896C                            ; ===========================================================================
0000896C                            
0000896C                            DLE_SBZ2end:
0000896C 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008972 6500                       		bcs.s	loc_72C2
00008974 4E75                       		rts	
00008976                            ; ===========================================================================
00008976                            
00008976                            loc_72C2:
00008976 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000897C 4E75                       		rts	
0000897E                            ; ===========================================================================
0000897E                            
0000897E                            DLE_FZ:
0000897E 7000                       		moveq	#0,d0
00008980 1038 F742                  		move.b	(v_dle_routine).w,d0
00008984 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008988 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000898C                            ; ===========================================================================
0000898C 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008990 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008994 0000                       		dc.w DLE_FZend2-off_72D8
00008996                            ; ===========================================================================
00008996                            
00008996                            DLE_FZmain:
00008996 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
0000899C 6500                       		bcs.s	loc_72F4
0000899E 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089A2 7000                       		moveq	#plcid_FZBoss,d0
000089A4 6100 8D94                  		bsr.w	AddPLC		; load FZ boss patterns
000089A8                            
000089A8                            loc_72F4:
000089A8 60CC                       		bra.s	loc_72C2
000089AA                            ; ===========================================================================
000089AA                            
000089AA                            DLE_FZboss:
000089AA 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
000089B0 6500                       		bcs.s	loc_7312
000089B2 6100 0000                  		bsr.w	FindFreeObj
000089B6 6600                       		bne.s	loc_7312
000089B8 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
000089BC 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089C0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000089C6                            
000089C6                            loc_7312:
000089C6 60AE                       		bra.s	loc_72C2
000089C8                            ; ===========================================================================
000089C8                            
000089C8                            DLE_FZend:
000089C8 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
000089CE 6500                       		bcs.s	loc_7320
000089D0 5438 F742                  		addq.b	#2,(v_dle_routine).w
000089D4                            
000089D4                            loc_7320:
000089D4 60A0                       		bra.s	loc_72C2
000089D6                            ; ===========================================================================
000089D6                            
000089D6                            locret_7322:
000089D6 4E75                       		rts	
000089D8                            ; ===========================================================================
000089D8                            
000089D8                            DLE_FZend2:
000089D8 609C                       		bra.s	loc_72C2
000089DA                            ; ===========================================================================
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            ; Ending sequence dynamic level events (empty)
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            
000089DA                            DLE_Ending:
000089DA 4E75                       		rts	
000089DA 4E75                       		rts	
000089DC                            
000089DC                            		include	"_incObj\11 Bridge (part 1).asm"
000089DC                            ; ---------------------------------------------------------------------------
000089DC                            ; Object 11 - GHZ bridge
000089DC                            ; ---------------------------------------------------------------------------
000089DC                            
000089DC                            Bridge:
000089DC 7000                       		moveq	#0,d0
000089DE 1028 0024                  		move.b	obRoutine(a0),d0
000089E2 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
000089E6 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
000089EA                            ; ===========================================================================
000089EA 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
000089EE 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
000089F2 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
000089F6                            ; ===========================================================================
000089F6                            
000089F6                            Bri_Main:	; Routine 0
000089F6 5428 0024                  		addq.b	#2,obRoutine(a0)
000089FA 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008A02 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008A08 117C 0004 0001             		move.b	#4,obRender(a0)
00008A0E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008A14 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008A1A 3428 000C                  		move.w	obY(a0),d2
00008A1E 3628 0008                  		move.w	obX(a0),d3
00008A22 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008A24 45E8 0028                  		lea	obSubtype(a0),a2
00008A28 7200                       		moveq	#0,d1
00008A2A 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008A2C 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008A30 3001                       		move.w	d1,d0
00008A32 E248                       		lsr.w	#1,d0
00008A34 E948                       		lsl.w	#4,d0
00008A36 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008A38 5501                       		subq.b	#2,d1
00008A3A 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008A3C                            
00008A3C                            @buildloop:
00008A3C 6100 0000                  		bsr.w	FindFreeObj
00008A40 6600                       		bne.s	Bri_Action
00008A42 5228 0028                  		addq.b	#1,obSubtype(a0)
00008A46 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008A4A 6600                       		bne.s	@notleftmost	; if not, branch
00008A4C                            
00008A4C 0643 0010                  		addi.w	#$10,d3
00008A50 3142 000C                  		move.w	d2,obY(a0)
00008A54 3142 003C                  		move.w	d2,$3C(a0)
00008A58 3A08                       		move.w	a0,d5
00008A5A 0445 D000                  		subi.w	#$D000,d5
00008A5E EC4D                       		lsr.w	#6,d5
00008A60 0245 007F                  		andi.w	#$7F,d5
00008A64 14C5                       		move.b	d5,(a2)+
00008A66 5228 0028                  		addq.b	#1,obSubtype(a0)
00008A6A                            
00008A6A                            	@notleftmost:
00008A6A 3A09                       		move.w	a1,d5
00008A6C 0445 D000                  		subi.w	#$D000,d5
00008A70 EC4D                       		lsr.w	#6,d5
00008A72 0245 007F                  		andi.w	#$7F,d5
00008A76 14C5                       		move.b	d5,(a2)+
00008A78 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00008A7E 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00008A80 3342 000C                  		move.w	d2,obY(a1)
00008A84 3342 003C                  		move.w	d2,$3C(a1)
00008A88 3343 0008                  		move.w	d3,obX(a1)
00008A8C 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00008A94 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00008A9A 137C 0004 0001             		move.b	#4,obRender(a1)
00008AA0 337C 0180 0018             		move.w	#$180,obPriority(a1)
00008AA6 137C 0008 0014             		move.b	#8,obActWid(a1)
00008AAC 0643 0010                  		addi.w	#$10,d3
00008AB0 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00008AB4                            
00008AB4                            Bri_Action:	; Routine 2
00008AB4 6100                       		bsr.s	Bri_Solid
00008AB6 4A28 003E                  		tst.b	$3E(a0)
00008ABA 6700                       		beq.s	@display
00008ABC 5928 003E                  		subq.b	#4,$3E(a0)
00008AC0 6100 0000                  		bsr.w	Bri_Bend
00008AC4                            
00008AC4                            	@display:
00008AC4 6100 0000                  		bsr.w	DisplaySprite
00008AC8 6000 0000                  		bra.w	Bri_ChkDel
00008ACC                            
00008ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008ACC                            
00008ACC                            
00008ACC                            Bri_Solid:
00008ACC 7200                       		moveq	#0,d1
00008ACE 1228 0028                  		move.b	obSubtype(a0),d1
00008AD2 E749                       		lsl.w	#3,d1
00008AD4 3401                       		move.w	d1,d2
00008AD6 5041                       		addq.w	#8,d1
00008AD8 D442                       		add.w	d2,d2
00008ADA 43F8 D000                  		lea	(v_player).w,a1
00008ADE 4A69 0012                  		tst.w	obVelY(a1)
00008AE2 6B00 0000                  		bmi.w	Plat_Exit
00008AE6 3029 0008                  		move.w	obX(a1),d0
00008AEA 9068 0008                  		sub.w	obX(a0),d0
00008AEE D041                       		add.w	d1,d0
00008AF0 6B00 0000                  		bmi.w	Plat_Exit
00008AF4 B042                       		cmp.w	d2,d0
00008AF6 6400 0000                  		bcc.w	Plat_Exit
00008AFA 6000                       		bra.s	Plat_NoXCheck
00008AFC                            ; End of function Bri_Solid
00008AFC                            ; End of function Bri_Solid
00008AFC                            
00008AFC                            ; ---------------------------------------------------------------------------
00008AFC                            ; Platform subroutine
00008AFC                            ; ---------------------------------------------------------------------------
00008AFC                            
00008AFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AFC                            
00008AFC                            PlatformObject:
00008AFC 43F8 D000                  		lea	(v_player).w,a1
00008B00 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00008B04 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00008B08                            
00008B08                            ;		perform x-axis range check
00008B08 3029 0008                  		move.w	obX(a1),d0
00008B0C 9068 0008                  		sub.w	obX(a0),d0
00008B10 D041                       		add.w	d1,d0
00008B12 6B00 0000                  		bmi.w	Plat_Exit
00008B16 D241                       		add.w	d1,d1
00008B18 B041                       		cmp.w	d1,d0
00008B1A 6400 0000                  		bhs.w	Plat_Exit
00008B1E                            
00008B1E                            	Plat_NoXCheck:
00008B1E 3028 000C                  		move.w	obY(a0),d0
00008B22 5140                       		subq.w	#8,d0
00008B24                            
00008B24                            Platform3:
00008B24                            ;		perform y-axis range check
00008B24 3429 000C                  		move.w	obY(a1),d2
00008B28 1229 0016                  		move.b	obHeight(a1),d1
00008B2C 4881                       		ext.w	d1
00008B2E D242                       		add.w	d2,d1
00008B30 5841                       		addq.w	#4,d1
00008B32 9041                       		sub.w	d1,d0
00008B34 6200 0000                  		bhi.w	Plat_Exit
00008B38 0C40 FFF0                  		cmpi.w	#-$10,d0
00008B3C 6500 0000                  		blo.w	Plat_Exit
00008B40                            
00008B40 4A38 F7C8                  		tst.b	(f_lockmulti).w
00008B44 6B00 0000                  		bmi.w	Plat_Exit
00008B48 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00008B4E 6400 0000                  		bhs.w	Plat_Exit
00008B52 D440                       		add.w	d0,d2
00008B54 5642                       		addq.w	#3,d2
00008B56 3342 000C                  		move.w	d2,obY(a1)
00008B5A 5428 0024                  		addq.b	#2,obRoutine(a0)
00008B5E                            
00008B5E                            loc_74AE:
00008B5E 0829 0003 0022             		btst	#3,obStatus(a1)
00008B64 6700                       		beq.s	loc_74DC
00008B66 7000                       		moveq	#0,d0
00008B68 1029 003D                  		move.b	$3D(a1),d0
00008B6C ED48                       		lsl.w	#6,d0
00008B6E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008B74 2440                       		movea.l	d0,a2
00008B76 08AA 0003 0022             		bclr	#3,obStatus(a2)
00008B7C 422A 0025                  		clr.b	ob2ndRout(a2)
00008B80 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00008B86 6600                       		bne.s	loc_74DC
00008B88 552A 0024                  		subq.b	#2,obRoutine(a2)
00008B8C                            
00008B8C                            loc_74DC:
00008B8C 3008                       		move.w	a0,d0
00008B8E 0440 D000                  		subi.w	#-$3000,d0
00008B92 EC48                       		lsr.w	#6,d0
00008B94 0240 007F                  		andi.w	#$7F,d0
00008B98 1340 003D                  		move.b	d0,$3D(a1)
00008B9C 137C 0000 0026             		move.b	#0,obAngle(a1)
00008BA2 337C 0000 0012             		move.w	#0,obVelY(a1)
00008BA8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00008BAE 0829 0001 0022             		btst	#1,obStatus(a1)
00008BB4 6700                       		beq.s	loc_7512
00008BB6 2F08                       		move.l	a0,-(sp)
00008BB8 2049                       		movea.l	a1,a0
00008BBA 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00008BC0 205F                       		movea.l	(sp)+,a0
00008BC2                            
00008BC2                            loc_7512:
00008BC2 08E9 0003 0022             		bset	#3,obStatus(a1)
00008BC8 08E8 0003 0022             		bset	#3,obStatus(a0)
00008BCE                            
00008BCE                            Plat_Exit:
00008BCE 4E75                       		rts	
00008BD0                            ; End of function PlatformObject
00008BD0                            
00008BD0                            ; ---------------------------------------------------------------------------
00008BD0                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008BD0                            ; ---------------------------------------------------------------------------
00008BD0                            
00008BD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BD0                            
00008BD0                            
00008BD0                            SlopeObject:
00008BD0 43F8 D000                  		lea	(v_player).w,a1
00008BD4 4A69 0012                  		tst.w	obVelY(a1)
00008BD8 6B00 FFF4                  		bmi.w	Plat_Exit
00008BDC 3029 0008                  		move.w	obX(a1),d0
00008BE0 9068 0008                  		sub.w	obX(a0),d0
00008BE4 D041                       		add.w	d1,d0
00008BE6 6BE6                       		bmi.s	Plat_Exit
00008BE8 D241                       		add.w	d1,d1
00008BEA B041                       		cmp.w	d1,d0
00008BEC 64E0                       		bhs.s	Plat_Exit
00008BEE 0828 0000 0001             		btst	#0,obRender(a0)
00008BF4 6700                       		beq.s	loc_754A
00008BF6 4640                       		not.w	d0
00008BF8 D041                       		add.w	d1,d0
00008BFA                            
00008BFA                            loc_754A:
00008BFA E248                       		lsr.w	#1,d0
00008BFC 7600                       		moveq	#0,d3
00008BFE 1632 0000                  		move.b	(a2,d0.w),d3
00008C02 3028 000C                  		move.w	obY(a0),d0
00008C06 9043                       		sub.w	d3,d0
00008C08 6000 FF1A                  		bra.w	Platform3
00008C0C                            ; End of function SlopeObject
00008C0C                            
00008C0C                            
00008C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C0C                            
00008C0C                            
00008C0C                            Swing_Solid:
00008C0C 43F8 D000                  		lea	(v_player).w,a1
00008C10 4A69 0012                  		tst.w	obVelY(a1)
00008C14 6B00 FFB8                  		bmi.w	Plat_Exit
00008C18 3029 0008                  		move.w	obX(a1),d0
00008C1C 9068 0008                  		sub.w	obX(a0),d0
00008C20 D041                       		add.w	d1,d0
00008C22 6B00 FFAA                  		bmi.w	Plat_Exit
00008C26 D241                       		add.w	d1,d1
00008C28 B041                       		cmp.w	d1,d0
00008C2A 6400 FFA2                  		bhs.w	Plat_Exit
00008C2E 3028 000C                  		move.w	obY(a0),d0
00008C32 9043                       		sub.w	d3,d0
00008C34 6000 FEEE                  		bra.w	Platform3
00008C38                            ; End of function Obj15_Solid
00008C38                            
00008C38                            ; ===========================================================================
00008C38                            
00008C38                            		include	"_incObj\11 Bridge (part 2).asm"
00008C38                            
00008C38                            Bri_Platform:	; Routine 4
00008C38 6100                       		bsr.s	Bri_WalkOff
00008C3A 6100 0000                  		bsr.w	DisplaySprite
00008C3E 6000 0000                  		bra.w	Bri_ChkDel
00008C42                            
00008C42                            ; ---------------------------------------------------------------------------
00008C42                            ; Subroutine allowing Sonic to walk off a bridge
00008C42                            ; ---------------------------------------------------------------------------
00008C42                            
00008C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C42                            
00008C42                            
00008C42                            Bri_WalkOff:
00008C42 7200                       		moveq	#0,d1
00008C44 1228 0028                  		move.b	obSubtype(a0),d1
00008C48 E749                       		lsl.w	#3,d1
00008C4A 3401                       		move.w	d1,d2
00008C4C 5041                       		addq.w	#8,d1
00008C4E 6100                       		bsr.s	ExitPlatform2
00008C50 6400                       		bcc.s	locret_75BE
00008C52 E848                       		lsr.w	#4,d0
00008C54 1140 003F                  		move.b	d0,$3F(a0)
00008C58 1028 003E                  		move.b	$3E(a0),d0
00008C5C 0C00 0040                  		cmpi.b	#$40,d0
00008C60 6700                       		beq.s	loc_75B6
00008C62 5828 003E                  		addq.b	#4,$3E(a0)
00008C66                            
00008C66                            loc_75B6:
00008C66 6100 0000                  		bsr.w	Bri_Bend
00008C6A 6100 0000                  		bsr.w	Bri_MoveSonic
00008C6E                            
00008C6E                            locret_75BE:
00008C6E 4E75                       		rts	
00008C70                            ; End of function Bri_WalkOff
00008C70                            ; End of function Bri_WalkOff
00008C70                            
00008C70                            ; ---------------------------------------------------------------------------
00008C70                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008C70                            ; ---------------------------------------------------------------------------
00008C70                            
00008C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C70                            
00008C70                            
00008C70                            ExitPlatform:
00008C70 3401                       		move.w	d1,d2
00008C72                            
00008C72                            ExitPlatform2:
00008C72 D442                       		add.w	d2,d2
00008C74 43F8 D000                  		lea	(v_player).w,a1
00008C78 0829 0001 0022             		btst	#1,obStatus(a1)
00008C7E 6600                       		bne.s	loc_75E0
00008C80 3029 0008                  		move.w	obX(a1),d0
00008C84 9068 0008                  		sub.w	obX(a0),d0
00008C88 D041                       		add.w	d1,d0
00008C8A 6B00                       		bmi.s	loc_75E0
00008C8C B042                       		cmp.w	d2,d0
00008C8E 6500                       		blo.s	locret_75F2
00008C90                            
00008C90                            loc_75E0:
00008C90 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008C96 117C 0002 0024             		move.b	#2,obRoutine(a0)
00008C9C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00008CA2                            
00008CA2                            locret_75F2:
00008CA2 4E75                       		rts	
00008CA4                            ; End of function ExitPlatform
00008CA4                            
00008CA4                            		include	"_incObj\11 Bridge (part 3).asm"
00008CA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CA4                            
00008CA4                            
00008CA4                            Bri_MoveSonic:
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 003F                  		move.b	$3F(a0),d0
00008CAA 1030 0029                  		move.b	$29(a0,d0.w),d0
00008CAE ED48                       		lsl.w	#6,d0
00008CB0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008CB6 2440                       		movea.l	d0,a2
00008CB8 43F8 D000                  		lea	(v_player).w,a1
00008CBC 302A 000C                  		move.w	obY(a2),d0
00008CC0 5140                       		subq.w	#8,d0
00008CC2 7200                       		moveq	#0,d1
00008CC4 1229 0016                  		move.b	obHeight(a1),d1
00008CC8 9041                       		sub.w	d1,d0
00008CCA 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00008CCE 4E75                       		rts	
00008CD0                            ; End of function Bri_MoveSonic
00008CD0                            
00008CD0                            
00008CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CD0                            
00008CD0                            
00008CD0                            Bri_Bend:
00008CD0 1028 003E                  		move.b	$3E(a0),d0
00008CD4 6100 AECC                  		bsr.w	CalcSine
00008CD8 3800                       		move.w	d0,d4
00008CDA 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008CE0 7000                       		moveq	#0,d0
00008CE2 1028 0028                  		move.b	obSubtype(a0),d0
00008CE6 E948                       		lsl.w	#4,d0
00008CE8 7600                       		moveq	#0,d3
00008CEA 1628 003F                  		move.b	$3F(a0),d3
00008CEE 3403                       		move.w	d3,d2
00008CF0 D640                       		add.w	d0,d3
00008CF2 7A00                       		moveq	#0,d5
00008CF4 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008CFA 1A35 3000                  		move.b	(a5,d3.w),d5
00008CFE 0243 000F                  		andi.w	#$F,d3
00008D02 E94B                       		lsl.w	#4,d3
00008D04 47F4 3000                  		lea	(a4,d3.w),a3
00008D08 45E8 0029                  		lea	$29(a0),a2
00008D0C                            
00008D0C                            loc_765C:
00008D0C 7000                       		moveq	#0,d0
00008D0E 101A                       		move.b	(a2)+,d0
00008D10 ED48                       		lsl.w	#6,d0
00008D12 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D18 2240                       		movea.l	d0,a1
00008D1A 7000                       		moveq	#0,d0
00008D1C 101B                       		move.b	(a3)+,d0
00008D1E 5240                       		addq.w	#1,d0
00008D20 C0C5                       		mulu.w	d5,d0
00008D22 C0C4                       		mulu.w	d4,d0
00008D24 4840                       		swap	d0
00008D26 D069 003C                  		add.w	$3C(a1),d0
00008D2A 3340 000C                  		move.w	d0,obY(a1)
00008D2E 51CA FFDC                  		dbf	d2,loc_765C
00008D32 7000                       		moveq	#0,d0
00008D34 1028 0028                  		move.b	obSubtype(a0),d0
00008D38 7600                       		moveq	#0,d3
00008D3A 1628 003F                  		move.b	$3F(a0),d3
00008D3E 5203                       		addq.b	#1,d3
00008D40 9600                       		sub.b	d0,d3
00008D42 4403                       		neg.b	d3
00008D44 6B00                       		bmi.s	locret_76CA
00008D46 3403                       		move.w	d3,d2
00008D48 E94B                       		lsl.w	#4,d3
00008D4A 47F4 3000                  		lea	(a4,d3.w),a3
00008D4E D6C2                       		adda.w	d2,a3
00008D50 5342                       		subq.w	#1,d2
00008D52 6500                       		bcs.s	locret_76CA
00008D54                            
00008D54                            loc_76A4:
00008D54 7000                       		moveq	#0,d0
00008D56 101A                       		move.b	(a2)+,d0
00008D58 ED48                       		lsl.w	#6,d0
00008D5A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008D60 2240                       		movea.l	d0,a1
00008D62 7000                       		moveq	#0,d0
00008D64 1023                       		move.b	-(a3),d0
00008D66 5240                       		addq.w	#1,d0
00008D68 C0C5                       		mulu.w	d5,d0
00008D6A C0C4                       		mulu.w	d4,d0
00008D6C 4840                       		swap	d0
00008D6E D069 003C                  		add.w	$3C(a1),d0
00008D72 3340 000C                  		move.w	d0,obY(a1)
00008D76 51CA FFDC                  		dbf	d2,loc_76A4
00008D7A                            
00008D7A                            locret_76CA:
00008D7A 4E75                       		rts	
00008D7C                            ; End of function Bri_Bend
00008D7C                            
00008D7C                            ; ===========================================================================
00008D7C                            ; ---------------------------------------------------------------------------
00008D7C                            ; GHZ bridge-bending data
00008D7C                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008D7C                            ; ---------------------------------------------------------------------------
00008D7C                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00008E8C                            		even
00008E8C                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
00008F8C                            		even
00008F8C                            
00008F8C                            ; ===========================================================================
00008F8C                            
00008F8C                            Bri_ChkDel:
00008FAA 4E75                       		rts	
00008FAC                            ; ===========================================================================
00008FAC                            
00008FAC                            @deletebridge:
00008FAC 7400                       		moveq	#0,d2
00008FAE 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00008FB2 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008FB4 5302                       		subq.b	#1,d2		; subtract 1
00008FB6 6500                       		bcs.s	@delparent
00008FB8                            
00008FB8                            	@loop:
00008FB8 7000                       		moveq	#0,d0
00008FBA 101A                       		move.b	(a2)+,d0
00008FBC ED48                       		lsl.w	#6,d0
00008FBE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00008FC4 2240                       		movea.l	d0,a1
00008FC6 B048                       		cmp.w	a0,d0
00008FC8 6700                       		beq.s	@skipdel
00008FCA 6100 0000                  		bsr.w	DeleteChild
00008FCE                            
00008FCE                            	@skipdel:
00008FCE 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00008FD2                            
00008FD2                            @delparent:
00008FD2 6100 0000                  		bsr.w	DeleteObject
00008FD6 4E75                       		rts	
00008FD8                            ; ===========================================================================
00008FD8                            
00008FD8                            Bri_Delete:	; Routine 6, 8
00008FD8 6100 0000                  		bsr.w	DeleteObject
00008FDC 4E75                       		rts	
00008FDE                            ; ===========================================================================
00008FDE                            
00008FDE                            Bri_Display:	; Routine $A
00008FDE 6100 0000                  		bsr.w	DisplaySprite
00008FE2 4E75                       		rts	
00008FE2 4E75                       		rts	
00008FE4                            Map_Bri:	include	"_maps\Bridge.asm"
00008FE4                            ; ---------------------------------------------------------------------------
00008FE4                            ; Sprite mappings - GHZ	bridge
00008FE4                            ; ---------------------------------------------------------------------------
00008FE4                            Map_Bri_internal:
00008FE4 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00008FE6 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00008FE8 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00008FEA 01                         M_Bri_Log:	dc.b 1
00008FEB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00008FF0 02                         M_Bri_Stump:	dc.b 2
00008FF1 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00008FF6 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008FFB 01                         M_Bri_Rope:	dc.b 1
00008FFC FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009002 00                         		even
00009002 00                         		even
00009002                            
00009002                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009002                            ; ---------------------------------------------------------------------------
00009002                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009002                            ;	    - spiked ball on a chain (SBZ)
00009002                            ; ---------------------------------------------------------------------------
00009002                            
00009002                            SwingingPlatform:
00009002 7000                       		moveq	#0,d0
00009004 1028 0024                  		move.b	obRoutine(a0),d0
00009008 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
0000900C 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00009010                            ; ===========================================================================
00009010 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00009014 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009018 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
0000901C 0000                       		dc.w Swing_Action-Swing_Index
0000901E                            
0000901E =0000003A                  swing_origX:	equ $3A		; original x-axis position
0000901E =00000038                  swing_origY:	equ $38		; original y-axis position
0000901E                            ; ===========================================================================
0000901E                            
0000901E                            Swing_Main:	; Routine 0
0000901E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009022 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
0000902A 317C 4380 0002             		move.w	#$4380,obGfx(a0)
00009030 117C 0004 0001             		move.b	#4,obRender(a0)
00009036 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000903C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009042 117C 0008 0016             		move.b	#8,obHeight(a0)
00009048 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
0000904E 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
00009054 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000905A 6600                       		bne.s	@notSLZ
0000905C                            
0000905C 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00009064 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
0000906A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009070 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009076 117C 0099 0020             		move.b	#$99,obColType(a0)
0000907C                            
0000907C                            	@notSLZ:
0000907C 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009082 6600                       		bne.s	@length
00009084                            
00009084 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
0000908C 317C 0391 0002             		move.w	#$391,obGfx(a0)
00009092 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009098 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000909E 117C 0086 0020             		move.b	#$86,obColType(a0)
000090A4 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000090AA                            
000090AA                            @length:
000090AA 1810                       		move.b	0(a0),d4
000090AC 7200                       		moveq	#0,d1
000090AE 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000090B2 1212                       		move.b	(a2),d1		; move a2 to d1
000090B4 3F01                       		move.w	d1,-(sp)
000090B6 0241 000F                  		andi.w	#$F,d1
000090BA 14FC 0000                  		move.b	#0,(a2)+
000090BE 3601                       		move.w	d1,d3
000090C0 E94B                       		lsl.w	#4,d3
000090C2 5003                       		addq.b	#8,d3
000090C4 1143 003C                  		move.b	d3,$3C(a0)
000090C8 5103                       		subq.b	#8,d3
000090CA 4A28 001A                  		tst.b	obFrame(a0)
000090CE 6700                       		beq.s	@makechain
000090D0 5003                       		addq.b	#8,d3
000090D2 5341                       		subq.w	#1,d1
000090D4                            
000090D4                            @makechain:
000090D4 6100 0000                  		bsr.w	FindFreeObj
000090D8 6600                       		bne.s	@fail
000090DA 5228 0028                  		addq.b	#1,obSubtype(a0)
000090DE 3A09                       		move.w	a1,d5
000090E0 0445 D000                  		subi.w	#$D000,d5
000090E4 EC4D                       		lsr.w	#6,d5
000090E6 0245 007F                  		andi.w	#$7F,d5
000090EA 14C5                       		move.b	d5,(a2)+
000090EC 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000090F2 1284                       		move.b	d4,0(a1)	; load swinging	object
000090F4 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000090FA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009100 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009106 137C 0004 0001             		move.b	#4,obRender(a1)
0000910C 337C 0200 0018             		move.w	#$200,obPriority(a1)
00009112 137C 0008 0014             		move.b	#8,obActWid(a1)
00009118 137C 0001 001A             		move.b	#1,obFrame(a1)
0000911E 1343 003C                  		move.b	d3,$3C(a1)
00009122 0403 0010                  		subi.b	#$10,d3
00009126 6400                       		bcc.s	@notanchor
00009128 137C 0002 001A             		move.b	#2,obFrame(a1)
0000912E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009134 08E9 0006 0002             		bset	#6,obGfx(a1)
0000913A                            
0000913A                            	@notanchor:
0000913A 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000913E                            
0000913E                            	@fail:
0000913E 3A08                       		move.w	a0,d5
00009140 0445 D000                  		subi.w	#$D000,d5
00009144 EC4D                       		lsr.w	#6,d5
00009146 0245 007F                  		andi.w	#$7F,d5
0000914A 14C5                       		move.b	d5,(a2)+
0000914C 317C 4080 0026             		move.w	#$4080,obAngle(a0)
00009152 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009158 321F                       		move.w	(sp)+,d1
0000915A 0801 0004                  		btst	#4,d1		; is object type $1X ?
0000915E 6700                       		beq.s	@not1X	; if not, branch
00009160 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00009168 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000916E 117C 0001 001A             		move.b	#1,obFrame(a0)
00009174 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000917A 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00009180                            
00009180                            	@not1X:
00009180 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009186 6700                       		beq.s	Swing_Action	; if yes, branch
00009188                            
00009188                            Swing_SetSolid:	; Routine 2
00009188 7200                       		moveq	#0,d1
0000918A 1228 0014                  		move.b	obActWid(a0),d1
0000918E 7600                       		moveq	#0,d3
00009190 1628 0016                  		move.b	obHeight(a0),d3
00009194 6100 FA76                  		bsr.w	Swing_Solid
00009198                            
00009198                            Swing_Action:	; Routine $C
00009198 6100 0000                  		bsr.w	Swing_Move
0000919C 6100 0000                  		bsr.w	DisplaySprite
000091A0 6000 0000                  		bra.w	Swing_ChkDel
000091A4                            ; ===========================================================================
000091A4                            
000091A4                            Swing_Action2:	; Routine 4
000091A4 7200                       		moveq	#0,d1
000091A6 1228 0014                  		move.b	obActWid(a0),d1
000091AA 6100 FAC4                  		bsr.w	ExitPlatform
000091AE 3F28 0008                  		move.w	obX(a0),-(sp)
000091B2 6100 0000                  		bsr.w	Swing_Move
000091B6 341F                       		move.w	(sp)+,d2
000091B8 7600                       		moveq	#0,d3
000091BA 1628 0016                  		move.b	obHeight(a0),d3
000091BE 5203                       		addq.b	#1,d3
000091C0 6100 0000                  		bsr.w	MvSonicOnPtfm
000091C4 6100 0000                  		bsr.w	DisplaySprite
000091C8 6000 0000                  		bra.w	Swing_ChkDel
000091CC                            
000091CC 4E75                       		rts
000091CC 4E75                       		rts
000091CE                            
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            ; Subroutine to	change Sonic's position with a platform
000091CE                            ; ---------------------------------------------------------------------------
000091CE                            
000091CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091CE                            
000091CE                            
000091CE                            MvSonicOnPtfm:
000091CE 43F8 D000                  		lea	(v_player).w,a1
000091D2 3028 000C                  		move.w	obY(a0),d0
000091D6 9043                       		sub.w	d3,d0
000091D8 6000                       		bra.s	MvSonic2
000091DA                            ; End of function MvSonicOnPtfm
000091DA                            
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            ; Subroutine to	change Sonic's position with a platform
000091DA                            ; ---------------------------------------------------------------------------
000091DA                            
000091DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091DA                            
000091DA                            
000091DA                            MvSonicOnPtfm2:
000091DA 43F8 D000                  		lea	(v_player).w,a1
000091DE 3028 000C                  		move.w	obY(a0),d0
000091E2 0440 0009                  		subi.w	#9,d0
000091E6                            
000091E6                            MvSonic2:
000091E6 4A38 F7C8                  		tst.b	(f_lockmulti).w
000091EA 6B00                       		bmi.s	locret_7B62
000091EC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000091F2 6400                       		bhs.s	locret_7B62
000091F4 4A78 FE08                  		tst.w	(v_debuguse).w
000091F8 6600                       		bne.s	locret_7B62
000091FA 7200                       		moveq	#0,d1
000091FC 1229 0016                  		move.b	obHeight(a1),d1
00009200 9041                       		sub.w	d1,d0
00009202 3340 000C                  		move.w	d0,obY(a1)
00009206 9468 0008                  		sub.w	obX(a0),d2
0000920A 9569 0008                  		sub.w	d2,obX(a1)
0000920E                            
0000920E                            locret_7B62:
0000920E 4E75                       		rts	
00009210                            ; End of function MvSonicOnPtfm2
00009210                            
00009210                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
00009210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009210                            
00009210                            
00009210                            Swing_Move:
00009210 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
00009214 323C 0080                  		move.w	#$80,d1
00009218 0828 0000 0022             		btst	#0,obStatus(a0)
0000921E 6700                       		beq.s	loc_7B78
00009220 4440                       		neg.w	d0
00009222 D041                       		add.w	d1,d0
00009224                            
00009224                            loc_7B78:
00009224 6000                       		bra.s	Swing_Move2
00009226                            ; End of function Swing_Move
00009226                            
00009226                            
00009226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009226                            
00009226                            
00009226                            Obj48_Move:
00009226 4A28 003D                  		tst.b	$3D(a0)
0000922A 6600                       		bne.s	loc_7B9C
0000922C 3028 003E                  		move.w	$3E(a0),d0
00009230 5040                       		addq.w	#8,d0
00009232 3140 003E                  		move.w	d0,$3E(a0)
00009236 D168 0026                  		add.w	d0,obAngle(a0)
0000923A 0C40 0200                  		cmpi.w	#$200,d0
0000923E 6600                       		bne.s	loc_7BB6
00009240 117C 0001 003D             		move.b	#1,$3D(a0)
00009246 6000                       		bra.s	loc_7BB6
00009248                            ; ===========================================================================
00009248                            
00009248                            loc_7B9C:
00009248 3028 003E                  		move.w	$3E(a0),d0
0000924C 5140                       		subq.w	#8,d0
0000924E 3140 003E                  		move.w	d0,$3E(a0)
00009252 D168 0026                  		add.w	d0,obAngle(a0)
00009256 0C40 FE00                  		cmpi.w	#-$200,d0
0000925A 6600                       		bne.s	loc_7BB6
0000925C 117C 0000 003D             		move.b	#0,$3D(a0)
00009262                            
00009262                            loc_7BB6:
00009262 1028 0026                  		move.b	obAngle(a0),d0
00009266                            ; End of function Obj48_Move
00009266                            
00009266                            
00009266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009266                            
00009266                            
00009266                            Swing_Move2:
00009266 6100 A93A                  		bsr.w	CalcSine
0000926A 3428 0038                  		move.w	$38(a0),d2
0000926E 3628 003A                  		move.w	$3A(a0),d3
00009272 45E8 0028                  		lea	obSubtype(a0),a2
00009276 7C00                       		moveq	#0,d6
00009278 1C1A                       		move.b	(a2)+,d6
0000927A                            
0000927A                            loc_7BCE:
0000927A 7800                       		moveq	#0,d4
0000927C 181A                       		move.b	(a2)+,d4
0000927E ED4C                       		lsl.w	#6,d4
00009280 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009286 2244                       		movea.l	d4,a1
00009288 7800                       		moveq	#0,d4
0000928A 1829 003C                  		move.b	$3C(a1),d4
0000928E 2A04                       		move.l	d4,d5
00009290 C9C0                       		muls.w	d0,d4
00009292 E084                       		asr.l	#8,d4
00009294 CBC1                       		muls.w	d1,d5
00009296 E085                       		asr.l	#8,d5
00009298 D842                       		add.w	d2,d4
0000929A DA43                       		add.w	d3,d5
0000929C 3344 000C                  		move.w	d4,obY(a1)
000092A0 3345 0008                  		move.w	d5,obX(a1)
000092A4 51CE FFD4                  		dbf	d6,loc_7BCE
000092A8 4E75                       		rts	
000092AA                            ; End of function Swing_Move2
000092AA                            
000092AA                            ; ===========================================================================
000092AA                            
000092AA                            Swing_ChkDel:
000092C8 4E75                       		rts	
000092CA                            ; ===========================================================================
000092CA                            
000092CA                            Swing_DelAll:
000092CA 7400                       		moveq	#0,d2
000092CC 45E8 0028                  		lea	obSubtype(a0),a2
000092D0 141A                       		move.b	(a2)+,d2
000092D2                            
000092D2                            Swing_DelLoop:
000092D2 7000                       		moveq	#0,d0
000092D4 101A                       		move.b	(a2)+,d0
000092D6 ED48                       		lsl.w	#6,d0
000092D8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092DE 2240                       		movea.l	d0,a1
000092E0 6100 0000                  		bsr.w	DeleteChild
000092E4 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000092E8 4E75                       		rts	
000092EA                            ; ===========================================================================
000092EA                            
000092EA                            Swing_Delete:	; Routine 6, 8
000092EA 6100 0000                  		bsr.w	DeleteObject
000092EE 4E75                       		rts	
000092F0                            ; ===========================================================================
000092F0                            
000092F0                            Swing_Display:	; Routine $A
000092F0 6000 0000                  		bra.w	DisplaySprite
000092F0 6000 0000                  		bra.w	DisplaySprite
000092F4                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000092F4                            ; ---------------------------------------------------------------------------
000092F4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000092F4                            ; ---------------------------------------------------------------------------
000092F4                            Map_Swing_GHZ_internal:
000092F4 0000                       		dc.w @block-Map_Swing_GHZ_internal
000092F6 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000092F8 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000092FA 02                         @block:		dc.b 2
000092FB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00009300 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009305 01                         @chain:		dc.b 1
00009306 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000930B 01                         @anchor:	dc.b 1
0000930C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009312 00                         		even
00009312 00                         		even
00009312                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
00009312                            ; ---------------------------------------------------------------------------
00009312                            ; Sprite mappings - SLZ	swinging platforms
00009312                            ; ---------------------------------------------------------------------------
00009312                            Map_Swing_SLZ_internal:
00009312 0000                       		dc.w @block-Map_Swing_SLZ_internal
00009314 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009316 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009318 08                         @block:		dc.b 8
00009319 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000931E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00009323 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009328 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000932D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00009332 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009337 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000933C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00009341 01                         @chain:		dc.b 1
00009342 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009347 01                         @anchor:	dc.b 1
00009348 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000934E 00                         		even
0000934E 00                         		even
0000934E                            		include	"_incObj\17 Spiked Pole Helix.asm"
0000934E                            ; ---------------------------------------------------------------------------
0000934E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000934E                            ; ---------------------------------------------------------------------------
0000934E                            
0000934E                            Helix:
0000934E 7000                       		moveq	#0,d0
00009350 1028 0024                  		move.b	obRoutine(a0),d0
00009354 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009358 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
0000935C                            ; ===========================================================================
0000935C 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
0000935E 0000                       		dc.w Hel_Action-Hel_Index
00009360 0000                       		dc.w Hel_Action-Hel_Index
00009362 0000                       		dc.w Hel_Delete-Hel_Index
00009364 0000                       		dc.w Hel_Display-Hel_Index
00009366                            
00009366 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00009366                            
00009366                            ;		$29-38 are used for child object addresses
00009366                            ; ===========================================================================
00009366                            
00009366                            Hel_Main:	; Routine 0
00009366 5428 0024                  		addq.b	#2,obRoutine(a0)
0000936A 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
00009372 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009378 117C 0007 0022             		move.b	#7,obStatus(a0)
0000937E 117C 0004 0001             		move.b	#4,obRender(a0)
00009384 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000938A 117C 0008 0014             		move.b	#8,obActWid(a0)
00009390 3428 000C                  		move.w	obY(a0),d2
00009394 3628 0008                  		move.w	obX(a0),d3
00009398 1810                       		move.b	0(a0),d4
0000939A 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000939E 7200                       		moveq	#0,d1
000093A0 1212                       		move.b	(a2),d1		; move helix length to d1
000093A2 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000093A6 3001                       		move.w	d1,d0
000093A8 E248                       		lsr.w	#1,d0
000093AA E948                       		lsl.w	#4,d0
000093AC 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000093AE 5501                       		subq.b	#2,d1
000093B0 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000093B2 7C00                       		moveq	#0,d6
000093B4                            
000093B4                            Hel_Build:
000093B4 6100 0000                  		bsr.w	FindFreeObj
000093B8 6600                       		bne.s	Hel_Action
000093BA 5228 0028                  		addq.b	#1,obSubtype(a0)
000093BE 3A09                       		move.w	a1,d5
000093C0 0445 D000                  		subi.w	#$D000,d5
000093C4 EC4D                       		lsr.w	#6,d5
000093C6 0245 007F                  		andi.w	#$7F,d5
000093CA 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000093CC 137C 0008 0024             		move.b	#8,obRoutine(a1)
000093D2 1284                       		move.b	d4,0(a1)
000093D4 3342 000C                  		move.w	d2,ObY(a1)
000093D8 3343 0008                  		move.w	d3,obX(a1)
000093DC 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000093E2 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000093E8 137C 0004 0001             		move.b	#4,obRender(a1)
000093EE 337C 0180 0018             		move.w	#$180,obPriority(a1)
000093F4 137C 0008 0014             		move.b	#8,obActWid(a1)
000093FA 1346 003E                  		move.b	d6,hel_frame(a1)
000093FE 5206                       		addq.b	#1,d6
00009400 0206 0007                  		andi.b	#7,d6
00009404 0643 0010                  		addi.w	#$10,d3
00009408 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
0000940C 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000940E                            
0000940E 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009412 5206                       		addq.b	#1,d6
00009414 0206 0007                  		andi.b	#7,d6
00009418 0643 0010                  		addi.w	#$10,d3		; skip to next spike
0000941C 5228 0028                  		addq.b	#1,obSubtype(a0)
00009420                            
00009420                            	Hel_NotCentre:
00009420 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009424                            
00009424                            Hel_Action:	; Routine 2, 4
00009424 6100 0000                  		bsr.w	Hel_RotateSpikes
00009428 6100 0000                  		bsr.w	DisplaySprite
0000942C 6000 0000                  		bra.w	Hel_ChkDel
00009430                            
00009430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009430                            
00009430                            
00009430                            Hel_RotateSpikes:
00009430 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009434 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
0000943A D028 003E                  		add.b	hel_frame(a0),d0
0000943E 0200 0007                  		andi.b	#7,d0
00009442 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009446 6600                       		bne.s	locret_7DA6
00009448 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
0000944E                            
0000944E                            locret_7DA6:
0000944E 4E75                       		rts	
00009450                            ; End of function Hel_RotateSpikes
00009450                            
00009450                            ; ===========================================================================
00009450                            
00009450                            Hel_ChkDel:
0000946E 4E75                       		rts	
00009470                            ; ===========================================================================
00009470                            
00009470                            Hel_DelAll:
00009470 7400                       		moveq	#0,d2
00009472 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009476 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009478 5502                       		subq.b	#2,d2
0000947A 6500                       		bcs.s	Hel_Delete
0000947C                            
0000947C                            	Hel_DelLoop:
0000947C 7000                       		moveq	#0,d0
0000947E 101A                       		move.b	(a2)+,d0
00009480 ED48                       		lsl.w	#6,d0
00009482 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009488 2240                       		movea.l	d0,a1		; get child address
0000948A 6100 0000                  		bsr.w	DeleteChild	; delete object
0000948E 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009492                            
00009492                            Hel_Delete:	; Routine 6
00009492 6100 0000                  		bsr.w	DeleteObject
00009496 4E75                       		rts	
00009498                            ; ===========================================================================
00009498                            
00009498                            Hel_Display:	; Routine 8
00009498 6100 FF96                  		bsr.w	Hel_RotateSpikes
0000949C 6000 0000                  		bra.w	DisplaySprite
0000949C 6000 0000                  		bra.w	DisplaySprite
000094A0                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
000094A0                            ; ---------------------------------------------------------------------------
000094A0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000094A0                            ; ---------------------------------------------------------------------------
000094A0                            Map_Hel_internal:
000094A0 0000                       		dc.w byte_7E08-Map_Hel_internal
000094A2 0000                       		dc.w byte_7E0E-Map_Hel_internal
000094A4 0000                       		dc.w byte_7E14-Map_Hel_internal
000094A6 0000                       		dc.w byte_7E1A-Map_Hel_internal
000094A8 0000                       		dc.w byte_7E20-Map_Hel_internal
000094AA 0000                       		dc.w byte_7E26-Map_Hel_internal
000094AC 0000                       		dc.w byte_7E2E-Map_Hel_internal
000094AE 0000                       		dc.w byte_7E2C-Map_Hel_internal
000094B0 01                         byte_7E08:	dc.b 1
000094B1 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
000094B6 01                         byte_7E0E:	dc.b 1
000094B7 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000094BC 01                         byte_7E14:	dc.b 1
000094BD F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000094C2 01                         byte_7E1A:	dc.b 1
000094C3 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000094C8 01                         byte_7E20:	dc.b 1
000094C9 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000094CE 01                         byte_7E26:	dc.b 1
000094CF 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000094D4 01                         byte_7E2C:	dc.b 1
000094D5 F4                         		dc.b $F4
000094D6                            byte_7E2E:	; reads the 0 below	; not visible
000094D6 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000094DA                            		even
000094DA                            		even
000094DA                            		include	"_incObj\18 Platforms.asm"
000094DA                            ; ---------------------------------------------------------------------------
000094DA                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000094DA                            ; ---------------------------------------------------------------------------
000094DA                            
000094DA                            BasicPlatform:
000094DA 7000                       		moveq	#0,d0
000094DC 1028 0024                  		move.b	obRoutine(a0),d0
000094E0 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000094E4 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000094E8                            ; ===========================================================================
000094E8 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000094EA 0000                       		dc.w Plat_Solid-Plat_Index
000094EC 0000                       		dc.w Plat_Action2-Plat_Index
000094EE 0000                       		dc.w Plat_Delete-Plat_Index
000094F0 0000                       		dc.w Plat_Action-Plat_Index
000094F2                            ; ===========================================================================
000094F2                            
000094F2                            Plat_Main:	; Routine 0
000094F2 5428 0024                  		addq.b	#2,obRoutine(a0)
000094F6 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000094FC 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009504 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000950A 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009510 6600                       		bne.s	@notSYZ
00009512                            
00009512 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
0000951A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009520                            
00009520                            	@notSYZ:
00009520 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009526 6600                       		bne.s	@notSLZ
00009528 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009530 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009536 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000953C 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009542                            
00009542                            	@notSLZ:
00009542 117C 0004 0001             		move.b	#4,obRender(a0)
00009548 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000954E 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009554 3168 000C 0034             		move.w	obY(a0),$34(a0)
0000955A 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009560 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009566 7200                       		moveq	#0,d1
00009568 1028 0028                  		move.b	obSubtype(a0),d0
0000956C 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009570 6600                       		bne.s	@setframe	; if not, branch
00009572 5201                       		addq.b	#1,d1		; use frame #1
00009574 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
0000957A                            
0000957A                            	@setframe:
0000957A 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
0000957E                            
0000957E                            Plat_Solid:	; Routine 2
0000957E 4A28 0038                  		tst.b	$38(a0)
00009582 6700                       		beq.s	loc_7EE0
00009584 5928 0038                  		subq.b	#4,$38(a0)
00009588                            
00009588                            	loc_7EE0:
00009588 7200                       		moveq	#0,d1
0000958A 1228 0014                  		move.b	obActWid(a0),d1
0000958E 6100 F56C                  		bsr.w	PlatformObject
00009592                            
00009592                            Plat_Action:	; Routine 8
00009592 6100 0000                  		bsr.w	Plat_Move
00009596 6100 0000                  		bsr.w	Plat_Nudge
0000959A 6100 0000                  		bsr.w	DisplaySprite
0000959E 6000 0000                  		bra.w	Plat_ChkDel
000095A2                            ; ===========================================================================
000095A2                            
000095A2                            Plat_Action2:	; Routine 4
000095A2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000095A8 6700                       		beq.s	loc_7F06
000095AA 5828 0038                  		addq.b	#4,$38(a0)
000095AE                            
000095AE                            	loc_7F06:
000095AE 7200                       		moveq	#0,d1
000095B0 1228 0014                  		move.b	obActWid(a0),d1
000095B4 6100 F6BA                  		bsr.w	ExitPlatform
000095B8 3F28 0008                  		move.w	obX(a0),-(sp)
000095BC 6100 0000                  		bsr.w	Plat_Move
000095C0 6100 0000                  		bsr.w	Plat_Nudge
000095C4 341F                       		move.w	(sp)+,d2
000095C6 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000095CA 6100 0000                  		bsr.w	DisplaySprite
000095CE 6000 0000                  		bra.w	Plat_ChkDel
000095D2                            
000095D2 4E75                       		rts
000095D4                            
000095D4                            ; ---------------------------------------------------------------------------
000095D4                            ; Subroutine to	move platform slightly when you	stand on it
000095D4                            ; ---------------------------------------------------------------------------
000095D4                            
000095D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095D4                            
000095D4                            
000095D4                            Plat_Nudge:
000095D4 1028 0038                  		move.b	$38(a0),d0
000095D8 6100 A5C8                  		bsr.w	CalcSine
000095DC 323C 0400                  		move.w	#$400,d1
000095E0 C1C1                       		muls.w	d1,d0
000095E2 4840                       		swap	d0
000095E4 D068 002C                  		add.w	$2C(a0),d0
000095E8 3140 000C                  		move.w	d0,obY(a0)
000095EC 4E75                       		rts	
000095EE                            ; End of function Plat_Nudge
000095EE                            
000095EE                            ; ---------------------------------------------------------------------------
000095EE                            ; Subroutine to	move platforms
000095EE                            ; ---------------------------------------------------------------------------
000095EE                            
000095EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000095EE                            
000095EE                            
000095EE                            Plat_Move:
000095EE 7000                       		moveq	#0,d0
000095F0 1028 0028                  		move.b	obSubtype(a0),d0
000095F4 0240 000F                  		andi.w	#$F,d0
000095F8 D040                       		add.w	d0,d0
000095FA 323B 0000                  		move.w	@index(pc,d0.w),d1
000095FE 4EFB 1000                  		jmp	@index(pc,d1.w)
00009602                            ; End of function Plat_Move
00009602                            
00009602                            ; ===========================================================================
00009602 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009606 0000 0000                  		dc.w @type02-@index, @type03-@index
0000960A 0000 0000                  		dc.w @type04-@index, @type05-@index
0000960E 0000 0000                  		dc.w @type06-@index, @type07-@index
00009612 0000 0000                  		dc.w @type08-@index, @type00-@index
00009616 0000 0000                  		dc.w @type0A-@index, @type0B-@index
0000961A 0000                       		dc.w @type0C-@index
0000961C                            ; ===========================================================================
0000961C                            
0000961C                            @type00:
0000961C 4E75                       		rts			; platform 00 doesn't move
0000961E                            ; ===========================================================================
0000961E                            
0000961E                            @type05:
0000961E 3028 0032                  		move.w	$32(a0),d0
00009622 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009626 4401                       		neg.b	d1		; reverse platform-motion
00009628 0601 0040                  		addi.b	#$40,d1
0000962C 6000                       		bra.s	@type01_move
0000962E                            ; ===========================================================================
0000962E                            
0000962E                            @type01:
0000962E 3028 0032                  		move.w	$32(a0),d0
00009632 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009636 0401 0040                  		subi.b	#$40,d1
0000963A                            
0000963A                            	@type01_move:
0000963A 4881                       		ext.w	d1
0000963C D041                       		add.w	d1,d0
0000963E 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009642 6000 0000                  		bra.w	@chgmotion
00009646                            ; ===========================================================================
00009646                            
00009646                            @type0C:
00009646 3028 0034                  		move.w	$34(a0),d0
0000964A 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000964E 4401                       		neg.b	d1		; reverse platform-motion
00009650 0601 0030                  		addi.b	#$30,d1
00009654 6000                       		bra.s	@type02_move
00009656                            ; ===========================================================================
00009656                            
00009656                            @type0B:
00009656 3028 0034                  		move.w	$34(a0),d0
0000965A 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
0000965E 0401 0030                  		subi.b	#$30,d1
00009662 6000                       		bra.s	@type02_move
00009664                            ; ===========================================================================
00009664                            
00009664                            @type06:
00009664 3028 0034                  		move.w	$34(a0),d0
00009668 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000966C 4401                       		neg.b	d1		; reverse platform-motion
0000966E 0601 0040                  		addi.b	#$40,d1
00009672 6000                       		bra.s	@type02_move
00009674                            ; ===========================================================================
00009674                            
00009674                            @type02:
00009674 3028 0034                  		move.w	$34(a0),d0
00009678 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000967C 0401 0040                  		subi.b	#$40,d1
00009680                            
00009680                            	@type02_move:
00009680 4881                       		ext.w	d1
00009682 D041                       		add.w	d1,d0
00009684 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009688 6000 0000                  		bra.w	@chgmotion
0000968C                            ; ===========================================================================
0000968C                            
0000968C                            @type03:
0000968C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009690 6600                       		bne.s	@type03_wait	; if yes, branch
00009692 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009698 6700                       		beq.s	@type03_nomove	; if not, branch
0000969A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000096A0                            
000096A0                            	@type03_nomove:
000096A0 4E75                       		rts	
000096A2                            
000096A2                            	@type03_wait:
000096A2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000096A6 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
000096A8 317C 0020 003A             		move.w	#32,$3A(a0)
000096AE 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
000096B2 4E75                       		rts	
000096B4                            ; ===========================================================================
000096B4                            
000096B4                            @type04:
000096B4 4A68 003A                  		tst.w	$3A(a0)
000096B8 6700                       		beq.s	@loc_8048
000096BA 5368 003A                  		subq.w	#1,$3A(a0)
000096BE 6600                       		bne.s	@loc_8048
000096C0 0828 0003 0022             		btst	#3,obStatus(a0)
000096C6 6700                       		beq.s	@loc_8042
000096C8 08E9 0001 0022             		bset	#1,obStatus(a1)
000096CE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000096D4 137C 0002 0024             		move.b	#2,obRoutine(a1)
000096DA 08A8 0003 0022             		bclr	#3,obStatus(a0)
000096E0 4228 0025                  		clr.b	$25(a0)
000096E4 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
000096EA                            
000096EA                            	@loc_8042:
000096EA 117C 0008 0024             		move.b	#8,obRoutine(a0)
000096F0                            
000096F0                            	@loc_8048:
000096F0 2628 002C                  		move.l	$2C(a0),d3
000096F4 3028 0012                  		move.w	obVelY(a0),d0
000096F8 48C0                       		ext.l	d0
000096FA E180                       		asl.l	#8,d0
000096FC D680                       		add.l	d0,d3
000096FE 2143 002C                  		move.l	d3,$2C(a0)
00009702 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009708 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000970C 0640 00E0                  		addi.w	#$E0,d0
00009710 B068 002C                  		cmp.w	$2C(a0),d0
00009714 6400                       		bcc.s	@locret_8074
00009716 117C 0006 0024             		move.b	#6,obRoutine(a0)
0000971C                            
0000971C                            	@locret_8074:
0000971C 4E75                       		rts	
0000971E                            ; ===========================================================================
0000971E                            
0000971E                            @type07:
0000971E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009722 6600                       		bne.s	@type07_wait	; if yes, branch
00009724 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009728 7000                       		moveq	#0,d0
0000972A 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
0000972E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009730 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009734 6700                       		beq.s	@type07_nomove	; if not, branch
00009736 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000973C                            
0000973C                            	@type07_nomove:
0000973C 4E75                       		rts	
0000973E                            
0000973E                            	@type07_wait:
0000973E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009742 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009744 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009748 4E75                       		rts	
0000974A                            ; ===========================================================================
0000974A                            
0000974A                            @type08:
0000974A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000974E 3028 0034                  		move.w	$34(a0),d0
00009752 0440 0200                  		subi.w	#$200,d0
00009756 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000975A 6600                       		bne.s	@type08_nostop	; if not, branch
0000975C 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009760                            
00009760                            	@type08_nostop:
00009760 4E75                       		rts	
00009762                            ; ===========================================================================
00009762                            
00009762                            @type0A:
00009762 3028 0034                  		move.w	$34(a0),d0
00009766 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000976A 0401 0040                  		subi.b	#$40,d1
0000976E 4881                       		ext.w	d1
00009770 E241                       		asr.w	#1,d1
00009772 D041                       		add.w	d1,d0
00009774 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009778                            
00009778                            @chgmotion:
00009778 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
0000977E 4E75                       		rts	
00009780                            ; ===========================================================================
00009780                            
00009780                            Plat_ChkDel:
0000979C 4E75                       		rts	
0000979E                            ; ===========================================================================
0000979E                            
0000979E                            Plat_Delete:	; Routine 6
0000979E 6000 0000                  		bra.w	DeleteObject
0000979E 6000 0000                  		bra.w	DeleteObject
000097A2                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
000097A2                            ; ---------------------------------------------------------------------------
000097A2                            ; Sprite mappings - unused
000097A2                            ; ---------------------------------------------------------------------------
000097A2                            Map_Plat_Unused_internal:
000097A2 0000                       		dc.w @small-Map_Plat_Unused_internal
000097A4 0000                       		dc.w @large-Map_Plat_Unused_internal
000097A6 02                         @small:		dc.b 2
000097A7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000097AC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000097B1 0A                         @large:		dc.b $A
000097B2 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000097B7 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000097BC 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000097C1 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000097C6 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000097CB F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000097D0 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000097D5 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000097DA 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000097DF 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000097E4                            		even
000097E4                            		even
000097E4                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
000097E4                            ; ---------------------------------------------------------------------------
000097E4                            ; Sprite mappings - GHZ	platforms
000097E4                            ; ---------------------------------------------------------------------------
000097E4                            Map_Plat_GHZ_internal:
000097E4 0000                       		dc.w @small-Map_Plat_GHZ_internal
000097E6 0000                       		dc.w @large-Map_Plat_GHZ_internal
000097E8 04                         @small:		dc.b 4
000097E9 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000097EE F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000097F3 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000097F8 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000097FD 0A                         @large:		dc.b $A
000097FE F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009803 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009808 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000980D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009812 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009817 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000981C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009821 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009826 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000982B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009830                            		even
00009830                            		even
00009830                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009830                            ; ---------------------------------------------------------------------------
00009830                            ; Sprite mappings - SYZ	platforms
00009830                            ; ---------------------------------------------------------------------------
00009830                            Map_Plat_SYZ_internal:
00009830 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009832 03                         @platform:	dc.b 3
00009833 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009838 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000983D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009842                            		even
00009842                            		even
00009842                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009842                            ; ---------------------------------------------------------------------------
00009842                            ; Sprite mappings - SLZ	platforms
00009842                            ; ---------------------------------------------------------------------------
00009842                            Map_Plat_SLZ_internal:
00009842 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009844 02                         @platform:	dc.b 2
00009845 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000984A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009850 00                         		even
00009850 00                         		even
00009850                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009850                            ; ---------------------------------------------------------------------------
00009850                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009850                            ; ---------------------------------------------------------------------------
00009850                            Map_GBall_internal:
00009850 0000                       		dc.w @shiny-Map_GBall_internal
00009852 0000                       		dc.w @check1-Map_GBall_internal
00009854 0000                       		dc.w @check2-Map_GBall_internal
00009856 0000                       		dc.w @check3-Map_GBall_internal
00009858 06                         @shiny:		dc.b 6
00009859 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000985E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009863 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009868 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000986D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009872 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009877 04                         @check1:	dc.b 4
00009878 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000987D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009882 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009887 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000988C 04                         @check2:	dc.b 4
0000988D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009892 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009897 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000989C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000098A1 04                         @check3:	dc.b 4
000098A2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000098A7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000098AC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000098B1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000098B6                            		even
000098B6                            		even
000098B6                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
000098B6                            ; ---------------------------------------------------------------------------
000098B6                            ; Object 1A - GHZ collapsing ledge
000098B6                            ; ---------------------------------------------------------------------------
000098B6                            
000098B6                            CollapseLedge:
000098B6 7000                       		moveq	#0,d0
000098B8 1028 0024                  		move.b	obRoutine(a0),d0
000098BC 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000098C0 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000098C4                            ; ===========================================================================
000098C4 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000098C8 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000098CC 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000098D0                            
000098D0 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000098D0 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000098D0                            ; ===========================================================================
000098D0                            
000098D0                            Ledge_Main:	; Routine 0
000098D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000098D4 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
000098DC 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000098E2 0028 0004 0001             		ori.b	#4,obRender(a0)
000098E8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000098EE 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
000098F4 117C 0064 0014             		move.b	#$64,obActWid(a0)
000098FA 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009900 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009906 08E8 0004 0001             		bset	#4,obRender(a0)
0000990C                            
0000990C                            Ledge_Touch:	; Routine 2
0000990C 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009910 6700                       		beq.s	@slope		; if not, branch
00009912 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009916 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
0000991A 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
0000991E                            
0000991E                            	@slope:
0000991E 323C 0030                  		move.w	#$30,d1
00009922 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009928 6100 F2A6                  		bsr.w	SlopeObject
0000992C 6000 0000                  		bra.w	RememberState
00009930                            ; ===========================================================================
00009930                            
00009930                            Ledge_Collapse:	; Routine 4
00009930 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009934 6700 0000                  		beq.w	loc_847A
00009938 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
0000993E 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009942                            
00009942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009942                            
00009942                            
00009942                            Ledge_WalkOff:	; Routine $A
00009942 323C 0030                  		move.w	#$30,d1
00009946 6100 F328                  		bsr.w	ExitPlatform
0000994A 323C 0030                  		move.w	#$30,d1
0000994E 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009954 3428 0008                  		move.w	obX(a0),d2
00009958 6100 0000                  		bsr.w	SlopeObject2
0000995C 6000 0000                  		bra.w	RememberState
00009960                            ; End of function Ledge_WalkOff
00009960                            
00009960                            ; ===========================================================================
00009960                            
00009960                            Ledge_Display:	; Routine 6
00009960 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009964 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009966 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
0000996A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000996E 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009972 6000 0000                  		bra.w	DisplaySprite
00009976                            ; ===========================================================================
00009976                            
00009976                            loc_82D0:
00009976 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
0000997A 6100 FFC6                  		bsr.w	Ledge_WalkOff
0000997E 43F8 D000                  		lea	(v_player).w,a1
00009982 0829 0003 0022             		btst	#3,obStatus(a1)
00009988 6700                       		beq.s	loc_82FC
0000998A 4A28 0038                  		tst.b	ledge_timedelay(a0)
0000998E 6600                       		bne.s	locret_8308
00009990 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009996 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000999C 137C 0001 001D             		move.b	#1,obNextAni(a1)
000099A2                            
000099A2                            loc_82FC:
000099A2 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
000099A8 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
000099AE                            
000099AE                            locret_8308:
000099AE 4E75                       		rts	
000099B0                            ; ===========================================================================
000099B0                            
000099B0                            Ledge_TimeZero:
000099B0 6100 0000                  		bsr.w	ObjectFall
000099B4 6100 0000                  		bsr.w	DisplaySprite
000099B8 4A28 0001                  		tst.b	obRender(a0)
000099BC 6A00                       		bpl.s	Ledge_Delete
000099BE 4E75                       		rts	
000099C0                            ; ===========================================================================
000099C0                            
000099C0                            Ledge_Delete:	; Routine 8
000099C0 6100 0000                  		bsr.w	DeleteObject
000099C4 4E75                       		rts	
000099C4 4E75                       		rts	
000099C6                            		include	"_incObj\53 Collapsing Floors.asm"
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            
000099C6                            CollapseFloor:
000099C6 7000                       		moveq	#0,d0
000099C8 1028 0024                  		move.b	obRoutine(a0),d0
000099CC 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
000099D0 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
000099D4                            ; ===========================================================================
000099D4 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
000099D8 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
000099DC 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
000099E0                            
000099E0 =00000038                  cflo_timedelay:		equ $38
000099E0 =0000003A                  cflo_collapse_flag:	equ $3A
000099E0                            ; ===========================================================================
000099E0                            
000099E0                            CFlo_Main:	; Routine 0
000099E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000099E4 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
000099EC 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000099F2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000099F8 6600                       		bne.s	@notSLZ
000099FA                            
000099FA 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009A00 5428 001A                  		addq.b	#2,obFrame(a0)
00009A04                            
00009A04                            	@notSLZ:
00009A04 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SBZ
00009A0A 6600                       		bne.s	@notSBZ
00009A0C 317C 43C2 0002             		move.w	#$43C2,obGfx(a0) ; SBZ specific code
00009A12                            
00009A12                            	@notSBZ:
00009A12 0028 0004 0001             		ori.b	#4,obRender(a0)
00009A18 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009A1E 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009A24 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009A2A                            
00009A2A                            CFlo_Touch:	; Routine 2
00009A2A 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009A2E 6700                       		beq.s	@solid		; if not, branch
00009A30 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009A34 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009A38 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009A3C                            
00009A3C                            	@solid:
00009A3C 323C 0020                  		move.w	#$20,d1
00009A40 6100 F0BA                  		bsr.w	PlatformObject
00009A44 4A28 0028                  		tst.b	obSubtype(a0)
00009A48 6A00                       		bpl.s	@remstate
00009A4A 0829 0003 0022             		btst	#3,obStatus(a1)
00009A50 6700                       		beq.s	@remstate
00009A52 08A8 0000 0001             		bclr	#0,obRender(a0)
00009A58 3029 0008                  		move.w	obX(a1),d0
00009A5C 9068 0008                  		sub.w	obX(a0),d0
00009A60 6400                       		bcc.s	@remstate
00009A62 08E8 0000 0001             		bset	#0,obRender(a0)
00009A68                            
00009A68                            	@remstate:
00009A68 6000 0000                  		bra.w	RememberState
00009A6C                            ; ===========================================================================
00009A6C                            
00009A6C                            CFlo_Collapse:	; Routine 4
00009A6C 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009A70 6700 0000                  		beq.w	loc_8458
00009A74 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00009A7A 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009A7E                            
00009A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A7E                            
00009A7E                            
00009A7E                            CFlo_WalkOff:	; Routine $A
00009A7E 323C 0020                  		move.w	#$20,d1
00009A82 6100 F1EC                  		bsr.w	ExitPlatform
00009A86 3428 0008                  		move.w	obX(a0),d2
00009A8A 6100 F74E                  		bsr.w	MvSonicOnPtfm2
00009A8E 6000 0000                  		bra.w	RememberState
00009A92                            ; End of function CFlo_WalkOff
00009A92                            
00009A92                            ; ===========================================================================
00009A92                            
00009A92                            CFlo_Display:	; Routine 6
00009A92 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009A96 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00009A98 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009A9C 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009AA0 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00009AA4 6000 0000                  		bra.w	DisplaySprite
00009AA8                            ; ===========================================================================
00009AA8                            
00009AA8                            loc_8402:
00009AA8 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00009AAC 6100 FFD0                  		bsr.w	CFlo_WalkOff
00009AB0 43F8 D000                  		lea	(v_player).w,a1
00009AB4 0829 0003 0022             		btst	#3,obStatus(a1)
00009ABA 6700                       		beq.s	loc_842E
00009ABC 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009AC0 6600                       		bne.s	locret_843A
00009AC2 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009AC8 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009ACE 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009AD4                            
00009AD4                            loc_842E:
00009AD4 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009ADA 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00009AE0                            
00009AE0                            locret_843A:
00009AE0 4E75                       		rts	
00009AE2                            ; ===========================================================================
00009AE2                            
00009AE2                            CFlo_TimeZero:
00009AE2 6100 0000                  		bsr.w	ObjectFall
00009AE6 6100 0000                  		bsr.w	DisplaySprite
00009AEA 4A28 0001                  		tst.b	obRender(a0)
00009AEE 6A00                       		bpl.s	CFlo_Delete
00009AF0 4E75                       		rts	
00009AF2                            ; ===========================================================================
00009AF2                            
00009AF2                            CFlo_Delete:	; Routine 8
00009AF2 6100 0000                  		bsr.w	DeleteObject
00009AF6 4E75                       		rts	
00009AF8                            ; ===========================================================================
00009AF8                            
00009AF8                            CFlo_Fragment:
00009AF8 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00009AFE                            
00009AFE                            loc_8458:
00009AFE 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00009B04 0828 0000 0028             		btst	#0,obSubtype(a0)
00009B0A 6700                       		beq.s	loc_846C
00009B0C 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00009B12                            
00009B12                            loc_846C:
00009B12 7207                       		moveq	#7,d1
00009B14 5228 001A                  		addq.b	#1,obFrame(a0)
00009B18 6000                       		bra.s	loc_8486
00009B18 6000                       		bra.s	loc_8486
00009B1A                            
00009B1A                            ; ===========================================================================
00009B1A                            
00009B1A                            Ledge_Fragment:
00009B1A 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009B20                            
00009B20                            loc_847A:
00009B20 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00009B26 7218                       		moveq	#$18,d1
00009B28 5428 001A                  		addq.b	#2,obFrame(a0)
00009B2C                            
00009B2C                            loc_8486:
00009B2C 7000                       		moveq	#0,d0
00009B2E 1028 001A                  		move.b	obFrame(a0),d0
00009B32 D040                       		add.w	d0,d0
00009B34 2668 0004                  		movea.l	obMap(a0),a3
00009B38 D6F3 0000                  		adda.w	(a3,d0.w),a3
00009B3C 524B                       		addq.w	#1,a3
00009B3E 08E8 0005 0001             		bset	#5,obRender(a0)
00009B44 1810                       		move.b	0(a0),d4
00009B46 1A28 0001                  		move.b	obRender(a0),d5
00009B4A 2248                       		movea.l	a0,a1
00009B4C 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009B52 1284                       		move.b	d4,0(a1)
00009B54 234B 0004                  		move.l	a3,obMap(a1)
00009B58 1345 0001                  		move.b	d5,obRender(a1)
00009B5C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009B62 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009B68 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009B6E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009B74 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009B7A 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009B7E 5341                       		subq.w	#1,d1
00009B80 43F8 D800                  		lea		(v_lvlobjspace).w,a1
00009B84 303C 005F                  		move.w	#$5F,d0
00009B88                            ; ===========================================================================
00009B88                            
00009B88                            loc_84AA:
00009B88 4A11                       		tst.b	(a1)
00009B8A 6700                       		beq.s	@cont		
00009B8C 43E9 0040                  		lea		$40(a1),a1
00009B90 51C8 FFF6                  		dbf		d0,loc_84AA	
00009B94 6600                       		bne.s	loc_84F2	
00009B96                            	@cont:
00009B96 5A4B                       		addq.w	#5,a3
00009B98                            
00009B98                            loc_84B2:
00009B98 137C 0006 0024             		move.b	#6,obRoutine(a1)
00009B9E 1284                       		move.b	d4,0(a1)
00009BA0 234B 0004                  		move.l	a3,obMap(a1)
00009BA4 1345 0001                  		move.b	d5,obRender(a1)
00009BA8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009BAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009BB4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00009BBA 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00009BC0 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00009BC6 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00009BCA 6100 0000                  		bsr.w	DisplaySprite1
00009BCE                            
00009BCE                            loc_84EE:
00009BCE 51C9 FFB8                  		dbf	d1,loc_84AA
00009BD2                            
00009BD2                            loc_84F2:
00009BD2 6100 0000                  		bsr.w	DisplaySprite
00009BE0                            ; ===========================================================================
00009BE0                            ; ---------------------------------------------------------------------------
00009BE0                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009BE0                            ; ---------------------------------------------------------------------------
00009BE0 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009BF0 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00009BFA 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00009C02 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00009C0A                            
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            
00009C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C0A                            
00009C0A                            
00009C0A                            SlopeObject2:
00009C0A 43F8 D000                  		lea	(v_player).w,a1
00009C0E 0829 0003 0022             		btst	#3,obStatus(a1)
00009C14 6700                       		beq.s	locret_856E
00009C16 3029 0008                  		move.w	obX(a1),d0
00009C1A 9068 0008                  		sub.w	obX(a0),d0
00009C1E D041                       		add.w	d1,d0
00009C20 E248                       		lsr.w	#1,d0
00009C22 0828 0000 0001             		btst	#0,obRender(a0)
00009C28 6700                       		beq.s	loc_854E
00009C2A 4640                       		not.w	d0
00009C2C D041                       		add.w	d1,d0
00009C2E                            
00009C2E                            loc_854E:
00009C2E 7200                       		moveq	#0,d1
00009C30 1232 0000                  		move.b	(a2,d0.w),d1
00009C34 3028 000C                  		move.w	obY(a0),d0
00009C38 9041                       		sub.w	d1,d0
00009C3A 7200                       		moveq	#0,d1
00009C3C 1229 0016                  		move.b	obHeight(a1),d1
00009C40 9041                       		sub.w	d1,d0
00009C42 3340 000C                  		move.w	d0,obY(a1)
00009C46 9468 0008                  		sub.w	obX(a0),d2
00009C4A 9569 0008                  		sub.w	d2,obX(a1)
00009C4E                            
00009C4E                            locret_856E:
00009C4E 4E75                       		rts	
00009C50                            ; End of function SlopeObject2
00009C50                            
00009C50                            ; ===========================================================================
00009C50                            ; ---------------------------------------------------------------------------
00009C50                            ; Collision data for GHZ collapsing ledge
00009C50                            ; ---------------------------------------------------------------------------
00009C50                            Ledge_SlopeData:
00009C50                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00009C80                            		even
00009C80                            
00009C80                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00009C80                            ; ---------------------------------------------------------------------------
00009C80                            ; Sprite mappings - GHZ	collapsing ledge
00009C80                            ; ---------------------------------------------------------------------------
00009C80                            Map_Ledge_internal:
00009C80 0000                       		dc.w @left-Map_Ledge_internal
00009C82 0000                       		dc.w @right-Map_Ledge_internal
00009C84 0000                       		dc.w @leftsmash-Map_Ledge_internal
00009C86 0000                       		dc.w @rightsmash-Map_Ledge_internal
00009C88 10                         @left:		dc.b $10
00009C89 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009C8E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009C93 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009C98 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009C9D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009CA2 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009CA7 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009CAC F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009CB1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009CB6 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009CBB 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009CC0 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009CC5 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009CCA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009CCF 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009CD4 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009CD9 10                         @right:		dc.b $10
00009CDA C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009CDF D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009CE4 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009CE9 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009CEE D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009CF3 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009CF8 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009CFD F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009D02 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D07 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009D0C 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009D11 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D16 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009D1B 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009D20 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009D25 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009D2A 19                         @leftsmash:	dc.b $19
00009D2B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00009D30 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009D35 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009D3A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009D3F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009D44 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009D49 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009D4E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009D53 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009D58 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009D5D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009D62 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009D67 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009D6C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009D71 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009D76 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009D7B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009D80 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009D85 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009D8A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009D8F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009D94 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009D99 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009D9E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009DA3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009DA8 19                         @rightsmash:	dc.b $19
00009DA9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009DAE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009DB3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009DB8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009DBD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009DC2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009DC7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009DCC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009DD1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009DD6 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009DDB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009DE0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009DE5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009DEA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009DEF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009DF4 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009DF9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009DFE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009E03 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009E08 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009E0D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009E12 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00009E17 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009E1C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009E21 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009E26                            		even
00009E26                            		even
00009E26                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00009E26                            ; --------------------------------------------------------------------------------
00009E26                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00009E26                            ; --------------------------------------------------------------------------------
00009E26                            
00009E26                            SME_WNa9T:	
00009E26 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
00009E2A 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
00009E2E 08                         SME_WNa9T_8:	dc.b 8	
00009E2F F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E34 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009E39 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009E3E 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009E43 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E48 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009E4D F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009E52 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009E57 08                         SME_WNa9T_31:	dc.b 8	
00009E58 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E5D 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
00009E62 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
00009E67 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
00009E6C F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009E71 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
00009E76 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
00009E7B 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00009E80 04                         SME_WNa9T_5A:	dc.b 4	
00009E81 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
00009E86 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
00009E8B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
00009E90 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
00009E95 08                         SME_WNa9T_6F:	dc.b 8	
00009E96 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
00009E9B F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
00009EA0 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
00009EA5 F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
00009EAA 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
00009EAF 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
00009EB4 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
00009EB9 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
00009EBE                            		even
00009EBE                            		even
00009EBE                            
00009EBE                            		include	"_incObj\1C Scenery.asm"
00009EBE                            ; ---------------------------------------------------------------------------
00009EBE                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009EBE                            ; ---------------------------------------------------------------------------
00009EBE                            
00009EBE                            Scenery:
00009EBE 7000                       		moveq	#0,d0
00009EC0 1028 0024                  		move.b	obRoutine(a0),d0
00009EC4 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00009EC8 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00009ECC                            ; ===========================================================================
00009ECC 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00009ECE 0000                       		dc.w Scen_ChkDel-Scen_Index
00009ED0                            ; ===========================================================================
00009ED0                            
00009ED0                            Scen_Main:	; Routine 0
00009ED0 5428 0024                  		addq.b	#2,obRoutine(a0)
00009ED4 7000                       		moveq	#0,d0
00009ED6 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
00009EDA C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009EDE 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
00009EE2 2159 0004                  		move.l	(a1)+,obMap(a0)
00009EE6 3159 0002                  		move.w	(a1)+,obGfx(a0)
00009EEA 0028 0004 0001             		ori.b	#4,obRender(a0)
00009EF0 1159 001A                  		move.b	(a1)+,obFrame(a0)
00009EF4 1159 0014                  		move.b	(a1)+,obActWid(a0)
00009EF8 1159 0018                  		move.b	(a1)+,obPriority(a0)
00009EFC 3028 0018                  		move.w obPriority(a0),d0 
00009F00 E248                       		lsr.w #1,d0 
00009F02 0240 0380                  		andi.w #$380,d0 
00009F06 3140 0018                  		move.w d0,obPriority(a0)		
00009F0A 1159 0020                  		move.b	(a1)+,obColType(a0)
00009F0E                            
00009F0E                            Scen_ChkDel:	; Routine 2
00009F2C 6000 0000                  		bra.w	DisplaySprite
00009F30                            ; ===========================================================================
00009F30                            ; ---------------------------------------------------------------------------
00009F30                            ; Variables for	object $1C are stored in an array
00009F30                            ; ---------------------------------------------------------------------------
00009F30 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
00009F34 44D8                       		dc.w $44D8		; VRAM setting
00009F36 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00009F3A 0000 0000                  		dc.l Map_Scen
00009F3E 44D8                       		dc.w $44D8
00009F40 0008 0200                  		dc.b 0,	8, 2, 0
00009F44 0000 0000                  		dc.l Map_Scen
00009F48 44D8                       		dc.w $44D8
00009F4A 0008 0200                  		dc.b 0,	8, 2, 0
00009F4E 0000 8FE4                  		dc.l Map_Bri
00009F52 438E                       		dc.w $438E
00009F54 0110 0100                  		dc.b 1,	$10, 1,	0
00009F58                            		even
00009F58                            		even
00009F58                            Map_Scen:	include	"_maps\Scenery.asm"
00009F58                            ; ---------------------------------------------------------------------------
00009F58                            ; Sprite mappings - SLZ	lava thrower
00009F58                            ; ---------------------------------------------------------------------------
00009F58                            Map_Scen_internal:
00009F58 0000                       		dc.w byte_8858-Map_Scen_internal
00009F5A 01                         byte_8858:	dc.b 1
00009F5B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009F60                            		even
00009F60                            		even
00009F60                            
00009F60                            		include	"_incObj\1D Unused Switch.asm"
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            ; Object 1D - switch that activates when Sonic touches it
00009F60                            ; (this	is not used anywhere in	the game)
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            
00009F60                            MagicSwitch:
00009F60 7000                       		moveq	#0,d0
00009F62 1028 0024                  		move.b	obRoutine(a0),d0
00009F66 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
00009F6A 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
00009F6E                            ; ===========================================================================
00009F6E 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
00009F70 0000                       		dc.w Swi_Action-Swi_Index
00009F72 0000                       		dc.w Swi_Delete-Swi_Index
00009F74                            
00009F74 =00000030                  swi_origY:	equ $30		; original y-axis position
00009F74                            ; ===========================================================================
00009F74                            
00009F74                            Swi_Main:	; Routine 0
00009F74 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F78 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
00009F80 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009F86 117C 0004 0001             		move.b	#4,obRender(a0)
00009F8C 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
00009F92 117C 0010 0014             		move.b	#$10,obActWid(a0)
00009F98 317C 0280 0018             		move.w	#$280,obPriority(a0)
00009F9E                            
00009F9E                            Swi_Action:	; Routine 2
00009F9E 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
00009FA4 323C 0010                  		move.w	#$10,d1
00009FA8 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
00009FAC 6700                       		beq.s	Swi_ChkDel	; if not, branch
00009FAE                            
00009FAE 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
00009FB2 7001                       		moveq	#1,d0
00009FB4 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
00009FB8                            
00009FB8                            Swi_ChkDel:
00009FB8 6100 0000                  		bsr.w	DisplaySprite
00009FDA 4E75                       		rts	
00009FDC                            ; ===========================================================================
00009FDC                            
00009FDC                            Swi_Delete:	; Routine 4
00009FDC 6100 0000                  		bsr.w	DeleteObject
00009FE0 4E75                       		rts	
00009FE2                            
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            ; Subroutine to	check if Sonic touches the object
00009FE2                            ; ---------------------------------------------------------------------------
00009FE2                            
00009FE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009FE2                            
00009FE2                            
00009FE2                            Swi_ChkTouch:
00009FE2 43F8 D000                  		lea	(v_player).w,a1
00009FE6 3029 0008                  		move.w	obX(a1),d0
00009FEA 9068 0008                  		sub.w	obX(a0),d0
00009FEE D041                       		add.w	d1,d0
00009FF0 6B00                       		bmi.s	Swi_NoTouch
00009FF2 D241                       		add.w	d1,d1
00009FF4 B041                       		cmp.w	d1,d0
00009FF6 6400                       		bcc.s	Swi_NoTouch
00009FF8 3429 000C                  		move.w	obY(a1),d2
00009FFC 1229 0016                  		move.b	obHeight(a1),d1
0000A000 4881                       		ext.w	d1
0000A002 D242                       		add.w	d2,d1
0000A004 3028 000C                  		move.w	obY(a0),d0
0000A008 0440 0010                  		subi.w	#$10,d0
0000A00C 9041                       		sub.w	d1,d0
0000A00E 6200                       		bhi.s	Swi_NoTouch
0000A010 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A014 6500                       		bcs.s	Swi_NoTouch
0000A016 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A018 4E75                       		rts	
0000A01A                            ; ===========================================================================
0000A01A                            
0000A01A                            Swi_NoTouch:
0000A01A 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A01C 4E75                       		rts	
0000A01E                            ; End of function Swi_ChkTouch
0000A01E                            ; End of function Swi_ChkTouch
0000A01E                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A01E                            ; ---------------------------------------------------------------------------
0000A01E                            ; Sprite mappings - Unused switch thingy
0000A01E                            ; ---------------------------------------------------------------------------
0000A01E                            Map_Swi_internal:
0000A01E 0000                       		dc.w byte_891E-Map_Swi_internal
0000A020 04                         byte_891E:	dc.b 4
0000A021 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A026 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A02B E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A030 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A036 00                         		even
0000A036 00                         		even
0000A036                            
0000A036                            		include	"_incObj\2A SBZ Small Door.asm"
0000A036                            ; ---------------------------------------------------------------------------
0000A036                            ; Object 2A - small vertical door (SBZ)
0000A036                            ; ---------------------------------------------------------------------------
0000A036                            
0000A036                            AutoDoor:
0000A036 7000                       		moveq	#0,d0
0000A038 1028 0024                  		move.b	obRoutine(a0),d0
0000A03C 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A040 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A044                            ; ===========================================================================
0000A044 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A046 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A048                            ; ===========================================================================
0000A048                            
0000A048                            ADoor_Main:	; Routine 0
0000A048 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A04C 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A054 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A05A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A060 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A066                            		;move.b	#4,obPriority(a0)
0000A066                            
0000A066                            ADoor_OpenShut:	; Routine 2
0000A066 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A06A 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A06E 3038 D008                  		move.w	(v_player+obX).w,d0
0000A072 D041                       		add.w	d1,d0
0000A074 B068 0008                  		cmp.w	obX(a0),d0
0000A078 6500                       		bcs.s	ADoor_Animate
0000A07A 9041                       		sub.w	d1,d0
0000A07C 9041                       		sub.w	d1,d0
0000A07E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A082 6400                       		bcc.s	ADoor_Animate	; close door
0000A084 D041                       		add.w	d1,d0
0000A086 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A08A 6400                       		bcc.s	loc_899A	; if yes, branch
0000A08C 0828 0000 0022             		btst	#0,obStatus(a0)
0000A092 6600                       		bne.s	ADoor_Animate
0000A094 6000                       		bra.s	ADoor_Open
0000A096                            ; ===========================================================================
0000A096                            
0000A096                            loc_899A:
0000A096 0828 0000 0022             		btst	#0,obStatus(a0)
0000A09C 6700                       		beq.s	ADoor_Animate
0000A09E                            
0000A09E                            ADoor_Open:
0000A09E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A0A4                            
0000A0A4                            ADoor_Animate:
0000A0A4 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A0AA 6100 0000                  		bsr.w	AnimateSprite
0000A0AE 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A0B2 6600                       		bne.s	@remember	; if yes, branch
0000A0B4 323C 0011                  		move.w	#$11,d1
0000A0B8 343C 0020                  		move.w	#$20,d2
0000A0BC 3602                       		move.w	d2,d3
0000A0BE 5243                       		addq.w	#1,d3
0000A0C0 3828 0008                  		move.w	obX(a0),d4
0000A0C4 6100 0000                  		bsr.w	SolidObject
0000A0C8                            
0000A0C8                            	@remember:
0000A0C8 6000 0000                  		bra.w	RememberState
0000A0C8 6000 0000                  		bra.w	RememberState
0000A0CC                            		include	"_anim\SBZ Small Door.asm"
0000A0CC                            ; ---------------------------------------------------------------------------
0000A0CC                            ; Animation script - doors (SBZ)
0000A0CC                            ; ---------------------------------------------------------------------------
0000A0CC 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A0CE 0000                       		dc.w @open-Ani_ADoor
0000A0D0 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A0DC 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A0E8                            		even
0000A0E8                            		even
0000A0E8                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A0E8                            ; --------------------------------------------------------------------------------
0000A0E8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A0E8                            ; --------------------------------------------------------------------------------
0000A0E8                            
0000A0E8                            SME_YnmwF:	
0000A0E8 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A0EC 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A0F0 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A0F4 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A0F8 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A0FA 02                         SME_YnmwF_12:	dc.b 2	
0000A0FB E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A100 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A105 02                         SME_YnmwF_1D:	dc.b 2	
0000A106 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A10B 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A110 02                         SME_YnmwF_28:	dc.b 2	
0000A111 D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A116 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A11B 02                         SME_YnmwF_33:	dc.b 2	
0000A11C D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A121 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A126 02                         SME_YnmwF_3E:	dc.b 2	
0000A127 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A12C 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A131 02                         SME_YnmwF_49:	dc.b 2	
0000A132 CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A137 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A13C 02                         SME_YnmwF_54:	dc.b 2	
0000A13D C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A142 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A147 02                         SME_YnmwF_5F:	dc.b 2	
0000A148 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A14D 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A152 02                         SME_YnmwF_6A:	dc.b 2	
0000A153 C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A158 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A15E 00                         		even
0000A15E 00                         		even
0000A15E                            
0000A15E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A15E                            
0000A15E                            
0000A15E                            Obj44_SolidWall:
0000A15E 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A162 6700                       		beq.s	loc_8AA8
0000A164 6B00 0000                  		bmi.w	loc_8AC4
0000A168 4A40                       		tst.w	d0
0000A16A 6700 0000                  		beq.w	loc_8A92
0000A16E 6B00                       		bmi.s	loc_8A7C
0000A170 4A69 0010                  		tst.w	obVelX(a1)
0000A174 6B00                       		bmi.s	loc_8A92
0000A176 6000                       		bra.s	loc_8A82
0000A178                            ; ===========================================================================
0000A178                            
0000A178                            loc_8A7C:
0000A178 4A69 0010                  		tst.w	obVelX(a1)
0000A17C 6A00                       		bpl.s	loc_8A92
0000A17E                            
0000A17E                            loc_8A82:
0000A17E 9169 0008                  		sub.w	d0,obX(a1)
0000A182 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A188 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A18E                            
0000A18E                            loc_8A92:
0000A18E 0829 0001 0022             		btst	#1,obStatus(a1)
0000A194 6600                       		bne.s	loc_8AB6
0000A196 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A19C 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A1A2 4E75                       		rts	
0000A1A4                            ; ===========================================================================
0000A1A4                            
0000A1A4                            loc_8AA8:
0000A1A4 0828 0005 0022             		btst	#5,obStatus(a0)
0000A1AA 6700                       		beq.s	locret_8AC2
0000A1AC 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A1B2                            
0000A1B2                            loc_8AB6:
0000A1B2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A1B8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A1BE                            
0000A1BE                            locret_8AC2:
0000A1BE 4E75                       		rts	
0000A1C0                            ; ===========================================================================
0000A1C0                            
0000A1C0                            loc_8AC4:
0000A1C0 4A69 0012                  		tst.w	obVelY(a1)
0000A1C4 6A00                       		bpl.s	locret_8AD8
0000A1C6 4A43                       		tst.w	d3
0000A1C8 6A00                       		bpl.s	locret_8AD8
0000A1CA 9769 000C                  		sub.w	d3,obY(a1)
0000A1CE 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A1D4                            
0000A1D4                            locret_8AD8:
0000A1D4 4E75                       		rts	
0000A1D6                            ; End of function Obj44_SolidWall
0000A1D6                            
0000A1D6                            
0000A1D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A1D6                            
0000A1D6                            
0000A1D6                            Obj44_SolidWall2:
0000A1D6 43F8 D000                  		lea	(v_player).w,a1
0000A1DA 3029 0008                  		move.w	obX(a1),d0
0000A1DE 9068 0008                  		sub.w	obX(a0),d0
0000A1E2 D041                       		add.w	d1,d0
0000A1E4 6B00                       		bmi.s	loc_8B48
0000A1E6 3601                       		move.w	d1,d3
0000A1E8 D643                       		add.w	d3,d3
0000A1EA B043                       		cmp.w	d3,d0
0000A1EC 6200                       		bhi.s	loc_8B48
0000A1EE 1629 0016                  		move.b	obHeight(a1),d3
0000A1F2 4883                       		ext.w	d3
0000A1F4 D443                       		add.w	d3,d2
0000A1F6 3629 000C                  		move.w	obY(a1),d3
0000A1FA 9668 000C                  		sub.w	obY(a0),d3
0000A1FE D642                       		add.w	d2,d3
0000A200 6B00                       		bmi.s	loc_8B48
0000A202 3802                       		move.w	d2,d4
0000A204 D844                       		add.w	d4,d4
0000A206 B644                       		cmp.w	d4,d3
0000A208 6400                       		bhs.s	loc_8B48
0000A20A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A20E 6B00                       		bmi.s	loc_8B48
0000A210 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A216 6400                       		bhs.s	loc_8B48
0000A218 4A78 FE08                  		tst.w	(v_debuguse).w
0000A21C 6600                       		bne.s	loc_8B48
0000A21E 3A00                       		move.w	d0,d5
0000A220 B240                       		cmp.w	d0,d1
0000A222 6400                       		bhs.s	loc_8B30
0000A224 D241                       		add.w	d1,d1
0000A226 9041                       		sub.w	d1,d0
0000A228 3A00                       		move.w	d0,d5
0000A22A 4445                       		neg.w	d5
0000A22C                            
0000A22C                            loc_8B30:
0000A22C 3203                       		move.w	d3,d1
0000A22E B443                       		cmp.w	d3,d2
0000A230 6400                       		bhs.s	loc_8B3C
0000A232 9644                       		sub.w	d4,d3
0000A234 3203                       		move.w	d3,d1
0000A236 4441                       		neg.w	d1
0000A238                            
0000A238                            loc_8B3C:
0000A238 BA41                       		cmp.w	d1,d5
0000A23A 6200                       		bhi.s	loc_8B44
0000A23C 7801                       		moveq	#1,d4
0000A23E 4E75                       		rts	
0000A240                            ; ===========================================================================
0000A240                            
0000A240                            loc_8B44:
0000A240 78FF                       		moveq	#-1,d4
0000A242 4E75                       		rts	
0000A244                            ; ===========================================================================
0000A244                            
0000A244                            loc_8B48:
0000A244 7800                       		moveq	#0,d4
0000A246 4E75                       		rts	
0000A248                            ; End of function Obj44_SolidWall2
0000A248                            
0000A248                            ; ===========================================================================
0000A248                            
0000A248                            		include	"_incObj\1E Ball Hog.asm"
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            ; Object 1E - Ball Hog enemy (SBZ)
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            
0000A248                            BallHog:
0000A248 7000                       		moveq	#0,d0
0000A24A 1028 0024                  		move.b	obRoutine(a0),d0
0000A24E 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A252 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A256                            ; ===========================================================================
0000A256 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A258 0000                       		dc.w Hog_Action-Hog_Index
0000A25A                            
0000A25A =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A25A                            ; ===========================================================================
0000A25A                            
0000A25A                            Hog_Main:	; Routine 0
0000A25A 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A260 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A266 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A26E 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A274 117C 0004 0001             		move.b	#4,obRender(a0)
0000A27A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A280 117C 0005 0020             		move.b	#5,obColType(a0)
0000A286 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A28C 6100 0000                  		bsr.w	ObjectFall
0000A290 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A296 4A41                       		tst.w	d1
0000A298 6A00                       		bpl.s	@floornotfound
0000A29A D368 000C                  		add.w	d1,obY(a0)
0000A29E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A2A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A2A8                            
0000A2A8                            	@floornotfound:
0000A2A8 4E75                       		rts	
0000A2AA                            ; ===========================================================================
0000A2AA                            
0000A2AA                            Hog_Action:	; Routine 2
0000A2AA 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A2B0 6100 0000                  		bsr.w	AnimateSprite
0000A2B4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A2BA 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A2BC 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A2C0 6700                       		beq.s	@makeball	; if yes, branch
0000A2C2 6000                       		bra.s	@remember
0000A2C4                            ; ===========================================================================
0000A2C4                            
0000A2C4                            @setlaunchflag:
0000A2C4 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A2C8                            
0000A2C8                            @remember:
0000A2C8 6000 0000                  		bra.w	RememberState
0000A2CC                            ; ===========================================================================
0000A2CC                            
0000A2CC                            @makeball:
0000A2CC 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A2D2 6100 0000                  		bsr.w	FindFreeObj
0000A2D6 6600                       		bne.s	@fail
0000A2D8 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A2DC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A2E2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A2E8 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A2EE 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A2F4 70FC                       		moveq	#-4,d0
0000A2F6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A2FC 6700                       		beq.s	@noflip		; if not, branch
0000A2FE 4440                       		neg.w	d0
0000A300 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A304                            
0000A304                            	@noflip:
0000A304 D169 0008                  		add.w	d0,obX(a1)
0000A308 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A30E 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A314                            
0000A314                            	@fail:
0000A314 60B2                       		bra.s	@remember
0000A314 60B2                       		bra.s	@remember
0000A316                            		include	"_incObj\20 Cannonball.asm"
0000A316                            ; ---------------------------------------------------------------------------
0000A316                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A316                            ; ---------------------------------------------------------------------------
0000A316                            
0000A316                            Cannonball:
0000A316 7000                       		moveq	#0,d0
0000A318 1028 0024                  		move.b	obRoutine(a0),d0
0000A31C 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A320 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A324                            ; ===========================================================================
0000A324 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A326 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A328                            
0000A328 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A328                            ; ===========================================================================
0000A328                            
0000A328                            Cbal_Main:	; Routine 0
0000A328 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A32C 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A332 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A33A 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A340 117C 0004 0001             		move.b	#4,obRender(a0)
0000A346 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A34C 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A352 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A358 7000                       		moveq	#0,d0
0000A35A 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A35E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A362 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A366 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A36C                            
0000A36C                            Cbal_Bounce:	; Routine 2
0000A36C 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A372 4A68 0012                  		tst.w	obVelY(a0)
0000A376 6B00                       		bmi.s	Cbal_ChkExplode
0000A378 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A37E 4A41                       		tst.w	d1		; has ball hit the floor?
0000A380 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A382                            
0000A382 D368 000C                  		add.w	d1,obY(a0)
0000A386 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A38C 4A03                       		tst.b	d3
0000A38E 6700                       		beq.s	Cbal_ChkExplode
0000A390 6B00                       		bmi.s	loc_8CA4
0000A392 4A68 0010                  		tst.w	obVelX(a0)
0000A396 6A00                       		bpl.s	Cbal_ChkExplode
0000A398 4468 0010                  		neg.w	obVelX(a0)
0000A39C 6000                       		bra.s	Cbal_ChkExplode
0000A39E                            ; ===========================================================================
0000A39E                            
0000A39E                            loc_8CA4:
0000A39E 4A68 0010                  		tst.w	obVelX(a0)
0000A3A2 6B00                       		bmi.s	Cbal_ChkExplode
0000A3A4 4468 0010                  		neg.w	obVelX(a0)
0000A3A8                            
0000A3A8                            Cbal_ChkExplode:
0000A3A8 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A3AC 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A3AE                            
0000A3AE                            	Cbal_Explode:
0000A3AE 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A3B2 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A3B6 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A3BC 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A3C0                            ; ===========================================================================
0000A3C0                            
0000A3C0                            Cbal_Animate:
0000A3C0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A3C4 6A00                       		bpl.s	Cbal_Display
0000A3C6 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A3CC 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A3D2                            
0000A3D2                            Cbal_Display:
0000A3D2 6100 0000                  		bsr.w	DisplaySprite
0000A3D6 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A3DA 0640 00E0                  		addi.w	#$E0,d0
0000A3DE B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A3E2 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A3E6 4E75                       		rts	
0000A3E6 4E75                       		rts	
0000A3E8                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            
0000A3E8                            MissileDissolve:
0000A3E8 7000                       		moveq	#0,d0
0000A3EA 1028 0024                  		move.b	obRoutine(a0),d0
0000A3EE 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A3F2 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A3F6                            ; ===========================================================================
0000A3F6 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A3F8 0000                       		dc.w MDis_Animate-MDis_Index
0000A3FA                            ; ===========================================================================
0000A3FA                            
0000A3FA                            MDis_Main:	; Routine 0
0000A3FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A3FE 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A406 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A40C 117C 0004 0001             		move.b	#4,obRender(a0)
0000A412 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A418 117C 0000 0020             		move.b	#0,obColType(a0)
0000A41E 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A424 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A42A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A43A                            
0000A43A                            MDis_Animate:	; Routine 2
0000A43A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A43E 6A00                       		bpl.s	@display
0000A440 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A446 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A44A 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A450 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A454                            
0000A454                            	@display:
0000A454 6000 0000                  		bra.w	DisplaySprite
0000A458                            ; ===========================================================================
0000A458                            
0000A458                            ; ---------------------------------------------------------------------------
0000A458                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A458                            ; ---------------------------------------------------------------------------
0000A458                            
0000A458                            ExplosionItem:
0000A458 7000                       		moveq	#0,d0
0000A45A 1028 0024                  		move.b	obRoutine(a0),d0
0000A45E 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A462 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A466                            ; ===========================================================================
0000A466 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A468 0000                       		dc.w ExItem_Main-ExItem_Index
0000A46A 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A46C                            ; ===========================================================================
0000A46C                            
0000A46C                            ExItem_Animal:	; Routine 0
0000A46C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A470 6100 0000                  		bsr.w	FindFreeObj
0000A474 6600                       		bne.s	ExItem_Main
0000A476 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A47A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A480 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A486 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000A48C                            
0000A48C                            ExItem_Main:	; Routine 2
0000A48C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A490 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000A498 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A49E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A4A4 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A4AA 117C 0000 0020             		move.b	#0,obColType(a0)
0000A4B0 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A4B6 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A4BC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A4CC                            
0000A4CC                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000A4CC 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000A4D0 6A00                       		bpl.s	@display
0000A4D2 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000A4D8 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A4DC 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000A4E2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A4E6                            
0000A4E6                            	@display:
0000A4E6 6000 0000                  		bra.w	DisplaySprite
0000A4EA                            ; ===========================================================================
0000A4EA                            ; ---------------------------------------------------------------------------
0000A4EA                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000A4EA                            ; ---------------------------------------------------------------------------
0000A4EA                            
0000A4EA                            ExplosionBomb:
0000A4EA 7000                       		moveq	#0,d0
0000A4EC 1028 0024                  		move.b	obRoutine(a0),d0
0000A4F0 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000A4F4 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000A4F8                            ; ===========================================================================
0000A4F8 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000A4FA FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000A4FC                            ; ===========================================================================
0000A4FC                            
0000A4FC                            ExBom_Main:	; Routine 0
0000A4FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A500 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000A508 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000A50E 117C 0004 0001             		move.b	#4,obRender(a0)
0000A514 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A51A 117C 0000 0020             		move.b	#0,obColType(a0)
0000A520 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A526 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A52C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A53C                            		include	"_anim\Ball Hog.asm"
0000A53C                            ; ---------------------------------------------------------------------------
0000A53C                            ; Animation script - doors (SBZ)
0000A53C                            ; ---------------------------------------------------------------------------
0000A53C 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000A53E 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000A556 00                         		even
0000A556 00                         		even
0000A556                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000A556                            ; --------------------------------------------------------------------------------
0000A556                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A556                            ; --------------------------------------------------------------------------------
0000A556                            
0000A556                            SME_ZER01:	
0000A556 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000A55A 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000A55E 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000A562 02                         SME_ZER01_C:	dc.b 2	
0000A563 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A568 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000A56D 02                         SME_ZER01_17:	dc.b 2	
0000A56E EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000A573 FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000A578 02                         SME_ZER01_22:	dc.b 2	
0000A579 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000A57E 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000A583 02                         SME_ZER01_2D:	dc.b 2	
0000A584 E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000A589 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000A58E 01                         SME_ZER01_38:	dc.b 1	
0000A58F F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000A594 01                         SME_ZER01_3E:	dc.b 1	
0000A595 F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000A59A                            		even
0000A59A                            		even
0000A59A                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000A59A                            ; ---------------------------------------------------------------------------
0000A59A                            ; Sprite mappings - buzz bomber missile vanishing
0000A59A                            ; ---------------------------------------------------------------------------
0000A59A                            Map_MisDissolve_internal:
0000A59A 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000A59C 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000A59E 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000A5A0 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000A5A2 01                         byte_8EAE:	dc.b 1
0000A5A3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000A5A8 01                         byte_8EB4:	dc.b 1
0000A5A9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000A5AE 01                         byte_8EBA:	dc.b 1
0000A5AF F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000A5B4 01                         byte_8EC0:	dc.b 1
0000A5B5 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000A5BA                            		even
0000A5BA                            		even
0000A5BA                            		include	"_maps\Explosions.asm"
0000A5BA                            ; ---------------------------------------------------------------------------
0000A5BA                            ; Sprite mappings - explosion from a badnik or monitor
0000A5BA                            ; ---------------------------------------------------------------------------
0000A5BA 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000A5BE 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000A5C2 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000A5C4 01                         byte_8ED0:	dc.b 1
0000A5C5 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000A5CA 01                         byte_8ED6:	dc.b 1
0000A5CB F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000A5D0 01                         byte_8EDC:	dc.b 1
0000A5D1 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000A5D6 04                         byte_8EE2:	dc.b 4
0000A5D7 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000A5DC EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000A5E1 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000A5E6 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000A5EB 04                         byte_8EF7:	dc.b 4
0000A5EC EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000A5F1 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000A5F6 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000A5FB FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000A600                            		even
0000A600                            ; ---------------------------------------------------------------------------
0000A600                            ; Sprite mappings - explosion from when	a boss is destroyed
0000A600                            ; ---------------------------------------------------------------------------
0000A600 FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000A602 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000A604 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000A606 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000A608 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000A60A 01                         byte_8F16:	dc.b 1
0000A60B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000A610 01                         byte_8F1C:	dc.b 1
0000A611 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000A616                            		even
0000A616                            		even
0000A616                            
0000A616                            		include	"_incObj\28 Animals.asm"
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            ; Object 28 - animals
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            
0000A616                            Animals:
0000A616 7000                       		moveq	#0,d0
0000A618 1028 0024                  		move.b	obRoutine(a0),d0
0000A61C 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000A620 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000A624                            ; ===========================================================================
0000A624 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000A628 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A62C 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000A630 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000A634 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000A638 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000A63C 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000A640 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A644 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000A648 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000A64C 0000                       		dc.w loc_92D6-Anml_Index
0000A64E                            
0000A64E 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000A65A                            
0000A65A FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000A65E 0000 0000                  		dc.l Map_Animal1
0000A662 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000A666 0000 0000                  		dc.l Map_Animal2	; mappings address
0000A66A FE80 FD00                  		dc.w $FE80, $FD00
0000A66E 0000 0000                  		dc.l Map_Animal1
0000A672 FEC0 FE80                  		dc.w $FEC0, $FE80
0000A676 0000 0000                  		dc.l Map_Animal2
0000A67A FE40 FD00                  		dc.w $FE40, $FD00
0000A67E 0000 0000                  		dc.l Map_Animal3
0000A682 FD00 FC00                  		dc.w $FD00, $FC00
0000A686 0000 0000                  		dc.l Map_Animal2
0000A68A FD80 FC80                  		dc.w $FD80, $FC80
0000A68E 0000 0000                  		dc.l Map_Animal3
0000A692                            
0000A692 FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000A6A2 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000A6B2 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000A6BE                            
0000A6BE 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000A6D2 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000A6E6 0000 0000                  		dc.l Map_Animal3
0000A6EA                            
0000A6EA 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A6FC 0565 05B3                  		dc.w $565, $5B3
0000A700                            ; ===========================================================================
0000A700                            
0000A700                            Anml_Ending:	; Routine 0
0000A700 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000A704 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000A708 7000                       		moveq	#0,d0
0000A70A 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000A70E D040                       		add.w	d0,d0		; multiply d0 by 2
0000A710 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000A714 0440 0014                  		subi.w	#$14,d0
0000A718 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000A71E D040                       		add.w	d0,d0
0000A720 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000A726 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000A72A 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A730 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000A736 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A73C 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000A742 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A748 117C 0004 0001             		move.b	#4,obRender(a0)
0000A74E 08E8 0000 0001             		bset	#0,obRender(a0)
0000A754 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A75A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A760 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A766 6000 0000                  		bra.w	DisplaySprite
0000A76A                            ; ===========================================================================
0000A76A                            
0000A76A                            Anml_FromEnemy:
0000A76A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A76E 6100 940C                  		bsr.w	RandomNumber
0000A772 0240 0001                  		andi.w	#1,d0
0000A776 7200                       		moveq	#0,d1
0000A778 1238 FE10                  		move.b	(v_zone).w,d1
0000A77C D241                       		add.w	d1,d1
0000A77E D240                       		add.w	d0,d1
0000A780 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000A784 1031 1000                  		move.b	(a1,d1.w),d0
0000A788 1140 0030                  		move.b	d0,$30(a0)
0000A78C E748                       		lsl.w	#3,d0
0000A78E 43FA FECA                  		lea	Anml_Variables(pc),a1
0000A792 D2C0                       		adda.w	d0,a1
0000A794 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A798 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A79C 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000A7A0 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000A7A6 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A7AC 6700                       		beq.s	loc_90C0	; if yes, branch
0000A7AE 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000A7B4                            
0000A7B4                            loc_90C0:
0000A7B4 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000A7BA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7C0 08E8 0000 0001             		bset	#0,obRender(a0)
0000A7C6 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000A7CC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A7D2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000A7D8 117C 0002 001A             		move.b	#2,obFrame(a0)
0000A7DE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000A7E4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A7E8 6600                       		bne.s	loc_911C
0000A7EA 6100 0000                  		bsr.w	FindFreeObj
0000A7EE 6600                       		bne.s	Anml_Display
0000A7F0 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000A7F4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A7FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A800 3028 003E                  		move.w	$3E(a0),d0
0000A804 E248                       		lsr.w	#1,d0
0000A806 1340 001A                  		move.b	d0,obFrame(a1)
0000A80A                            
0000A80A                            Anml_Display:
0000A80A 6000 0000                  		bra.w	DisplaySprite
0000A80E                            ; ===========================================================================
0000A80E                            
0000A80E                            loc_911C:
0000A80E 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000A814 4268 0010                  		clr.w	obVelX(a0)
0000A818 6000 0000                  		bra.w	DisplaySprite
0000A81C                            ; ===========================================================================
0000A81C                            
0000A81C                            loc_912A:
0000A81C 4A28 0001                  		tst.b	obRender(a0)
0000A820 6A00 0000                  		bpl.w	DeleteObject
0000A824 6100 0000                  		bsr.w	ObjectFall
0000A828 4A68 0012                  		tst.w	obVelY(a0)
0000A82C 6B00                       		bmi.s	loc_9180
0000A82E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A834 4A41                       		tst.w	d1
0000A836 6A00                       		bpl.s	loc_9180
0000A838 D368 000C                  		add.w	d1,obY(a0)
0000A83C 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A842 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A848 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A84E 1028 0030                  		move.b	$30(a0),d0
0000A852 D000                       		add.b	d0,d0
0000A854 5800                       		addq.b	#4,d0
0000A856 1140 0024                  		move.b	d0,obRoutine(a0)
0000A85A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000A85E 6700                       		beq.s	loc_9180
0000A860 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000A866 6700                       		beq.s	loc_9180
0000A868 4468 0010                  		neg.w	obVelX(a0)
0000A86C 0868 0000 0001             		bchg	#0,obRender(a0)
0000A872                            
0000A872                            loc_9180:
0000A872 6000 0000                  		bra.w	DisplaySprite
0000A876                            ; ===========================================================================
0000A876                            
0000A876                            loc_9184:
0000A876 6100 0000                  		bsr.w	ObjectFall
0000A87A 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A880 4A68 0012                  		tst.w	obVelY(a0)
0000A884 6B00                       		bmi.s	loc_91AE
0000A886 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A88C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A892 4A41                       		tst.w	d1
0000A894 6A00                       		bpl.s	loc_91AE
0000A896 D368 000C                  		add.w	d1,obY(a0)
0000A89A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A8A0                            
0000A8A0                            loc_91AE:
0000A8A0 4A28 0028                  		tst.b	obSubtype(a0)
0000A8A4 6600                       		bne.s	loc_9224
0000A8A6 4A28 0001                  		tst.b	obRender(a0)
0000A8AA 6A00 0000                  		bpl.w	DeleteObject
0000A8AE 6000 0000                  		bra.w	DisplaySprite
0000A8B2                            ; ===========================================================================
0000A8B2                            
0000A8B2                            loc_91C0:
0000A8B2 6100 0000                  		bsr.w	SpeedToPos
0000A8B6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A8BC 4A68 0012                  		tst.w	obVelY(a0)
0000A8C0 6B00                       		bmi.s	loc_91FC
0000A8C2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8C8 4A41                       		tst.w	d1
0000A8CA 6A00                       		bpl.s	loc_91FC
0000A8CC D368 000C                  		add.w	d1,obY(a0)
0000A8D0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A8D6 4A28 0028                  		tst.b	obSubtype(a0)
0000A8DA 6700                       		beq.s	loc_91FC
0000A8DC 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000A8E2 6700                       		beq.s	loc_91FC
0000A8E4 4468 0010                  		neg.w	obVelX(a0)
0000A8E8 0868 0000 0001             		bchg	#0,obRender(a0)
0000A8EE                            
0000A8EE                            loc_91FC:
0000A8EE 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A8F2 6A00                       		bpl.s	loc_9212
0000A8F4 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A8FA 5228 001A                  		addq.b	#1,obFrame(a0)
0000A8FE 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A904                            
0000A904                            loc_9212:
0000A904 4A28 0028                  		tst.b	obSubtype(a0)
0000A908 6600                       		bne.s	loc_9224
0000A90A 4A28 0001                  		tst.b	obRender(a0)
0000A90E 6A00 0000                  		bpl.w	DeleteObject
0000A912 6000 0000                  		bra.w	DisplaySprite
0000A916                            ; ===========================================================================
0000A916                            
0000A916                            loc_9224:
0000A916 3028 0008                  		move.w	obX(a0),d0
0000A91A 9078 D008                  		sub.w	(v_player+obX).w,d0
0000A91E 6500                       		bcs.s	loc_923C
0000A920 0440 0180                  		subi.w	#$180,d0
0000A924 6A00                       		bpl.s	loc_923C
0000A926 4A28 0001                  		tst.b	obRender(a0)
0000A92A 6A00 0000                  		bpl.w	DeleteObject
0000A92E                            
0000A92E                            loc_923C:
0000A92E 6000 0000                  		bra.w	DisplaySprite
0000A932                            ; ===========================================================================
0000A932                            
0000A932                            loc_9240:
0000A932 4A28 0001                  		tst.b	obRender(a0)
0000A936 6A00 0000                  		bpl.w	DeleteObject
0000A93A 5368 0036                  		subq.w	#1,$36(a0)
0000A93E 6600 0000                  		bne.w	loc_925C
0000A942 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000A948 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A94E                            
0000A94E                            loc_925C:
0000A94E 6000 0000                  		bra.w	DisplaySprite
0000A952                            ; ===========================================================================
0000A952                            
0000A952                            loc_9260:
0000A952 6100 0000                  		bsr.w	sub_9404
0000A956 6400                       		bcc.s	loc_927C
0000A958 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A95E 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A964 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000A96A 6000 FF46                  		bra.w	loc_91C0
0000A96E                            ; ===========================================================================
0000A96E                            
0000A96E                            loc_927C:
0000A96E 6000 FFA6                  		bra.w	loc_9224
0000A972                            ; ===========================================================================
0000A972                            
0000A972                            loc_9280:
0000A972 6100 0000                  		bsr.w	sub_9404
0000A976 6A00                       		bpl.s	loc_92B6
0000A978 4268 0010                  		clr.w	obVelX(a0)
0000A97C 4268 0032                  		clr.w	$32(a0)
0000A980 6100 0000                  		bsr.w	SpeedToPos
0000A984 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A98A 6100 0000                  		bsr.w	loc_93C4
0000A98E 6100 0000                  		bsr.w	loc_93EC
0000A992 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A996 6A00                       		bpl.s	loc_92B6
0000A998 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A99E 5228 001A                  		addq.b	#1,obFrame(a0)
0000A9A2 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000A9A8                            
0000A9A8                            loc_92B6:
0000A9A8 6000 FF6C                  		bra.w	loc_9224
0000A9AC                            ; ===========================================================================
0000A9AC                            
0000A9AC                            loc_92BA:
0000A9AC 6100 0000                  		bsr.w	sub_9404
0000A9B0 6A00                       		bpl.s	loc_9310
0000A9B2 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000A9B8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000A9BE 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000A9C4 6000 FEB0                  		bra.w	loc_9184
0000A9C8                            ; ===========================================================================
0000A9C8                            
0000A9C8                            loc_92D6:
0000A9C8 6100 0000                  		bsr.w	ObjectFall
0000A9CC 117C 0001 001A             		move.b	#1,obFrame(a0)
0000A9D2 4A68 0012                  		tst.w	obVelY(a0)
0000A9D6 6B00                       		bmi.s	loc_9310
0000A9D8 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9DE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9E4 4A41                       		tst.w	d1
0000A9E6 6A00                       		bpl.s	loc_9310
0000A9E8 4628 0029                  		not.b	$29(a0)
0000A9EC 6600                       		bne.s	loc_9306
0000A9EE 4468 0010                  		neg.w	obVelX(a0)
0000A9F2 0868 0000 0001             		bchg	#0,obRender(a0)
0000A9F8                            
0000A9F8                            loc_9306:
0000A9F8 D368 000C                  		add.w	d1,obY(a0)
0000A9FC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA02                            
0000AA02                            loc_9310:
0000AA02 6000 FF12                  		bra.w	loc_9224
0000AA06                            ; ===========================================================================
0000AA06                            
0000AA06                            loc_9314:
0000AA06 6100 0000                  		bsr.w	sub_9404
0000AA0A 6A00                       		bpl.s	loc_932E
0000AA0C 4268 0010                  		clr.w	obVelX(a0)
0000AA10 4268 0032                  		clr.w	$32(a0)
0000AA14 6100 0000                  		bsr.w	ObjectFall
0000AA18 6100 0000                  		bsr.w	loc_93C4
0000AA1C 6100 0000                  		bsr.w	loc_93EC
0000AA20                            
0000AA20                            loc_932E:
0000AA20 6000 FEF4                  		bra.w	loc_9224
0000AA24                            ; ===========================================================================
0000AA24                            
0000AA24                            loc_9332:
0000AA24 6100 0000                  		bsr.w	sub_9404
0000AA28 6A00                       		bpl.s	loc_936C
0000AA2A 6100 0000                  		bsr.w	ObjectFall
0000AA2E 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AA34 4A68 0012                  		tst.w	obVelY(a0)
0000AA38 6B00                       		bmi.s	loc_936C
0000AA3A 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA40 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA46 4A41                       		tst.w	d1
0000AA48 6A00                       		bpl.s	loc_936C
0000AA4A 4468 0010                  		neg.w	obVelX(a0)
0000AA4E 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA54 D368 000C                  		add.w	d1,obY(a0)
0000AA58 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA5E                            
0000AA5E                            loc_936C:
0000AA5E 6000 FEB6                  		bra.w	loc_9224
0000AA62                            ; ===========================================================================
0000AA62                            
0000AA62                            loc_9370:
0000AA62 6100 0000                  		bsr.w	sub_9404
0000AA66 6A00                       		bpl.s	loc_93C0
0000AA68 6100 0000                  		bsr.w	SpeedToPos
0000AA6C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AA72 4A68 0012                  		tst.w	obVelY(a0)
0000AA76 6B00                       		bmi.s	loc_93AA
0000AA78 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AA7E 4A41                       		tst.w	d1
0000AA80 6A00                       		bpl.s	loc_93AA
0000AA82 4628 0029                  		not.b	$29(a0)
0000AA86 6600                       		bne.s	loc_93A0
0000AA88 4468 0010                  		neg.w	obVelX(a0)
0000AA8C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AA92                            
0000AA92                            loc_93A0:
0000AA92 D368 000C                  		add.w	d1,obY(a0)
0000AA96 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AA9C                            
0000AA9C                            loc_93AA:
0000AA9C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AAA0 6A00                       		bpl.s	loc_93C0
0000AAA2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AAA8 5228 001A                  		addq.b	#1,obFrame(a0)
0000AAAC 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AAB2                            
0000AAB2                            loc_93C0:
0000AAB2 6000 FE62                  		bra.w	loc_9224
0000AAB6                            ; ===========================================================================
0000AAB6                            
0000AAB6                            loc_93C4:
0000AAB6 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AABC 4A68 0012                  		tst.w	obVelY(a0)
0000AAC0 6B00                       		bmi.s	locret_93EA
0000AAC2 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAC8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AACE 4A41                       		tst.w	d1
0000AAD0 6A00                       		bpl.s	locret_93EA
0000AAD2 D368 000C                  		add.w	d1,obY(a0)
0000AAD6 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AADC                            
0000AADC                            locret_93EA:
0000AADC 4E75                       		rts	
0000AADE                            ; ===========================================================================
0000AADE                            
0000AADE                            loc_93EC:
0000AADE 08E8 0000 0001             		bset	#0,obRender(a0)
0000AAE4 3028 0008                  		move.w	obX(a0),d0
0000AAE8 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AAEC 6400                       		bcc.s	locret_9402
0000AAEE 08A8 0000 0001             		bclr	#0,obRender(a0)
0000AAF4                            
0000AAF4                            locret_9402:
0000AAF4 4E75                       		rts	
0000AAF6                            
0000AAF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AAF6                            
0000AAF6                            
0000AAF6                            sub_9404:
0000AAF6 3038 D008                  		move.w	(v_player+obX).w,d0
0000AAFA 9068 0008                  		sub.w	obX(a0),d0
0000AAFE 0440 00B8                  		subi.w	#$B8,d0
0000AB02 4E75                       		rts	
0000AB04                            ; End of function sub_9404
0000AB04                            ; End of function sub_9404
0000AB04                            		include	"_incObj\29 Points.asm"
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04                            ; Object 29 - points that appear when you destroy something
0000AB04                            ; ---------------------------------------------------------------------------
0000AB04                            
0000AB04                            Points:
0000AB04 7000                       		moveq	#0,d0
0000AB06 1028 0024                  		move.b	obRoutine(a0),d0
0000AB0A 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000AB0E 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000AB12 6000 0000                  		bra.w	DisplaySprite
0000AB16                            ; ===========================================================================
0000AB16 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000AB18 0000                       		dc.w Poi_Slower-Poi_Index
0000AB1A                            ; ===========================================================================
0000AB1A                            
0000AB1A                            Poi_Main:	; Routine 0
0000AB1A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB1E 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000AB26 317C 256D 0002             		move.w	#$256D,obGfx(a0)
0000AB2C 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB32 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AB38 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AB3E 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000AB44                            
0000AB44                            Poi_Slower:	; Routine 2
0000AB44 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000AB48 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000AB4C 6100 0000                  		bsr.w	SpeedToPos
0000AB50 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000AB56 4E75                       		rts	
0000AB56 4E75                       		rts	
0000AB58                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000AB58                            ; ---------------------------------------------------------------------------
0000AB58                            ; Sprite mappings - animals
0000AB58                            ; ---------------------------------------------------------------------------
0000AB58                            Map_Animal1_internal:
0000AB58 0000                       		dc.w byte_9472-Map_Animal1_internal
0000AB5A 0000                       		dc.w byte_9478-Map_Animal1_internal
0000AB5C 0000                       		dc.w byte_946C-Map_Animal1_internal
0000AB5E 01                         byte_946C:	dc.b 1
0000AB5F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB64 01                         byte_9472:	dc.b 1
0000AB65 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000AB6A 01                         byte_9478:	dc.b 1
0000AB6B F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000AB70                            		even
0000AB70                            		even
0000AB70                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            ; Sprite mappings - animals
0000AB70                            ; ---------------------------------------------------------------------------
0000AB70                            Map_Animal2_internal:
0000AB70 0000                       		dc.w byte_948A-Map_Animal2_internal
0000AB72 0000                       		dc.w byte_9490-Map_Animal2_internal
0000AB74 0000                       		dc.w byte_9484-Map_Animal2_internal
0000AB76 01                         byte_9484:	dc.b 1
0000AB77 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB7C 01                         byte_948A:	dc.b 1
0000AB7D FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000AB82 01                         byte_9490:	dc.b 1
0000AB83 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000AB88                            		even
0000AB88                            		even
0000AB88                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000AB88                            ; ---------------------------------------------------------------------------
0000AB88                            ; Sprite mappings - animals
0000AB88                            ; ---------------------------------------------------------------------------
0000AB88                            Map_Animal3_internal:
0000AB88 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000AB8A 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000AB8C 0000                       		dc.w byte_949C-Map_Animal3_internal
0000AB8E 01                         byte_949C:	dc.b 1
0000AB8F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000AB94 01                         byte_94A2:	dc.b 1
0000AB95 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000AB9A 01                         byte_94A8:	dc.b 1
0000AB9B FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000ABA0                            		even
0000ABA0                            		even
0000ABA0                            Map_Poi:	include	"_maps\Points.asm"
0000ABA0                            ; --------------------------------------------------------------------------------
0000ABA0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000ABA0                            ; --------------------------------------------------------------------------------
0000ABA0                            
0000ABA0                            SME_qLvsg:	
0000ABA0 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000ABA4 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000ABA8 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000ABAC 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000ABAE 01                         SME_qLvsg_E:	dc.b 1	
0000ABAF FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000ABB4 01                         SME_qLvsg_14:	dc.b 1	
0000ABB5 FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000ABBA 01                         SME_qLvsg_1A:	dc.b 1	
0000ABBB FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000ABC0 01                         SME_qLvsg_20:	dc.b 1	
0000ABC1 FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000ABC6 01                         SME_qLvsg_26:	dc.b 1	
0000ABC7 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000ABCC 02                         SME_qLvsg_2C:	dc.b 2	
0000ABCD FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ABD2 FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000ABD7 02                         SME_qLvsg_37:	dc.b 2	
0000ABD8 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000ABDD FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000ABE2                            		even
0000ABE2                            		even
0000ABE2                            
0000ABE2                            		include	"_incObj\1F Crabmeat.asm"
0000ABE2                            ; ---------------------------------------------------------------------------
0000ABE2                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000ABE2                            ; ---------------------------------------------------------------------------
0000ABE2                            
0000ABE2                            Crabmeat:
0000ABE2 7000                       		moveq	#0,d0
0000ABE4 1028 0024                  		move.b	obRoutine(a0),d0
0000ABE8 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000ABEC 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000ABF0                            ; ===========================================================================
0000ABF0                            Crab_Index:
0000ABF0 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000ABF2 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000ABF4 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000ABF6 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000ABF8 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000ABFA                            
0000ABFA =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000ABFA =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000ABFA =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000ABFA =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000ABFA =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000ABFA                            
0000ABFA =00000030                  crab_timedelay:	equ $30
0000ABFA =00000032                  crab_mode:	equ $32
0000ABFA                            ; ===========================================================================
0000ABFA                            
0000ABFA                            Crab_Main:	; Routine 0
0000ABFA 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000AC00 117C 0008 0017             		move.b	#8,obWidth(a0)
0000AC06 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000AC0E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000AC14 117C 0004 0001             		move.b	#4,obRender(a0)
0000AC1A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AC20 117C 0006 0020             		move.b	#6,obColType(a0)
0000AC26 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000AC2C 6100 0000                  		bsr.w	ObjectFall
0000AC30 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000AC36 4A41                       		tst.w	d1
0000AC38 6A00                       		bpl.s	@floornotfound
0000AC3A D368 000C                  		add.w	d1,obY(a0)
0000AC3E 1143 0026                  		move.b	d3,obAngle(a0)
0000AC42 317C 0000 0012             		move.w	#0,obVelY(a0)
0000AC48 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AC4C                            
0000AC4C                            	@floornotfound:
0000AC4C 4E75                       		rts	
0000AC4E                            ; ===========================================================================
0000AC4E                            
0000AC4E                            Crab_Action:	; Routine 2
0000AC4E 7000                       		moveq	#0,d0
0000AC50 1028 0025                  		move.b	ob2ndRout(a0),d0
0000AC54 323B 0000                  		move.w	@index(pc,d0.w),d1
0000AC58 4EBB 1000                  		jsr	@index(pc,d1.w)
0000AC5C 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000AC62 6100 0000                  		bsr.w	AnimateSprite
0000AC66 6000 0000                  		bra.w	RememberState
0000AC6A                            ; ===========================================================================
0000AC6A 0000                       @index:		dc.w @waittofire-@index
0000AC6C 0000                       		dc.w @walkonfloor-@index
0000AC6E                            ; ===========================================================================
0000AC6E                            
0000AC6E                            @waittofire:
0000AC6E 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000AC72 6A00                       		bpl.s	@dontmove
0000AC74 4A28 0001                  		tst.b	obRender(a0)
0000AC78 6A00                       		bpl.s	@movecrab
0000AC7A 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000AC80 6600                       		bne.s	@fire
0000AC82                            
0000AC82                            	@movecrab:
0000AC82 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000AC86 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000AC8C 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000AC92 6100 0000                  		bsr.w	Crab_SetAni
0000AC96 5600                       		addq.b	#3,d0
0000AC98 1140 001C                  		move.b	d0,obAnim(a0)
0000AC9C 0868 0000 0022             		bchg	#0,obStatus(a0)
0000ACA2 6600                       		bne.s	@noflip
0000ACA4 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000ACA8                            
0000ACA8                            	@dontmove:
0000ACA8                            	@noflip:
0000ACA8 4E75                       		rts	
0000ACAA                            ; ===========================================================================
0000ACAA                            
0000ACAA                            @fire:
0000ACAA 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000ACB0 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000ACB6 6100 0000                  		bsr.w	FindFreeObj
0000ACBA 6600                       		bne.s	@failleft
0000ACBC 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000ACC0 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ACC6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ACCC 0469 0010 0008             		subi.w	#$10,obX(a1)
0000ACD2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000ACD8 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000ACDE                            
0000ACDE                            	@failleft:
0000ACDE 6100 0000                  		bsr.w	FindFreeObj
0000ACE2 6600                       		bne.s	@failright
0000ACE4 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000ACE8 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000ACEE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000ACF4 0669 0010 0008             		addi.w	#$10,obX(a1)
0000ACFA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD00 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000AD06                            
0000AD06                            	@failright:
0000AD06 4E75                       		rts	
0000AD08                            ; ===========================================================================
0000AD08                            
0000AD08                            @walkonfloor:
0000AD08 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000AD0C 6B00                       		bmi.s	loc_966E
0000AD0E 6100 0000                  		bsr.w	SpeedToPos
0000AD12 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000AD18 6600                       		bne.s	loc_9654
0000AD1A 3628 0008                  		move.w	obX(a0),d3
0000AD1E 0643 0010                  		addi.w	#$10,d3
0000AD22 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD28 6700                       		beq.s	loc_9640
0000AD2A 0443 0020                  		subi.w	#$20,d3
0000AD2E                            
0000AD2E                            loc_9640:
0000AD2E 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000AD34 0C41 FFF8                  		cmpi.w	#-8,d1
0000AD38 6D00                       		blt.s	loc_966E
0000AD3A 0C41 000C                  		cmpi.w	#$C,d1
0000AD3E 6C00                       		bge.s	loc_966E
0000AD40 4E75                       		rts	
0000AD42                            ; ===========================================================================
0000AD42                            
0000AD42                            loc_9654:
0000AD42 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AD48 D368 000C                  		add.w	d1,obY(a0)
0000AD4C 1143 0026                  		move.b	d3,obAngle(a0)
0000AD50 6100 0000                  		bsr.w	Crab_SetAni
0000AD54 5600                       		addq.b	#3,d0
0000AD56 1140 001C                  		move.b	d0,obAnim(a0)
0000AD5A 4E75                       		rts	
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            loc_966E:
0000AD5C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000AD60 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000AD66 317C 0000 0010             		move.w	#0,obVelX(a0)
0000AD6C 6100 0000                  		bsr.w	Crab_SetAni
0000AD70 1140 001C                  		move.b	d0,obAnim(a0)
0000AD74 4E75                       		rts	
0000AD76                            ; ---------------------------------------------------------------------------
0000AD76                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000AD76                            ; ---------------------------------------------------------------------------
0000AD76                            
0000AD76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD76                            
0000AD76                            
0000AD76                            Crab_SetAni:
0000AD76 7000                       		moveq	#0,d0
0000AD78 1628 0026                  		move.b	obAngle(a0),d3
0000AD7C 6B00                       		bmi.s	loc_96A4
0000AD7E 0C03 0006                  		cmpi.b	#6,d3
0000AD82 6500                       		bcs.s	locret_96A2
0000AD84 7001                       		moveq	#1,d0
0000AD86 0828 0000 0022             		btst	#0,obStatus(a0)
0000AD8C 6600                       		bne.s	locret_96A2
0000AD8E 7002                       		moveq	#2,d0
0000AD90                            
0000AD90                            locret_96A2:
0000AD90 4E75                       		rts	
0000AD92                            ; ===========================================================================
0000AD92                            
0000AD92                            loc_96A4:
0000AD92 0C03 00FA                  		cmpi.b	#-6,d3
0000AD96 6200                       		bhi.s	locret_96B6
0000AD98 7002                       		moveq	#2,d0
0000AD9A 0828 0000 0022             		btst	#0,obStatus(a0)
0000ADA0 6600                       		bne.s	locret_96B6
0000ADA2 7001                       		moveq	#1,d0
0000ADA4                            
0000ADA4                            locret_96B6:
0000ADA4 4E75                       		rts	
0000ADA6                            ; End of function Crab_SetAni
0000ADA6                            
0000ADA6                            ; ===========================================================================
0000ADA6                            
0000ADA6                            Crab_Delete:	; Routine 4
0000ADA6 6100 0000                  		bsr.w	DeleteObject
0000ADAA 4E75                       		rts	
0000ADAC                            ; ===========================================================================
0000ADAC                            ; ---------------------------------------------------------------------------
0000ADAC                            ; Sub-object - missile that the	Crabmeat throws
0000ADAC                            ; ---------------------------------------------------------------------------
0000ADAC                            
0000ADAC                            Crab_BallMain:	; Routine 6
0000ADAC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ADB0 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000ADB8 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000ADBE 117C 0004 0001             		move.b	#4,obRender(a0)
0000ADC4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000ADCA 117C 0087 0020             		move.b	#$87,obColType(a0)
0000ADD0 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ADD6 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000ADDC 117C 0007 001C             		move.b	#7,obAnim(a0)
0000ADE2                            
0000ADE2                            Crab_BallMove:	; Routine 8
0000ADE2 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000ADE8 6100 0000                  		bsr.w	AnimateSprite
0000ADEC 6100 0000                  		bsr.w	ObjectFall
0000ADF0 6100 0000                  		bsr.w	DisplaySprite
0000ADF4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000ADF8 0640 00E0                  		addi.w	#$E0,d0
0000ADFC B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000AE00 6500                       		bcs.s	@delete		; if yes, branch
0000AE02 4E75                       		rts	
0000AE04                            
0000AE04                            	@delete:
0000AE04 6000 0000                  		bra.w	DeleteObject
0000AE04 6000 0000                  		bra.w	DeleteObject
0000AE08                            		include	"_anim\Crabmeat.asm"
0000AE08                            ; ---------------------------------------------------------------------------
0000AE08                            ; Animation script - Crabmeat enemy
0000AE08                            ; ---------------------------------------------------------------------------
0000AE08 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000AE0E 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000AE14 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000AE18 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000AE1C 00                         		even
0000AE1C 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000AE20 00                         		even
0000AE20 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000AE24 00                         		even
0000AE24 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000AE2A 00                         		even
0000AE2A 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000AE30 00                         		even
0000AE30 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000AE36 00                         		even
0000AE36 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000AE3A 00                         		even
0000AE3A 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000AE3E                            		even
0000AE3E                            		even
0000AE3E                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            Map_Crab_internal:
0000AE3E 0000                       		dc.w @stand-Map_Crab_internal
0000AE40 0000                       		dc.w @walk-Map_Crab_internal
0000AE42 0000                       		dc.w @slope1-Map_Crab_internal
0000AE44 0000                       		dc.w @slope2-Map_Crab_internal
0000AE46 0000                       		dc.w @firing-Map_Crab_internal
0000AE48 0000                       		dc.w @ball1-Map_Crab_internal
0000AE4A 0000                       		dc.w @ball2-Map_Crab_internal
0000AE4C 04                         @stand:		dc.b 4
0000AE4D F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000AE52 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000AE57 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000AE5C 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000AE61 04                         @walk:		dc.b 4
0000AE62 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000AE67 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000AE6C 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000AE71 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000AE76 04                         @slope1:	dc.b 4
0000AE77 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000AE7C EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000AE81 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000AE86 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000AE8B 04                         @slope2:	dc.b 4
0000AE8C EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000AE91 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000AE96 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000AE9B FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000AEA0 06                         @firing:	dc.b 6
0000AEA1 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000AEA6 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000AEAB F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000AEB0 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000AEB5 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000AEBA 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000AEBF 01                         @ball1:		dc.b 1
0000AEC0 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000AEC5 01                         @ball2:		dc.b 1
0000AEC6 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000AECC 00                         		even
0000AECC 00                         		even
0000AECC                            		include	"_incObj\06 Mozzietron.asm"
0000AECC                            ; ===========================================================================
0000AECC                            ; ---------------------------------------------------------------------------
0000AECC                            ; Object 06 - Mozzietron enemy	(GHZ)
0000AECC                            ; ---------------------------------------------------------------------------
0000AECC                            
0000AECC                            Mozzietron:					; XREF: Obj_Index
0000AECC 7000                       		moveq	#0,d0
0000AECE 1028 0024                  		move.b	$24(a0),d0
0000AED2 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000AED6 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000AEDA                            ; ===========================================================================
0000AEDA 0000                       MozIndex:	dc.w MozMain-MozIndex
0000AEDC 0000                       		dc.w MozAction-MozIndex
0000AEDE 0000                       		dc.w MozDelete-MozIndex
0000AEE0                            ; ===========================================================================
0000AEE0                            
0000AEE0                            MozMain:				; XREF: MozIndex
0000AEE0 5428 0024                  		addq.b	#2,$24(a0)
0000AEE4 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000AEEC 317C 0444 0002             		move.w	#$444,2(a0)
0000AEF2 117C 0004 0001             		move.b	#4,1(a0)
0000AEF8 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AEFE 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000AF04 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000AF0A                            MozAction:				; XREF: MozIndex
0000AF0A 7000                       		moveq	#0,d0
0000AF0C 1028 0025                  		move.b	$25(a0),d0
0000AF10 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000AF14 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000AF18 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000AF1E 6100 0000                  		bsr.w	AnimateSprite
0000AF22 6000 0000                  		bra.w	RememberState
0000AF26                            ; ===========================================================================
0000AF26 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000AF28 0000                       		dc.w MozChkNrSonic-MozIndex2
0000AF2A 0000                       		dc.w MozPinned-MozIndex2
0000AF2C                            ; ===========================================================================
0000AF2C                            
0000AF2C                            MozMove:				; XREF: MozIndex2
0000AF2C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF30 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000AF32 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000AF38 6600                       		bne.s	MozFire	; if yes, branch
0000AF3A 5428 0025                  		addq.b	#2,$25(a0)
0000AF3E 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000AF44 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000AF4A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000AF50 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000AF56 6600                       		bne.s	locret_986C	; if not, branch
0000AF58 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000AF5C                            
0000AF5C                            locret_986C:
0000AF5C 4E75                       		rts	
0000AF5E                            ; ===========================================================================
0000AF5E                            
0000AF5E                            MozFire:				; XREF: MozMove
0000AF5E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000AF64 6100 0000                  		bsr.w	ObjectFall
0000AF68 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000AF6E 4A41                       		tst.w	d1 ; is floor distance positive? 
0000AF70 6A00                       		bpl.s   @return ; if yes, branch 
0000AF72 303C 00B6                  		move.w    #$B6,d0
0000AF76 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000AF7C 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000AF82 D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000AF86 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000AF8A 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000AF8E                            		@return:
0000AF8E 4E75                       	    		rts
0000AF90                            		
0000AF90                            
0000AF90                            ; ===========================================================================
0000AF90                            
0000AF90                            MozPinned:
0000AF90 4E75                               rts
0000AF92                                    
0000AF92                            ; ===========================================================================
0000AF92                            
0000AF92                            MozChkDel:				; XREF: Obj55_DropFly
0000AF92 4A28 0001                  		tst.b	1(a0)
0000AF96 6A00 0000                  		bpl.w	DeleteObject
0000AF9A 4E75                       		rts	
0000AF9C                            ; ===========================================================================
0000AF9C                            
0000AF9C                            MozChkNrSonic:			; XREF: MozIndex2
0000AF9C                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000AF9C 6B00                       		bmi.s	MozChgDir
0000AF9E 6100 0000                  		bsr.w	SpeedToPos
0000AFA2 4A28 0034                  		tst.b	$34(a0)
0000AFA6 6600                       		bne.s	locret_992A
0000AFA8 3038 D008                  		move.w	($FFFFD008).w,d0
0000AFAC 9068 0008                  		sub.w	8(a0),d0
0000AFB0 6A00                       		bpl.s	MozSetNrSonic
0000AFB2 4440                       		neg.w	d0
0000AFB4                            
0000AFB4                            MozSetNrSonic:
0000AFB4 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000AFB8 6400                       		bcc.s	locret_992A	; if not, branch
0000AFBA 4A28 0001                  		tst.b	1(a0)
0000AFBE 6A00                       		bpl.s	locret_992A
0000AFC0 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000AFC6 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000AFCC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000AFD2 6000                       		bra.s	MozStop
0000AFD4                            ; ===========================================================================
0000AFD4                            
0000AFD4                            MozChgDir:				; XREF: MozChkNrSonic
0000AFD4 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000AFDA 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000AFE0 317C 003B 0032             		move.w	#59,$32(a0)
0000AFE6                            
0000AFE6                            MozStop:				; XREF: MozSetNrSonic
0000AFE6 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000AFEA 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000AFF0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000AFF6                            
0000AFF6                            locret_992A:
0000AFF6 4E75                       		rts	
0000AFF8                            ; ===========================================================================
0000AFF8                            
0000AFF8                            MozDelete:				; XREF: MozIndex
0000AFF8 6100 0000                  		bsr.w	DeleteObject
0000AFFC 4E75                       		rts	
0000AFFC 4E75                       		rts	
0000AFFE                            		include	"_incObj\22 Buzz Bomber.asm"
0000AFFE                            ; ===========================================================================
0000AFFE                            ; ---------------------------------------------------------------------------
0000AFFE                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000AFFE                            ; ---------------------------------------------------------------------------
0000AFFE                            
0000AFFE                            BuzzBomber:
0000AFFE 7000                       		moveq	#0,d0
0000B000 1028 0024                  		move.b	obRoutine(a0),d0
0000B004 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B008 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B00C                            ; ===========================================================================
0000B00C 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B00E 0000                       		dc.w Buzz_Action-Buzz_Index
0000B010 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B012                            
0000B012 =00000032                  buzz_timedelay:	equ $32
0000B012 =00000034                  buzz_buzzstatus:	equ $34
0000B012 =0000003C                  buzz_parent:	equ $3C
0000B012                            ; ===========================================================================
0000B012                            
0000B012                            Buzz_Main:	; Routine 0
0000B012 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B016 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B01E 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B024 117C 0004 0001             		move.b	#4,obRender(a0)
0000B02A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B030 117C 0008 0020             		move.b	#8,obColType(a0)
0000B036 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B03C                            
0000B03C                            Buzz_Action:	; Routine 2
0000B03C 7000                       		moveq	#0,d0
0000B03E 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B042 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B046 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B04A 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B050 6100 0000                  		bsr.w	AnimateSprite
0000B054 6000 0000                  		bra.w	RememberState
0000B058                            ; ===========================================================================
0000B058 0000                       @index:		dc.w @move-@index
0000B05A 0000                       		dc.w @chknearsonic-@index
0000B05C                            ; ===========================================================================
0000B05C                            
0000B05C                            @move:
0000B05C 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B060 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B062 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B068 6600                       		bne.s	@fire		; if yes, branch
0000B06A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B06E 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B074 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B07A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B080 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B086 6600                       		bne.s	@noflip		; if not, branch
0000B088 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B08C                            
0000B08C                            	@noflip:
0000B08C 4E75                       		rts	
0000B08E                            ; ===========================================================================
0000B08E                            
0000B08E                            	@fire:
0000B08E 6100 0000                  		bsr.w	FindFreeObj
0000B092 6600                       		bne.s	@fail
0000B094 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B098 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B09E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B0A4 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B0AA 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B0B0 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B0B6 303C 0018                  		move.w	#$18,d0
0000B0BA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B0C0 6600                       		bne.s	@noflip2	; if not, branch
0000B0C2 4440                       		neg.w	d0
0000B0C4 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B0C8                            
0000B0C8                            	@noflip2:
0000B0C8 D169 0008                  		add.w	d0,obX(a1)
0000B0CC 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B0D2 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B0D8 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B0DC 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B0E2 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B0E8 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B0EE                            
0000B0EE                            	@fail:
0000B0EE 4E75                       		rts	
0000B0F0                            ; ===========================================================================
0000B0F0                            
0000B0F0                            @chknearsonic:
0000B0F0 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B0F4 6B00                       		bmi.s	@chgdirection
0000B0F6 6100 0000                  		bsr.w	SpeedToPos
0000B0FA 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B0FE 6600                       		bne.s	@keepgoing
0000B100 3038 D008                  		move.w	(v_player+obX).w,d0
0000B104 9068 0008                  		sub.w	obX(a0),d0
0000B108 6A00                       		bpl.s	@isleft
0000B10A 4440                       		neg.w	d0
0000B10C                            
0000B10C                            	@isleft:
0000B10C 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B110 6400                       		bcc.s	@keepgoing	; if not, branch
0000B112 4A28 0001                  		tst.b	obRender(a0)
0000B116 6A00                       		bpl.s	@keepgoing
0000B118 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B11E 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B124 6000                       		bra.s	@stop
0000B126                            ; ===========================================================================
0000B126                            
0000B126                            	@chgdirection:
0000B126 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B12C 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B132 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B138                            
0000B138                            	@stop:
0000B138 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B13C 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B142 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B148                            
0000B148                            @keepgoing:
0000B148 4E75                       		rts	
0000B14A                            ; ===========================================================================
0000B14A                            
0000B14A                            Buzz_Delete:	; Routine 4
0000B14A 6100 0000                  		bsr.w	DeleteObject
0000B14E 4E75                       		rts	
0000B14E 4E75                       		rts	
0000B150                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B150                            ; ---------------------------------------------------------------------------
0000B150                            ; Object 23 - missile that Buzz	Bomber throws
0000B150                            ; ---------------------------------------------------------------------------
0000B150                            
0000B150                            Missile:
0000B150 7000                       		moveq	#0,d0
0000B152 1028 0024                  		move.b	obRoutine(a0),d0
0000B156 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B15A 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B15E                            ; ===========================================================================
0000B15E 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B160 0000                       		dc.w Msl_Animate-Msl_Index
0000B162 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B164 0000                       		dc.w Msl_Delete-Msl_Index
0000B166 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B168                            
0000B168 =0000003C                  msl_parent:	equ $3C
0000B168                            ; ===========================================================================
0000B168                            
0000B168                            Msl_Main:	; Routine 0
0000B168 5368 0032                  		subq.w	#1,$32(a0)
0000B16C 6A00                       		bpl.s	Msl_ChkCancel
0000B16E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B172 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B17A 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B180 117C 0004 0001             		move.b	#4,obRender(a0)
0000B186 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B18C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B192 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B198 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B19C 6700                       		beq.s	Msl_Animate	; if not, branch
0000B19E                            
0000B19E 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B1A4 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1AA 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B1B0 6000                       		bra.s	Msl_Animate2
0000B1B2                            ; ===========================================================================
0000B1B2                            
0000B1B2                            Msl_Animate:	; Routine 2
0000B1B2 6100                       		bsr.s	Msl_ChkCancel
0000B1B4 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B1BA 6100 0000                  		bsr.w	AnimateSprite
0000B1BE 6000 0000                  		bra.w	DisplaySprite
0000B1C2                            
0000B1C2                            ; ---------------------------------------------------------------------------
0000B1C2                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B1C2                            ; destroyed, and if it has, then cancel	the missile
0000B1C2                            ; ---------------------------------------------------------------------------
0000B1C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1C2                            
0000B1C2                            
0000B1C2                            Msl_ChkCancel:
0000B1C2 2268 003C                  		movea.l	msl_parent(a0),a1
0000B1C6 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B1CA 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B1CC 4E75                       		rts	
0000B1CE                            ; End of function Msl_ChkCancel
0000B1CE                            
0000B1CE                            ; ===========================================================================
0000B1CE                            
0000B1CE                            Msl_FromBuzz:	; Routine 4
0000B1CE 0828 0007 0022             		btst	#7,obStatus(a0)
0000B1D4 6600                       		bne.s	@explode
0000B1D6 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B1DC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B1E2 6100 0000                  		bsr.w	SpeedToPos
0000B1E6 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B1EC 6100 0000                  		bsr.w	AnimateSprite
0000B1F0 6100 0000                  		bsr.w	DisplaySprite
0000B1F4 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B1F8 0640 00E0                  		addi.w	#$E0,d0
0000B1FC B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B200 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B202 4E75                       		rts	
0000B204                            ; ===========================================================================
0000B204                            
0000B204                            	@explode:
0000B204 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B208 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B20E 6000 F1D8                  		bra.w	MissileDissolve
0000B212                            ; ===========================================================================
0000B212                            
0000B212                            Msl_Delete:	; Routine 6
0000B212 6100 0000                  		bsr.w	DeleteObject
0000B216 4E75                       		rts	
0000B218                            ; ===========================================================================
0000B218                            
0000B218                            Msl_FromNewt:	; Routine 8
0000B218 4A28 0001                  		tst.b	obRender(a0)
0000B21C 6AF4                       		bpl.s	Msl_Delete
0000B21E 6100 0000                  		bsr.w	SpeedToPos
0000B222                            
0000B222                            Msl_Animate2:
0000B222 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B228 6100 0000                  		bsr.w	AnimateSprite
0000B22C 6100 0000                  		bsr.w	DisplaySprite
0000B230 4E75                       		rts	
0000B230 4E75                       		rts	
0000B232                            		include	"_anim\Mozzietron.asm"
0000B232                            ; ---------------------------------------------------------------------------
0000B232                            ; Animation script - Buzz Bomber enemy
0000B232                            ; ---------------------------------------------------------------------------
0000B232 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B234 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B236 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B238 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B23C 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B240 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B248 00                         		even
0000B248 00                         		even
0000B248                            		include	"_anim\Buzz Bomber.asm"
0000B248                            ; ---------------------------------------------------------------------------
0000B248                            ; Animation script - Buzz Bomber enemy
0000B248                            ; ---------------------------------------------------------------------------
0000B248 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B24A 0000                       		dc.w @fly2-Ani_Buzz
0000B24C 0000                       		dc.w @fires-Ani_Buzz
0000B24E 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B252 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B256 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B25A                            		even
0000B25A                            		even
0000B25A                            		include	"_anim\Buzz Bomber Missile.asm"
0000B25A                            ; ---------------------------------------------------------------------------
0000B25A                            ; Animation script - missile that Buzz Bomber throws
0000B25A                            ; ---------------------------------------------------------------------------
0000B25A 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B25C 0000                       		dc.w @missile-Ani_Missile
0000B25E 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B262 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B266                            		even
0000B266                            		even
0000B266                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B266                            ; --------------------------------------------------------------------------------
0000B266                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B266                            ; --------------------------------------------------------------------------------
0000B266                            
0000B266                            SME_qvHIs:	
0000B266 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B26A 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B26E 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B272 02                         SME_qvHIs_C:	dc.b 2	
0000B273 FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B278 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B27D 01                         SME_qvHIs_17:	dc.b 1	
0000B27E F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B283 02                         SME_qvHIs_1D:	dc.b 2	
0000B284 E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B289 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B28E 03                         SME_qvHIs_28:	dc.b 3	
0000B28F DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B294 E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B299 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B29E 04                         SME_qvHIs_38:	dc.b 4	
0000B29F E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B2A4 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B2A9 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B2AE F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B2B3 04                         SME_qvHIs_4D:	dc.b 4	
0000B2B4 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B2B9 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B2BE F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B2C3 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B2C8                            		even
0000B2C8                            		even
0000B2C8                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B2C8                            ; --------------------------------------------------------------------------------
0000B2C8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B2C8                            ; --------------------------------------------------------------------------------
0000B2C8                            
0000B2C8                            SME_yccqJ:	
0000B2C8 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B2CC 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B2D0 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B2D4 06                         SME_yccqJ_C:	dc.b 6	
0000B2D5 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B2DA F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B2DF 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B2E4 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B2E9 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B2EE EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B2F3 06                         SME_yccqJ_2B:	dc.b 6	
0000B2F4 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B2F9 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B2FE 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B303 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B308 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B30D F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B312 06                         SME_yccqJ_4A:	dc.b 6	
0000B313 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B318 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B31D 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B322 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B327 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B32C EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B331 06                         SME_yccqJ_69:	dc.b 6	
0000B332 F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B337 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B33C 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B341 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B346 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B34B F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B350 07                         SME_yccqJ_88:	dc.b 7	
0000B351 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B356 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B35B 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B360 EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B365 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B36A 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B36F EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B374 04                         SME_yccqJ_AC:	dc.b 4	
0000B375 F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B37A 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B37F 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B384 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B38A 00                         		even
0000B38A 00                         		even
0000B38A                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B38A                            ; ---------------------------------------------------------------------------
0000B38A                            ; Sprite mappings - missile that Buzz Bomber throws
0000B38A                            ; ---------------------------------------------------------------------------
0000B38A                            Map_Missile_internal:
0000B38A 0000                       		dc.w @Flare1-Map_Missile_internal
0000B38C 0000                       		dc.w @Flare2-Map_Missile_internal
0000B38E 0000                       		dc.w @Ball1-Map_Missile_internal
0000B390 0000                       		dc.w @Ball2-Map_Missile_internal
0000B392 01                         @Flare1:	dc.b 1
0000B393 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B398 01                         @Flare2:	dc.b 1
0000B399 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B39E 01                         @Ball1:		dc.b 1
0000B39F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B3A4 01                         @Ball2:		dc.b 1
0000B3A5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B3AA                            		even
0000B3AA                            		even
0000B3AA                            
0000B3AA                            		include	"_incObj\25 & 37 Rings.asm"
0000B3AA                            ; ---------------------------------------------------------------------------
0000B3AA                            ; Object 25 - rings
0000B3AA                            ; ---------------------------------------------------------------------------
0000B3AA                            
0000B3AA                            Rings:
0000B3AA 7000                       		moveq	#0,d0
0000B3AC 1028 0024                  		move.b	obRoutine(a0),d0
0000B3B0 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B3B4 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B3B8                            ; ===========================================================================
0000B3B8                            Ring_Index:
0000B3B8 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B3BA 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B3BC 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B3BE 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B3C0 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B3C2 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B3C4 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B3C6 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B3C8 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B3CA                            
0000B3CA =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B3CA =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B3CA =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B3CA =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B3CA =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B3CA =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B3CA =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B3CA =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B3CA =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B3CA                            ; ---------------------------------------------------------------------------
0000B3CA                            ; Distances between rings (format: horizontal, vertical)
0000B3CA                            ; ---------------------------------------------------------------------------
0000B3CA 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B3CC 1800                       		dc.b $18, 0		; horizontal normal
0000B3CE 2000                       		dc.b $20, 0		; horizontal wide
0000B3D0 0010                       		dc.b 0,	$10		; vertical tight
0000B3D2 0018                       		dc.b 0,	$18		; vertical normal
0000B3D4 0020                       		dc.b 0,	$20		; vertical wide
0000B3D6 1010                       		dc.b $10, $10		; diagonal
0000B3D8 1818                       		dc.b $18, $18
0000B3DA 2020                       		dc.b $20, $20
0000B3DC F010                       		dc.b $F0, $10
0000B3DE E818                       		dc.b $E8, $18
0000B3E0 E020                       		dc.b $E0, $20
0000B3E2 1008                       		dc.b $10, 8
0000B3E4 1810                       		dc.b $18, $10
0000B3E6 F008                       		dc.b $F0, 8
0000B3E8 E810                       		dc.b $E8, $10
0000B3EA                            ; ===========================================================================
0000B3EA                            
0000B3EA                            Ring_Main:	; Routine 0
0000B3EA 45F8 FC00                  		lea	(v_objstate).w,a2
0000B3EE 7000                       		moveq	#0,d0
0000B3F0 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B3F4 45F2 0002                  		lea	2(a2,d0.w),a2
0000B3F8 1812                       		move.b	(a2),d4
0000B3FA 1228 0028                  		move.b	obSubtype(a0),d1
0000B3FE 1001                       		move.b	d1,d0
0000B400 0241 0007                  		andi.w	#7,d1
0000B404 0C41 0007                  		cmpi.w	#7,d1
0000B408 6600                       		bne.s	loc_9B80
0000B40A 7206                       		moveq	#6,d1
0000B40C                            
0000B40C                            	loc_9B80:
0000B40C 4841                       		swap	d1
0000B40E 323C 0000                  		move.w	#0,d1
0000B412 E808                       		lsr.b	#4,d0
0000B414 D040                       		add.w	d0,d0
0000B416 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B41A 4885                       		ext.w	d5
0000B41C 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B420 4886                       		ext.w	d6
0000B422 2248                       		movea.l	a0,a1
0000B424 3428 0008                  		move.w	obX(a0),d2
0000B428 3628 000C                  		move.w	obY(a0),d3
0000B42C E20C                       		lsr.b	#1,d4
0000B42E 6500                       		bcs.s	loc_9C02
0000B430 0892 0007                  		bclr	#7,(a2)
0000B434 6000                       		bra.s	loc_9BBA
0000B436                            ; ===========================================================================
0000B436                            
0000B436                            Ring_MakeRings:
0000B436 4841                       		swap	d1
0000B438 E20C                       		lsr.b	#1,d4
0000B43A 6500                       		bcs.s	loc_9C02
0000B43C 0892 0007                  		bclr	#7,(a2)
0000B440 6100 0000                  		bsr.w	FindFreeObj
0000B444 6600                       		bne.s	loc_9C0E
0000B446                            
0000B446                            loc_9BBA:
0000B446 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B44A 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B44E 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B452 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B458 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B45C 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B464 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B46A 137C 0004 0001             		move.b	#4,obRender(a1)
0000B470 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B476 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B47C 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B482 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000B488 1341 0034                  		move.b	d1,$34(a1)
0000B48C                            
0000B48C                            loc_9C02:
0000B48C 5241                       		addq.w	#1,d1
0000B48E D445                       		add.w	d5,d2		; add ring spacing value to d2
0000B490 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000B492 4841                       		swap	d1
0000B494 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000B498                            
0000B498                            loc_9C0E:
0000B498 0812 0000                  		btst	#0,(a2)
0000B49C 6600 0000                  		bne.w	DeleteObject
0000B4A0                            
0000B4A0                            Ring_Animate:	; Routine 2
0000B4A0 4A38 FE2C                  		tst.b	(v_shield).w
0000B4A4 6700                       		beq.s	@skip
0000B4A6 4A28 0001                  		tst.b	obRender(a0)
0000B4AA 6A00                       		bpl.s	@skip
0000B4AC                            		
0000B4AC 43F8 D000                  		lea (v_player).w,a1
0000B4B0                            		
0000B4B0 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B4B4 9068 0008                  		sub.w	obX(a0),d0
0000B4B8 6A00                       		bpl.s	@a1
0000B4BA 4440                       		neg.w	d0
0000B4BC                            		
0000B4BC                            	@a1:
0000B4BC 0C40 0040                  		cmpi.w	#$40,d0
0000B4C0 6200                       		bhi.s	@skip
0000B4C2                            		
0000B4C2 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B4C6 9068 000C                  		sub.w	obY(a0),d0
0000B4CA 6A00                       		bpl.s	@a2
0000B4CC 4440                       		neg.w	d0
0000B4CE                            		
0000B4CE                            	@a2:
0000B4CE 0C40 0040                  		cmpi.w	#$40,d0
0000B4D2 6200                       		bhi.s	@skip
0000B4D4                            		
0000B4D4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B4DA 45F8 FC00                  		lea	(v_objstate).w,a2
0000B4DE 7000                       		moveq	#0,d0
0000B4E0 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B4E4 1228 0034                  		move.b	$34(a0),d1
0000B4E8 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B4EC                            		
0000B4EC                            	@skip:
0000B4EC 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000B4F2 6100 0000                  		bsr.w	DisplaySprite
0000B512 4E75                       		rts	
0000B514                            ; ===========================================================================
0000B514                            
0000B514                            Ring_Collect:	; Routine 4
0000B514 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B518 117C 0000 0020             		move.b	#0,obColType(a0)
0000B51E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B524 6100 0000                  		bsr.w	CollectRing
0000B528 45F8 FC00                  		lea	(v_objstate).w,a2
0000B52C 7000                       		moveq	#0,d0
0000B52E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B532 1228 0034                  		move.b	$34(a0),d1
0000B536 03F2 0002                  		bset	d1,2(a2,d0.w)
0000B53A                            
0000B53A                            Ring_Sparkle:	; Routine 6
0000B53A 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B540 6100 0000                  		bsr.w	AnimateSprite
0000B544 6000 0000                  		bra.w	DisplaySprite
0000B548                            ; ===========================================================================
0000B548                            
0000B548                            Ring_Delete:	; Routine 8
0000B548 6000 0000                  		bra.w	DeleteObject
0000B54C                            
0000B54C                            Ring_Attract:	; Routine $A
0000B54C 4A38 FE2C                  		tst.b	(v_shield).w
0000B550 6600                       		bne.s	@skip
0000B552 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000B556 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000B55C 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000B562 6000                       		bra.s	@display
0000B564                            		
0000B564                            	@skip:
0000B564 323C 0030                  		move.w	#$30,d1	; horizontal
0000B568 3038 D008                  		move.w	(v_player+obX).w,d0
0000B56C B068 0008                  		cmp.w	obX(a0),d0
0000B570 6400                       		bcc.s	@a1
0000B572 4441                       		neg.w	d1
0000B574 4A68 0010                  		tst.w	obVelX(a0)
0000B578 6B00                       		bmi.s	@a2
0000B57A D241                       		add.w	d1,d1
0000B57C D241                       		add.w	d1,d1
0000B57E 6000                       		bra.s	@a2
0000B580                            
0000B580                            	@a1:
0000B580 4A68 0010                  		tst.w	obVelX(a0)
0000B584 6A00                       		bpl.s	@a2
0000B586 D241                       		add.w	d1,d1
0000B588 D241                       		add.w	d1,d1
0000B58A                            
0000B58A                            	@a2:
0000B58A D368 0010                  		add.w	d1,obVelX(a0)
0000B58E 323C 0030                  		move.w	#$30,d1	; vertical
0000B592 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B596 B068 000C                  		cmp.w	obY(a0),d0
0000B59A 6400                       		bcc.s	@a3
0000B59C 4441                       		neg.w	d1
0000B59E 4A68 0012                  		tst.w	obVelY(a0)
0000B5A2 6B00                       		bmi.s	@a4
0000B5A4 D241                       		add.w	d1,d1
0000B5A6 D241                       		add.w	d1,d1
0000B5A8 6000                       		bra.s	@a4
0000B5AA                            
0000B5AA                            	@a3:
0000B5AA 4A68 0012                  		tst.w	obVelY(a0)
0000B5AE 6A00                       		bpl.s	@a4
0000B5B0 D241                       		add.w	d1,d1
0000B5B2 D241                       		add.w	d1,d1
0000B5B4                            
0000B5B4                            	@a4:
0000B5B4 D368 0012                  		add.w	d1,obVelY(a0)
0000B5B8 6100 0000                  		bsr.w	SpeedToPos
0000B5BC                            		
0000B5BC                            	@display:
0000B5BC 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000B5C2 6000 0000                  		bra.w	DisplaySprite
0000B5C6                            
0000B5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5C6                            
0000B5C6                            
0000B5C6                            CollectRing:
0000B5C6 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000B5CA 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000B5D0 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000B5D4 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000B5DA 6500                       		bcs.s	@playsnd	; if yes, branch
0000B5DC 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000B5E2 6700                       		beq.s	@got100
0000B5E4 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000B5EA 6500                       		bcs.s	@playsnd	; if yes, branch
0000B5EC 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000B5F2 6600                       		bne.s	@playsnd
0000B5F4                            
0000B5F4                            	@got100:
0000B5F4 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000B5F8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000B5FC 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000B600                            		
0000B600                            
0000B600                            	@playsnd:
0000B600 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000B606                            ; End of function CollectRing
0000B606                            
0000B606                            ; ===========================================================================
0000B606                            ; ---------------------------------------------------------------------------
0000B606                            ; Object 37 - rings flying out of Sonic	when he's hit
0000B606                            ; ---------------------------------------------------------------------------
0000B606                            
0000B606                            RingLoss:
0000B606 7000                       		moveq	#0,d0
0000B608 1028 0024                  		move.b	obRoutine(a0),d0
0000B60C 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000B610 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000B614                            ; ===========================================================================
0000B614 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000B616 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000B618 0000                       		dc.w RLoss_Collect-RLoss_Index
0000B61A 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000B61C 0000                       		dc.w RLoss_Delete-RLoss_Index
0000B61E                            ; ===========================================================================
0000B61E                            
0000B61E                            RLoss_Count:	; Routine 0
0000B61E 2248                       		movea.l	a0,a1
0000B620 7A00                       		moveq	#0,d5
0000B622 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000B626 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000B62C 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000B62E 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000B632 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000B638 6700                               beq.s   @cont                       ; if not, branch
0000B63A 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000B640 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000B642                            @cont:
0000B642 BA40                               cmp.w   d0,d5
0000B644 6500                               bcs.s   @belowmax
0000B646 3A00                               move.w  d0,d5
0000B648                            
0000B648                            @belowmax:
0000B648 5345                               subq.w  #1,d5
0000B64A 383C 0288                          move.w  #$288,d4
0000B64E 6000                       		bra.s	@makerings
0000B650                            ; ===========================================================================
0000B650                            
0000B650                            	@loop:
0000B650 6100 0000                  		bsr.w	FindFreeObj
0000B654 6600 0000                  		bne.w	@resetcounter
0000B658                            
0000B658                            @makerings:
0000B658 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000B65C 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B660 137C 0008 0016             		move.b	#8,obHeight(a1)
0000B666 137C 0008 0017             		move.b	#8,obWidth(a1)
0000B66C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B672 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B678 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B680 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B686 137C 0004 0001             		move.b	#4,obRender(a1)
0000B68C 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B692 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B698 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B69C 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000B69E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B6A2 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B6A6 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000B6A8 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000B6AA E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000B6AC                            @skiphalvingvel:
0000B6AC 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000B6B0 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000B6B4 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000B6B8                            
0000B6B8                            @resetcounter:
0000B6B8 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000B6BE 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000B6C4 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000B6CA 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000B6CC 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000B6D0 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000B6DE                            
0000B6DE                            RLoss_Bounce:	; Routine 2
0000B6DE 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000B6E4 6100 0000                  		bsr.w	SpeedToPos
0000B6E8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B6EE 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000B6F2 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000B6F4 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000B6F8 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000B6FC 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000B6FE 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000B704                            	@skipbounceslow:
0000B704 6B00                       		bmi.s	@chkdel
0000B706 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000B70A D007                       		add.b	d7,d0
0000B70C 0200 0003                  		andi.b	#3,d0
0000B710 6600                       		bne.s	@chkdel
0000B712 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B718 4A41                       		tst.w	d1
0000B71A 6A00                       		bpl.s	@chkdel
0000B71C D368 000C                  		add.w	d1,obY(a0)
0000B720 3028 0012                  		move.w	obVelY(a0),d0
0000B724 E440                       		asr.w	#2,d0
0000B726 9168 0012                  		sub.w	d0,obVelY(a0)
0000B72A 4468 0012                  		neg.w	obVelY(a0)
0000B72E                            
0000B72E                            	@chkdel:
0000B72E 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000B732 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000B736 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B73A 0640 00E0                  		addi.w	#$E0,d0
0000B73E B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000B742 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000B746 4A38 FE2C                  		tst.b	(v_shield).w
0000B74A 6700                       		beq.s	@skip
0000B74C 4A28 0001                  		tst.b	obRender(a0)
0000B750 6A00                       		bpl.s	@skip
0000B752                            		
0000B752 43F8 D000                  		lea (v_player).w,a1
0000B756                            		
0000B756 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000B75A 9068 0008                  		sub.w	obX(a0),d0
0000B75E 6A00                       		bpl.s	@a1
0000B760 4440                       		neg.w	d0
0000B762                            		
0000B762                            	@a1:
0000B762 0C40 00A0                  		cmpi.w	#$A0,d0
0000B766 6200                       		bhi.s	@skip
0000B768                            		
0000B768 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000B76C 9068 000C                  		sub.w	obY(a0),d0
0000B770 6A00                       		bpl.s	@a2
0000B772 4440                       		neg.w	d0
0000B774                            		
0000B774                            	@a2:
0000B774 0C40 00A0                  		cmpi.w	#$A0,d0
0000B778 6200                       		bhi.s	@skip
0000B77A                            		
0000B77A 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000B780 10BC 0000                  		move.b	#id_Rings,0(a0)
0000B784                            		
0000B784                            	@skip:		
0000B784 43F8 AD80                          lea     v_spritequeue+$180,a1
0000B788 D2FC 0080                          adda.w  #$80,a1
0000B78C 0C51 007E                          cmpi.w  #$7E,(a1)
0000B790 6400                               bcc.s   @cont
0000B792 5451                               addq.w  #2,(a1)
0000B794 D2D1                               adda.w  (a1),a1
0000B796 3288                               move.w  a0,(a1)
0000B798                            		
0000B798                            	@cont:
0000B798 4E75                               rts		
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            RLoss_Collect:	; Routine 4
0000B79A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B79E 117C 0000 0020             		move.b	#0,obColType(a0)
0000B7A4 6100 FE20                  		bsr.w	CollectRing
0000B7A8                            
0000B7A8                            RLoss_Sparkle:	; Routine 6
0000B7A8 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000B7AE 6100 0000                  		bsr.w	AnimateSprite
0000B7B2 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000B7B6 0C51 007E                          cmpi.w  #$7E,(a1)
0000B7BA 6400                               bcc.s   @cont
0000B7BC 5451                               addq.w  #2,(a1)
0000B7BE D2D1                               adda.w  (a1),a1
0000B7C0 3288                               move.w  a0,(a1)
0000B7C2                            			
0000B7C2                            	@cont:
0000B7C2 4E75                               rts
0000B7C4                            ; ===========================================================================
0000B7C4                            
0000B7C4                            RLoss_Delete:	; Routine 8
0000B7C4 6000 0000                  		bra.w	DeleteObject
0000B7C8                            
0000B7C8                            ; ----------------------------------------------------------------------------------------------
0000B7C8                            ; Ring Spawn Array 
0000B7C8                            ; ----------------------------------------------------------------------------------------------
0000B7C8                            
0000B7C8 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000B7D8 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000B7E8 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000B7F8 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000B808 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000B818 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000B828 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000B838 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000B848                                            even
0000B848                            ; ===========================================================================
0000B848                            ; -------------------------------------------------------------------------------------
0000B848                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000B848                            ; -------------------------------------------------------------------------------------
0000B848                            
0000B848                            SpillRingData_Water:
0000B848 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000B858 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000B868 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000B878 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000B888 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000B898 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000B8A8 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000B8B8 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000B8C8                                            even
0000B8C8                            ; ===========================================================================				
0000B8C8                            ; ===========================================================================				
0000B8C8                            		include	"_incObj\4B Giant Ring.asm"
0000B8C8                            ; ---------------------------------------------------------------------------
0000B8C8                            ; Object 4B - giant ring for entry to special stage
0000B8C8                            ; ---------------------------------------------------------------------------
0000B8C8                            
0000B8C8                            GiantRing:
0000B8C8 7000                       		moveq	#0,d0
0000B8CA 1028 0024                  		move.b	obRoutine(a0),d0
0000B8CE 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000B8D2 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000B8D6                            ; ===========================================================================
0000B8D6 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000B8D8 0000                       		dc.w GRing_Animate-GRing_Index
0000B8DA 0000                       		dc.w GRing_Collect-GRing_Index
0000B8DC 0000                       		dc.w GRing_Delete-GRing_Index
0000B8DE                            ; ===========================================================================
0000B8DE                            
0000B8DE                            GRing_Main:    ; Routine 0
0000B8DE 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000B8E6 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000B8EC 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B8F2 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000B8F8 4A28 0001                  		tst.b	obRender(a0)
0000B8FC 6A00                       		bpl.s	GRing_Animate
0000B8FE 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000B904 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000B908 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000B90E 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000B910                            
0000B910 4E75                       		rts    
0000B912                            ; ===========================================================================
0000B912                            
0000B912                            GRing_Okay:
0000B912 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B916 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000B91C 117C 0052 0020             		move.b	#$52,obColType(a0)
0000B922 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000B928                            
0000B928                            GRing_Animate:	; Routine 2
0000B928 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000B94C 6000 0000                  		bra.w	DisplaySprite
0000B950                            ; ===========================================================================
0000B950                            
0000B950                            GRing_Collect:	; Routine 4
0000B950 5528 0024                  		subq.b	#2,obRoutine(a0)
0000B954 117C 0000 0020             		move.b	#0,obColType(a0)
0000B95A 6100 0000                  		bsr.w	FindFreeObj
0000B95E 6600 0000                  		bne.w	GRing_PlaySnd
0000B962 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000B966 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B96C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B972 2348 003C                  		move.l	a0,$3C(a1)
0000B976 3038 D008                  		move.w	(v_player+obX).w,d0
0000B97A B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000B97E 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000B980 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000B986 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000B98C 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000B992                            		
0000B992                            GRing_PlaySnd:
0000B99C 608A                       		bra.s	GRing_Animate
0000B99E                            ; ===========================================================================
0000B99E                            
0000B99E                            GRing_Delete:	; Routine 6
0000B99E 6000 0000                  		bra.w	DeleteObject
0000B99E 6000 0000                  		bra.w	DeleteObject
0000B9A2                            		include	"_incObj\7C Ring Flash.asm"
0000B9A2                            ; ---------------------------------------------------------------------------
0000B9A2                            ; Object 7C - flash effect when	you collect the	giant ring
0000B9A2                            ; ---------------------------------------------------------------------------
0000B9A2                            
0000B9A2                            RingFlash:
0000B9A2 7000                       		moveq	#0,d0
0000B9A4 1028 0024                  		move.b	obRoutine(a0),d0
0000B9A8 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000B9AC 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000B9B0                            ; ===========================================================================
0000B9B0 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000B9B2 0000                       		dc.w Flash_ChkDel-Flash_Index
0000B9B4 0000                       		dc.w Flash_Delete-Flash_Index
0000B9B6                            ; ===========================================================================
0000B9B6                            
0000B9B6                            Flash_Main:	; Routine 0
0000B9B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B9BA 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000B9C2 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000B9C8 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B9CE 317C 0000 0018             		move.w	#0,obPriority(a0)
0000B9D4 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000B9DA 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000B9E0                            
0000B9E0                            Flash_ChkDel:	; Routine 2
0000B9E0 6100                       		bsr.s	Flash_Collect
0000BA00 6000 0000                  		bra.w	DisplaySprite
0000BA04                            
0000BA04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA04                            
0000BA04                            
0000BA04                            Flash_Collect:
0000BA04 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BA08 6A00                       		bpl.s	locret_9F76
0000BA0A 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BA10 5228 001A                  		addq.b	#1,obFrame(a0)
0000BA14 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BA1A 6400                       		bcc.s	Flash_End	; if yes, branch
0000BA1C 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BA22 6600                       		bne.s	locret_9F76	; if not, branch
0000BA24 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BA28 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BA2E 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BA34 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BA3A 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BA3E 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BA42                            
0000BA42                            locret_9F76:
0000BA42 4E75                       		rts	
0000BA44                            ; ===========================================================================
0000BA44                            
0000BA44                            Flash_End:
0000BA44 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA48 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BA4E 588F                       		addq.l	#4,sp
0000BA50 4E75                       		rts	
0000BA52                            ; End of function Flash_Collect
0000BA52                            
0000BA52                            ; ===========================================================================
0000BA52                            
0000BA52                            Flash_Delete:	; Routine 4
0000BA52 6000 0000                  		bra.w	DeleteObject
0000BA52 6000 0000                  		bra.w	DeleteObject
0000BA56                            
0000BA56                            		include	"_anim\Rings.asm"
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56                            ; Animation script - ring
0000BA56                            ; ---------------------------------------------------------------------------
0000BA56 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BA58 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BA5E                            		even
0000BA5E                            		even
0000BA5E                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BA5E                            ; --------------------------------------------------------------------------------
0000BA5E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA5E                            ; --------------------------------------------------------------------------------
0000BA5E                            
0000BA5E                            SME_aSMQh:	
0000BA5E 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BA62 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BA66 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BA6A 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BA6E 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BA72 01                         SME_aSMQh_14:	dc.b 1	
0000BA73 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BA78 01                         SME_aSMQh_1A:	dc.b 1	
0000BA79 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BA7E 01                         SME_aSMQh_20:	dc.b 1	
0000BA7F F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BA84 01                         SME_aSMQh_26:	dc.b 1	
0000BA85 F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000BA8A 01                         SME_aSMQh_2C:	dc.b 1	
0000BA8B F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000BA90 01                         SME_aSMQh_32:	dc.b 1	
0000BA91 F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000BA96 01                         SME_aSMQh_38:	dc.b 1	
0000BA97 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000BA9C 01                         SME_aSMQh_3E:	dc.b 1	
0000BA9D F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000BAA2 01                         SME_aSMQh_44:	dc.b 1	
0000BAA3 F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000BAA8 01                         SME_aSMQh_4A:	dc.b 1	
0000BAA9 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000BAAE                            		even
0000BAAE                            		even
0000BAAE                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000BAAE                            ; ---------------------------------------------------------------------------
0000BAAE                            ; Sprite mappings - giant ring
0000BAAE                            ; ---------------------------------------------------------------------------
0000BAAE                            Map_GRing_internal:
0000BAAE 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000BAB0 0000                       		dc.w byte_A00D-Map_GRing_internal
0000BAB2 0000                       		dc.w byte_A036-Map_GRing_internal
0000BAB4 0000                       		dc.w byte_A04B-Map_GRing_internal
0000BAB6 0A                         byte_9FDA:	dc.b $A
0000BAB7 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000BABC E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000BAC1 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000BAC6 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000BACB F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000BAD0 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000BAD5 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000BADA 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000BADF 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000BAE4 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000BAE9 08                         byte_A00D:	dc.b 8
0000BAEA E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000BAEF E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000BAF4 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000BAF9 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000BAFE F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000BB03 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000BB08 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000BB0D 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000BB12 04                         byte_A036:	dc.b 4
0000BB13 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000BB18 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000BB1D 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000BB22 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000BB27 08                         byte_A04B:	dc.b 8
0000BB28 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000BB2D E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000BB32 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000BB37 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000BB3C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000BB41 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000BB46 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000BB4B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000BB50                            		even
0000BB50                            		even
0000BB50                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000BB50                            ; ---------------------------------------------------------------------------
0000BB50                            ; Sprite mappings - flash effect when you collect the giant ring
0000BB50                            ; ---------------------------------------------------------------------------
0000BB50                            Map_Flash_internal:
0000BB50 0000                       		dc.w byte_A084-Map_Flash_internal
0000BB52 0000                       		dc.w byte_A08F-Map_Flash_internal
0000BB54 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000BB56 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000BB58 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000BB5A 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000BB5C 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000BB5E 0000                       		dc.w byte_A103-Map_Flash_internal
0000BB60 02                         byte_A084:	dc.b 2
0000BB61 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000BB66 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000BB6B 04                         byte_A08F:	dc.b 4
0000BB6C E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000BB71 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000BB76 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000BB7B 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000BB80 04                         byte_A0A4:	dc.b 4
0000BB81 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000BB86 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000BB8B 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000BB90 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000BB95 04                         byte_A0B9:	dc.b 4
0000BB96 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000BB9B E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000BBA0 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000BBA5 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000BBAA 04                         byte_A0CE:	dc.b 4
0000BBAB E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000BBB0 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000BBB5 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000BBBA 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000BBBF 04                         byte_A0E3:	dc.b 4
0000BBC0 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000BBC5 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000BBCA 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000BBCF 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000BBD4 02                         byte_A0F8:	dc.b 2
0000BBD5 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000BBDA 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000BBDF 04                         byte_A103:	dc.b 4
0000BBE0 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000BBE5 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000BBEA 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000BBEF 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000BBF4                            		even
0000BBF4                            		even
0000BBF4                            		include	"_incObj\26 Monitor.asm"
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            ; Object 26 - monitors
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            
0000BBF4                            Monitor:
0000BBF4 7000                       		moveq	#0,d0
0000BBF6 1028 0024                  		move.b	obRoutine(a0),d0
0000BBFA 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000BBFE 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000BC02                            ; ===========================================================================
0000BC02 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000BC04 0000                       		dc.w Mon_Solid-Mon_Index
0000BC06 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000BC08 0000                       		dc.w Mon_Animate-Mon_Index
0000BC0A 0000                       		dc.w Mon_Display-Mon_Index
0000BC0C                            ; ===========================================================================
0000BC0C                            
0000BC0C                            Mon_Main:	; Routine 0
0000BC0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BC10 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000BC16 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000BC1C 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000BC24 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BC2A 117C 0004 0001             		move.b	#4,obRender(a0)
0000BC30 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BC36 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000BC3C 45F8 FC00                  		lea	(v_objstate).w,a2
0000BC40 7000                       		moveq	#0,d0
0000BC42 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BC46 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BC4C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000BC52 6700                       		beq.s	@notbroken	; if not, branch
0000BC54 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000BC5A 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000BC60 4E75                       		rts	
0000BC62                            ; ===========================================================================
0000BC62                            
0000BC62                            	@notbroken:
0000BC62 117C 0046 0020             		move.b	#$46,obColType(a0)
0000BC68 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000BC6E                            
0000BC6E                            Mon_Solid:	; Routine 2
0000BC6E 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000BC72 6700                       		beq.s	@normal		; if not, branch
0000BC74 5500                       		subq.b	#2,d0
0000BC76 6600                       		bne.s	@fall
0000BC78                            
0000BC78                            		; 2nd Routine 2
0000BC78 7200                       		moveq	#0,d1
0000BC7A 1228 0014                  		move.b	obActWid(a0),d1
0000BC7E 0641 000B                  		addi.w	#$B,d1
0000BC82 6100 CFEC                  		bsr.w	ExitPlatform
0000BC86 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000BC8C 6600 0000                  		bne.w	@ontop		; if yes, branch
0000BC90 4228 0025                  		clr.b	ob2ndRout(a0)
0000BC94 6000 0000                  		bra.w	Mon_Animate
0000BC98                            ; ===========================================================================
0000BC98                            
0000BC98                            	@ontop:
0000BC98 363C 0010                  		move.w	#$10,d3
0000BC9C 3428 0008                  		move.w	obX(a0),d2
0000BCA0 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000BCA4 6000 0000                  		bra.w	Mon_Animate
0000BCA8                            ; ===========================================================================
0000BCA8                            
0000BCA8                            @fall:		; 2nd Routine 4
0000BCA8 6100 0000                  		bsr.w	ObjectFall
0000BCAC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BCB2 4A41                       		tst.w	d1
0000BCB4 6A00 0000                  		bpl.w	Mon_Animate
0000BCB8 D368 000C                  		add.w	d1,obY(a0)
0000BCBC 4268 0012                  		clr.w	obVelY(a0)
0000BCC0 4228 0025                  		clr.b	ob2ndRout(a0)
0000BCC4 6000 0000                  		bra.w	Mon_Animate
0000BCC8                            ; ===========================================================================
0000BCC8                            
0000BCC8                            @normal:	; 2nd Routine 0
0000BCC8 323C 001A                  		move.w	#$1A,d1
0000BCCC 343C 000F                  		move.w	#$F,d2
0000BCD0 6100 0000                  		bsr.w	Mon_SolidSides
0000BCD4 6700 0000                  		beq.w	loc_A25C
0000BCD8 4A69 0012                  		tst.w	obVelY(a1)
0000BCDC 6B00                       		bmi.s	loc_A20A
0000BCDE 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000BCE4 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCE6 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000BCEC 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCEE 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000BCF4 6700                       		beq.s	loc_A25C	; if yes, branch
0000BCF6                            
0000BCF6                            loc_A20A:
0000BCF6 4A41                       		tst.w	d1
0000BCF8 6A00                       		bpl.s	loc_A220
0000BCFA 9769 000C                  		sub.w	d3,obY(a1)
0000BCFE 6100 CE5E                  		bsr.w	loc_74AE
0000BD02 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000BD08 6000 0000                  		bra.w	Mon_Animate
0000BD0C                            ; ===========================================================================
0000BD0C                            
0000BD0C                            loc_A220:
0000BD0C 4A40                       		tst.w	d0
0000BD0E 6700 0000                  		beq.w	loc_A246
0000BD12 6B00                       		bmi.s	loc_A230
0000BD14 4A69 0010                  		tst.w	obVelX(a1)
0000BD18 6B00                       		bmi.s	loc_A246
0000BD1A 6000                       		bra.s	loc_A236
0000BD1C                            ; ===========================================================================
0000BD1C                            
0000BD1C                            loc_A230:
0000BD1C 4A69 0010                  		tst.w	obVelX(a1)
0000BD20 6A00                       		bpl.s	loc_A246
0000BD22                            
0000BD22                            loc_A236:
0000BD22 9169 0008                  		sub.w	d0,obX(a1)
0000BD26 337C 0000 0020             		move.w	#0,obInertia(a1)
0000BD2C 337C 0000 0010             		move.w	#0,obVelX(a1)
0000BD32                            
0000BD32                            loc_A246:
0000BD32 0829 0001 0022             		btst	#1,obStatus(a1)
0000BD38 6600                       		bne.s	loc_A26A
0000BD3A 08E9 0005 0022             		bset	#5,obStatus(a1)
0000BD40 08E8 0005 0022             		bset	#5,obStatus(a0)
0000BD46 6000                       		bra.s	Mon_Animate
0000BD48                            ; ===========================================================================
0000BD48                            
0000BD48                            loc_A25C:
0000BD48 0828 0005 0022             		btst	#5,obStatus(a0)
0000BD4E 6700                       		beq.s	Mon_Animate
0000BD50 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000BD56 6700                       		beq.s	loc_A26A	; if so, branch
0000BD58 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000BD5E                            
0000BD5E                            loc_A26A:
0000BD5E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000BD64 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000BD6A                            
0000BD6A                            Mon_Animate:	; Routine 6
0000BD6A 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000BD70 6100 0000                  		bsr.w	AnimateSprite
0000BD74                            
0000BD74                            Mon_Display:	; Routine 8
0000BD74 6100 0000                  		bsr.w	DisplaySprite
0000BD96 4E75                       		rts	
0000BD98                            ; ===========================================================================
0000BD98                            
0000BD98                            Mon_BreakOpen:	; Routine 4
0000BD98 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD9C 117C 0000 0020             		move.b	#0,obColType(a0)
0000BDA2 6100 0000                  		bsr.w	FindFreeObj
0000BDA6 6600                       		bne.s	Mon_Explode
0000BDA8 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000BDAC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BDB2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BDB8 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000BDBE                            
0000BDBE                            Mon_Explode:
0000BDBE 6100 0000                  		bsr.w	FindFreeObj
0000BDC2 6600                       		bne.s	@fail
0000BDC4 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000BDC8 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000BDCC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BDD2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BDD8                            
0000BDD8                            	@fail:
0000BDD8 45F8 FC00                  		lea	(v_objstate).w,a2
0000BDDC 7000                       		moveq	#0,d0
0000BDDE 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BDE2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BDE8 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000BDEE 6000 0000                  		bra.w	DisplaySprite
0000BDEE 6000 0000                  		bra.w	DisplaySprite
0000BDF2                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000BDF2                            ; ---------------------------------------------------------------------------
0000BDF2                            ; Object 2E - contents of monitors
0000BDF2                            ; ---------------------------------------------------------------------------
0000BDF2                            
0000BDF2                            PowerUp:
0000BDF2 7000                       		moveq	#0,d0
0000BDF4 1028 0024                  		move.b	obRoutine(a0),d0
0000BDF8 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000BDFC 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000BE00 6000 0000                  		bra.w	DisplaySprite
0000BE04                            ; ===========================================================================
0000BE04 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000BE06 0000                       		dc.w Pow_Move-Pow_Index
0000BE08 0000                       		dc.w Pow_Delete-Pow_Index
0000BE0A                            ; ===========================================================================
0000BE0A                            
0000BE0A                            Pow_Main:	; Routine 0
0000BE0A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE0E 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000BE14 117C 0024 0001             		move.b	#$24,obRender(a0)
0000BE1A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000BE20 117C 0008 0014             		move.b	#8,obActWid(a0)
0000BE26 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000BE2C 7000                       		moveq	#0,d0
0000BE2E 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000BE32 5400                       		addq.b	#2,d0
0000BE34 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000BE38 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000BE3E D000                       		add.b	d0,d0
0000BE40 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000BE44 5249                       		addq.w	#1,a1
0000BE46 2149 0004                  		move.l	a1,obMap(a0)
0000BE4A                            
0000BE4A                            Pow_Move:	; Routine 2
0000BE4A 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000BE4E 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000BE52 6100 0000                  		bsr.w	SpeedToPos
0000BE56 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000BE5C 4E75                       		rts	
0000BE5E                            ; ===========================================================================
0000BE5E                            
0000BE5E                            Pow_Checks:
0000BE5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE62 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000BE68                            
0000BE68                            Pow_ChkEggman:
0000BE68 1028 001C                  		move.b	obAnim(a0),d0
0000BE6C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000BE70 6600                       		bne.s	Pow_ChkSonic
0000BE72                            		
0000BE72 4EF9 0000 0000             		jmp	Spik_Hurt
0000BE78                            		
0000BE78 4E75                       		rts
0000BE7A                            ; ===========================================================================
0000BE7A                            
0000BE7A                            Pow_ChkSonic:
0000BE7A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000BE7E 6600                       		bne.s	Pow_ChkShoes
0000BE80                            
0000BE80                            	ExtraLife:
0000BE80 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BE84 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BE92                            
0000BE92                            ; ===========================================================================
0000BE92                            
0000BE92                            Pow_ChkShoes:
0000BE92 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000BE96 6600                       		bne.s	Pow_ChkShield
0000BE98                            
0000BE98 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000BE9E 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000BEA4 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000BEAA 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000BEB0 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000BEB6 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BEBA 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000BEBC 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BEC2 6300                       			bls.s	Pow_NoMus
0000BECE                            ; ===========================================================================
0000BECE                            
0000BECE                            Pow_NoMus:
0000BECE 4E75                       		rts	
0000BED0                            ; ===========================================================================
0000BED0                            
0000BED0                            Pow_ChkShield:
0000BED0 0C00 0004                          cmpi.b    #4,d0        ; does monitor contain a shield?
0000BED4 6600                               bne.s    Pow_ChkInvinc
0000BED6                            
0000BED6 11FC 0001 FE2C                     move.b    #1,(v_shield).w    ; give Sonic a shield
0000BEDC 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000BEE2 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000BEE8 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000BEEE 11FC 0000 D180                     move.b    #id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000BEF4 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000BEF8 303C 0000                          move.w    #sfx_Shield,d0
0000BEFC 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000BF02                            ; ===========================================================================
0000BF02                            
0000BF02                            Pow_ChkInvinc:
0000BF02 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000BF06 6600                       		bne.s	Pow_ChkRings
0000BF08                            
0000BF08 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000BF0E 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000BF14 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000BF1A 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000BF20 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000BF26 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000BF2C 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000BF32 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000BF38 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000BF3E 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000BF44 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000BF48 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000BF4A 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000BF50 6300                       			bls.s	Pow_NoMusic
0000BF5C                            ; ===========================================================================
0000BF5C                            
0000BF5C                            Pow_NoMusic:
0000BF5C 4E75                       		rts	
0000BF5E                            ; ===========================================================================
0000BF5E                            
0000BF5E                            Pow_ChkRings:
0000BF5E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000BF62 6600                       		bne.s	Pow_ChkS
0000BF64                            
0000BF64 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000BF6A 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000BF70 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BF76 6500                       		bcs.s	Pow_RingSound
0000BF78 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BF7E 6700 FF00                  		beq.w	ExtraLife
0000BF82 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000BF88 6500                       		bcs.s	Pow_RingSound
0000BF8A 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000BF90 6700 FEEE                  		beq.w	ExtraLife
0000BF94                            
0000BF94                            	Pow_RingSound:
0000BF9E                            ; ===========================================================================
0000BF9E                            
0000BF9E                            Pow_ChkS:
0000BF9E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000BFA2 6600                       		bne.s	Pow_ChkSRing
0000BFA4                            		
0000BFA4 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000BFAA 6700                       		beq.s	PowS2	; if yes, branch
0000BFAC 0404 003B                  		subi.b	#$3B,d4
0000BFB0 7000                       		moveq	#0,d0
0000BFB2 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000BFB8 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000BFBE 6000                       		bra.s	PowSPlay
0000BFC0                            
0000BFC0                            PowS2:
0000BFC0 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000BFC6 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000BFCC 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000BFD2 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000BFD8 6500                       		bcs.s	PowSPlay
0000BFDA 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000BFE0 6700 FE9E                  		beq.w	ExtraLife
0000BFE4 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000BFEA 6500                       		bcs.s	PowSPlay
0000BFEC 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000BFF2 6700 FE8C                  		beq.w	ExtraLife	
0000BFF6                            
0000BFF6                            PowSPlay:
0000C000                            
0000C000                            		
0000C000                            
0000C000                            
0000C000                            Pow_ChkSRing:
0000C000 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C004 6600                       		bne.s	Pow_ChkRShield
0000C006                            
0000C006                            		
0000C006 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C00C 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C012 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C018 6500                       		bcs.s	Pow_ChkSRingSound
0000C01A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C020 6700 FE5E                  		beq.w	ExtraLife
0000C024 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C02A 6500                       		bcs.s	Pow_ChkSRingSound
0000C02C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C032 6700 FE4C                  		beq.w	ExtraLife	
0000C036                            
0000C036                            Pow_ChkSRingSound:
0000C040                            
0000C040                            
0000C040                            Pow_ChkRShield:
0000C040 0C00 000A                          cmpi.b    #10,d0        ; does monitor contain a shield?
0000C044 6600                               bne.s    Pow_ChkGShield
0000C046                            
0000C046 11FC 0002 F5C8                     move.b    #2,(v_rshield).w    ; give Sonic a shield
0000C04C 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C052 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C058 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C05E 11FC 0000 D180                     move.b    #id_RShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C064 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C068 303C 0000                          move.w    #sfx_FireShield,d0
0000C06C 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C072                            
0000C072                            Pow_ChkGShield:
0000C072 0C00 000B                          cmpi.b    #11,d0        ; does monitor contain a shield?
0000C076 6600                               bne.s    Pow_ChkSpShield
0000C078                            
0000C078 11FC 0001 F5C9                     move.b    #1,(v_gshield).w    ; give Sonic a shield
0000C07E 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C084 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C08A 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C090 11FC 0000 D180                     move.b    #id_GShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C096 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C09A 303C 0000                          move.w    #sfx_LightningShield,d0
0000C09E 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C0A4                            
0000C0A4                            Pow_ChkSpShield:
0000C0A4 0C00 000C                         cmpi.b    #12,d0        ; does monitor contain a shield?
0000C0A8 66FA                               bne.s    Pow_ChkSpShield
0000C0AA                            
0000C0AA 11FC 0001 F5CA                     move.b    #1,(v_spshield).w    ; give Sonic a shield
0000C0B0 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove red shield
0000C0B6 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove g shield
0000C0BC 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove s shield
0000C0C2 11FC 0000 D180                     move.b    #id_SpShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C0C8 4238 D1A4                          clr.b    (v_objspace+$180+obRoutine).w
0000C0CC 303C 0000                          move.w    #sfx_SpikesMove,d0
0000C0D0 4EF9 0000 12A0                     jmp    (PlaySound_Special).l    ; play shield sound
0000C0D6                            
0000C0D6                            Pow_ChkEnd:
0000C0D6 4E75                       		rts
0000C0D8                            ; ===========================================================================
0000C0D8                            
0000C0D8                            Pow_Delete:	; Routine 4
0000C0D8 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C0DC 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C0E0 4E75                       		rts	
0000C0E0 4E75                       		rts	
0000C0E2                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C0E2                            ; ---------------------------------------------------------------------------
0000C0E2                            ; Subroutine to	make the sides of a monitor solid
0000C0E2                            ; ---------------------------------------------------------------------------
0000C0E2                            
0000C0E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0E2                            
0000C0E2                            
0000C0E2                            Mon_SolidSides:
0000C0E2 43F8 D000                  		lea	(v_player).w,a1
0000C0E6 3029 0008                  		move.w	obX(a1),d0
0000C0EA 9068 0008                  		sub.w	obX(a0),d0
0000C0EE D041                       		add.w	d1,d0
0000C0F0 6B00                       		bmi.s	loc_A4E6
0000C0F2 3601                       		move.w	d1,d3
0000C0F4 D643                       		add.w	d3,d3
0000C0F6 B043                       		cmp.w	d3,d0
0000C0F8 6200                       		bhi.s	loc_A4E6
0000C0FA 1629 0016                  		move.b	obHeight(a1),d3
0000C0FE 4883                       		ext.w	d3
0000C100 D443                       		add.w	d3,d2
0000C102 3629 000C                  		move.w	obY(a1),d3
0000C106 9668 000C                  		sub.w	obY(a0),d3
0000C10A D642                       		add.w	d2,d3
0000C10C 6B00                       		bmi.s	loc_A4E6
0000C10E D442                       		add.w	d2,d2
0000C110 B642                       		cmp.w	d2,d3
0000C112 6400                       		bcc.s	loc_A4E6
0000C114 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C118 6B00                       		bmi.s	loc_A4E6
0000C11A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C120 6400                       		bcc.s	loc_A4E6
0000C122 4A78 FE08                  		tst.w	(v_debuguse).w
0000C126 6600                       		bne.s	loc_A4E6
0000C128 B240                       		cmp.w	d0,d1
0000C12A 6400                       		bcc.s	loc_A4DC
0000C12C D241                       		add.w	d1,d1
0000C12E 9041                       		sub.w	d1,d0
0000C130                            
0000C130                            loc_A4DC:
0000C130 0C43 0010                  		cmpi.w	#$10,d3
0000C134 6500                       		bcs.s	loc_A4EA
0000C136                            
0000C136                            loc_A4E2:
0000C136 7201                       		moveq	#1,d1
0000C138 4E75                       		rts	
0000C13A                            ; ===========================================================================
0000C13A                            
0000C13A                            loc_A4E6:
0000C13A 7200                       		moveq	#0,d1
0000C13C 4E75                       		rts	
0000C13E                            ; ===========================================================================
0000C13E                            
0000C13E                            loc_A4EA:
0000C13E 7200                       		moveq	#0,d1
0000C140 1228 0014                  		move.b	obActWid(a0),d1
0000C144 5841                       		addq.w	#4,d1
0000C146 3401                       		move.w	d1,d2
0000C148 D442                       		add.w	d2,d2
0000C14A D269 0008                  		add.w	obX(a1),d1
0000C14E 9268 0008                  		sub.w	obX(a0),d1
0000C152 6BE2                       		bmi.s	loc_A4E2
0000C154 B242                       		cmp.w	d2,d1
0000C156 64DE                       		bcc.s	loc_A4E2
0000C158 72FF                       		moveq	#-1,d1
0000C15A 4E75                       		rts	
0000C15C                            ; End of function Obj26_SolidSides
0000C15C                            ; End of function Obj26_SolidSides
0000C15C                            		include	"_anim\Monitor.asm"
0000C15C                            ; ---------------------------------------------------------------------------
0000C15C                            ; Animation script - monitors
0000C15C                            ; ---------------------------------------------------------------------------
0000C15C 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C162 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C168 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C16E 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C174 0000                       		dc.w @spshield-Ani_Monitor
0000C176                            		
0000C176 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C17C 00                         		even
0000C17C 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C188 00                         		even
0000C188 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C194 00                         		even
0000C194 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C1A0 00                         		even
0000C1A0 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C1AC 00                         		even
0000C1AC 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C1B8 00                         		even
0000C1B8 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C1C4 00                         		even
0000C1C4 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C1D0 00                         		even
0000C1D0 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C1DC 00                         		even
0000C1DC 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C1E4 00                         		even
0000C1E4 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C1F0 00                         		even
0000C1F0 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C1FC 00                         		even
0000C1FC 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C208 00                         		even
0000C208 00                         		even
0000C208                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C208                            ; --------------------------------------------------------------------------------
0000C208                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C208                            ; --------------------------------------------------------------------------------
0000C208                            
0000C208                            SME_0IgQe:	
0000C208 0000 0000                  		dc.w SME_0IgQe_1E-SME_0IgQe, SME_0IgQe_24-SME_0IgQe	
0000C20C 0000 0000                  		dc.w SME_0IgQe_2F-SME_0IgQe, SME_0IgQe_3A-SME_0IgQe	
0000C210 0000 0000                  		dc.w SME_0IgQe_45-SME_0IgQe, SME_0IgQe_50-SME_0IgQe	
0000C214 0000 0000                  		dc.w SME_0IgQe_5B-SME_0IgQe, SME_0IgQe_66-SME_0IgQe	
0000C218 0000 0000                  		dc.w SME_0IgQe_71-SME_0IgQe, SME_0IgQe_7C-SME_0IgQe	
0000C21C 0000 0000                  		dc.w SME_0IgQe_87-SME_0IgQe, SME_0IgQe_92-SME_0IgQe	
0000C220 0000 0000                  		dc.w SME_0IgQe_AC-SME_0IgQe, SME_0IgQe_B7-SME_0IgQe	
0000C224 0000                       		dc.w SME_0IgQe_C2-SME_0IgQe	
0000C226 01                         SME_0IgQe_1E:	dc.b 1	
0000C227 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C22C 02                         SME_0IgQe_24:	dc.b 2	
0000C22D F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C232 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C237 02                         SME_0IgQe_2F:	dc.b 2	
0000C238 F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C23D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C242 02                         SME_0IgQe_3A:	dc.b 2	
0000C243 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C248 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C24D 02                         SME_0IgQe_45:	dc.b 2	
0000C24E F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C253 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C258 02                         SME_0IgQe_50:	dc.b 2	
0000C259 F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C25E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C263 02                         SME_0IgQe_5B:	dc.b 2	
0000C264 F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C269 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C26E 02                         SME_0IgQe_66:	dc.b 2	
0000C26F F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C274 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C279 02                         SME_0IgQe_71:	dc.b 2	
0000C27A F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C27F F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C284 02                         SME_0IgQe_7C:	dc.b 2	
0000C285 F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C28A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C28F 02                         SME_0IgQe_87:	dc.b 2	
0000C290 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C295 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C29A 05                         SME_0IgQe_92:	dc.b 5	
0000C29B 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C2A0 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C2A5 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C2AA 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C2AF 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C2B4 02                         SME_0IgQe_AC:	dc.b 2	
0000C2B5 F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C2BA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2BF 02                         SME_0IgQe_B7:	dc.b 2	
0000C2C0 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C2C5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2CA 02                         SME_0IgQe_C2:	dc.b 2	
0000C2CB F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C2D0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C2D6 00                         		even
0000C2D6 00                         		even
0000C2D6                            
0000C2D6                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C2D6                            ; ---------------------------------------------------------------------------
0000C2D6                            ; Object 0E - Sonic on the title screen
0000C2D6                            ; ---------------------------------------------------------------------------
0000C2D6                            
0000C2D6                            TitleSonic:
0000C2D6 7000                       		moveq	#0,d0
0000C2D8 1028 0024                  		move.b	obRoutine(a0),d0
0000C2DC 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C2E0 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C2E4                            ; ===========================================================================
0000C2E4 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C2E6 0000                       		dc.w TSon_Delay-TSon_Index
0000C2E8 0000                       		dc.w TSon_Move-TSon_Index
0000C2EA 0000                       		dc.w TSon_Animate-TSon_Index
0000C2EC                            ; ===========================================================================
0000C2EC                            
0000C2EC                            TSon_Main:	; Routine 0
0000C2EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C2F0 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C2F6 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C2FC 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C304 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C30A 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C310 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C316 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C31C 6100 0000                  		bsr.w	AnimateSprite
0000C320                            
0000C320                            TSon_Delay:	;Routine 2
0000C320 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C324 6A00                       		bpl.s	@wait		; if time remains, branch
0000C326 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C32A 6000 0000                  		bra.w	DisplaySprite
0000C32E                            
0000C32E                            	@wait:
0000C32E 4E75                       		rts	
0000C330                            ; ===========================================================================
0000C330                            
0000C330                            TSon_Move:	; Routine 4
0000C330 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C334 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C33A 6600                       		bne.s	@display	; if not, branch
0000C33C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C340                            
0000C340                            	@display:
0000C340 6000 0000                  		bra.w	DisplaySprite
0000C344                            
0000C344 4E75                       		rts	
0000C346                            ; ===========================================================================
0000C346                            
0000C346                            TSon_Animate:	; Routine 6
0000C346 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C34C 6100 0000                  		bsr.w	AnimateSprite
0000C350 6000 0000                  		bra.w	DisplaySprite
0000C354                            
0000C354 4E75                       		rts	
0000C354 4E75                       		rts	
0000C356                            		include	"_incObj\0F Press Start and TM.asm"
0000C356                            ; ---------------------------------------------------------------------------
0000C356                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C356                            ; ---------------------------------------------------------------------------
0000C356                            
0000C356                            PSBTM:
0000C356 7000                       		moveq	#0,d0
0000C358 1028 0024                  		move.b	obRoutine(a0),d0
0000C35C 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C360 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C364 6000 0000                  		bra.w	DisplaySprite
0000C368                            ; ===========================================================================
0000C368 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C36A 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C36C 0000                       		dc.w PSB_Exit-PSB_Index
0000C36E 0000                       		dc.w PSB_Menu-PSB_Index		
0000C370                            ; ===========================================================================
0000C370                            
0000C370                            PSB_Main:	; Routine 0
0000C370 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C374 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C37A 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C380 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C388 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C38E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C394 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C396                            
0000C396 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C39A 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C3A0 6600                       		bne.s	PSB_Exit	; if not, branch
0000C3A2                            
0000C3A2 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C3A8 317C 0170 0008             		move.w	#$170,obX(a0)
0000C3AE 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000C3B4                            
0000C3B4                            PSB_Exit:	; Routine 4
0000C3B4 4E75                       		rts	
0000C3B6                            ; ===========================================================================
0000C3B6                            
0000C3B6                            PSB_PrsStart:	; Routine 2
0000C3B6 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C3BC 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000C3BE 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000C3C2 303C 00A1                  		move.w   #$A1,d0 
0000C3C6 4EB8 12A0                  		jsr   PlaySound_Special
0000C3CA 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000C3D0 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000C3D8 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000C3DE 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000C3E4 4E75                       		rts
0000C3E6                            
0000C3E6                            PSB_PrsStart_Show:
0000C3E6 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000C3EC 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000C3F0                            
0000C3F0                            PSB_Menu:
0000C3F0 7400                             moveq   #0,d2
0000C3F2 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C3F6 1038 F605                        move.b   (v_jpadpress1).w,d0
0000C3FA 0800 0000                        btst   #0,d0
0000C3FE 6700                             beq.s   MAIN2
0000C400 5302                             subq.b   #1,d2
0000C402 6400                             bcc.s   MAIN2
0000C404 143C 0001                        move.b   #1,d2
0000C408                            
0000C408                            MAIN2:
0000C408 0800 0001                        btst   #1,d0
0000C40C 6700                             beq.s   MAIN3
0000C40E 5202                             addq.b   #1,d2
0000C410 0C02 0002                        cmpi.b   #2,d2
0000C414 6500                             blo.s   MAIN3
0000C416 7400                             moveq   #0,d2
0000C418                            
0000C418                            MAIN3:
0000C418 1142 001A                        move.b   d2,$1A(a0)
0000C41C 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C420 0200 0003                        andi.b   #3,d0
0000C424 6700                             beq.s   MAIN4   
0000C426 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C42A 4EB8 12A0                        jsr   PlaySound_Special
0000C42E                            
0000C42E                            MAIN4:
0000C42E 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000C434 6700                             beq.s   MENURTS   ; if not, branch
0000C436 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000C43C                            
0000C43C                            MENURTS:
0000C43C 4E75                             rts															 
0000C43E                            ; ===========================================================================
0000C43E                            
0000C43E                            
0000C43E                            Map_TitleMenu:
0000C43E                            		include "_maps\Title Screen Menu.asm"		
0000C43E                            ; --------------------------------------------------------------------------------
0000C43E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C43E                            ; --------------------------------------------------------------------------------
0000C43E                            
0000C43E                            SME_g2Qfx:	
0000C43E 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C442 10                         SME_g2Qfx_6:	dc.b $10	
0000C443 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C448 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C44D E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C452 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C457 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C45C E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C461 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C466 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C46B F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C470 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C475 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C47A F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C47F F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C484 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C489 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C48E E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C493 10                         SME_g2Qfx_6B:	dc.b $10	
0000C494 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C499 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C49E E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C4A3 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C4A8 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C4AD E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C4B2 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C4B7 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C4BC F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C4C1 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C4C6 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C4CB F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C4D0 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C4D5 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C4DA F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C4DF F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000C4E4                            		even
0000C4E4                            		even
0000C4E4                            		even
0000C4E4                            
0000C4E4                            		include	"_anim\Title Screen Sonic.asm"
0000C4E4                            ; ---------------------------------------------------------------------------
0000C4E4                            ; Animation script - Sonic on the title screen
0000C4E4                            ; ---------------------------------------------------------------------------
0000C4E4 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000C4E6 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000C4F2 00                         		even
0000C4F2 00                         		even
0000C4F2                            		include	"_anim\Press Start and TM.asm"
0000C4F2                            ; ---------------------------------------------------------------------------
0000C4F2                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000C4F2                            ; ---------------------------------------------------------------------------
0000C4F2 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000C4F4 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000C4F8                            		even
0000C4F8                            		even
0000C4F8                            
0000C4F8                            		include	"_incObj\sub AnimateSprite.asm"
0000C4F8                            ; ---------------------------------------------------------------------------
0000C4F8                            ; Subroutine to	animate	a sprite using an animation script
0000C4F8                            ; ---------------------------------------------------------------------------
0000C4F8                            
0000C4F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4F8                            
0000C4F8                            
0000C4F8                            AnimateSprite:
0000C4F8 7000                       		moveq	#0,d0
0000C4FA 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000C4FE B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000C502 6700                       		beq.s	Anim_Run	; if not, branch
0000C504                            
0000C504 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000C508 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C50E 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000C514                            
0000C514                            Anim_Run:
0000C514 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000C518 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000C51A D040                       		add.w	d0,d0
0000C51C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000C520 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000C524 7200                       		moveq	#0,d1
0000C526 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000C52A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000C52E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000C530                            
0000C530                            Anim_Next:
0000C530 1200                       		move.b	d0,d1
0000C532 0200 001F                  		andi.b	#$1F,d0
0000C536 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000C53A 1028 0022                  		move.b	obStatus(a0),d0
0000C53E E719                       		rol.b	#3,d1
0000C540 B101                       		eor.b	d0,d1
0000C542 0201 0003                  		andi.b	#3,d1
0000C546 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000C54C 8328 0001                  		or.b	d1,obRender(a0)
0000C550 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000C554                            
0000C554                            Anim_Wait:
0000C554 4E75                       		rts	
0000C556                            ; ===========================================================================
0000C556                            
0000C556                            Anim_End_FF:
0000C556 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000C558 6600                       		bne.s	Anim_End_FE	; if not, branch
0000C55A 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000C560 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000C564 60CA                       		bra.s	Anim_Next
0000C566                            ; ===========================================================================
0000C566                            
0000C566                            Anim_End_FE:
0000C566 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000C568 6600                       		bne.s	Anim_End_FD	; if not, branch
0000C56A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000C56E 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000C572 9200                       		sub.b	d0,d1
0000C574 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000C578 60B6                       		bra.s	Anim_Next
0000C57A                            ; ===========================================================================
0000C57A                            
0000C57A                            Anim_End_FD:
0000C57A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000C57C 6600                       		bne.s	Anim_End_FC	; if not, branch
0000C57E 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000C584                            
0000C584                            Anim_End_FC:
0000C584 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000C586 6600                       		bne.s	Anim_End_FB	; if not, branch
0000C588 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000C58C                            
0000C58C                            Anim_End_FB:
0000C58C 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000C58E 6600                       		bne.s	Anim_End_FA	; if not, branch
0000C590 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000C596 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000C59A                            
0000C59A                            Anim_End_FA:
0000C59A 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000C59C 6600                       		bne.s	Anim_End	; if not, branch
0000C59E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000C5A2                            
0000C5A2                            Anim_End:
0000C5A2 4E75                       		rts	
0000C5A4                            ; End of function AnimateSprite
0000C5A4                            ; End of function AnimateSprite
0000C5A4                            
0000C5A4                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000C5A4                            ; ---------------------------------------------------------------------------
0000C5A4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000C5A4                            ; ---------------------------------------------------------------------------
0000C5A4                            Map_PSB_internal:
0000C5A4 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000C5A6 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000C5A8 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000C5AA 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000C5AC 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000C5AD 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000C5B2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000C5B7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000C5BC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000C5C1 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000C5C6 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000C5CB 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000C5CC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5D1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5D6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5DB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5EA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5EF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5F4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5F9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000C5FE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C603 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C608 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C60D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C612 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C617 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C61C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C621 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C626 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C62B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000C630 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C635 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C63A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C63F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C644 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C649 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C64E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C653 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C658 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C65D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000C662 01                         M_PSB_TM:	dc.b 1			; "TM"
0000C663 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000C668                            		even
0000C668                            		even
0000C668                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000C668                            ; ---------------------------------------------------------------------------
0000C668                            ; Sprite mappings - Sonic on the title screen
0000C668                            ; ---------------------------------------------------------------------------
0000C668                            Map_TSon_internal:
0000C668 0000                       		dc.w byte_A898-Map_TSon_internal
0000C66A 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000C66C 0000                       		dc.w byte_A917-Map_TSon_internal
0000C66E 0000                       		dc.w byte_A96D-Map_TSon_internal
0000C670 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000C672 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000C674 0000                       		dc.w byte_AA47-Map_TSon_internal
0000C676 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000C678 0A                         byte_A898:	dc.b $A
0000C679 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000C67E 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000C683 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000C688 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000C68D 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000C692 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000C697 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000C69C 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000C6A1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000C6A6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000C6AB 0F                         byte_A8CB:	dc.b $F
0000C6AC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000C6B1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000C6B6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000C6BB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000C6C0 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000C6C5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C6CA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C6CF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C6D4 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C6D9 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C6DE 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C6E3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C6E8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C6ED 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C6F2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C6F7 11                         byte_A917:	dc.b $11
0000C6F8 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000C6FD 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000C702 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000C707 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000C70C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000C711 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000C716 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000C71B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000C720 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000C725 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000C72A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000C72F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000C734 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000C739 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000C73E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000C743 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000C748 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000C74D 0D                         byte_A96D:	dc.b $D
0000C74E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000C753 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000C758 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000C75D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000C762 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000C767 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000C76C 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000C771 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000C776 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000C77B 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000C780 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000C785 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000C78A 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000C78F 0B                         byte_A9AF:	dc.b $B
0000C790 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000C795 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000C79A 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000C79F 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000C7A4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000C7A9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000C7AE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000C7B3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000C7B8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000C7BD 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000C7C2 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000C7C7 13                         byte_A9E7:	dc.b $13
0000C7C8 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C7CD 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C7D2 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C7D7 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C7DC 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C7E1 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C7E6 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C7EB 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C7F0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C7F5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C7FA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C7FF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C804 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C809 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C80E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C813 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C818 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C81D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C822 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C827 15                         byte_AA47:	dc.b $15
0000C828 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000C82D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000C832 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000C837 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000C83C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C841 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C846 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C84B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C850 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C855 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C85A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C85F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C864 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C869 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C86E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C873 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C878 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C87D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C882 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C887 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C88C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C891 16                         byte_AAB1:	dc.b $16
0000C892 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000C897 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000C89C 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000C8A1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000C8A6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000C8AB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000C8B0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000C8B5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000C8BA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000C8BF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000C8C4 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000C8C9 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000C8CE 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000C8D3 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000C8D8 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000C8DD 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000C8E2 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000C8E7 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000C8EC 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000C8F1 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000C8F6 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000C8FB 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000C900                            		even
0000C900                            		even
0000C900                            
0000C900                            		include	"_incObj\2B Chopper.asm"
0000C900                            ; ---------------------------------------------------------------------------
0000C900                            ; Object 2B - Chopper enemy (GHZ)
0000C900                            ; ---------------------------------------------------------------------------
0000C900                            
0000C900                            Chopper:
0000C900 7000                       		moveq	#0,d0
0000C902 1028 0024                  		move.b	obRoutine(a0),d0
0000C906 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000C90A 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000C90E 6000 0000                  		bra.w	RememberState
0000C912                            ; ===========================================================================
0000C912 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000C914 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000C916                            
0000C916 =00000030                  chop_origY:	equ $30
0000C916                            ; ===========================================================================
0000C916                            
0000C916                            Chop_Main:	; Routine 0
0000C916 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C91A 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000C922 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000C928 117C 0004 0001             		move.b	#4,obRender(a0)
0000C92E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C934 117C 0009 0020             		move.b	#9,obColType(a0)
0000C93A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C940 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C946 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000C94C                            
0000C94C                            Chop_ChgSpeed:	; Routine 2
0000C94C 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000C952 6100 FBA4                  		bsr.w	AnimateSprite
0000C956 6100 0000                  		bsr.w	SpeedToPos
0000C95A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000C960 3028 0030                  		move.w	chop_origY(a0),d0
0000C964 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000C968 6400                       		bcc.s	@chganimation	; if not, branch
0000C96A 3140 000C                  		move.w	d0,obY(a0)
0000C96E 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000C974                            
0000C974                            	@chganimation:
0000C974 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000C97A 0440 00C0                  		subi.w	#$C0,d0
0000C97E B068 000C                  		cmp.w	obY(a0),d0
0000C982 6400                       		bcc.s	@nochg
0000C984 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000C98A 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000C98E 6B00                       		bmi.s	@nochg		; if not, branch
0000C990 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000C996                            
0000C996                            	@nochg:
0000C996 4E75                       		rts	
0000C996 4E75                       		rts	
0000C998                            		include	"_anim\Chopper.asm"
0000C998                            ; ---------------------------------------------------------------------------
0000C998                            ; Animation script - Chopper enemy
0000C998                            ; ---------------------------------------------------------------------------
0000C998 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000C99A 0000                       		dc.w @fast-Ani_Chop
0000C99C 0000                       		dc.w @still-Ani_Chop
0000C99E 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000C9A2 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000C9A6 0700 FF                    @still:		dc.b 7,	0, afEnd
0000C9AA 00                         		even
0000C9AA 00                         		even
0000C9AA                            Map_Chop:	include	"_maps\Chopper.asm"
0000C9AA                            ; ---------------------------------------------------------------------------
0000C9AA                            ; Sprite mappings - Chopper enemy (GHZ)
0000C9AA                            ; ---------------------------------------------------------------------------
0000C9AA                            Map_Chop_internal:
0000C9AA 0000                       		dc.w @mouthshut-Map_Chop_internal
0000C9AC 0000                       		dc.w @mouthopen-Map_Chop_internal
0000C9AE 01                         @mouthshut:	dc.b 1
0000C9AF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000C9B4 01                         @mouthopen:	dc.b 1
0000C9B5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000C9BA                            		even
0000C9BA                            		even
0000C9BA                            		include	"_incObj\2C Jaws.asm"
0000C9BA                            ; ---------------------------------------------------------------------------
0000C9BA                            ; Object 2C - Jaws enemy (LZ)
0000C9BA                            ; ---------------------------------------------------------------------------
0000C9BA                            
0000C9BA                            Jaws:
0000C9BA 7000                       		moveq	#0,d0
0000C9BC 1028 0024                  		move.b	obRoutine(a0),d0
0000C9C0 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000C9C4 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000C9C8                            ; ===========================================================================
0000C9C8 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000C9CA 0000                       		dc.w Jaws_Turn-Jaws_Index
0000C9CC                            
0000C9CC =00000030                  jaws_timecount:	equ $30
0000C9CC =00000032                  jaws_timedelay:	equ $32
0000C9CC                            ; ===========================================================================
0000C9CC                            
0000C9CC                            Jaws_Main:	; Routine 0
0000C9CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C9D0 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000C9D8 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000C9DE 0028 0004 0001             		ori.b	#4,obRender(a0)
0000C9E4 117C 000A 0020             		move.b	#$A,obColType(a0)
0000C9EA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000C9F0 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000C9F6 7000                       		moveq	#0,d0
0000C9F8 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000C9FC ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000C9FE 5340                       		subq.w	#1,d0
0000CA00 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CA04 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CA08 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CA0E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CA14 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CA16 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CA1A                            
0000CA1A                            Jaws_Turn:	; Routine 2
0000CA1A 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CA1E 6A00                       		bpl.s	@animate	; if time remains, branch
0000CA20 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CA26 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CA2A 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CA30 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CA36                            
0000CA36                            	@animate:
0000CA36 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CA3C 6100 FABA                  		bsr.w	AnimateSprite
0000CA40 6100 0000                  		bsr.w	SpeedToPos
0000CA44 6000 0000                  		bra.w	RememberState
0000CA44 6000 0000                  		bra.w	RememberState
0000CA48                            		include	"_anim\Jaws.asm"
0000CA48                            ; ---------------------------------------------------------------------------
0000CA48                            ; Animation script - Jaws enemy
0000CA48                            ; ---------------------------------------------------------------------------
0000CA48 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CA4A 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CA50                            		even
0000CA50                            		even
0000CA50                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CA50                            ; --------------------------------------------------------------------------------
0000CA50                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CA50                            ; --------------------------------------------------------------------------------
0000CA50                            
0000CA50                            SME_O5C0c:	
0000CA50 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CA54 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CA58 02                         SME_O5C0c_8:	dc.b 2	
0000CA59 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CA5E F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CA63 02                         SME_O5C0c_13:	dc.b 2	
0000CA64 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CA69 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CA6E 02                         SME_O5C0c_1E:	dc.b 2	
0000CA6F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CA74 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CA79 02                         SME_O5C0c_29:	dc.b 2	
0000CA7A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CA7F F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CA84                            		even
0000CA84                            		even
0000CA84                            		include	"_incObj\2D Burrobot.asm"
0000CA84                            ; ---------------------------------------------------------------------------
0000CA84                            ; Object 2D - Burrobot enemy (LZ)
0000CA84                            ; ---------------------------------------------------------------------------
0000CA84                            
0000CA84                            Burrobot:
0000CA84 7000                       		moveq	#0,d0
0000CA86 1028 0024                  		move.b	obRoutine(a0),d0
0000CA8A 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CA8E 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CA92                            ; ===========================================================================
0000CA92 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CA94 0000                       		dc.w Burro_Action-Burro_Index
0000CA96                            
0000CA96 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CA96                            ; ===========================================================================
0000CA96                            
0000CA96                            Burro_Main:	; Routine 0
0000CA96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CA9A 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CAA0 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CAA6 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CAAE 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CAB4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CABA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CAC0 117C 0005 0020             		move.b	#5,obColType(a0)
0000CAC6 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CACC 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000CAD0 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CAD6                            
0000CAD6                            Burro_Action:	; Routine 2
0000CAD6 7000                       		moveq	#0,d0
0000CAD8 1028 0025                  		move.b	ob2ndRout(a0),d0
0000CADC 323B 0000                  		move.w	@index(pc,d0.w),d1
0000CAE0 4EBB 1000                  		jsr	@index(pc,d1.w)
0000CAE4 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000CAEA 6100 FA0C                  		bsr.w	AnimateSprite
0000CAEE 6000 0000                  		bra.w	RememberState
0000CAF2                            ; ===========================================================================
0000CAF2 0000                       @index:		dc.w @changedir-@index
0000CAF4 0000                       		dc.w Burro_Move-@index
0000CAF6 0000                       		dc.w Burro_Jump-@index
0000CAF8 0000                       		dc.w Burro_ChkSonic-@index
0000CAFA                            ; ===========================================================================
0000CAFA                            
0000CAFA                            @changedir:
0000CAFA 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CAFE 6A00                       		bpl.s	@nochg
0000CB00 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CB04 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CB0A 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000CB10 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CB16 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000CB1C 6700                       		beq.s	@nochg
0000CB1E 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000CB22                            
0000CB22                            	@nochg:
0000CB22 4E75                       		rts	
0000CB24                            ; ===========================================================================
0000CB24                            
0000CB24                            Burro_Move:
0000CB24 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000CB28 6B00                       		bmi.s	loc_AD84
0000CB2A 6100 0000                  		bsr.w	SpeedToPos
0000CB2E 0868 0000 0032             		bchg	#0,$32(a0)
0000CB34 6600                       		bne.s	loc_AD78
0000CB36 3628 0008                  		move.w	obX(a0),d3
0000CB3A 0643 000C                  		addi.w	#$C,d3
0000CB3E 0828 0000 0022             		btst	#0,obStatus(a0)
0000CB44 6600                       		bne.s	loc_AD6A
0000CB46 0443 0018                  		subi.w	#$18,d3
0000CB4A                            
0000CB4A                            loc_AD6A:
0000CB4A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000CB50 0C41 000C                  		cmpi.w	#$C,d1
0000CB54 6C00                       		bge.s	loc_AD84
0000CB56 4E75                       		rts	
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            loc_AD78:
0000CB58 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CB5E D368 000C                  		add.w	d1,obY(a0)
0000CB62 4E75                       		rts	
0000CB64                            ; ===========================================================================
0000CB64                            
0000CB64                            loc_AD84:
0000CB64 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000CB6A 6700                       		beq.s	loc_ADA4
0000CB6C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CB70 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000CB76 317C 0000 0010             		move.w	#0,obVelX(a0)
0000CB7C 117C 0000 001C             		move.b	#0,obAnim(a0)
0000CB82 4E75                       		rts	
0000CB84                            ; ===========================================================================
0000CB84                            
0000CB84                            loc_ADA4:
0000CB84 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000CB88 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CB8E 117C 0002 001C             		move.b	#2,obAnim(a0)
0000CB94 4E75                       		rts	
0000CB96                            ; ===========================================================================
0000CB96                            
0000CB96                            Burro_Jump:
0000CB96 6100 0000                  		bsr.w	SpeedToPos
0000CB9A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000CBA0 6B00                       		bmi.s	locret_ADF0
0000CBA2 117C 0003 001C             		move.b	#3,obAnim(a0)
0000CBA8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000CBAE 4A41                       		tst.w	d1
0000CBB0 6A00                       		bpl.s	locret_ADF0
0000CBB2 D368 000C                  		add.w	d1,obY(a0)
0000CBB6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000CBBC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000CBC2 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000CBC8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBCC 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CBD0                            
0000CBD0                            locret_ADF0:
0000CBD0 4E75                       		rts	
0000CBD2                            ; ===========================================================================
0000CBD2                            
0000CBD2                            Burro_ChkSonic:
0000CBD2 343C 0060                  		move.w	#$60,d2
0000CBD6 6100 0000                  		bsr.w	Burro_ChkSonic2
0000CBDA 6400                       		bcc.s	locret_AE20
0000CBDC 3038 D00C                  		move.w	(v_player+obY).w,d0
0000CBE0 9068 000C                  		sub.w	obY(a0),d0
0000CBE4 6400                       		bcc.s	locret_AE20
0000CBE6 0C40 FF80                  		cmpi.w	#-$80,d0
0000CBEA 6500                       		bcs.s	locret_AE20
0000CBEC 4A78 FE08                  		tst.w	(v_debuguse).w
0000CBF0 6600                       		bne.s	locret_AE20
0000CBF2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000CBF6 3141 0010                  		move.w	d1,obVelX(a0)
0000CBFA 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000CC00                            
0000CC00                            locret_AE20:
0000CC00 4E75                       		rts	
0000CC02                            
0000CC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CC02                            
0000CC02                            
0000CC02                            Burro_ChkSonic2:
0000CC02 323C 0080                  		move.w	#$80,d1
0000CC06 08E8 0000 0022             		bset	#0,obStatus(a0)
0000CC0C 3038 D008                  		move.w	(v_player+obX).w,d0
0000CC10 9068 0008                  		sub.w	obX(a0),d0
0000CC14 6400                       		bcc.s	loc_AE40
0000CC16 4440                       		neg.w	d0
0000CC18 4441                       		neg.w	d1
0000CC1A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000CC20                            
0000CC20                            loc_AE40:
0000CC20 B042                       		cmp.w	d2,d0
0000CC22 4E75                       		rts	
0000CC24                            ; End of function Burro_ChkSonic2
0000CC24                            ; End of function Burro_ChkSonic2
0000CC24                            		include	"_anim\Burrobot.asm"
0000CC24                            ; ---------------------------------------------------------------------------
0000CC24                            ; Animation script - Burrobot enemy
0000CC24                            ; ---------------------------------------------------------------------------
0000CC24 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000CC26 0000                       		dc.w @walk2-Ani_Burro
0000CC28 0000                       		dc.w @digging-Ani_Burro
0000CC2A 0000                       		dc.w @fall-Ani_Burro
0000CC2C 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000CC30 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000CC34 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000CC38 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000CC3C 00                         		even
0000CC3C 00                         		even
0000CC3C                            Map_Burro:	include	"_maps\Burrobot.asm"
0000CC3C                            ; --------------------------------------------------------------------------------
0000CC3C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CC3C                            ; --------------------------------------------------------------------------------
0000CC3C                            
0000CC3C                            SME_Ag_86:	
0000CC3C 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000CC40 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000CC44 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000CC48 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000CC4A 02                         SME_Ag_86_E:	dc.b 2	
0000CC4B EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000CC50 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CC55 02                         SME_Ag_86_19:	dc.b 2	
0000CC56 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CC5B 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000CC60 02                         SME_Ag_86_24:	dc.b 2	
0000CC61 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000CC66 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000CC6B 02                         SME_Ag_86_2F:	dc.b 2	
0000CC6C E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000CC71 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000CC76 02                         SME_Ag_86_3A:	dc.b 2	
0000CC77 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000CC7C 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000CC81 02                         SME_Ag_86_45:	dc.b 2	
0000CC82 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000CC87 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000CC8C 02                         SME_Ag_86_50:	dc.b 2	
0000CC8D EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000CC92 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000CC98 00                         		even
0000CC98 00                         		even
0000CC98                            
0000CC98                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000CC98                            ; ---------------------------------------------------------------------------
0000CC98                            ; Object 2F - large grass-covered platforms (MZ)
0000CC98                            ; ---------------------------------------------------------------------------
0000CC98                            
0000CC98                            LargeGrass:
0000CC98 7000                       		moveq	#0,d0
0000CC9A 1028 0024                  		move.b	obRoutine(a0),d0
0000CC9E 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000CCA2 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000CCA6                            ; ===========================================================================
0000CCA6 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000CCA8 0000                       		dc.w LGrass_Action-LGrass_Index
0000CCAA                            
0000CCAA =0000002A                  lgrass_origX:	equ $2A
0000CCAA =0000002C                  lgrass_origY:	equ $2C
0000CCAA                            
0000CCAA 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000CCAC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000CCAE 0000                       		dc.w LGrass_Data3-LGrass_Data
0000CCB0 0140                       		dc.b 1,	$40
0000CCB2 0000                       		dc.w LGrass_Data2-LGrass_Data
0000CCB4 0220                       		dc.b 2,	$20
0000CCB6                            ; ===========================================================================
0000CCB6                            
0000CCB6                            LGrass_Main:	; Routine 0
0000CCB6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCBA 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000CCC2 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000CCC8 117C 0004 0001             		move.b	#4,obRender(a0)
0000CCCE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CCD4 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000CCDA 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000CCE0 7000                       		moveq	#0,d0
0000CCE2 1028 0028                  		move.b	obSubtype(a0),d0
0000CCE6 E448                       		lsr.w	#2,d0
0000CCE8 0240 001C                  		andi.w	#$1C,d0
0000CCEC 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000CCF0 3019                       		move.w	(a1)+,d0
0000CCF2 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000CCF6 214A 0030                  		move.l	a2,$30(a0)
0000CCFA 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000CCFE 1151 0014                  		move.b	(a1),obActWid(a0)
0000CD02 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000CD08 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000CD0E 08E8 0004 0001             		bset	#4,1(a0)
0000CD14                            
0000CD14                            LGrass_Action:	; Routine 2
0000CD14 6100 0000                  		bsr.w	LGrass_Types
0000CD18 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CD1C 6700                       		beq.s	LGrass_Solid
0000CD1E 7200                       		moveq	#0,d1
0000CD20 1228 0014                  		move.b	obActWid(a0),d1
0000CD24 0641 000B                  		addi.w	#$B,d1
0000CD28 6100 BF46                  		bsr.w	ExitPlatform
0000CD2C 0829 0003 0022             		btst	#3,obStatus(a1)
0000CD32 6600 0000                  		bne.w	LGrass_Slope
0000CD36 4228 0025                  		clr.b	ob2ndRout(a0)
0000CD3A 6000                       		bra.s	LGrass_Display
0000CD3C                            ; ===========================================================================
0000CD3C                            
0000CD3C                            LGrass_Slope:
0000CD3C 7200                       		moveq	#0,d1
0000CD3E 1228 0014                  		move.b	obActWid(a0),d1
0000CD42 0641 000B                  		addi.w	#$B,d1
0000CD46 2468 0030                  		movea.l	$30(a0),a2
0000CD4A 3428 0008                  		move.w	obX(a0),d2
0000CD4E 6100 CEBA                  		bsr.w	SlopeObject2
0000CD52 6000                       		bra.s	LGrass_Display
0000CD54                            ; ===========================================================================
0000CD54                            
0000CD54                            LGrass_Solid:
0000CD54 7200                       		moveq	#0,d1
0000CD56 1228 0014                  		move.b	obActWid(a0),d1
0000CD5A 0641 000B                  		addi.w	#$B,d1
0000CD5E 343C 0020                  		move.w	#$20,d2
0000CD62 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000CD68 6600                       		bne.s	loc_AF8E
0000CD6A 343C 0030                  		move.w	#$30,d2
0000CD6E                            
0000CD6E                            loc_AF8E:
0000CD6E 2468 0030                  		movea.l	$30(a0),a2
0000CD72 6100 0000                  		bsr.w	SolidObject2F
0000CD76                            
0000CD76                            LGrass_Display:
0000CD76 6100 0000                  		bsr.w	DisplaySprite
0000CD7A 6000 0000                  		bra.w	LGrass_ChkDel
0000CD7E                            
0000CD7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CD7E                            
0000CD7E                            
0000CD7E                            LGrass_Types:
0000CD7E 7000                       		moveq	#0,d0
0000CD80 1028 0028                  		move.b	obSubtype(a0),d0
0000CD84 0240 0007                  		andi.w	#7,d0
0000CD88 D040                       		add.w	d0,d0
0000CD8A 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000CD8E 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000CD92                            ; End of function LGrass_Types
0000CD92                            
0000CD92                            ; ===========================================================================
0000CD92 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000CD94 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000CD96 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000CD98 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000CD9A 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000CD9C 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000CD9E                            ; ===========================================================================
0000CD9E                            
0000CD9E                            LGrass_Type00:
0000CD9E 4E75                       		rts			; type 00 platform doesn't move
0000CDA0                            ; ===========================================================================
0000CDA0                            
0000CDA0                            LGrass_Type01:
0000CDA0 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000CDA4 323C 0020                  		move.w	#$20,d1
0000CDA8 6000                       		bra.s	LGrass_Move
0000CDAA                            ; ===========================================================================
0000CDAA                            
0000CDAA                            LGrass_Type02:
0000CDAA 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000CDAE 323C 0030                  		move.w	#$30,d1
0000CDB2 6000                       		bra.s	LGrass_Move
0000CDB4                            ; ===========================================================================
0000CDB4                            
0000CDB4                            LGrass_Type03:
0000CDB4 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000CDB8 323C 0040                  		move.w	#$40,d1
0000CDBC 6000                       		bra.s	LGrass_Move
0000CDBE                            ; ===========================================================================
0000CDBE                            
0000CDBE                            LGrass_Type04:
0000CDBE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000CDC2 323C 0060                  		move.w	#$60,d1
0000CDC6                            
0000CDC6                            LGrass_Move:
0000CDC6 0828 0003 0028             		btst	#3,obSubtype(a0)
0000CDCC 6700                       		beq.s	loc_AFF2
0000CDCE 4440                       		neg.w	d0
0000CDD0 D041                       		add.w	d1,d0
0000CDD2                            
0000CDD2                            loc_AFF2:
0000CDD2 3228 002C                  		move.w	lgrass_origY(a0),d1
0000CDD6 9240                       		sub.w	d0,d1
0000CDD8 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000CDDC 4E75                       		rts	
0000CDDE                            ; ===========================================================================
0000CDDE                            
0000CDDE                            LGrass_Type05:
0000CDDE 1028 0034                  		move.b	$34(a0),d0
0000CDE2 4A28 0025                  		tst.b	ob2ndRout(a0)
0000CDE6 6600                       		bne.s	loc_B010
0000CDE8 5500                       		subq.b	#2,d0
0000CDEA 6400                       		bcc.s	loc_B01C
0000CDEC 7000                       		moveq	#0,d0
0000CDEE 6000                       		bra.s	loc_B01C
0000CDF0                            ; ===========================================================================
0000CDF0                            
0000CDF0                            loc_B010:
0000CDF0 5800                       		addq.b	#4,d0
0000CDF2 0C00 0040                  		cmpi.b	#$40,d0
0000CDF6 6500                       		bcs.s	loc_B01C
0000CDF8 103C 0040                  		move.b	#$40,d0
0000CDFC                            
0000CDFC                            loc_B01C:
0000CDFC 1140 0034                  		move.b	d0,$34(a0)
0000CE00 4EB9 0000 3BA2             		jsr	(CalcSine).l
0000CE06 E848                       		lsr.w	#4,d0
0000CE08 3200                       		move.w	d0,d1
0000CE0A D068 002C                  		add.w	lgrass_origY(a0),d0
0000CE0E 3140 000C                  		move.w	d0,obY(a0)
0000CE12 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000CE18 6600                       		bne.s	loc_B07A
0000CE1A 4A28 0035                  		tst.b	$35(a0)
0000CE1E 6600                       		bne.s	loc_B07A
0000CE20 117C 0001 0035             		move.b	#1,$35(a0)
0000CE26 6100 0000                  		bsr.w	FindNextFreeObj
0000CE2A 6600                       		bne.s	loc_B07A
0000CE2C 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000CE30 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000CE36 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000CE3C 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000CE40 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000CE44 0469 0040 0008             		subi.w	#$40,obX(a1)
0000CE4A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000CE50 2348 0038                  		move.l	a0,$38(a1)
0000CE54 2448                       		movea.l	a0,a2
0000CE56 6100                       		bsr.s	sub_B09C
0000CE58                            
0000CE58                            loc_B07A:
0000CE58 7400                       		moveq	#0,d2
0000CE5A 45E8 0036                  		lea	$36(a0),a2
0000CE5E 141A                       		move.b	(a2)+,d2
0000CE60 5302                       		subq.b	#1,d2
0000CE62 6500                       		bcs.s	locret_B09A
0000CE64                            
0000CE64                            loc_B086:
0000CE64 7000                       		moveq	#0,d0
0000CE66 101A                       		move.b	(a2)+,d0
0000CE68 ED48                       		lsl.w	#6,d0
0000CE6A 0640 D000                  		addi.w	#$D000,d0
0000CE6E 3240                       		movea.w	d0,a1
0000CE70 3341 003C                  		move.w	d1,$3C(a1)
0000CE74 51CA FFEE                  		dbf	d2,loc_B086
0000CE78                            
0000CE78                            locret_B09A:
0000CE78 4E75                       		rts	
0000CE7A                            
0000CE7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE7A                            
0000CE7A                            
0000CE7A                            sub_B09C:
0000CE7A 45EA 0036                  		lea	$36(a2),a2
0000CE7E 7000                       		moveq	#0,d0
0000CE80 1012                       		move.b	(a2),d0
0000CE82 5212                       		addq.b	#1,(a2)
0000CE84 45F2 0001                  		lea	1(a2,d0.w),a2
0000CE88 3009                       		move.w	a1,d0
0000CE8A 0440 D000                  		subi.w	#$D000,d0
0000CE8E EC48                       		lsr.w	#6,d0
0000CE90 0240 007F                  		andi.w	#$7F,d0
0000CE94 1480                       		move.b	d0,(a2)
0000CE96 4E75                       		rts	
0000CE98                            ; End of function sub_B09C
0000CE98                            
0000CE98                            ; ===========================================================================
0000CE98                            
0000CE98                            LGrass_ChkDel:
0000CE98 4A28 0035                  		tst.b	$35(a0)
0000CE9C 6700                       		beq.s	loc_B0C6
0000CE9E 4A28 0001                  		tst.b	obRender(a0)
0000CEA2 6A00                       		bpl.s	LGrass_DelFlames
0000CEA4                            
0000CEA4                            loc_B0C6:
0000CEC2 4E75                       		rts	
0000CEC4                            ; ===========================================================================
0000CEC4                            
0000CEC4                            LGrass_DelFlames:
0000CEC4 7400                       		moveq	#0,d2
0000CEC6                            
0000CEC6                            loc_B0E8:
0000CEC6 45E8 0036                  		lea	$36(a0),a2
0000CECA 1412                       		move.b	(a2),d2
0000CECC 421A                       		clr.b	(a2)+
0000CECE 5302                       		subq.b	#1,d2
0000CED0 6500                       		bcs.s	locret_B116
0000CED2                            
0000CED2                            loc_B0F4:
0000CED2 7000                       		moveq	#0,d0
0000CED4 1012                       		move.b	(a2),d0
0000CED6 421A                       		clr.b	(a2)+
0000CED8 ED48                       		lsl.w	#6,d0
0000CEDA 0640 D000                  		addi.w	#$D000,d0
0000CEDE 3240                       		movea.w	d0,a1
0000CEE0 6100 0000                  		bsr.w	DeleteChild
0000CEE4 51CA FFEC                  		dbf	d2,loc_B0F4
0000CEE8 117C 0000 0035             		move.b	#0,$35(a0)
0000CEEE 117C 0000 0034             		move.b	#0,$34(a0)
0000CEF4                            
0000CEF4                            locret_B116:
0000CEF4 4E75                       		rts	
0000CEF6                            ; ===========================================================================
0000CEF6                            ; ---------------------------------------------------------------------------
0000CEF6                            ; Collision data for large moving platforms (MZ)
0000CEF6                            ; ---------------------------------------------------------------------------
0000CEF6                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000CF42                            		even
0000CF42                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000CF6E                            		even
0000CF6E                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000CFBA                            		even
0000CFBA                            		even
0000CFBA                            		include	"_incObj\35 Burning Grass.asm"
0000CFBA                            ; ---------------------------------------------------------------------------
0000CFBA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000CFBA                            ; (appears when	you walk on sinking platforms)
0000CFBA                            ; ---------------------------------------------------------------------------
0000CFBA                            
0000CFBA                            GrassFire:
0000CFBA 7000                       		moveq	#0,d0
0000CFBC 1028 0024                  		move.b	obRoutine(a0),d0
0000CFC0 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000CFC4 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000CFC8                            ; ===========================================================================
0000CFC8 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000CFCA 0000                       		dc.w loc_B238-GFire_Index
0000CFCC 0000                       		dc.w GFire_Move-GFire_Index
0000CFCE                            
0000CFCE =0000002A                  gfire_origX:	equ $2A
0000CFCE                            ; ===========================================================================
0000CFCE                            
0000CFCE                            GFire_Main:	; Routine 0
0000CFCE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFD2 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000CFDA 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000CFE0 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000CFE6 117C 0004 0001             		move.b	#4,obRender(a0)
0000CFEC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000CFF2 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000CFF8 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D008 4A28 0028                  		tst.b	obSubtype(a0)
0000D00C 6700                       		beq.s	loc_B238
0000D00E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D012 6000 0000                  		bra.w	GFire_Move
0000D016                            ; ===========================================================================
0000D016                            
0000D016                            loc_B238:	; Routine 2
0000D016 2268 0030                  		movea.l	$30(a0),a1
0000D01A 3228 0008                  		move.w	obX(a0),d1
0000D01E 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D022 0641 000C                  		addi.w	#$C,d1
0000D026 3001                       		move.w	d1,d0
0000D028 E248                       		lsr.w	#1,d0
0000D02A 1031 0000                  		move.b	(a1,d0.w),d0
0000D02E 4440                       		neg.w	d0
0000D030 D068 002C                  		add.w	$2C(a0),d0
0000D034 3400                       		move.w	d0,d2
0000D036 D068 003C                  		add.w	$3C(a0),d0
0000D03A 3140 000C                  		move.w	d0,obY(a0)
0000D03E 0C41 0084                  		cmpi.w	#$84,d1
0000D042 6400                       		bcc.s	loc_B2B0
0000D044 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D04C 0C41 0080                  		cmpi.w	#$80,d1
0000D050 6400                       		bcc.s	loc_B2B0
0000D052 2028 0008                  		move.l	obX(a0),d0
0000D056 0680 0008 0000             		addi.l	#$80000,d0
0000D05C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D062 6600                       		bne.s	loc_B2B0
0000D064 6100 0000                  		bsr.w	FindNextFreeObj
0000D068 6600                       		bne.s	loc_B2B0
0000D06A 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D06E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D074 3342 002C                  		move.w	d2,$2C(a1)
0000D078 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D07E 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D084 2468 0038                  		movea.l	$38(a0),a2
0000D088 6100 FDF0                  		bsr.w	sub_B09C
0000D08C                            
0000D08C                            loc_B2B0:
0000D08C 6000                       		bra.s	GFire_Animate
0000D08E                            ; ===========================================================================
0000D08E                            
0000D08E                            GFire_Move:	; Routine 4
0000D08E 3028 002C                  		move.w	$2C(a0),d0
0000D092 D068 003C                  		add.w	$3C(a0),d0
0000D096 3140 000C                  		move.w	d0,obY(a0)
0000D09A                            
0000D09A                            GFire_Animate:
0000D09A 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D0A0 6100 F456                  		bsr.w	AnimateSprite
0000D0A4 6000 0000                  		bra.w	DisplaySprite
0000D0A4 6000 0000                  		bra.w	DisplaySprite
0000D0A8                            		include	"_anim\Burning Grass.asm"
0000D0A8                            ; ---------------------------------------------------------------------------
0000D0A8                            ; Animation script - burning grass that sits on the floor (MZ)
0000D0A8                            ; ---------------------------------------------------------------------------
0000D0A8 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D0AA 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D0B0                            		even
0000D0B0                            		even
0000D0B0                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D0B0                            ; ---------------------------------------------------------------------------
0000D0B0                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D0B0                            ; ---------------------------------------------------------------------------
0000D0B0                            Map_LGrass_internal:
0000D0B0 0000                       		dc.w @wide-Map_LGrass_internal
0000D0B2 0000                       		dc.w @sloped-Map_LGrass_internal
0000D0B4 0000                       		dc.w @narrow-Map_LGrass_internal
0000D0B6 0D                         @wide:		dc.b $D
0000D0B7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D0BC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D0C1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D0C6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D0CB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D0D0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D0D5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D0DA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D0DF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D0E4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D0E9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D0EE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D0F3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D0F8 0A                         @sloped:	dc.b $A
0000D0F9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D0FE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D103 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D108 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D10D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D112 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D117 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D11C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D121 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D126 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D12B 06                         @narrow:	dc.b 6
0000D12C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D131 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D136 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D13B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D140 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D145 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D14A                            		even
0000D14A                            		even
0000D14A                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D14A                            ; --------------------------------------------------------------------------------
0000D14A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D14A                            ; --------------------------------------------------------------------------------
0000D14A                            
0000D14A                            SME_gyvTV:	
0000D14A 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D14E 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D152 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D156 01                         SME_gyvTV_C:	dc.b 1	
0000D157 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D15C 01                         SME_gyvTV_12:	dc.b 1	
0000D15D E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D162 01                         SME_gyvTV_18:	dc.b 1	
0000D163 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D168 01                         SME_gyvTV_1E:	dc.b 1	
0000D169 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D16E 01                         SME_gyvTV_24:	dc.b 1	
0000D16F F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D174 01                         SME_gyvTV_2A:	dc.b 1	
0000D175 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D17A                            		even
0000D17A                            		even
0000D17A                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D17A                            ; ---------------------------------------------------------------------------
0000D17A                            ; Object 30 - large green glass blocks (MZ)
0000D17A                            ; ---------------------------------------------------------------------------
0000D17A                            
0000D17A                            GlassBlock:
0000D17A 7000                       		moveq	#0,d0
0000D17C 1028 0024                  		move.b	obRoutine(a0),d0
0000D180 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D184 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D1A6 6000 0000                  		bra.w	DisplaySprite
0000D1AA                            ; ===========================================================================
0000D1AA                            
0000D1AA                            Glass_Delete:
0000D1AA 6000 0000                  		bra.w	DeleteObject
0000D1AE                            ; ===========================================================================
0000D1AE 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D1B0 0000                       		dc.w Glass_Block012-Glass_Index
0000D1B2 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D1B4 0000                       		dc.w Glass_Block34-Glass_Index
0000D1B6 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D1B8                            
0000D1B8 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D1B8 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D1B8                            
0000D1B8 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D1BB 0400 01                    		dc.b 4,	0, 1
0000D1BE 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D1C1 0800 01                    		dc.b 8,	0, 1
0000D1C4                            ; ===========================================================================
0000D1C4                            
0000D1C4                            Glass_Main:	; Routine 0
0000D1C4 45F9 0000 D1B8             		lea	(Glass_Vars1).l,a2
0000D1CA 7201                       		moveq	#1,d1
0000D1CC 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D1D2 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D1D8 6500                       		bcs.s	@IsType012	; if yes, branch
0000D1DA                            
0000D1DA 45F9 0000 D1BE             		lea	(Glass_Vars2).l,a2
0000D1E0 7201                       		moveq	#1,d1
0000D1E2 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D1E8                            
0000D1E8                            	@IsType012:
0000D1E8 2248                       		movea.l	a0,a1
0000D1EA 6000                       		bra.s	@Load		; load main object
0000D1EC                            ; ===========================================================================
0000D1EC                            
0000D1EC                            	@Repeat:
0000D1EC 6100 0000                  		bsr.w	FindNextFreeObj
0000D1F0 6600                       		bne.s	@Fail
0000D1F2                            
0000D1F2                            @Load:
0000D1F2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D1F6 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D1FA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D200 101A                       		move.b	(a2)+,d0
0000D202 4880                       		ext.w	d0
0000D204 D068 000C                  		add.w	obY(a0),d0
0000D208 3340 000C                  		move.w	d0,obY(a1)
0000D20C 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D214 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D21A 137C 0004 0001             		move.b	#4,obRender(a1)
0000D220 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D226 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D22C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D232 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D238 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D23C 2348 003C                  		move.l	a0,glass_parent(a1)
0000D240 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D244                            
0000D244 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D24A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D250 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D254 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D25A                            
0000D25A                            	@Fail:
0000D25A 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D260 08E8 0004 0001             		bset	#4,obRender(a0)
0000D266                            
0000D266                            Glass_Block012:	; Routine 2
0000D266 6100 0000                  		bsr.w	Glass_Types
0000D26A 323C 002B                  		move.w	#$2B,d1
0000D26E 343C 0048                  		move.w	#$48,d2
0000D272 363C 0049                  		move.w	#$49,d3
0000D276 3828 0008                  		move.w	obX(a0),d4
0000D27A 6000 0000                  		bra.w	SolidObject
0000D27E                            ; ===========================================================================
0000D27E                            
0000D27E                            Glass_Reflect012:
0000D27E                            		; Routine 4
0000D27E 2268 003C                  		movea.l	$3C(a0),a1
0000D282 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D288 6000 0000                  		bra.w	Glass_Types
0000D28C                            ; ===========================================================================
0000D28C                            
0000D28C                            Glass_Block34:	; Routine 6
0000D28C 6100 0000                  		bsr.w	Glass_Types
0000D290 323C 002B                  		move.w	#$2B,d1
0000D294 343C 0038                  		move.w	#$38,d2
0000D298 363C 0039                  		move.w	#$39,d3
0000D29C 3828 0008                  		move.w	obX(a0),d4
0000D2A0 6000 0000                  		bra.w	SolidObject
0000D2A4                            ; ===========================================================================
0000D2A4                            
0000D2A4                            Glass_Reflect34:
0000D2A4                            		; Routine 8
0000D2A4 2268 003C                  		movea.l	$3C(a0),a1
0000D2A8 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D2AE 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D2B4 6000 0000                  		bra.w	Glass_Types
0000D2B8                            
0000D2B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2B8                            
0000D2B8                            
0000D2B8                            Glass_Types:
0000D2B8 7000                       		moveq	#0,d0
0000D2BA 1028 0028                  		move.b	obSubtype(a0),d0
0000D2BE 0240 0007                  		andi.w	#7,d0
0000D2C2 D040                       		add.w	d0,d0
0000D2C4 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D2C8 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D2CC                            ; End of function Glass_Types
0000D2CC                            
0000D2CC                            ; ===========================================================================
0000D2CC 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D2CE 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D2D0 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D2D2 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D2D4 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D2D6                            ; ===========================================================================
0000D2D6                            
0000D2D6                            Glass_Type00:
0000D2D6 4E75                       		rts	
0000D2D8                            ; ===========================================================================
0000D2D8                            
0000D2D8                            Glass_Type01:
0000D2D8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2DC 323C 0040                  		move.w	#$40,d1
0000D2E0 6000                       		bra.s	loc_B514
0000D2E2                            ; ===========================================================================
0000D2E2                            
0000D2E2                            Glass_Type02:
0000D2E2 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D2E6 323C 0040                  		move.w	#$40,d1
0000D2EA 4440                       		neg.w	d0
0000D2EC D041                       		add.w	d1,d0
0000D2EE                            
0000D2EE                            loc_B514:
0000D2EE 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D2F4 6700                       		beq.s	loc_B526
0000D2F6 4440                       		neg.w	d0
0000D2F8 D041                       		add.w	d1,d0
0000D2FA E208                       		lsr.b	#1,d0
0000D2FC 0640 0020                  		addi.w	#$20,d0
0000D300                            
0000D300                            loc_B526:
0000D300 6000 0000                  		bra.w	loc_B5EE
0000D304                            ; ===========================================================================
0000D304                            
0000D304                            Glass_Type03:
0000D304 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D30A 6700                       		beq.s	loc_B53E
0000D30C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D310 0440 0010                  		subi.w	#$10,d0
0000D314 6000 0000                  		bra.w	loc_B5EE
0000D318                            ; ===========================================================================
0000D318                            
0000D318                            loc_B53E:
0000D318 0828 0003 0022             		btst	#3,obStatus(a0)
0000D31E 6600                       		bne.s	loc_B54E
0000D320 08A8 0000 0034             		bclr	#0,$34(a0)
0000D326 6000                       		bra.s	loc_B582
0000D328                            ; ===========================================================================
0000D328                            
0000D328                            loc_B54E:
0000D328 4A28 0034                  		tst.b	$34(a0)
0000D32C 6600                       		bne.s	loc_B582
0000D32E 117C 0001 0034             		move.b	#1,$34(a0)
0000D334 08E8 0000 0035             		bset	#0,$35(a0)
0000D33A 6700                       		beq.s	loc_B582
0000D33C 08E8 0007 0034             		bset	#7,$34(a0)
0000D342 317C 0010 0036             		move.w	#$10,$36(a0)
0000D348 117C 000A 0038             		move.b	#$A,$38(a0)
0000D34E 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D354 6600                       		bne.s	loc_B582
0000D356 317C 0040 0036             		move.w	#$40,$36(a0)
0000D35C                            
0000D35C                            loc_B582:
0000D35C 4A28 0034                  		tst.b	$34(a0)
0000D360 6A00                       		bpl.s	loc_B5AA
0000D362 4A28 0038                  		tst.b	$38(a0)
0000D366 6700                       		beq.s	loc_B594
0000D368 5328 0038                  		subq.b	#1,$38(a0)
0000D36C 6600                       		bne.s	loc_B5AA
0000D36E                            
0000D36E                            loc_B594:
0000D36E 4A68 0032                  		tst.w	glass_dist(a0)
0000D372 6700                       		beq.s	loc_B5A4
0000D374 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D378 5368 0036                  		subq.w	#1,$36(a0)
0000D37C 6600                       		bne.s	loc_B5AA
0000D37E                            
0000D37E                            loc_B5A4:
0000D37E 08A8 0007 0034             		bclr	#7,$34(a0)
0000D384                            
0000D384                            loc_B5AA:
0000D384 3028 0032                  		move.w	glass_dist(a0),d0
0000D388 6000                       		bra.s	loc_B5EE
0000D38A                            ; ===========================================================================
0000D38A                            
0000D38A                            Glass_Type04:
0000D38A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D390 6700                       		beq.s	Glass_ChkSwitch
0000D392 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D396 0440 0010                  		subi.w	#$10,d0
0000D39A 6000                       		bra.s	loc_B5EE
0000D39C                            ; ===========================================================================
0000D39C                            
0000D39C                            Glass_ChkSwitch:
0000D39C 4A28 0034                  		tst.b	$34(a0)
0000D3A0 6600                       		bne.s	loc_B5E0
0000D3A2 45F8 F7E0                  		lea	(f_switch).w,a2
0000D3A6 7000                       		moveq	#0,d0
0000D3A8 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D3AC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D3AE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D3B2 6700                       		beq.s	loc_B5EA	; if not, branch
0000D3B4 117C 0001 0034             		move.b	#1,$34(a0)
0000D3BA                            
0000D3BA                            loc_B5E0:
0000D3BA 4A68 0032                  		tst.w	glass_dist(a0)
0000D3BE 6700                       		beq.s	loc_B5EA
0000D3C0 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D3C4                            
0000D3C4                            loc_B5EA:
0000D3C4 3028 0032                  		move.w	glass_dist(a0),d0
0000D3C8                            
0000D3C8                            loc_B5EE:
0000D3C8 3228 0030                  		move.w	$30(a0),d1
0000D3CC 9240                       		sub.w	d0,d1
0000D3CE 3141 000C                  		move.w	d1,obY(a0)
0000D3D2 4E75                       		rts	
0000D3D2 4E75                       		rts	
0000D3D4                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D3D4                            ; --------------------------------------------------------------------------------
0000D3D4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D3D4                            ; --------------------------------------------------------------------------------
0000D3D4                            
0000D3D4                            SME_NEyTf:	
0000D3D4 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D3D8 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D3DA 0C                         SME_NEyTf_6:	dc.b $C	
0000D3DB B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D3E0 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D3E5 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D3EA C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D3EF E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D3F4 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D3F9 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D3FE 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D403 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D408 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D40D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D412 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D417 02                         SME_NEyTf_43:	dc.b 2	
0000D418 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D41D 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D422 0A                         SME_NEyTf_4E:	dc.b $A	
0000D423 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D428 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D42D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D432 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D437 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D43C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D441 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D446 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D44B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D450 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D456 00                         		even
0000D456 00                         		even
0000D456                            		include	"_incObj\31 Chained Stompers.asm"
0000D456                            ; ---------------------------------------------------------------------------
0000D456                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D456                            ; ---------------------------------------------------------------------------
0000D456                            
0000D456                            ChainStomp:
0000D456 7000                       		moveq	#0,d0
0000D458 1028 0024                  		move.b	obRoutine(a0),d0
0000D45C 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D460 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D464                            ; ===========================================================================
0000D464 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D466 0000                       		dc.w loc_B798-CStom_Index
0000D468 0000                       		dc.w loc_B7FE-CStom_Index
0000D46A 0000                       		dc.w CStom_Display2-CStom_Index
0000D46C 0000                       		dc.w loc_B7E2-CStom_Index
0000D46E                            
0000D46E =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D46E                            
0000D46E 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D470 0100                       		dc.b 1,	0
0000D472                            
0000D472 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D475 041C 01                    		dc.b 4,	$1C, 1
0000D478 08CC 03                    		dc.b 8,	$CC, 3
0000D47B 06F0 02                    		dc.b 6,	$F0, 2
0000D47E                            
0000D47E 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D482 5000 7800                  		dc.w $5000, $7800
0000D486 3800 5800                  		dc.w $3800, $5800
0000D48A B800                       		dc.w $B800
0000D48C                            ; ===========================================================================
0000D48C                            
0000D48C                            CStom_Main:	; Routine 0
0000D48C 7000                       		moveq	#0,d0
0000D48E 1028 0028                  		move.b	obSubtype(a0),d0
0000D492 6A00                       		bpl.s	loc_B6CE
0000D494 0240 007F                  		andi.w	#$7F,d0
0000D498 D040                       		add.w	d0,d0
0000D49A 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D49E 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D4A2 101A                       		move.b	(a2)+,d0
0000D4A4 1140 0028                  		move.b	d0,obSubtype(a0)
0000D4A8                            
0000D4A8                            loc_B6CE:
0000D4A8 0200 000F                  		andi.b	#$F,d0
0000D4AC D040                       		add.w	d0,d0
0000D4AE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D4B2 4A40                       		tst.w	d0
0000D4B4 6600                       		bne.s	loc_B6E0
0000D4B6 3142 0032                  		move.w	d2,$32(a0)
0000D4BA                            
0000D4BA                            loc_B6E0:
0000D4BA 45F9 0000 D472             		lea	(CStom_Var).l,a2
0000D4C0 2248                       		movea.l	a0,a1
0000D4C2 7203                       		moveq	#3,d1
0000D4C4 6000                       		bra.s	CStom_MakeStomper
0000D4C6                            ; ===========================================================================
0000D4C6                            
0000D4C6                            CStom_Loop:
0000D4C6 6100 0000                  		bsr.w	FindNextFreeObj
0000D4CA 6600 0000                  		bne.w	CStom_SetSize
0000D4CE                            
0000D4CE                            CStom_MakeStomper:
0000D4CE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D4D2 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000D4D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D4DC 101A                       		move.b	(a2)+,d0
0000D4DE 4880                       		ext.w	d0
0000D4E0 D068 000C                  		add.w	obY(a0),d0
0000D4E4 3340 000C                  		move.w	d0,obY(a1)
0000D4E8 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000D4F0 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D4F6 137C 0004 0001             		move.b	#4,obRender(a1)
0000D4FC 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D502 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D508 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D50E 3342 0034                  		move.w	d2,$34(a1)
0000D512 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D518 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D51C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000D522 6600                       		bne.s	loc_B76A
0000D524 5341                       		subq.w	#1,d1
0000D526 1028 0028                  		move.b	obSubtype(a0),d0
0000D52A 0240 00F0                  		andi.w	#$F0,d0
0000D52E 0C40 0020                  		cmpi.w	#$20,d0
0000D532 679A                       		beq.s	CStom_MakeStomper
0000D534 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000D53A 137C 0090 0020             		move.b	#$90,obColType(a1)
0000D540 5241                       		addq.w	#1,d1
0000D542                            
0000D542                            loc_B76A:
0000D542 2348 003C                  		move.l	a0,$3C(a1)
0000D546 51C9 FF7E                  		dbf	d1,CStom_Loop
0000D54A                            
0000D54A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D550                            
0000D550                            CStom_SetSize:
0000D550 7000                       		moveq	#0,d0
0000D552 1028 0028                  		move.b	obSubtype(a0),d0
0000D556 E648                       		lsr.w	#3,d0
0000D558 0200 000E                  		andi.b	#$E,d0
0000D55C 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000D560 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000D564 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000D568 6000                       		bra.s	loc_B798
0000D56A                            ; ===========================================================================
0000D56A 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000D56C 3009                       		dc.b $30, 9
0000D56E 100A                       		dc.b $10, $A
0000D570                            ; ===========================================================================
0000D570                            
0000D570                            loc_B798:	; Routine 2
0000D570 6100 0000                  		bsr.w	CStom_Types
0000D574 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000D57A 7200                       		moveq	#0,d1
0000D57C 1228 0014                  		move.b	obActWid(a0),d1
0000D580 0641 000B                  		addi.w	#$B,d1
0000D584 343C 000C                  		move.w	#$C,d2
0000D588 363C 000D                  		move.w	#$D,d3
0000D58C 3828 0008                  		move.w	obX(a0),d4
0000D590 6100 0000                  		bsr.w	SolidObject
0000D594 0828 0003 0022             		btst	#3,obStatus(a0)
0000D59A 6700                       		beq.s	CStom_Display
0000D59C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D5A2 6400                       		bcc.s	CStom_Display
0000D5A4 2448                       		movea.l	a0,a2
0000D5A6 41F8 D000                  		lea	(v_player).w,a0
0000D5AA 4EB9 0000 0000             		jsr	(KillSonic).l
0000D5B0 204A                       		movea.l	a2,a0
0000D5B2                            
0000D5B2                            CStom_Display:
0000D5B2 6100 0000                  		bsr.w	DisplaySprite
0000D5B6 6000 0000                  		bra.w	CStom_ChkDel
0000D5BA                            ; ===========================================================================
0000D5BA                            
0000D5BA                            loc_B7E2:	; Routine 8
0000D5BA 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000D5C0 08E8 0004 0001             		bset	#4,obRender(a0)
0000D5C6 2268 003C                  		movea.l	$3C(a0),a1
0000D5CA 1029 0032                  		move.b	$32(a1),d0
0000D5CE EA08                       		lsr.b	#5,d0
0000D5D0 5600                       		addq.b	#3,d0
0000D5D2 1140 001A                  		move.b	d0,obFrame(a0)
0000D5D6                            
0000D5D6                            loc_B7FE:	; Routine 4
0000D5D6 2268 003C                  		movea.l	$3C(a0),a1
0000D5DA 7000                       		moveq	#0,d0
0000D5DC 1029 0032                  		move.b	$32(a1),d0
0000D5E0 D068 0030                  		add.w	$30(a0),d0
0000D5E4 3140 000C                  		move.w	d0,obY(a0)
0000D5E8                            
0000D5E8                            CStom_Display2:	; Routine 6
0000D5E8 6100 0000                  		bsr.w	DisplaySprite
0000D5EC                            
0000D5EC                            CStom_ChkDel:
0000D60A 4E75                       		rts	
0000D60C                            ; ===========================================================================
0000D60C                            
0000D60C                            CStom_Types:
0000D60C 1028 0028                  		move.b	obSubtype(a0),d0
0000D610 0240 000F                  		andi.w	#$F,d0
0000D614 D040                       		add.w	d0,d0
0000D616 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000D61A 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000D61E                            ; ===========================================================================
0000D61E 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000D620 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D622 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D624 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D626 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D628 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000D62A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000D62C                            ; ===========================================================================
0000D62C                            
0000D62C                            CStom_Type00:
0000D62C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000D630 7000                       		moveq	#0,d0
0000D632 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000D636 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000D63A 6700                       		beq.s	loc_B8A8	; if not, branch
0000D63C 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000D640 6A00                       		bpl.s	loc_B872
0000D642 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000D648 6700                       		beq.s	loc_B8A0
0000D64A                            
0000D64A                            loc_B872:
0000D64A 4A68 0032                  		tst.w	$32(a0)
0000D64E 6700                       		beq.s	loc_B8A0
0000D650 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D654 0200 000F                  		andi.b	#$F,d0
0000D658 6600                       		bne.s	loc_B892
0000D65A 4A28 0001                  		tst.b	1(a0)
0000D65E 6A00                       		bpl.s	loc_B892
0000D66A                            
0000D66A                            loc_B892:
0000D66A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D670 6400                       		bcc.s	CStom_Restart
0000D672 317C 0000 0032             		move.w	#0,$32(a0)
0000D678                            
0000D678                            loc_B8A0:
0000D678 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D67E 6000                       		bra.s	CStom_Restart
0000D680                            ; ===========================================================================
0000D680                            
0000D680                            loc_B8A8:
0000D680 3228 0034                  		move.w	$34(a0),d1
0000D684 B268 0032                  		cmp.w	$32(a0),d1
0000D688 6700                       		beq.s	CStom_Restart
0000D68A 3028 0012                  		move.w	obVelY(a0),d0
0000D68E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D694 D168 0032                  		add.w	d0,$32(a0)
0000D698 B268 0032                  		cmp.w	$32(a0),d1
0000D69C 6200                       		bhi.s	CStom_Restart
0000D69E 3141 0032                  		move.w	d1,$32(a0)
0000D6A2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D6A8 4A28 0001                  		tst.b	obRender(a0)
0000D6AC 6A00                       		bpl.s	CStom_Restart
0000D6B8                            
0000D6B8                            CStom_Restart:
0000D6B8 7000                       		moveq	#0,d0
0000D6BA 1028 0032                  		move.b	$32(a0),d0
0000D6BE D068 0030                  		add.w	$30(a0),d0
0000D6C2 3140 000C                  		move.w	d0,obY(a0)
0000D6C6 4E75                       		rts	
0000D6C8                            ; ===========================================================================
0000D6C8                            
0000D6C8                            CStom_Type01:
0000D6C8 4A68 0036                  		tst.w	$36(a0)
0000D6CC 6700                       		beq.s	loc_B938
0000D6CE 4A68 0038                  		tst.w	$38(a0)
0000D6D2 6700                       		beq.s	loc_B902
0000D6D4 5368 0038                  		subq.w	#1,$38(a0)
0000D6D8 6000                       		bra.s	loc_B97C
0000D6DA                            ; ===========================================================================
0000D6DA                            
0000D6DA                            loc_B902:
0000D6DA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000D6DE 0200 000F                  		andi.b	#$F,d0
0000D6E2 6600                       		bne.s	loc_B91C
0000D6E4 4A28 0001                  		tst.b	obRender(a0)
0000D6E8 6A00                       		bpl.s	loc_B91C
0000D6F4                            
0000D6F4                            loc_B91C:
0000D6F4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D6FA 6400                       		bcc.s	loc_B97C
0000D6FC 317C 0000 0032             		move.w	#0,$32(a0)
0000D702 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D708 317C 0000 0036             		move.w	#0,$36(a0)
0000D70E 6000                       		bra.s	loc_B97C
0000D710                            ; ===========================================================================
0000D710                            
0000D710                            loc_B938:
0000D710 3228 0034                  		move.w	$34(a0),d1
0000D714 B268 0032                  		cmp.w	$32(a0),d1
0000D718 6700                       		beq.s	loc_B97C
0000D71A 3028 0012                  		move.w	obVelY(a0),d0
0000D71E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000D724 D168 0032                  		add.w	d0,$32(a0)
0000D728 B268 0032                  		cmp.w	$32(a0),d1
0000D72C 6200                       		bhi.s	loc_B97C
0000D72E 3141 0032                  		move.w	d1,$32(a0)
0000D732 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000D738 317C 0001 0036             		move.w	#1,$36(a0)
0000D73E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D744 4A28 0001                  		tst.b	obRender(a0)
0000D748 6A00                       		bpl.s	loc_B97C
0000D754                            
0000D754                            loc_B97C:
0000D754 6000 FF62                  		bra.w	CStom_Restart
0000D758                            ; ===========================================================================
0000D758                            
0000D758                            CStom_Type03:
0000D758 3038 D008                  		move.w	(v_player+obX).w,d0
0000D75C 9068 0008                  		sub.w	obX(a0),d0
0000D760 6400                       		bcc.s	loc_B98C
0000D762 4440                       		neg.w	d0
0000D764                            
0000D764                            loc_B98C:
0000D764 0C40 0090                  		cmpi.w	#$90,d0
0000D768 6400                       		bcc.s	loc_B996
0000D76A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000D76E                            
0000D76E                            loc_B996:
0000D76E 6000 FF48                  		bra.w	CStom_Restart
0000D76E 6000 FF48                  		bra.w	CStom_Restart
0000D772                            		include	"_incObj\45 Sideways Stomper.asm"
0000D772                            ; ---------------------------------------------------------------------------
0000D772                            ; Object 45 - spiked metal block from beta version (MZ)
0000D772                            ; ---------------------------------------------------------------------------
0000D772                            
0000D772                            SideStomp:
0000D772 7000                       		moveq	#0,d0
0000D774 1028 0024                  		move.b	obRoutine(a0),d0
0000D778 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000D77C 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000D780                            ; ===========================================================================
0000D780 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000D782 0000                       		dc.w SStom_Solid-SStom_Index
0000D784 0000                       		dc.w loc_BA8E-SStom_Index
0000D786 0000                       		dc.w SStom_Display-SStom_Index
0000D788 0000                       		dc.w SStom_Pole-SStom_Index
0000D78A                            
0000D78A                            		;	routine		frame
0000D78A                            		;		 xpos
0000D78A 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000D78D 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000D790 0834 03                    		dc.b	8,	 $34,	3	; pole
0000D793 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000D796                            
0000D796                            ;word_B9BE:	; Note that this indicates three subtypes
0000D796 3800                       SStom_Len:	dc.w $3800	; short
0000D798 A000                       		dc.w $A000	; long
0000D79A 5000                       		dc.w $5000	; medium
0000D79C                            ; ===========================================================================
0000D79C                            
0000D79C                            SStom_Main:	; Routine 0
0000D79C 7000                       		moveq	#0,d0
0000D79E 1028 0028                  		move.b	obSubtype(a0),d0
0000D7A2 D040                       		add.w	d0,d0
0000D7A4 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000D7A8 45F9 0000 D78A             		lea	(SStom_Var).l,a2
0000D7AE 2248                       		movea.l	a0,a1
0000D7B0 7203                       		moveq	#3,d1
0000D7B2 6000                       		bra.s	@load
0000D7B4                            
0000D7B4                            	@loop:
0000D7B4 6100 0000                  		bsr.w	FindNextFreeObj
0000D7B8 6600                       		bne.s	@fail
0000D7BA                            
0000D7BA                            	@load:
0000D7BA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D7BE 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000D7C2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000D7C8 101A                       		move.b	(a2)+,d0
0000D7CA 4880                       		ext.w	d0
0000D7CC D068 0008                  		add.w	obX(a0),d0
0000D7D0 3340 0008                  		move.w	d0,obX(a1)
0000D7D4 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000D7DC 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000D7E2 137C 0004 0001             		move.b	#4,obRender(a1)
0000D7E8 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000D7EE 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000D7F4 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D7FA 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D800 3342 0034                  		move.w	d2,$34(a1)
0000D804 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D80A 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000D80E 6600                       		bne.s	@notspikes	; if not, branch
0000D810 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000D816                            
0000D816                            	@notspikes:
0000D816 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D81A 2348 003C                  		move.l	a0,$3C(a1)
0000D81E 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000D822                            
0000D822 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D828                            
0000D828                            	@fail:
0000D828 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000D82E                            
0000D82E                            SStom_Solid:	; Routine 2
0000D82E 3F28 0008                  		move.w	obX(a0),-(sp)
0000D832 6100 0000                  		bsr.w	SStom_Move
0000D836 323C 0017                  		move.w	#$17,d1
0000D83A 343C 0020                  		move.w	#$20,d2
0000D83E 363C 0020                  		move.w	#$20,d3
0000D842 381F                       		move.w	(sp)+,d4
0000D844 6100 0000                  		bsr.w	SolidObject
0000D848 6100 0000                  		bsr.w	DisplaySprite
0000D84C 6000 0000                  		bra.w	SStom_ChkDel
0000D850                            ; ===========================================================================
0000D850                            
0000D850                            SStom_Pole:	; Routine 8
0000D850 2268 003C                  		movea.l	$3C(a0),a1
0000D854 1029 0032                  		move.b	$32(a1),d0
0000D858 0600 0010                  		addi.b	#$10,d0
0000D85C EA08                       		lsr.b	#5,d0
0000D85E 5600                       		addq.b	#3,d0
0000D860 1140 001A                  		move.b	d0,obFrame(a0)
0000D864                            
0000D864                            loc_BA8E:	; Routine 4
0000D864 2268 003C                  		movea.l	$3C(a0),a1
0000D868 7000                       		moveq	#0,d0
0000D86A 1029 0032                  		move.b	$32(a1),d0
0000D86E 4440                       		neg.w	d0
0000D870 D068 0030                  		add.w	$30(a0),d0
0000D874 3140 0008                  		move.w	d0,obX(a0)
0000D878                            
0000D878                            SStom_Display:	; Routine 6
0000D878 6100 0000                  		bsr.w	DisplaySprite
0000D87C                            
0000D87C                            SStom_ChkDel:
0000D89A 4E75                       		rts	
0000D89C                            
0000D89C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D89C                            
0000D89C                            
0000D89C                            SStom_Move:
0000D89C 7000                       		moveq	#0,d0
0000D89E 1028 0028                  		move.b	obSubtype(a0),d0
0000D8A2 D040                       		add.w	d0,d0
0000D8A4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000D8A8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000D8AC                            ; End of function SStom_Move
0000D8AC                            
0000D8AC                            ; ===========================================================================
0000D8AC                            		; This indicates only two subtypes... that do the same thing
0000D8AC                            		; Compare to SStom_Len. This breaks subtype 02
0000D8AC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000D8AE 0000                       		dc.w loc_BADA-off_BAD6
0000D8B0                            ; ===========================================================================
0000D8B0                            
0000D8B0                            loc_BADA:
0000D8B0 4A68 0036                  		tst.w	$36(a0)
0000D8B4 6700                       		beq.s	loc_BB08
0000D8B6 4A68 0038                  		tst.w	$38(a0)
0000D8BA 6700                       		beq.s	loc_BAEC
0000D8BC 5368 0038                  		subq.w	#1,$38(a0)
0000D8C0 6000                       		bra.s	loc_BB3C
0000D8C2                            ; ===========================================================================
0000D8C2                            
0000D8C2                            loc_BAEC:
0000D8C2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000D8C8 6400                       		bcc.s	loc_BB3C
0000D8CA 317C 0000 0032             		move.w	#0,$32(a0)
0000D8D0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D8D6 317C 0000 0036             		move.w	#0,$36(a0)
0000D8DC 6000                       		bra.s	loc_BB3C
0000D8DE                            ; ===========================================================================
0000D8DE                            
0000D8DE                            loc_BB08:
0000D8DE 3228 0034                  		move.w	$34(a0),d1
0000D8E2 B268 0032                  		cmp.w	$32(a0),d1
0000D8E6 6700                       		beq.s	loc_BB3C
0000D8E8 3028 0010                  		move.w	obVelX(a0),d0
0000D8EC 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000D8F2 D168 0032                  		add.w	d0,$32(a0)
0000D8F6 B268 0032                  		cmp.w	$32(a0),d1
0000D8FA 6200                       		bhi.s	loc_BB3C
0000D8FC 3141 0032                  		move.w	d1,$32(a0)
0000D900 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D906 317C 0001 0036             		move.w	#1,$36(a0)
0000D90C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000D912                            
0000D912                            loc_BB3C:
0000D912 7000                       		moveq	#0,d0
0000D914 1028 0032                  		move.b	$32(a0),d0
0000D918 4440                       		neg.w	d0
0000D91A D068 0030                  		add.w	$30(a0),d0
0000D91E 3140 0008                  		move.w	d0,obX(a0)
0000D922 4E75                       		rts	
0000D922 4E75                       		rts	
0000D924                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000D924                            ; ---------------------------------------------------------------------------
0000D924                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000D924                            ; ---------------------------------------------------------------------------
0000D924                            Map_CStom_internal:
0000D924 0000                       		dc.w @wideblock-Map_CStom_internal
0000D926 0000                       		dc.w @spikes-Map_CStom_internal
0000D928 0000                       		dc.w @ceiling-Map_CStom_internal
0000D92A 0000                       		dc.w @chain1-Map_CStom_internal
0000D92C 0000                       		dc.w @chain2-Map_CStom_internal
0000D92E 0000                       		dc.w @chain3-Map_CStom_internal
0000D930 0000                       		dc.w @chain4-Map_CStom_internal
0000D932 0000                       		dc.w @chain5-Map_CStom_internal
0000D934 0000                       		dc.w @chain5-Map_CStom_internal
0000D936 0000                       		dc.w @mediumblock-Map_CStom_internal
0000D938 0000                       		dc.w @smallblock-Map_CStom_internal
0000D93A 05                         @wideblock:	dc.b 5
0000D93B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000D940 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000D945 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000D94A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000D94F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000D954 05                         @spikes:	dc.b 5
0000D955 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000D95A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000D95F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000D964 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000D969 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000D96E 01                         @ceiling:	dc.b 1
0000D96F DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000D974 02                         @chain1:	dc.b 2
0000D975 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D97A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D97F 04                         @chain2:	dc.b 4
0000D980 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D985 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D98A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D98F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D994 06                         @chain3:	dc.b 6
0000D995 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D99A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D99F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9A4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D9A9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9AE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9B3 08                         @chain4:	dc.b 8
0000D9B4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D9B9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D9BE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D9C3 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D9C8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000D9CD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000D9D2 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000D9D7 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000D9DC 0A                         @chain5:	dc.b $A
0000D9DD 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000D9E2 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000D9E7 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000D9EC B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000D9F1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000D9F6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000D9FB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DA00 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DA05 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DA0A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DA0F 05                         @mediumblock:	dc.b 5
0000DA10 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DA15 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DA1A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DA1F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DA24 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DA29 01                         @smallblock:	dc.b 1
0000DA2A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DA30 00                         		even
0000DA30 00                         		even
0000DA30                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DA30                            ; ---------------------------------------------------------------------------
0000DA30                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DA30                            ; ---------------------------------------------------------------------------
0000DA30                            Map_SStom_internal:
0000DA30 0000                       		dc.w @block-Map_SStom_internal
0000DA32 0000                       		dc.w @spikes-Map_SStom_internal
0000DA34 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DA36 0000                       		dc.w @pole1-Map_SStom_internal
0000DA38 0000                       		dc.w @pole2-Map_SStom_internal
0000DA3A 0000                       		dc.w @pole3-Map_SStom_internal
0000DA3C 0000                       		dc.w @pole4-Map_SStom_internal
0000DA3E 0000                       		dc.w @pole5-Map_SStom_internal
0000DA40 0000                       		dc.w @pole5-Map_SStom_internal
0000DA42 03                         @block:		dc.b 3
0000DA43 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DA48 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DA4D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DA52 03                         @spikes:	dc.b 3
0000DA53 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DA58 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DA5D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DA62 01                         @wallbracket:	dc.b 1
0000DA63 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DA68 02                         @pole1:		dc.b 2
0000DA69 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DA6E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA73 04                         @pole2:		dc.b 4
0000DA74 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA79 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA7E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA83 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DA88 06                         @pole3:		dc.b 6
0000DA89 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DA8E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DA93 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DA98 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DA9D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DAA2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAA7 08                         @pole4:		dc.b 8
0000DAA8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DAAD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DAB2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DAB7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DABC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DAC1 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAC6 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DACB F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DAD0 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000DAD1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DAD6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DADB F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DAE0 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DAE5 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DAEA F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DAEF F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DAF4 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000DAF9 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000DAFE F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000DB03                            		; @pole6 should be here, but it isn't...
0000DB04 00                         		even
0000DB04 00                         		even
0000DB04                            
0000DB04                            		include	"_incObj\32 Button.asm"
0000DB04                            ; ---------------------------------------------------------------------------
0000DB04                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000DB04                            ; ---------------------------------------------------------------------------
0000DB04                            
0000DB04                            Button:
0000DB04 7000                       		moveq	#0,d0
0000DB06 1028 0024                  		move.b	obRoutine(a0),d0
0000DB0A 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000DB0E 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000DB12                            ; ===========================================================================
0000DB12 0000                       But_Index:	dc.w But_Main-But_Index
0000DB14 0000                       		dc.w But_Pressed-But_Index
0000DB16                            ; ===========================================================================
0000DB16                            
0000DB16                            But_Main:	; Routine 0
0000DB16 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DB1A 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000DB22 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000DB28 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000DB2E 6700                       		beq.s	But_IsMZ	; if yes, branch
0000DB30                            
0000DB30 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000DB36                            
0000DB36                            	But_IsMZ:
0000DB36 117C 0004 0001             		move.b	#4,obRender(a0)
0000DB3C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DB42 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000DB48 5668 000C                  		addq.w	#3,obY(a0)
0000DB4C                            
0000DB4C                            But_Pressed:	; Routine 2
0000DB4C 4A28 0001                  		tst.b	obRender(a0)
0000DB50 6A00                       		bpl.s	But_Display
0000DB52 323C 001B                  		move.w	#$1B,d1
0000DB56 343C 0005                  		move.w	#5,d2
0000DB5A 363C 0005                  		move.w	#5,d3
0000DB5E 3828 0008                  		move.w	obX(a0),d4
0000DB62 6100 0000                  		bsr.w	SolidObject
0000DB66 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000DB6C 1028 0028                  		move.b	obSubtype(a0),d0
0000DB70 0240 000F                  		andi.w	#$F,d0
0000DB74 47F8 F7E0                  		lea	(f_switch).w,a3
0000DB78 47F3 0000                  		lea	(a3,d0.w),a3
0000DB7C 7600                       		moveq	#0,d3
0000DB7E 0828 0006 0028             		btst	#6,obSubtype(a0)
0000DB84 6700                       		beq.s	loc_BDB2
0000DB86 7607                       		moveq	#7,d3
0000DB88                            
0000DB88                            loc_BDB2:
0000DB88 4A28 0028                  		tst.b	obSubtype(a0)
0000DB8C 6A00                       		bpl.s	loc_BDBE
0000DB8E 6100 0000                  		bsr.w	But_MZBlock
0000DB92 6600                       		bne.s	loc_BDC8
0000DB94                            
0000DB94                            loc_BDBE:
0000DB94 4A28 0025                  		tst.b	ob2ndRout(a0)
0000DB98 6600                       		bne.s	loc_BDC8
0000DB9A 0793                       		bclr	d3,(a3)
0000DB9C 6000                       		bra.s	loc_BDDE
0000DB9E                            ; ===========================================================================
0000DB9E                            
0000DB9E                            loc_BDC8:
0000DB9E 4A13                       		tst.b	(a3)
0000DBA0 6600                       		bne.s	loc_BDD6
0000DBAC                            
0000DBAC                            loc_BDD6:
0000DBAC 07D3                       		bset	d3,(a3)
0000DBAE 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000DBB4                            
0000DBB4                            loc_BDDE:
0000DBB4 0828 0005 0028             		btst	#5,obSubtype(a0)
0000DBBA 6700                       		beq.s	But_Display
0000DBBC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000DBC0 6A00                       		bpl.s	But_Display
0000DBC2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000DBC8 0868 0001 001A             		bchg	#1,obFrame(a0)
0000DBCE                            
0000DBCE                            But_Display:
0000DBCE 6100 0000                  		bsr.w	DisplaySprite
0000DBF0 4E75                       		rts	
0000DBF2                            ; ===========================================================================
0000DBF2                            
0000DBF2                            But_Delete:
0000DBF2 6100 0000                  		bsr.w	DeleteObject
0000DBF6 4E75                       		rts	
0000DBF8                            
0000DBF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBF8                            
0000DBF8                            
0000DBF8                            But_MZBlock:
0000DBF8 3F03                       		move.w	d3,-(sp)
0000DBFA 3428 0008                  		move.w	obX(a0),d2
0000DBFE 3628 000C                  		move.w	obY(a0),d3
0000DC02 0442 0010                  		subi.w	#$10,d2
0000DC06 5143                       		subq.w	#8,d3
0000DC08 383C 0020                  		move.w	#$20,d4
0000DC0C 3A3C 0010                  		move.w	#$10,d5
0000DC10 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000DC14 3C3C 005F                  		move.w	#$5F,d6
0000DC18                            
0000DC18                            But_MZLoop:
0000DC18 4A29 0001                  		tst.b	obRender(a1)
0000DC1C 6A00                       		bpl.s	loc_BE4E
0000DC1E 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000DC22 6700                       		beq.s	loc_BE5E	; if yes, branch
0000DC24                            
0000DC24                            loc_BE4E:
0000DC24 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000DC28 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000DC2C                            
0000DC2C 361F                       		move.w	(sp)+,d3
0000DC2E 7000                       		moveq	#0,d0
0000DC30                            
0000DC30                            locret_BE5A:
0000DC30 4E75                       		rts	
0000DC32                            ; ===========================================================================
0000DC32 1010                       But_MZData:	dc.b $10, $10
0000DC34                            ; ===========================================================================
0000DC34                            
0000DC34                            loc_BE5E:
0000DC34 7001                       		moveq	#1,d0
0000DC36 0240 003F                  		andi.w	#$3F,d0
0000DC3A D040                       		add.w	d0,d0
0000DC3C 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000DC40 121A                       		move.b	(a2)+,d1
0000DC42 4881                       		ext.w	d1
0000DC44 3029 0008                  		move.w	obX(a1),d0
0000DC48 9041                       		sub.w	d1,d0
0000DC4A 9042                       		sub.w	d2,d0
0000DC4C 6400                       		bcc.s	loc_BE80
0000DC4E D241                       		add.w	d1,d1
0000DC50 D041                       		add.w	d1,d0
0000DC52 6500                       		bcs.s	loc_BE84
0000DC54 60CE                       		bra.s	loc_BE4E
0000DC56                            ; ===========================================================================
0000DC56                            
0000DC56                            loc_BE80:
0000DC56 B044                       		cmp.w	d4,d0
0000DC58 62CA                       		bhi.s	loc_BE4E
0000DC5A                            
0000DC5A                            loc_BE84:
0000DC5A 121A                       		move.b	(a2)+,d1
0000DC5C 4881                       		ext.w	d1
0000DC5E 3029 000C                  		move.w	obY(a1),d0
0000DC62 9041                       		sub.w	d1,d0
0000DC64 9043                       		sub.w	d3,d0
0000DC66 6400                       		bcc.s	loc_BE9A
0000DC68 D241                       		add.w	d1,d1
0000DC6A D041                       		add.w	d1,d0
0000DC6C 6500                       		bcs.s	loc_BE9E
0000DC6E 60B4                       		bra.s	loc_BE4E
0000DC70                            ; ===========================================================================
0000DC70                            
0000DC70                            loc_BE9A:
0000DC70 B045                       		cmp.w	d5,d0
0000DC72 62B0                       		bhi.s	loc_BE4E
0000DC74                            
0000DC74                            loc_BE9E:
0000DC74 361F                       		move.w	(sp)+,d3
0000DC76 7001                       		moveq	#1,d0
0000DC78 4E75                       		rts	
0000DC7A                            ; End of function But_MZBlock
0000DC7A                            ; End of function But_MZBlock
0000DC7A                            Map_But:	include	"_maps\Button.asm"
0000DC7A                            ; ---------------------------------------------------------------------------
0000DC7A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000DC7A                            ; ---------------------------------------------------------------------------
0000DC7A                            Map_But_internal:
0000DC7A 0000                       		dc.w byte_BEAC-Map_But_internal
0000DC7C 0000                       		dc.w byte_BEB7-Map_But_internal
0000DC7E 0000                       		dc.w byte_BEC2-Map_But_internal
0000DC80 0000                       		dc.w byte_BEB7-Map_But_internal
0000DC82 02                         byte_BEAC:	dc.b 2
0000DC83 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000DC88 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000DC8D 02                         byte_BEB7:	dc.b 2
0000DC8E F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000DC93 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000DC98 02                         byte_BEC2:	dc.b 2
0000DC99 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000DC9E F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000DCA3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DCA8                            		even
0000DCA8                            		even
0000DCA8                            
0000DCA8                            		include	"_incObj\33 Pushable Blocks.asm"
0000DCA8                            ; ---------------------------------------------------------------------------
0000DCA8                            ; Object 33 - pushable blocks (MZ, LZ)
0000DCA8                            ; ---------------------------------------------------------------------------
0000DCA8                            
0000DCA8                            PushBlock:
0000DCA8 7000                       		moveq	#0,d0
0000DCAA 1028 0024                  		move.b	obRoutine(a0),d0
0000DCAE 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000DCB2 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000DCB6                            ; ===========================================================================
0000DCB6 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000DCB8 0000                       		dc.w loc_BF6E-PushB_Index
0000DCBA 0000                       		dc.w loc_C02C-PushB_Index
0000DCBC                            
0000DCBC 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000DCBE 4001                       		dc.b $40, 1
0000DCC0                            ; ===========================================================================
0000DCC0                            
0000DCC0                            PushB_Main:	; Routine 0
0000DCC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000DCC4 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000DCCA 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000DCD0 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000DCD8 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000DCDE 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000DCE4 6600                       		bne.s	@notLZ
0000DCE6 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000DCEC                            
0000DCEC                            	@notLZ:
0000DCEC 117C 0004 0001             		move.b	#4,obRender(a0)
0000DCF2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000DCF8 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000DCFE 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000DD04 7000                       		moveq	#0,d0
0000DD06 1028 0028                  		move.b	obSubtype(a0),d0
0000DD0A D040                       		add.w	d0,d0
0000DD0C 0240 000E                  		andi.w	#$E,d0
0000DD10 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000DD14 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DD18 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DD1C 4A28 0028                  		tst.b	obSubtype(a0)
0000DD20 6700                       		beq.s	@chkgone
0000DD22 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000DD28                            
0000DD28                            	@chkgone:
0000DD28 45F8 FC00                  		lea	(v_objstate).w,a2
0000DD2C 7000                       		moveq	#0,d0
0000DD2E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DD32 6700                       		beq.s	loc_BF6E
0000DD34 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000DD3A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000DD40 6600 0000                  		bne.w	DeleteObject
0000DD44                            
0000DD44                            loc_BF6E:	; Routine 2
0000DD44 4A28 0032                  		tst.b	$32(a0)
0000DD48 6600 0000                  		bne.w	loc_C046
0000DD4C 7200                       		moveq	#0,d1
0000DD4E 1228 0014                  		move.b	obActWid(a0),d1
0000DD52 0641 000B                  		addi.w	#$B,d1
0000DD56 343C 0010                  		move.w	#$10,d2
0000DD5A 363C 0011                  		move.w	#$11,d3
0000DD5E 3828 0008                  		move.w	obX(a0),d4
0000DD62 6100 0000                  		bsr.w	loc_C186
0000DD66 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000DD6C 6600                       		bne.s	loc_BFC6	; if not, branch
0000DD6E 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000DD74 3028 0008                  		move.w	obX(a0),d0
0000DD78 0C40 0A20                  		cmpi.w	#$A20,d0
0000DD7C 6500                       		bcs.s	loc_BFC6
0000DD7E 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000DD82 6400                       		bcc.s	loc_BFC6
0000DD84 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000DD88 0440 001C                  		subi.w	#$1C,d0
0000DD8C 3140 000C                  		move.w	d0,obY(a0)
0000DD90 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000DD96 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000DD9C                            
0000DD9C                            	loc_BFC6:
0000DDB8 6000 0000                  		bra.w	DisplaySprite
0000DDBC                            ; ===========================================================================
0000DDBC                            
0000DDBC                            loc_ppppp:
0000DDD8 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000DDDE 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000DDE4 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000DDEA 6000                       		bra.s	loc_C02C
0000DDEC                            ; ===========================================================================
0000DDEC                            
0000DDEC                            loc_C016:
0000DDEC 45F8 FC00                  		lea	(v_objstate).w,a2
0000DDF0 7000                       		moveq	#0,d0
0000DDF2 1028 0023                  		move.b	obRespawnNo(a0),d0
0000DDF6 6700                       		beq.s	loc_C028
0000DDF8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000DDFE                            
0000DDFE                            loc_C028:
0000DDFE 6000 0000                  		bra.w	DeleteObject
0000DE02                            ; ===========================================================================
0000DE02                            
0000DE02                            loc_C02C:	; Routine 4
0000DE02 6100 0000                  		bsr.w	ChkPartiallyVisible
0000DE06 6700                       		beq.s	locret_C044
0000DE08 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000DE0E 4228 0032                  		clr.b	$32(a0)
0000DE12 4268 0010                  		clr.w	obVelX(a0)
0000DE16 4268 0012                  		clr.w	obVelY(a0)
0000DE1A                            
0000DE1A                            locret_C044:
0000DE1A 4E75                       		rts	
0000DE1C                            ; ===========================================================================
0000DE1C                            
0000DE1C                            loc_C046:
0000DE1C 3F28 0008                  		move.w	obX(a0),-(sp)
0000DE20 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000DE26 6400                       		bcc.s	loc_C056
0000DE28 6100 0000                  		bsr.w	SpeedToPos
0000DE2C                            
0000DE2C                            loc_C056:
0000DE2C 0828 0001 0022             		btst	#1,obStatus(a0)
0000DE32 6700                       		beq.s	loc_C0A0
0000DE34 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DE3A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DE40 4A41                       		tst.w	d1
0000DE42 6A00 0000                  		bpl.w	loc_C09E
0000DE46 D368 000C                  		add.w	d1,obY(a0)
0000DE4A 4268 0012                  		clr.w	obVelY(a0)
0000DE4E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000DE54 3011                       		move.w	(a1),d0
0000DE56 0240 03FF                  		andi.w	#$3FF,d0
0000DE5A 0C40 016A                  		cmpi.w	#$16A,d0
0000DE5E 6500                       		bcs.s	loc_C09E
0000DE60 3028 0030                  		move.w	$30(a0),d0
0000DE64 E640                       		asr.w	#3,d0
0000DE66 3140 0010                  		move.w	d0,obVelX(a0)
0000DE6A 117C 0001 0032             		move.b	#1,$32(a0)
0000DE70 4268 000E                  		clr.w	$E(a0)
0000DE74                            
0000DE74                            loc_C09E:
0000DE74 6000                       		bra.s	loc_C0E6
0000DE76                            ; ===========================================================================
0000DE76                            
0000DE76                            loc_C0A0:
0000DE76 4A68 0010                  		tst.w	obVelX(a0)
0000DE7A 6700 0000                  		beq.w	loc_C0D6
0000DE7E 6B00                       		bmi.s	loc_C0BC
0000DE80 7600                       		moveq	#0,d3
0000DE82 1628 0014                  		move.b	obActWid(a0),d3
0000DE86 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000DE8C 4A41                       		tst.w	d1		; has block touched a wall?
0000DE8E 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DE90 6000                       		bra.s	loc_C0E6
0000DE92                            ; ===========================================================================
0000DE92                            
0000DE92                            loc_C0BC:
0000DE92 7600                       		moveq	#0,d3
0000DE94 1628 0014                  		move.b	obActWid(a0),d3
0000DE98 4643                       		not.w	d3
0000DE9A 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000DEA0 4A41                       		tst.w	d1		; has block touched a wall?
0000DEA2 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000DEA4 6000                       		bra.s	loc_C0E6
0000DEA6                            ; ===========================================================================
0000DEA6                            
0000DEA6                            PushB_StopPush:
0000DEA6 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000DEAA 6000                       		bra.s	loc_C0E6
0000DEAC                            ; ===========================================================================
0000DEAC                            
0000DEAC                            loc_C0D6:
0000DEAC 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000DEB4 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000DEBA 6400                       		bcc.s	loc_C104
0000DEBC                            
0000DEBC                            loc_C0E6:
0000DEBC 7200                       		moveq	#0,d1
0000DEBE 1228 0014                  		move.b	obActWid(a0),d1
0000DEC2 0641 000B                  		addi.w	#$B,d1
0000DEC6 343C 0010                  		move.w	#$10,d2
0000DECA 363C 0011                  		move.w	#$11,d3
0000DECE 381F                       		move.w	(sp)+,d4
0000DED0 6100 0000                  		bsr.w	loc_C186
0000DED4 6100                       		bsr.s	PushB_ChkLava
0000DED6 6000 FEC4                  		bra.w	loc_BFC6
0000DEDA                            ; ===========================================================================
0000DEDA                            
0000DEDA                            loc_C104:
0000DEDA 381F                       		move.w	(sp)+,d4
0000DEDC 43F8 D000                  		lea	(v_player).w,a1
0000DEE0 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000DEE6 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000DEEC 6000 FECE                  		bra.w	loc_ppppp
0000DEF0                            ; ===========================================================================
0000DEF0                            
0000DEF0                            PushB_ChkLava:
0000DEF0 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000DEF6 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000DEF8 343C FFE0                  		move.w	#-$20,d2
0000DEFC 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000DF02 6700                       		beq.s	PushB_LoadLava
0000DF04 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000DF0A 6700                       		beq.s	PushB_LoadLava
0000DF0C 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000DF12 6700                       		beq.s	PushB_LoadLava
0000DF14 4E75                       		rts	
0000DF16                            ; ===========================================================================
0000DF16                            
0000DF16                            PushB_ChkLava2:
0000DF16 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000DF1C 6600                       		bne.s	PushB_NoLava	; if not, branch
0000DF1E 343C 0020                  		move.w	#$20,d2
0000DF22 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000DF28 6700                       		beq.s	PushB_LoadLava
0000DF2A 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000DF30 6700                       		beq.s	PushB_LoadLava
0000DF32                            
0000DF32                            PushB_NoLava:
0000DF32 4E75                       		rts	
0000DF34                            ; ===========================================================================
0000DF34                            
0000DF34                            PushB_LoadLava:
0000DF34 6100 0000                  		bsr.w	FindFreeObj
0000DF38 6600                       		bne.s	locret_C184
0000DF3A 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000DF3E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DF44 D569 0008                  		add.w	d2,obX(a1)
0000DF48 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DF4E 0669 0010 000C             		addi.w	#$10,obY(a1)
0000DF54 2348 003C                  		move.l	a0,$3C(a1)
0000DF58                            
0000DF58                            locret_C184:
0000DF58 4E75                       		rts	
0000DF5A                            ; ===========================================================================
0000DF5A                            
0000DF5A                            loc_C186:
0000DF5A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000DF5E 6700 0000                  		beq.w	loc_C218
0000DF62 5500                       		subq.b	#2,d0
0000DF64 6600                       		bne.s	loc_C1AA
0000DF66 6100 AD08                  		bsr.w	ExitPlatform
0000DF6A 0829 0003 0022             		btst	#3,obStatus(a1)
0000DF70 6600                       		bne.s	loc_C1A4
0000DF72 4228 0025                  		clr.b	ob2ndRout(a0)
0000DF76 4E75                       		rts	
0000DF78                            ; ===========================================================================
0000DF78                            
0000DF78                            loc_C1A4:
0000DF78 3404                       		move.w	d4,d2
0000DF7A 6000 B252                  		bra.w	MvSonicOnPtfm
0000DF7E                            ; ===========================================================================
0000DF7E                            
0000DF7E                            loc_C1AA:
0000DF7E 5500                       		subq.b	#2,d0
0000DF80 6600                       		bne.s	loc_C1F2
0000DF82 6100 0000                  		bsr.w	SpeedToPos
0000DF86 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000DF8C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000DF92 4A41                       		tst.w	d1
0000DF94 6A00 0000                  		bpl.w	locret_C1F0
0000DF98 D368 000C                  		add.w	d1,obY(a0)
0000DF9C 4268 0012                  		clr.w	obVelY(a0)
0000DFA0 4228 0025                  		clr.b	ob2ndRout(a0)
0000DFA4 3011                       		move.w	(a1),d0
0000DFA6 0240 03FF                  		andi.w	#$3FF,d0
0000DFAA 0C40 016A                  		cmpi.w	#$16A,d0
0000DFAE 6500                       		bcs.s	locret_C1F0
0000DFB0 3028 0030                  		move.w	$30(a0),d0
0000DFB4 E640                       		asr.w	#3,d0
0000DFB6 3140 0010                  		move.w	d0,obVelX(a0)
0000DFBA 117C 0001 0032             		move.b	#1,$32(a0)
0000DFC0 4268 000E                  		clr.w	obY+2(a0)
0000DFC4                            
0000DFC4                            locret_C1F0:
0000DFC4 4E75                       		rts	
0000DFC6                            ; ===========================================================================
0000DFC6                            
0000DFC6                            loc_C1F2:
0000DFC6 6100 0000                  		bsr.w	SpeedToPos
0000DFCA 3028 0008                  		move.w	obX(a0),d0
0000DFCE 0240 000C                  		andi.w	#$C,d0
0000DFD2 6600 0000                  		bne.w	locret_C2E4
0000DFD6 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000DFDC 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000DFE2 4268 0010                  		clr.w	obVelX(a0)
0000DFE6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000DFEA 4E75                       		rts	
0000DFEC                            ; ===========================================================================
0000DFEC                            
0000DFEC                            loc_C218:
0000DFEC 6100 0000                  		bsr.w	Solid_ChkEnter
0000DFF0 4A44                       		tst.w	d4
0000DFF2 6700 0000                  		beq.w	locret_C2E4
0000DFF6 6B00 0000                  		bmi.w	locret_C2E4
0000DFFA 4A28 0032                  		tst.b	$32(a0)
0000DFFE 6700                       		beq.s	loc_C230
0000E000 6000 0000                  		bra.w	locret_C2E4
0000E004                            ; ===========================================================================
0000E004                            
0000E004                            loc_C230:
0000E004 4A40                       		tst.w	d0
0000E006 6700 0000                  		beq.w	locret_C2E4
0000E00A 6B00                       		bmi.s	loc_C268
0000E00C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E012 6600 0000                  		bne.w	locret_C2E4
0000E016 3F00                       		move.w	d0,-(sp)
0000E018 7600                       		moveq	#0,d3
0000E01A 1628 0014                  		move.b	obActWid(a0),d3
0000E01E 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E024 301F                       		move.w	(sp)+,d0
0000E026 4A41                       		tst.w	d1
0000E028 6B00 0000                  		bmi.w	locret_C2E4
0000E02C 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E034 7001                       		moveq	#1,d0
0000E036 323C 0040                  		move.w	#$40,d1
0000E03A 6000                       		bra.s	loc_C294
0000E03C                            ; ===========================================================================
0000E03C                            
0000E03C                            loc_C268:
0000E03C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E042 6700                       		beq.s	locret_C2E4
0000E044 3F00                       		move.w	d0,-(sp)
0000E046 7600                       		moveq	#0,d3
0000E048 1628 0014                  		move.b	obActWid(a0),d3
0000E04C 4643                       		not.w	d3
0000E04E 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E054 301F                       		move.w	(sp)+,d0
0000E056 4A41                       		tst.w	d1
0000E058 6B00                       		bmi.s	locret_C2E4
0000E05A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E062 70FF                       		moveq	#-1,d0
0000E064 323C FFC0                  		move.w	#-$40,d1
0000E068                            
0000E068                            loc_C294:
0000E068 43F8 D000                  		lea	(v_player).w,a1
0000E06C D169 0008                  		add.w	d0,obX(a1)
0000E070 3341 0020                  		move.w	d1,obInertia(a1)
0000E074 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E07A 3F00                       		move.w	d0,-(sp)
0000E086 301F                       		move.w	(sp)+,d0
0000E088 4A28 0028                  		tst.b	obSubtype(a0)
0000E08C 6B00                       		bmi.s	locret_C2E4
0000E08E 3F00                       		move.w	d0,-(sp)
0000E090 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E096 301F                       		move.w	(sp)+,d0
0000E098 0C41 0004                  		cmpi.w	#4,d1
0000E09C 6F00                       		ble.s	loc_C2E0
0000E09E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E0A4 4A40                       		tst.w	d0
0000E0A6 6A00                       		bpl.s	loc_C2D8
0000E0A8 4468 0010                  		neg.w	obVelX(a0)
0000E0AC                            
0000E0AC                            loc_C2D8:
0000E0AC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E0B2 6000                       		bra.s	locret_C2E4
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            loc_C2E0:
0000E0B4 D368 000C                  		add.w	d1,obY(a0)
0000E0B8                            
0000E0B8                            locret_C2E4:
0000E0B8 4E75                       		rts	
0000E0B8 4E75                       		rts	
0000E0BA                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E0BA                            ; ---------------------------------------------------------------------------
0000E0BA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E0BA                            ; ---------------------------------------------------------------------------
0000E0BA                            Map_Push_internal:
0000E0BA 0000                       		dc.w @single-Map_Push_internal
0000E0BC 0000                       		dc.w @four-Map_Push_internal
0000E0BE 01                         @single:	dc.b 1
0000E0BF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E0C4 04                         @four:		dc.b 4
0000E0C5 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E0CA F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E0CF F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E0D4 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E0DA 00                         		even
0000E0DA 00                         		even
0000E0DA                            
0000E0DA                            		include	"_incObj\34 Title Cards.asm"
0000E0DA                            ; ---------------------------------------------------------------------------
0000E0DA                            ; Object 34 - zone title cards
0000E0DA                            ; ---------------------------------------------------------------------------
0000E0DA                            
0000E0DA                            TitleCard:
0000E0DA 7000                       		moveq	#0,d0
0000E0DC 1028 0024                  		move.b	obRoutine(a0),d0
0000E0E0 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E0E4 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E0E8                            ; ===========================================================================
0000E0E8 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E0EA 0000                       		dc.w Card_ChkPos-Card_Index
0000E0EC 0000                       		dc.w Card_Wait-Card_Index
0000E0EE 0000                       		dc.w Card_Wait-Card_Index
0000E0F0                            
0000E0F0 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E0F0 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E0F0                            ; ===========================================================================
0000E0F0                            
0000E0F0                            Card_CheckSBZ3:	; Routine 0
0000E0F0 2248                       		movea.l	a0,a1
0000E0F2 7000                       		moveq	#0,d0
0000E0F4 1038 FE10                  		move.b	(v_zone).w,d0
0000E0F8 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E0FE 6600                       		bne.s	Card_CheckFZ
0000E100 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E102                            
0000E102                            	Card_CheckFZ:
0000E102 3400                       		move.w	d0,d2
0000E104 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E10A 6600                       		bne.s	Card_LoadConfig
0000E10C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E10E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E110                            
0000E110                            	Card_LoadConfig:
0000E110 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E116 E948                       		lsl.w	#4,d0
0000E118 D6C0                       		adda.w	d0,a3
0000E11A 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E120 7203                       		moveq	#3,d1
0000E122                            
0000E122                            Card_Loop:
0000E122 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E126 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E12A 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E12E 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E132 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E136 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E13A 101A                       		move.b	(a2)+,d0
0000E13C 6600                       		bne.s	Card_ActNumber
0000E13E 1002                       		move.b	d2,d0
0000E140                            
0000E140                            	Card_ActNumber:
0000E140 0C00 0007                  		cmpi.b	#7,d0
0000E144 6600                       		bne.s	Card_MakeSprite
0000E146 D038 FE11                  		add.b	(v_act).w,d0
0000E14A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E150 6600                       		bne.s	Card_MakeSprite
0000E152 5300                       		subq.b	#1,d0
0000E154                            
0000E154                            	Card_MakeSprite:
0000E154 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E158 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E160 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E166 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E16C 137C 0000 0001             		move.b	#0,obRender(a1)
0000E172 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E178 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E17E 43E9 0040                  		lea	$40(a1),a1	; next object
0000E182 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E186                            
0000E186                            Card_ChkPos:	; Routine 2
0000E186 7210                       		moveq	#$10,d1		; set horizontal speed
0000E188 3028 0030                  		move.w	card_mainX(a0),d0
0000E18C B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E190 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E192 6C00                       		bge.s	Card_Move
0000E194 4441                       		neg.w	d1
0000E196                            
0000E196                            Card_Move:
0000E196 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E19A                            
0000E19A                            Card_NoMove:
0000E19A 3028 0008                  		move.w	obX(a0),d0
0000E19E 6B00                       		bmi.s	locret_C3D8
0000E1A0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E1A4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E1A6 6000 0000                  		bra.w	DisplaySprite
0000E1AA                            ; ===========================================================================
0000E1AA                            
0000E1AA                            locret_C3D8:
0000E1AA 4E75                       		rts	
0000E1AC                            ; ===========================================================================
0000E1AC                            
0000E1AC                            Card_Wait:	; Routine 4/6
0000E1AC 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E1B0 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E1B2 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E1B6 6000 0000                  		bra.w	DisplaySprite
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            Card_ChkPos2:
0000E1BA 4A28 0001                  		tst.b	obRender(a0)
0000E1BE 6A00                       		bpl.s	Card_ChangeArt
0000E1C0 7220                       		moveq	#$20,d1
0000E1C2 3028 0032                  		move.w	card_finalX(a0),d0
0000E1C6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E1CA 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E1CC 6C00                       		bge.s	Card_Move2
0000E1CE 4441                       		neg.w	d1
0000E1D0                            
0000E1D0                            Card_Move2:
0000E1D0 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E1D4 3028 0008                  		move.w	obX(a0),d0
0000E1D8 6B00                       		bmi.s	locret_C412
0000E1DA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E1DE 6400                       		bcc.s	locret_C412	; if yes, branch
0000E1E0 6000 0000                  		bra.w	DisplaySprite
0000E1E4                            ; ===========================================================================
0000E1E4                            
0000E1E4                            locret_C412:
0000E1E4 4E75                       		rts	
0000E1E6                            ; ===========================================================================
0000E1E6                            
0000E1E6                            Card_ChangeArt:
0000E1E6 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E1EC 6600                       		bne.s	Card_Delete
0000E1EE 7000                       		moveq	#plcid_Explode,d0
0000E1F0 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E1F6 7000                       		moveq	#0,d0
0000E1F8 1038 FE10                  		move.b	(v_zone).w,d0
0000E1FC 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E200 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E206                            
0000E206                            Card_Delete:
0000E206 6000 0000                  		bra.w	DeleteObject
0000E20A                            ; ===========================================================================
0000E20A 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E20C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E20E 00E4                       		dc.w $E4
0000E210 0206                       		dc.b 2,	6
0000E212 00EA                       		dc.w $EA
0000E214 0207                       		dc.b 2,	7
0000E216 00E0                       		dc.w $E0
0000E218 020A                       		dc.b 2,	$A
0000E21A                            ; ---------------------------------------------------------------------------
0000E21A                            ; Title	card configuration data
0000E21A                            ; Format:
0000E21A                            ; 4 bytes per item (YYYY XXXX)
0000E21A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E21A                            ; ---------------------------------------------------------------------------
0000E21A 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E22A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E23A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E24A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E25A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E26A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E27A 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E28A                            ; ===========================================================================
0000E28A                            ; ===========================================================================
0000E28A                            		include	"_incObj\39 Game Over.asm"
0000E28A                            ; ---------------------------------------------------------------------------
0000E28A                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E28A                            ; ---------------------------------------------------------------------------
0000E28A                            
0000E28A                            GameOverCard:
0000E28A 7000                       		moveq	#0,d0
0000E28C 1028 0024                  		move.b	obRoutine(a0),d0
0000E290 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E294 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E298                            ; ===========================================================================
0000E298 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E29A 0000                       		dc.w Over_Move-Over_Index
0000E29C 0000                       		dc.w Over_Wait-Over_Index
0000E29E                            ; ===========================================================================
0000E29E                            
0000E29E                            Over_ChkPLC:	; Routine 0
0000E29E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E2A2 6700                       		beq.s	Over_Main	; if yes, branch
0000E2A4 4E75                       		rts	
0000E2A6                            ; ===========================================================================
0000E2A6                            
0000E2A6                            Over_Main:
0000E2A6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2AA 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E2B0 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E2B6 6700                       		beq.s	Over_1stWord	; if not, branch
0000E2B8 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E2BE                            
0000E2BE                            	Over_1stWord:
0000E2BE 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E2C4 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E2CC 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E2D2 117C 0000 0001             		move.b	#0,obRender(a0)
0000E2D8 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E2DE                            
0000E2DE                            Over_Move:	; Routine 2
0000E2DE 7210                       		moveq	#$10,d1		; set horizontal speed
0000E2E0 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E2E6 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E2E8 6500                       		bcs.s	Over_UpdatePos
0000E2EA 4441                       		neg.w	d1
0000E2EC                            
0000E2EC                            	Over_UpdatePos:
0000E2EC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E2F0 6000 0000                  		bra.w	DisplaySprite
0000E2F4                            ; ===========================================================================
0000E2F4                            
0000E2F4                            Over_SetWait:
0000E2F4 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E2FA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2FE 4E75                       		rts	
0000E300                            ; ===========================================================================
0000E300                            
0000E300                            Over_Wait:	; Routine 4
0000E300 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E304 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E308 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E30A 0828 0000 001A             		btst	#0,obFrame(a0)
0000E310 6600                       		bne.s	Over_Display
0000E312 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E316 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E318 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E31C 6000 0000                  		bra.w	DisplaySprite
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            Over_ChgMode:
0000E320 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E324 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E326 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E32C 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E330 6600                       		bne.s	Over_Display	; if yes, branch
0000E332 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E338 6000                       		bra.s	Over_Display
0000E33A                            ; ===========================================================================
0000E33A                            
0000E33A                            Over_ResetLvl:
0000E33A 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E33E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E344                            
0000E344                            Over_Display:
0000E344 6000 0000                  		bra.w	DisplaySprite
0000E344 6000 0000                  		bra.w	DisplaySprite
0000E348                            		include	"_incObj\3A Got Through Card.asm"
0000E348                            ; ---------------------------------------------------------------------------
0000E348                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E348                            ; ---------------------------------------------------------------------------
0000E348                            
0000E348                            GotThroughCard:
0000E348 7000                       		moveq	#0,d0
0000E34A 1028 0024                  		move.b	obRoutine(a0),d0
0000E34E 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E352 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E356                            ; ===========================================================================
0000E356 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E358 0000                       		dc.w Got_Move-Got_Index
0000E35A 0000                       		dc.w Got_Wait-Got_Index
0000E35C 0000                       		dc.w Got_TimeBonus-Got_Index
0000E35E 0000                       		dc.w Got_Wait-Got_Index
0000E360 0000                       		dc.w Got_NextLevel-Got_Index
0000E362 0000                       		dc.w Got_Wait-Got_Index
0000E364 0000                       		dc.w Got_Move2-Got_Index
0000E366 0000                       		dc.w loc_C766-Got_Index
0000E368                            
0000E368 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E368 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E368                            ; ===========================================================================
0000E368                            
0000E368                            Got_ChkPLC:	; Routine 0
0000E368 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E36C 6700                       		beq.s	Got_Main	; if yes, branch
0000E36E 4E75                       		rts	
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Got_Main:
0000E370 2248                       		movea.l	a0,a1
0000E372 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E378 7206                       		moveq	#6,d1
0000E37A                            
0000E37A                            Got_Loop:
0000E37A 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E37E 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E382 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E386 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E38A 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E38E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E392 101A                       		move.b	(a2)+,d0
0000E394 0C00 0006                  		cmpi.b	#6,d0
0000E398 6600                       		bne.s	loc_C5CA
0000E39A D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E39E                            
0000E39E                            	loc_C5CA:
0000E39E 1340 001A                  		move.b	d0,obFrame(a1)
0000E3A2 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E3AA 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E3B0 137C 0000 0001             		move.b	#0,obRender(a1)
0000E3B6 43E9 0040                  		lea	$40(a1),a1
0000E3BA 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E3BE                            
0000E3BE                            Got_Move:	; Routine 2
0000E3BE 7210                       		moveq	#$10,d1		; set horizontal speed
0000E3C0 3028 0030                  		move.w	got_mainX(a0),d0
0000E3C4 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E3C8 6700                       		beq.s	loc_C61A	; if yes, branch
0000E3CA 6C00                       		bge.s	Got_ChgPos
0000E3CC 4441                       		neg.w	d1
0000E3CE                            
0000E3CE                            	Got_ChgPos:
0000E3CE D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E3D2                            
0000E3D2                            	loc_C5FE:
0000E3D2 3028 0008                  		move.w	obX(a0),d0
0000E3D6 6B00                       		bmi.s	locret_C60E
0000E3D8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E3DC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E3DE 6000 0000                  		bra.w	DisplaySprite
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            locret_C60E:
0000E3E2 4E75                       		rts	
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            loc_C610:
0000E3E4 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E3EA 6000 0000                  		bra.w	Got_Move2
0000E3EE                            ; ===========================================================================
0000E3EE                            
0000E3EE                            loc_C61A:
0000E3EE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E3F4 67EE                       		beq.s	loc_C610
0000E3F6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E3FC 66D4                       		bne.s	loc_C5FE
0000E3FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E402 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E408                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E408                            
0000E408                            Got_Wait:	; Routine 4, 8, $C
0000E408 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E40C 6600                       		bne.s	Got_Display
0000E40E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E412                            
0000E412                            Got_Display:
0000E412 6000 0000                  		bra.w	DisplaySprite
0000E416                            ; ===========================================================================
0000E416                            
0000E416                            Got_TimeBonus:	; Routine 6
0000E416 6100 0000                  		bsr.w	DisplaySprite
0000E41A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E420 7000                       		moveq	#0,d0
0000E422 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E426 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E428 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E42C 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E432                            
0000E432                            Got_RingBonus:
0000E432 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E436 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E438 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E43C 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E442                            
0000E442                            Got_ChkBonus:
0000E442 4A40                       		tst.w	d0		; is there any bonus?
0000E444 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E450 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E454 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000E45A 6600                       		bne.s	Got_SetDelay
0000E45C 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E460                            
0000E460                            Got_SetDelay:
0000E460 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E466                            
0000E466                            locret_C692:
0000E466 4E75                       		rts	
0000E468                            ; ===========================================================================
0000E468                            
0000E468                            Got_AddBonus:
0000E468 4EB9 0000 0000             		jsr	(AddPoints).l
0000E46E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E472 0200 0003                  		andi.b	#3,d0
0000E476 66EE                       		bne.s	locret_C692
0000E482                            ; ===========================================================================
0000E482                            
0000E482                            Got_NextLevel:	; Routine $A
0000E482 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E488 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E48E 1038 FE10                  		move.b	(v_zone).w,d0
0000E492 0240 0007                  		andi.w	#7,d0
0000E496 E748                       		lsl.w	#3,d0
0000E498 1238 FE11                  		move.b	(v_act).w,d1
0000E49C 0241 0003                  		andi.w	#3,d1
0000E4A0 D241                       		add.w	d1,d1
0000E4A2 D041                       		add.w	d1,d0
0000E4A4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E4A8 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E4AC 4A40                       		tst.w	d0
0000E4AE 6600                       		bne.s	Got_ChkSS
0000E4B0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E4B6 6000                       		bra.s	Got_Display2
0000E4B8                            ; ===========================================================================
0000E4B8                            
0000E4B8                            Got_ChkSS:	
0000E4B8 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E4BC                            		;tst.b	(f_emeraldm).w
0000E4BC                            		;beq.s	VBla_08A
0000E4BC                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000E4BC                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000E4BC                            		;bra.s	Got_Display2
0000E4BC 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E4C2                            		
0000E4C2                            ; ===========================================================================
0000E4C2                            
0000E4C2                            VBla_08A:
0000E4C2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E4C8                            
0000E4C8                            Got_Display2:
0000E4C8 6000 0000                  		bra.w	DisplaySprite
0000E4CC                            ; ===========================================================================
0000E4CC                            ; ---------------------------------------------------------------------------
0000E4CC                            ; Level	order array
0000E4CC                            ; ---------------------------------------------------------------------------
0000E4CC                            LevelOrder:
0000E4CC                            		; Green Hill Zone
0000E4CC 0001                       		dc.b id_GHZ, 1	; Act 2
0000E4CE 0002                       		dc.b id_GHZ, 2	; Act 2
0000E4D0 0400                       		dc.b id_SYZ, 0	; Act 3
0000E4D2 0000                       		dc.b 0, 0
0000E4D4                            
0000E4D4                            		; Labyrinth Zone
0000E4D4 0101                       		dc.b id_LZ, 1	; Act 1
0000E4D6 0102                       		dc.b id_LZ, 2	; Act 2
0000E4D8 0000                       		dc.b id_GHZ, 0 	; Act 3
0000E4DA 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000E4DC                            
0000E4DC                            		; Marble Zone
0000E4DC 0201                       		dc.b id_MZ, 1	; Act 1
0000E4DE 0202                       		dc.b id_MZ, 2	; Act 2
0000E4E0 0502                       		dc.b id_SBZ, 2	; Act 3
0000E4E2 0000                       		dc.b 0, 0
0000E4E4                            
0000E4E4                            		; Star Light Zone
0000E4E4 0301                       		dc.b id_SLZ, 1	; Act 1
0000E4E6 0302                       		dc.b id_SLZ, 2	; Act 2
0000E4E8 0500                       		dc.b id_SBZ, 0	; Act 3
0000E4EA 0000                       		dc.b 0, 0
0000E4EC                            
0000E4EC                            		; Spring Yard Zone
0000E4EC 0401                       		dc.b id_SYZ, 1	; Act 1
0000E4EE 0200                       		dc.b id_MZ,  0	; Act 2
0000E4F0 0200                       		dc.b id_MZ,	 0	; Act 3
0000E4F2 0000                       		dc.b 0, 0
0000E4F4                            
0000E4F4                            		; Scrap Brain Zone
0000E4F4 0501                       		dc.b id_SBZ, 1	; Act 1
0000E4F6 0103                       		dc.b id_LZ, 3	; Act 2
0000E4F8 0000                       		dc.b 0, 0	; Final Zone
0000E4FA 0000                       		dc.b 0, 0
0000E4FC                            		even
0000E4FC                            ; ===========================================================================
0000E4FC                            
0000E4FC                            Got_Move2:	; Routine $E
0000E4FC 7220                       		moveq	#$20,d1		; set horizontal speed
0000E4FE 3028 0032                  		move.w	got_finalX(a0),d0
0000E502 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000E506 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000E508 6C00                       		bge.s	Got_ChgPos2
0000E50A 4441                       		neg.w	d1
0000E50C                            
0000E50C                            	Got_ChgPos2:
0000E50C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E510 3028 0008                  		move.w	obX(a0),d0
0000E514 6B00                       		bmi.s	locret_C748
0000E516 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E51A 6400                       		bcc.s	locret_C748	; if yes, branch
0000E51C 6000 0000                  		bra.w	DisplaySprite
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            locret_C748:
0000E520 4E75                       		rts	
0000E522                            ; ===========================================================================
0000E522                            
0000E522                            Got_SBZ2:
0000E522 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E528 6600 0000                  		bne.w	DeleteObject
0000E52C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E530 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000E534 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E53A                            ; ===========================================================================
0000E53A                            
0000E53A                            loc_C766:	; Routine $10
0000E53A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000E53E 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000E544 6700 0000                  		beq.w	DeleteObject
0000E548 4E75                       		rts	
0000E54A                            ; ===========================================================================
0000E54A                            		;    x-start,	x-main,	y-main,
0000E54A                            		;				routine, frame number
0000E54A                            
0000E54A 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000E550 0200                       		dc.b 				2,	0
0000E552                            
0000E552 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000E558 0201                       		dc.b 				2,	1
0000E55A                            
0000E55A 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000E560 0206                       		dc.b 				2,	6
0000E562                            
0000E562 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000E568 0202                       		dc.b 				2,	2
0000E56A                            
0000E56A 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000E570 0203                       		dc.b 				2,	3
0000E572                            
0000E572 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000E578 0204                       		dc.b 				2,	4
0000E57A                            
0000E57A 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000E580 0205                       		dc.b 				2,	5
0000E580 0205                       		dc.b 				2,	5
0000E582                            		include	"_incObj\7E Special Stage Results.asm"
0000E582                            ; ---------------------------------------------------------------------------
0000E582                            ; Object 7E - special stage results screen
0000E582                            ; ---------------------------------------------------------------------------
0000E582                            
0000E582                            SSResult:
0000E582 7000                       		moveq	#0,d0
0000E584 1028 0024                  		move.b	obRoutine(a0),d0
0000E588 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000E58C 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000E590                            ; ===========================================================================
0000E590 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000E592 0000                       		dc.w SSR_Move-SSR_Index
0000E594 0000                       		dc.w SSR_Wait-SSR_Index
0000E596 0000                       		dc.w SSR_RingBonus-SSR_Index
0000E598 0000                       		dc.w SSR_Wait-SSR_Index
0000E59A 0000                       		dc.w SSR_Exit-SSR_Index
0000E59C 0000                       		dc.w SSR_Wait-SSR_Index
0000E59E 0000                       		dc.w SSR_Continue-SSR_Index
0000E5A0 0000                       		dc.w SSR_Wait-SSR_Index
0000E5A2 0000                       		dc.w SSR_Exit-SSR_Index
0000E5A4 0000                       		dc.w loc_C91A-SSR_Index
0000E5A6                            
0000E5A6 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000E5A6                            ; ===========================================================================
0000E5A6                            
0000E5A6                            SSR_ChkPLC:	; Routine 0
0000E5A6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E5AA 6700                       		beq.s	SSR_Main	; if yes, branch
0000E5AC 4E75                       		rts	
0000E5AE                            ; ===========================================================================
0000E5AE                            
0000E5AE                            SSR_Main:
0000E5AE 2248                       		movea.l	a0,a1
0000E5B0 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000E5B6 7203                       		moveq	#3,d1
0000E5B8 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000E5BE 6500                       		bcs.s	SSR_Loop	; if no, branch
0000E5C0 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000E5C2                            
0000E5C2                            	SSR_Loop:
0000E5C2 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000E5C6 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000E5CA 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000E5CE 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E5D2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E5D6 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000E5DA 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000E5E2 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E5E8 137C 0000 0001             		move.b	#0,obRender(a1)
0000E5EE 43E9 0040                  		lea	$40(a1),a1
0000E5F2 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000E5F6                            
0000E5F6 7007                       		moveq	#7,d0
0000E5F8 1238 FE57                  		move.b	(v_emeralds).w,d1
0000E5FC 6700                       		beq.s	loc_C842
0000E5FE 7000                       		moveq	#0,d0
0000E600 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000E604 6600                       		bne.s	loc_C842	; if not, branch
0000E606 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000E608 317C 0018 0008             		move.w	#$18,obX(a0)
0000E60E 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000E614                            
0000E614                            loc_C842:
0000E614 1140 001A                  		move.b	d0,obFrame(a0)
0000E618                            
0000E618                            SSR_Move:	; Routine 2
0000E618 7210                       		moveq	#$10,d1		; set horizontal speed
0000E61A 3028 0030                  		move.w	ssr_mainX(a0),d0
0000E61E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E622 6700                       		beq.s	loc_C86C	; if yes, branch
0000E624 6C00                       		bge.s	SSR_ChgPos
0000E626 4441                       		neg.w	d1
0000E628                            
0000E628                            SSR_ChgPos:
0000E628 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E62C                            
0000E62C                            loc_C85A:
0000E62C 3028 0008                  		move.w	obX(a0),d0
0000E630 6B00                       		bmi.s	locret_C86A
0000E632 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E636 6400                       		bcc.s	locret_C86A	; if yes, branch
0000E638 6000 0000                  		bra.w	DisplaySprite
0000E63C                            ; ===========================================================================
0000E63C                            
0000E63C                            locret_C86A:
0000E63C 4E75                       		rts	
0000E63E                            ; ===========================================================================
0000E63E                            
0000E63E                            loc_C86C:
0000E63E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E644 66E6                       		bne.s	loc_C85A
0000E646 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E64A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E650 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E656                            
0000E656                            SSR_Wait:	; Routine 4, 8, $C, $10
0000E656 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E65A 6600                       		bne.s	SSR_Display
0000E65C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E660                            
0000E660                            SSR_Display:
0000E660 6000 0000                  		bra.w	DisplaySprite
0000E664                            ; ===========================================================================
0000E664                            
0000E664                            SSR_RingBonus:	; Routine 6
0000E664 6100 0000                  		bsr.w	DisplaySprite
0000E668 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000E66E 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E672 6700                       		beq.s	loc_C8C4	; if yes, branch
0000E674 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E67A 700A                       		moveq	#10,d0		; add 10 to score
0000E67C 4EB9 0000 0000             		jsr	(AddPoints).l
0000E682 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E686 0200 0003                  		andi.b	#3,d0
0000E68A 6600                       		bne.s	locret_C8EA
0000E696                            ; ===========================================================================
0000E696                            
0000E696                            loc_C8C4:
0000E6A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6A4 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E6AA 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000E6B0 6500                       		bcs.s	locret_C8EA	; if not, branch
0000E6B2 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000E6B8 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000E6BC                            
0000E6BC                            locret_C8EA:
0000E6BC 4E75                       		rts	
0000E6BE                            ; ===========================================================================
0000E6BE                            
0000E6BE                            SSR_Exit:	; Routine $A, $12
0000E6BE 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E6C4 6000 0000                  		bra.w	DisplaySprite
0000E6C8                            ; ===========================================================================
0000E6C8                            
0000E6C8                            SSR_Continue:	; Routine $E
0000E6C8 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000E6CE 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000E6DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6E2 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000E6E8 6000 0000                  		bra.w	DisplaySprite
0000E6EC                            ; ===========================================================================
0000E6EC                            
0000E6EC                            loc_C91A:	; Routine $14
0000E6EC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E6F0 0200 000F                  		andi.b	#$F,d0
0000E6F4 6600                       		bne.s	SSR_Display2
0000E6F6 0868 0000 001A             		bchg	#0,obFrame(a0)
0000E6FC                            
0000E6FC                            SSR_Display2:
0000E6FC 6000 0000                  		bra.w	DisplaySprite
0000E700                            ; ===========================================================================
0000E700 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000E706 0200                       		dc.b 2,	0		; rountine number, frame number
0000E708 0320 0120 0118             		dc.w $320, $120, $118
0000E70E 0201                       		dc.b 2,	1
0000E710 0360 0120 0128             		dc.w $360, $120, $128
0000E716 0202                       		dc.b 2,	2
0000E718 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000E71E 0203                       		dc.b 2,	3
0000E720 03A0 0120 0138             		dc.w $3A0, $120, $138
0000E726 0206                       		dc.b 2,	6
0000E726 0206                       		dc.b 2,	6
0000E728                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000E728                            ; ---------------------------------------------------------------------------
0000E728                            ; Object 7F - chaos emeralds from the special stage results screen
0000E728                            ; ---------------------------------------------------------------------------
0000E728                            
0000E728                            SSRChaos:
0000E728 7000                       		moveq	#0,d0
0000E72A 1028 0024                  		move.b	obRoutine(a0),d0
0000E72E 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000E732 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000E736                            ; ===========================================================================
0000E736 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000E738 0000                       		dc.w SSRC_Flash-SSRC_Index
0000E73A                            
0000E73A                            ; ---------------------------------------------------------------------------
0000E73A                            ; X-axis positions for chaos emeralds
0000E73A                            ; ---------------------------------------------------------------------------
0000E73A 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000E746                            ; ===========================================================================
0000E746                            
0000E746                            SSRC_Main:	; Routine 0
0000E746 2248                       		movea.l	a0,a1
0000E748 45F9 0000 E73A             		lea	(SSRC_PosData).l,a2
0000E74E 7400                       		moveq	#0,d2
0000E750 7200                       		moveq	#0,d1
0000E752 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000E756 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000E758 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000E75C                            
0000E75C                            	SSRC_Loop:
0000E75C 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000E760 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000E764 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000E76A 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000E76E 1633 2000                  		move.b	(a3,d2.w),d3
0000E772 1343 001A                  		move.b	d3,obFrame(a1)
0000E776 1343 001C                  		move.b	d3,obAnim(a1)
0000E77A 5202                       		addq.b	#1,d2
0000E77C 5429 0024                  		addq.b	#2,obRoutine(a1)
0000E780 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000E788 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000E78E 137C 0000 0001             		move.b	#0,obRender(a1)
0000E794 43E9 0040                  		lea	$40(a1),a1	; next object
0000E798 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000E79C                            
0000E79C                            SSRC_Flash:	; Routine 2
0000E79C 1028 001A                  		move.b	obFrame(a0),d0
0000E7A0 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000E7A6 0C00 0006                  		cmpi.b	#6,d0
0000E7AA 6600                       		bne.s	SSRC_Display
0000E7AC 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000E7B2                            
0000E7B2                            	SSRC_Display:
0000E7B2 6000 0000                  		bra.w	DisplaySprite
0000E7B2 6000 0000                  		bra.w	DisplaySprite
0000E7B6                            
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6                            ; Sprite mappings - zone title cards
0000E7B6                            ; ---------------------------------------------------------------------------
0000E7B6 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000E7B8 0000                       		dc.w M_Card_LZ-Map_Card
0000E7BA 0000                       		dc.w M_Card_MZ-Map_Card
0000E7BC 0000                       		dc.w M_Card_SLZ-Map_Card
0000E7BE 0000                       		dc.w M_Card_SYZ-Map_Card
0000E7C0 0000                       		dc.w M_Card_SBZ-Map_Card
0000E7C2 0000                       		dc.w M_Card_Zone-Map_Card
0000E7C4 0000                       		dc.w M_Card_Act1-Map_Card
0000E7C6 0000                       		dc.w M_Card_Act2-Map_Card
0000E7C8 0000                       		dc.w M_Card_Act3-Map_Card
0000E7CA 0000                       		dc.w M_Card_Oval-Map_Card
0000E7CC 0000                       		dc.w M_Card_FZ-Map_Card
0000E7CE 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000E7CF F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000E7D4 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000E7D9 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000E7DE F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000E7E3 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E7E8 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000E7ED F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000E7F2 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000E7F7 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000E7FC                            		even
0000E7FC 0D                         M_Card_LZ:	dc.b $D	;  LABYRINTH | ROBOTIC ABYSS
0000E7FD F805 003A 9C               		dc.b $F8, 5, 0, $3A, $9C	; R
0000E802 F805 0032 AC               		dc.b $F8, 5, 0, $32, $AC	; O
0000E807 F805 0004 BC               		dc.b $F8, 5, 0, 4, $BC		; B
0000E80C F805 0032 CC               		dc.b $F8, 5, 0, $32, $CC	; O
0000E811 F805 0042 DC               		dc.b $F8, 5, 0, $42, $DC	; T
0000E816 F801 0020 EC               		dc.b $F8, 1, 0, $20, $EC	; I
0000E81B F805 0008 F4               		dc.b $F8, 5, 0, 8, $F4		; C
0000E820 F800 0056 04               		dc.b $F8, 0, 0, $56, $4	; Space
0000E825 F805 0000 14               		dc.b $F8, 5, 0, 0, $14		; A
0000E82A F805 0004 24               		dc.b $F8, 5, 0, 4, $24		; B
0000E82F F805 004A 34               		dc.b $F8, 5, 0, $4A, $34	; Y
0000E834 F805 003E 44               		dc.b $F8, 5, 0, $3E, $44	; S
0000E839 F805 003E 54               		dc.b $F8, 5, 0, $3E, $54	; S
0000E83E 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000E83F F805 003E A4               		dc.b $F8, 5, 0, $3E, $A4	; S
0000E844 F805 0008 B4               		dc.b $F8, 5, 0, 8, $B4		; C
0000E849 F805 003A C4               		dc.b $F8, 5, 0, $3A, $C4	; R
0000E84E F805 0000 D4               		dc.b $F8, 5, 0, 0, $D4		; A
0000E853 F805 0036 E4               		dc.b $F8, 5, 0, $36, $E4	; P
0000E858 F800 0056 F4               		dc.b $F8, 0, 0, $56, $F4	; Space
0000E85D F805 003A 04               		dc.b $F8, 5, 0, $3A, $4	; R
0000E862 F805 0046 14               		dc.b $F8, 5, 0, $46, $14	; U
0000E867 F801 0020 24               		dc.b $F8, 1, 0, $20, $24	; I
0000E86C F805 002E 2C               		dc.b $F8, 5, 0, $2E, $2C	; N
0000E871 F805 003E 3C               		dc.b $F8, 5, 0, $3E, $3C	; S
0000E876 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000E877 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000E87C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000E881 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000E886 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000E88B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000E890 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000E895 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000E89A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000E89F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000E8A4                            		even
0000E8A4 0A                         M_Card_SYZ:	dc.b $A	;  SPRING YARD | FUTURE BAY
0000E8A5 F805 0014 AC               		dc.b $F8, 5, 0, $14, $AC	; F
0000E8AA F805 0046 BC               		dc.b $F8, 5, 0, $46, $BC	; U
0000E8AF F805 0042 CC               		dc.b $F8, 5, 0, $42, $CC	; T
0000E8B4 F805 0046 DC               		dc.b $F8, 5, 0, $46, $DC	; U
0000E8B9 F805 003A EC               		dc.b $F8, 5, 0, $3A, $EC	; R
0000E8BE F805 0010 FC               		dc.b $F8, 5, 0, $10, $FC	; E
0000E8C3 F800 0056 0C               		dc.b $F8, 0, 0, $56, $C	; Space
0000E8C8 F805 0004 1C               		dc.b $F8, 5, 0, 4, $1C		; B
0000E8CD F805 0000 2C               		dc.b $F8, 5, 0, 0, $2C		; A
0000E8D2 F805 004A 3C               		dc.b $F8, 5, 0, $4A, $3C	; Y
0000E8D7 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000E8D8 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000E8DD F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000E8E2 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000E8E7 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000E8EC F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000E8F1 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000E8F6 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000E8FB F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000E900 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000E905 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000E90A                            		even
0000E90A 04                         M_Card_Zone:	dc.b 4			; ZONE
0000E90B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000E910 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000E915 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000E91A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000E920 00                         		even
0000E920 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000E921 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E926 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000E92B 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000E92C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E931 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000E936 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000E937 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000E93C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000E941 0D                         M_Card_Oval:	dc.b $D			; Oval
0000E942 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000E947 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000E94C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000E951 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000E956 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000E95B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000E960 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000E965 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000E96A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000E96F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000E974 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000E979 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000E97E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000E984 00                         		even
0000E984 05                         M_Card_FZ:	dc.b 5			; FINAL
0000E985 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000E98A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000E98F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000E994 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000E999 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000E99E                            		even
0000E99E                            
0000E99E                            Map_Over:	include	"_maps\Game Over.asm"
0000E99E                            ; ---------------------------------------------------------------------------
0000E99E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000E99E                            ; ---------------------------------------------------------------------------
0000E99E                            Map_Over_internal:
0000E99E 0000                       		dc.w byte_CBAC-Map_Over_internal
0000E9A0 0000                       		dc.w byte_CBB7-Map_Over_internal
0000E9A2 0000                       		dc.w byte_CBC2-Map_Over_internal
0000E9A4 0000                       		dc.w byte_CBCD-Map_Over_internal
0000E9A6 02                         byte_CBAC:	dc.b 2			; GAME
0000E9A7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000E9AC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000E9B1 02                         byte_CBB7:	dc.b 2			; OVER
0000E9B2 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000E9B7 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000E9BC 02                         byte_CBC2:	dc.b 2			; TIME
0000E9BD F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000E9C2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000E9C7 02                         byte_CBCD:	dc.b 2			; OVER
0000E9C8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000E9CD F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000E9D2                            		even
0000E9D2                            		even
0000E9D2                            
0000E9D2                            ; ---------------------------------------------------------------------------
0000E9D2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000E9D2                            ; ---------------------------------------------------------------------------
0000E9D2 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000E9D4 0000                       		dc.w M_Got_Passed-Map_Got
0000E9D6 0000                       		dc.w M_Got_Score-Map_Got
0000E9D8 0000                       		dc.w M_Got_TBonus-Map_Got
0000E9DA 0000                       		dc.w M_Got_RBonus-Map_Got
0000E9DC FF6F                       		dc.w M_Card_Oval-Map_Got
0000E9DE FF4E                       		dc.w M_Card_Act1-Map_Got
0000E9E0 FF59                       		dc.w M_Card_Act2-Map_Got
0000E9E2 FF64                       		dc.w M_Card_Act3-Map_Got
0000E9E4 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000E9E5 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000E9EA F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000E9EF F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000E9F4 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000E9F9 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000E9FE F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EA03 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EA08 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EA0D 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EA0E F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EA13 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EA18 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EA1D F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EA22 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EA27 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EA2C 06                         M_Got_Score:	dc.b 6			; SCORE
0000EA2D F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EA32 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EA37 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EA3C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EA41 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EA46 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EA4B 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EA4C F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EA51 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EA56 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EA5B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EA60 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EA65 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EA6A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EA6F 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EA70 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EA75 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EA7A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EA7F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EA84 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EA89 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EA8E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EA94 00                         		even
0000EA94                            ; ---------------------------------------------------------------------------
0000EA94                            ; Sprite mappings - special stage results screen
0000EA94                            ; ---------------------------------------------------------------------------
0000EA94 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EA96 0000                       		dc.w M_SSR_Score-Map_SSR
0000EA98 0000                       		dc.w byte_CD0D-Map_SSR
0000EA9A FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EA9C 0000                       		dc.w byte_CD31-Map_SSR
0000EA9E 0000                       		dc.w byte_CD46-Map_SSR
0000EAA0 0000                       		dc.w byte_CD5B-Map_SSR
0000EAA2 0000                       		dc.w byte_CD6B-Map_SSR
0000EAA4 0000                       		dc.w byte_CDA8-Map_SSR
0000EAA6 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EAA7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EAAC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EAB1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EAB6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EABB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EAC0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000EAC5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000EACA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EACF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000EAD4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000EAD9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000EADE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000EAE3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000EAE8 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000EAE9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EAEE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EAF3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EAF8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EAFD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EB02 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EB07 07                         byte_CD0D:	dc.b 7
0000EB08 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EB0D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EB12 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EB17 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EB1C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EB21 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EB26 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EB2B 04                         byte_CD31:	dc.b 4
0000EB2C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB31 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB36 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB3B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000EB40 04                         byte_CD46:	dc.b 4
0000EB41 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB46 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB4B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB50 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000EB55 03                         byte_CD5B:	dc.b 3
0000EB56 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000EB5B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000EB60 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000EB65 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000EB66 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000EB6B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000EB70 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000EB75 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000EB7A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EB7F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000EB84 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000EB89 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000EB8E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EB93 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000EB98 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000EB9D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000EBA2 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000EBA3 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000EBA8 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000EBAD F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000EBB2 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000EBB7 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000EBBC F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000EBC1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000EBC6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000EBCB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000EBD0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000EBD5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000EBDA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000EBDF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000EBE4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000EBE9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000EBEE                            		even
0000EBEE                            
0000EBEE                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            Map_SSRC_internal:
0000EBEE 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000EBF0 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000EBF2 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000EBF4 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000EBF6 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000EBF8 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000EBFA 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000EBFC 01                         byte_CE02:	dc.b 1
0000EBFD F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000EC02 01                         byte_CE08:	dc.b 1
0000EC03 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000EC08 01                         byte_CE0E:	dc.b 1
0000EC09 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000EC0E 01                         byte_CE14:	dc.b 1
0000EC0F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000EC14 01                         byte_CE1A:	dc.b 1
0000EC15 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000EC1A 01                         byte_CE20:	dc.b 1
0000EC1B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000EC20 00                         byte_CE26:	dc.b 0			; Blank frame
0000EC22 00                         		even
0000EC22 00                         		even
0000EC22                            
0000EC22                            		include	"_incObj\36 Spikes.asm"
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22                            ; Object 36 - spikes
0000EC22                            ; ---------------------------------------------------------------------------
0000EC22                            
0000EC22                            Spikes:
0000EC22 7000                       		moveq	#0,d0
0000EC24 1028 0024                  		move.b	obRoutine(a0),d0
0000EC28 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000EC2C 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000EC30                            ; ===========================================================================
0000EC30 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000EC32 0000                       		dc.w Spik_Solid-Spik_Index
0000EC34                            
0000EC34 =00000030                  spik_origX:	equ $30		; start X position
0000EC34 =00000032                  spik_origY:	equ $32		; start Y position
0000EC34                            
0000EC34 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000EC36 0110                       		dc.b 1,	$10
0000EC38 0204                       		dc.b 2,	4
0000EC3A 031C                       		dc.b 3,	$1C
0000EC3C 0440                       		dc.b 4,	$40
0000EC3E 0510                       		dc.b 5,	$10
0000EC40                            ; ===========================================================================
0000EC40                            
0000EC40                            Spik_Main:	; Routine 0
0000EC40 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC44 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000EC4C 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000EC52 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EC58 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EC5E 1028 0028                  		move.b	obSubtype(a0),d0
0000EC62 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000EC68 0240 00F0                  		andi.w	#$F0,d0
0000EC6C 43F9 0000 EC34             		lea	(Spik_Var).l,a1
0000EC72 E648                       		lsr.w	#3,d0
0000EC74 D2C0                       		adda.w	d0,a1
0000EC76 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000EC7A 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000EC7E 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000EC84 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000EC8A                            
0000EC8A                            Spik_Solid:	; Routine 2
0000EC8A 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000EC8E 343C 0004                  		move.w	#4,d2
0000EC92 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000EC98 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000EC9A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000ECA0 6600                       		bne.s	Spik_Upright	; if not, branch
0000ECA2 343C 0014                  		move.w	#$14,d2
0000ECA6                            
0000ECA6                            ; Spikes types $1x and $5x face	sideways
0000ECA6                            
0000ECA6                            Spik_SideWays:
0000ECA6 323C 001B                  		move.w	#$1B,d1
0000ECAA 3602                       		move.w	d2,d3
0000ECAC 5243                       		addq.w	#1,d3
0000ECAE 3828 0008                  		move.w	obX(a0),d4
0000ECB2 6100 0000                  		bsr.w	SolidObject
0000ECB6 0828 0003 0022             		btst	#3,obStatus(a0)
0000ECBC 6600                       		bne.s	Spik_Display
0000ECBE 0C44 0001                  		cmpi.w	#1,d4
0000ECC2 6700                       		beq.s	Spik_Hurt
0000ECC4 6000                       		bra.s	Spik_Display
0000ECC6                            ; ===========================================================================
0000ECC6                            
0000ECC6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000ECC6                            
0000ECC6                            Spik_Upright:
0000ECC6 7200                       		moveq	#0,d1
0000ECC8 1228 0014                  		move.b	obActWid(a0),d1
0000ECCC 0641 000B                  		addi.w	#$B,d1
0000ECD0 343C 0010                  		move.w	#$10,d2
0000ECD4 363C 0011                  		move.w	#$11,d3
0000ECD8 3828 0008                  		move.w	obX(a0),d4
0000ECDC 6100 0000                  		bsr.w	SolidObject
0000ECE0 0828 0003 0022             		btst	#3,obStatus(a0)
0000ECE6 6600                       		bne.s	Spik_Hurt
0000ECE8 4A44                       		tst.w	d4
0000ECEA 6A00                       		bpl.s	Spik_Display
0000ECEC                            
0000ECEC                            Spik_Hurt:
0000ECEC 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000ECF0 6600                       		bne.s	Spik_Display	; if yes, branch
0000ECF2 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000ECF6 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000ECF8 2F08                       		move.l	a0,-(sp)
0000ECFA 2448                       		movea.l	a0,a2
0000ECFC 41F8 D000                  		lea	(v_player).w,a0
0000ED00 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000ED06 6400                       		bcc.s	loc_CF20
0000ED08                            		; This fixes the infamous "spike bug"
0000ED08 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000ED0C 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000ED0E 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000ED14                            loc_D5A2:
0000ED14 9680                       		sub.l	d0,d3
0000ED16 2143 000C                  		move.l	d3,obY(a0)
0000ED1A 4EB9 0000 0000             		jsr	(HurtSonic).l
0000ED20                            
0000ED20                            loc_CF20:
0000ED20 205F                       		movea.l	(sp)+,a0
0000ED22                            
0000ED22                            Spik_Display:
0000ED22 6100 0000                  		bsr.w	DisplaySprite
0000ED44 4E75                       		rts	
0000ED46                            ; ===========================================================================
0000ED46                            
0000ED46                            Spik_Type0x:
0000ED46 7000                       		moveq	#0,d0
0000ED48 1028 0028                  		move.b	obSubtype(a0),d0
0000ED4C D040                       		add.w	d0,d0
0000ED4E 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000ED52 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000ED56                            ; ===========================================================================
0000ED56 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000ED58 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000ED5A 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000ED5C                            ; ===========================================================================
0000ED5C                            
0000ED5C                            Spik_Type00:
0000ED5C 4E75                       		rts			; don't move the object
0000ED5E                            ; ===========================================================================
0000ED5E                            
0000ED5E                            Spik_Type01:
0000ED5E 6100 0000                  		bsr.w	Spik_Wait
0000ED62 7000                       		moveq	#0,d0
0000ED64 1028 0034                  		move.b	$34(a0),d0
0000ED68 D068 0032                  		add.w	spik_origY(a0),d0
0000ED6C 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000ED70 4E75                       		rts	
0000ED72                            ; ===========================================================================
0000ED72                            
0000ED72                            Spik_Type02:
0000ED72 6100 0000                  		bsr.w	Spik_Wait
0000ED76 7000                       		moveq	#0,d0
0000ED78 1028 0034                  		move.b	$34(a0),d0
0000ED7C D068 0030                  		add.w	spik_origX(a0),d0
0000ED80 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000ED84 4E75                       		rts	
0000ED86                            ; ===========================================================================
0000ED86                            
0000ED86                            Spik_Wait:
0000ED86 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000ED8A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000ED8C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000ED90 6600                       		bne.s	locret_CFE6
0000ED92 4A28 0001                  		tst.b	obRender(a0)
0000ED96 6A00                       		bpl.s	locret_CFE6
0000EDA2 6000                       		bra.s	locret_CFE6
0000EDA4                            ; ===========================================================================
0000EDA4                            
0000EDA4                            loc_CFA4:
0000EDA4 4A68 0036                  		tst.w	$36(a0)
0000EDA8 6700                       		beq.s	loc_CFC6
0000EDAA 0468 0800 0034             		subi.w	#$800,$34(a0)
0000EDB0 6400                       		bcc.s	locret_CFE6
0000EDB2 317C 0000 0034             		move.w	#0,$34(a0)
0000EDB8 317C 0000 0036             		move.w	#0,$36(a0)
0000EDBE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EDC4 6000                       		bra.s	locret_CFE6
0000EDC6                            ; ===========================================================================
0000EDC6                            
0000EDC6                            loc_CFC6:
0000EDC6 0668 0800 0034             		addi.w	#$800,$34(a0)
0000EDCC 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000EDD2 6500                       		bcs.s	locret_CFE6
0000EDD4 317C 2000 0034             		move.w	#$2000,$34(a0)
0000EDDA 317C 0001 0036             		move.w	#1,$36(a0)
0000EDE0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000EDE6                            
0000EDE6                            locret_CFE6:
0000EDE6 4E75                       		rts	
0000EDE6 4E75                       		rts	
0000EDE8                            Map_Spike:	include	"_maps\Spikes.asm"
0000EDE8                            ; --------------------------------------------------------------------------------
0000EDE8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000EDE8                            ; --------------------------------------------------------------------------------
0000EDE8                            
0000EDE8                            SME_XgeaQ:	
0000EDE8 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000EDEC 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000EDF0 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000EDF4 03                         SME_XgeaQ_C:	dc.b 3	
0000EDF5 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000EDFA F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EDFF F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000EE04 03                         SME_XgeaQ_1C:	dc.b 3	
0000EE05 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000EE0A FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EE0F 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000EE14 01                         SME_XgeaQ_2C:	dc.b 1	
0000EE15 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE1A 03                         SME_XgeaQ_32:	dc.b 3	
0000EE1B F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000EE20 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000EE25 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000EE2A 06                         SME_XgeaQ_42:	dc.b 6	
0000EE2B F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000EE30 F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000EE35 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000EE3A F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000EE3F F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000EE44 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000EE49 01                         SME_XgeaQ_61:	dc.b 1	
0000EE4A FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000EE50 00                         		even
0000EE50 00                         		even
0000EE50                            		include	"_incObj\3B Purple Rock.asm"
0000EE50                            ; ---------------------------------------------------------------------------
0000EE50                            ; Object 3B - purple rock (GHZ)
0000EE50                            ; ---------------------------------------------------------------------------
0000EE50                            
0000EE50                            PurpleRock:
0000EE50 7000                       		moveq	#0,d0
0000EE52 1028 0024                  		move.b	obRoutine(a0),d0
0000EE56 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000EE5A 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000EE5E                            ; ===========================================================================
0000EE5E 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000EE60 0000                       		dc.w Rock_Solid-Rock_Index
0000EE62                            ; ===========================================================================
0000EE62                            
0000EE62                            Rock_Main:	; Routine 0
0000EE62 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EE66 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000EE6E 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000EE74 117C 0004 0001             		move.b	#4,obRender(a0)
0000EE7A 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000EE80 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EE86                            
0000EE86                            Rock_Solid:	; Routine 2
0000EE86 323C 001B                  		move.w	#$1B,d1
0000EE8A 343C 0010                  		move.w	#$10,d2
0000EE8E 363C 0010                  		move.w	#$10,d3
0000EE92 3828 0008                  		move.w	obX(a0),d4
0000EE96 6100 0000                  		bsr.w	SolidObject
0000EE9A 6100 0000                  		bsr.w	DisplaySprite
0000EEBC 4E75                       		rts	
0000EEBC 4E75                       		rts	
0000EEBE                            		include	"_incObj\49 Waterfall Sound.asm"
0000EEBE                            ; ---------------------------------------------------------------------------
0000EEBE                            ; Object 49 - waterfall	sound effect (GHZ)
0000EEBE                            ; ---------------------------------------------------------------------------
0000EEBE                            
0000EEBE                            WaterSound:
0000EEBE 7000                       		moveq	#0,d0
0000EEC0 1028 0024                  		move.b	obRoutine(a0),d0
0000EEC4 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000EEC8 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000EECC                            ; ===========================================================================
0000EECC 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000EECE 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000EED0                            ; ===========================================================================
0000EED0                            
0000EED0                            WSnd_Main:	; Routine 0
0000EED0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EED4 117C 0004 0001             		move.b	#4,obRender(a0)
0000EEDA                            
0000EEDA                            WSnd_PlaySnd:	; Routine 2
0000EEDA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000EEDE 0200 003F                  		andi.b	#$3F,d0
0000EEE2 6600                       		bne.s	WSnd_ChkDel
0000EEEE                            
0000EEEE                            	WSnd_ChkDel:
0000EF0C 4E75                       		rts	
0000EF0C 4E75                       		rts	
0000EF0E                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000EF0E                            ; ---------------------------------------------------------------------------
0000EF0E                            ; Sprite mappings - purple rock	(GHZ)
0000EF0E                            ; ---------------------------------------------------------------------------
0000EF0E                            Map_PRock_internal:
0000EF0E 0000                       		dc.w byte_D110-Map_PRock_internal
0000EF10 02                         byte_D110:	dc.b 2
0000EF11 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EF16 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000EF1C 00                         		even
0000EF1C 00                         		even
0000EF1C                            		include	"_incObj\3C Smashable Wall.asm"
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000EF1C                            ; ---------------------------------------------------------------------------
0000EF1C                            
0000EF1C                            SmashWall:
0000EF1C 7000                       		moveq	#0,d0
0000EF1E 1028 0024                  		move.b	obRoutine(a0),d0
0000EF22 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000EF26 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000EF2A 6000 0000                  		bra.w	RememberState
0000EF2E                            ; ===========================================================================
0000EF2E 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000EF30 0000                       		dc.w Smash_Solid-Smash_Index
0000EF32 0000                       		dc.w Smash_FragMove-Smash_Index
0000EF34                            
0000EF34 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000EF34                            ; ===========================================================================
0000EF34                            
0000EF34                            Smash_Main:	; Routine 0
0000EF34 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EF38 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000EF40 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000EF46 117C 0004 0001             		move.b	#4,obRender(a0)
0000EF4C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000EF52 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000EF58 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000EF5E                            
0000EF5E                            Smash_Solid:	; Routine 2
0000EF5E 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000EF64 323C 001B                  		move.w	#$1B,d1
0000EF68 343C 0020                  		move.w	#$20,d2
0000EF6C 363C 0020                  		move.w	#$20,d3
0000EF70 3828 0008                  		move.w	obX(a0),d4
0000EF74 6100 0000                  		bsr.w	SolidObject	
0000EF78 4A04                       		tst.b	d4
0000EF7A 6E00 0000                  		bgt.w	@chkroll	
0000EF7E 6700 0000                  		beq.w	@donothing								
0000EF82 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000EF88 6700 0000                  		beq.w	@donothing	; if yes, branch
0000EF8C                            ; ===========================================================================
0000EF8C                            
0000EF8C                            @chkroll:
0000EF8C 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000EF92 6600                       		bne.s	@donothing	; if not, branch	
0000EF94 3028 0030                  		move.w	smash_speed(a0),d0
0000EF98 6A00                       		bpl.s	@chkspeed
0000EF9A 4440                       		neg.w	d0
0000EF9C                            
0000EF9C                            	@chkspeed:
0000EF9C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000EFA0 6500                       		bcs.s	@donothing	; if not, branch	
0000EFA2                            		
0000EFA2                            	@continue:	
0000EFA2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000EFA8 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000EFAE 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000EFB4 3028 0008                  		move.w	obX(a0),d0
0000EFB8 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000EFBC 6500                       		bcs.s	@smash		; if yes, branch
0000EFBE 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000EFC4                            
0000EFC4                            	@smash:
0000EFC4 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000EFCA 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000EFD0 7206                       		moveq	#6,d1		; load 7 fragments
0000EFD2 343C 0070                  		move.w	#$70,d2
0000EFD6 6100                       		bsr.s	SmashObject
0000EFD8                            
0000EFD8                            @donothing:
0000EFD8 4E75                       		rts	
0000EFDA                            
0000EFDA                            Smash_FragMove:	; Routine 4
0000EFDA 588F                       		addq.l	#4,sp
0000EFDC 6100 0000                  		bsr.w	SpeedToPos
0000EFE0 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000EFE6 4A28 0001                  		tst.b	obRender(a0)
0000EFEA 6A00 0000                  		bpl.w	DeleteObject
0000EFEE 6000 0000                  		bra.w	DisplaySprite
0000EFF2                            
0000EFF2                            
0000EFF2                            
0000EFF2                            		include	"_incObj\sub SmashObject.asm"
0000EFF2                            ; ---------------------------------------------------------------------------
0000EFF2                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000EFF2                            ; ---------------------------------------------------------------------------
0000EFF2                            
0000EFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EFF2                            
0000EFF2                            
0000EFF2                            SmashObject:
0000EFF2 7000                       		moveq	#0,d0
0000EFF4 1028 001A                  		move.b	obFrame(a0),d0
0000EFF8 D040                       		add.w	d0,d0
0000EFFA 2668 0004                  		movea.l	obMap(a0),a3
0000EFFE D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F002 524B                       		addq.w	#1,a3
0000F004 08E8 0005 0001             		bset	#5,obRender(a0)
0000F00A 1810                       		move.b	0(a0),d4
0000F00C 1A28 0001                  		move.b	obRender(a0),d5
0000F010 2248                       		movea.l	a0,a1
0000F012 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F018 1284                       		move.b	d4,0(a1)
0000F01A 234B 0004                  		move.l	a3,obMap(a1)
0000F01E 1345 0001                  		move.b	d5,obRender(a1)
0000F022 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F028 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F02E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F034 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F03A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F040 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F044 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F048 5341                       		subq.w #1,d1
0000F04A 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F04E 303C 005F                  		move.w #$5F,d0
0000F052                            ; ===========================================================================
0000F052                            
0000F052                            Smash_Loop:
0000F052 4A11                       		tst.b	(a1)
0000F054 6700                       		beq.s	@cont
0000F056 43E9 0040                  		lea		$40(a1),a1
0000F05A 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F05E 6600                       		bne.s	Smash_PlaySnd
0000F060                            
0000F060                            	@cont:
0000F060 5A4B                       		addq.w #5,a3
0000F062                            
0000F062                            Smash_LoadFrag:				; XREF: SmashObject
0000F062 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F068 1284                       		move.b	d4,0(a1)
0000F06A 234B 0004                  		move.l	a3,obMap(a1)
0000F06E 1345 0001                  		move.b	d5,obRender(a1)
0000F072 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F078 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F07E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F084 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F08A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F090 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F094 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F098 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F09C                            
0000F09C                            Smash_PlaySnd:
0000F09C 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F0A0 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F0A6                            
0000F0A6                            ; End of function SmashObject
0000F0A6                            ; End of function SmashObject
0000F0A6                            
0000F0A6                            ; ===========================================================================
0000F0A6                            ; Smashed block	fragment speeds
0000F0A6                            ;
0000F0A6 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F0AA 0600 FF00                  		dc.w $600, -$100
0000F0AE 0600 0100                  		dc.w $600, $100
0000F0B2 0400 0500                  		dc.w $400, $500
0000F0B6 0600 FA00                  		dc.w $600, -$600
0000F0BA 0800 FE00                  		dc.w $800, -$200
0000F0BE 0800 0200                  		dc.w $800, $200
0000F0C2 0600 0600                  		dc.w $600, $600
0000F0C6                            
0000F0C6 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F0CA F800 FE00                  		dc.w -$800, -$200
0000F0CE F800 0200                  		dc.w -$800, $200
0000F0D2 FA00 0600                  		dc.w -$600, $600
0000F0D6 FC00 FB00                  		dc.w -$400, -$500
0000F0DA FA00 FF00                  		dc.w -$600, -$100
0000F0DE FA00 0100                  		dc.w -$600, $100
0000F0E2 FC00 0500                  		dc.w -$400, $500
0000F0E6                            
0000F0E6                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F0E6                            ; ---------------------------------------------------------------------------
0000F0E6                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F0E6                            ; ---------------------------------------------------------------------------
0000F0E6                            Map_Smash_internal:
0000F0E6 0000                       		dc.w @left-Map_Smash_internal
0000F0E8 0000                       		dc.w @middle-Map_Smash_internal
0000F0EA 0000                       		dc.w @right-Map_Smash_internal
0000F0EC 08                         @left:		dc.b 8
0000F0ED E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F0F2 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F0F7 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F0FC 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F101 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F106 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F10B 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F110 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F115 08                         @middle:	dc.b 8
0000F116 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F11B F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F120 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F125 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F12A E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F12F F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F134 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F139 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F13E 08                         @right:		dc.b 8
0000F13F E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F144 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F149 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F14E 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F153 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F158 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F15D 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F162 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F168 00                         		even
0000F168 00                         		even
0000F168                            
0000F168                            ; ---------------------------------------------------------------------------
0000F168                            ; Object code execution subroutine
0000F168                            ; ---------------------------------------------------------------------------
0000F168                            
0000F168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F168                            
0000F168                            
0000F168                            
0000F168                            ExecuteObjects: ; XREF: GM_Title; et al
0000F168 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F16C 7E7F                       		moveq #$7F,d7
0000F16E 7000                       		moveq #0,d0
0000F170 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F176 6400                       		bcc.s loc_D362
0000F178                            
0000F178                            loc_D348:
0000F178 1010                       		move.b (a0),d0 ; load object number from RAM
0000F17A 6700                       		beq.s loc_D358
0000F17C D040                       		add.w d0,d0
0000F17E D040                       		add.w d0,d0
0000F180 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F184 4E91                       		jsr (a1) ; run the object's code
0000F186 7000                       		moveq #0,d0
0000F188                            
0000F188                            loc_D358:
0000F188 41E8 0040                  		lea $40(a0),a0 ; next object
0000F18C 51CF FFEA                  		dbf d7,loc_D348
0000F190 4E75                       		rts
0000F192                            ; ===========================================================================
0000F192                            
0000F192                            loc_D362:
0000F192 7E1F                       		moveq #$1F,d7
0000F194 61E2                       		bsr.s loc_D348
0000F196 7E5F                       		moveq #$5F,d7
0000F198                            
0000F198                            loc_D368:
0000F198 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F19A 1010                       		move.b (a0),d0 ; get the object's ID
0000F19C 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F19E 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F1A2 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F1A4 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F1A8 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F1AE 6700                       		beq.s loc_D378 ; if not, branch
0000F1B0 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F1B4                            
0000F1B4                            loc_D378:
0000F1B4 6100 0000                  		bsr.w DisplaySprite2
0000F1B8                            		
0000F1B8                            loc_D37C:
0000F1B8 41E8 0040                  		lea $40(a0),a0
0000F1BC 51CF FFDA                  		dbf d7,loc_D368
0000F1C0 4E75                       		rts
0000F1C2                            ; End of function ExecuteObjects
0000F1C2                            
0000F1C2                            ; ===========================================================================
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Object pointers
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            Obj_Index:
0000F1C2                            		include	"_inc\Object Pointers.asm"
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Object pointers
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F1C6 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F1CA 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F1CE 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F1D2 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F1D6 0000 AECC                  ptr_Mozzietron:		dc.l Mozzietron
0000F1DA 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F1DE 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F1E2 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F1E6 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F1EA 0000 0000                  ptr_Pole:		dc.l Pole
0000F1EE 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F1F2 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F1F6 0000 C2D6                  ptr_TitleSonic:		dc.l TitleSonic
0000F1FA 0000 C356                  ptr_PSBTM:		dc.l PSBTM
0000F1FE 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F202 0000 89DC                  ptr_Bridge:		dc.l Bridge
0000F206 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F20A 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F20E 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F212 0000 9002                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F216 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F21A 0000 934E                  ptr_Helix:		dc.l Helix
0000F21E 0000 94DA                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F222 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F226 0000 98B6                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F22A 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F22E 0000 9EBE                  ptr_Scenery:		dc.l Scenery
0000F232 0000 9F60                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F236 0000 A248                  ptr_BallHog:		dc.l BallHog
0000F23A 0000 ABE2                  ptr_Crabmeat:		dc.l Crabmeat
0000F23E 0000 A316                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F242 0000 0000                  ptr_HUD:		dc.l HUD
0000F246 0000 AFFE                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F24A 0000 B150                  ptr_Missile:		dc.l Missile
0000F24E 0000 A3E8                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F252 0000 B3AA                  ptr_Rings:		dc.l Rings
0000F256 0000 BBF4                  ptr_Monitor:		dc.l Monitor
0000F25A 0000 A458                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F25E 0000 A616                  ptr_Animals:		dc.l Animals		; $28
0000F262 0000 AB04                  ptr_Points:		dc.l Points
0000F266 0000 A036                  ptr_AutoDoor:		dc.l AutoDoor
0000F26A 0000 C900                  ptr_Chopper:		dc.l Chopper
0000F26E 0000 C9BA                  ptr_Jaws:		dc.l Jaws
0000F272 0000 CA84                  ptr_Burrobot:		dc.l Burrobot
0000F276 0000 BDF2                  ptr_PowerUp:		dc.l PowerUp
0000F27A 0000 CC98                  ptr_LargeGrass:		dc.l LargeGrass
0000F27E 0000 D17A                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F282 0000 D456                  ptr_ChainStomp:		dc.l ChainStomp
0000F286 0000 DB04                  ptr_Button:		dc.l Button
0000F28A 0000 DCA8                  ptr_PushBlock:		dc.l PushBlock
0000F28E 0000 E0DA                  ptr_TitleCard:		dc.l TitleCard
0000F292 0000 CFBA                  ptr_GrassFire:		dc.l GrassFire
0000F296 0000 EC22                  ptr_Spikes:		dc.l Spikes
0000F29A 0000 B606                  ptr_RingLoss:		dc.l RingLoss
0000F29E 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F2A2 0000 E28A                  ptr_GameOverCard:	dc.l GameOverCard
0000F2A6 0000 E348                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F2AA 0000 EE50                  ptr_PurpleRock:		dc.l PurpleRock
0000F2AE 0000 EF1C                  ptr_SmashWall:		dc.l SmashWall
0000F2B2 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F2B6 0000 0000                  ptr_Prison:		dc.l Prison
0000F2BA 0000 A4EA                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F2BE 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F2C2 0000 0000                  ptr_Springs:		dc.l Springs
0000F2C6 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F2CA 0000 0000                  ptr_Roller:		dc.l Roller
0000F2CE 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F2D2 0000 D772                  ptr_SideStomp:		dc.l SideStomp
0000F2D6 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F2DA 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F2DE 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F2E2 0000 EEBE                  ptr_WaterSound:		dc.l WaterSound
0000F2E6 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F2EA 0000 B8C8                  ptr_GiantRing:		dc.l GiantRing
0000F2EE 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F2F2 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F2F6 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F2FA 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F2FE 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F302 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F306 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F30A 0000 99C6                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F30E 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F312 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F316 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F31A 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F31E 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F322 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F326 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F32A 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F32E 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F332 0000 0000                  ptr_Fan:		dc.l Fan
0000F336 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F33A 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F33E 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F342 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F346 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F34A 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F34E 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F352 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F356 0000 0000                  ptr_Junction:		dc.l Junction
0000F35A 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F35E 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F362 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F366 0000 0000                  ptr_Saws:		dc.l Saws
0000F36A 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F36E 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F372 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F376 0000 0000                  ptr_Electro:		dc.l Electro
0000F37A 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F37E 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F382 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F386 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F38A 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F38E 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F392 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F396 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F39A 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F39E 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F3A2 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F3A6 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F3AA 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F3AE 0000 B9A2                  ptr_RingFlash:		dc.l RingFlash
0000F3B2 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F3B6 0000 E582                  ptr_SSResult:		dc.l SSResult
0000F3BA 0000 E728                  ptr_SSRChaos:		dc.l SSRChaos
0000F3BE 0000 5F46                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F3C2 0000 605E                  ptr_ContSonic:		dc.l ContSonic
0000F3C6 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F3CA 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F3CE 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F3D2 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F3D6 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F3DA 0000 64E4                  ptr_EndSonic:		dc.l EndSonic
0000F3DE 0000 663E                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F3E2 0000 6718                  ptr_EndSTH:		dc.l EndSTH
0000F3E6 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F3EA 0000 6992                  ptr_EndEggman:		dc.l EndEggman
0000F3EE 0000 6A72                  ptr_TryChaos:		dc.l TryChaos
0000F3F2                            
0000F3F2                            NullObject:
0000F3F2                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F3F2                            
0000F3F2 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F3F2 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F3F2 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F3F2 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F3F2 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F3F2 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F3F2 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F3F2 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F3F2 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F3F2 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F3F2 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F3F2 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F3F2 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F3F2 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F3F2 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F3F2 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F3F2 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F3F2 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F3F2 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F3F2 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F3F2 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F3F2 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F3F2 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F3F2 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F3F2 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F3F2 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F3F2 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F3F2 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F3F2 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F3F2 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F3F2 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F3F2 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F3F2 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F3F2 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F3F2 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F3F2 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F3F2 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F3F2 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F3F2 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F3F2 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F3F2 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F3F2 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F3F2 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F3F2 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F3F2 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F3F2 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F3F2 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F3F2 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F3F2 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F3F2 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F3F2 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F3F2 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F3F2 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F3F2 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F3F2 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F3F2 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F3F2 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F3F2 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F3F2 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F3F2 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F3F2 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F3F2 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F3F2 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F3F2 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F3F2 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F3F2 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F3F2 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F3F2 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F3F2 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F3F2 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F3F2 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F3F2 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F3F2 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F3F2 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F3F2 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F3F2 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F3F2 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F3F2 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F3F2 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F3F2 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F3F2 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F3F2 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F3F2 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F3F2 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F3F2 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F3F2 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F3F2 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F3F2 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F3F2 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F3F2 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F3F2 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F3F2 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F3F2 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F3F2 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F3F2 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F3F2 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F3F2 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F3F2 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F3F2 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F3F2 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F3F2 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F3F2 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F3F2 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F3F2 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F3F2 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F3F2 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F3F2 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F3F2 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F3F2 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F3F2 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F3F2 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F3F2 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F3F2 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F3F2 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F3F2 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F3F2 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F3F2 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F3F2 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F3F2 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F3F2 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F3F2 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F3F2 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F3F2 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F3F2 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F3F2 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F3F2 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F3F2 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F3F2 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F3F2 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F3F2 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F3F2 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F3F2 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F3F2 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F3F2 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F3F2 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F3F2 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F3F2 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F3F2 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F3F2 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F3F2 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F3F2 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F3F2                            
0000F3F2                            		include	"_incObj\sub ObjectFall.asm"
0000F3F2                            ; ---------------------------------------------------------------------------
0000F3F2                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F3F2                            ; ---------------------------------------------------------------------------
0000F3F2                            
0000F3F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F3F2                            
0000F3F2                            
0000F3F2                            ObjectFall:
0000F3F2 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F3F8 6700                       		beq.s	@donothing
0000F3FA 3028 0010                  		move.w	obVelX(a0),d0
0000F3FE 48C0                       		ext.l	d0
0000F400 E188                       		lsl.l	#8,d0
0000F402 D1A8 0008                  		add.l	d0,obX(a0)
0000F406 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F40C 6F00                               ble.s   @skipline       ; if yes, branch
0000F40E 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F414                                @skipline:		
0000F414 3028 0012                  		move.w	obVelY(a0),d0
0000F418 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F41E 48C0                       		ext.l	d0
0000F420 E188                       		lsl.l	#8,d0
0000F422 D1A8 000C                  		add.l	d0,obY(a0)
0000F426 4E75                       		rts	
0000F428                            	
0000F428                            	@donothing:
0000F428 4E75                       		rts
0000F42A                            
0000F42A                            ; End of function ObjectFall
0000F42A                            ; End of function ObjectFall
0000F42A                            		include	"_incObj\sub SpeedToPos.asm"
0000F42A                            ; ---------------------------------------------------------------------------
0000F42A                            ; Subroutine translating object	speed to update	object position
0000F42A                            ; ---------------------------------------------------------------------------
0000F42A                            
0000F42A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F42A                            
0000F42A                            
0000F42A                            SpeedToPos:
0000F42A 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F430 E188                       		lsl.l	#8,d0
0000F432 D1A8 0008                  		add.l	d0,obX(a0)
0000F436 E18A                       		lsl.l	#8,d2
0000F438 D5A8 000C                  		add.l	d2,obY(a0)
0000F43C 4E75                       		rts
0000F43E                            ; End of function SpeedToPos
0000F43E                            ; End of function SpeedToPos
0000F43E                            		include	"_incObj\sub DisplaySprite.asm"
0000F43E                            ; ---------------------------------------------------------------------------
0000F43E                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F43E                            ; ---------------------------------------------------------------------------
0000F43E                            
0000F43E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F43E                            
0000F43E                            
0000F43E                            DisplaySprite:
0000F43E 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F442 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F446 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F44A 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F44C 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F44E D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F450 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F452                            
0000F452                                DSpr_Full:
0000F452 4E75                               rts    
0000F454                            
0000F454                            ; End of function DisplaySprite
0000F454                            
0000F454                            
0000F454                            ; ---------------------------------------------------------------------------
0000F454                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F454                            ; ---------------------------------------------------------------------------
0000F454                            
0000F454                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F454                            
0000F454                            
0000F454                            DisplaySprite1:
0000F454 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F458 D4E9 0018                          adda.w  obpriority(a1),a2
0000F45C 0C52 007E                          cmpi.w    #$7E,(a2)
0000F460 6400                               bcc.s    DSpr1_Full
0000F462 5452                               addq.w    #2,(a2)
0000F464 D4D2                               adda.w    (a2),a2
0000F466 3489                               move.w    a1,(a2)
0000F468                            
0000F468                                DSpr1_Full:
0000F468 4E75                               rts    
0000F46A                            
0000F46A                            ; End of function DisplaySprite1
0000F46A                            
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F46A                            ; and d0 is already (priority/2)&$380
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            
0000F46A                            ; loc_16530:
0000F46A                            DisplaySprite2:
0000F46A 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F46E D2C0                           adda.w    d0,a1
0000F470 0C51 007E                      cmpi.w    #$7E,(a1)
0000F474 6400                           bhs.s    return_16542
0000F476 5451                           addq.w    #2,(a1)
0000F478 D2D1                           adda.w    (a1),a1
0000F47A 3288                           move.w    a0,(a1)
0000F47C                            
0000F47C                            return_16542:
0000F47C 4E75                           rts
0000F47C 4E75                           rts
0000F47E                            		include	"_incObj\sub DeleteObject.asm"
0000F47E                            ; ---------------------------------------------------------------------------
0000F47E                            ; Subroutine to	delete an object
0000F47E                            ; ---------------------------------------------------------------------------
0000F47E                            
0000F47E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F47E                            
0000F47E                            
0000F47E                            DeleteObject:
0000F47E 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F480                            
0000F480                            DeleteChild:				; child objects are already in (a1)
0000F480 7200                       		moveq	#0,d1
0000F482 700F                       		moveq	#$F,d0
0000F484                            
0000F484                            	DelObj_Loop:
0000F484 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F486 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F48A 4E75                       		rts	
0000F48C                            
0000F48C                            ; End of function DeleteObject
0000F48C                            ; End of function DeleteObject
0000F48C                            
0000F48C                            ; ===========================================================================
0000F48C 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F490 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F494 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F498 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            
0000F49C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F49C                            BuildSprites:                ; XREF: TitleScreen; et al
0000F49C 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F4A0 7A00                       		moveq	#0,d5
0000F4A2 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F4A6 7E07                       		moveq	#7,d7
0000F4A8                            		
0000F4A8                            loc_D66A:
0000F4A8 4A54                       		tst.w	(a4)
0000F4AA 6700 0000                  		beq.w	loc_D72E
0000F4AE 7C02                       		moveq	#2,d6
0000F4B0                            
0000F4B0                            loc_D672:
0000F4B0 3074 6000                          movea.w    (a4,d6.w),a0
0000F4B4 4A10                               tst.b    (a0)
0000F4B6 6700 0000                          beq.w    loc_D726
0000F4BA 08A8 0007 0001                     bclr    #7,1(a0)
0000F4C0 1028 0001                          move.b    1(a0),d0
0000F4C4 1800                               move.b    d0,d4
0000F4C6 0C10 0001                          cmpi.b    #1,(a0)    ; is this object is Sonic
0000F4CA 6700                               beq.s    @skip    ; if it is, branch
0000F4CC 0800 0006                          btst    #6,d0    ; is the multi-draw flag set?
0000F4D0 6600 0000                          bne.w   BuildSprites_MultiDraw    ; if it is, branch
0000F4D4                               @skip:
0000F4D4 0240 000C                  		andi.w	#$C,d0
0000F4D8 6700                       		beq.s	loc_D6DE
0000F4DA 227B 00B0                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000F4DE 7000                       		moveq	#0,d0
0000F4E0 1028 0014                  		move.b	width_pixels(a0),d0
0000F4E4 3628 0008                  		move.w	8(a0),d3
0000F4E8 9651                       		sub.w	(a1),d3
0000F4EA 3203                       		move.w	d3,d1
0000F4EC D240                       		add.w	d0,d1
0000F4EE 6B00 0000                  		bmi.w	loc_D726
0000F4F2 3203                       		move.w	d3,d1
0000F4F4 9240                       		sub.w	d0,d1
0000F4F6 0C41 0140                  		cmpi.w	#$140,d1
0000F4FA 6C00                       		bge.s	loc_D726
0000F4FC 0643 0080                  		addi.w	#$80,d3
0000F500 0804 0004                  		btst	#4,d4
0000F504 6700                       		beq.s	loc_D6E8
0000F506 7000                       		moveq	#0,d0
0000F508 1028 0016                  		move.b	$16(a0),d0
0000F50C 3428 000C                  		move.w	$C(a0),d2
0000F510 9469 0004                  		sub.w	4(a1),d2
0000F514 3202                       		move.w	d2,d1
0000F516 D240                       		add.w	d0,d1
0000F518 6B00                       		bmi.s	loc_D726
0000F51A 3202                       		move.w	d2,d1
0000F51C 9240                       		sub.w	d0,d1
0000F51E 0C41 00E0                  		cmpi.w	#$E0,d1
0000F522 6C00                       		bge.s	loc_D726
0000F524 0642 0080                  		addi.w	#$80,d2
0000F528 6000                       		bra.s	loc_D700
0000F52A                            ; ===========================================================================
0000F52A                            
0000F52A                            loc_D6DE:
0000F52A 3428 000A                  		move.w	$A(a0),d2
0000F52E 3628 0008                  		move.w	8(a0),d3
0000F532 6000                       		bra.s	loc_D700
0000F534                            ; ===========================================================================
0000F534                            
0000F534                            loc_D6E8:
0000F534 3428 000C                  		move.w	$C(a0),d2
0000F538 9469 0004                  		sub.w	4(a1),d2
0000F53C 0642 0080                  		addi.w	#$80,d2
0000F540 0C42 0060                  		cmpi.w	#$60,d2
0000F544 6500                       		bcs.s	loc_D726
0000F546 0C42 0180                  		cmpi.w	#$180,d2
0000F54A 6400                       		bcc.s	loc_D726
0000F54C                            
0000F54C                            loc_D700:
0000F54C 2268 0004                  		movea.l	4(a0),a1
0000F550 7200                       		moveq	#0,d1
0000F552 0804 0005                  		btst	#5,d4
0000F556 6600                       		bne.s	loc_D71C
0000F558 1228 001A                  		move.b	$1A(a0),d1
0000F55C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000F55E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000F562 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000F564 1219                       		move.b	(a1)+,d1
0000F566 5301                       		subq.b	#1,d1
0000F568 6B00                       		bmi.s	loc_D720
0000F56A                            
0000F56A                            loc_D71C:
0000F56A 4EB9 0000 0000             		jsr	sub_D750
0000F570                            
0000F570                            loc_D720:
0000F570 08E8 0007 0001             		bset	#7,1(a0)
0000F576                            
0000F576                            loc_D726:
0000F576 5446                       		addq.w	#2,d6
0000F578 5554                       		subq.w	#2,(a4)
0000F57A 6600 FF34                  		bne.w	loc_D672
0000F57E                            
0000F57E                            loc_D72E:
0000F57E 49EC 0080                  		lea	$80(a4),a4
0000F582 51CF FF24                  		dbf	d7,loc_D66A
0000F586 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000F58A 0C05 0050                  		cmpi.b	#$50,d5
0000F58E 6700                       		beq.s	loc_D748
0000F590 24BC 0000 0000             		move.l	#0,(a2)
0000F596 4E75                       		rts	
0000F598                            ; ===========================================================================
0000F598                            
0000F598                            loc_D748:
0000F598 157C 0000 FFFB             		move.b	#0,-5(a2)
0000F59E 4E75                       		rts	
0000F5A0                            ; End of function BuildSprites
0000F5A0                            
0000F5A0                            BuildSprites_MultiDraw:
0000F5A0 2F0C                       	move.l	a4,-(sp)
0000F5A2 49F8 F700                  	lea	($FFFFF700).w,a4
0000F5A6 3668 0002                  	movea.w	art_tile(a0),a3
0000F5AA 2A68 0004                  	movea.l	mappings(a0),a5
0000F5AE 7000                       	moveq	#0,d0
0000F5B0                            
0000F5B0                            	; check if object is within X bounds
0000F5B0 1028 000E                  	move.b	mainspr_width(a0),d0	; load pixel width
0000F5B4 3628 0008                  	move.w	x_pos(a0),d3
0000F5B8 9654                       	sub.w	(a4),d3
0000F5BA 3203                       	move.w	d3,d1                            
0000F5BC D240                       	add.w	d0,d1                            ; is the object right edge to the left of the screen? 
0000F5BE 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F5C2 3203                       	move.w	d3,d1
0000F5C4 9240                       	sub.w	d0,d1
0000F5C6 0C41 0140                  	cmpi.w	#320,d1                          ; is the object left edge to the right of the screen?
0000F5CA 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj   ; if it is, branch
0000F5CE 0643 0080                  	addi.w	#128,d3
0000F5D2                            
0000F5D2                            	; check if object is within Y bounds
0000F5D2 0804 0004                  	btst	#4,d4                            ; is the accurate Y check flag set?
0000F5D6 6700                       	beq.s	BuildSpritesMulti_ApproxYCheck
0000F5D8 7000                       	moveq	#0,d0
0000F5DA 1028 0014                  	move.b	mainspr_height(a0),d0	         ; load pixel height
0000F5DE 3428 000C                  	move.w	y_pos(a0),d2
0000F5E2 946C 0004                  	sub.w	4(a4),d2
0000F5E6 3202                       	move.w	d2,d1
0000F5E8 D240                       	add.w	d0,d1
0000F5EA 6B00 0000                  	bmi.w	BuildSprites_MultiDraw_NextObj  ; if the object is above the screen
0000F5EE 3202                       	move.w	d2,d1
0000F5F0 9240                       	sub.w	d0,d1
0000F5F2 0C41 00E0                  	cmpi.w	#224,d1
0000F5F6 6C00 0000                  	bge.w	BuildSprites_MultiDraw_NextObj  ; if the object is below the screen
0000F5FA 0642 0080                  	addi.w	#128,d2
0000F5FE 6000                       	bra.s	BuildSpritesMulti_DrawSprite
0000F600                            BuildSpritesMulti_ApproxYCheck:
0000F600 3428 000C                  	move.w	y_pos(a0),d2
0000F604 946C 0004                  	sub.w	4(a4),d2
0000F608 0642 0080                  	addi.w	#128,d2
0000F60C 0242 07FF                  	andi.w	#$7FF,d2
0000F610 0C42 0060                  	cmpi.w	#-32+128,d2
0000F614 6500                       	blo.s	BuildSprites_MultiDraw_NextObj
0000F616 0C42 0180                  	cmpi.w	#32+128+224,d2
0000F61A 6400                       	bhs.s	BuildSprites_MultiDraw_NextObj
0000F61C                            BuildSpritesMulti_DrawSprite:
0000F61C 7200                       	moveq	#0,d1
0000F61E 1228 000B                  	move.b	mainspr_mapframe(a0),d1	         ; get current frame
0000F622 6700                       	beq.s	.noparenttodraw
0000F624 D241                       	add.w	d1,d1
0000F626 224D                       	movea.l	a5,a1                            ; a5 is mappings(a0), copy to a1
0000F628 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F62C 7200                       	moveq	#0,d1
0000F62E 1219                       	move.b	(a1)+,d1
0000F630 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F632 6B00                       	bmi.s	.noparenttodraw                  ; if there are 0 pieces, branch
0000F634 3F04                       	move.w	d4,-(sp)
0000F636 4EB9 0000 0000             	jsr	ChkDrawSprite	                 ; draw the sprite
0000F63C 381F                       	move.w	(sp)+,d4
0000F63E                            .noparenttodraw:
0000F63E 0028 0080 0001             	ori.b	#$80,render_flags(a0)	         ; set onscreen flag
0000F644 4DE8 0010                  	lea	sub2_x_pos(a0),a6                ; address of first child sprite info
0000F648 7000                       	moveq	#0,d0
0000F64A 1028 000F                  	move.b	mainspr_childsprites(a0),d0	 ; get child sprite count
0000F64E 5340                       	subq.w	#1,d0		                 ; if there are 0, go to next object
0000F650 6500                       	bcs.s	BuildSprites_MultiDraw_NextObj
0000F652                            
0000F652                            @drawchildloop:
0000F652 4840                       	swap	d0
0000F654 361E                       	move.w	(a6)+,d3	                 ; get X pos
0000F656 9654                       	sub.w	(a4),d3                          ; subtract the screen's x position
0000F658 0643 0080                  	addi.w	#128,d3
0000F65C 341E                       	move.w	(a6)+,d2	                 ; get Y pos
0000F65E 946C 0004                  	sub.w	4(a4),d2   ; subtract the screen's y position
0000F662 0642 0080                  	addi.w	#128,d2
0000F666 0242 07FF                  	andi.w	#$7FF,d2
0000F66A 524E                       	addq.w	#1,a6
0000F66C 7200                       	moveq	#0,d1
0000F66E 121E                       	move.b	(a6)+,d1	                 ; get mapping frame
0000F670 D241                       	add.w	d1,d1
0000F672 224D                       	movea.l	a5,a1
0000F674 D2F1 1000                  	adda.w	(a1,d1.w),a1
0000F678 7200                       	moveq	#0,d1
0000F67A 1219                       	move.b	(a1)+,d1
0000F67C 5301                       	subq.b	#1,d1                            ; get number of pieces
0000F67E 6B00                       	bmi.s	@nochildleft                     ; if there are 0 pieces, branch
0000F680 3F04                       	move.w	d4,-(sp)
0000F682 4EB9 0000 0000             	jsr	ChkDrawSprite
0000F688 381F                       	move.w	(sp)+,d4
0000F68A                            @nochildleft:
0000F68A 4840                       	swap	d0
0000F68C 51C8 FFC4                  	dbf	d0,@drawchildloop	         ; repeat for number of child sprites
0000F690                            ; loc_16804:
0000F690                            BuildSprites_MultiDraw_NextObj:
0000F690 285F                       	movea.l	(sp)+,a4
0000F692 6000 FEE2                  	bra.w	loc_D726; End of function BuildSprites
0000F696                            
0000F696                            
0000F696                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000F696                            
0000F696                            ; sub_1680A:
0000F696                            ChkDrawSprite:
0000F696 0C05 0050                  	cmpi.b	#80,d5		; has the sprite limit been reached?
0000F69A 6500                       	blo.s	loc_1681C	; if it hasn't, branch
0000F69C 4E75                       	rts	; otherwise, return
0000F69E                            
0000F69E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F69E                            
0000F69E                            
0000F69E                            sub_D750:				; XREF: BuildSprites
0000F69E 3668 0002                  		movea.w	2(a0),a3
0000F6A2                            loc_1681C:
0000F6A2 0804 0000                  		btst	#0,d4
0000F6A6 6600                       		bne.s	loc_D796
0000F6A8 0804 0001                  		btst	#1,d4
0000F6AC 6600 0000                  		bne.w	loc_D7E4
0000F6B0                            ; End of function sub_D750
0000F6B0                            
0000F6B0                            
0000F6B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6B0                            
0000F6B0                            
0000F6B0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000F6B0 0C05 0050                  		cmpi.b	#$50,d5
0000F6B4 6700                       		beq.s	locret_D794
0000F6B6                            sub_D762_2:				; XREF: sub_D762; SS_ShowLayout
0000F6B6 1019                       		move.b	(a1)+,d0
0000F6B8 4880                       		ext.w	d0
0000F6BA D042                       		add.w	d2,d0
0000F6BC 34C0                       		move.w	d0,(a2)+
0000F6BE 14D9                       		move.b	(a1)+,(a2)+
0000F6C0 5205                       		addq.b	#1,d5
0000F6C2 14C5                       		move.b	d5,(a2)+
0000F6C4 1019                       		move.b	(a1)+,d0
0000F6C6 E148                       		lsl.w	#8,d0
0000F6C8 1019                       		move.b	(a1)+,d0
0000F6CA D04B                       		add.w	a3,d0
0000F6CC 34C0                       		move.w	d0,(a2)+
0000F6CE 1019                       		move.b	(a1)+,d0
0000F6D0 4880                       		ext.w	d0
0000F6D2 D043                       		add.w	d3,d0
0000F6D4 0240 01FF                  		andi.w	#$1FF,d0
0000F6D8 6600                       		bne.s	loc_D78E
0000F6DA 5240                       		addq.w	#1,d0
0000F6DC                            
0000F6DC                            loc_D78E:
0000F6DC 34C0                       		move.w	d0,(a2)+
0000F6DE 51C9 FFD0                  		dbf	d1,sub_D762
0000F6E2                            
0000F6E2                            locret_D794:
0000F6E2 4E75                       		rts
0000F6E4                            ; End of function sub_D762
0000F6E4                            
0000F6E4                            ; ===========================================================================
0000F6E4                            
0000F6E4                            loc_D796:
0000F6E4 0804 0001                  		btst	#1,d4
0000F6E8 6600 0000                  		bne.w	loc_D82A
0000F6EC                            
0000F6EC                            loc_D79E:
0000F6EC 0C05 0050                  		cmpi.b	#$50,d5
0000F6F0 6700                       		beq.s	locret_D7E2
0000F6F2 1019                       		move.b	(a1)+,d0
0000F6F4 4880                       		ext.w	d0
0000F6F6 D042                       		add.w	d2,d0
0000F6F8 34C0                       		move.w	d0,(a2)+
0000F6FA 1819                       		move.b	(a1)+,d4
0000F6FC 14C4                       		move.b	d4,(a2)+
0000F6FE 5205                       		addq.b	#1,d5
0000F700 14C5                       		move.b	d5,(a2)+
0000F702 1019                       		move.b	(a1)+,d0
0000F704 E148                       		lsl.w	#8,d0
0000F706 1019                       		move.b	(a1)+,d0
0000F708 D04B                       		add.w	a3,d0
0000F70A 0A40 0800                  		eori.w	#$800,d0
0000F70E 34C0                       		move.w	d0,(a2)+
0000F710 1019                       		move.b	(a1)+,d0
0000F712 4880                       		ext.w	d0
0000F714 4440                       		neg.w	d0
0000F716 D804                       		add.b	d4,d4
0000F718 0244 0018                  		andi.w	#$18,d4
0000F71C 5044                       		addq.w	#8,d4
0000F71E 9044                       		sub.w	d4,d0
0000F720 D043                       		add.w	d3,d0
0000F722 0240 01FF                  		andi.w	#$1FF,d0
0000F726 6600                       		bne.s	loc_D7DC
0000F728 5240                       		addq.w	#1,d0
0000F72A                            
0000F72A                            loc_D7DC:
0000F72A 34C0                       		move.w	d0,(a2)+
0000F72C 51C9 FFBE                  		dbf	d1,loc_D79E
0000F730                            
0000F730                            locret_D7E2:
0000F730 4E75                       		rts
0000F732                            ; ===========================================================================
0000F732                            
0000F732                            loc_D7E4:				; XREF: sub_D750
0000F732 0C05 0050                  		cmpi.b	#$50,d5
0000F736 6700                       		beq.s	locret_D828
0000F738 1019                       		move.b	(a1)+,d0
0000F73A 1811                       		move.b	(a1),d4
0000F73C 4880                       		ext.w	d0
0000F73E 4440                       		neg.w	d0
0000F740 E70C                       		lsl.b	#3,d4
0000F742 0244 0018                  		andi.w	#$18,d4
0000F746 5044                       		addq.w	#8,d4
0000F748 9044                       		sub.w	d4,d0
0000F74A D042                       		add.w	d2,d0
0000F74C 34C0                       		move.w	d0,(a2)+
0000F74E 14D9                       		move.b	(a1)+,(a2)+
0000F750 5205                       		addq.b	#1,d5
0000F752 14C5                       		move.b	d5,(a2)+
0000F754 1019                       		move.b	(a1)+,d0
0000F756 E148                       		lsl.w	#8,d0
0000F758 1019                       		move.b	(a1)+,d0
0000F75A D04B                       		add.w	a3,d0
0000F75C 0A40 1000                  		eori.w	#$1000,d0
0000F760 34C0                       		move.w	d0,(a2)+
0000F762 1019                       		move.b	(a1)+,d0
0000F764 4880                       		ext.w	d0
0000F766 D043                       		add.w	d3,d0
0000F768 0240 01FF                  		andi.w	#$1FF,d0
0000F76C 6600                       		bne.s	loc_D822
0000F76E 5240                       		addq.w	#1,d0
0000F770                            
0000F770                            loc_D822:
0000F770 34C0                       		move.w	d0,(a2)+
0000F772 51C9 FFBE                  		dbf	d1,loc_D7E4
0000F776                            
0000F776                            locret_D828:
0000F776 4E75                       		rts
0000F778                            ; ===========================================================================
0000F778                            
0000F778                            loc_D82A:
0000F778 0C05 0050                  		cmpi.b	#$50,d5
0000F77C 6700                       		beq.s	locret_D87C
0000F77E 1019                       		move.b	(a1)+,d0
0000F780 1811                       		move.b	(a1),d4
0000F782 4880                       		ext.w	d0
0000F784 4440                       		neg.w	d0
0000F786 E70C                       		lsl.b	#3,d4
0000F788 0244 0018                  		andi.w	#$18,d4
0000F78C 5044                       		addq.w	#8,d4
0000F78E 9044                       		sub.w	d4,d0
0000F790 D042                       		add.w	d2,d0
0000F792 34C0                       		move.w	d0,(a2)+
0000F794 1819                       		move.b	(a1)+,d4
0000F796 14C4                       		move.b	d4,(a2)+
0000F798 5205                       		addq.b	#1,d5
0000F79A 14C5                       		move.b	d5,(a2)+
0000F79C 1019                       		move.b	(a1)+,d0
0000F79E E148                       		lsl.w	#8,d0
0000F7A0 1019                       		move.b	(a1)+,d0
0000F7A2 D04B                       		add.w	a3,d0
0000F7A4 0A40 1800                  		eori.w	#$1800,d0
0000F7A8 34C0                       		move.w	d0,(a2)+
0000F7AA 1019                       		move.b	(a1)+,d0
0000F7AC 4880                       		ext.w	d0
0000F7AE 4440                       		neg.w	d0
0000F7B0 D804                       		add.b	d4,d4
0000F7B2 0244 0018                  		andi.w	#$18,d4
0000F7B6 5044                       		addq.w	#8,d4
0000F7B8 9044                       		sub.w	d4,d0
0000F7BA D043                       		add.w	d3,d0
0000F7BC 0240 01FF                  		andi.w	#$1FF,d0
0000F7C0 6600                       		bne.s	loc_D876
0000F7C2 5240                       		addq.w	#1,d0
0000F7C4                            
0000F7C4                            loc_D876:
0000F7C4 34C0                       		move.w	d0,(a2)+
0000F7C6 51C9 FFB0                  		dbf	d1,loc_D82A
0000F7CA                            
0000F7CA                            locret_D87C:
0000F7CA 4E75                       		rts
0000F7CC                            ; End of function BuildSpr_Normal
0000F7CC                            
0000F7CC                            ; ===========================================================================
0000F7CC                            
0000F7CC                            		include	"_incObj\sub ChkObjectVisible.asm"
0000F7CC                            ; ---------------------------------------------------------------------------
0000F7CC                            ; Subroutine to	check if an object is off screen
0000F7CC                            
0000F7CC                            ; output:
0000F7CC                            ;	d0 = flag set if object is off screen
0000F7CC                            ; ---------------------------------------------------------------------------
0000F7CC                            
0000F7CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7CC                            
0000F7CC                            
0000F7CC                            ChkObjectVisible:
0000F7CC 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F7D0 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F7D4 6B00                       		bmi.s	@offscreen
0000F7D6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000F7DA 6C00                       		bge.s	@offscreen	; if not, branch
0000F7DC                            
0000F7DC 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000F7E0 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000F7E4 6B00                       		bmi.s	@offscreen
0000F7E6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000F7EA 6C00                       		bge.s	@offscreen	; if not, branch
0000F7EC                            
0000F7EC 7000                       		moveq	#0,d0		; set flag to 0
0000F7EE 4E75                       		rts	
0000F7F0                            
0000F7F0                            	@offscreen:
0000F7F0 7001                       		moveq	#1,d0		; set flag to 1
0000F7F2 4E75                       		rts	
0000F7F4                            ; End of function ChkObjectVisible
0000F7F4                            
0000F7F4                            ; ---------------------------------------------------------------------------
0000F7F4                            ; Subroutine to	check if an object is off screen
0000F7F4                            ; More precise than above subroutine, taking width into account
0000F7F4                            
0000F7F4                            ; output:
0000F7F4                            ;	d0 = flag set if object is off screen
0000F7F4                            ; ---------------------------------------------------------------------------
0000F7F4                            
0000F7F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7F4                            
0000F7F4                            
0000F7F4                            ChkPartiallyVisible:
0000F7F4 7200                       		moveq	#0,d1
0000F7F6 1228 0014                  		move.b	obActWid(a0),d1
0000F7FA 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000F7FE 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000F802 D041                       		add.w	d1,d0		; add object width
0000F804 6B00                       		bmi.s	@offscreen2
0000F806 D241                       		add.w	d1,d1
0000F808 9041                       		sub.w	d1,d0
0000F80A 0C40 0140                  		cmpi.w	#320,d0
0000F80E 6C00                       		bge.s	@offscreen2
0000F810                            
0000F810 3228 000C                  		move.w	obY(a0),d1
0000F814 9278 F704                  		sub.w	(v_screenposy).w,d1
0000F818 6B00                       		bmi.s	@offscreen2
0000F81A 0C41 00E0                  		cmpi.w	#224,d1
0000F81E 6C00                       		bge.s	@offscreen2
0000F820                            
0000F820 7000                       		moveq	#0,d0
0000F822 4E75                       		rts	
0000F824                            
0000F824                            	@offscreen2:
0000F824 7001                       		moveq	#1,d0
0000F826 4E75                       		rts	
0000F828                            ; End of function ChkPartiallyVisible
0000F828                            ; End of function ChkPartiallyVisible
0000F828                            
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            ; Subroutine to	load a level's objects
0000F828                            ; ---------------------------------------------------------------------------
0000F828                            
0000F828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F828                            
0000F828                            
0000F828                            ObjPosLoad:
0000F828 7000                       		moveq	#0,d0
0000F82A 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000F82E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000F832 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000F836                            ; End of function ObjPosLoad
0000F836                            
0000F836                            ; ===========================================================================
0000F836 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000F838 0000                       		dc.w OPL_Next-OPL_Index
0000F83A                            ; ===========================================================================
0000F83A                            
0000F83A                            OPL_Main:
0000F83A 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000F83E 3038 FE10                  		move.w	(v_zone).w,d0
0000F842 ED08                       		lsl.b	#6,d0
0000F844 E848                       		lsr.w	#4,d0
0000F846 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000F84C 2248                       		movea.l	a0,a1
0000F84E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000F852 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F856 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F85A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000F85E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000F862 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000F866 45F8 FC00                  		lea	(v_objstate).w,a2
0000F86A 34FC 0101                  		move.w	#$101,(a2)+
0000F86E 303C 005E                  		move.w	#$5E,d0
0000F872                            
0000F872                            OPL_ClrList:
0000F872 429A                       		clr.l	(a2)+
0000F874 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000F878                            
0000F878 45F8 FC00                  		lea	(v_objstate).w,a2
0000F87C 7400                       		moveq	#0,d2
0000F87E 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F882 0446 0080                  		subi.w	#$80,d6
0000F886 6400                       		bhs.s	loc_D93C
0000F888 7C00                       		moveq	#0,d6
0000F88A                            
0000F88A                            loc_D93C:
0000F88A 0246 FF80                  		andi.w	#$FF80,d6
0000F88E 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F892                            
0000F892                            loc_D944:
0000F892 BC50                       		cmp.w	(a0),d6
0000F894 6300                       		bls.s	loc_D956
0000F896 4A28 0004                  		tst.b	4(a0)
0000F89A 6A00                       		bpl.s	loc_D952
0000F89C 1412                       		move.b	(a2),d2
0000F89E 5212                       		addq.b	#1,(a2)
0000F8A0                            
0000F8A0                            loc_D952:
0000F8A0 5C48                       		addq.w	#6,a0
0000F8A2 60EE                       		bra.s	loc_D944
0000F8A4                            ; ===========================================================================
0000F8A4                            
0000F8A4                            loc_D956:
0000F8A4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F8A8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F8AC 0446 0080                  		subi.w	#$80,d6
0000F8B0 6500                       		blo.s	loc_D976
0000F8B2                            
0000F8B2                            loc_D964:
0000F8B2 BC50                       		cmp.w	(a0),d6
0000F8B4 6300                       		bls.s	loc_D976
0000F8B6 4A28 0004                  		tst.b	4(a0)
0000F8BA 6A00                       		bpl.s	loc_D972
0000F8BC 522A 0001                  		addq.b	#1,1(a2)
0000F8C0                            
0000F8C0                            loc_D972:
0000F8C0 5C48                       		addq.w	#6,a0
0000F8C2 60EE                       		bra.s	loc_D964
0000F8C4                            ; ===========================================================================
0000F8C4                            
0000F8C4                            loc_D976:
0000F8C4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F8C8 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000F8CE                            
0000F8CE                            OPL_Next:
0000F8CE 45F8 FC00                  		lea	(v_objstate).w,a2
0000F8D2 7400                       		moveq	#0,d2
0000F8D4 3C38 F700                  		move.w	(v_screenposx).w,d6
0000F8D8 0246 FF80                  		andi.w	#$FF80,d6
0000F8DC BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000F8E0 6700 0000                  		beq.w	locret_DA3A
0000F8E4 6C00                       		bge.s	loc_D9F6
0000F8E6 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F8EA 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F8EE 0446 0080                  		subi.w	#$80,d6
0000F8F2 6500                       		blo.s	loc_D9D2
0000F8F4                            
0000F8F4                            loc_D9A6:
0000F8F4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000F8F8 6C00                       		bge.s	loc_D9D2
0000F8FA 5D48                       		subq.w	#6,a0
0000F8FC 4A28 0004                  		tst.b	4(a0)
0000F900 6A00                       		bpl.s	loc_D9BC
0000F902 532A 0001                  		subq.b	#1,1(a2)
0000F906 142A 0001                  		move.b	1(a2),d2
0000F90A                            
0000F90A                            loc_D9BC:
0000F90A 6100 0000                  		bsr.w	loc_DA3C
0000F90E 6600                       		bne.s	loc_D9C6
0000F910 5D48                       		subq.w	#6,a0
0000F912 60E0                       		bra.s	loc_D9A6
0000F914                            ; ===========================================================================
0000F914                            
0000F914                            loc_D9C6:
0000F914 4A28 0004                  		tst.b	4(a0)
0000F918 6A00                       		bpl.s	loc_D9D0
0000F91A 522A 0001                  		addq.b	#1,1(a2)
0000F91E                            
0000F91E                            loc_D9D0:
0000F91E 5C48                       		addq.w	#6,a0
0000F920                            
0000F920                            loc_D9D2:
0000F920 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F924 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F928 0646 0300                  		addi.w	#$300,d6
0000F92C                            
0000F92C                            loc_D9DE:
0000F92C BC68 FFFA                  		cmp.w	-6(a0),d6
0000F930 6E00                       		bgt.s	loc_D9F0
0000F932 4A28 FFFE                  		tst.b	-2(a0)
0000F936 6A00                       		bpl.s	loc_D9EC
0000F938 5312                       		subq.b	#1,(a2)
0000F93A                            
0000F93A                            loc_D9EC:
0000F93A 5D48                       		subq.w	#6,a0
0000F93C 60EE                       		bra.s	loc_D9DE
0000F93E                            ; ===========================================================================
0000F93E                            
0000F93E                            loc_D9F0:
0000F93E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F942 4E75                       		rts	
0000F944                            ; ===========================================================================
0000F944                            
0000F944                            loc_D9F6:
0000F944 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000F948 2078 F770                  		movea.l	(v_opl_data).w,a0
0000F94C 0646 0280                  		addi.w	#$280,d6
0000F950                            
0000F950                            loc_DA02:
0000F950 BC50                       		cmp.w	(a0),d6
0000F952 6300                       		bls.s	loc_DA16
0000F954 4A28 0004                  		tst.b	4(a0)
0000F958 6A00                       		bpl.s	loc_DA10
0000F95A 1412                       		move.b	(a2),d2
0000F95C 5212                       		addq.b	#1,(a2)
0000F95E                            
0000F95E                            loc_DA10:
0000F95E 6100 0000                  		bsr.w	loc_DA3C
0000F962 67EC                       		beq.s	loc_DA02
0000F964                            
0000F964                            loc_DA16:
0000F964 21C8 F770                  		move.l	a0,(v_opl_data).w
0000F968 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000F96C 0446 0300                  		subi.w	#$300,d6
0000F970 6500                       		blo.s	loc_DA36
0000F972                            
0000F972                            loc_DA24:
0000F972 BC50                       		cmp.w	(a0),d6
0000F974 6300                       		bls.s	loc_DA36
0000F976 4A28 0004                  		tst.b	4(a0)
0000F97A 6A00                       		bpl.s	loc_DA32
0000F97C 522A 0001                  		addq.b	#1,1(a2)
0000F980                            
0000F980                            loc_DA32:
0000F980 5C48                       		addq.w	#6,a0
0000F982 60EE                       		bra.s	loc_DA24
0000F984                            ; ===========================================================================
0000F984                            
0000F984                            loc_DA36:
0000F984 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000F988                            
0000F988                            locret_DA3A:
0000F988 4E75                       		rts	
0000F98A                            ; ===========================================================================
0000F98A                            
0000F98A                            loc_DA3C:
0000F98A 4A28 0004                  		tst.b	4(a0)
0000F98E 6A00                       		bpl.s	OPL_MakeItem
0000F990 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000F996 6700                       		beq.s	OPL_MakeItem
0000F998 5C48                       		addq.w	#6,a0
0000F99A 7000                       		moveq	#0,d0
0000F99C 4E75                       		rts	
0000F99E                            ; ===========================================================================
0000F99E                            
0000F99E                            OPL_MakeItem:
0000F99E 6100 0000                  		bsr.w	FindFreeObj
0000F9A2 6600                       		bne.s	locret_DA8A
0000F9A4 3358 0008                  		move.w	(a0)+,obX(a1)
0000F9A8 3018                       		move.w	(a0)+,d0
0000F9AA 3200                       		move.w	d0,d1
0000F9AC 0240 0FFF                  		andi.w	#$FFF,d0
0000F9B0 3340 000C                  		move.w	d0,obY(a1)
0000F9B4 E559                       		rol.w	#2,d1
0000F9B6 0201 0003                  		andi.b	#3,d1
0000F9BA 1341 0001                  		move.b	d1,obRender(a1)
0000F9BE 1341 0022                  		move.b	d1,obStatus(a1)
0000F9C2 1018                       		move.b	(a0)+,d0
0000F9C4 6A00                       		bpl.s	loc_DA80
0000F9C6 0200 007F                  		andi.b	#$7F,d0
0000F9CA 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000F9CE                            
0000F9CE                            loc_DA80:
0000F9CE 1280                       		move.b	d0,0(a1)
0000F9D0 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000F9D4 7000                       		moveq	#0,d0
0000F9D6                            
0000F9D6                            locret_DA8A:
0000F9D6 4E75                       		rts	
0000F9D8                            
0000F9D8                            		include	"_incObj\sub FindFreeObj.asm"
0000F9D8                            ; ---------------------------------------------------------------------------
0000F9D8                            ; Subroutine to find a free object space
0000F9D8                            
0000F9D8                            ; output:
0000F9D8                            ;	a1 = free position in object RAM
0000F9D8                            ; ---------------------------------------------------------------------------
0000F9D8                            
0000F9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9D8                            
0000F9D8                            
0000F9D8                            FindFreeObj:
0000F9D8 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000F9DC 303C 005F                  		move.w	#$5F,d0
0000F9E0                            
0000F9E0                            	FFree_Loop:
0000F9E0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000F9E2 6700                       		beq.s	FFree_Found	; if yes, branch
0000F9E4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000F9E8 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000F9EC                            
0000F9EC                            	FFree_Found:
0000F9EC 4E75                       		rts	
0000F9EE                            
0000F9EE                            ; End of function FindFreeObj
0000F9EE                            
0000F9EE                            
0000F9EE                            ; ---------------------------------------------------------------------------
0000F9EE                            ; Subroutine to find a free object space AFTER the current one
0000F9EE                            
0000F9EE                            ; output:
0000F9EE                            ;	a1 = free position in object RAM
0000F9EE                            ; ---------------------------------------------------------------------------
0000F9EE                            
0000F9EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9EE                            
0000F9EE                            
0000F9EE                            FindNextFreeObj:
0000F9EE 2248                       		movea.l	a0,a1
0000F9F0 303C F000                  		move.w	#$F000,d0
0000F9F4 9048                       		sub.w	a0,d0
0000F9F6 EC48                       		lsr.w	#6,d0
0000F9F8 5340                       		subq.w	#1,d0
0000F9FA 6500                       		bcs.s	NFree_Found
0000F9FC                            
0000F9FC                            	NFree_Loop:
0000F9FC 4A11                       		tst.b	(a1)
0000F9FE 6700                       		beq.s	NFree_Found
0000FA00 43E9 0040                  		lea	$40(a1),a1
0000FA04 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FA08                            
0000FA08                            	NFree_Found:
0000FA08 4E75                       		rts	
0000FA0A                            
0000FA0A                            ; End of function FindNextFreeObj
0000FA0A                            ; End of function FindNextFreeObj
0000FA0A                            		include	"_incObj\41 Springs.asm"
0000FA0A                            ; ---------------------------------------------------------------------------
0000FA0A                            ; Object 41 - springs
0000FA0A                            ; ---------------------------------------------------------------------------
0000FA0A                            
0000FA0A                            Springs:
0000FA0A 7000                       		moveq	#0,d0
0000FA0C 1028 0024                  		move.b	obRoutine(a0),d0
0000FA10 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FA14 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FA18 6100 FA24                  		bsr.w	DisplaySprite
0000FA3A 4E75                       		rts	
0000FA3C                            ; ===========================================================================
0000FA3C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FA3E 0000                       		dc.w Spring_Up-Spring_Index
0000FA40 0000                       		dc.w Spring_AniUp-Spring_Index
0000FA42 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FA44 0000                       		dc.w Spring_LR-Spring_Index
0000FA46 0000                       		dc.w Spring_AniLR-Spring_Index
0000FA48 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FA4A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FA4C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FA4E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FA50                            
0000FA50 =00000030                  spring_pow:	equ $30			; power of current spring
0000FA50                            
0000FA50 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FA52 F600                       		dc.w -$A00		; power	of yellow spring
0000FA54                            ; ===========================================================================
0000FA54                            
0000FA54                            Spring_Main:	; Routine 0
0000FA54 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FA58 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FA60 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FA66 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FA6C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FA72 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FA78 1028 0028                  		move.b	obSubtype(a0),d0
0000FA7C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FA80 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FA82                            
0000FA82 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FA88 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FA8E 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FA94 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FA9A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FAA0                            
0000FAA0                            	Spring_NotLR:
0000FAA0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FAA4 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FAA6                            
0000FAA6 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FAAC 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FAB2                            
0000FAB2                            	Spring_NotDwn:
0000FAB2 0800 0001                  		btst	#1,d0
0000FAB6 6700                       		beq.s	loc_DB72
0000FAB8 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FABE                            
0000FABE                            loc_DB72:
0000FABE 0240 000F                  		andi.w	#$F,d0
0000FAC2 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FAC8 4E75                       		rts	
0000FACA                            ; ===========================================================================
0000FACA                            
0000FACA                            Spring_Up:	; Routine 2
0000FACA 323C 001B                  		move.w	#$1B,d1
0000FACE 343C 0008                  		move.w	#8,d2
0000FAD2 363C 0010                  		move.w	#$10,d3
0000FAD6 3828 0008                  		move.w	obX(a0),d4
0000FADA 6100 0000                  		bsr.w	SolidObject
0000FADE 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FAE2 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FAE4 4E75                       		rts	
0000FAE6                            ; ===========================================================================
0000FAE6                            
0000FAE6                            Spring_BounceUp:
0000FAE6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FAEA 5069 000C                  		addq.w	#8,obY(a1)
0000FAEE 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FAF4 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FAFA 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FB00 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FB06 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FB0C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FB12 4228 0025                  		clr.b	obSolid(a0)
0000FB20                            
0000FB20                            Spring_AniUp:	; Routine 4
0000FB20 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FB26 6000 C9D0                  		bra.w	AnimateSprite
0000FB2A                            ; ===========================================================================
0000FB2A                            
0000FB2A                            Spring_ResetUp:	; Routine 6
0000FB2A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FB30 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FB34 4E75                       		rts	
0000FB36                            ; ===========================================================================
0000FB36                            
0000FB36                            Spring_LR:	; Routine 8
0000FB36 323C 0013                  		move.w	#$13,d1
0000FB3A 343C 000E                  		move.w	#$E,d2
0000FB3E 363C 000F                  		move.w	#$F,d3
0000FB42 3828 0008                  		move.w	obX(a0),d4
0000FB46 6100 0000                  		bsr.w	SolidObject
0000FB4A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FB50 6600                       		bne.s	loc_DC0C
0000FB52 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FB58                            
0000FB58                            loc_DC0C:
0000FB58 0828 0005 0022             		btst	#5,obStatus(a0)
0000FB5E 6600                       		bne.s	Spring_BounceLR
0000FB60 4E75                       		rts	
0000FB62                            ; ===========================================================================
0000FB62                            
0000FB62                            Spring_BounceLR:
0000FB62 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FB66 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FB6C 5069 0008                  		addq.w	#8,obX(a1)
0000FB70 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FB76 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FB78 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FB7E 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FB82                            
0000FB82                            	Spring_Flipped:
0000FB82 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FB88 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FB8E 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FB94 0829 0002 0022             		btst	#2,obStatus(a1)
0000FB9A 6600                       		bne.s	loc_DC56
0000FB9C 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FBA2                            
0000FBA2                            loc_DC56:
0000FBA2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FBA8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FBB8                            
0000FBB8                            Spring_AniLR:	; Routine $A
0000FBB8 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FBBC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FBC2 6000 C934                  		bra.w	AnimateSprite
0000FBC6                            ; ===========================================================================
0000FBC6                            
0000FBC6                            Spring_ResetLR:	; Routine $C
0000FBC6 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FBCC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000FBD0 4E75                       		rts	
0000FBD2                            ; ===========================================================================
0000FBD2                            
0000FBD2                            Spring_Dwn:	; Routine $E
0000FBD2 323C 001B                  		move.w	#$1B,d1
0000FBD6 343C 0008                  		move.w	#8,d2
0000FBDA 363C 0010                  		move.w	#$10,d3
0000FBDE 3828 0008                  		move.w	obX(a0),d4
0000FBE2 6100 0000                  		bsr.w	SolidObject
0000FBE6 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FBEC 6600                       		bne.s	loc_DCA4
0000FBEE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000FBF4                            
0000FBF4                            loc_DCA4:
0000FBF4 4A28 0025                  		tst.b	obSolid(a0)
0000FBF8 6600                       		bne.s	locret_DCAE
0000FBFA 4A44                       		tst.w	d4
0000FBFC 6B00                       		bmi.s	Spring_BounceDwn
0000FBFE                            
0000FBFE                            locret_DCAE:
0000FBFE 4E75                       		rts	
0000FC00                            ; ===========================================================================
0000FC00                            
0000FC00                            Spring_BounceDwn:
0000FC00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FC04 5169 000C                  		subq.w	#8,obY(a1)
0000FC08 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000FC0E 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000FC12 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FC18 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FC1E 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FC24 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FC2A 4228 0025                  		clr.b	obSolid(a0)
0000FC38                            
0000FC38                            Spring_AniDwn:	; Routine $10
0000FC38 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FC3E 6000 C8B8                  		bra.w	AnimateSprite
0000FC42                            ; ===========================================================================
0000FC42                            
0000FC42                            Spring_ResetDwn:
0000FC42                            		; Routine $12
0000FC42 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FC48 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000FC4C 4E75                       		rts	
0000FC4C 4E75                       		rts	
0000FC4E                            		include	"_anim\Springs.asm"
0000FC4E                            ; ---------------------------------------------------------------------------
0000FC4E                            ; Animation script - springs
0000FC4E                            ; ---------------------------------------------------------------------------
0000FC4E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000FC50 0000                       		dc.w byte_DD0E-Ani_Spring
0000FC52 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000FC5E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000FC6A                            		even
0000FC6A                            		even
0000FC6A                            Map_Spring:	include	"_maps\Springs.asm"
0000FC6A                            ; ---------------------------------------------------------------------------
0000FC6A                            ; Sprite mappings - springs
0000FC6A                            ; ---------------------------------------------------------------------------
0000FC6A                            Map_Spring_internal:
0000FC6A 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000FC6C 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000FC6E 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000FC70 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000FC72 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000FC74 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000FC76 02                         M_Spg_Up:	dc.b 2			; facing up
0000FC77 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000FC7C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000FC81 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000FC82 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000FC87 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000FC88 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000FC8D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000FC92 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000FC97 01                         M_Spg_Left:	dc.b 1			; facing left
0000FC98 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000FC9D 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000FC9E F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000FCA3 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000FCA4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000FCA9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000FCAE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000FCB3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000FCB8                            		even
0000FCB8                            		even
0000FCB8                            
0000FCB8                            		include	"_incObj\42 Newtron.asm"
0000FCB8                            ; ---------------------------------------------------------------------------
0000FCB8                            ; Object 42 - Newtron enemy (GHZ)
0000FCB8                            ; ---------------------------------------------------------------------------
0000FCB8                            
0000FCB8                            Newtron:
0000FCB8 7000                       		moveq	#0,d0
0000FCBA 1028 0024                  		move.b	obRoutine(a0),d0
0000FCBE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000FCC2 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000FCC6                            ; ===========================================================================
0000FCC6 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000FCC8 0000                       		dc.w Newt_Action-Newt_Index
0000FCCA 0000                       		dc.w Newt_Delete-Newt_Index
0000FCCC                            ; ===========================================================================
0000FCCC                            
0000FCCC                            Newt_Main:	; Routine 0
0000FCCC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FCD0 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000FCD8 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000FCDE 117C 0004 0001             		move.b	#4,obRender(a0)
0000FCE4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FCEA 117C 0014 0014             		move.b	#$14,obActWid(a0)
0000FCF0 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000FCF6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FCFC                            
0000FCFC                            Newt_Action:	; Routine 2
0000FCFC 7000                       		moveq	#0,d0
0000FCFE 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FD02 323B 0000                  		move.w	@index(pc,d0.w),d1
0000FD06 4EBB 1000                  		jsr	@index(pc,d1.w)
0000FD0A 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000FD10 6100 C7E6                  		bsr.w	AnimateSprite
0000FD14 6000 0000                  		bra.w	RememberState
0000FD18                            ; ===========================================================================
0000FD18 0000                       @index:		dc.w @chkdistance-@index
0000FD1A 0000                       		dc.w @type00-@index
0000FD1C 0000                       		dc.w @matchfloor-@index
0000FD1E 0000                       		dc.w @speed-@index
0000FD20 0000                       		dc.w @type01-@index
0000FD22                            ; ===========================================================================
0000FD22                            
0000FD22                            @chkdistance:
0000FD22 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FD28 3038 D008                  		move.w	(v_player+obX).w,d0
0000FD2C 9068 0008                  		sub.w	obX(a0),d0
0000FD30 6400                       		bcc.s	@sonicisright
0000FD32 4440                       		neg.w	d0
0000FD34 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FD3A                            
0000FD3A                            	@sonicisright:
0000FD3A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000FD3E 6400                       		bcc.s	@outofrange	; if not, branch
0000FD40 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000FD44 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FD4A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000FD4E 6700                       		beq.s	@istype00	; if type is 00, branch
0000FD50                            
0000FD50 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000FD56 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000FD5C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000FD62                            
0000FD62                            	@outofrange:
0000FD62                            	@istype00:
0000FD62 4E75                       		rts	
0000FD64                            ; ===========================================================================
0000FD64                            
0000FD64                            @type00:
0000FD64 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000FD6A 6400                       		bcc.s	@fall		; is yes, branch
0000FD6C 08E8 0000 0022             		bset	#0,obStatus(a0)
0000FD72 3038 D008                  		move.w	(v_player+obX).w,d0
0000FD76 9068 0008                  		sub.w	obX(a0),d0
0000FD7A 6400                       		bcc.s	@sonicisright2
0000FD7C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000FD82                            
0000FD82                            	@sonicisright2:
0000FD82 4E75                       		rts	
0000FD84                            ; ===========================================================================
0000FD84                            
0000FD84                            	@fall:
0000FD84 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FD8A 6600                       		bne.s	@loc_DE42
0000FD8C 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FD92                            
0000FD92                            	@loc_DE42:
0000FD92 6100 F65E                  		bsr.w	ObjectFall
0000FD96 4EB9 0000 0000             		jsr		ObjFloorDist
0000FD9C 4A41                       		tst.w	d1		; has newtron hit the floor?
0000FD9E 6A00                       		bpl.s	@keepfalling	; if not, branch
0000FDA0                            
0000FDA0 D368 000C                  		add.w	d1,obY(a0)
0000FDA4 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000FDAA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FDAE 117C 0002 001C             		move.b	#2,obAnim(a0)
0000FDB4 0828 0005 0002             		btst	#5,obGfx(a0)
0000FDBA 6700                       		beq.s	@pppppppp
0000FDBC 5228 001C                  		addq.b	#1,obAnim(a0)
0000FDC0                            
0000FDC0                            	@pppppppp:
0000FDC0 117C 000D 0020             		move.b	#$D,obColType(a0)
0000FDC6 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000FDCC 0828 0000 0022             		btst	#0,obStatus(a0)
0000FDD2 6600                       		bne.s	@keepfalling
0000FDD4 4468 0010                  		neg.w	obVelX(a0)
0000FDD8                            
0000FDD8                            	@keepfalling:
0000FDD8 4E75                       		rts	
0000FDDA                            ; ===========================================================================
0000FDDA                            
0000FDDA                            @matchfloor:
0000FDDA 6100 F64E                  		bsr.w	SpeedToPos
0000FDDE 4EB9 0000 0000             		jsr		ObjFloorDist
0000FDE4 0C41 FFF8                  		cmpi.w	#-8,d1
0000FDE8 6D00                       		blt.s	@nextroutine
0000FDEA 0C41 000C                  		cmpi.w	#$C,d1
0000FDEE 6C00                       		bge.s	@nextroutine
0000FDF0 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000FDF4 4E75                       		rts	
0000FDF6                            ; ===========================================================================
0000FDF6                            
0000FDF6                            	@nextroutine:
0000FDF6 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000FDFA 4E75                       		rts	
0000FDFC                            ; ===========================================================================
0000FDFC                            
0000FDFC                            @speed:
0000FDFC 6100 F62C                  		bsr.w	SpeedToPos
0000FE00 4E75                       		rts	
0000FE02                            ; ===========================================================================
0000FE02                            
0000FE02                            @type01:
0000FE02 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000FE08 6600                       		bne.s	@firemissile
0000FE0A 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FE10                            
0000FE10                            	@firemissile:
0000FE10 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000FE16 6600                       		bne.s	@fail
0000FE18 4A28 0032                  		tst.b	$32(a0)
0000FE1C 6600                       		bne.s	@fail
0000FE1E 117C 0001 0032             		move.b	#1,$32(a0)
0000FE24 6100 FBB2                  		bsr.w	FindFreeObj
0000FE28 6600                       		bne.s	@fail
0000FE2A 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0000FE2E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FE34 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FE3A 5169 000C                  		subq.w	#8,obY(a1)
0000FE3E 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000FE44 303C 0014                  		move.w	#$14,d0
0000FE48 0828 0000 0022             		btst	#0,obStatus(a0)
0000FE4E 6600                       		bne.s	@noflip
0000FE50 4440                       		neg.w	d0
0000FE52 4469 0010                  		neg.w	obVelX(a1)
0000FE56                            
0000FE56                            	@noflip:
0000FE56 D169 0008                  		add.w	d0,obX(a1)
0000FE5A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000FE60 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000FE66                            
0000FE66                            	@fail:
0000FE66 4E75                       		rts	
0000FE68                            ; ===========================================================================
0000FE68                            
0000FE68                            Newt_Delete:	; Routine 4
0000FE68 6000 F614                  		bra.w	DeleteObject
0000FE68 6000 F614                  		bra.w	DeleteObject
0000FE6C                            		include	"_anim\Newtron.asm"
0000FE6C                            ; ---------------------------------------------------------------------------
0000FE6C                            ; Animation script - Newtron enemy
0000FE6C                            ; ---------------------------------------------------------------------------
0000FE6C 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0000FE6E 0000                       		dc.w A_Newt_Drop-Ani_Newt
0000FE70 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0000FE72 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0000FE74 0000                       		dc.w A_Newt_Fires-Ani_Newt
0000FE76 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0000FE7A 00                         		even
0000FE7A 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0000FE82 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0000FE86 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0000FE8A 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0000FE94 00                         		even
0000FE94 00                         		even
0000FE94                            Map_Newt:	include	"_maps\Newtron.asm"
0000FE94                            ; ---------------------------------------------------------------------------
0000FE94                            ; Sprite mappings - Newtron enemy (GHZ)
0000FE94                            ; ---------------------------------------------------------------------------
0000FE94                            Map_Newt_internal:
0000FE94 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0000FE96 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0000FE98 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0000FE9A 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0000FE9C 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0000FE9E 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0000FEA0 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0000FEA2 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0000FEA4 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0000FEA6 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0000FEA8 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0000FEAA 03                         M_Newt_Trans:	dc.b 3
0000FEAB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0000FEB0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000FEB5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000FEBA 03                         M_Newt_Norm:	dc.b 3
0000FEBB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0000FEC0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEC5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FECA 03                         M_Newt_Fires:	dc.b 3
0000FECB EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0000FED0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FED5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000FEDA 04                         M_Newt_Drop1:	dc.b 4
0000FEDB EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0000FEE0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000FEE5 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000FEEA 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000FEEF 03                         M_Newt_Drop2:	dc.b 3
0000FEF0 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000FEF5 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000FEFA 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000FEFF 02                         M_Newt_Drop3:	dc.b 2
0000FF00 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF05 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF0A 03                         M_Newt_Fly1a:	dc.b 3
0000FF0B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0000FF10 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF15 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000FF1A 03                         M_Newt_Fly1b:	dc.b 3
0000FF1B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF20 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF25 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000FF2A 03                         M_Newt_Fly2a:	dc.b 3
0000FF2B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF30 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF35 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000FF3A 03                         M_Newt_Fly2b:	dc.b 3
0000FF3B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000FF40 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000FF45 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000FF4A 00                         M_Newt_Blank:	dc.b 0
0000FF4C 00                         		even
0000FF4C 00                         		even
0000FF4C                            		include	"_incObj\43 Roller.asm"
0000FF4C                            ; ---------------------------------------------------------------------------
0000FF4C                            ; Object 43 - Roller enemy (SYZ)
0000FF4C                            ; ---------------------------------------------------------------------------
0000FF4C                            
0000FF4C                            Roller:
0000FF4C 7000                       		moveq	#0,d0
0000FF4E 1028 0024                  		move.b	obRoutine(a0),d0
0000FF52 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0000FF56 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0000FF5A                            ; ===========================================================================
0000FF5A 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0000FF5C 0000                       		dc.w Roll_Action-Roll_Index
0000FF5E                            ; ===========================================================================
0000FF5E                            
0000FF5E                            Roll_Main:	; Routine 0
0000FF5E 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000FF64 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FF6A 6100 F486                  		bsr.w	ObjectFall
0000FF6E 6100 0000                  		bsr.w	ObjFloorDist
0000FF72 4A41                       		tst.w	d1
0000FF74 6A00                       		bpl.s	locret_E052
0000FF76 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0000FF7A 317C 0000 0012             		move.w	#0,obVelY(a0)
0000FF80 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF84 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0000FF8C 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0000FF92 117C 0004 0001             		move.b	#4,obRender(a0)
0000FF98 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FF9E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FFA4                            
0000FFA4                            	locret_E052:
0000FFA4 4E75                       		rts	
0000FFA6                            ; ===========================================================================
0000FFA6                            
0000FFA6                            Roll_Action:	; Routine 2
0000FFA6 7000                       		moveq	#0,d0
0000FFA8 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FFAC 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0000FFB0 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
0000FFB4 43F9 0000 0000             		lea	(Ani_Roll).l,a1
0000FFBA 6100 C53C                  		bsr.w	AnimateSprite
0000FFBE 3028 0008                  		move.w	obX(a0),d0
0000FFC2 0240 FF80                  		andi.w	#$FF80,d0
0000FFC6 3238 F700                  		move.w	(v_screenposx).w,d1
0000FFCA 0441 0080                  		subi.w	#$80,d1
0000FFCE 0241 FF80                  		andi.w	#$FF80,d1
0000FFD2 9041                       		sub.w	d1,d0
0000FFD4 0C40 0280                  		cmpi.w	#$280,d0
0000FFD8 6E00 0000                  		bgt.w	Roll_ChkGone
0000FFDC 6000 F460                  		bra.w	DisplaySprite
0000FFE0                            ; ===========================================================================
0000FFE0                            
0000FFE0                            Roll_ChkGone:
0000FFE0 45F8 FC00                  		lea	(v_objstate).w,a2
0000FFE4 7000                       		moveq	#0,d0
0000FFE6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000FFEA 6700                       		beq.s	Roll_Delete
0000FFEC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FFF2                            
0000FFF2                            Roll_Delete:
0000FFF2 6000 F48A                  		bra.w	DeleteObject
0000FFF6                            ; ===========================================================================
0000FFF6 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
0000FFF8 0000                       		dc.w Roll_RollNoChk-Roll_Index2
0000FFFA 0000                       		dc.w Roll_ChkJump-Roll_Index2
0000FFFC 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0000FFFE                            ; ===========================================================================
0000FFFE                            
0000FFFE                            Roll_RollChk:
0000FFFE 3038 D008                  		move.w	(v_player+obX).w,d0
00010002 0440 0100                  		subi.w	#$100,d0
00010006 6500                       		bcs.s	loc_E0D2
00010008 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
0001000C 6500                       		bcs.s	loc_E0D2
0001000E 5828 0025                  		addq.b	#4,ob2ndRout(a0)
00010012 117C 0002 001C             		move.b	#2,obAnim(a0)
00010018 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001001E 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010024                            
00010024                            loc_E0D2:
00010024 588F                       		addq.l	#4,sp
00010026 4E75                       		rts	
00010028                            ; ===========================================================================
00010028                            
00010028                            Roll_RollNoChk:
00010028 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001002E 6700                       		beq.s	loc_E0F8
00010030 5368 0030                  		subq.w	#1,$30(a0)
00010034 6A00                       		bpl.s	locret_E0F6
00010036 117C 0001 001C             		move.b	#1,obAnim(a0)
0001003C 317C 0700 0010             		move.w	#$700,obVelX(a0)
00010042 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010048                            
00010048                            locret_E0F6:
00010048 4E75                       		rts	
0001004A                            ; ===========================================================================
0001004A                            
0001004A                            loc_E0F8:
0001004A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001004E 4E75                       		rts	
00010050                            ; ===========================================================================
00010050                            
00010050                            Roll_ChkJump:
00010050 6100 0000                  		bsr.w	Roll_Stop
00010054 6100 F3D4                  		bsr.w	SpeedToPos
00010058 6100 0000                  		bsr.w	ObjFloorDist
0001005C 0C41 FFF8                  		cmpi.w	#-8,d1
00010060 6D00                       		blt.s	Roll_Jump
00010062 0C41 000C                  		cmpi.w	#$C,d1
00010066 6C00                       		bge.s	Roll_Jump
00010068 D368 000C                  		add.w	d1,obY(a0)
0001006C 4E75                       		rts	
0001006E                            ; ===========================================================================
0001006E                            
0001006E                            Roll_Jump:
0001006E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010072 08E8 0000 0032             		bset	#0,$32(a0)
00010078 6700                       		beq.s	locret_E12E
0001007A 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
00010080                            
00010080                            locret_E12E:
00010080 4E75                       		rts	
00010082                            ; ===========================================================================
00010082                            
00010082                            Roll_MatchFloor:
00010082 6100 F36E                  		bsr.w	ObjectFall
00010086 4A68 0012                  		tst.w	obVelY(a0)
0001008A 6B00                       		bmi.s	locret_E150
0001008C 6100 0000                  		bsr.w	ObjFloorDist
00010090 4A41                       		tst.w	d1
00010092 6A00                       		bpl.s	locret_E150
00010094 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
00010098 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001009C 317C 0000 0012             		move.w	#0,obVelY(a0)
000100A2                            
000100A2                            locret_E150:
000100A2 4E75                       		rts	
000100A4                            
000100A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000100A4                            
000100A4                            
000100A4                            Roll_Stop:
000100A4 4A28 0032                  		tst.b	$32(a0)
000100A8 6B00                       		bmi.s	locret_E188
000100AA 3038 D008                  		move.w	(v_player+obX).w,d0
000100AE 0440 0030                  		subi.w	#$30,d0
000100B2 9068 0008                  		sub.w	obX(a0),d0
000100B6 6400                       		bcc.s	locret_E188
000100B8 117C 0000 001C             		move.b	#0,obAnim(a0)
000100BE 117C 000E 0020             		move.b	#$E,obColType(a0)
000100C4 4268 0010                  		clr.w	obVelX(a0)
000100C8 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000100CE 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
000100D4 08E8 0007 0032             		bset	#7,$32(a0)
000100DA                            
000100DA                            locret_E188:
000100DA 4E75                       		rts	
000100DC                            ; End of function Roll_Stop
000100DC                            ; End of function Roll_Stop
000100DC                            		include	"_anim\Roller.asm"
000100DC                            ; ---------------------------------------------------------------------------
000100DC                            ; Animation script - Roller enemy
000100DC                            ; ---------------------------------------------------------------------------
000100DC 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
000100DE 0000                       		dc.w A_Roll_Fold-Ani_Roll
000100E0 0000                       		dc.w A_Roll_Roll-Ani_Roll
000100E2 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
000100E8 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
000100EE 00                         		even
000100EE 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
000100F4 00                         		even
000100F4 00                         		even
000100F4                            Map_Roll:	include	"_maps\Roller.asm"
000100F4                            ; --------------------------------------------------------------------------------
000100F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000100F4                            ; --------------------------------------------------------------------------------
000100F4                            
000100F4                            SME_q3BmU:	
000100F4 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
000100F8 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
000100FC 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
000100FE 02                         SME_q3BmU_A:	dc.b 2	
000100FF DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010104 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010109 02                         SME_q3BmU_15:	dc.b 2	
0001010A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001010F FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010114 01                         SME_q3BmU_20:	dc.b 1	
00010115 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
0001011A 01                         SME_q3BmU_26:	dc.b 1	
0001011B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
00010120 01                         SME_q3BmU_2C:	dc.b 1	
00010121 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010126                            		even
00010126                            		even
00010126                            
00010126                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010126                            ; ---------------------------------------------------------------------------
00010126                            ; Object 44 - edge walls (GHZ)
00010126                            ; ---------------------------------------------------------------------------
00010126                            
00010126                            EdgeWalls:
00010126 7000                       		moveq	#0,d0
00010128 1028 0024                  		move.b	obRoutine(a0),d0
0001012C 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
00010130 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010134                            ; ===========================================================================
00010134 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010136 0000                       		dc.w Edge_Solid-Edge_Index
00010138 0000                       		dc.w Edge_Display-Edge_Index
0001013A                            ; ===========================================================================
0001013A                            
0001013A                            Edge_Main:	; Routine 0
0001013A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001013E 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010146 317C 434C 0002             		move.w	#$434C,obGfx(a0)
0001014C 0028 0004 0001             		ori.b	#4,obRender(a0)
00010152 117C 0008 0014             		move.b	#8,obActWid(a0)
00010158 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001015E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010164 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
0001016A 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
0001016C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010170 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
00010172                            ; ===========================================================================
00010172                            
00010172                            Edge_Solid:	; Routine 2
00010172 323C 0013                  		move.w	#$13,d1
00010176 343C 0028                  		move.w	#$28,d2
0001017A 6100 9FE2                  		bsr.w	Obj44_SolidWall
0001017E                            
0001017E                            Edge_Display:	; Routine 4
0001017E 6100 F2BE                  		bsr.w	DisplaySprite
000101A0 4E75                       		rts	
000101A0 4E75                       		rts	
000101A2                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000101A2                            ; ---------------------------------------------------------------------------
000101A2                            ; Sprite mappings - walls (GHZ)
000101A2                            ; ---------------------------------------------------------------------------
000101A2                            Map_Edge_internal:
000101A2 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000101A4 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000101A6 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000101A8 04                         M_Edge_Shadow:	dc.b 4
000101A9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000101AE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000101B3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000101B8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000101BD 04                         M_Edge_Light:	dc.b 4
000101BE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000101C3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000101C8 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000101CD 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000101D2 04                         M_Edge_Dark:	dc.b 4
000101D3 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
000101D8 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
000101DD 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
000101E2 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
000101E8 00                         		even
000101E8 00                         		even
000101E8                            
000101E8                            		include	"_incObj\13 Lava Ball Maker.asm"
000101E8                            ; ---------------------------------------------------------------------------
000101E8                            ; Object 13 - lava ball	maker (MZ, SLZ)
000101E8                            ; ---------------------------------------------------------------------------
000101E8                            
000101E8                            LavaMaker:
000101E8 7000                       		moveq	#0,d0
000101EA 1028 0024                  		move.b	obRoutine(a0),d0
000101EE 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
000101F2 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
000101F6 6000 0000                  		bra.w	LBall_ChkDel
000101FA                            ; ===========================================================================
000101FA 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
000101FC 0000                       		dc.w LavaM_MakeLava-LavaM_Index
000101FE                            ; ---------------------------------------------------------------------------
000101FE                            ;
000101FE                            ; Lava ball production rates
000101FE                            ;
000101FE 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010204                            ; ===========================================================================
00010204                            
00010204                            LavaM_Main:	; Routine 0
00010204 5428 0024                  		addq.b	#2,obRoutine(a0)
00010208 1028 0028                  		move.b	obSubtype(a0),d0
0001020C E848                       		lsr.w	#4,d0
0001020E 0240 000F                  		andi.w	#$F,d0
00010212 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010218 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001021E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010224                            
00010224                            LavaM_MakeLava:	; Routine 2
00010224 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010228 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0001022A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
00010230 6100 F59A                  		bsr.w	ChkObjectVisible
00010234 6600                       		bne.s	LavaM_Wait
00010236 6100 F7A0                  		bsr.w	FindFreeObj
0001023A 6600                       		bne.s	LavaM_Wait
0001023C 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
00010240 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010246 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001024C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010252                            
00010252                            	LavaM_Wait:
00010252 4E75                       		rts	
00010252 4E75                       		rts	
00010254                            		include	"_incObj\14 Lava Ball.asm"
00010254                            ; ---------------------------------------------------------------------------
00010254                            ; Object 14 - lava balls (MZ, SLZ)
00010254                            ; ---------------------------------------------------------------------------
00010254                            
00010254                            LavaBall:
00010254 7000                       		moveq	#0,d0
00010256 1028 0024                  		move.b	obRoutine(a0),d0
0001025A 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001025E 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
00010262 6000 F1DA                  		bra.w	DisplaySprite
00010266                            ; ===========================================================================
00010266 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010268 0000                       		dc.w LBall_Action-LBall_Index
0001026A 0000                       		dc.w LBall_Delete-LBall_Index
0001026C                            
0001026C FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
00010276 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
0001027E                            ; ===========================================================================
0001027E                            
0001027E                            LBall_Main:	; Routine 0
0001027E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010282 117C 0008 0016             		move.b	#8,obHeight(a0)
00010288 117C 0008 0017             		move.b	#8,obWidth(a0)
0001028E 217C 0000 D14A 0004        		move.l	#Map_Fire,obMap(a0)
00010296 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001029C 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000102A2 6600                       		bne.s	@notSLZ
000102A4 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000102AA                            
000102AA                            	@notSLZ:
000102AA 117C 0004 0001             		move.b	#4,obRender(a0)
000102B0 317C 0180 0018             		move.w	#$180,obPriority(a0)
000102B6 117C 008B 0020             		move.b	#$8B,obColType(a0)
000102BC 3168 000C 0030             		move.w	obY(a0),$30(a0)
000102C2 4A28 0029                  		tst.b	$29(a0)
000102C6 6700                       		beq.s	@speed
000102C8 5428 0018                  		addq.b	#2,obPriority(a0)
000102CC                            
000102CC                            	@speed:
000102CC 7000                       		moveq	#0,d0
000102CE 1028 0028                  		move.b	obSubtype(a0),d0
000102D2 D040                       		add.w	d0,d0
000102D4 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
000102DA 117C 0008 0014             		move.b	#8,obActWid(a0)
000102E0 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
000102E6 6500                       		bcs.s	@sound		; if yes, branch
000102E8                            
000102E8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000102EE 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
000102F4 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
000102FA 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
00010300                            
00010300                            	@sound:
0001030A                            
0001030A                            LBall_Action:	; Routine 2
0001030A 7000                       		moveq	#0,d0
0001030C 1028 0028                  		move.b	obSubtype(a0),d0
00010310 D040                       		add.w	d0,d0
00010312 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010316 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
0001031A 6100 F10E                  		bsr.w	SpeedToPos
0001031E 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010324 6100 C1D2                  		bsr.w	AnimateSprite
00010328                            
00010328                            LBall_ChkDel:
00010346 4E75                       		rts	
00010348                            ; ===========================================================================
00010348 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001034C 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010350 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010354 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010358 0000                       		dc.w LBall_Type08-LBall_TypeIndex
0001035A                            ; ===========================================================================
0001035A                            ; lavaball types 00-03 fly up and fall back down
0001035A                            
0001035A                            LBall_Type00:
0001035A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
00010360 3028 0030                  		move.w	$30(a0),d0
00010364 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010368 6400                       		bcc.s	loc_E41E	; if not, branch
0001036A 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
0001036E                            
0001036E                            loc_E41E:
0001036E 08A8 0001 0022             		bclr	#1,obStatus(a0)
00010374 4A68 0012                  		tst.w	obVelY(a0)
00010378 6A00                       		bpl.s	locret_E430
0001037A 08E8 0001 0022             		bset	#1,obStatus(a0)
00010380                            
00010380                            locret_E430:
00010380 4E75                       		rts	
00010382                            ; ===========================================================================
00010382                            ; lavaball type	04 flies up until it hits the ceiling
00010382                            
00010382                            LBall_Type04:
00010382 08E8 0001 0022             		bset	#1,obStatus(a0)
00010388 6100 0000                  		bsr.w	ObjHitCeiling
0001038C 4A41                       		tst.w	d1
0001038E 6A00                       		bpl.s	locret_E452
00010390 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010396 117C 0001 001C             		move.b	#1,obAnim(a0)
0001039C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000103A2                            
000103A2                            locret_E452:
000103A2 4E75                       		rts	
000103A4                            ; ===========================================================================
000103A4                            ; lavaball type	05 falls down until it hits the	floor
000103A4                            
000103A4                            LBall_Type05:
000103A4 08A8 0001 0022             		bclr	#1,obStatus(a0)
000103AA 6100 0000                  		bsr.w	ObjFloorDist
000103AE 4A41                       		tst.w	d1
000103B0 6A00                       		bpl.s	locret_E474
000103B2 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103B8 117C 0001 001C             		move.b	#1,obAnim(a0)
000103BE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000103C4                            
000103C4                            locret_E474:
000103C4 4E75                       		rts	
000103C6                            ; ===========================================================================
000103C6                            ; lavaball types 06-07 move sideways
000103C6                            
000103C6                            LBall_Type06:
000103C6 08E8 0000 0022             		bset	#0,obStatus(a0)
000103CC 76F8                       		moveq	#-8,d3
000103CE 6100 0000                  		bsr.w	ObjHitWallLeft
000103D2 4A41                       		tst.w	d1
000103D4 6A00                       		bpl.s	locret_E498
000103D6 117C 0008 0028             		move.b	#8,obSubtype(a0)
000103DC 117C 0003 001C             		move.b	#3,obAnim(a0)
000103E2 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
000103E8                            
000103E8                            locret_E498:
000103E8 4E75                       		rts	
000103EA                            ; ===========================================================================
000103EA                            
000103EA                            LBall_Type07:
000103EA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000103F0 7608                       		moveq	#8,d3
000103F2 6100 0000                  		bsr.w	ObjHitWallRight
000103F6 4A41                       		tst.w	d1
000103F8 6A00                       		bpl.s	locret_E4BC
000103FA 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010400 117C 0003 001C             		move.b	#3,obAnim(a0)
00010406 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0001040C                            
0001040C                            locret_E4BC:
0001040C 4E75                       		rts	
0001040E                            ; ===========================================================================
0001040E                            
0001040E                            LBall_Type08:
0001040E 4E75                       		rts	
00010410                            ; ===========================================================================
00010410                            
00010410                            LBall_Delete:
00010410 6000 F06C                  		bra.w	DeleteObject
00010410 6000 F06C                  		bra.w	DeleteObject
00010414                            		include	"_anim\Fireballs.asm"
00010414                            ; ---------------------------------------------------------------------------
00010414                            ; Animation script - lava balls
00010414                            ; ---------------------------------------------------------------------------
00010414 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010416 0000                       		dc.w @vertcollide-Ani_Fire
00010418 0000                       		dc.w @horizontal-Ani_Fire
0001041A 0000                       		dc.w @horicollide-Ani_Fire
0001041C 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
00010422 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010426 00                         		even
00010426 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
0001042C 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
00010430 00                         		even
00010430 00                         		even
00010430                            
00010430                            		include	"_incObj\6D Flamethrower.asm"
00010430                            ; ---------------------------------------------------------------------------
00010430                            ; Object 6D - flame thrower (SBZ)
00010430                            ; ---------------------------------------------------------------------------
00010430                            
00010430                            Flamethrower:
00010430 7000                       		moveq	#0,d0
00010432 1028 0024                  		move.b	obRoutine(a0),d0
00010436 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
0001043A 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001043E                            ; ===========================================================================
0001043E 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
00010440 0000                       		dc.w Flame_Action-Flame_Index
00010442                            ; ===========================================================================
00010442                            
00010442                            Flame_Main:	; Routine 0
00010442 5428 0024                  		addq.b	#2,obRoutine(a0)
00010446 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001044E 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010454 0028 0004 0001             		ori.b	#4,obRender(a0)
0001045A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010460 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010466 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001046C 1028 0028                  		move.b	obSubtype(a0),d0
00010470 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
00010474 D040                       		add.w	d0,d0		; multiply by 2
00010476 3140 0030                  		move.w	d0,$30(a0)
0001047A 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0001047E 1028 0028                  		move.b	obSubtype(a0),d0
00010482 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
00010486 EB48                       		lsl.w	#5,d0		; multiply by $20
00010488 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0001048C 117C 000A 0036             		move.b	#$A,$36(a0)
00010492 0828 0001 0022             		btst	#1,obStatus(a0)
00010498 6700                       		beq.s	Flame_Action
0001049A 117C 0002 001C             		move.b	#2,obAnim(a0)
000104A0 117C 0015 0036             		move.b	#$15,$36(a0)
000104A6                            
000104A6                            Flame_Action:	; Routine 2
000104A6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000104AA 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000104AC 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000104B2 0868 0000 001C             		bchg	#0,obAnim(a0)
000104B8 6700                       		beq.s	loc_E57A
000104BA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000104CA                            
000104CA                            loc_E57A:
000104CA 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000104D0 6100 C026                  		bsr.w	AnimateSprite
000104D4 117C 0000 0020             		move.b	#0,obColType(a0)
000104DA 1028 0036                  		move.b	$36(a0),d0
000104DE B028 001A                  		cmp.b	obFrame(a0),d0
000104E2 6600                       		bne.s	Flame_ChkDel
000104E4 117C 00A3 0020             		move.b	#$A3,obColType(a0)
000104EA                            
000104EA                            Flame_ChkDel:
00010508 6000 EF34                  		bra.w	DisplaySprite
00010508 6000 EF34                  		bra.w	DisplaySprite
0001050C                            		include	"_anim\Flamethrower.asm"
0001050C                            ; ---------------------------------------------------------------------------
0001050C                            ; Animation script - flamethrower (SBZ)
0001050C                            ; ---------------------------------------------------------------------------
0001050C 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001050E 0000                       		dc.w @pipe2-Ani_Flame
00010510 0000                       		dc.w @valve1-Ani_Flame
00010512 0000                       		dc.w @valve2-Ani_Flame
00010514 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010522 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
0001052C 00                         		even
0001052C 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
0001053A 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010544 00                         		even
00010544 00                         		even
00010544                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010544                            ; ---------------------------------------------------------------------------
00010544                            ; Sprite mappings - flame thrower (SBZ)
00010544                            ; ---------------------------------------------------------------------------
00010544                            Map_Flame_internal:
00010544 0000                       		dc.w @pipe1-Map_Flame_internal
00010546 0000                       		dc.w @pipe2-Map_Flame_internal
00010548 0000                       		dc.w @pipe3-Map_Flame_internal
0001054A 0000                       		dc.w @pipe4-Map_Flame_internal
0001054C 0000                       		dc.w @pipe5-Map_Flame_internal
0001054E 0000                       		dc.w @pipe6-Map_Flame_internal
00010550 0000                       		dc.w @pipe7-Map_Flame_internal
00010552 0000                       		dc.w @pipe8-Map_Flame_internal
00010554 0000                       		dc.w @pipe9-Map_Flame_internal
00010556 0000                       		dc.w @pipe10-Map_Flame_internal
00010558 0000                       		dc.w @pipe11-Map_Flame_internal
0001055A 0000                       		dc.w @valve1-Map_Flame_internal
0001055C 0000                       		dc.w @valve2-Map_Flame_internal
0001055E 0000                       		dc.w @valve3-Map_Flame_internal
00010560 0000                       		dc.w @valve4-Map_Flame_internal
00010562 0000                       		dc.w @valve5-Map_Flame_internal
00010564 0000                       		dc.w @valve6-Map_Flame_internal
00010566 0000                       		dc.w @valve7-Map_Flame_internal
00010568 0000                       		dc.w @valve8-Map_Flame_internal
0001056A 0000                       		dc.w @valve9-Map_Flame_internal
0001056C 0000                       		dc.w @valve10-Map_Flame_internal
0001056E 0000                       		dc.w @valve11-Map_Flame_internal
00010570 01                         @pipe1:		dc.b 1
00010571 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010576 02                         @pipe2:		dc.b 2
00010577 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0001057C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010581 02                         @pipe3:		dc.b 2
00010582 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010587 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001058C 03                         @pipe4:		dc.b 3
0001058D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010592 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010597 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001059C 03                         @pipe5:		dc.b 3
0001059D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000105A2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000105A7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105AC 04                         @pipe6:		dc.b 4
000105AD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000105B2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000105B7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105BC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105C1 04                         @pipe7:		dc.b 4
000105C2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000105C7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000105CC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000105D1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105D6 05                         @pipe8:		dc.b 5
000105D7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000105DC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000105E1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000105E6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000105EB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000105F0 05                         @pipe9:		dc.b 5
000105F1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000105F6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000105FB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010600 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010605 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0001060A 06                         @pipe10:	dc.b 6
0001060B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010610 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010615 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001061A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0001061F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010624 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010629 06                         @pipe11:	dc.b 6
0001062A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0001062F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010634 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010639 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001063E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010643 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010648 01                         @valve1:	dc.b 1
00010649 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
0001064E 02                         @valve2:	dc.b 2
0001064F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010654 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010659 02                         @valve3:	dc.b 2
0001065A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001065F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010664 03                         @valve4:	dc.b 3
00010665 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001066A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001066F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010674 03                         @valve5:	dc.b 3
00010675 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0001067A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001067F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010684 04                         @valve6:	dc.b 4
00010685 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0001068A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0001068F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010694 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010699 04                         @valve7:	dc.b 4
0001069A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0001069F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106A4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106A9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106AE 05                         @valve8:	dc.b 5
000106AF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
000106B4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000106B9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000106BE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106C3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000106C8 05                         @valve9:	dc.b 5
000106C9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
000106CE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000106D3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000106D8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106DD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000106E2 06                         @valve10:	dc.b 6
000106E3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
000106E8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
000106ED 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000106F2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
000106F7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
000106FC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010701 06                         @valve11:	dc.b 6
00010702 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010707 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0001070C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010711 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010716 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0001071B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010720                            		even
00010720                            		even
00010720                            
00010720                            		include	"_incObj\46 MZ Bricks.asm"
00010720                            ; ---------------------------------------------------------------------------
00010720                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010720                            ; ---------------------------------------------------------------------------
00010720                            
00010720                            MarbleBrick:
00010720 7000                       		moveq	#0,d0
00010722 1028 0024                  		move.b	obRoutine(a0),d0
00010726 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
0001072A 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
0001072E                            ; ===========================================================================
0001072E 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010730 0000                       		dc.w Brick_Action-Brick_Index
00010732                            
00010732 =00000030                  brick_origY:	equ $30
00010732                            ; ===========================================================================
00010732                            
00010732                            Brick_Main:	; Routine 0
00010732 5428 0024                  		addq.b	#2,obRoutine(a0)
00010736 117C 000F 0016             		move.b	#$F,obHeight(a0)
0001073C 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010742 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
0001074A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010750 117C 0004 0001             		move.b	#4,obRender(a0)
00010756 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001075C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010762 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010768 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0001076E                            
0001076E                            Brick_Action:	; Routine 2
0001076E 4A28 0001                  		tst.b	obRender(a0)
00010772 6A00                       		bpl.s	@chkdel
00010774 7000                       		moveq	#0,d0
00010776 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001077A 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0001077E D040                       		add.w	d0,d0
00010780 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010784 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010788 323C 001B                  		move.w	#$1B,d1
0001078C 343C 0010                  		move.w	#$10,d2
00010790 363C 0011                  		move.w	#$11,d3
00010794 3828 0008                  		move.w	obX(a0),d4
00010798 6100 0000                  		bsr.w	SolidObject
0001079C                            
0001079C                            	@chkdel:
000107BA 6000 EC82                  			bra.w	DisplaySprite
000107BE                            ; ===========================================================================
000107BE 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
000107C0 0000                       		dc.w Brick_Type01-Brick_TypeIndex
000107C2 0000                       		dc.w Brick_Type02-Brick_TypeIndex
000107C4 0000                       		dc.w Brick_Type03-Brick_TypeIndex
000107C6 0000                       		dc.w Brick_Type04-Brick_TypeIndex
000107C8                            ; ===========================================================================
000107C8                            
000107C8                            Brick_Type00:
000107C8 4E75                       		rts	
000107CA                            ; ===========================================================================
000107CA                            
000107CA                            Brick_Type02:
000107CA 3038 D008                  		move.w	(v_player+obX).w,d0
000107CE 9068 0008                  		sub.w	obX(a0),d0
000107D2 6400                       		bcc.s	loc_E888
000107D4 4440                       		neg.w	d0
000107D6                            
000107D6                            loc_E888:
000107D6 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
000107DA 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
000107DC 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
000107E2                            
000107E2                            Brick_Type01:
000107E2 7000                       		moveq	#0,d0
000107E4 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
000107E8 0828 0003 0028             		btst	#3,obSubtype(a0)
000107EE 6700                       		beq.s	loc_E8A8
000107F0 4440                       		neg.w	d0
000107F2 0640 0010                  		addi.w	#$10,d0
000107F6                            
000107F6                            loc_E8A8:
000107F6 3228 0030                  		move.w	brick_origY(a0),d1
000107FA 9240                       		sub.w	d0,d1
000107FC 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010800 4E75                       		rts	
00010802                            ; ===========================================================================
00010802                            
00010802                            Brick_Type03:
00010802 6100 EC26                  		bsr.w	SpeedToPos
00010806 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
0001080C 6100 0000                  		bsr.w	ObjFloorDist
00010810 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010812 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010816 D368 000C                  		add.w	d1,obY(a0)
0001081A 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
0001081E 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010824 117C 0004 0028             		move.b	#4,obSubtype(a0)
0001082A 3011                       		move.w	(a1),d0
0001082C 0240 03FF                  		andi.w	#$3FF,d0
00010830 0C40 016A                  			cmpi.w	#$16A,d0
00010834 6400                       		bcc.s	locret_E8EE
00010836 117C 0000 0028             		move.b	#0,obSubtype(a0)
0001083C                            
0001083C                            locret_E8EE:
0001083C 4E75                       		rts	
0001083E                            ; ===========================================================================
0001083E                            
0001083E                            Brick_Type04:
0001083E 7000                       		moveq	#0,d0
00010840 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010844 E648                       		lsr.w	#3,d0
00010846 3228 0030                  		move.w	brick_origY(a0),d1
0001084A 9240                       		sub.w	d0,d1
0001084C 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010850 4E75                       		rts	
00010850 4E75                       		rts	
00010852                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010852                            ; ---------------------------------------------------------------------------
00010852                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010852                            ; ---------------------------------------------------------------------------
00010852                            Map_Brick_internal:
00010852 0000                       		dc.w @brick-Map_Brick_internal
00010854 01                         @brick:		dc.b 1
00010855 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0001085A                            		even
0001085A                            		even
0001085A                            
0001085A                            		include	"_incObj\12 Light.asm"
0001085A                            ; ---------------------------------------------------------------------------
0001085A                            ; Object 12 - lamp (SYZ)
0001085A                            ; ---------------------------------------------------------------------------
0001085A                            
0001085A                            SpinningLight:
0001085A 7000                       		moveq	#0,d0
0001085C 1028 0024                  		move.b	obRoutine(a0),d0
00010860 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010864 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010868                            ; ===========================================================================
00010868 0000                       Light_Index:	dc.w Light_Main-Light_Index
0001086A 0000                       		dc.w Light_Animate-Light_Index
0001086C                            ; ===========================================================================
0001086C                            
0001086C                            Light_Main:	; Routine 0
0001086C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010870 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010878 317C 0000 0002             		move.w	#0,obGfx(a0)
0001087E 117C 0004 0001             		move.b	#4,obRender(a0)
00010884 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001088A 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010890                            
00010890                            Light_Animate:	; Routine 2
00010890 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010894 6A00                       		bpl.s	@chkdel
00010896 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
0001089C 5228 001A                  		addq.b	#1,obFrame(a0)
000108A0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
000108A6 6500                       		bcs.s	@chkdel
000108A8 117C 0000 001A             		move.b	#0,obFrame(a0)
000108AE                            
000108AE                            	@chkdel:
000108CC 6000 EB70                  		bra.w	DisplaySprite
000108CC 6000 EB70                  		bra.w	DisplaySprite
000108D0                            Map_Light	include	"_maps\Light.asm"
000108D0                            ; --------------------------------------------------------------------------------
000108D0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000108D0                            ; --------------------------------------------------------------------------------
000108D0                            
000108D0                            SME_FBl1X:	
000108D0 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
000108D4 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
000108D8 05                         SME_FBl1X_8:	dc.b 5	
000108D9 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
000108DE E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
000108E3 F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
000108E8 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
000108ED F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
000108F2 05                         SME_FBl1X_22:	dc.b 5	
000108F3 E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
000108F8 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
000108FD E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010902 F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010907 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
0001090C 06                         SME_FBl1X_3C:	dc.b 6	
0001090D E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010912 E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010917 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
0001091C F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010921 F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010926 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
0001092B 05                         SME_FBl1X_5B:	dc.b 5	
0001092C E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010931 E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010936 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
0001093B F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010940 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010946 00                         		even
00010946 00                         		even
00010946                            		include	"_incObj\47 Bumper.asm"
00010946                            ; ---------------------------------------------------------------------------
00010946                            ; Object 47 - pinball bumper (SYZ)
00010946                            ; ---------------------------------------------------------------------------
00010946                            
00010946                            Bumper:
00010946 7000                       		moveq	#0,d0
00010948 1028 0024                  		move.b	obRoutine(a0),d0
0001094C 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010950 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010954                            ; ===========================================================================
00010954 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010956 0000                       		dc.w Bump_Hit-Bump_Index
00010958                            ; ===========================================================================
00010958                            
00010958                            Bump_Main:	; Routine 0
00010958 5428 0024                  		addq.b	#2,obRoutine(a0)
0001095C 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010964 317C 0380 0002             		move.w	#$380,obGfx(a0)
0001096A 117C 0004 0001             		move.b	#4,obRender(a0)
00010970 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010976 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001097C 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010982                            
00010982                            Bump_Hit:	; Routine 2
00010982 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010986 6700 0000                  		beq.w	@display	; if not, branch
0001098A 4228 0021                  		clr.b	obColProp(a0)
0001098E 43F8 D000                  		lea	(v_player).w,a1
00010992 3228 0008                  		move.w	obX(a0),d1
00010996 3428 000C                  		move.w	obY(a0),d2
0001099A 9269 0008                  		sub.w	obX(a1),d1
0001099E 9469 000C                  		sub.w	obY(a1),d2
000109A2 4EB9 0000 3E34             		jsr	(CalcAngle).l
000109A8 4EB9 0000 3BA2             		jsr	(CalcSine).l
000109AE C3FC F900                  		muls.w	#-$700,d1
000109B2 E081                       		asr.l	#8,d1
000109B4 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
000109B8 C1FC F900                  		muls.w	#-$700,d0
000109BC E080                       		asr.l	#8,d0
000109BE 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
000109C2 08E9 0001 0022             		bset	#1,obStatus(a1)
000109C8 08A9 0004 0022             		bclr	#4,obStatus(a1)
000109CE 08A9 0005 0022             		bclr	#5,obStatus(a1)
000109D4 4229 003C                  		clr.b	$3C(a1)
000109D8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
000109E8 45F8 FC00                  		lea	(v_objstate).w,a2
000109EC 7000                       		moveq	#0,d0
000109EE 1028 0023                  		move.b	obRespawnNo(a0),d0
000109F2 6700                       		beq.s	@addscore
000109F4 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
000109FA 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
000109FC 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010A00                            
00010A00                            	@addscore:
00010A00 7001                       		moveq	#1,d0
00010A02 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010A08 6100 EFCE                  		bsr.w	FindFreeObj
00010A0C 6600                       		bne.s	@display
00010A0E 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010A12 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010A18 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010A1E 137C 0004 001A             		move.b	#4,obFrame(a1)
00010A24                            
00010A24                            	@display:
00010A24 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010A2A 6100 BACC                  		bsr.w	AnimateSprite
00010A4A 6000 E9F2                  		bra.w	DisplaySprite
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            @resetcount:
00010A4E 45F8 FC00                  		lea	(v_objstate).w,a2
00010A52 7000                       		moveq	#0,d0
00010A54 1028 0023                  		move.b	obRespawnNo(a0),d0
00010A58 6700                       		beq.s	@delete
00010A5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010A60                            
00010A60                            	@delete:
00010A60 6000 EA1C                  		bra.w	DeleteObject
00010A60 6000 EA1C                  		bra.w	DeleteObject
00010A64                            		include	"_anim\Bumper.asm"
00010A64                            ; ---------------------------------------------------------------------------
00010A64                            ; Animation script - flamethrower (SBZ)
00010A64                            ; ---------------------------------------------------------------------------
00010A64 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010A66 0000                       		dc.w byte_EAF8-Ani_Bump
00010A68 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010A6C 00                         		even
00010A6C 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010A74 00                         		even
00010A74 00                         		even
00010A74                            Map_Bump:	include	"_maps\Bumper.asm"
00010A74                            ; ---------------------------------------------------------------------------
00010A74                            ; Sprite mappings - pinball bumper (SYZ)
00010A74                            ; ---------------------------------------------------------------------------
00010A74                            Map_Bump_internal:
00010A74 0000                       		dc.w @normal-Map_Bump_internal
00010A76 0000                       		dc.w @bumped1-Map_Bump_internal
00010A78 0000                       		dc.w @bumped2-Map_Bump_internal
00010A7A 02                         @normal:	dc.b 2
00010A7B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010A80 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010A85 02                         @bumped1:	dc.b 2
00010A86 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010A8B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010A90 02                         @bumped2:	dc.b 2
00010A91 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010A96 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010A9C 00                         		even
00010A9C 00                         		even
00010A9C                            
00010A9C                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            ; Object 0D - signpost at the end of a level
00010A9C                            ; ---------------------------------------------------------------------------
00010A9C                            
00010A9C                            Signpost:
00010A9C 7000                       		moveq	#0,d0
00010A9E 1028 0024                  		move.b	obRoutine(a0),d0
00010AA2 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010AA6 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010AAA 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010AB0 6100 BA46                  		bsr.w	AnimateSprite
00010AB4 6100 E988                  		bsr.w	DisplaySprite
00010AD6 4E75                       		rts	
00010AD8                            ; ===========================================================================
00010AD8 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010ADA 0000                       		dc.w Sign_Touch-Sign_Index
00010ADC 0000                       		dc.w Sign_Spin-Sign_Index
00010ADE 0000                       		dc.w Sign_SonicRun-Sign_Index
00010AE0 0000                       		dc.w Sign_Exit-Sign_Index
00010AE2                            
00010AE2 =00000030                  spintime:	equ $30		; time for signpost to spin
00010AE2 =00000032                  sparkletime:	equ $32		; time between sparkles
00010AE2 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010AE2                            ; ===========================================================================
00010AE2                            
00010AE2                            Sign_Main:	; Routine 0
00010AE2 5428 0024                  		addq.b	#2,obRoutine(a0)
00010AE6 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010AEE 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010AF4 117C 0004 0001             		move.b	#4,obRender(a0)
00010AFA 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010B00 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010B06                            
00010B06                            Sign_Touch:	; Routine 2
00010B06 3038 D008                  		move.w	(v_player+obX).w,d0
00010B0A 9068 0008                  		sub.w	obX(a0),d0
00010B0E 6500                       		bcs.s	@notouch
00010B10 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010B14 6400                       		bcc.s	@notouch	; if not, branch
00010B16 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010B26 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010B2A 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010B30 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B34 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level MZ3?
00010B3A 6700                       		beq.s	@normal
00010B3C 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010B42                            
00010B42                            	@normal:
00010B42 4A38 F5C3                  		tst.b	(f_emeraldm).w
00010B46 6700                       		beq.s	@notouch
00010B48 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
00010B56                            
00010B56                            	@notouch:
00010B56 4E75                       		rts	
00010B58                            	
00010B58                            ; ===========================================================================
00010B58                            
00010B58                            Sign_Spin:	; Routine 4
00010B58 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010B5C 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010B5E 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010B64 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010B68 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010B6E 6600                       		bne.s	@chksparkle	; if not, branch
00010B70 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B74                            
00010B74                            	@chksparkle:
00010B74 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010B78 6A00                       		bpl.s	@fail		; if time remains, branch
00010B7A 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010B80 7000                       		moveq	#0,d0
00010B82 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010B86 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010B8A 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010B90 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010B94 6100 EE42                  		bsr.w	FindFreeObj
00010B98 6600                       		bne.s	@fail
00010B9A 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010B9E 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010BA4 101A                       		move.b	(a2)+,d0
00010BA6 4880                       		ext.w	d0
00010BA8 D068 0008                  		add.w	obX(a0),d0
00010BAC 3340 0008                  		move.w	d0,obX(a1)
00010BB0 101A                       		move.b	(a2)+,d0
00010BB2 4880                       		ext.w	d0
00010BB4 D068 000C                  		add.w	obY(a0),d0
00010BB8 3340 000C                  		move.w	d0,obY(a1)
00010BBC 237C 0000 BA5E 0004        		move.l	#Map_Ring,obMap(a1)
00010BC4 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010BCA 137C 0004 0001             		move.b	#4,obRender(a1)
00010BD0 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010BD6 137C 0008 0014             		move.b	#8,obActWid(a1)
00010BDC                            
00010BDC                            	@fail:
00010BDC 4E75                       		rts	
00010BDE                            ; ===========================================================================
00010BDE E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010BE0 0808                       		dc.b	8,   8
00010BE2 F000                       		dc.b -$10,   0
00010BE4 18F8                       		dc.b  $18,  -8
00010BE6 00F8                       		dc.b	0,  -8
00010BE8 1000                       		dc.b  $10,   0
00010BEA E808                       		dc.b -$18,   8
00010BEC 1810                       		dc.b  $18, $10
00010BEE                            ; ===========================================================================
00010BEE                            
00010BEE                            Sign_SonicRun:	; Routine 6
00010BEE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00010BF2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00010BF6 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010BFC                            		
00010BFC                            
00010BFC                            	loc_EC86:
00010BFC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C00                            
00010C00                            ; ---------------------------------------------------------------------------
00010C00                            ; Subroutine to	set up bonuses at the end of an	act
00010C00                            ; ---------------------------------------------------------------------------
00010C00                            
00010C00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C00                            
00010C00                            
00010C00                            GotThroughAct:
00010C00 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010C04 6600                       		bne.s	locret_ECEE
00010C06 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010C0C 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010C10 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010C14 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010C18 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010C1E 7000                       		moveq	#plcid_TitleCard,d0
00010C20 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010C26 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010C2C 7000                       		moveq	#0,d0
00010C2E 1038 FE23                  		move.b	(v_timemin).w,d0
00010C32 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010C36 7200                       		moveq	#0,d1
00010C38 1238 FE24                  		move.b	(v_timesec).w,d1
00010C3C D041                       		add.w	d1,d0		; add up your time
00010C3E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010C42 7214                       		moveq	#$14,d1
00010C44 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010C46 6500                       		bcs.s	hastimebonus	; if not, branch
00010C48 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010C4A                            
00010C4A                            	hastimebonus:
00010C4A D040                       		add.w	d0,d0
00010C4C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00010C52 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010C56 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010C5A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010C68 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010C6E                            
00010C6E                            locret_ECEE:
00010C6E 4E75                       		rts	
00010C70                            
00010C70                            ; End of function GotThroughAct
00010C70                            
00010C70                            ; ===========================================================================
00010C70 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010C84 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010C9A                            ; ===========================================================================
00010C9A                            
00010C9A                            Sign_Exit:	; Routine 8
00010C9A 4E75                       		rts	
00010C9C                            
00010C9C                            ; ---------------------------------------------------------------------------
00010C9C                            ; Subroutine to	set up bonuses at the end of an	zone
00010C9C                            ; ---------------------------------------------------------------------------
00010C9C                            
00010C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C9C                            
00010C9C                            
00010C9C                            GotThroughAct1:
00010C9C 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00010CA0 6600                       		bne.s	locret_ECEE1
00010CA2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00010CA8 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00010CAC 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00010CB0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010CB4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00010CBA 7000                       		moveq	#plcid_TitleCard,d0
00010CBC 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
00010CC2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00010CC8 7000                       		moveq	#0,d0
00010CCA 1038 FE23                  		move.b	(v_timemin).w,d0
00010CCE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00010CD2 7200                       		moveq	#0,d1
00010CD4 1238 FE24                  		move.b	(v_timesec).w,d1
00010CD8 D041                       		add.w	d1,d0		; add up your time
00010CDA 80FC 000F                  		divu.w	#15,d0		; divide by 15
00010CDE 7214                       		moveq	#$14,d1
00010CE0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00010CE2 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
00010CE6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
00010CE8                            
00010CE8                            	hastimebonus2:
00010CE8 D040                       		add.w	d0,d0
00010CEA 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00010CF0 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00010CF4 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00010CF8 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00010D06 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00010D0C                            
00010D0C                            locret_ECEE1:
00010D0C 4E75                       		rts	
00010D0E                            
00010D0E                            ; End of function GotThroughAct		
00010D0E                            
00010D0E 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00010D22 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D22 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00010D38                            		include	"_anim\Signpost.asm"
00010D38                            ; ---------------------------------------------------------------------------
00010D38                            ; Animation script - signpost
00010D38                            ; ---------------------------------------------------------------------------
00010D38 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
00010D3A 0000                       		dc.w @spin1-Ani_Sign
00010D3C 0000                       		dc.w @spin2-Ani_Sign
00010D3E 0000                       		dc.w @sonic-Ani_Sign
00010D40 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00010D44 00                         		even
00010D44 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
00010D4A 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00010D50 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00010D54 00                         		even
00010D54 00                         		even
00010D54                            Map_Sign:	include	"_maps\Signpost.asm"
00010D54                            ; --------------------------------------------------------------------------------
00010D54                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010D54                            ; --------------------------------------------------------------------------------
00010D54                            
00010D54                            SME_KvSue:	
00010D54 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00010D58 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00010D5C 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00010D5E 04                         SME_KvSue_A:	dc.b 4	
00010D5F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00010D64 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00010D69 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D6E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D73 03                         SME_KvSue_1F:	dc.b 3	
00010D74 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00010D79 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010D7E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D83 03                         SME_KvSue_2F:	dc.b 3	
00010D84 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00010D89 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010D8E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010D93 03                         SME_KvSue_3F:	dc.b 3	
00010D94 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
00010D99 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
00010D9E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010DA3 04                         SME_KvSue_4F:	dc.b 4	
00010DA4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
00010DA9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
00010DAE 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
00010DB3 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00010DB8                            		even
00010DB8                            		even
00010DB8                            
00010DB8                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
00010DB8                            ; ---------------------------------------------------------------------------
00010DB8                            ; Object 4C - lava geyser / lavafall producer (MZ)
00010DB8                            ; ---------------------------------------------------------------------------
00010DB8                            
00010DB8                            GeyserMaker:
00010DB8 7000                       		moveq	#0,d0
00010DBA 1028 0024                  		move.b	obRoutine(a0),d0
00010DBE 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
00010DC2 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
00010DC6 6000 0000                  		bra.w	Geyser_ChkDel
00010DCA                            ; ===========================================================================
00010DCA 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00010DCC 0000                       		dc.w GMake_Wait-GMake_Index
00010DCE 0000                       		dc.w GMake_ChkType-GMake_Index
00010DD0 0000                       		dc.w GMake_MakeLava-GMake_Index
00010DD2 0000                       		dc.w GMake_Display-GMake_Index
00010DD4 0000                       		dc.w GMake_Delete-GMake_Index
00010DD6                            
00010DD6 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
00010DD6 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
00010DD6 =0000003C                  gmake_parent:	equ $3C		; address of parent object
00010DD6                            ; ===========================================================================
00010DD6                            
00010DD6                            GMake_Main:	; Routine 0
00010DD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DDA 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00010DE2 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
00010DE8 117C 0004 0001             		move.b	#4,obRender(a0)
00010DEE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DF4 117C 0038 0014             		move.b	#$38,obActWid(a0)
00010DFA 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00010E00                            
00010E00                            GMake_Wait:	; Routine 2
00010E00 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00010E04 6A00                       		bpl.s	@cancel		; if time remains, branch
00010E06                            
00010E06 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00010E0C 3038 D00C                  		move.w	(v_player+obY).w,d0
00010E10 3228 000C                  		move.w	obY(a0),d1
00010E14 B041                       		cmp.w	d1,d0
00010E16 6400                       		bcc.s	@cancel
00010E18 0441 0170                  		subi.w	#$170,d1
00010E1C B041                       		cmp.w	d1,d0
00010E1E 6500                       		bcs.s	@cancel
00010E20 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00010E24                            
00010E24                            	@cancel:
00010E24 4E75                       		rts	
00010E26                            ; ===========================================================================
00010E26                            
00010E26                            GMake_MakeLava:	; Routine 6
00010E26 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E2A 6100 EBC2                  		bsr.w	FindNextFreeObj
00010E2E 6600                       		bne.s	@fail
00010E30 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00010E34 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E3A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E40 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010E46 2348 003C                  		move.l	a0,gmake_parent(a1)
00010E4A                            
00010E4A                            	@fail:
00010E4A 117C 0001 001C             		move.b	#1,obAnim(a0)
00010E50 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00010E54 6700                       		beq.s	@isgeyser	; if yes, branch
00010E56 117C 0004 001C             		move.b	#4,obAnim(a0)
00010E5C 6000                       		bra.s	GMake_Display
00010E5E                            ; ===========================================================================
00010E5E                            
00010E5E                            	@isgeyser:
00010E5E 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00010E62 08E9 0001 0022             		bset	#1,obStatus(a1)
00010E68 337C FA80 0012             		move.w	#-$580,obVelY(a1)
00010E6E 6000                       		bra.s	GMake_Display
00010E70                            ; ===========================================================================
00010E70                            
00010E70                            GMake_ChkType:	; Routine 4
00010E70 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00010E74 6700                       		beq.s	GMake_Display	; if yes, branch
00010E76 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E7A 4E75                       		rts	
00010E7C                            ; ===========================================================================
00010E7C                            
00010E7C                            GMake_Display:	; Routine 8
00010E7C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010E82 6100 B674                  		bsr.w	AnimateSprite
00010E86 6100 E5B6                  		bsr.w	DisplaySprite
00010E8A 4E75                       		rts	
00010E8C                            ; ===========================================================================
00010E8C                            
00010E8C                            GMake_Delete:	; Routine $A
00010E8C 117C 0000 001C             		move.b	#0,obAnim(a0)
00010E92 117C 0002 0024             		move.b	#2,obRoutine(a0)
00010E98 4A28 0028                  		tst.b	obSubtype(a0)
00010E9C 6700 E5E0                  		beq.w	DeleteObject
00010EA0 4E75                       		rts	
00010EA2                            
00010EA2                            
00010EA2                            ; ---------------------------------------------------------------------------
00010EA2                            ; Object 4D - lava geyser / lavafall (MZ)
00010EA2                            ; ---------------------------------------------------------------------------
00010EA2                            
00010EA2                            LavaGeyser:
00010EA2 7000                       		moveq	#0,d0
00010EA4 1028 0024                  		move.b	obRoutine(a0),d0
00010EA8 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
00010EAC 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
00010EB0 6000 E58C                  		bra.w	DisplaySprite
00010EB4                            ; ===========================================================================
00010EB4 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
00010EB6 0000                       		dc.w Geyser_Action-Geyser_Index
00010EB8 0000                       		dc.w loc_EFFC-Geyser_Index
00010EBA 0000                       		dc.w Geyser_Delete-Geyser_Index
00010EBC                            
00010EBC FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
00010EC0                            ; ===========================================================================
00010EC0                            
00010EC0                            Geyser_Main:	; Routine 0
00010EC0 5428 0024                  		addq.b	#2,obRoutine(a0)
00010EC4 3168 000C 0030             		move.w	obY(a0),$30(a0)
00010ECA 4A28 0028                  		tst.b	obSubtype(a0)
00010ECE 6700                       		beq.s	@isgeyser
00010ED0 0468 0250 000C             		subi.w	#$250,obY(a0)
00010ED6                            
00010ED6                            	@isgeyser:
00010ED6 7000                       		moveq	#0,d0
00010ED8 1028 0028                  		move.b	obSubtype(a0),d0
00010EDC D040                       		add.w	d0,d0
00010EDE 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00010EE4 2248                       		movea.l	a0,a1
00010EE6 7201                       		moveq	#1,d1
00010EE8 6100                       		bsr.s	@makelava
00010EEA 6000                       		bra.s	@activate
00010EEC                            ; ===========================================================================
00010EEC                            
00010EEC                            	@loop:
00010EEC 6100 EB00                  		bsr.w	FindNextFreeObj
00010EF0 6600                       		bne.s	@fail
00010EF2                            
00010EF2                            @makelava:
00010EF2 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00010EF6 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00010EFE 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00010F04 137C 0004 0001             		move.b	#4,obRender(a1)
00010F0A 137C 0020 0014             		move.b	#$20,obActWid(a1)
00010F10 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010F16 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010F1C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00010F22 337C 0080 0018             		move.w	#$80,obPriority(a1)
00010F28 137C 0005 001C             		move.b	#5,obAnim(a1)
00010F2E 4A28 0028                  		tst.b	obSubtype(a0)
00010F32 6700                       		beq.s	@fail
00010F34 137C 0002 001C             		move.b	#2,obAnim(a1)
00010F3A                            
00010F3A                            	@fail:
00010F3A 51C9 FFB0                  		dbf	d1,@loop
00010F3E 4E75                       		rts	
00010F40                            ; ===========================================================================
00010F40                            
00010F40                            @activate:
00010F40 0669 0060 000C             		addi.w	#$60,obY(a1)
00010F46 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010F4C 0669 0060 0030             		addi.w	#$60,$30(a1)
00010F52 137C 0093 0020             		move.b	#$93,obColType(a1)
00010F58 137C 0080 0016             		move.b	#$80,obHeight(a1)
00010F5E 08E9 0004 0001             		bset	#4,obRender(a1)
00010F64 5829 0024                  		addq.b	#4,obRoutine(a1)
00010F68 2348 003C                  		move.l	a0,$3C(a1)
00010F6C 4A28 0028                  		tst.b	obSubtype(a0)
00010F70 6700                       		beq.s	@sound
00010F72 7200                       		moveq	#0,d1
00010F74 6100 FF76                  		bsr.w	@loop
00010F78 5429 0024                  		addq.b	#2,obRoutine(a1)
00010F7C 08E9 0004 0002             		bset	#4,obGfx(a1)
00010F82 0669 0100 000C             		addi.w	#$100,obY(a1)
00010F88 337C 0000 0018             		move.w	#0,obPriority(a1)
00010F8E 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010F94 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
00010F9A 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010FA0                            
00010FA0                            	@sound:
00010FAA                            
00010FAA                            Geyser_Action:	; Routine 2
00010FAA 7000                       		moveq	#0,d0
00010FAC 1028 0028                  		move.b	obSubtype(a0),d0
00010FB0 D040                       		add.w	d0,d0
00010FB2 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
00010FB6 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
00010FBA 6100 E46E                  		bsr.w	SpeedToPos
00010FBE 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00010FC4 6100 B532                  		bsr.w	AnimateSprite
00010FC8                            
00010FC8                            Geyser_ChkDel:
00010FE6 4E75                       		rts	
00010FE8                            ; ===========================================================================
00010FE8 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
00010FEA 0000                       		dc.w Geyser_Type01-Geyser_Types
00010FEC                            ; ===========================================================================
00010FEC                            
00010FEC                            Geyser_Type00:
00010FEC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00010FF2 3028 0030                  		move.w	$30(a0),d0
00010FF6 B068 000C                  		cmp.w	obY(a0),d0
00010FFA 6400                       		bcc.s	locret_EFDA
00010FFC 5828 0024                  		addq.b	#4,obRoutine(a0)
00011000 2268 003C                  		movea.l	$3C(a0),a1
00011004 137C 0003 001C             		move.b	#3,obAnim(a1)
0001100A                            
0001100A                            locret_EFDA:
0001100A 4E75                       		rts	
0001100C                            ; ===========================================================================
0001100C                            
0001100C                            Geyser_Type01:
0001100C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011012 3028 0030                  		move.w	$30(a0),d0
00011016 B068 000C                  		cmp.w	obY(a0),d0
0001101A 6400                       		bcc.s	locret_EFFA
0001101C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011020 2268 003C                  		movea.l	$3C(a0),a1
00011024 137C 0001 001C             		move.b	#1,obAnim(a1)
0001102A                            
0001102A                            locret_EFFA:
0001102A 4E75                       		rts	
0001102C                            ; ===========================================================================
0001102C                            
0001102C                            loc_EFFC:	; Routine 4
0001102C 2268 003C                  		movea.l	$3C(a0),a1
00011030 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011036 6700 0000                  		beq.w	Geyser_Delete
0001103A 3029 000C                  		move.w	obY(a1),d0
0001103E 0640 0060                  		addi.w	#$60,d0
00011042 3140 000C                  		move.w	d0,obY(a0)
00011046 9068 0030                  		sub.w	$30(a0),d0
0001104A 4440                       		neg.w	d0
0001104C 7208                       		moveq	#8,d1
0001104E 0C40 0040                  		cmpi.w	#$40,d0
00011052 6C00                       		bge.s	loc_F026
00011054 720B                       		moveq	#$B,d1
00011056                            
00011056                            loc_F026:
00011056 0C40 0080                  		cmpi.w	#$80,d0
0001105A 6F00                       		ble.s	loc_F02E
0001105C 720E                       		moveq	#$E,d1
0001105E                            
0001105E                            loc_F02E:
0001105E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011062 6A00                       		bpl.s	loc_F04C
00011064 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001106A 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001106E 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011074 6500                       		bcs.s	loc_F04C
00011076 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001107C                            
0001107C                            loc_F04C:
0001107C 1028 001B                  		move.b	obAniFrame(a0),d0
00011080 D001                       		add.b	d1,d0
00011082 1140 001A                  		move.b	d0,obFrame(a0)
00011086 6000 FF40                  		bra.w	Geyser_ChkDel
0001108A                            ; ===========================================================================
0001108A                            
0001108A                            Geyser_Delete:	; Routine 6
0001108A 6000 E3F2                  		bra.w	DeleteObject
0001108A 6000 E3F2                  		bra.w	DeleteObject
0001108E                            		include	"_incObj\54 Lava Tag.asm"
0001108E                            ; ---------------------------------------------------------------------------
0001108E                            ; Object 54 - invisible	lava tag (MZ)
0001108E                            ; ---------------------------------------------------------------------------
0001108E                            
0001108E                            LavaTag:
0001108E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
00011094 6E00 0000                  		bgt	WaterTag	;TIS
00011098 7000                       		moveq	#0,d0
0001109A 1028 0024                  		move.b	obRoutine(a0),d0
0001109E 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000110A2 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000110A6                            ; ===========================================================================
000110A6 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000110A8 0000                       		dc.w LTag_ChkDel-LTag_Index
000110AA                            
000110AA 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000110AE 00                         		even
000110AE                            ; ===========================================================================
000110AE                            
000110AE                            LTag_Main:	; Routine 0
000110AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000110B2 7000                       		moveq	#0,d0
000110B4 1028 0028                  		move.b	obSubtype(a0),d0
000110B8 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000110BE 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000110C6 117C 0084 0001             		move.b	#$84,obRender(a0)
000110CC                            
000110CC                            LTag_ChkDel:	; Routine 2
000110CC 3028 0008                  		move.w	obX(a0),d0
000110D0 0240 FF80                  		andi.w	#$FF80,d0
000110D4 3238 F700                  		move.w	(v_screenposx).w,d1
000110D8 0441 0080                  		subi.w	#$80,d1
000110DC 0241 FF80                  		andi.w	#$FF80,d1
000110E0 9041                       		sub.w	d1,d0
000110E2 6B00 E39A                  		bmi.w	DeleteObject
000110E6 0C40 0280                  		cmpi.w	#$280,d0
000110EA 6200 E392                  		bhi.w	DeleteObject
000110EE 4E75                       		rts
000110F0                            
000110F0                            
000110F0                            ; ---------------------------------------------------------------------------
000110F0                            ; Object 54a - invisible	water tag (MZ) - TIS
000110F0                            ; ---------------------------------------------------------------------------
000110F0                            
000110F0                            WaterTag:	
000110F0 7000                       		moveq	#0,d0
000110F2 1028 0024                  		move.b	obRoutine(a0),d0
000110F6 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
000110FA 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
000110FE                            ; ===========================================================================
000110FE 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011100 0000                       		dc.w WTag_ChkDel-WTag_Index
00011102                            
00011102 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011106 00                         		even
00011106                            ; ===========================================================================
00011106                            
00011106                            
00011106                            WTag_Main:	; Routine 0
00011106 5428 0024                  		addq.b	#2,obRoutine(a0)
0001110A 7000                       		moveq	#0,d0
0001110C                            		;move.b	obSubtype(a0),d0
0001110C                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001110C 0400 00F0                  		sub.b	#$F0,d0
00011110 1178 0096 0020             		move.b	$96,obColType(a0)							
00011116                            		;move.l	#Map_LTag,obMap(a0)
00011116                            		;move.b	#$84,obRender(a0)
00011116                            
00011116                            WTag_ChkDel:	; Routine 2
00011116 3028 0008                  		move.w	obX(a0),d0
0001111A 0240 FF80                  		andi.w	#$FF80,d0
0001111E 3238 F700                  		move.w	(v_screenposx).w,d1
00011122 0441 0080                  		subi.w	#$80,d1
00011126 0241 FF80                  		andi.w	#$FF80,d1
0001112A 9041                       		sub.w	d1,d0
0001112C 6B00 E350                  		bmi.w	DeleteObject
00011130 0C40 0280                  		cmpi.w	#$280,d0
00011134 6200 E348                  		bhi.w	DeleteObject
00011138 4E75                       		rts
0001113A                            
0001113A                            
0001113A                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            ; Sprite mappings - invisible lava tag (MZ)
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            Map_LTag_internal:
0001113A 0000                       		dc.w @0-Map_LTag_internal
0001113C 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001113E 00                         		even
0001113E 00                         		even
0001113E                            		include	"_anim\Lava Geyser.asm"
0001113E                            ; ---------------------------------------------------------------------------
0001113E                            ; Animation script - geyser of lava (MZ)
0001113E                            ; ---------------------------------------------------------------------------
0001113E 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011140 0000                       		dc.w @bubble2-Ani_Geyser
00011142 0000                       		dc.w @end-Ani_Geyser
00011144 0000                       		dc.w @bubble3-Ani_Geyser
00011146 0000                       		dc.w @blank-Ani_Geyser
00011148 0000                       		dc.w @bubble4-Ani_Geyser
0001114A 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011154 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011158 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0001115C 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011164 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011168 00                         		even
00011168 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0001116C                            		even
0001116C                            		even
0001116C                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0001116C                            ; ---------------------------------------------------------------------------
0001116C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001116C                            ; ---------------------------------------------------------------------------
0001116C                            Map_Geyser_internal:
0001116C 0000                       		dc.w @bubble1-Map_Geyser_internal
0001116E 0000                       		dc.w @bubble2-Map_Geyser_internal
00011170 0000                       		dc.w @bubble3-Map_Geyser_internal
00011172 0000                       		dc.w @bubble4-Map_Geyser_internal
00011174 0000                       		dc.w @bubble5-Map_Geyser_internal
00011176 0000                       		dc.w @bubble6-Map_Geyser_internal
00011178 0000                       		dc.w @end1-Map_Geyser_internal
0001117A 0000                       		dc.w @end2-Map_Geyser_internal
0001117C 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001117E 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011180 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011182 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011184 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011186 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011188 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0001118A 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001118C 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001118E 0000                       		dc.w @bubble7-Map_Geyser_internal
00011190 0000                       		dc.w @bubble8-Map_Geyser_internal
00011192 0000                       		dc.w @blank-Map_Geyser_internal
00011194 02                         @bubble1:	dc.b 2
00011195 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0001119A EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0001119F 02                         @bubble2:	dc.b 2
000111A0 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000111A5 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000111AA 04                         @bubble3:	dc.b 4
000111AB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000111B0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000111B5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000111BA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000111BF 04                         @bubble4:	dc.b 4
000111C0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000111C5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000111CA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000111CF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000111D4 06                         @bubble5:	dc.b 6
000111D5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000111DA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000111DF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000111E4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000111E9 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000111EE E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
000111F3 06                         @bubble6:	dc.b 6
000111F4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000111F9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000111FE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011203 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011208 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001120D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011212 02                         @end1:		dc.b 2
00011213 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011218 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001121D 02                         @end2:		dc.b 2
0001121E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011223 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011228 0A                         @medcolumn1:	dc.b $A
00011229 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001122E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011233 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011238 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001123D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011242 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011247 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001124C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011251 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011256 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001125B 0A                         @medcolumn2:	dc.b $A
0001125C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011261 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011266 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001126B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011270 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011275 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001127A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001127F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011284 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011289 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001128E 0A                         @medcolumn3:	dc.b $A
0001128F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011294 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00011299 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001129E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000112A3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000112A8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000112AD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000112B2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000112B7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000112BC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000112C1 06                         @shortcolumn1:	dc.b 6
000112C2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000112C7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000112CC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000112D1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000112D6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000112DB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000112E0 06                         @shortcolumn2:	dc.b 6
000112E1 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000112E6 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000112EB B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000112F0 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000112F5 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000112FA D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000112FF 06                         @shortcolumn3:	dc.b 6
00011300 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011305 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001130A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001130F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011314 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011319 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001131E 10                         @longcolumn1:	dc.b $10
0001131F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011324 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011329 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001132E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011333 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011338 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001133D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011342 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011347 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001134C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011351 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011356 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001135B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011360 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011365 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001136A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001136F 10                         @longcolumn2:	dc.b $10
00011370 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011375 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001137A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001137F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011384 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011389 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001138E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
00011393 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011398 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0001139D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000113A2 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000113A7 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000113AC 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000113B1 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000113B6 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000113BB 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000113C0 10                         @longcolumn3:	dc.b $10
000113C1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000113C6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000113CB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000113D0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000113D5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000113DA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000113DF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000113E4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000113E9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000113EE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000113F3 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
000113F8 300F 0860 00               		dc.b $30, $F, 8, $60, 0
000113FD 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011402 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011407 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001140C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011411 06                         @bubble7:	dc.b 6
00011412 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011417 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001141C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011421 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011426 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001142B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011430 06                         @bubble8:	dc.b 6
00011431 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011436 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001143B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011440 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011445 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001144A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001144F 00                         @blank:	dc.b 0
00011450                            		even
00011450                            		even
00011450                            
00011450                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011450                            ; ---------------------------------------------------------------------------
00011450                            ; Object 40 - Moto Bug enemy (GHZ)
00011450                            ; ---------------------------------------------------------------------------
00011450                            
00011450                            MotoBug:
00011450 7000                       		moveq	#0,d0
00011452 1028 0024                  		move.b	obRoutine(a0),d0
00011456 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001145A 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001145E                            ; ===========================================================================
0001145E 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011460 0000                       		dc.w Moto_Action-Moto_Index
00011462 0000                       		dc.w Moto_Animate-Moto_Index
00011464 0000                       		dc.w Moto_Delete-Moto_Index
00011466                            ; ===========================================================================
00011466                            
00011466                            Moto_Main:	; Routine 0
00011466 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001146E 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011474 117C 0004 0001             		move.b	#4,obRender(a0)
0001147A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011480 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011486 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0001148A 6600                       		bne.s	@smoke		; if yes, branch
0001148C 117C 000E 0016             		move.b	#$E,obHeight(a0)
00011492 117C 0008 0017             		move.b	#8,obWidth(a0)
00011498 117C 000C 0020             		move.b	#$C,obColType(a0)
0001149E 6100 DF52                  		bsr.w	ObjectFall
000114A2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000114A8 4A41                       		tst.w	d1
000114AA 6A00                       		bpl.s	@notonfloor
000114AC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000114B0 317C 0000 0012             		move.w	#0,obVelY(a0)
000114B6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000114BA 0868 0000 0022             		bchg	#0,obStatus(a0)
000114C0                            
000114C0                            	@notonfloor:
000114C0 4E75                       		rts	
000114C2                            ; ===========================================================================
000114C2                            
000114C2                            @smoke:
000114C2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000114C6 6000 0000                  		bra.w	Moto_Animate
000114CA                            ; ===========================================================================
000114CA                            
000114CA                            Moto_Action:	; Routine 2
000114CA 7000                       		moveq	#0,d0
000114CC 1028 0025                  		move.b	ob2ndRout(a0),d0
000114D0 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000114D4 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000114D8 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000114DE 6100 B018                  		bsr.w	AnimateSprite
000114E2                            
000114E2                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000114E2                            ; ---------------------------------------------------------------------------
000114E2                            ; Subroutine to remember whether an object is destroyed/collected
000114E2                            ; ---------------------------------------------------------------------------
000114E2                            
000114E2                            RememberState:
00011500 6000 DF3C                  		bra.w	DisplaySprite
00011504                            
00011504                            	@offscreen:
00011504 45F8 FC00                  		lea	(v_objstate).w,a2
00011508 7000                       		moveq	#0,d0
0001150A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001150E 6700                       		beq.s	@delete
00011510 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011516                            
00011516                            	@delete:
00011516 6000 DF66                  		bra.w	DeleteObject
00011516 6000 DF66                  		bra.w	DeleteObject
0001151A                            
0001151A                            ; ===========================================================================
0001151A 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001151C 0000                       		dc.w @findfloor-Moto_ActIndex
0001151E                            
0001151E =00000030                  @time:		equ $30
0001151E =00000033                  @smokedelay:	equ $33
0001151E                            ; ===========================================================================
0001151E                            
0001151E                            @move:
0001151E 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011522 6A00                       		bpl.s	@wait		; if time remains, branch
00011524 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011528 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001152E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011534 0868 0000 0022             		bchg	#0,obStatus(a0)
0001153A 6600                       		bne.s	@wait
0001153C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011540                            
00011540                            	@wait:
00011540 4E75                       		rts	
00011542                            ; ===========================================================================
00011542                            
00011542                            @findfloor:
00011542 6100 DEE6                  		bsr.w	SpeedToPos
00011546 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001154C 0C41 FFF8                  		cmpi.w	#-8,d1
00011550 6D00                       		blt.s	@pause
00011552 0C41 000C                  		cmpi.w	#$C,d1
00011556 6C00                       		bge.s	@pause
00011558 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001155C 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011560 6A00                       		bpl.s	@nosmoke
00011562 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011568 6100 E46E                  		bsr.w	FindFreeObj
0001156C 6600                       		bne.s	@nosmoke
0001156E 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011572 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011578 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001157E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011584 137C 0002 001C             		move.b	#2,obAnim(a1)
0001158A                            
0001158A                            	@nosmoke:
0001158A 4E75                       		rts	
0001158C                            
0001158C                            @pause:
0001158C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011590 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011596 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0001159C 117C 0000 001C             		move.b	#0,obAnim(a0)
000115A2 4E75                       		rts	
000115A4                            ; ===========================================================================
000115A4                            
000115A4                            Moto_Animate:	; Routine 4
000115A4 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000115AA 6100 AF4C                  		bsr.w	AnimateSprite
000115AE 6000 DE8E                  		bra.w	DisplaySprite
000115B2                            ; ===========================================================================
000115B2                            
000115B2                            Moto_Delete:	; Routine 6
000115B2 6000 DECA                  		bra.w	DeleteObject
000115B2 6000 DECA                  		bra.w	DeleteObject
000115B6                            		include	"_anim\Moto Bug.asm"
000115B6                            ; ---------------------------------------------------------------------------
000115B6                            ; Animation script - Motobug enemy
000115B6                            ; ---------------------------------------------------------------------------
000115B6 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000115B8 0000                       		dc.w @walk-Ani_Moto
000115BA 0000                       		dc.w @smoke-Ani_Moto
000115BC                            
000115BC 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000115C0 00                         		even
000115C0 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000115C6 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000115D4 00                         		even
000115D4 00                         		even
000115D4                            Map_Moto:	include	"_maps\Moto Bug.asm"
000115D4                            ; --------------------------------------------------------------------------------
000115D4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000115D4                            ; --------------------------------------------------------------------------------
000115D4                            
000115D4                            SME_TTY9T:	
000115D4 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000115D8 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000115DC 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000115E0 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000115E2 04                         SME_TTY9T_E:	dc.b 4	
000115E3 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000115E8 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000115ED F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
000115F2 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
000115F7 04                         SME_TTY9T_23:	dc.b 4	
000115F8 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
000115FD 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011602 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011607 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
0001160C 05                         SME_TTY9T_38:	dc.b 5	
0001160D F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011612 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011617 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
0001161C 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011621 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011626 01                         SME_TTY9T_52:	dc.b 1	
00011627 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
0001162C 01                         SME_TTY9T_58:	dc.b 1	
0001162D FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011632 01                         SME_TTY9T_5E:	dc.b 1	
00011633 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011638 00                         SME_TTY9T_64:	dc.b 0	
0001163A 00                         		even
0001163A 00                         		even
0001163A                            		include	"_incObj\4F.asm"
0001163A                            ; ---------------------------------------------------------------------------
0001163A                            ; Object 4F - Splats
0001163A                            ; ---------------------------------------------------------------------------
0001163A                            
0001163A                            Obj4F:
0001163A 7000                                       moveq   #0,d0
0001163C 1028 0024                                  move.b  $24(a0),d0
00011640 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011644 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011648                            ; ---------------------------------------------------------------------------
00011648 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
0001164A 0000                                       dc.w loc_D246-ObjSplats_Index
0001164C 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
0001164E 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011650                            ; ---------------------------------------------------------------------------
00011650                            
00011650                            ObjSplats_Init:
00011650 5428 0024                                  addq.b  #2,$24(a0)
00011654 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
0001165C 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011662 117C 0004 0001                             move.b  #4,1(a0)
00011668 117C 0004 0014                             move.b  #4,obActWid(a0)
0001166E 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011674 117C 0014 0016                             move.b  #$14,$16(a0)
0001167A 117C 0002 0020                             move.b  #2,$20(a0)
00011680 4A28 0028                                  tst.b   $28(a0)
00011684 6700                                       beq.s   loc_D246
00011686 343C 0300                                  move.w  #$300,d2
0001168A 6000                                       bra.s   ObjSplats_FaceRight
0001168C                            ; ---------------------------------------------------------------------------
0001168C                            
0001168C                            loc_D246:
0001168C 343C 00E0                                  move.w  #$E0,d2
00011690                            
00011690                            ObjSplats_FaceRight:
00011690 323C 0100                                  move.w  #$100,d1
00011694 08E8 0000 0001                             bset    #0,1(a0)
0001169A 3038 D008                                  move.w  ($FFFFD008).w,d0
0001169E 9068 0008                                  sub.w   8(a0),d0
000116A2 6400                                       bcc.s   ObjSplats_Move
000116A4 4440                                       neg.w   d0
000116A6 4441                                       neg.w   d1
000116A8 08A8 0000 0001                             bclr    #0,1(a0)
000116AE                            
000116AE                            ObjSplats_Move:
000116AE B042                                       cmp.w   d2,d0
000116B0 6400                                       bcc.s   ObjSplats_Bounce
000116B2 3141 0010                                  move.w  d1,$10(a0)
000116B6 5428 0024                                  addq.b  #2,$24(a0)
000116BA                            
000116BA                            ObjSplats_Bounce:
000116BA 6100 DD36                                  bsr.w   ObjectFall
000116BE 117C 0001 001A                             move.b  #1,$1A(a0)
000116C4 4A68 0012                                  tst.w   $12(a0)
000116C8 6B00                                       bmi.s   ObjSplats_Turn
000116CA 117C 0000 001A                             move.b  #0,$1A(a0)
000116D0 6100 0000                                  bsr.w   ObjFloorDist
000116D4 4A41                                       tst.w   d1
000116D6 6A00                                       bpl.s   ObjSplats_Turn
000116D8 3011                                       move.w  (a1),d0
000116DA 0240 03FF                                  andi.w  #$3FF,d0
000116DE 0C40 02D2                                  cmpi.w  #$2D2,d0
000116E2 6500                                       bcs.s   ObjSplats_Fall
000116E4 5428 0024                                  addq.b  #2,$24(a0)
000116E8 6000                                       bra.s   ObjSplats_Turn
000116EA                            ; ---------------------------------------------------------------------------
000116EA                            
000116EA                            ObjSplats_Fall:
000116EA D368 000C                                  add.w   d1,$C(a0)
000116EE 317C FC00 0012                             move.w  #$FC00,$12(a0)
000116F4                            
000116F4                            ObjSplats_Turn:
000116F4 6100 0000                                  bsr.w   Yad_ChkWall
000116F8 6700                                       beq.s   loc_D2C4
000116FA 4468 0010                                  neg.w   $10(a0)
000116FE 0868 0000 0001                             bchg    #0,1(a0)
00011704 0868 0000 0022                             bchg    #0,$22(a0)
0001170A                            
0001170A                            loc_D2C4:
0001170A 6000 FDD6                                  bra.w   RememberState
0001170E                            ; ---------------------------------------------------------------------------
0001170E                            
0001170E                            loc_D2C8:
0001170E 6100 DCE2                                  bsr.w   ObjectFall
00011712 6100 DD2A                                  bsr.w   DisplaySprite
00011716 4A28 0001                                  tst.b   1(a0)
0001171A 6A00 DD62                                  bpl.w   DeleteObject
0001171E 4E75                                       rts
0001171E 4E75                                       rts
00011720                            Map_Splats:	include	"_maps\Splats.asm"
00011720 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011722 0000                                       dc.w unk_D31B-Map_Splats_internal
00011724 02                         unk_D310:       dc.b   2
00011725 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
0001172F 02                         unk_D31B:       dc.b   2
00011730 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011730 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
0001173A                            
0001173A                            		include	"_incObj\50 Yadrin.asm"
0001173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001173A                            
0001173A                            
0001173A                            Yad_ChkWall:
0001173A 3038 FE04                  		move.w	(v_framecount).w,d0
0001173E D047                       		add.w	d7,d0
00011740 0240 0003                  		andi.w	#3,d0
00011744 6600                       		bne.s	loc_F836
00011746 7600                       		moveq	#0,d3
00011748 1628 0014                  		move.b	obActWid(a0),d3
0001174C 4A68 0010                  		tst.w	obVelX(a0)
00011750 6B00                       		bmi.s	loc_F82C
00011752 6100 0000                  		bsr.w	ObjHitWallRight
00011756 4A41                       		tst.w	d1
00011758 6A00                       		bpl.s	loc_F836
0001175A                            
0001175A                            loc_F828:
0001175A 7001                       		moveq	#1,d0
0001175C 4E75                       		rts	
0001175E                            ; ===========================================================================
0001175E                            
0001175E                            loc_F82C:
0001175E 4643                       		not.w	d3
00011760 6100 0000                  		bsr.w	ObjHitWallLeft
00011764 4A41                       		tst.w	d1
00011766 6BF2                       		bmi.s	loc_F828
00011768                            
00011768                            loc_F836:
00011768 7000                       		moveq	#0,d0
0001176A 4E75                       		rts	
0001176C                            ; End of function Yad_ChkWall
0001176C                            
0001176C                            ; ===========================================================================
0001176C                            ; ---------------------------------------------------------------------------
0001176C                            ; Object 50 - Yadrin enemy (SYZ)
0001176C                            ; ---------------------------------------------------------------------------
0001176C                            
0001176C                            Yadrin:
0001176C 7000                       		moveq	#0,d0
0001176E 1028 0024                  		move.b	obRoutine(a0),d0
00011772 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011776 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
0001177A                            ; ===========================================================================
0001177A 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
0001177C 0000                       		dc.w Yad_Action-Yad_Index
0001177E                            
0001177E =00000030                  yad_timedelay:	equ $30
0001177E                            ; ===========================================================================
0001177E                            
0001177E                            Yad_Main:	; Routine 0
0001177E 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011786 317C 247B 0002             		move.w	#$247B,obGfx(a0)
0001178C 117C 0004 0001             		move.b	#4,obRender(a0)
00011792 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011798 117C 0014 0014             		move.b	#$14,obActWid(a0)
0001179E 117C 0011 0016             		move.b	#$11,obHeight(a0)
000117A4 117C 0008 0017             		move.b	#8,obWidth(a0)
000117AA 117C 00CC 0020             		move.b	#$CC,obColType(a0)
000117B0 6100 DC40                  		bsr.w	ObjectFall
000117B4 6100 0000                  		bsr.w	ObjFloorDist
000117B8 4A41                       		tst.w	d1
000117BA 6A00                       		bpl.s	locret_F89E
000117BC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000117C0 317C 0000 0012             		move.w	#0,obVelY(a0)
000117C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000117CA 0868 0000 0022             		bchg	#0,obStatus(a0)
000117D0                            
000117D0                            	locret_F89E:
000117D0 4E75                       		rts	
000117D2                            ; ===========================================================================
000117D2                            
000117D2                            Yad_Action:	; Routine 2
000117D2 7000                       		moveq	#0,d0
000117D4 1028 0025                  		move.b	ob2ndRout(a0),d0
000117D8 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
000117DC 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
000117E0 43F9 0000 0000             		lea	(Ani_Yad).l,a1
000117E6 6100 AD10                  		bsr.w	AnimateSprite
000117EA 6000 FCF6                  		bra.w	RememberState
000117EE                            ; ===========================================================================
000117EE 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
000117F0 0000                       		dc.w Yad_FixToFloor-Yad_Index2
000117F2                            ; ===========================================================================
000117F2                            
000117F2                            Yad_Move:
000117F2 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
000117F6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000117F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000117FC 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011802 117C 0001 001C             		move.b	#1,obAnim(a0)
00011808 0868 0000 0022             		bchg	#0,obStatus(a0)
0001180E 6600                       		bne.s	locret_F8E2
00011810 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011814                            
00011814                            	locret_F8E2:
00011814 4E75                       		rts	
00011816                            ; ===========================================================================
00011816                            
00011816                            Yad_FixToFloor:
00011816 6100 DC12                  		bsr.w	SpeedToPos
0001181A 6100 0000                  		bsr.w	ObjFloorDist
0001181E 0C41 FFF8                  		cmpi.w	#-8,d1
00011822 6D00                       		blt.s	Yad_Pause
00011824 0C41 000C                  		cmpi.w	#$C,d1
00011828 6C00                       		bge.s	Yad_Pause
0001182A D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
0001182E 6100 FF0A                  		bsr.w	Yad_ChkWall
00011832 6600                       		bne.s	Yad_Pause
00011834 4E75                       		rts	
00011836                            ; ===========================================================================
00011836                            
00011836                            Yad_Pause:
00011836 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001183A 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011840 317C 0000 0010             		move.w	#0,obVelX(a0)
00011846 117C 0000 001C             		move.b	#0,obAnim(a0)
0001184C 4E75                       		rts	
0001184C 4E75                       		rts	
0001184E                            		include	"_anim\Yadrin.asm"
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            ; Animation script - Yadrin enemy
0001184E                            ; ---------------------------------------------------------------------------
0001184E 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011850 0000                       		dc.w @walk-Ani_Yad
00011852                            
00011852 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011856 00                         		even
00011856 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011864                            		even
00011864                            		even
00011864                            Map_Yad:	include	"_maps\Yadrin.asm"
00011864                            ; --------------------------------------------------------------------------------
00011864                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011864                            ; --------------------------------------------------------------------------------
00011864                            
00011864                            SME_4WhIu:	
00011864 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011868 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
0001186C 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011870 09                         SME_4WhIu_C:	dc.b 9	
00011871 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011876 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
0001187B 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011880 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011885 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
0001188A FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
0001188F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011894 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011899 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
0001189E 09                         SME_4WhIu_3A:	dc.b 9	
0001189F F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
000118A4 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000118A9 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
000118AE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
000118B3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
000118B8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118BD F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
000118C2 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
000118C7 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
000118CC 0C                         SME_4WhIu_68:	dc.b $C	
000118CD EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
000118D2 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
000118D7 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
000118DC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
000118E1 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
000118E6 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
000118EB EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
000118F0 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
000118F5 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
000118FA F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
000118FF 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011904 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011909 0C                         SME_4WhIu_A5:	dc.b $C	
0001190A F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
0001190F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011914 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011919 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
0001191E 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011923 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011928 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
0001192D EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011932 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011937 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
0001193C 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011941 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011946 05                         SME_4WhIu_E2:	dc.b 5	
00011947 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
0001194C 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011951 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011956 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
0001195B 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011960 05                         SME_4WhIu_FC:	dc.b 5	
00011961 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011966 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
0001196B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011970 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011975 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
0001197A                            		even
0001197A                            		even
0001197A                            
0001197A                            		include	"_incObj\sub SolidObject.asm"
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001197A                            ;
0001197A                            ; input:
0001197A                            ;	d1 = width
0001197A                            ;	d2 = height / 2 (when jumping)
0001197A                            ;	d3 = height / 2 (when walking)
0001197A                            ;	d4 = x-axis position
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            
0001197A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001197A                            
0001197A                            
0001197A                            SolidObject:
0001197A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
0001197E 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011982 3401                       		move.w	d1,d2
00011984 D442                       		add.w	d2,d2
00011986 43F8 D000                  		lea	(v_player).w,a1
0001198A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011990 6600                       		bne.s	@leave		; if yes, branch
00011992 3029 0008                  		move.w	obX(a1),d0
00011996 9068 0008                  		sub.w	obX(a0),d0
0001199A D041                       		add.w	d1,d0
0001199C 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
0001199E B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
000119A0 6500                       		bcs.s	@stand		; if not, branch
000119A2                            
000119A2                            	@leave:
000119A2 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
000119A8 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
000119AE 4228 0025                  		clr.b	obSolid(a0)
000119B2 7800                       		moveq	#0,d4
000119B4 4E75                       		rts	
000119B6                            
000119B6                            	@stand:
000119B6 3404                       		move.w	d4,d2
000119B8 4EB9 0000 91CE             		jsr	MvSonicOnPtfm
000119BE 7800                       		moveq	#0,d4
000119C0 4E75                       		rts	
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            SolidObject71:
000119C2 4A28 0025                  		tst.b	obSolid(a0)
000119C6 6700 0000                  		beq.w	loc_FAD0
000119CA 3401                       		move.w	d1,d2
000119CC D442                       		add.w	d2,d2
000119CE 43F8 D000                  		lea	(v_player).w,a1
000119D2 0829 0001 0022             		btst	#1,obStatus(a1)
000119D8 6600                       		bne.s	@leave
000119DA 3029 0008                  		move.w	obX(a1),d0
000119DE 9068 0008                  		sub.w	obX(a0),d0
000119E2 D041                       		add.w	d1,d0
000119E4 6B00                       		bmi.s	@leave
000119E6 B042                       		cmp.w	d2,d0
000119E8 6500                       		bcs.s	@stand
000119EA                            
000119EA                            	@leave:
000119EA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000119F0 08A8 0003 0022             		bclr	#3,obStatus(a0)
000119F6 4228 0025                  		clr.b	obSolid(a0)
000119FA 7800                       		moveq	#0,d4
000119FC 4E75                       		rts	
000119FE                            
000119FE                            	@stand:
000119FE 3404                       		move.w	d4,d2
00011A00 4EB9 0000 91CE             		jsr	MvSonicOnPtfm
00011A06 7800                       		moveq	#0,d4
00011A08 4E75                       		rts	
00011A0A                            ; ===========================================================================
00011A0A                            
00011A0A                            SolidObject2F:
00011A0A 43F8 D000                  		lea	(v_player).w,a1
00011A0E 4A28 0001                  		tst.b	obRender(a0)
00011A12 6A00 0000                  		bpl.w	Solid_Ignore
00011A16 3029 0008                  		move.w	obX(a1),d0
00011A1A 9068 0008                  		sub.w	obX(a0),d0
00011A1E D041                       		add.w	d1,d0
00011A20 6B00 0000                  		bmi.w	Solid_Ignore
00011A24 3601                       		move.w	d1,d3
00011A26 D643                       		add.w	d3,d3
00011A28 B043                       		cmp.w	d3,d0
00011A2A 6200 0000                  		bhi.w	Solid_Ignore
00011A2E 3A00                       		move.w	d0,d5
00011A30 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011A36 6700                       		beq.s	@notflipped	; if not, branch
00011A38 4645                       		not.w	d5
00011A3A DA43                       		add.w	d3,d5
00011A3C                            
00011A3C                            	@notflipped:
00011A3C E24D                       		lsr.w	#1,d5
00011A3E 7600                       		moveq	#0,d3
00011A40 1632 5000                  		move.b	(a2,d5.w),d3
00011A44 9612                       		sub.b	(a2),d3
00011A46 3A28 000C                  		move.w	obY(a0),d5
00011A4A 9A43                       		sub.w	d3,d5
00011A4C 1629 0016                  		move.b	obHeight(a1),d3
00011A50 4883                       		ext.w	d3
00011A52 D443                       		add.w	d3,d2
00011A54 3629 000C                  		move.w	obY(a1),d3
00011A58 9645                       		sub.w	d5,d3
00011A5A 5843                       		addq.w	#4,d3
00011A5C D642                       		add.w	d2,d3
00011A5E 6B00 0000                  		bmi.w	Solid_Ignore
00011A62 3802                       		move.w	d2,d4
00011A64 D844                       		add.w	d4,d4
00011A66 B644                       		cmp.w	d4,d3
00011A68 6400 0000                  		bcc.w	Solid_Ignore
00011A6C 6000 0000                  		bra.w	loc_FB0E
00011A70                            ; ===========================================================================
00011A70                            
00011A70                            Solid_ChkEnter:
00011A70 4A28 0001                  		tst.b	obRender(a0)
00011A74 6A00 0000                  		bpl.w	Solid_Ignore
00011A78                            
00011A78                            loc_FAD0:
00011A78 43F8 D000                  		lea	(v_player).w,a1
00011A7C 3029 0008                  		move.w	obX(a1),d0
00011A80 9068 0008                  		sub.w	obX(a0),d0
00011A84 D041                       		add.w	d1,d0
00011A86 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011A8A 3601                       		move.w	d1,d3
00011A8C D643                       		add.w	d3,d3
00011A8E B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011A90 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011A94 1629 0016                  		move.b	obHeight(a1),d3
00011A98 4883                       		ext.w	d3
00011A9A D443                       		add.w	d3,d2
00011A9C 3629 000C                  		move.w	obY(a1),d3
00011AA0 9668 000C                  		sub.w	obY(a0),d3
00011AA4 5843                       		addq.w	#4,d3
00011AA6 D642                       		add.w	d2,d3
00011AA8 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011AAC 3802                       		move.w	d2,d4
00011AAE D844                       		add.w	d4,d4
00011AB0 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011AB2 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011AB6                            
00011AB6                            loc_FB0E:
00011AB6 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011ABA 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011ABE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011AC4 6400 0000                  			bcc.w	Solid_Debug
00011AC8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011ACC 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011AD0 3A00                       		move.w	d0,d5
00011AD2 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011AD4 6400                       		bcc.s	@isright	; if yes, branch
00011AD6 D241                       		add.w	d1,d1
00011AD8 9041                       		sub.w	d1,d0
00011ADA 3A00                       		move.w	d0,d5
00011ADC 4445                       		neg.w	d5
00011ADE                            
00011ADE                            	@isright:
00011ADE 3203                       		move.w	d3,d1
00011AE0 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011AE2 6400                       		bcc.s	@isbelow	; if yes, branch
00011AE4                            
00011AE4 5943                       		subq.w	#4,d3
00011AE6 9644                       		sub.w	d4,d3
00011AE8 3203                       		move.w	d3,d1
00011AEA 4441                       		neg.w	d1
00011AEC                            
00011AEC                            	@isbelow:
00011AEC BA41                       		cmp.w	d1,d5
00011AEE 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011AF2 0C41 0004                  		cmpi.w	#4,d1
00011AF6 6300                       		bls.s	Solid_SideAir
00011AF8 4A40                       		tst.w	d0		; where is Sonic?
00011AFA 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011AFC 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011AFE 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011B02 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011B04 6000                       		bra.s	Solid_Left
00011B06                            ; ===========================================================================
00011B06                            
00011B06                            Solid_Right:
00011B06 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011B0A 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011B0C                            
00011B0C                            Solid_Left:
00011B0C 337C 0000 0020             		move.w	#0,obInertia(a1)
00011B12 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011B18                            
00011B18                            Solid_Centre:
00011B18 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011B1C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B22 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011B24 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011B2A 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011B30 7801                       		moveq	#1,d4		; return side collision
00011B32 4E75                       		rts	
00011B34                            ; ===========================================================================
00011B34                            
00011B34                            Solid_SideAir:
00011B34 6100                       		bsr.s	Solid_NotPushing
00011B36 7801                       		moveq	#1,d4		; return side collision
00011B38 4E75                       		rts	
00011B3A                            ; ===========================================================================
00011B3A                            
00011B3A                            Solid_Ignore:
00011B3A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011B40 6700                       		beq.s	Solid_Debug	; if not, branch
00011B42 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011B48 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B4A 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011B50 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B52 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011B58 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011B5A 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011B60                            
00011B60                            
00011B60                            Solid_NotPushing:
00011B60 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011B66 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011B6C                            
00011B6C                            Solid_Debug:
00011B6C 7800                       		moveq	#0,d4		; return no collision
00011B6E 4E75                       		rts	
00011B70                            ; ===========================================================================
00011B70                            
00011B70                            Solid_TopBottom:
00011B70 4A43                       		tst.w	d3		; is Sonic below the object?
00011B72 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011B74 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011B78 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011B7A 60BE                       		bra.s	Solid_Ignore
00011B7C                            ; ===========================================================================
00011B7C                            
00011B7C                            Solid_Below:
00011B7C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011B80 6700                       		beq.s	Solid_Squash	; if not, branch
00011B82 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011B84 4A43                       		tst.w	d3		; is Sonic above the object?
00011B86 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011B88 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011B8C 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011B92                            
00011B92                            Solid_TopBtmAir:
00011B92 78FF                       		moveq	#-1,d4
00011B94 4E75                       		rts	
00011B96                            ; ===========================================================================
00011B96                            
00011B96                            Solid_Squash:
00011B96 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011B9C 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011B9E 2F08                       		move.l	a0,-(sp)
00011BA0 2049                       		movea.l	a1,a0
00011BA2 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011BA8 205F                       		movea.l	(sp)+,a0
00011BAA 78FF                       		moveq	#-1,d4
00011BAC 4E75                       		rts	
00011BAE                            ; ===========================================================================
00011BAE                            
00011BAE                            Solid_Landed:
00011BAE 5943                       		subq.w	#4,d3
00011BB0 7200                       		moveq	#0,d1
00011BB2 1228 0014                  		move.b	obActWid(a0),d1
00011BB6 3401                       		move.w	d1,d2
00011BB8 D442                       		add.w	d2,d2
00011BBA D269 0008                  		add.w	obX(a1),d1
00011BBE 9268 0008                  		sub.w	obX(a0),d1
00011BC2 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011BC4 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011BC6 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011BC8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011BCC 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011BCE 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011BD2 5369 000C                  		subq.w	#1,obY(a1)
00011BD6 6100                       		bsr.s	Solid_ResetFloor
00011BD8 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011BDE 08E8 0003 0022             		bset	#3,obStatus(a0)
00011BE4 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011BE6 4E75                       		rts	
00011BE8                            ; ===========================================================================
00011BE8                            
00011BE8                            Solid_Miss:
00011BE8 7800                       		moveq	#0,d4
00011BEA 4E75                       		rts	
00011BEC                            ; End of function SolidObject
00011BEC                            
00011BEC                            
00011BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011BEC                            
00011BEC                            
00011BEC                            Solid_ResetFloor:
00011BEC 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00011BF2 6700                       		beq.s	@notonobj	; if not, branch
00011BF4                            
00011BF4 7000                       		moveq	#0,d0
00011BF6 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
00011BFA ED48                       		lsl.w	#6,d0
00011BFC 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00011C02 2440                       		movea.l	d0,a2
00011C04 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
00011C0A 422A 0025                  		clr.b	obSolid(a2)
00011C0E                            
00011C0E                            	@notonobj:
00011C0E 3008                       		move.w	a0,d0
00011C10 0440 D000                  		subi.w	#$D000,d0
00011C14 EC48                       		lsr.w	#6,d0
00011C16 0240 007F                  		andi.w	#$7F,d0
00011C1A 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00011C1E 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00011C24 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00011C2A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00011C30 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011C36 6700                       		beq.s	@notinair	; if not, branch
00011C38 2F08                       		move.l	a0,-(sp)
00011C3A 2049                       		movea.l	a1,a0
00011C3C 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00011C42 205F                       		movea.l	(sp)+,a0
00011C44                            
00011C44                            	@notinair:
00011C44 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00011C4A 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00011C50 4E75                       		rts	
00011C52                            ; End of function Solid_ResetFloor
00011C52                            ; End of function Solid_ResetFloor
00011C52                            
00011C52                            		include	"_incObj\51 Smashable Green Block.asm"
00011C52                            ; ---------------------------------------------------------------------------
00011C52                            ; Object 51 - smashable	green block (MZ)
00011C52                            ; ---------------------------------------------------------------------------
00011C52                            
00011C52                            SmashBlock:
00011C52 7000                       		moveq	#0,d0
00011C54 1028 0024                  		move.b	obRoutine(a0),d0
00011C58 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00011C5C 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00011C60 6000 F880                  		bra.w	RememberState
00011C64                            ; ===========================================================================
00011C64 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00011C66 0000                       		dc.w Smab_Solid-Smab_Index
00011C68 0000                       		dc.w Smab_Points-Smab_Index
00011C6A                            ; ===========================================================================
00011C6A                            
00011C6A                            Smab_Main:	; Routine 0
00011C6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00011C6E 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00011C76 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011C7C 117C 0004 0001             		move.b	#4,obRender(a0)
00011C82 117C 0010 0014             		move.b	#$10,obActWid(a0)
00011C88 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011C8E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00011C94                            
00011C94                            Smab_Solid:	; Routine 2
00011C94                            
00011C94 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
00011C94 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
00011C94                            
00011C94 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00011C9A 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
00011CA0 323C 001B                  		move.w	#$1B,d1
00011CA4 343C 0010                  		move.w	#$10,d2
00011CA8 363C 0011                  		move.w	#$11,d3
00011CAC 3828 0008                  		move.w	obX(a0),d4
00011CB0 6100 FCC8                  		bsr.w	SolidObject
00011CB4 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00011CBA 6600                       		bne.s	@smash		; if yes, branch
00011CBC                            
00011CBC                            	@notspinning:
00011CBC 4E75                       		rts	
00011CBE                            ; ===========================================================================
00011CBE                            
00011CBE                            @smash:
00011CBE 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
00011CC4 66F6                       		bne.s	@notspinning	; if not, branch
00011CC6 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00011CCC 08E9 0002 0022             		bset	#2,obStatus(a1)
00011CD2 137C 000E 0016             		move.b	#$E,obHeight(a1)
00011CD8 137C 0007 0017             		move.b	#7,obWidth(a1)
00011CDE 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00011CE4 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
00011CEA 08E9 0001 0022             		bset	#1,obStatus(a1)
00011CF0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011CF6 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011CFC 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011D02 4228 0025                  		clr.b	obSolid(a0)
00011D06 117C 0001 001A             		move.b	#1,obFrame(a0)
00011D0C 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00011D12 7203                       		moveq	#3,d1		; set number of	fragments to 4
00011D14 343C 0038                  		move.w	#$38,d2
00011D18 6100 D2D8                  		bsr.w	SmashObject
00011D1C 6100 DCBA                  		bsr.w	FindFreeObj
00011D20 6600                       		bne.s	Smab_Points
00011D22 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00011D26 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011D2C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011D32 3438 F7D0                  		move.w	(v_itembonus).w,d2
00011D36 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00011D3A 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00011D3E 6500                       		bcs.s	@bonus		; if yes, branch
00011D40 7406                       		moveq	#6,d2		; set cap for points
00011D42                            
00011D42                            	@bonus:
00011D42 7000                       		moveq	#0,d0
00011D44 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00011D48 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00011D4E 6500                       		bcs.s	@givepoints	; if not, branch
00011D50 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00011D54 740A                       		moveq	#10,d2
00011D56                            
00011D56                            	@givepoints:
00011D56 4EB9 0000 0000             		jsr	(AddPoints).l
00011D5C E24A                       		lsr.w	#1,d2
00011D5E 1342 001A                  		move.b	d2,obFrame(a1)
00011D62                            
00011D62                            Smab_Points:	; Routine 4
00011D62 6100 D6C6                  		bsr.w	SpeedToPos
00011D66 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00011D6C 6100 D6D0                  		bsr.w	DisplaySprite
00011D70 4A28 0001                  		tst.b	obRender(a0)
00011D74 6A00 D708                  		bpl.w	DeleteObject
00011D78 4E75                       		rts	
00011D7A                            ; ===========================================================================
00011D7A FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
00011D7E FF00 FF00                  		dc.w -$100, -$100
00011D82 0200 FE00                  		dc.w $200, -$200
00011D86 0100 FF00                  		dc.w $100, -$100
00011D8A                            
00011D8A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011D8A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00011D92                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
00011D92                            ; --------------------------------------------------------------------------------
00011D92                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011D92                            ; --------------------------------------------------------------------------------
00011D92                            
00011D92                            SME_wdHTM:	
00011D92 0000 0000                  		dc.w SME_wdHTM_6-SME_wdHTM, SME_wdHTM_1B-SME_wdHTM	
00011D96 0000                       		dc.w SME_wdHTM_30-SME_wdHTM	
00011D98 04                         SME_wdHTM_6:	dc.b 4	
00011D99 F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011D9E 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011DA3 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011DA8 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011DAD 04                         SME_wdHTM_1B:	dc.b 4	
00011DAE F005 0000 00               		dc.b $F0, 5, 0, 0, 0	
00011DB3 0005 0000 00               		dc.b 0, 5, 0, 0, 0	
00011DB8 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
00011DBD F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
00011DC2 00                         SME_wdHTM_30:	dc.b 0	
00011DC4 00                         		even
00011DC4 00                         		even
00011DC4                            
00011DC4                            		include	"_incObj\52 Moving Blocks.asm"
00011DC4                            ; ---------------------------------------------------------------------------
00011DC4                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00011DC4                            ; ---------------------------------------------------------------------------
00011DC4                            
00011DC4                            MovingBlock:
00011DC4 7000                       		moveq	#0,d0
00011DC6 1028 0024                  		move.b	obRoutine(a0),d0
00011DCA 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00011DCE 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00011DD2                            ; ===========================================================================
00011DD2 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00011DD4 0000                       		dc.w MBlock_Platform-MBlock_Index
00011DD6 0000                       		dc.w MBlock_StandOn-MBlock_Index
00011DD8                            
00011DD8 =00000030                  mblock_origX:	equ $30
00011DD8 =00000032                  mblock_origY:	equ $32
00011DD8                            
00011DD8 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
00011DDA 2001                       		dc.b $20, 1
00011DDC 2002                       		dc.b $20, 2
00011DDE 4003                       		dc.b $40, 3
00011DE0 3004                       		dc.b $30, 4
00011DE2                            ; ===========================================================================
00011DE2                            
00011DE2                            MBlock_Main:	; Routine 0
00011DE2 5428 0024                  		addq.b	#2,obRoutine(a0)
00011DE6 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00011DEE 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00011DF4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00011DFA 6600                       		bne.s	loc_FE44
00011DFC 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00011E04 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
00011E0A 117C 0007 0016             		move.b	#7,obHeight(a0)
00011E10                            
00011E10                            loc_FE44:
00011E10 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00011E16 6600                       		bne.s	loc_FE60
00011E18 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00011E1E 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00011E24 6700                       		beq.s	loc_FE60	; if yes, branch
00011E26 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00011E2C                            
00011E2C                            loc_FE60:
00011E2C 117C 0004 0001             		move.b	#4,obRender(a0)
00011E32 7000                       		moveq	#0,d0
00011E34 1028 0028                  		move.b	obSubtype(a0),d0
00011E38 E648                       		lsr.w	#3,d0
00011E3A 0240 001E                  		andi.w	#$1E,d0
00011E3E 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00011E42 115A 0014                  		move.b	(a2)+,obActWid(a0)
00011E46 115A 001A                  		move.b	(a2)+,obFrame(a0)
00011E4A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011E50 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011E56 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00011E5C 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00011E62                            
00011E62                            MBlock_Platform: ; Routine 2
00011E62 6100 0000                  		bsr.w	MBlock_Move
00011E66 7200                       		moveq	#0,d1
00011E68 1228 0014                  		move.b	obActWid(a0),d1
00011E6C 4EB9 0000 8AFC             		jsr	(PlatformObject).l
00011E72 6000                       		bra.s	MBlock_ChkDel
00011E74                            ; ===========================================================================
00011E74                            
00011E74                            MBlock_StandOn:	; Routine 4
00011E74 7200                       		moveq	#0,d1
00011E76 1228 0014                  		move.b	obActWid(a0),d1
00011E7A 4EB9 0000 8C70             		jsr	(ExitPlatform).l
00011E80 3F28 0008                  		move.w	obX(a0),-(sp)
00011E84 6100 0000                  		bsr.w	MBlock_Move
00011E88 341F                       		move.w	(sp)+,d2
00011E8A 4EB9 0000 91DA             		jsr	(MvSonicOnPtfm2).l
00011E90                            
00011E90                            MBlock_ChkDel:
00011EAE 6000 D58E                  		bra.w	DisplaySprite
00011EB2                            ; ===========================================================================
00011EB2                            
00011EB2                            MBlock_Move:
00011EB2 7000                       		moveq	#0,d0
00011EB4 1028 0028                  		move.b	obSubtype(a0),d0
00011EB8 0240 000F                  		andi.w	#$F,d0
00011EBC D040                       		add.w	d0,d0
00011EBE 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00011EC2 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00011EC6                            ; ===========================================================================
00011EC6 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00011ECA 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00011ECE 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00011ED2 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
00011ED6 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
00011EDA 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00011EDC                            ; ===========================================================================
00011EDC                            
00011EDC                            MBlock_Type00:
00011EDC 4E75                       		rts	
00011EDE                            ; ===========================================================================
00011EDE                            
00011EDE                            MBlock_Type01:
00011EDE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00011EE2 323C 0060                  		move.w	#$60,d1
00011EE6 0828 0000 0022             		btst	#0,obStatus(a0)
00011EEC 6700                       		beq.s	loc_FF26
00011EEE 4440                       		neg.w	d0
00011EF0 D041                       		add.w	d1,d0
00011EF2                            
00011EF2                            loc_FF26:
00011EF2 3228 0030                  		move.w	mblock_origX(a0),d1
00011EF6 9240                       		sub.w	d0,d1
00011EF8 3141 0008                  		move.w	d1,obX(a0)
00011EFC 4E75                       		rts	
00011EFE                            ; ===========================================================================
00011EFE                            
00011EFE                            MBlock_Type02:
00011EFE 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00011F04 6600                       		bne.s	MBlock_02_Wait
00011F06 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00011F0A                            
00011F0A                            MBlock_02_Wait:
00011F0A 4E75                       		rts	
00011F0C                            ; ===========================================================================
00011F0C                            
00011F0C                            MBlock_Type03:
00011F0C 7600                       		moveq	#0,d3
00011F0E 1628 0014                  		move.b	obActWid(a0),d3
00011F12 6100 0000                  		bsr.w	ObjHitWallRight
00011F16 4A41                       		tst.w	d1		; has the platform hit a wall?
00011F18 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
00011F1A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F1E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011F24 4E75                       		rts	
00011F26                            ; ===========================================================================
00011F26                            
00011F26                            MBlock_03_End:
00011F26 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
00011F2A 4E75                       		rts	
00011F2C                            ; ===========================================================================
00011F2C                            
00011F2C                            MBlock_Type05:
00011F2C 7600                       		moveq	#0,d3
00011F2E 1628 0014                  		move.b	obActWid(a0),d3
00011F32 6100 0000                  		bsr.w	ObjHitWallRight
00011F36 4A41                       		tst.w	d1		; has the platform hit a wall?
00011F38 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00011F3A 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00011F3E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00011F44 4E75                       		rts	
00011F46                            ; ===========================================================================
00011F46                            
00011F46                            MBlock_05_End:
00011F46 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00011F4A 4E75                       		rts	
00011F4C                            ; ===========================================================================
00011F4C                            
00011F4C                            MBlock_Type06:
00011F4C 6100 D4DC                  		bsr.w	SpeedToPos
00011F50 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00011F56 6100 0000                  		bsr.w	ObjFloorDist
00011F5A 4A41                       		tst.w	d1		; has platform hit the floor?
00011F5C 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00011F60 D368 000C                  		add.w	d1,obY(a0)
00011F64 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00011F68 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
00011F6C                            
00011F6C                            locret_FFA0:
00011F6C 4E75                       		rts	
00011F6E                            ; ===========================================================================
00011F6E                            
00011F6E                            MBlock_Type07:
00011F6E 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00011F72 6700                       		beq.s	MBlock_07_ChkDel
00011F74 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00011F78                            
00011F78                            MBlock_07_ChkDel:
00011F78 588F                       		addq.l	#4,sp
00011F98 4E75                       		rts	
00011F9A                            ; ===========================================================================
00011F9A                            
00011F9A                            MBlock_Type08:
00011F9A 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00011F9E 323C 0080                  		move.w	#$80,d1
00011FA2 0828 0000 0022             		btst	#0,obStatus(a0)
00011FA8 6700                       		beq.s	loc_FFE2
00011FAA 4440                       		neg.w	d0
00011FAC D041                       		add.w	d1,d0
00011FAE                            
00011FAE                            loc_FFE2:
00011FAE 3228 0032                  		move.w	mblock_origY(a0),d1
00011FB2 9240                       		sub.w	d0,d1
00011FB4 3141 000C                  		move.w	d1,obY(a0)
00011FB8 4E75                       		rts	
00011FBA                            ; ===========================================================================
00011FBA                            
00011FBA                            MBlock_Type0A:
00011FBA 7600                       		moveq	#0,d3
00011FBC 1628 0014                  		move.b	obActWid(a0),d3
00011FC0 D643                       		add.w	d3,d3
00011FC2 7208                       		moveq	#8,d1
00011FC4 0828 0000 0022             		btst	#0,obStatus(a0)
00011FCA 6700                       		beq.s	loc_10004
00011FCC 4441                       		neg.w	d1
00011FCE 4443                       		neg.w	d3
00011FD0                            
00011FD0                            loc_10004:
00011FD0 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011FD4 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
00011FD6 3028 0008                  		move.w	obX(a0),d0
00011FDA 9068 0030                  		sub.w	mblock_origX(a0),d0
00011FDE B043                       		cmp.w	d3,d0
00011FE0 6700                       		beq.s	MBlock_0A_Wait
00011FE2 D368 0008                  		add.w	d1,obX(a0)	; move platform
00011FE6 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011FEC 4E75                       		rts	
00011FEE                            ; ===========================================================================
00011FEE                            
00011FEE                            MBlock_0A_Wait:
00011FEE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011FF2 6600                       		bne.s	locret_1002E	; if time remains, branch
00011FF4 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011FFA                            
00011FFA                            locret_1002E:
00011FFA 4E75                       		rts	
00011FFC                            ; ===========================================================================
00011FFC                            
00011FFC                            MBlock_0A_Back:
00011FFC 3028 0008                  		move.w	obX(a0),d0
00012000 9068 0030                  		sub.w	mblock_origX(a0),d0
00012004 6700                       		beq.s	MBlock_0A_Reset
00012006 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001200A 4E75                       		rts	
0001200C                            ; ===========================================================================
0001200C                            
0001200C                            MBlock_0A_Reset:
0001200C 4268 0036                  		clr.w	$36(a0)
00012010 5328 0028                  		subq.b	#1,obSubtype(a0)
00012014 4E75                       		rts	
00012014 4E75                       		rts	
00012016                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012016                            ; ---------------------------------------------------------------------------
00012016                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012016                            ; ---------------------------------------------------------------------------
00012016                            Map_MBlock_internal:
00012016 0000                       		dc.w @mz1-Map_MBlock_internal
00012018 0000                       		dc.w @mz2-Map_MBlock_internal
0001201A 0000                       		dc.w @sbz-Map_MBlock_internal
0001201C 0000                       		dc.w @sbzwide-Map_MBlock_internal
0001201E 0000                       		dc.w @mz3-Map_MBlock_internal
00012020 01                         @mz1:		dc.b 1
00012021 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012026 02                         @mz2:		dc.b 2
00012027 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001202C F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012031 04                         @sbz:		dc.b 4
00012032 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012037 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001203C F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012041 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012046 04                         @sbzwide:	dc.b 4
00012047 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001204C F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012051 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012056 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001205B 03                         @mz3:		dc.b 3
0001205C F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012061 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012066 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001206C 00                         		even
0001206C 00                         		even
0001206C                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            ; Sprite mappings - moving block (LZ)
0001206C                            ; ---------------------------------------------------------------------------
0001206C                            Map_MBlockLZ_internal:
0001206C 0000                       		dc.w @0-Map_MBlockLZ_internal
0001206E 01                         @0:		dc.b 1
0001206F F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012074                            		even
00012074                            		even
00012074                            
00012074                            		include	"_incObj\55 Basaran.asm"
00012074                            ; ---------------------------------------------------------------------------
00012074                            ; Object 55 - Basaran enemy (MZ)
00012074                            ; ---------------------------------------------------------------------------
00012074                            
00012074                            Basaran:
00012074 7000                       		moveq	#0,d0
00012076 1028 0024                  		move.b	obRoutine(a0),d0
0001207A 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001207E 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012082                            ; ===========================================================================
00012082 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012084 0000                       		dc.w Bas_Action-Bas_Index
00012086                            ; ===========================================================================
00012086                            
00012086                            Bas_Main:	; Routine 0
00012086 5428 0024                  		addq.b	#2,obRoutine(a0)
0001208A 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012092 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00012098 117C 0004 0001             		move.b	#4,obRender(a0)
0001209E 117C 000C 0016             		move.b	#$C,obHeight(a0)
000120A4 317C 0100 0018             		move.w	#$100,obPriority(a0)
000120AA 117C 000B 0020             		move.b	#$B,obColType(a0)
000120B0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000120B6                            
000120B6                            Bas_Action:	; Routine 2
000120B6 7000                       		moveq	#0,d0
000120B8 1028 0025                  		move.b	ob2ndRout(a0),d0
000120BC 323B 0000                  		move.w	@index(pc,d0.w),d1
000120C0 4EBB 1000                  		jsr	@index(pc,d1.w)
000120C4 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000120CA 6100 A42C                  		bsr.w	AnimateSprite
000120CE 6000 F412                  		bra.w	RememberState
000120D2                            ; ===========================================================================
000120D2 0000                       @index:		dc.w @dropcheck-@index
000120D4 0000                       		dc.w @dropfly-@index
000120D6 0000                       		dc.w @flapsound-@index
000120D8 0000                       		dc.w @flyup-@index
000120DA                            ; ===========================================================================
000120DA                            
000120DA                            @dropcheck:
000120DA 343C 0080                  		move.w	#$80,d2
000120DE 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000120E2 6400                       		bcc.s	@nodrop		; if not, branch
000120E4 3038 D00C                  		move.w	(v_player+obY).w,d0
000120E8 3140 0036                  		move.w	d0,$36(a0)
000120EC 9068 000C                  		sub.w	obY(a0),d0
000120F0 6500                       		bcs.s	@nodrop
000120F2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000120F6 6400                       		bcc.s	@nodrop		; if not, branch
000120F8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000120FC 6600                       		bne.s	@nodrop		; if yes, branch
000120FE                            
000120FE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012102 D007                       		add.b	d7,d0
00012104 0200 0007                  		andi.b	#7,d0
00012108 6600                       		bne.s	@nodrop
0001210A 117C 0001 001C             		move.b	#1,obAnim(a0)
00012110 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012114                            
00012114                            	@nodrop:
00012114 4E75                       		rts	
00012116                            ; ===========================================================================
00012116                            
00012116                            @dropfly:
00012116 6100 D312                  		bsr.w	SpeedToPos
0001211A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012120 343C 0080                  		move.w	#$80,d2
00012124 6100 0000                  		bsr.w	@chkdistance
00012128 3028 0036                  		move.w	$36(a0),d0
0001212C 9068 000C                  		sub.w	obY(a0),d0
00012130 6500                       		bcs.s	@chkdel
00012132 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012136 6400                       		bcc.s	@dropmore	; if not, branch
00012138 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001213C 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012142 117C 0002 001C             		move.b	#2,obAnim(a0)
00012148 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001214C                            
0001214C                            	@dropmore:
0001214C 4E75                       		rts	
0001214E                            
0001214E                            	@chkdel:
0001214E 4A28 0001                  		tst.b	obRender(a0)
00012152 6A00 D32A                  		bpl.w	DeleteObject
00012156 4E75                       		rts	
00012158                            ; ===========================================================================
00012158                            
00012158                            @flapsound:
00012158 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001215C 0200 000F                  		andi.b	#$F,d0
00012160 6600                       		bne.s	@nosound
0001216C                            
0001216C                            	@nosound:
0001216C 6100 D2BC                  		bsr.w	SpeedToPos
00012170 3038 D008                  		move.w	(v_player+obX).w,d0
00012174 9068 0008                  		sub.w	obX(a0),d0
00012178 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001217A 4440                       		neg.w	d0
0001217C                            
0001217C                            	@isright:
0001217C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012180 6500                       		bcs.s	@dontflyup	; if yes, branch
00012182 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012186 D007                       		add.b	d7,d0
00012188 0200 0007                  		andi.b	#7,d0
0001218C 6600                       		bne.s	@dontflyup
0001218E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012192                            
00012192                            @dontflyup:
00012192 4E75                       		rts	
00012194                            ; ===========================================================================
00012194                            
00012194                            @flyup:
00012194 6100 D294                  		bsr.w	SpeedToPos
00012198 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001219E 6100 0000                  		bsr.w	ObjHitCeiling
000121A2 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000121A4 6A00                       		bpl.s	@noceiling	; if not, branch
000121A6 9368 000C                  		sub.w	d1,obY(a0)
000121AA 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000121B0 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000121B4 4268 0012                  		clr.w	obVelY(a0)
000121B8 4228 001C                  		clr.b	obAnim(a0)
000121BC 4228 0025                  		clr.b	ob2ndRout(a0)
000121C0                            
000121C0                            	@noceiling:
000121C0 4E75                       		rts	
000121C2                            ; ===========================================================================
000121C2                            
000121C2                            ; Subroutine to check Sonic's distance from the basaran
000121C2                            
000121C2                            ; input:
000121C2                            ;	d2 = distance to compare
000121C2                            
000121C2                            ; output:
000121C2                            ;	d0 = distance between Sonic and basaran
000121C2                            ;	d1 = speed/direction for basaran to fly
000121C2                            
000121C2                            @chkdistance:
000121C2 323C 0100                  		move.w	#$100,d1
000121C6 08E8 0000 0022             		bset	#0,obStatus(a0)
000121CC 3038 D008                  		move.w	(v_player+obX).w,d0
000121D0 9068 0008                  		sub.w	obX(a0),d0
000121D4 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000121D6 4440                       		neg.w	d0
000121D8 4441                       		neg.w	d1
000121DA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000121E0                            
000121E0                            	@right:
000121E0 B042                       		cmp.w	d2,d0
000121E2 4E75                       		rts	
000121E4                            ; ===========================================================================
000121E4                            ; unused crap
000121E4 6100 D244                  		bsr.w	SpeedToPos
000121E8 6100 D254                  		bsr.w	DisplaySprite
000121EC 4A28 0001                  		tst.b	obRender(a0)
000121F0 6A00 D28C                  		bpl.w	DeleteObject
000121F4 4E75                       		rts	
000121F4 4E75                       		rts	
000121F6                            		include	"_anim\Basaran.asm"
000121F6                            ; ---------------------------------------------------------------------------
000121F6                            ; Animation script - Basaran enemy
000121F6                            ; ---------------------------------------------------------------------------
000121F6 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000121F8 0000                       		dc.w @fall-Ani_Bas
000121FA 0000                       		dc.w @fly-Ani_Bas
000121FC 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012200 00                         		even
00012200 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012204 00                         		even
00012204 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001220A                            		even
0001220A                            		even
0001220A                            Map_Bas:	include	"_maps\Basaran.asm"
0001220A                            ; --------------------------------------------------------------------------------
0001220A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001220A                            ; --------------------------------------------------------------------------------
0001220A                            
0001220A                            SME_RhYYA:	
0001220A 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
0001220E 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012212 01                         SME_RhYYA_8:	dc.b 1	
00012213 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
00012218 03                         SME_RhYYA_E:	dc.b 3	
00012219 F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
0001221E 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012223 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
00012228 04                         SME_RhYYA_1E:	dc.b 4	
00012229 F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
0001222E 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012233 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
00012238 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001223D 04                         SME_RhYYA_33:	dc.b 4	
0001223E F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012243 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
00012248 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001224D FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012252                            		even
00012252                            		even
00012252                            
00012252                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012252                            ; ---------------------------------------------------------------------------
00012252                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012252                            ; ---------------------------------------------------------------------------
00012252                            
00012252                            FloatingBlock:
00012252 7000                       		moveq	#0,d0
00012254 1028 0024                  		move.b	obRoutine(a0),d0
00012258 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001225C 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012260                            ; ===========================================================================
00012260 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012262 0000                       		dc.w FBlock_Action-FBlock_Index
00012264                            
00012264 =00000034                  fb_origX:	equ $34		; original x-axis position
00012264 =00000030                  fb_origY:	equ $30		; original y-axis position
00012264 =0000003A                  fb_height:	equ $3A		; total object height
00012264 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012264                            
00012264                            FBlock_Var:	; width/2, height/2
00012264 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012266 2020                       		dc.b  $20, $20	; subtype 1x/9x
00012268 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001226A 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001226C 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001226E 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012270 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012272 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012274                            ; ===========================================================================
00012274                            
00012274                            FBlock_Main:	; Routine 0
00012274 5428 0024                  		addq.b	#2,obRoutine(a0)
00012278 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012280 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012286 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001228C 6600                       		bne.s	@notLZ
0001228E 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012294                            
00012294                            	@notLZ:
00012294 117C 0004 0001             		move.b	#4,obRender(a0)
0001229A 317C 0180 0018             		move.w	#$180,obPriority(a0)
000122A0 7000                       		moveq	#0,d0
000122A2 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000122A6 E648                       		lsr.w	#3,d0
000122A8 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000122AC 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000122B0 115A 0014                  		move.b	(a2)+,obActWid(a0)
000122B4 1152 0016                  		move.b	(a2),obHeight(a0)
000122B8 E248                       		lsr.w	#1,d0
000122BA 1140 001A                  		move.b	d0,obFrame(a0)
000122BE 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000122C4 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000122CA 7000                       		moveq	#0,d0
000122CC 1012                       		move.b	(a2),d0
000122CE D040                       		add.w	d0,d0
000122D0 3140 003A                  		move.w	d0,fb_height(a0)
000122D4 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000122DA 6600                       			bne.s	@dontdelete
000122DC 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000122E2 6600                       			bne.s	@notatpos
000122E4 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000122E8 6700                       			beq.s	@dontdelete
000122EA 4EF9 0000 F47E             			jmp	(DeleteObject).l
000122F0                            	@notatpos:
000122F0 4228 0028                  			clr.b	obSubtype(a0)
000122F4 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000122F8 6600                       			bne.s	@dontdelete
000122FA 4EF9 0000 F47E             			jmp	(DeleteObject).l
00012300                            	@dontdelete:
00012300 7000                       		moveq	#0,d0
00012302 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012308 6700                       		beq.s	@stillnotLZ
0001230A 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
0001230E 0240 000F                  		andi.w	#$F,d0
00012312 5140                       		subq.w	#8,d0
00012314 6500                       		bcs.s	@stillnotLZ
00012316 E548                       		lsl.w	#2,d0
00012318 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001231C 45F2 0000                  		lea	(a2,d0.w),a2
00012320 4A52                       		tst.w	(a2)
00012322 6A00                       		bpl.s	@stillnotLZ
00012324 0868 0000 0022             		bchg	#0,obStatus(a0)
0001232A                            
0001232A                            	@stillnotLZ:
0001232A 1028 0028                  		move.b	obSubtype(a0),d0
0001232E 6A00                       		bpl.s	FBlock_Action
00012330 0200 000F                  		andi.b	#$F,d0
00012334 1140 003C                  		move.b	d0,fb_type(a0)
00012338 117C 0005 0028             		move.b	#5,obSubtype(a0)
0001233E 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012344 6600                       		bne.s	@chkstate
00012346 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001234C 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012352                            
00012352                            @chkstate:
00012352 45F8 FC00                  		lea	(v_objstate).w,a2
00012356 7000                       		moveq	#0,d0
00012358 1028 0023                  		move.b	obRespawnNo(a0),d0
0001235C 6700                       		beq.s	FBlock_Action
0001235E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012364 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001236A 6700                       		beq.s	FBlock_Action
0001236C 5228 0028                  		addq.b	#1,obSubtype(a0)
00012370 4268 003A                  		clr.w	fb_height(a0)
00012374                            
00012374                            FBlock_Action:	; Routine 2
00012374 3F28 0008                  		move.w	obX(a0),-(sp)
00012378 7000                       		moveq	#0,d0
0001237A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
0001237E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012382 D040                       		add.w	d0,d0
00012384 323B 0000                  		move.w	@index(pc,d0.w),d1
00012388 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001238C 381F                       		move.w	(sp)+,d4
0001238E 4A28 0001                  		tst.b	obRender(a0)
00012392 6A00                       		bpl.s	@chkdel
00012394 7200                       		moveq	#0,d1
00012396 1228 0014                  		move.b	obActWid(a0),d1
0001239A 0641 000B                  		addi.w	#$B,d1
0001239E 7400                       		moveq	#0,d2
000123A0 1428 0016                  		move.b	obHeight(a0),d2
000123A4 3602                       		move.w	d2,d3
000123A6 5243                       		addq.w	#1,d3
000123A8 6100 F5D0                  		bsr.w	SolidObject
000123AC                            
000123AC                            	@chkdel:
000123C8                            		@display:
000123C8 6000 D074                  			bra.w	DisplaySprite
000123CC                            		@chkdel2:
000123CC 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000123D2 6600                       			bne.s	@delete
000123D4 4A28 0038                  			tst.b	$38(a0)
000123D8 66EE                       			bne.s	@display
000123DA                            		@delete:
000123DA 4EF9 0000 F47E             			jmp	(DeleteObject).l
000123E0                            ; ===========================================================================
000123E0 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000123E4 0000 0000                  		dc.w @type02-@index, @type03-@index
000123E8 0000 0000                  		dc.w @type04-@index, @type05-@index
000123EC 0000 0000                  		dc.w @type06-@index, @type07-@index
000123F0 0000 0000                  		dc.w @type08-@index, @type09-@index
000123F4 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000123F8 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000123FC                            ; ===========================================================================
000123FC                            
000123FC                            @type00:
000123FC                            ; doesn't move
000123FC 4E75                       		rts	
000123FE                            ; ===========================================================================
000123FE                            
000123FE                            @type01:
000123FE                            ; moves side-to-side
000123FE 323C 0040                  		move.w	#$40,d1		; set move distance
00012402 7000                       		moveq	#0,d0
00012404 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012408 6000                       		bra.s	@moveLR
0001240A                            ; ===========================================================================
0001240A                            
0001240A                            @type02:
0001240A                            ; moves side-to-side
0001240A 323C 0080                  		move.w	#$80,d1		; set move distance
0001240E 7000                       		moveq	#0,d0
00012410 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012414                            
00012414                            	@moveLR:
00012414 0828 0000 0022             		btst	#0,obStatus(a0)
0001241A 6700                       		beq.s	@noflip
0001241C 4440                       		neg.w	d0
0001241E D041                       		add.w	d1,d0
00012420                            
00012420                            	@noflip:
00012420 3228 0034                  		move.w	fb_origX(a0),d1
00012424 9240                       		sub.w	d0,d1
00012426 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001242A 4E75                       		rts	
0001242C                            ; ===========================================================================
0001242C                            
0001242C                            @type03:
0001242C                            ; moves up/down
0001242C 323C 0040                  		move.w	#$40,d1		; set move distance
00012430 7000                       		moveq	#0,d0
00012432 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012436 6000                       		bra.s	@moveUD
00012438                            ; ===========================================================================
00012438                            
00012438                            @type04:
00012438                            ; moves up/down
00012438 323C 0080                  		move.w	#$80,d1		; set move distance
0001243C 7000                       		moveq	#0,d0
0001243E 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012442                            
00012442                            	@moveUD:
00012442 0828 0000 0022             		btst	#0,obStatus(a0)
00012448 6700                       		beq.s	@noflip04
0001244A 4440                       		neg.w	d0
0001244C D041                       		add.w	d1,d0
0001244E                            
0001244E                            	@noflip04:
0001244E 3228 0030                  		move.w	fb_origY(a0),d1
00012452 9240                       		sub.w	d0,d1
00012454 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012458 4E75                       		rts	
0001245A                            ; ===========================================================================
0001245A                            
0001245A                            @type05:
0001245A                            ; moves up when a switch is pressed
0001245A 4A28 0038                  		tst.b	$38(a0)
0001245E 6600                       		bne.s	@loc_104A4
00012460 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012466 6600                       		bne.s	@aaa		; if not, branch
00012468 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
0001246E 6600                       		bne.s	@aaa
00012470 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012474 3038 D008                  		move.w	(v_player+obX).w,d0
00012478 B068 0008                  		cmp.w	obX(a0),d0
0001247C 6400                       		bcc.s	@aaa
0001247E 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012484                            
00012484                            	@aaa:
00012484 45F8 F7E0                  		lea	(f_switch).w,a2
00012488 7000                       		moveq	#0,d0
0001248A 1028 003C                  		move.b	fb_type(a0),d0
0001248E 0832 0000 0000             		btst	#0,(a2,d0.w)
00012494 6700                       		beq.s	@loc_104AE
00012496 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001249C 6600                       		bne.s	@loc_1049E	; if not, branch
0001249E 0C00 0003                  		cmpi.b	#3,d0
000124A2 6600                       		bne.s	@loc_1049E
000124A4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000124A8                            
000124A8                            @loc_1049E:
000124A8 117C 0001 0038             		move.b	#1,$38(a0)
000124AE                            
000124AE                            @loc_104A4:
000124AE 4A68 003A                  		tst.w	fb_height(a0)
000124B2 6700                       		beq.s	@loc_104C8
000124B4 5568 003A                  		subq.w	#2,fb_height(a0)
000124B8                            
000124B8                            @loc_104AE:
000124B8 3028 003A                  		move.w	fb_height(a0),d0
000124BC 0828 0000 0022             		btst	#0,$22(a0)
000124C2 6700                       		beq.s	@loc_104BC
000124C4 4440                       		neg.w	d0
000124C6                            
000124C6                            @loc_104BC:
000124C6 3228 0030                  		move.w	fb_origY(a0),d1
000124CA D240                       		add.w	d0,d1
000124CC 3141 000C                  		move.w	d1,obY(a0)
000124D0 4E75                       		rts	
000124D2                            ; ===========================================================================
000124D2                            
000124D2                            @loc_104C8:
000124D2 5228 0028                  		addq.b	#1,$28(a0)
000124D6 4228 0038                  		clr.b	$38(a0)
000124DA 45F8 FC00                  		lea	(v_objstate).w,a2
000124DE 7000                       		moveq	#0,d0
000124E0 1028 0023                  		move.b	obRespawnNo(a0),d0
000124E4 67D2                       		beq.s	@loc_104AE
000124E6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000124EC 60CA                       		bra.s	@loc_104AE
000124EE                            ; ===========================================================================
000124EE                            
000124EE                            @type06:
000124EE 4A28 0038                  		tst.b	$38(a0)
000124F2 6600                       		bne.s	@loc_10500
000124F4 45F8 F7E0                  		lea	(f_switch).w,a2
000124F8 7000                       		moveq	#0,d0
000124FA 1028 003C                  		move.b	fb_type(a0),d0
000124FE 4A32 0000                  		tst.b	(a2,d0.w)
00012502 6A00                       		bpl.s	@loc_10512
00012504 117C 0001 0038             		move.b	#1,$38(a0)
0001250A                            
0001250A                            @loc_10500:
0001250A 7000                       		moveq	#0,d0
0001250C 1028 0016                  		move.b	obHeight(a0),d0
00012510 D040                       		add.w	d0,d0
00012512 B068 003A                  		cmp.w	fb_height(a0),d0
00012516 6700                       		beq.s	@loc_1052C
00012518 5468 003A                  		addq.w	#2,fb_height(a0)
0001251C                            
0001251C                            @loc_10512:
0001251C 3028 003A                  		move.w	fb_height(a0),d0
00012520 0828 0000 0022             		btst	#0,obStatus(a0)
00012526 6700                       		beq.s	@loc_10520
00012528 4440                       		neg.w	d0
0001252A                            
0001252A                            @loc_10520:
0001252A 3228 0030                  		move.w	fb_origY(a0),d1
0001252E D240                       		add.w	d0,d1
00012530 3141 000C                  		move.w	d1,obY(a0)
00012534 4E75                       		rts	
00012536                            ; ===========================================================================
00012536                            
00012536                            @loc_1052C:
00012536 5328 0028                  		subq.b	#1,obSubtype(a0)
0001253A 4228 0038                  		clr.b	$38(a0)
0001253E 45F8 FC00                  		lea	(v_objstate).w,a2
00012542 7000                       		moveq	#0,d0
00012544 1028 0023                  		move.b	obRespawnNo(a0),d0
00012548 67D2                       		beq.s	@loc_10512
0001254A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012550 60CA                       		bra.s	@loc_10512
00012552                            ; ===========================================================================
00012552                            
00012552                            @type07:
00012552 4A28 0038                  		tst.b	$38(a0)
00012556 6600                       		bne.s	@loc_1055E
00012558 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001255C 6700                       		beq.s	@locret_10578
0001255E 117C 0001 0038             		move.b	#1,$38(a0)
00012564 4268 003A                  		clr.w	fb_height(a0)
00012568                            
00012568                            @loc_1055E:
00012568 5268 0008                  		addq.w	#1,obX(a0)
0001256C 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012572 5268 003A                  		addq.w	#1,fb_height(a0)
00012576 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001257C 6600                       		bne.s	@locret_10578
0001257E 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012584 4228 0038                  			clr.b	$38(a0)
00012588 4228 0028                  		clr.b	obSubtype(a0)
0001258C                            
0001258C                            @locret_10578:
0001258C 4E75                       		rts	
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            @type0C:
0001258E 4A28 0038                  		tst.b	$38(a0)
00012592 6600                       		bne.s	@loc_10598
00012594 45F8 F7E0                  		lea	(f_switch).w,a2
00012598 7000                       		moveq	#0,d0
0001259A 1028 003C                  		move.b	fb_type(a0),d0
0001259E 0832 0000 0000             		btst	#0,(a2,d0.w)
000125A4 6700                       		beq.s	@loc_105A2
000125A6 117C 0001 0038             		move.b	#1,$38(a0)
000125AC                            
000125AC                            @loc_10598:
000125AC 4A68 003A                  		tst.w	fb_height(a0)
000125B0 6700                       		beq.s	@loc_105C0
000125B2 5568 003A                  		subq.w	#2,fb_height(a0)
000125B6                            
000125B6                            @loc_105A2:
000125B6 3028 003A                  		move.w	fb_height(a0),d0
000125BA 0828 0000 0022             		btst	#0,obStatus(a0)
000125C0 6700                       		beq.s	@loc_105B4
000125C2 4440                       		neg.w	d0
000125C4 0640 0080                  		addi.w	#$80,d0
000125C8                            
000125C8                            @loc_105B4:
000125C8 3228 0034                  		move.w	fb_origX(a0),d1
000125CC D240                       		add.w	d0,d1
000125CE 3141 0008                  		move.w	d1,obX(a0)
000125D2 4E75                       		rts	
000125D4                            ; ===========================================================================
000125D4                            
000125D4                            @loc_105C0:
000125D4 5228 0028                  		addq.b	#1,obSubtype(a0)
000125D8 4228 0038                  		clr.b	$38(a0)
000125DC 45F8 FC00                  		lea	(v_objstate).w,a2
000125E0 7000                       		moveq	#0,d0
000125E2 1028 0023                  		move.b	obRespawnNo(a0),d0
000125E6 67CE                       		beq.s	@loc_105A2
000125E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000125EE 60C6                       		bra.s	@loc_105A2
000125F0                            ; ===========================================================================
000125F0                            
000125F0                            @type0D:
000125F0 4A28 0038                  		tst.b	$38(a0)
000125F4 6600                       		bne.s	@loc_105F8
000125F6 45F8 F7E0                  		lea	(f_switch).w,a2
000125FA 7000                       		moveq	#0,d0
000125FC 1028 003C                  		move.b	fb_type(a0),d0
00012600 4A32 0000                  		tst.b	(a2,d0.w)
00012604 6A00                       		bpl.s	@wtf
00012606 117C 0001 0038             		move.b	#1,$38(a0)
0001260C                            
0001260C                            @loc_105F8:
0001260C 303C 0080                  		move.w	#$80,d0
00012610 B068 003A                  		cmp.w	fb_height(a0),d0
00012614 6700                       		beq.s	@loc_10624
00012616 5468 003A                  		addq.w	#2,fb_height(a0)
0001261A                            
0001261A                            @wtf:
0001261A 3028 003A                  		move.w	fb_height(a0),d0
0001261E 0828 0000 0022             		btst	#0,obStatus(a0)
00012624 6700                       		beq.s	@loc_10618
00012626 4440                       		neg.w	d0
00012628 0640 0080                  		addi.w	#$80,d0
0001262C                            
0001262C                            @loc_10618:
0001262C 3228 0034                  		move.w	fb_origX(a0),d1
00012630 D240                       		add.w	d0,d1
00012632 3141 0008                  		move.w	d1,obX(a0)
00012636 4E75                       		rts	
00012638                            ; ===========================================================================
00012638                            
00012638                            @loc_10624:
00012638 5328 0028                  		subq.b	#1,obSubtype(a0)
0001263C 4228 0038                  		clr.b	$38(a0)
00012640 45F8 FC00                  		lea	(v_objstate).w,a2
00012644 7000                       		moveq	#0,d0
00012646 1028 0023                  		move.b	obRespawnNo(a0),d0
0001264A 67CE                       		beq.s	@wtf
0001264C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012652 60C6                       		bra.s	@wtf
00012654                            ; ===========================================================================
00012654                            
00012654                            @type08:
00012654 323C 0010                  		move.w	#$10,d1
00012658 7000                       		moveq	#0,d0
0001265A 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
0001265E E248                       		lsr.w	#1,d0
00012660 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012664 6000                       		bra.s	@square
00012666                            ; ===========================================================================
00012666                            
00012666                            @type09:
00012666 323C 0030                  		move.w	#$30,d1
0001266A 7000                       		moveq	#0,d0
0001266C 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012670 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012674 6000                       		bra.s	@square
00012676                            ; ===========================================================================
00012676                            
00012676                            @type0A:
00012676 323C 0050                  		move.w	#$50,d1
0001267A 7000                       		moveq	#0,d0
0001267C 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012680 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012684 6000                       		bra.s	@square
00012686                            ; ===========================================================================
00012686                            
00012686                            @type0B:
00012686 323C 0070                  		move.w	#$70,d1
0001268A 7000                       		moveq	#0,d0
0001268C 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012690 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012694                            
00012694                            @square:
00012694 4A43                       		tst.w	d3
00012696 6600                       		bne.s	@loc_1068E
00012698 5228 0022                  		addq.b	#1,obStatus(a0)
0001269C 0228 0003 0022             		andi.b	#3,obStatus(a0)
000126A2                            
000126A2                            @loc_1068E:
000126A2 1428 0022                  		move.b	obStatus(a0),d2
000126A6 0202 0003                  		andi.b	#3,d2
000126AA 6600                       		bne.s	@loc_106AE
000126AC 9041                       		sub.w	d1,d0
000126AE D068 0034                  		add.w	fb_origX(a0),d0
000126B2 3140 0008                  		move.w	d0,obX(a0)
000126B6 4441                       		neg.w	d1
000126B8 D268 0030                  		add.w	fb_origY(a0),d1
000126BC 3141 000C                  		move.w	d1,obY(a0)
000126C0 4E75                       		rts	
000126C2                            ; ===========================================================================
000126C2                            
000126C2                            @loc_106AE:
000126C2 5302                       		subq.b	#1,d2
000126C4 6600                       		bne.s	@loc_106CC
000126C6 5341                       		subq.w	#1,d1
000126C8 9041                       		sub.w	d1,d0
000126CA 4440                       		neg.w	d0
000126CC D068 0030                  		add.w	fb_origY(a0),d0
000126D0 3140 000C                  		move.w	d0,obY(a0)
000126D4 5241                       		addq.w	#1,d1
000126D6 D268 0034                  		add.w	fb_origX(a0),d1
000126DA 3141 0008                  		move.w	d1,obX(a0)
000126DE 4E75                       		rts	
000126E0                            ; ===========================================================================
000126E0                            
000126E0                            @loc_106CC:
000126E0 5302                       		subq.b	#1,d2
000126E2 6600                       		bne.s	@loc_106EA
000126E4 5341                       		subq.w	#1,d1
000126E6 9041                       		sub.w	d1,d0
000126E8 4440                       		neg.w	d0
000126EA D068 0034                  		add.w	fb_origX(a0),d0
000126EE 3140 0008                  		move.w	d0,obX(a0)
000126F2 5241                       		addq.w	#1,d1
000126F4 D268 0030                  		add.w	fb_origY(a0),d1
000126F8 3141 000C                  		move.w	d1,obY(a0)
000126FC 4E75                       		rts	
000126FE                            ; ===========================================================================
000126FE                            
000126FE                            @loc_106EA:
000126FE 9041                       		sub.w	d1,d0
00012700 D068 0030                  		add.w	fb_origY(a0),d0
00012704 3140 000C                  		move.w	d0,obY(a0)
00012708 4441                       		neg.w	d1
0001270A D268 0034                  		add.w	fb_origX(a0),d1
0001270E 3141 0008                  		move.w	d1,obX(a0)
00012712 4E75                       		rts	
00012712 4E75                       		rts	
00012714                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012714                            ; ---------------------------------------------------------------------------
00012714                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012714                            ; ---------------------------------------------------------------------------
00012714                            Map_FBlock_internal:
00012714 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012716 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012718 0000                       		dc.w @syz1x2-Map_FBlock_internal
0001271A 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
0001271C 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
0001271E 0000                       		dc.w @slz-Map_FBlock_internal
00012720 0000                       		dc.w @lzvert-Map_FBlock_internal
00012722 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012724 01                         @syz1x1:	dc.b 1
00012725 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
0001272A 04                         @syz2x2:	dc.b 4
0001272B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012730 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012735 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001273A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001273F 02                         @syz1x2:	dc.b 2
00012740 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012745 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001274A 04                         @syzrect2x2:	dc.b 4
0001274B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012750 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012755 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001275A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001275F 03                         @syzrect1x3:	dc.b 3
00012760 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012765 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001276A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001276F 01                         @slz:		dc.b 1
00012770 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012775 02                         @lzvert:	dc.b 2
00012776 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
0001277B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012780 04                         @lzhoriz:	dc.b 4
00012781 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012786 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001278B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012790 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012796 00                         		even
00012796 00                         		even
00012796                            
00012796                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012796                            ; ---------------------------------------------------------------------------
00012796                            ; Object 57 - spiked balls (SYZ, LZ)
00012796                            ; ---------------------------------------------------------------------------
00012796                            
00012796                            SpikeBall:
00012796 7000                       		moveq	#0,d0
00012798 1028 0024                  		move.b	obRoutine(a0),d0
0001279C 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
000127A0 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
000127A4                            ; ===========================================================================
000127A4 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
000127A6 0000                       		dc.w SBall_Move-SBall_Index
000127A8 0000                       		dc.w SBall_Display-SBall_Index
000127AA                            
000127AA =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
000127AA                            		; $30-$37	; object RAM numbers of childs (1 byte each)
000127AA =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
000127AA =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
000127AA =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
000127AA =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
000127AA                            ; ===========================================================================
000127AA                            
000127AA                            SBall_Main:	; Routine 0
000127AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000127AE 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
000127B6 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
000127BC 117C 0004 0001             		move.b	#4,obRender(a0)
000127C2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000127C8 117C 0008 0014             		move.b	#8,obActWid(a0)
000127CE 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
000127D4 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
000127DA 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
000127E0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000127E6 6600                       		bne.s	@notlz
000127E8                            
000127E8 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
000127EE 317C 0310 0002             		move.w	#$310,obGfx(a0)
000127F4 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
000127FC                            
000127FC                            	@notlz:
000127FC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012800 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012804 4881                       		ext.w	d1
00012806 E741                       		asl.w	#3,d1		; multiply by 8
00012808 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
0001280C 1028 0022                  		move.b	obStatus(a0),d0
00012810 E418                       		ror.b	#2,d0
00012812 0200 00C0                  		andi.b	#$C0,d0
00012816 1140 0026                  		move.b	d0,obAngle(a0)
0001281A 45E8 0029                  		lea	sball_childs(a0),a2
0001281E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012822 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012826 14FC 0000                  		move.b	#0,(a2)+
0001282A 3601                       		move.w	d1,d3
0001282C E94B                       		lsl.w	#4,d3
0001282E 1143 003C                  		move.b	d3,sball_radius(a0)
00012832 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012834 6500                       		bcs.s	@fail
00012836 0828 0003 0028             		btst	#3,obSubtype(a0)
0001283C 6700                       		beq.s	@makechain
0001283E 5341                       		subq.w	#1,d1
00012840 6500                       		bcs.s	@fail
00012842                            
00012842                            @makechain:
00012842 6100 D194                  		bsr.w	FindFreeObj
00012846 6600                       		bne.s	@fail
00012848 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
0001284C 3A09                       		move.w	a1,d5		; get child object RAM address
0001284E 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012852 EC4D                       		lsr.w	#6,d5		; divide by $40
00012854 0245 007F                  		andi.w	#$7F,d5
00012858 14C5                       		move.b	d5,(a2)+	; copy child RAM number
0001285A 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012860 1290                       		move.b	0(a0),0(a1)
00012862 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012868 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001286E 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012874 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001287A 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012880 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012886 0403 0010                  		subi.b	#$10,d3
0001288A 1343 003C                  		move.b	d3,sball_radius(a1)
0001288E 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012894 6600                       		bne.s	@notlzagain
00012896                            
00012896 4A03                       		tst.b	d3
00012898 6600                       		bne.s	@notlzagain
0001289A 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
000128A0                            
000128A0                            	@notlzagain:
000128A0 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
000128A4                            
000128A4                            	@fail:
000128A4 3A08                       		move.w	a0,d5
000128A6 0445 D000                  		subi.w	#$D000,d5
000128AA EC4D                       		lsr.w	#6,d5
000128AC 0245 007F                  		andi.w	#$7F,d5
000128B0 14C5                       		move.b	d5,(a2)+
000128B2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000128B8 6600                       		bne.s	SBall_Move
000128BA                            
000128BA 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
000128C0 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
000128C6                            
000128C6                            SBall_Move:	; Routine 2
000128C6 6100 0000                  		bsr.w	@movesub
000128CA 6000 0000                  		bra.w	@chkdel
000128CE                            ; ===========================================================================
000128CE                            
000128CE                            @movesub:
000128CE 3028 003E                  		move.w	sball_speed(a0),d0
000128D2 D168 0026                  		add.w	d0,obAngle(a0)
000128D6 1028 0026                  		move.b	obAngle(a0),d0
000128DA 4EB9 0000 3BA2             		jsr	(CalcSine).l
000128E0 3428 0038                  		move.w	sball_origY(a0),d2
000128E4 3628 003A                  		move.w	sball_origX(a0),d3
000128E8 45E8 0029                  		lea	sball_childs(a0),a2
000128EC 7C00                       		moveq	#0,d6
000128EE 1C1A                       		move.b	(a2)+,d6
000128F0                            
000128F0                            	@loop:
000128F0 7800                       		moveq	#0,d4
000128F2 181A                       		move.b	(a2)+,d4
000128F4 ED4C                       		lsl.w	#6,d4
000128F6 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000128FC 2244                       		movea.l	d4,a1
000128FE 7800                       		moveq	#0,d4
00012900 1829 003C                  		move.b	sball_radius(a1),d4
00012904 2A04                       		move.l	d4,d5
00012906 C9C0                       		muls.w	d0,d4
00012908 E084                       		asr.l	#8,d4
0001290A CBC1                       		muls.w	d1,d5
0001290C E085                       		asr.l	#8,d5
0001290E D842                       		add.w	d2,d4
00012910 DA43                       		add.w	d3,d5
00012912 3344 000C                  		move.w	d4,obY(a1)
00012916 3345 0008                  		move.w	d5,obX(a1)
0001291A 51CE FFD4                  		dbf	d6,@loop
0001291E 4E75                       		rts	
00012920                            ; ===========================================================================
00012920                            
00012920                            @chkdel:
0001293E 6000 CAFE                  		bra.w	DisplaySprite
00012942                            ; ===========================================================================
00012942                            
00012942                            @delete:
00012942 7400                       		moveq	#0,d2
00012944 45E8 0029                  		lea	sball_childs(a0),a2
00012948 141A                       		move.b	(a2)+,d2
0001294A                            
0001294A                            	@deleteloop:
0001294A 7000                       		moveq	#0,d0
0001294C 101A                       		move.b	(a2)+,d0
0001294E ED48                       		lsl.w	#6,d0
00012950 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012956 2240                       		movea.l	d0,a1
00012958 6100 CB26                  		bsr.w	DeleteChild
0001295C 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012960                            
00012960 4E75                       		rts	
00012962                            ; ===========================================================================
00012962                            
00012962                            SBall_Display:	; Routine 4
00012962 6000 CADA                  		bra.w	DisplaySprite
00012962 6000 CADA                  		bra.w	DisplaySprite
00012966                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012966                            ; ---------------------------------------------------------------------------
00012966                            ; Sprite mappings - chain of spiked balls (SYZ)
00012966                            ; ---------------------------------------------------------------------------
00012966                            Map_SBall_internal:
00012966 0000                       		dc.w @0-Map_SBall_internal
00012968 01                         @0:		dc.b 1
00012969 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001296E                            		even
0001296E                            		even
0001296E                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001296E                            ; ---------------------------------------------------------------------------
0001296E                            Map_SBall2_internal:
0001296E 0000                       		dc.w @chain-Map_SBall2_internal
00012970 0000                       		dc.w @spikeball-Map_SBall2_internal
00012972 0000                       		dc.w @base-Map_SBall2_internal
00012974 01                         @chain:		dc.b 1
00012975 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
0001297A 01                         @spikeball:	dc.b 1
0001297B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012980 01                         @base:		dc.b 1
00012981 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012986                            		even
00012986                            		even
00012986                            		include	"_incObj\58 Big Spiked Ball.asm"
00012986                            ; ---------------------------------------------------------------------------
00012986                            ; Object 58 - giant spiked balls (SYZ)
00012986                            ; ---------------------------------------------------------------------------
00012986                            
00012986                            BigSpikeBall:
00012986 7000                       		moveq	#0,d0
00012988 1028 0024                  		move.b	obRoutine(a0),d0
0001298C 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012990 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012994                            ; ===========================================================================
00012994 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012996 0000                       		dc.w BBall_Move-BBall_Index
00012998                            
00012998 =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012998 =00000038                  bball_origY:	equ $38		; original y-axis position
00012998 =0000003C                  bball_radius:	equ $3C		; radius of circle
00012998 =0000003E                  bball_speed:	equ $3E		; speed
00012998                            ; ===========================================================================
00012998                            
00012998                            BBall_Main:	; Routine 0
00012998 5428 0024                  		addq.b	#2,obRoutine(a0)
0001299C 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
000129A4 317C 0396 0002             		move.w	#$396,obGfx(a0)
000129AA 117C 0004 0001             		move.b	#4,obRender(a0)
000129B0 317C 0200 0018             		move.w	#$200,obPriority(a0)
000129B6 117C 0018 0014             		move.b	#$18,obActWid(a0)
000129BC 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
000129C2 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
000129C8 117C 0086 0020             		move.b	#$86,obColType(a0)
000129CE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000129D2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000129D6 4881                       		ext.w	d1
000129D8 E741                       		asl.w	#3,d1		; multiply by 8
000129DA 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
000129DE 1028 0022                  		move.b	obStatus(a0),d0
000129E2 E418                       		ror.b	#2,d0
000129E4 0200 00C0                  		andi.b	#$C0,d0
000129E8 1140 0026                  		move.b	d0,obAngle(a0)
000129EC 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
000129F2                            
000129F2                            BBall_Move:	; Routine 2
000129F2 7000                       		moveq	#0,d0
000129F4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000129F8 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000129FC D040                       		add.w	d0,d0
000129FE 323B 0000                  		move.w	@index(pc,d0.w),d1
00012A02 4EBB 1000                  		jsr	@index(pc,d1.w)
00012A24 6000 CA18                  		bra.w	DisplaySprite
00012A28                            ; ===========================================================================
00012A28 0000                       @index:		dc.w @type00-@index
00012A2A 0000                       		dc.w @type01-@index
00012A2C 0000                       		dc.w @type02-@index
00012A2E 0000                       		dc.w @type03-@index
00012A30                            ; ===========================================================================
00012A30                            
00012A30                            @type00:
00012A30 4E75                       		rts	
00012A32                            ; ===========================================================================
00012A32                            
00012A32                            @type01:
00012A32 323C 0060                  		move.w	#$60,d1
00012A36 7000                       		moveq	#0,d0
00012A38 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012A3C 0828 0000 0022             		btst	#0,obStatus(a0)
00012A42 6700                       		beq.s	@noflip1
00012A44 4440                       		neg.w	d0
00012A46 D041                       		add.w	d1,d0
00012A48                            
00012A48                            	@noflip1:
00012A48 3228 003A                  		move.w	bball_origX(a0),d1
00012A4C 9240                       		sub.w	d0,d1
00012A4E 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012A52 4E75                       		rts	
00012A54                            ; ===========================================================================
00012A54                            
00012A54                            @type02:
00012A54 323C 0060                  		move.w	#$60,d1
00012A58 7000                       		moveq	#0,d0
00012A5A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012A5E 0828 0000 0022             		btst	#0,obStatus(a0)
00012A64 6700                       		beq.s	@noflip2
00012A66 4440                       		neg.w	d0
00012A68 0640 0080                  		addi.w	#$80,d0
00012A6C                            
00012A6C                            	@noflip2:
00012A6C 3228 0038                  		move.w	bball_origY(a0),d1
00012A70 9240                       		sub.w	d0,d1
00012A72 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012A76 4E75                       		rts	
00012A78                            ; ===========================================================================
00012A78                            
00012A78                            @type03:
00012A78 3028 003E                  		move.w	bball_speed(a0),d0
00012A7C D168 0026                  		add.w	d0,obAngle(a0)
00012A80 1028 0026                  		move.b	obAngle(a0),d0
00012A84 4EB9 0000 3BA2             		jsr	(CalcSine).l
00012A8A 3428 0038                  		move.w	bball_origY(a0),d2
00012A8E 3628 003A                  		move.w	bball_origX(a0),d3
00012A92 7800                       		moveq	#0,d4
00012A94 1828 003C                  		move.b	bball_radius(a0),d4
00012A98 2A04                       		move.l	d4,d5
00012A9A C9C0                       		muls.w	d0,d4
00012A9C E084                       		asr.l	#8,d4
00012A9E CBC1                       		muls.w	d1,d5
00012AA0 E085                       		asr.l	#8,d5
00012AA2 D842                       		add.w	d2,d4
00012AA4 DA43                       		add.w	d3,d5
00012AA6 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012AAA 3145 0008                  		move.w	d5,obX(a0)
00012AAE 4E75                       		rts	
00012AAE 4E75                       		rts	
00012AB0                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012AB0                            ; --------------------------------------------------------------------------------
00012AB0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012AB0                            ; --------------------------------------------------------------------------------
00012AB0                            
00012AB0                            SME_u_DKx:	
00012AB0 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012AB4 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012AB6 05                         SME_u_DKx_6:	dc.b 5	
00012AB7 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012ABC F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012AC1 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012AC6 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012ACB 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012AD0 01                         SME_u_DKx_20:	dc.b 1	
00012AD1 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012AD6 02                         SME_u_DKx_26:	dc.b 2	
00012AD7 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012ADC E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012AE2 00                         		even
00012AE2 00                         		even
00012AE2                            		include	"_incObj\59 SLZ Elevators.asm"
00012AE2                            ; ---------------------------------------------------------------------------
00012AE2                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012AE2                            ; ---------------------------------------------------------------------------
00012AE2                            
00012AE2                            Elevator:
00012AE2 7000                       		moveq	#0,d0
00012AE4 1028 0024                  		move.b	obRoutine(a0),d0
00012AE8 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012AEC 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012B0E 6000 C92E                  		bra.w	DisplaySprite
00012B12                            ; ===========================================================================
00012B12 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012B14 0000                       		dc.w Elev_Platform-Elev_Index
00012B16 0000                       		dc.w Elev_Action-Elev_Index
00012B18 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012B1A                            
00012B1A =00000032                  elev_origX:	equ $32		; original x-axis position
00012B1A =00000030                  elev_origY:	equ $30		; original y-axis position
00012B1A =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012B1A                            
00012B1A 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012B1C                            
00012B1C 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012B1E 2001                       		dc.b $20, 1
00012B20 3401                       		dc.b $34, 1
00012B22 1003                       		dc.b $10, 3
00012B24 2003                       		dc.b $20, 3
00012B26 3403                       		dc.b $34, 3
00012B28 1401                       		dc.b $14, 1
00012B2A 2401                       		dc.b $24, 1
00012B2C 2C01                       		dc.b $2C, 1
00012B2E 1403                       		dc.b $14, 3
00012B30 2403                       		dc.b $24, 3
00012B32 2C03                       		dc.b $2C, 3
00012B34 2005                       		dc.b $20, 5
00012B36 2007                       		dc.b $20, 7
00012B38 3009                       		dc.b $30, 9
00012B3A                            ; ===========================================================================
00012B3A                            
00012B3A                            Elev_Main:	; Routine 0
00012B3A 5428 0024                  		addq.b	#2,obRoutine(a0)
00012B3E 7000                       		moveq	#0,d0
00012B40 1028 0028                  		move.b	obSubtype(a0),d0
00012B44 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012B46 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012B4A 0240 007F                  		andi.w	#$7F,d0
00012B4E C0FC 0006                  		mulu.w	#6,d0
00012B52 3140 003C                  		move.w	d0,elev_dist(a0)
00012B56 3140 003E                  		move.w	d0,$3E(a0)
00012B5A 588F                       		addq.l	#4,sp
00012B5C 4E75                       		rts	
00012B5E                            ; ===========================================================================
00012B5E                            
00012B5E                            	@normal:
00012B5E E648                       		lsr.w	#3,d0
00012B60 0240 001E                  		andi.w	#$1E,d0
00012B64 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012B68 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012B6C 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012B70 7000                       		moveq	#0,d0
00012B72 1028 0028                  		move.b	obSubtype(a0),d0
00012B76 D040                       		add.w	d0,d0
00012B78 0240 001E                  		andi.w	#$1E,d0
00012B7C 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012B80 101A                       		move.b	(a2)+,d0
00012B82 E548                       		lsl.w	#2,d0
00012B84 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012B88 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012B8C 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012B94 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012B9A 117C 0004 0001             		move.b	#4,obRender(a0)
00012BA0 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BA6 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012BAC 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012BB2                            
00012BB2                            Elev_Platform:	; Routine 2
00012BB2 7200                       		moveq	#0,d1
00012BB4 1228 0014                  		move.b	obActWid(a0),d1
00012BB8 4EB9 0000 8AFC             		jsr	(PlatformObject).l
00012BBE 6000 0000                  		bra.w	Elev_Types
00012BC2                            ; ===========================================================================
00012BC2                            
00012BC2                            Elev_Action:	; Routine 4
00012BC2 7200                       		moveq	#0,d1
00012BC4 1228 0014                  		move.b	obActWid(a0),d1
00012BC8 4EB9 0000 8C70             		jsr	(ExitPlatform).l
00012BCE 3F28 0008                  		move.w	obX(a0),-(sp)
00012BD2 6100 0000                  		bsr.w	Elev_Types
00012BD6 341F                       		move.w	(sp)+,d2
00012BD8 4A10                       		tst.b	0(a0)
00012BDA 6700                       		beq.s	@deleted
00012BDC 4EF9 0000 91DA             		jmp	(MvSonicOnPtfm2).l
00012BE2                            
00012BE2                            	@deleted:
00012BE2 4E75                       		rts	
00012BE4                            ; ===========================================================================
00012BE4                            
00012BE4                            Elev_Types:
00012BE4 7000                       		moveq	#0,d0
00012BE6 1028 0028                  		move.b	obSubtype(a0),d0
00012BEA 0240 000F                  		andi.w	#$F,d0
00012BEE D040                       		add.w	d0,d0
00012BF0 323B 0000                  		move.w	@index(pc,d0.w),d1
00012BF4 4EFB 1000                  		jmp	@index(pc,d1.w)
00012BF8                            ; ===========================================================================
00012BF8 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012BFC 0000 0000                  		dc.w @type02-@index, @type01-@index
00012C00 0000 0000                  		dc.w @type04-@index, @type01-@index
00012C04 0000 0000                  		dc.w @type06-@index, @type01-@index
00012C08 0000 0000                  		dc.w @type08-@index, @type09-@index
00012C0C                            ; ===========================================================================
00012C0C                            
00012C0C                            @type00:
00012C0C 4E75                       		rts	
00012C0E                            ; ===========================================================================
00012C0E                            
00012C0E                            @type01:
00012C0E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00012C14 6600                       		bne.s	@notstanding
00012C16 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
00012C1A                            
00012C1A                            	@notstanding:
00012C1A 4E75                       		rts	
00012C1C                            ; ===========================================================================
00012C1C                            
00012C1C                            @type02:
00012C1C 6100 0000                  		bsr.w	Elev_Move
00012C20 3028 0034                  		move.w	$34(a0),d0
00012C24 4440                       		neg.w	d0
00012C26 D068 0030                  		add.w	elev_origY(a0),d0
00012C2A 3140 000C                  		move.w	d0,obY(a0)
00012C2E 4E75                       		rts	
00012C30                            ; ===========================================================================
00012C30                            
00012C30                            @type04:
00012C30 6100 0000                  		bsr.w	Elev_Move
00012C34 3028 0034                  		move.w	$34(a0),d0
00012C38 D068 0030                  		add.w	elev_origY(a0),d0
00012C3C 3140 000C                  		move.w	d0,obY(a0)
00012C40 4E75                       		rts	
00012C42                            ; ===========================================================================
00012C42                            
00012C42                            @type06:
00012C42 6100 0000                  		bsr.w	Elev_Move
00012C46 3028 0034                  		move.w	$34(a0),d0
00012C4A E240                       		asr.w	#1,d0
00012C4C 4440                       		neg.w	d0
00012C4E D068 0030                  		add.w	elev_origY(a0),d0
00012C52 3140 000C                  		move.w	d0,obY(a0)
00012C56 3028 0034                  		move.w	$34(a0),d0
00012C5A D068 0032                  		add.w	elev_origX(a0),d0
00012C5E 3140 0008                  		move.w	d0,obX(a0)
00012C62 4E75                       		rts	
00012C64                            ; ===========================================================================
00012C64                            
00012C64                            @type08:
00012C64 6100 0000                  		bsr.w	Elev_Move
00012C68 3028 0034                  		move.w	$34(a0),d0
00012C6C E240                       		asr.w	#1,d0
00012C6E D068 0030                  		add.w	elev_origY(a0),d0
00012C72 3140 000C                  		move.w	d0,obY(a0)
00012C76 3028 0034                  		move.w	$34(a0),d0
00012C7A 4440                       		neg.w	d0
00012C7C D068 0032                  		add.w	elev_origX(a0),d0
00012C80 3140 0008                  		move.w	d0,obX(a0)
00012C84 4E75                       		rts	
00012C86                            ; ===========================================================================
00012C86                            
00012C86                            @type09:
00012C86 6100 0000                  		bsr.w	Elev_Move
00012C8A 3028 0034                  		move.w	$34(a0),d0
00012C8E 4440                       		neg.w	d0
00012C90 D068 0030                  		add.w	elev_origY(a0),d0
00012C94 3140 000C                  		move.w	d0,obY(a0)
00012C98 4A28 0028                  		tst.b	obSubtype(a0)
00012C9C 6700 0000                  		beq.w	@typereset
00012CA0 4E75                       		rts	
00012CA2                            ; ===========================================================================
00012CA2                            
00012CA2                            	@typereset:
00012CA2 0828 0003 0022             		btst	#3,obStatus(a0)
00012CA8 6700                       		beq.s	@delete
00012CAA 08E9 0001 0022             		bset	#1,obStatus(a1)
00012CB0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012CB6 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012CBC                            
00012CBC                            	@delete:
00012CBC 6000 C7C0                  		bra.w	DeleteObject
00012CC0                            
00012CC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CC0                            
00012CC0                            
00012CC0                            Elev_Move:
00012CC0 3028 0038                  		move.w	$38(a0),d0
00012CC4 4A28 003A                  		tst.b	$3A(a0)
00012CC8 6600                       		bne.s	loc_10CC8
00012CCA 0C40 0800                  		cmpi.w	#$800,d0
00012CCE 6400                       		bcc.s	loc_10CD0
00012CD0 0640 0010                  		addi.w	#$10,d0
00012CD4 6000                       		bra.s	loc_10CD0
00012CD6                            ; ===========================================================================
00012CD6                            
00012CD6                            loc_10CC8:
00012CD6 4A40                       		tst.w	d0
00012CD8 6700                       		beq.s	loc_10CD0
00012CDA 0440 0010                  		subi.w	#$10,d0
00012CDE                            
00012CDE                            loc_10CD0:
00012CDE 3140 0038                  		move.w	d0,$38(a0)
00012CE2 48C0                       		ext.l	d0
00012CE4 E180                       		asl.l	#8,d0
00012CE6 D0A8 0034                  		add.l	$34(a0),d0
00012CEA 2140 0034                  		move.l	d0,$34(a0)
00012CEE 4840                       		swap	d0
00012CF0 3428 003C                  		move.w	elev_dist(a0),d2
00012CF4 B042                       		cmp.w	d2,d0
00012CF6 6300                       		bls.s	loc_10CF0
00012CF8 117C 0001 003A             		move.b	#1,$3A(a0)
00012CFE                            
00012CFE                            loc_10CF0:
00012CFE D442                       		add.w	d2,d2
00012D00 B042                       		cmp.w	d2,d0
00012D02 6600                       		bne.s	locret_10CFA
00012D04 4228 0028                  		clr.b	obSubtype(a0)
00012D08                            
00012D08                            locret_10CFA:
00012D08 4E75                       		rts	
00012D0A                            ; End of function Elev_Move
00012D0A                            
00012D0A                            ; ===========================================================================
00012D0A                            
00012D0A                            Elev_MakeMulti:	; Routine 6
00012D0A 5368 003C                  		subq.w	#1,elev_dist(a0)
00012D0E 6600                       		bne.s	@chkdel
00012D10 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00012D16 6100 CCC0                  		bsr.w	FindFreeObj
00012D1A 6600                       		bne.s	@chkdel
00012D1C 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00012D20 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012D26 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012D2C 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00012D32                            
00012D32                            @chkdel:
00012D32 588F                       		addq.l	#4,sp
00012D52 4E75                       		rts	
00012D52 4E75                       		rts	
00012D54                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00012D54                            ; ---------------------------------------------------------------------------
00012D54                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00012D54                            ; ---------------------------------------------------------------------------
00012D54                            Map_Elev_internal:
00012D54 0000                       		dc.w @elevator-Map_Elev_internal
00012D56 03                         @elevator:	dc.b 3
00012D57 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00012D5C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00012D61 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00012D66                            		even
00012D66                            		even
00012D66                            		include	"_incObj\5A SLZ Circling Platform.asm"
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            ; Object 5A - platforms	moving in circles (SLZ)
00012D66                            ; ---------------------------------------------------------------------------
00012D66                            
00012D66                            CirclingPlatform:
00012D66 7000                       		moveq	#0,d0
00012D68 1028 0024                  		move.b	obRoutine(a0),d0
00012D6C 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00012D70 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00012D92 6000 C6AA                  		bra.w	DisplaySprite
00012D96                            ; ===========================================================================
00012D96 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
00012D98 0000                       		dc.w Circ_Platform-Circ_Index
00012D9A 0000                       		dc.w Circ_Action-Circ_Index
00012D9C                            
00012D9C =00000032                  circ_origX:	equ $32		; original x-axis position
00012D9C =00000030                  circ_origY:	equ $30		; original y-axis position
00012D9C                            ; ===========================================================================
00012D9C                            
00012D9C                            Circ_Main:	; Routine 0
00012D9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012DA0 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
00012DA8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012DAE 117C 0004 0001             		move.b	#4,obRender(a0)
00012DB4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DBA 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DC0 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
00012DC6 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00012DCC                            
00012DCC                            Circ_Platform:	; Routine 2
00012DCC 7200                       		moveq	#0,d1
00012DCE 1228 0014                  		move.b	obActWid(a0),d1
00012DD2 4EB9 0000 8AFC             		jsr	(PlatformObject).l
00012DD8 6000 0000                  		bra.w	Circ_Types
00012DDC                            ; ===========================================================================
00012DDC                            
00012DDC                            Circ_Action:	; Routine 4
00012DDC 7200                       		moveq	#0,d1
00012DDE 1228 0014                  		move.b	obActWid(a0),d1
00012DE2 4EB9 0000 8C70             		jsr	(ExitPlatform).l
00012DE8 3F28 0008                  		move.w	obX(a0),-(sp)
00012DEC 6100 0000                  		bsr.w	Circ_Types
00012DF0 341F                       		move.w	(sp)+,d2
00012DF2 4EF9 0000 91DA             		jmp	(MvSonicOnPtfm2).l
00012DF8                            ; ===========================================================================
00012DF8                            
00012DF8                            Circ_Types:
00012DF8 7000                       		moveq	#0,d0
00012DFA 1028 0028                  		move.b	obSubtype(a0),d0
00012DFE 0240 000C                  		andi.w	#$C,d0
00012E02 E248                       		lsr.w	#1,d0
00012E04 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E08 4EFB 1000                  		jmp	@index(pc,d1.w)
00012E0C                            ; ===========================================================================
00012E0C 0000                       @index:		dc.w @type00-@index
00012E0E 0000                       		dc.w @type04-@index
00012E10                            ; ===========================================================================
00012E10                            
00012E10                            @type00:
00012E10 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00012E14 0401 0050                  		subi.b	#$50,d1		; set radius of circle
00012E18 4881                       		ext.w	d1
00012E1A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E1E 0402 0050                  		subi.b	#$50,d2
00012E22 4882                       		ext.w	d2
00012E24 0828 0000 0028             		btst	#0,obSubtype(a0)
00012E2A 6700                       		beq.s	@noshift00a
00012E2C 4441                       		neg.w	d1
00012E2E 4442                       		neg.w	d2
00012E30                            
00012E30                            	@noshift00a:
00012E30 0828 0001 0028             		btst	#1,obSubtype(a0)
00012E36 6700                       		beq.s	@noshift00b
00012E38 4441                       		neg.w	d1
00012E3A C342                       		exg	d1,d2
00012E3C                            
00012E3C                            	@noshift00b:
00012E3C D268 0032                  		add.w	circ_origX(a0),d1
00012E40 3141 0008                  		move.w	d1,obX(a0)
00012E44 D468 0030                  		add.w	circ_origY(a0),d2
00012E48 3142 000C                  		move.w	d2,obY(a0)
00012E4C 4E75                       		rts	
00012E4E                            ; ===========================================================================
00012E4E                            
00012E4E                            @type04:
00012E4E 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00012E52 0401 0050                  		subi.b	#$50,d1
00012E56 4881                       		ext.w	d1
00012E58 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00012E5C 0402 0050                  		subi.b	#$50,d2
00012E60 4882                       		ext.w	d2
00012E62 0828 0000 0028             		btst	#0,obSubtype(a0)
00012E68 6700                       		beq.s	@noshift04a
00012E6A 4441                       		neg.w	d1
00012E6C 4442                       		neg.w	d2
00012E6E                            
00012E6E                            	@noshift04a:
00012E6E 0828 0001 0028             		btst	#1,obSubtype(a0)
00012E74 6700                       		beq.s	@noshift04b
00012E76 4441                       		neg.w	d1
00012E78 C342                       		exg	d1,d2
00012E7A                            
00012E7A                            	@noshift04b:
00012E7A 4441                       		neg.w	d1
00012E7C D268 0032                  		add.w	circ_origX(a0),d1
00012E80 3141 0008                  		move.w	d1,obX(a0)
00012E84 D468 0030                  		add.w	circ_origY(a0),d2
00012E88 3142 000C                  		move.w	d2,obY(a0)
00012E8C 4E75                       		rts	
00012E8C 4E75                       		rts	
00012E8E                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00012E8E                            ; ---------------------------------------------------------------------------
00012E8E                            ; Sprite mappings - platforms that move	in circles (SLZ)
00012E8E                            ; ---------------------------------------------------------------------------
00012E8E                            Map_Circ_internal:
00012E8E 0000                       		dc.w @platform-Map_Circ_internal
00012E90 02                         @platform:	dc.b 2
00012E91 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00012E96 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00012E9C 00                         		even
00012E9C 00                         		even
00012E9C                            		include	"_incObj\5B Staircase.asm"
00012E9C                            ; ---------------------------------------------------------------------------
00012E9C                            ; Object 5B - blocks that form a staircase (SLZ)
00012E9C                            ; ---------------------------------------------------------------------------
00012E9C                            
00012E9C                            Staircase:
00012E9C 7000                       		moveq	#0,d0
00012E9E 1028 0024                  		move.b	obRoutine(a0),d0
00012EA2 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
00012EA6 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
00012EC8 6000 C574                  		bra.w	DisplaySprite
00012ECC                            ; ===========================================================================
00012ECC 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00012ECE 0000                       		dc.w Stair_Move-Stair_Index
00012ED0 0000                       		dc.w Stair_Solid-Stair_Index
00012ED2                            
00012ED2 =00000030                  stair_origX:	equ $30		; original x-axis position
00012ED2 =00000032                  stair_origY:	equ $32		; original y-axis position
00012ED2                            
00012ED2 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00012ED2                            ; ===========================================================================
00012ED2                            
00012ED2                            Stair_Main:	; Routine 0
00012ED2 5428 0024                  		addq.b	#2,obRoutine(a0)
00012ED6 7638                       		moveq	#$38,d3
00012ED8 7801                       		moveq	#1,d4
00012EDA 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00012EE0 6700                       		beq.s	@notflipped	; if not, branch
00012EE2 763B                       		moveq	#$3B,d3
00012EE4 78FF                       		moveq	#-1,d4
00012EE6                            
00012EE6                            	@notflipped:
00012EE6 3428 0008                  		move.w	obX(a0),d2
00012EEA 2248                       		movea.l	a0,a1
00012EEC 7203                       		moveq	#3,d1
00012EEE 6000                       		bra.s	@makeblocks
00012EF0                            ; ===========================================================================
00012EF0                            
00012EF0                            @loop:
00012EF0 6100 CAFC                  		bsr.w	FindNextFreeObj
00012EF4 6600 0000                  		bne.w	@fail
00012EF8 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012EFE                            
00012EFE                            @makeblocks:
00012EFE 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00012F02 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
00012F0A 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00012F10 137C 0004 0001             		move.b	#4,obRender(a1)
00012F16 337C 0180 0018             		move.w	#$180,obPriority(a1)
00012F1C 137C 0010 0014             		move.b	#$10,obActWid(a1)
00012F22 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00012F28 3342 0008                  		move.w	d2,obX(a1)
00012F2C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012F32 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00012F38 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00012F3E 0642 0020                  		addi.w	#$20,d2
00012F42 1343 0037                  		move.b	d3,$37(a1)
00012F46 2348 003C                  		move.l	a0,stair_parent(a1)
00012F4A D604                       		add.b	d4,d3
00012F4C 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00012F50                            
00012F50                            	@fail:
00012F50                            
00012F50                            Stair_Move:	; Routine 2
00012F50 7000                       		moveq	#0,d0
00012F52 1028 0028                  		move.b	obSubtype(a0),d0
00012F56 0240 0007                  		andi.w	#7,d0
00012F5A D040                       		add.w	d0,d0
00012F5C 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00012F60 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00012F64                            
00012F64                            Stair_Solid:	; Routine 4
00012F64 2468 003C                  		movea.l	stair_parent(a0),a2
00012F68 7000                       		moveq	#0,d0
00012F6A 1028 0037                  		move.b	$37(a0),d0
00012F6E 1032 0000                  		move.b	(a2,d0.w),d0
00012F72 D068 0032                  		add.w	stair_origY(a0),d0
00012F76 3140 000C                  		move.w	d0,obY(a0)
00012F7A 7200                       		moveq	#0,d1
00012F7C 1228 0014                  		move.b	obActWid(a0),d1
00012F80 0641 000B                  		addi.w	#$B,d1
00012F84 343C 0010                  		move.w	#$10,d2
00012F88 363C 0011                  		move.w	#$11,d3
00012F8C 3828 0008                  		move.w	obX(a0),d4
00012F90 6100 E9E8                  		bsr.w	SolidObject
00012F94 4A04                       		tst.b	d4
00012F96 6A00                       		bpl.s	loc_10F92
00012F98 1544 0036                  		move.b	d4,$36(a2)
00012F9C                            
00012F9C                            loc_10F92:
00012F9C 0828 0003 0022             		btst	#3,obStatus(a0)
00012FA2 6700                       		beq.s	locret_10FA0
00012FA4 157C 0001 0036             		move.b	#1,$36(a2)
00012FAA                            
00012FAA                            locret_10FA0:
00012FAA 4E75                       		rts	
00012FAC                            ; ===========================================================================
00012FAC 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
00012FAE 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00012FB0 0000                       		dc.w Stair_Type02-Stair_TypeIndex
00012FB2 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00012FB4                            ; ===========================================================================
00012FB4                            
00012FB4                            Stair_Type00:
00012FB4 4A68 0034                  		tst.w	$34(a0)
00012FB8 6600                       		bne.s	loc_10FC0
00012FBA 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00012FC0 6600                       		bne.s	locret_10FBE
00012FC2 317C 001E 0034             		move.w	#$1E,$34(a0)
00012FC8                            
00012FC8                            locret_10FBE:
00012FC8 4E75                       		rts	
00012FCA                            ; ===========================================================================
00012FCA                            
00012FCA                            loc_10FC0:
00012FCA 5368 0034                  		subq.w	#1,$34(a0)
00012FCE 66F8                       		bne.s	locret_10FBE
00012FD0 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00012FD4 4E75                       		rts	
00012FD6                            ; ===========================================================================
00012FD6                            
00012FD6                            Stair_Type02:
00012FD6 4A68 0034                  		tst.w	$34(a0)
00012FDA 6600                       		bne.s	loc_10FE0
00012FDC 4A28 0036                  		tst.b	$36(a0)
00012FE0 6A00                       		bpl.s	locret_10FDE
00012FE2 317C 003C 0034             		move.w	#$3C,$34(a0)
00012FE8                            
00012FE8                            locret_10FDE:
00012FE8 4E75                       		rts	
00012FEA                            ; ===========================================================================
00012FEA                            
00012FEA                            loc_10FE0:
00012FEA 5368 0034                  		subq.w	#1,$34(a0)
00012FEE 6600                       		bne.s	loc_10FEC
00012FF0 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00012FF4 4E75                       		rts	
00012FF6                            ; ===========================================================================
00012FF6                            
00012FF6                            loc_10FEC:
00012FF6 43E8 0038                  		lea	$38(a0),a1
00012FFA 3028 0034                  		move.w	$34(a0),d0
00012FFE E408                       		lsr.b	#2,d0
00013000 0200 0001                  		andi.b	#1,d0
00013004 12C0                       		move.b	d0,(a1)+
00013006 0A00 0001                  		eori.b	#1,d0
0001300A 12C0                       		move.b	d0,(a1)+
0001300C 0A00 0001                  		eori.b	#1,d0
00013010 12C0                       		move.b	d0,(a1)+
00013012 0A00 0001                  		eori.b	#1,d0
00013016 12C0                       		move.b	d0,(a1)+
00013018 4E75                       		rts	
0001301A                            ; ===========================================================================
0001301A                            
0001301A                            Stair_Type01:
0001301A 43E8 0038                  		lea	$38(a0),a1
0001301E 0C11 0080                  		cmpi.b	#$80,(a1)
00013022 6700                       		beq.s	locret_11038
00013024 5211                       		addq.b	#1,(a1)
00013026 7200                       		moveq	#0,d1
00013028 1219                       		move.b	(a1)+,d1
0001302A 4841                       		swap	d1
0001302C E289                       		lsr.l	#1,d1
0001302E 2401                       		move.l	d1,d2
00013030 E289                       		lsr.l	#1,d1
00013032 2601                       		move.l	d1,d3
00013034 D682                       		add.l	d2,d3
00013036 4841                       		swap	d1
00013038 4842                       		swap	d2
0001303A 4843                       		swap	d3
0001303C 12C3                       		move.b	d3,(a1)+
0001303E 12C2                       		move.b	d2,(a1)+
00013040 12C1                       		move.b	d1,(a1)+
00013042                            
00013042                            locret_11038:
00013042 4E75                       		rts	
00013044 4E75                       		rts	
00013044 4E75                       		rts	
00013046                            Map_Stair:	include	"_maps\Staircase.asm"
00013046                            ; ---------------------------------------------------------------------------
00013046                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013046                            ; ---------------------------------------------------------------------------
00013046                            Map_Stair_internal:
00013046 0000                       		dc.w @block-Map_Stair_internal
00013048 01                         @block:		dc.b 1
00013049 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001304E                            		even
0001304E                            		even
0001304E                            		include	"_incObj\5C Pylon.asm"
0001304E                            ; ---------------------------------------------------------------------------
0001304E                            ; Object 5C - metal pylons in foreground (SLZ)
0001304E                            ; ---------------------------------------------------------------------------
0001304E                            
0001304E                            Pylon:
0001304E 7000                       		moveq	#0,d0
00013050 1028 0024                  		move.b	obRoutine(a0),d0
00013054 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00013058 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001305C                            ; ===========================================================================
0001305C 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
0001305E 0000                       		dc.w Pyl_Display-Pyl_Index
00013060                            ; ===========================================================================
00013060                            
00013060                            Pyl_Main:	; Routine 0
00013060 5428 0024                  		addq.b	#2,obRoutine(a0)
00013064 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001306C 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013072 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013078                            
00013078                            Pyl_Display:	; Routine 2
00013078 2238 F700                  		move.l	(v_screenposx).w,d1
0001307C D281                       		add.l	d1,d1
0001307E 4841                       		swap	d1
00013080 4441                       		neg.w	d1
00013082 3141 0008                  		move.w	d1,obX(a0)
00013086 2238 F704                  		move.l	(v_screenposy).w,d1
0001308A D281                       		add.l	d1,d1
0001308C 4841                       		swap	d1
0001308E 0241 003F                  		andi.w	#$3F,d1
00013092 4441                       		neg.w	d1
00013094 0641 0100                  		addi.w	#$100,d1
00013098 3141 000A                  		move.w	d1,obScreenY(a0)
0001309C 6000 C3A0                  		bra.w	DisplaySprite
0001309C 6000 C3A0                  		bra.w	DisplaySprite
000130A0                            Map_Pylon:	include	"_maps\Pylon.asm"
000130A0                            ; ---------------------------------------------------------------------------
000130A0                            ; Sprite mappings - metal pylons in foreground (SLZ)
000130A0                            ; ---------------------------------------------------------------------------
000130A0                            Map_Pylon_internal:
000130A0 0000                       		dc.w @pylon-Map_Pylon_internal
000130A2 09                         @pylon:		dc.b 9
000130A3 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000130A8 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000130AD C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000130B2 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000130B7 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000130BC 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000130C1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000130C6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000130CB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000130D0                            		even
000130D0                            		even
000130D0                            
000130D0                            		include	"_incObj\1B Water Surface.asm"
000130D0                            ; ---------------------------------------------------------------------------
000130D0                            ; Object 1B - water surface (LZ)
000130D0                            ; ---------------------------------------------------------------------------
000130D0                            
000130D0                            WaterSurface:
000130D0 7000                       		moveq	#0,d0
000130D2 1028 0024                  		move.b	obRoutine(a0),d0
000130D6 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000130DA 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000130DE                            ; ===========================================================================
000130DE 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000130E0 0000                       		dc.w Surf_Action-Surf_Index
000130E2                            
000130E2 =00000030                  surf_origX:	equ $30		; original x-axis position
000130E2 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000130E2                            ; ===========================================================================
000130E2                            
000130E2                            Surf_Main:	; Routine 0
000130E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000130E6 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000130EE 317C C300 0002             		move.w	#$C300,obGfx(a0)
000130F4 117C 0004 0001             		move.b	#4,obRender(a0)
000130FA 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013100 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013106                            
00013106                            Surf_Action:	; Routine 2
00013106 3238 F700                  		move.w	(v_screenposx).w,d1
0001310A 0241 FFE0                  		andi.w	#$FFE0,d1
0001310E D268 0030                  		add.w	surf_origX(a0),d1
00013112 0838 0000 FE05             		btst	#0,(v_framebyte).w
00013118 6700                       		beq.s	@even		; branch on even frames
0001311A 0641 0020                  		addi.w	#$20,d1
0001311E                            
0001311E                            	@even:
0001311E 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013122 3238 F646                  		move.w	(v_waterpos1).w,d1
00013126 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001312A 4A28 0032                  		tst.b	surf_freeze(a0)
0001312E 6600                       		bne.s	@stopped
00013130 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013136 6700                       		beq.s	@animate	; if not, branch
00013138 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001313C 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013142 6000                       		bra.s	@display
00013144                            ; ===========================================================================
00013144                            
00013144                            @stopped:
00013144 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00013148 6600                       		bne.s	@display	; if yes, branch
0001314A 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013150 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013154                            
00013154                            @animate:
00013154 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013158 6A00                       		bpl.s	@display
0001315A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013160 5228 001A                  		addq.b	#1,obFrame(a0)
00013164 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001316A 6500                       		bcs.s	@display
0001316C 117C 0000 001A             		move.b	#0,obFrame(a0)
00013172                            
00013172                            @display:
00013172 6000 C2CA                  		bra.w	DisplaySprite
00013172 6000 C2CA                  		bra.w	DisplaySprite
00013176                            Map_Surf:	include	"_maps\Water Surface.asm"
00013176                            ; --------------------------------------------------------------------------------
00013176                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013176                            ; --------------------------------------------------------------------------------
00013176                            
00013176                            SME_LGSi8:	
00013176 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001317A 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
0001317E 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013182 03                         SME_LGSi8_C:	dc.b 3	
00013183 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
00013188 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001318D F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013192 03                         SME_LGSi8_1C:	dc.b 3	
00013193 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
00013198 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001319D F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000131A2 03                         SME_LGSi8_2C:	dc.b 3	
000131A3 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000131A8 F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000131AD F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000131B2 06                         SME_LGSi8_3C:	dc.b 6	
000131B3 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000131B8 F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000131BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000131C2 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000131C7 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000131CC F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000131D1 06                         SME_LGSi8_5B:	dc.b 6	
000131D2 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000131D7 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000131DC F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000131E1 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000131E6 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000131EB F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000131F0 06                         SME_LGSi8_7A:	dc.b 6	
000131F1 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000131F6 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000131FB F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013200 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013205 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001320A F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013210 00                         		even
00013210 00                         		even
00013210                            		include	"_incObj\0B Pole that Breaks.asm"
00013210                            ; ---------------------------------------------------------------------------
00013210                            ; Object 0B - pole that	breaks (LZ)
00013210                            ; ---------------------------------------------------------------------------
00013210                            
00013210                            Pole:
00013210 7000                       		moveq	#0,d0
00013212 1028 0024                  		move.b	obRoutine(a0),d0
00013216 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001321A 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
0001321E                            ; ===========================================================================
0001321E 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013220 0000                       		dc.w Pole_Action-Pole_Index
00013222 0000                       		dc.w Pole_Display-Pole_Index
00013224                            
00013224 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013224 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013224                            ; ===========================================================================
00013224                            
00013224                            Pole_Main:	; Routine 0
00013224 5428 0024                  		addq.b	#2,obRoutine(a0)
00013228 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013230 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013236 117C 0004 0001             		move.b	#4,obRender(a0)
0001323C 117C 0008 0014             		move.b	#8,obActWid(a0)
00013242 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013248 117C 00E1 0020             		move.b	#$E1,obColType(a0)
0001324E 7000                       		moveq	#0,d0
00013250 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013254 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00013258 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001325C                            
0001325C                            Pole_Action:	; Routine 2
0001325C 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013260 6700                       		beq.s	@grab		; if not, branch
00013262 4A68 0030                  		tst.w	pole_time(a0)
00013266 6700                       		beq.s	@moveup
00013268 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001326C 6600                       		bne.s	@moveup
0001326E 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013274 6000                       		bra.s	@release
00013276                            ; ===========================================================================
00013276                            
00013276                            @moveup:
00013276 43F8 D000                  		lea	(v_player).w,a1
0001327A 3028 000C                  		move.w	obY(a0),d0
0001327E 0440 0018                  		subi.w	#$18,d0
00013282 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00013288 6700                       		beq.s	@movedown	; if not, branch
0001328A 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
0001328E B069 000C                  		cmp.w	obY(a1),d0
00013292 6500                       		bcs.s	@movedown
00013294 3340 000C                  		move.w	d0,obY(a1)
00013298                            
00013298                            @movedown:
00013298 0640 0024                  		addi.w	#$24,d0
0001329C 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000132A2 6700                       		beq.s	@letgo		; if not, branch
000132A4 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000132A8 B069 000C                  		cmp.w	obY(a1),d0
000132AC 6400                       		bcc.s	@letgo
000132AE 3340 000C                  		move.w	d0,obY(a1)
000132B2                            
000132B2                            @letgo:
000132B2 1038 F603                  		move.b	(v_jpadpress2).w,d0
000132B6 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000132BA 6700                       		beq.s	Pole_Display	; if not, branch
000132BC                            
000132BC                            @release:
000132BC 4228 0020                  		clr.b	obColType(a0)
000132C0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000132C4 4238 F7C8                  		clr.b	(f_lockmulti).w
000132C8 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000132CC 4228 0032                  		clr.b	pole_grabbed(a0)
000132D0 6000                       		bra.s	Pole_Display
000132D2                            ; ===========================================================================
000132D2                            
000132D2                            @grab:
000132D2 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000132D6 6700                       		beq.s	Pole_Display	; if not, branch
000132D8 43F8 D000                  		lea	(v_player).w,a1
000132DC 3028 0008                  		move.w	obX(a0),d0
000132E0 0640 0014                  		addi.w	#$14,d0
000132E4 B069 0008                  		cmp.w	obX(a1),d0
000132E8 6400                       		bcc.s	Pole_Display
000132EA 4228 0021                  		clr.b	obColProp(a0)
000132EE 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000132F4 6400                       		bcc.s	Pole_Display
000132F6 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000132FA 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000132FE 3028 0008                  		move.w	obX(a0),d0
00013302 0640 0014                  		addi.w	#$14,d0
00013306 3340 0008                  		move.w	d0,obX(a1)
0001330A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013310 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013316 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001331C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013322 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00013328                            
00013328                            Pole_Display:	; Routine 4
00013328 6000 E1B8                  		bra.w	RememberState
00013328 6000 E1B8                  		bra.w	RememberState
0001332C                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            ; Sprite mappings - pole that breaks (LZ)
0001332C                            ; ---------------------------------------------------------------------------
0001332C                            Map_Pole_internal:
0001332C 0000                       		dc.w @normal-Map_Pole_internal
0001332E 0000                       		dc.w @broken-Map_Pole_internal
00013330 02                         @normal:	dc.b 2			; normal pole
00013331 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013336 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001333B 04                         @broken:	dc.b 4			; broken pole
0001333C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013341 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013346 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001334B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013350                            		even
00013350                            		even
00013350                            		include	"_incObj\0C Flapping Door.asm"
00013350                            ; ---------------------------------------------------------------------------
00013350                            ; Object 0C - flapping door (LZ)
00013350                            ; ---------------------------------------------------------------------------
00013350                            
00013350                            FlapDoor:
00013350 7000                       		moveq	#0,d0
00013352 1028 0024                  		move.b	obRoutine(a0),d0
00013356 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001335A 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
0001335E                            ; ===========================================================================
0001335E 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013360 0000                       		dc.w Flap_OpenClose-Flap_Index
00013362                            
00013362 =00000032                  flap_time:	equ $32		; time between opening/closing
00013362 =00000030                  flap_wait:	equ $30		; time until change
00013362                            ; ===========================================================================
00013362                            
00013362                            Flap_Main:	; Routine 0
00013362 5428 0024                  		addq.b	#2,obRoutine(a0)
00013366 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
0001336E 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013374 0028 0004 0001             		ori.b	#4,obRender(a0)
0001337A 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013380 7000                       		moveq	#0,d0
00013382 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013386 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001338A 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
0001338E                            
0001338E                            Flap_OpenClose:	; Routine 2
0001338E 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013392 6A00                       		bpl.s	@wait		; if time remains, branch
00013394 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001339A 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000133A0 4A28 0001                  		tst.b	obRender(a0)
000133A4 6A00                       		bpl.s	@nosound
000133B0                            
000133B0                            	@wait:
000133B0                            	@nosound:
000133B0 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000133B6 6100 9140                  		bsr.w	AnimateSprite
000133BA 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000133BE 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000133C2 6600                       		bne.s	@display	; if yes, branch
000133C4 3038 D008                  		move.w	(v_player+obX).w,d0
000133C8 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000133CC 6400                       		bcc.s	@display	; if yes, branch
000133CE 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000133D4 323C 0013                  		move.w	#$13,d1
000133D8 343C 0020                  		move.w	#$20,d2
000133DC 3602                       		move.w	d2,d3
000133DE 5243                       		addq.w	#1,d3
000133E0 3828 0008                  		move.w	obX(a0),d4
000133E4 6100 E594                  		bsr.w	SolidObject	; make the door	solid
000133E8                            
000133E8                            	@display:
000133E8 6000 E0F8                  		bra.w	RememberState
000133E8 6000 E0F8                  		bra.w	RememberState
000133EC                            		include	"_anim\Flapping Door.asm"
000133EC                            ; ---------------------------------------------------------------------------
000133EC                            ; Animation script - flapping door (LZ)
000133EC                            ; ---------------------------------------------------------------------------
000133EC 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000133EE 0000                       		dc.w @closing-Ani_Flap
000133F0 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000133F6 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000133FC                            		even
000133FC                            		even
000133FC                            Map_Flap:	include	"_maps\Flapping Door.asm"
000133FC                            ; ---------------------------------------------------------------------------
000133FC                            ; Sprite mappings - flapping door (LZ)
000133FC                            ; ---------------------------------------------------------------------------
000133FC                            Map_Flap_internal:
000133FC 0000                       		dc.w @closed-Map_Flap_internal
000133FE 0000                       		dc.w @halfway-Map_Flap_internal
00013400 0000                       		dc.w @open-Map_Flap_internal
00013402 02                         @closed:	dc.b 2
00013403 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00013408 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001340D 02                         @halfway:	dc.b 2
0001340E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013413 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00013418 02                         @open:		dc.b 2
00013419 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001341E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013424 00                         		even
00013424 00                         		even
00013424                            
00013424                            		include	"_incObj\71 Invisible Barriers.asm"
00013424                            ; ---------------------------------------------------------------------------
00013424                            ; Object 71 - invisible	solid barriers
00013424                            ; ---------------------------------------------------------------------------
00013424                            
00013424                            Invisibarrier:
00013424 7000                       		moveq	#0,d0
00013426 1028 0024                  		move.b	obRoutine(a0),d0
0001342A 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
0001342E 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013432                            ; ===========================================================================
00013432 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013434 0000                       		dc.w Invis_Solid-Invis_Index
00013436                            
00013436 =00000016                  invis_height:	equ $16		; height in pixels
00013436                            ; ===========================================================================
00013436                            
00013436                            Invis_Main:	; Routine 0
00013436 5428 0024                  		addq.b	#2,obRoutine(a0)
0001343A 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013442 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00013448 0028 0004 0001             		ori.b	#4,obRender(a0)
0001344E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013452 1200                       		move.b	d0,d1
00013454 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00013458 0640 0010                  		addi.w	#$10,d0
0001345C E248                       		lsr.w	#1,d0
0001345E 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013462 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013466 5241                       		addq.w	#1,d1
00013468 E749                       		lsl.w	#3,d1
0001346A 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
0001346E                            
0001346E                            Invis_Solid:	; Routine 2
0001346E 6100 C35C                  		bsr.w	ChkObjectVisible
00013472 6600                       		bne.s	@chkdel
00013474 7200                       		moveq	#0,d1
00013476 1228 0014                  		move.b	obActWid(a0),d1
0001347A 0641 000B                  		addi.w	#$B,d1
0001347E 7400                       		moveq	#0,d2
00013480 1428 0016                  		move.b	invis_height(a0),d2
00013484 3602                       		move.w	d2,d3
00013486 5243                       		addq.w	#1,d3
00013488 3828 0008                  		move.w	obX(a0),d4
0001348C 6100 E534                  		bsr.w	SolidObject71
00013490                            
00013490                            @chkdel:
000134AC 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000134B0 6700                       		beq.s	@nodisplay	; if not, branch
000134B2 4EF9 0000 F43E             		jmp	(DisplaySprite).l	; if yes, display the object
000134B8                            
000134B8                            	@nodisplay:
000134B8 4E75                       		rts	
000134BA                            
000134BA                            	@delete:
000134BA 4EF9 0000 F47E             		jmp	(DeleteObject).l
000134BA 4EF9 0000 F47E             		jmp	(DeleteObject).l
000134C0                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000134C0                            ; --------------------------------------------------------------------------------
000134C0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000134C0                            ; --------------------------------------------------------------------------------
000134C0                            
000134C0                            SME_t60cE:	
000134C0 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000134C4 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000134C6 04                         SME_t60cE_6:	dc.b 4	
000134C7 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000134CC 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000134D1 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000134D6 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000134DB 04                         SME_t60cE_1B:	dc.b 4	
000134DC E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000134E1 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000134E6 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000134EB 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000134F0 04                         SME_t60cE_30:	dc.b 4	
000134F1 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000134F6 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000134FB 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013500 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013506 00                         		even
00013506 00                         		even
00013506                            
00013506                            		include	"_incObj\5D Fan.asm"
00013506                            ; ---------------------------------------------------------------------------
00013506                            ; Object 5D - fans (SLZ)
00013506                            ; ---------------------------------------------------------------------------
00013506                            
00013506                            Fan:
00013506 7000                       		moveq	#0,d0
00013508 1028 0024                  		move.b	obRoutine(a0),d0
0001350C 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013510 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013514                            ; ===========================================================================
00013514 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013516 0000                       		dc.w Fan_Delay-Fan_Index
00013518                            
00013518 =00000030                  fan_time:	equ $30		; time between switching on/off
00013518 =00000032                  fan_switch:	equ $32		; on/off switch
00013518                            ; ===========================================================================
00013518                            
00013518                            Fan_Main:	; Routine 0
00013518 5428 0024                  		addq.b	#2,obRoutine(a0)
0001351C 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013524 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001352A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013530 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013536 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001353C                            
0001353C                            Fan_Delay:	; Routine 2
0001353C 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013542 6600                       		bne.s	@blow		; if yes, branch
00013544 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013548 6A00                       		bpl.s	@blow		; if time remains, branch
0001354A 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013550 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013556 6700                       		beq.s	@blow		; if fan is off, branch
00013558 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
0001355E                            
0001355E                            @blow:
0001355E 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013562 6600 0000                  		bne.w	@chkdel		; if not, branch
00013566 43F8 D000                  		lea	(v_player).w,a1
0001356A 3029 0008                  		move.w	obX(a1),d0
0001356E 9068 0008                  		sub.w	obX(a0),d0
00013572 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013578 6600                       		bne.s	@chksonic	; if yes, branch
0001357A 4440                       		neg.w	d0
0001357C                            
0001357C                            @chksonic:
0001357C 0640 0050                  		addi.w	#$50,d0
00013580 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013584 6400                       		bcc.s	@animate	; if yes, branch
00013586 3229 000C                  		move.w	obY(a1),d1
0001358A 0641 0060                  		addi.w	#$60,d1
0001358E 9268 000C                  		sub.w	obY(a0),d1
00013592 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013594 0C41 0070                  		cmpi.w	#$70,d1
00013598 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001359A 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
0001359E 6400                       		bcc.s	@faraway	; if yes, branch
000135A0 4640                       		not.w	d0
000135A2 D040                       		add.w	d0,d0
000135A4                            
000135A4                            	@faraway:
000135A4 0640 0060                  		addi.w	#$60,d0
000135A8 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000135AE 6600                       		bne.s	@right		; if yes, branch
000135B0 4440                       		neg.w	d0
000135B2                            
000135B2                            	@right:
000135B2 4400                       		neg.b	d0
000135B4 E840                       		asr.w	#4,d0
000135B6 0828 0000 0028             		btst	#0,obSubtype(a0)
000135BC 6700                       		beq.s	@movesonic
000135BE 4440                       		neg.w	d0
000135C0                            
000135C0                            	@movesonic:
000135C0 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000135C4                            
000135C4                            @animate:
000135C4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000135C8 6A00                       		bpl.s	@chkdel
000135CA 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000135D0 5228 001B                  		addq.b	#1,obAniFrame(a0)
000135D4 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000135DA 6500                       		bcs.s	@noreset
000135DC 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000135E2                            
000135E2                            	@noreset:
000135E2 7000                       		moveq	#0,d0
000135E4 0828 0000 0028             		btst	#0,obSubtype(a0)
000135EA 6700                       		beq.s	@noflip
000135EC 7002                       		moveq	#2,d0
000135EE                            
000135EE                            	@noflip:
000135EE D028 001B                  		add.b	obAniFrame(a0),d0
000135F2 1140 001A                  		move.b	d0,obFrame(a0)
000135F6                            
000135F6                            @chkdel:
000135F6 6100 BE46                  		bsr.w	DisplaySprite
00013618 4E75                       		rts	
00013618 4E75                       		rts	
0001361A                            Map_Fan:	include	"_maps\Fan.asm"
0001361A                            ; ---------------------------------------------------------------------------
0001361A                            ; Sprite mappings - fans (SLZ)
0001361A                            ; ---------------------------------------------------------------------------
0001361A                            Map_Fan_internal:
0001361A 0000                       		dc.w @fan1-Map_Fan_internal
0001361C 0000                       		dc.w @fan2-Map_Fan_internal
0001361E 0000                       		dc.w @fan3-Map_Fan_internal
00013620 0000                       		dc.w @fan2-Map_Fan_internal
00013622 0000                       		dc.w @fan1-Map_Fan_internal
00013624 02                         @fan1:		dc.b 2
00013625 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001362A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001362F 02                         @fan2:		dc.b 2
00013630 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013635 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001363A 02                         @fan3:		dc.b 2
0001363B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013640 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013646 00                         		even
00013646 00                         		even
00013646                            		include	"_incObj\5E Seesaw.asm"
00013646                            ; ---------------------------------------------------------------------------
00013646                            ; Object 5E - seesaws (SLZ)
00013646                            ; ---------------------------------------------------------------------------
00013646                            
00013646                            Seesaw:
00013646 7000                       		moveq	#0,d0
00013648 1028 0024                  		move.b	obRoutine(a0),d0
0001364C 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013650 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013654 3028 0000                  		move.w	see_origX(a0),d0
00013658 0240 FF80                  		andi.w	#$FF80,d0
0001365C 3238 F700                  		move.w	(v_screenposx).w,d1
00013660 0441 0080                  		subi.w	#$80,d1
00013664 0241 FF80                  		andi.w	#$FF80,d1
00013668 9041                       		sub.w	d1,d0
0001366A 6B00 BE12                  		bmi.w	DeleteObject
0001366E 0C40 0280                  		cmpi.w	#$280,d0
00013672 6200 BE0A                  		bhi.w	DeleteObject
00013676 6000 BDC6                  		bra.w	DisplaySprite
0001367A                            ; ===========================================================================
0001367A 0000                       See_Index:	dc.w See_Main-See_Index
0001367C 0000                       		dc.w See_Slope-See_Index
0001367E 0000                       		dc.w See_Slope2-See_Index
00013680 0000                       		dc.w See_Spikeball-See_Index
00013682 0000                       		dc.w See_MoveSpike-See_Index
00013684 0000                       		dc.w See_SpikeFall-See_Index
00013686                            
00013686 =00000030                  see_origX:	equ $30		; original x-axis position
00013686 =00000034                  see_origY:	equ $34		; original y-axis position
00013686 =00000038                  see_speed:	equ $38		; speed of collision
00013686 =0000003A                  see_frame:	equ $3A		; 
00013686 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013686                            ; ===========================================================================
00013686                            
00013686                            See_Main:	; Routine 0
00013686 5428 0024                  		addq.b	#2,obRoutine(a0)
0001368A 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013692 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013698 0028 0004 0001             		ori.b	#4,obRender(a0)
0001369E 117C 0004 0018             		move.b	#4,obPriority(a0)
000136A4 117C 0030 0014             		move.b	#$30,obActWid(a0)
000136AA 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000136B0 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
000136B4 6600                       		bne.s	@noball		; if not, branch
000136B6                            
000136B6 6100 C336                  		bsr.w	FindNextFreeObj
000136BA 6600                       		bne.s	@noball
000136BC 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
000136C0 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
000136C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
000136CA 3368 000C 000C             		move.w	obY(a0),obY(a1)
000136D0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000136D6 2348 003C                  		move.l	a0,see_parent(a1)
000136DA                            
000136DA                            	@noball:
000136DA 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000136E0 6700                       		beq.s	@noflip		; if not, branch
000136E2 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
000136E8                            
000136E8                            	@noflip:
000136E8 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
000136EE                            
000136EE                            See_Slope:	; Routine 2
000136EE 1228 003A                  		move.b	see_frame(a0),d1
000136F2 6100 0000                  		bsr.w	See_ChgFrame
000136F6 45F9 0000 0000             		lea	(See_DataSlope).l,a2
000136FC 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013702 6700                       		beq.s	@notflat	; if not, branch
00013704 45F9 0000 0000             		lea	(See_DataFlat).l,a2
0001370A                            
0001370A                            	@notflat:
0001370A 43F8 D000                  		lea	(v_player).w,a1
0001370E 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013714 323C 0030                  		move.w	#$30,d1
00013718 4EB9 0000 8BD0             		jsr	(SlopeObject).l
0001371E 4E75                       		rts	
00013720                            ; ===========================================================================
00013720                            
00013720                            See_Slope2:	; Routine 4
00013720 6100 0000                  		bsr.w	See_ChkSide
00013724 45F9 0000 0000             		lea	(See_DataSlope).l,a2
0001372A 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013730 6700                       		beq.s	@notflat	; if not, branch
00013732 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013738                            
00013738                            	@notflat:
00013738 323C 0030                  		move.w	#$30,d1
0001373C 4EB9 0000 8C70             		jsr	(ExitPlatform).l
00013742 323C 0030                  		move.w	#$30,d1
00013746 3428 0008                  		move.w	obX(a0),d2
0001374A 4EB9 0000 9C0A             		jsr	(SlopeObject2).l
00013750 4E75                       		rts	
00013752                            ; ===========================================================================
00013752                            
00013752                            See_ChkSide:
00013752 7202                       		moveq	#2,d1
00013754 43F8 D000                  		lea	(v_player).w,a1
00013758 3028 0008                  		move.w	obX(a0),d0
0001375C 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013760 6400                       		bcc.s	@leftside	; if yes, branch
00013762 4440                       		neg.w	d0
00013764 7200                       		moveq	#0,d1
00013766                            
00013766                            	@leftside:
00013766 0C40 0008                  		cmpi.w	#8,d0
0001376A 6400                       		bcc.s	See_ChgFrame
0001376C 7201                       		moveq	#1,d1
0001376E                            
0001376E                            See_ChgFrame:
0001376E 1028 001A                  		move.b	obFrame(a0),d0
00013772 B001                       		cmp.b	d1,d0		; does frame need to change?
00013774 6700                       		beq.s	@noflip		; if not, branch
00013776 6400                       		bcc.s	@loc_11772
00013778 5400                       		addq.b	#2,d0
0001377A                            
0001377A                            	@loc_11772:
0001377A 5300                       		subq.b	#1,d0
0001377C 1140 001A                  		move.b	d0,obFrame(a0)
00013780 1141 003A                  		move.b	d1,see_frame(a0)
00013784 08A8 0000 0001             		bclr	#0,obRender(a0)
0001378A 0828 0001 001A             		btst	#1,obFrame(a0)
00013790 6700                       		beq.s	@noflip
00013792 08E8 0000 0001             		bset	#0,obRender(a0)
00013798                            
00013798                            	@noflip:
00013798 4E75                       		rts	
0001379A                            ; ===========================================================================
0001379A                            
0001379A                            See_Spikeball:	; Routine 6
0001379A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001379E 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
000137A6 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
000137AC 0028 0004 0001             		ori.b	#4,obRender(a0)
000137B2 117C 0004 0018             		move.b	#4,obPriority(a0)
000137B8 117C 008B 0020             		move.b	#$8B,obColType(a0)
000137BE 117C 000C 0014             		move.b	#$C,obActWid(a0)
000137C4 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
000137CA 0668 0028 0008             		addi.w	#$28,obX(a0)
000137D0 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
000137D6 117C 0001 001A             		move.b	#1,obFrame(a0)
000137DC 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
000137E2 6700                       		beq.s	See_MoveSpike	; if not, branch
000137E4 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
000137EA 117C 0002 003A             		move.b	#2,see_frame(a0)
000137F0                            
000137F0                            See_MoveSpike:	; Routine 8
000137F0 2268 003C                  		movea.l	see_parent(a0),a1
000137F4 7000                       		moveq	#0,d0
000137F6 1028 003A                  		move.b	see_frame(a0),d0
000137FA 9029 003A                  		sub.b	see_frame(a1),d0
000137FE 6700                       		beq.s	loc_1183E
00013800 6400                       		bcc.s	loc_117FC
00013802 4400                       		neg.b	d0
00013804                            
00013804                            loc_117FC:
00013804 323C F7E8                  		move.w	#-$818,d1
00013808 343C FEEC                  		move.w	#-$114,d2
0001380C 0C00 0001                  		cmpi.b	#1,d0
00013810 6700                       		beq.s	loc_11822
00013812 323C F510                  		move.w	#-$AF0,d1
00013816 343C FF34                  		move.w	#-$CC,d2
0001381A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013820 6D00                       		blt.s	loc_11822
00013822 323C F200                  		move.w	#-$E00,d1
00013826 343C FF60                  		move.w	#-$A0,d2
0001382A                            
0001382A                            loc_11822:
0001382A 3141 0012                  		move.w	d1,obVelY(a0)
0001382E 3142 0010                  		move.w	d2,obVelX(a0)
00013832 3028 0008                  		move.w	obX(a0),d0
00013836 9068 0030                  		sub.w	see_origX(a0),d0
0001383A 6400                       		bcc.s	loc_11838
0001383C 4468 0010                  		neg.w	obVelX(a0)
00013840                            
00013840                            loc_11838:
00013840 5428 0024                  		addq.b	#2,obRoutine(a0)
00013844 6000                       		bra.s	See_SpikeFall
00013846                            ; ===========================================================================
00013846                            
00013846                            loc_1183E:
00013846 45F9 0000 0000             		lea	(See_Speeds).l,a2
0001384C 7000                       		moveq	#0,d0
0001384E 1029 001A                  		move.b	obFrame(a1),d0
00013852 343C 0028                  		move.w	#$28,d2
00013856 3228 0008                  		move.w	obX(a0),d1
0001385A 9268 0030                  		sub.w	see_origX(a0),d1
0001385E 6400                       		bcc.s	loc_1185C
00013860 4442                       		neg.w	d2
00013862 5440                       		addq.w	#2,d0
00013864                            
00013864                            loc_1185C:
00013864 D040                       		add.w	d0,d0
00013866 3228 0034                  		move.w	see_origY(a0),d1
0001386A D272 0000                  		add.w	(a2,d0.w),d1
0001386E 3141 000C                  		move.w	d1,obY(a0)
00013872 D468 0030                  		add.w	see_origX(a0),d2
00013876 3142 0008                  		move.w	d2,obX(a0)
0001387A 4268 000E                  		clr.w	obY+2(a0)
0001387E 4268 000A                  		clr.w	obX+2(a0)
00013882 4E75                       		rts	
00013884                            ; ===========================================================================
00013884                            
00013884                            See_SpikeFall:	; Routine $A
00013884 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013888 6A00                       		bpl.s	loc_1189A	; if yes, branch
0001388A 6100 BB66                  		bsr.w	ObjectFall
0001388E 3028 0034                  		move.w	see_origY(a0),d0
00013892 0440 002F                  		subi.w	#$2F,d0
00013896 B068 000C                  		cmp.w	obY(a0),d0
0001389A 6E00                       		bgt.s	locret_11898
0001389C 6100 BB54                  		bsr.w	ObjectFall
000138A0                            
000138A0                            locret_11898:
000138A0 4E75                       		rts	
000138A2                            ; ===========================================================================
000138A2                            
000138A2                            loc_1189A:
000138A2 6100 BB4E                  		bsr.w	ObjectFall
000138A6 2268 003C                  		movea.l	see_parent(a0),a1
000138AA 45F9 0000 0000             		lea	(See_Speeds).l,a2
000138B0 7000                       		moveq	#0,d0
000138B2 1029 001A                  		move.b	obFrame(a1),d0
000138B6 3228 0008                  		move.w	obX(a0),d1
000138BA 9268 0030                  		sub.w	see_origX(a0),d1
000138BE 6400                       		bcc.s	loc_118BA
000138C0 5440                       		addq.w	#2,d0
000138C2                            
000138C2                            loc_118BA:
000138C2 D040                       		add.w	d0,d0
000138C4 3228 0034                  		move.w	see_origY(a0),d1
000138C8 D272 0000                  		add.w	(a2,d0.w),d1
000138CC B268 000C                  		cmp.w	obY(a0),d1
000138D0 6E00                       		bgt.s	locret_11938
000138D2 2268 003C                  		movea.l	see_parent(a0),a1
000138D6 7202                       		moveq	#2,d1
000138D8 4A68 0010                  		tst.w	obVelX(a0)
000138DC 6B00                       		bmi.s	See_Spring
000138DE 7200                       		moveq	#0,d1
000138E0                            
000138E0                            See_Spring:
000138E0 1341 003A                  		move.b	d1,$3A(a1)
000138E4 1141 003A                  		move.b	d1,see_frame(a0)
000138E8 B229 001A                  		cmp.b	obFrame(a1),d1
000138EC 6700                       		beq.s	loc_1192C
000138EE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000138F4 6700                       		beq.s	loc_1192C
000138F6 4229 0025                  		clr.b	ob2ndRout(a1)
000138FA 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013900 45F8 D000                  		lea	(v_player).w,a2
00013904 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001390A 446A 0012                  		neg.w	obVelY(a2)
0001390E 08EA 0001 0022             		bset	#1,obStatus(a2)
00013914 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001391A 422A 003C                  		clr.b	$3C(a2)
0001391E 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013924 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013934                            
00013934                            loc_1192C:
00013934 4268 0010                  		clr.w	obVelX(a0)
00013938 4268 0012                  		clr.w	obVelY(a0)
0001393C 5528 0024                  		subq.b	#2,obRoutine(a0)
00013940                            
00013940                            locret_11938:
00013940 4E75                       		rts	
00013942                            ; ===========================================================================
00013942 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
0001394C                            
0001394C                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
0001397C                            		even
0001397C                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
000139AC                            		even
000139AC                            		even
000139AC                            Map_Seesaw:	include	"_maps\Seesaw.asm"
000139AC                            ; ---------------------------------------------------------------------------
000139AC                            ; Sprite mappings - seesaws (SLZ)
000139AC                            ; ---------------------------------------------------------------------------
000139AC                            Map_Seesaw_internal:
000139AC 0000                       		dc.w @sloping-Map_Seesaw_internal
000139AE 0000                       		dc.w @flat-Map_Seesaw_internal
000139B0 0000                       		dc.w @sloping-Map_Seesaw_internal
000139B2 0000                       		dc.w @flat-Map_Seesaw_internal
000139B4 07                         @sloping:	dc.b 7
000139B5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000139BA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000139BF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000139C4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000139C9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000139CE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000139D3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000139D8 04                         @flat:		dc.b 4
000139D9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000139DE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000139E3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000139E8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000139EE 00                         		even
000139EE 00                         		even
000139EE                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
000139EE                            ; ---------------------------------------------------------------------------
000139EE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000139EE                            ; ---------------------------------------------------------------------------
000139EE                            Map_SSawBall_internal:
000139EE 0000                       		dc.w @red-Map_SSawBall_internal
000139F0 0000                       		dc.w @silver-Map_SSawBall_internal
000139F2 01                         @red:		dc.b 1
000139F3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000139F8 01                         @silver:	dc.b 1
000139F9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000139FE                            		even
000139FE                            		even
000139FE                            		include	"_incObj\5F Bomb Enemy.asm"
000139FE                            ; ---------------------------------------------------------------------------
000139FE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000139FE                            ; ---------------------------------------------------------------------------
000139FE                            
000139FE                            Bomb:
000139FE 7000                       		moveq	#0,d0
00013A00 1028 0024                  		move.b	obRoutine(a0),d0
00013A04 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013A08 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013A0C                            ; ===========================================================================
00013A0C 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013A0E 0000                       		dc.w Bom_Action-Bom_Index
00013A10 0000                       		dc.w Bom_Display-Bom_Index
00013A12 0000                       		dc.w Bom_End-Bom_Index
00013A14                            
00013A14 =00000030                  bom_time:	equ $30		; time of fuse
00013A14 =00000034                  bom_origY:	equ $34		; original y-axis position
00013A14 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013A14                            ; ===========================================================================
00013A14                            
00013A14                            Bom_Main:	; Routine 0
00013A14 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A18 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013A20 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013A26 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A2C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013A32 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013A38 1028 0028                  		move.b	obSubtype(a0),d0
00013A3C 6700                       		beq.s	loc_11A3C
00013A3E 1140 0024                  		move.b	d0,obRoutine(a0)
00013A42 4E75                       		rts	
00013A44                            ; ===========================================================================
00013A44                            
00013A44                            loc_11A3C:
00013A44 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013A4A 0868 0000 0022             		bchg	#0,obStatus(a0)
00013A50                            
00013A50                            Bom_Action:	; Routine 2
00013A50 7000                       		moveq	#0,d0
00013A52 1028 0025                  		move.b	ob2ndRout(a0),d0
00013A56 323B 0000                  		move.w	@index(pc,d0.w),d1
00013A5A 4EBB 1000                  		jsr	@index(pc,d1.w)
00013A5E 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013A64 6100 8A92                  		bsr.w	AnimateSprite
00013A68 6000 DA78                  		bra.w	RememberState
00013A6C                            ; ===========================================================================
00013A6C 0000                       @index:		dc.w @walk-@index
00013A6E 0000                       		dc.w @wait-@index
00013A70 0000                       		dc.w @explode-@index
00013A72                            ; ===========================================================================
00013A72                            
00013A72                            @walk:
00013A72 6100 0000                  		bsr.w	@chksonic
00013A76 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013A7A 6A00                       		bpl.s	@noflip		; if time remains, branch
00013A7C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013A80 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013A86 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013A8C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013A92 0868 0000 0022             		bchg	#0,obStatus(a0)
00013A98 6700                       		beq.s	@noflip
00013A9A 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013A9E                            
00013A9E                            	@noflip:
00013A9E 4E75                       		rts	
00013AA0                            ; ===========================================================================
00013AA0                            
00013AA0                            @wait:
00013AA0 6100 0000                  		bsr.w	@chksonic
00013AA4 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013AA8 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013AAA 6100 B97E                  		bsr.w	SpeedToPos
00013AAE 4E75                       		rts	
00013AB0                            ; ===========================================================================
00013AB0                            
00013AB0                            	@stopwalking:
00013AB0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013AB4 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013ABA 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013ABE 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013AC4 4E75                       		rts	
00013AC6                            ; ===========================================================================
00013AC6                            
00013AC6                            @explode:
00013AC6 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013ACA 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013ACC 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013AD0 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013AD6                            
00013AD6                            	@noexplode:
00013AD6 4E75                       		rts	
00013AD8                            ; ===========================================================================
00013AD8                            
00013AD8                            @chksonic:
00013AD8 3038 D008                  		move.w	(v_player+obX).w,d0
00013ADC 9068 0008                  		sub.w	obX(a0),d0
00013AE0 6400                       		bcc.s	@isleft
00013AE2 4440                       		neg.w	d0
00013AE4                            
00013AE4                            	@isleft:
00013AE4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013AE8 6400                       		bcc.s	@outofrange	; if not, branch
00013AEA 3038 D00C                  		move.w	(v_player+obY).w,d0
00013AEE 9068 000C                  		sub.w	obY(a0),d0
00013AF2 6400                       		bcc.s	@isabove
00013AF4 4440                       		neg.w	d0
00013AF6                            
00013AF6                            	@isabove:
00013AF6 0C40 0060                  		cmpi.w	#$60,d0
00013AFA 6400                       		bcc.s	@outofrange
00013AFC 4A78 FE08                  		tst.w	(v_debuguse).w
00013B00 6600                       		bne.s	@outofrange
00013B02                            
00013B02 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013B08 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013B0E 4268 0010                  		clr.w	obVelX(a0)
00013B12 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013B18 6100 BED4                  		bsr.w	FindNextFreeObj
00013B1C 6600                       		bne.s	@outofrange
00013B1E 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013B22 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013B28 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013B2E 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013B34 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013B3A 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013B40 137C 0003 001C             		move.b	#3,obAnim(a1)
00013B46 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013B4C 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013B52 6700                       		beq.s	@normal		; if not, branch
00013B54 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013B58                            
00013B58                            	@normal:
00013B58 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013B5E 2348 003C                  		move.l	a0,bom_parent(a1)
00013B62                            
00013B62                            @outofrange:
00013B62 4E75                       		rts	
00013B64                            ; ===========================================================================
00013B64                            
00013B64                            Bom_Display:	; Routine 4
00013B64 6100                       		bsr.s	loc_11B70
00013B66 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013B6C 6100 898A                  		bsr.w	AnimateSprite
00013B70 6000 D970                  		bra.w	RememberState
00013B74                            ; ===========================================================================
00013B74                            
00013B74                            loc_11B70:
00013B74 5368 0030                  		subq.w	#1,bom_time(a0)
00013B78 6B00                       		bmi.s	loc_11B7C
00013B7A 6100 B8AE                  		bsr.w	SpeedToPos
00013B7E 4E75                       		rts	
00013B80                            ; ===========================================================================
00013B80                            
00013B80                            loc_11B7C:
00013B80 4268 0030                  		clr.w	bom_time(a0)
00013B84 4228 0024                  		clr.b	obRoutine(a0)
00013B88 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013B8E 7203                       		moveq	#3,d1
00013B90 2248                       		movea.l	a0,a1
00013B92 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013B98 6000                       		bra.s	@makeshrapnel
00013B9A                            ; ===========================================================================
00013B9A                            
00013B9A                            	@loop:
00013B9A 6100 BE52                  		bsr.w	FindNextFreeObj
00013B9E 6600                       		bne.s	@fail
00013BA0                            
00013BA0                            @makeshrapnel:
00013BA0 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013BA4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013BAA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013BB0 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013BB6 137C 0004 001C             		move.b	#4,obAnim(a1)
00013BBC 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013BC0 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013BC4 137C 0098 0020             		move.b	#$98,obColType(a1)
00013BCA 08E9 0007 0001             		bset	#7,obRender(a1)
00013BD0                            
00013BD0                            	@fail:
00013BD0 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013BD4                            
00013BD4 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013BDA                            
00013BDA                            Bom_End:	; Routine 6
00013BDA 6100 B84E                  		bsr.w	SpeedToPos
00013BDE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013BE4 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013BEA 6100 890C                  		bsr.w	AnimateSprite
00013BEE 4A28 0001                  		tst.b	obRender(a0)
00013BF2 6A00 B88A                  		bpl.w	DeleteObject
00013BF6 6000 B846                  		bra.w	DisplaySprite
00013BFA                            ; ===========================================================================
00013BFA FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013BFA FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013C0A                            		include	"_anim\Bomb Enemy.asm"
00013C0A                            ; ---------------------------------------------------------------------------
00013C0A                            ; Animation script - Bomb enemy
00013C0A                            ; ---------------------------------------------------------------------------
00013C0A 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00013C0C 0000                       		dc.w @walk-Ani_Bomb
00013C0E 0000                       		dc.w @activated-Ani_Bomb
00013C10 0000                       		dc.w @fuse-Ani_Bomb
00013C12 0000                       		dc.w @shrapnel-Ani_Bomb
00013C14 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
00013C18 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00013C1E 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00013C22 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00013C26 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
00013C2A                            		even
00013C2A                            		even
00013C2A                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00013C2A                            ; ---------------------------------------------------------------------------
00013C2A                            Map_Bomb_internal:
00013C2A 0000                       		dc.w @stand1-Map_Bomb_internal
00013C2C 0000                       		dc.w @stand2-Map_Bomb_internal
00013C2E 0000                       		dc.w @walk1-Map_Bomb_internal
00013C30 0000                       		dc.w @walk2-Map_Bomb_internal
00013C32 0000                       		dc.w @walk3-Map_Bomb_internal
00013C34 0000                       		dc.w @walk4-Map_Bomb_internal
00013C36 0000                       		dc.w @activate1-Map_Bomb_internal
00013C38 0000                       		dc.w @activate2-Map_Bomb_internal
00013C3A 0000                       		dc.w @fuse1-Map_Bomb_internal
00013C3C 0000                       		dc.w @fuse2-Map_Bomb_internal
00013C3E 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00013C40 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00013C42 03                         @stand1:	dc.b 3
00013C43 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00013C48 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C4D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C52 03                         @stand2:	dc.b 3
00013C53 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C58 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013C5D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C62 03                         @walk1:		dc.b 3
00013C63 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00013C68 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00013C6D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013C72 03                         @walk2:		dc.b 3
00013C73 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C78 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00013C7D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013C82 03                         @walk3:		dc.b 3
00013C83 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00013C88 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00013C8D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00013C92 03                         @walk4:		dc.b 3
00013C93 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013C98 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00013C9D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00013CA2 02                         @activate1:	dc.b 2
00013CA3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00013CA8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013CAD 02                         @activate2:	dc.b 2
00013CAE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00013CB3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00013CB8 01                         @fuse1:		dc.b 1
00013CB9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
00013CBE 01                         @fuse2:		dc.b 1
00013CBF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00013CC4 01                         @shrapnel1:	dc.b 1
00013CC5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
00013CCA 01                         @shrapnel2:	dc.b 1
00013CCB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00013CD0                            		even
00013CD0                            		even
00013CD0                            
00013CD0                            		include	"_incObj\60 Orbinaut.asm"
00013CD0                            ; ---------------------------------------------------------------------------
00013CD0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00013CD0                            ; ---------------------------------------------------------------------------
00013CD0                            
00013CD0                            Orbinaut:
00013CD0 7000                       		moveq	#0,d0
00013CD2 1028 0024                  		move.b	obRoutine(a0),d0
00013CD6 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
00013CDA 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00013CDE                            ; ===========================================================================
00013CDE 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00013CE0 0000                       		dc.w Orb_ChkSonic-Orb_Index
00013CE2 0000                       		dc.w Orb_Display-Orb_Index
00013CE4 0000                       		dc.w Orb_MoveOrb-Orb_Index
00013CE6 0000                       		dc.w Orb_ChkDel2-Orb_Index
00013CE8                            
00013CE8 =0000003C                  orb_parent:	equ $3C		; address of parent object
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            Orb_Main:	; Routine 0
00013CE8 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00013CF0 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
00013CF6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00013CFC 6700                       		beq.s	@isscrap
00013CFE 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00013D04                            
00013D04                            	@isscrap:
00013D04 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00013D0A 6600                       		bne.s	@notlabyrinth
00013D0C 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00013D12                            
00013D12                            	@notlabyrinth:
00013D12 0028 0004 0001             		ori.b	#4,obRender(a0)
00013D18 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013D1E 117C 000B 0020             		move.b	#$B,obColType(a0)
00013D24 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013D2A 7400                       		moveq	#0,d2
00013D2C 45E8 0037                  		lea	$37(a0),a2
00013D30 264A                       		movea.l	a2,a3
00013D32 524A                       		addq.w	#1,a2
00013D34 7203                       		moveq	#3,d1
00013D36                            
00013D36                            @makesatellites:
00013D36 6100 BCB6                  		bsr.w	FindNextFreeObj
00013D3A 6600                       		bne.s	@fail
00013D3C 5213                       		addq.b	#1,(a3)
00013D3E 3A09                       		move.w	a1,d5
00013D40 0445 D000                  		subi.w	#$D000,d5
00013D44 EC4D                       		lsr.w	#6,d5
00013D46 0245 007F                  		andi.w	#$7F,d5
00013D4A 14C5                       		move.b	d5,(a2)+
00013D4C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00013D4E 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00013D54 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00013D5A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00013D60 0029 0004 0001             		ori.b	#4,obRender(a1)
00013D66 337C 0200 0018             		move.w	#$200,obPriority(a1)
00013D6C 137C 0008 0014             		move.b	#8,obActWid(a1)
00013D72 137C 0003 001A             		move.b	#3,obFrame(a1)
00013D78 137C 0098 0020             		move.b	#$98,obColType(a1)
00013D7E 1342 0026                  		move.b	d2,obAngle(a1)
00013D82 0602 0040                  		addi.b	#$40,d2
00013D86 2348 003C                  		move.l	a0,orb_parent(a1)
00013D8A 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00013D8E                            
00013D8E                            	@fail:
00013D8E 7001                       		moveq	#1,d0
00013D90 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00013D96 6700                       		beq.s	@noflip		; if not, branch
00013D98 4440                       		neg.w	d0
00013D9A                            
00013D9A                            	@noflip:
00013D9A 1140 0036                  		move.b	d0,$36(a0)
00013D9E 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00013DA4 5428 0024                  		addq.b	#2,obRoutine(a0)
00013DA8 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00013DAE 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00013DB4 6700                       		beq.s	@noflip2	; if not, branch
00013DB6 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
00013DBA                            
00013DBA                            	@noflip2:
00013DBA 4E75                       		rts	
00013DBC                            ; ===========================================================================
00013DBC                            
00013DBC                            Orb_ChkSonic:	; Routine 2
00013DBC 3038 D008                  		move.w	(v_player+obX).w,d0
00013DC0 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
00013DC4 6400                       		bcc.s	@isright	; if yes, branch
00013DC6 4440                       		neg.w	d0
00013DC8                            
00013DC8                            	@isright:
00013DC8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00013DCC 6400                       		bcc.s	@animate	; if not, branch
00013DCE 3038 D00C                  		move.w	(v_player+obY).w,d0
00013DD2 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
00013DD6 6400                       		bcc.s	@isabove	; if yes, branch
00013DD8 4440                       		neg.w	d0
00013DDA                            
00013DDA                            	@isabove:
00013DDA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00013DDE 6400                       		bcc.s	@animate	; if not, branch
00013DE0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00013DE4 6600                       		bne.s	@animate	; if yes, branch
00013DE6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00013DEC                            
00013DEC                            @animate:
00013DEC 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00013DF2 6100 8704                  		bsr.w	AnimateSprite
00013DF6 6000 0000                  		bra.w	Orb_ChkDel
00013DFA                            ; ===========================================================================
00013DFA                            
00013DFA                            Orb_Display:	; Routine 4
00013DFA 6100 B62E                  		bsr.w	SpeedToPos
00013DFE                            
00013DFE                            Orb_ChkDel:
00013E1C 6000 B620                  		bra.w	DisplaySprite
00013E20                            
00013E20                            @chkgone:
00013E20 45F8 FC00                  		lea	(v_objstate).w,a2
00013E24 7000                       		moveq	#0,d0
00013E26 1028 0023                  		move.b	obRespawnNo(a0),d0
00013E2A 6700                       		beq.s	loc_11E34
00013E2C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00013E32                            
00013E32                            loc_11E34:
00013E32 45E8 0037                  		lea	$37(a0),a2
00013E36 7400                       		moveq	#0,d2
00013E38 141A                       		move.b	(a2)+,d2
00013E3A 5342                       		subq.w	#1,d2
00013E3C 6500                       		bcs.s	Orb_Delete
00013E3E                            
00013E3E                            loc_11E40:
00013E3E 7000                       		moveq	#0,d0
00013E40 101A                       		move.b	(a2)+,d0
00013E42 ED48                       		lsl.w	#6,d0
00013E44 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00013E4A 2240                       		movea.l	d0,a1
00013E4C 6100 B632                  		bsr.w	DeleteChild
00013E50 51CA FFEC                  		dbf	d2,loc_11E40
00013E54                            
00013E54                            Orb_Delete:
00013E54 6000 B628                  		bra.w	DeleteObject
00013E58                            ; ===========================================================================
00013E58                            
00013E58                            Orb_MoveOrb:	; Routine 6
00013E58 2268 003C                  		movea.l	orb_parent(a0),a1
00013E5C 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00013E60 6600 B61C                  		bne.w	DeleteObject	; if not, delete
00013E64 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00013E6A 6600                       		bne.s	@circle		; if not, branch
00013E6C 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00013E72 6600                       		bne.s	@circle		; if not, branch
00013E74 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E78 5329 0037                  		subq.b	#1,$37(a1)
00013E7C 6600                       		bne.s	@fire
00013E7E 5429 0024                  		addq.b	#2,obRoutine(a1)
00013E82                            
00013E82                            	@fire:
00013E82 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
00013E88 0829 0000 0022             		btst	#0,obStatus(a1)
00013E8E 6700                       		beq.s	@noflip
00013E90 4468 0010                  		neg.w	obVelX(a0)
00013E94                            
00013E94                            	@noflip:
00013E94 6000 B5A8                  		bra.w	DisplaySprite
00013E98                            ; ===========================================================================
00013E98                            
00013E98                            @circle:
00013E98 1028 0026                  		move.b	obAngle(a0),d0
00013E9C 4EB9 0000 3BA2             		jsr	(CalcSine).l
00013EA2 E841                       		asr.w	#4,d1
00013EA4 D269 0008                  		add.w	obX(a1),d1
00013EA8 3141 0008                  		move.w	d1,obX(a0)
00013EAC E840                       		asr.w	#4,d0
00013EAE D069 000C                  		add.w	obY(a1),d0
00013EB2 3140 000C                  		move.w	d0,obY(a0)
00013EB6 1029 0036                  		move.b	$36(a1),d0
00013EBA D128 0026                  		add.b	d0,obAngle(a0)
00013EBE 6000 B57E                  		bra.w	DisplaySprite
00013EC2                            ; ===========================================================================
00013EC2                            
00013EC2                            Orb_ChkDel2:	; Routine 8
00013EC2 6100 B566                  		bsr.w	SpeedToPos
00013EC6 4A28 0001                  		tst.b	obRender(a0)
00013ECA 6A00 B5B2                  		bpl.w	DeleteObject
00013ECE 6000 B56E                  		bra.w	DisplaySprite
00013ECE 6000 B56E                  		bra.w	DisplaySprite
00013ED2                            		include	"_anim\Orbinaut.asm"
00013ED2                            ; ---------------------------------------------------------------------------
00013ED2                            ; Animation script - Orbinaut enemy
00013ED2                            ; ---------------------------------------------------------------------------
00013ED2 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00013ED4 0000                       		dc.w @angers-Ani_Orb
00013ED6 0F00 FF                    @normal:	dc.b $F, 0, afEnd
00013EDA 00                         		even
00013EDA 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00013EE0 00                         		even
00013EE0 00                         		even
00013EE0                            Map_Orb:	include	"_maps\Orbinaut.asm"
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            Map_Orb_internal:
00013EE0 0000                       		dc.w @normal-Map_Orb_internal
00013EE2 0000                       		dc.w @medium-Map_Orb_internal
00013EE4 0000                       		dc.w @angry-Map_Orb_internal
00013EE6 0000                       		dc.w @spikeball-Map_Orb_internal
00013EE8 01                         @normal:	dc.b 1
00013EE9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013EEE 01                         @medium:	dc.b 1
00013EEF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013EF4 01                         @angry:		dc.b 1
00013EF5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00013EFA 01                         @spikeball:	dc.b 1
00013EFB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013F00                            		even
00013F00                            		even
00013F00                            
00013F00                            		include	"_incObj\16 Harpoon.asm"
00013F00                            ; ---------------------------------------------------------------------------
00013F00                            ; Object 16 - harpoon (LZ)
00013F00                            ; ---------------------------------------------------------------------------
00013F00                            
00013F00                            Harpoon:
00013F00 7000                       		moveq	#0,d0
00013F02 1028 0024                  		move.b	obRoutine(a0),d0
00013F06 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
00013F0A 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00013F0E                            ; ===========================================================================
00013F0E 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00013F10 0000                       		dc.w Harp_Move-Harp_Index
00013F12 0000                       		dc.w Harp_Wait-Harp_Index
00013F14                            
00013F14 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00013F14                            ; ===========================================================================
00013F14                            
00013F14                            Harp_Main:	; Routine 0
00013F14 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F18 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00013F20 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00013F26 0028 0004 0001             		ori.b	#4,obRender(a0)
00013F2C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013F32 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
00013F38 117C 0014 0014             		move.b	#$14,obActWid(a0)
00013F3E 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00013F44                            
00013F44                            Harp_Move:	; Routine 2
00013F44 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00013F4A 6100 85AC                  		bsr.w	AnimateSprite
00013F4E 7000                       		moveq	#0,d0
00013F50 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00013F54 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00013F5A 6000 D586                  		bra.w	RememberState
00013F5E                            
00013F5E                            	@types:
00013F5E 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013F64                            		even
00013F64                            
00013F64                            Harp_Wait:	; Routine 4
00013F64 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
00013F68 6A00                       		bpl.s	@chkdel		; branch if time remains
00013F6A 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00013F70 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00013F74 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00013F7A                            
00013F7A                            	@chkdel:
00013F7A 6000 D566                  		bra.w	RememberState
00013F7A 6000 D566                  		bra.w	RememberState
00013F7E                            		include	"_anim\Harpoon.asm"
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            ; Animation script - harpoon (LZ)
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00013F80 0000                       		dc.w @h_retracting-Ani_Harp
00013F82 0000                       		dc.w @v_extending-Ani_Harp
00013F84 0000                       		dc.w @v_retracting-Ani_Harp
00013F86 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00013F8A 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00013F8E 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00013F92 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00013F96                            		even
00013F96                            		even
00013F96                            Map_Harp:	include	"_maps\Harpoon.asm"
00013F96                            ; --------------------------------------------------------------------------------
00013F96                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013F96                            ; --------------------------------------------------------------------------------
00013F96                            
00013F96                            SME_JPFHb:	
00013F96 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
00013F9A 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
00013F9E 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
00013FA2 01                         SME_JPFHb_C:	dc.b 1	
00013FA3 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
00013FA8 01                         SME_JPFHb_12:	dc.b 1	
00013FA9 FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
00013FAE 02                         SME_JPFHb_18:	dc.b 2	
00013FAF FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
00013FB4 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
00013FB9 01                         SME_JPFHb_23:	dc.b 1	
00013FBA F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
00013FBF 01                         SME_JPFHb_29:	dc.b 1	
00013FC0 E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
00013FC5 02                         SME_JPFHb_2F:	dc.b 2	
00013FC6 D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
00013FCB F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
00013FD0                            		even
00013FD0                            		even
00013FD0                            		include	"_incObj\61 LZ Blocks.asm"
00013FD0                            ; ---------------------------------------------------------------------------
00013FD0                            ; Object 61 - blocks (LZ)
00013FD0                            ; ---------------------------------------------------------------------------
00013FD0                            
00013FD0                            LabyrinthBlock:
00013FD0 7000                       		moveq	#0,d0
00013FD2 1028 0024                  		move.b	obRoutine(a0),d0
00013FD6 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
00013FDA 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00013FDE                            ; ===========================================================================
00013FDE 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00013FE0 0000                       		dc.w LBlk_Action-LBlk_Index
00013FE2                            
00013FE2 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00013FE4 200C                       		dc.b $20, $C
00013FE6 1010                       		dc.b $10, $10
00013FE8 1010                       		dc.b $10, $10
00013FEA                            
00013FEA =00000016                  lblk_height:	equ $16		; block height
00013FEA =00000034                  lblk_origX:	equ $34		; original x-axis position
00013FEA =00000030                  lblk_origY:	equ $30		; original y-axis position
00013FEA =00000036                  lblk_time:	equ $36		; time delay for block movement
00013FEA =00000038                  lblk_untouched:	equ $38		; flag block as untouched
00013FEA                            ; ===========================================================================
00013FEA                            
00013FEA                            LBlk_Main:	; Routine 0
00013FEA 5428 0024                  		addq.b	#2,obRoutine(a0)
00013FEE 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
00013FF6 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00013FFC 117C 0004 0001             		move.b	#4,obRender(a0)
00014002 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014008 7000                       		moveq	#0,d0
0001400A 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001400E E648                       		lsr.w	#3,d0		; read only the 1st digit
00014010 0240 000E                  		andi.w	#$E,d0
00014014 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
00014018 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001401C 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014020 E248                       		lsr.w	#1,d0
00014022 1140 001A                  		move.b	d0,obFrame(a0)
00014026 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001402C 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014032 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014036 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001403A 6700                       		beq.s	LBlk_Action	; branch if 0
0001403C 0C00 0007                  		cmpi.b	#7,d0
00014040 6700                       		beq.s	LBlk_Action	; branch if 7
00014042 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
00014048                            
00014048                            LBlk_Action:	; Routine 2
00014048 3F28 0008                  		move.w	obX(a0),-(sp)
0001404C 7000                       		moveq	#0,d0
0001404E 1028 0028                  		move.b	obSubtype(a0),d0
00014052 0240 000F                  		andi.w	#$F,d0
00014056 D040                       		add.w	d0,d0
00014058 323B 0000                  		move.w	@index(pc,d0.w),d1
0001405C 4EBB 1000                  		jsr	@index(pc,d1.w)
00014060 381F                       		move.w	(sp)+,d4
00014062 4A28 0001                  		tst.b	obRender(a0)
00014066 6A00                       		bpl.s	@chkdel
00014068 7200                       		moveq	#0,d1
0001406A 1228 0014                  		move.b	obActWid(a0),d1
0001406E 0641 000B                  		addi.w	#$B,d1
00014072 7400                       		moveq	#0,d2
00014074 1428 0016                  		move.b	lblk_height(a0),d2
00014078 3602                       		move.w	d2,d3
0001407A 5243                       		addq.w	#1,d3
0001407C 6100 D8FC                  		bsr.w	SolidObject
00014080 1144 003F                  		move.b	d4,$3F(a0)
00014084 6100 0000                  		bsr.w	loc_12180
00014088                            
00014088                            @chkdel:
000140A6 6000 B396                  		bra.w	DisplaySprite
000140AA                            ; ===========================================================================
000140AA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000140AE 0000 0000                  		dc.w @type02-@index, @type03-@index
000140B2 0000 0000                  		dc.w @type04-@index, @type05-@index
000140B6 0000 0000                  		dc.w @type06-@index, @type07-@index
000140BA                            ; ===========================================================================
000140BA                            
000140BA                            @type00:
000140BA 4E75                       		rts	
000140BC                            ; ===========================================================================
000140BC                            
000140BC                            @type01:
000140BC                            @type03:
000140BC 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000140C0 6600                       		bne.s	@wait01		; if yes, branch
000140C2 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000140C8 6700                       		beq.s	@donothing01	; if not, branch
000140CA 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000140D0                            
000140D0                            	@donothing01:
000140D0 4E75                       		rts	
000140D2                            ; ===========================================================================
000140D2                            
000140D2                            	@wait01:
000140D2 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000140D6 66F8                       		bne.s	@donothing01	; if time remains, branch
000140D8 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000140DC 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000140E0 4E75                       		rts	
000140E2                            ; ===========================================================================
000140E2                            
000140E2                            @type02:
000140E2                            @type06:
000140E2 6100 B346                  		bsr.w	SpeedToPos
000140E6 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000140EA 6100 0000                  		bsr.w	ObjFloorDist
000140EE 4A41                       		tst.w	d1		; has block hit the floor?
000140F0 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000140F4 5241                       		addq.w	#1,d1
000140F6 D368 000C                  		add.w	d1,obY(a0)
000140FA 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000140FE 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014102                            
00014102                            	@nofloor02:
00014102 4E75                       		rts	
00014104                            ; ===========================================================================
00014104                            
00014104                            @type04:
00014104 6100 B324                  		bsr.w	SpeedToPos
00014108 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001410C 6100 0000                  		bsr.w	ObjHitCeiling
00014110 4A41                       		tst.w	d1		; has block hit the ceiling?
00014112 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014116 9368 000C                  		sub.w	d1,obY(a0)
0001411A 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
0001411E 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014122                            
00014122                            	@noceiling04:
00014122 4E75                       		rts	
00014124                            ; ===========================================================================
00014124                            
00014124                            @type05:
00014124 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001412A 6600                       		bne.s	@notouch05	; if not, branch
0001412C 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014130 4228 0038                  		clr.b	lblk_untouched(a0)
00014134                            
00014134                            	@notouch05:
00014134 4E75                       		rts	
00014136                            ; ===========================================================================
00014136                            
00014136                            @type07:
00014136 3038 F646                  		move.w	(v_waterpos1).w,d0
0001413A 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
0001413E 6700                       		beq.s	@stop07		; if yes, branch
00014140 6400                       		bcc.s	@fall07		; branch if block is above water
00014142 0C40 FFFE                  		cmpi.w	#-2,d0
00014146 6C00                       		bge.s	@loc_1214E
00014148 70FE                       		moveq	#-2,d0
0001414A                            
0001414A                            	@loc_1214E:
0001414A D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
0001414E 6100 0000                  		bsr.w	ObjHitCeiling
00014152 4A41                       		tst.w	d1		; has block hit the ceiling?
00014154 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
00014158 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001415C                            
0001415C                            	@noceiling07:
0001415C 4E75                       		rts	
0001415E                            ; ===========================================================================
0001415E                            
0001415E                            @fall07:
0001415E 0C40 0002                  		cmpi.w	#2,d0
00014162 6F00                       		ble.s	@loc_1216A
00014164 7002                       		moveq	#2,d0
00014166                            
00014166                            	@loc_1216A:
00014166 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001416A 6100 0000                  		bsr.w	ObjFloorDist
0001416E 4A41                       		tst.w	d1
00014170 6A00 0000                  		bpl.w	@stop07
00014174 5241                       		addq.w	#1,d1
00014176 D368 000C                  		add.w	d1,obY(a0)
0001417A                            
0001417A                            	@stop07:
0001417A 4E75                       		rts	
0001417C                            ; ===========================================================================
0001417C                            
0001417C                            loc_12180:
0001417C 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014180 6700                       		beq.s	locret_121C0	; if yes, branch
00014182 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
00014188 6600                       		bne.s	loc_1219A	; if yes, branch
0001418A 4A28 003E                  		tst.b	$3E(a0)
0001418E 6700                       		beq.s	locret_121C0
00014190 5928 003E                  		subq.b	#4,$3E(a0)
00014194 6000                       		bra.s	loc_121A6
00014196                            ; ===========================================================================
00014196                            
00014196                            loc_1219A:
00014196 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001419C 6700                       		beq.s	locret_121C0
0001419E 5828 003E                  		addq.b	#4,$3E(a0)
000141A2                            
000141A2                            loc_121A6:
000141A2 1028 003E                  		move.b	$3E(a0),d0
000141A6 4EB9 0000 3BA2             		jsr	(CalcSine).l
000141AC 323C 0400                  		move.w	#$400,d1
000141B0 C1C1                       		muls.w	d1,d0
000141B2 4840                       		swap	d0
000141B4 D068 0030                  		add.w	lblk_origY(a0),d0
000141B8 3140 000C                  		move.w	d0,obY(a0)
000141BC                            
000141BC                            locret_121C0:
000141BC 4E75                       		rts	
000141BC 4E75                       		rts	
000141BE                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000141BE                            Map_6865:
000141BE 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000141C0 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000141C2 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000141C4 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000141C6 01                         Map_6865_8: 	dc.b $1
000141C7 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000141CC 02                         Map_6865_E: 	dc.b $2
000141CD F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000141D2 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000141D7 01                         Map_6865_19: 	dc.b $1
000141D8 F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000141DD 01                         Map_6865_1F: 	dc.b $1
000141DE F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000141E4 00                         	even
000141E4 00                         	even
000141E4                            		include	"_incObj\62 Gargoyle.asm"
000141E4                            ; ---------------------------------------------------------------------------
000141E4                            ; Object 62 - gargoyle head (LZ)
000141E4                            ; ---------------------------------------------------------------------------
000141E4                            
000141E4                            Gargoyle:
000141E4 7000                       		moveq	#0,d0
000141E6 1028 0024                  		move.b	obRoutine(a0),d0
000141EA 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000141EE 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000141F2 6000 D2EE                  		bra.w	RememberState
000141F6                            ; ===========================================================================
000141F6 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000141F8 0000                       		dc.w Gar_MakeFire-Gar_Index
000141FA 0000                       		dc.w Gar_FireBall-Gar_Index
000141FC 0000                       		dc.w Gar_AniFire-Gar_Index
000141FE                            
000141FE 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014206                            ; ===========================================================================
00014206                            
00014206                            Gar_Main:	; Routine 0
00014206 5428 0024                  		addq.b	#2,obRoutine(a0)
0001420A 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014212 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
00014218 0028 0004 0001             		ori.b	#4,obRender(a0)
0001421E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014224 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001422A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001422E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014232 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
00014238 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001423E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014244                            
00014244                            Gar_MakeFire:	; Routine 2
00014244 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
00014248 6600                       		bne.s	@nofire		; if time remains, branch
0001424A                            
0001424A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014250 6100 B57A                  		bsr.w	ChkObjectVisible
00014254 6600                       		bne.s	@nofire
00014256 6100 B780                  		bsr.w	FindFreeObj
0001425A 6600                       		bne.s	@nofire
0001425C 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014260 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014264 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001426A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014270 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014276 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001427C                            
0001427C                            	@nofire:
0001427C 4E75                       		rts	
0001427E                            ; ===========================================================================
0001427E                            
0001427E                            Gar_FireBall:	; Routine 4
0001427E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014282 117C 0008 0016             		move.b	#8,obHeight(a0)
00014288 117C 0008 0017             		move.b	#8,obWidth(a0)
0001428E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014296 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001429C 0028 0004 0001             		ori.b	#4,obRender(a0)
000142A2 317C 0200 0018             		move.w	#$200,obPriority(a0)
000142A8 117C 0098 0020             		move.b	#$98,obColType(a0)
000142AE 117C 0008 0014             		move.b	#8,obActWid(a0)
000142B4 117C 0002 001A             		move.b	#2,obFrame(a0)
000142BA 5068 000C                  		addq.w	#8,obY(a0)
000142BE 317C 0200 0010             		move.w	#$200,obVelX(a0)
000142C4 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000142CA 6600                       		bne.s	@noflip		; if not, branch
000142CC 4468 0010                  		neg.w	obVelX(a0)
000142D0                            
000142D0                            	@noflip:
000142DA                            
000142DA                            Gar_AniFire:	; Routine 6
000142DA 1038 FE05                  		move.b	(v_framebyte).w,d0
000142DE 0200 0007                  		andi.b	#7,d0
000142E2 6600                       		bne.s	@nochg
000142E4 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000142EA                            
000142EA                            	@nochg:
000142EA 6100 B13E                  		bsr.w	SpeedToPos
000142EE 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000142F4 6600                       		bne.s	@isright	; if not, branch
000142F6 76F8                       		moveq	#-8,d3
000142F8 6100 0000                  		bsr.w	ObjHitWallLeft
000142FC 4A41                       		tst.w	d1
000142FE 6B00 B17E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014302 4E75                       		rts	
00014304                            
00014304                            	@isright:
00014304 7608                       		moveq	#8,d3
00014306 6100 0000                  		bsr.w	ObjHitWallRight
0001430A 4A41                       		tst.w	d1
0001430C 6B00 B170                  		bmi.w	DeleteObject
00014310 4E75                       		rts	
00014310 4E75                       		rts	
00014312                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014312                            ; ---------------------------------------------------------------------------
00014312                            ; Sprite mappings - gargoyle head (LZ)
00014312                            ; ---------------------------------------------------------------------------
00014312                            Map_Gar_internal:
00014312 0000                       		dc.w @head-Map_Gar_internal
00014314 0000                       		dc.w @head-Map_Gar_internal
00014316 0000                       		dc.w @fireball1-Map_Gar_internal
00014318 0000                       		dc.w @fireball2-Map_Gar_internal
0001431A 03                         @head:		dc.b 3
0001431B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014320 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014325 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001432A 01                         @fireball1:	dc.b 1
0001432B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014330 01                         @fireball2:	dc.b 1
00014331 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014336                            		even
00014336                            		even
00014336                            		include	"_incObj\63 LZ Conveyor.asm"
00014336                            ; ---------------------------------------------------------------------------
00014336                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014336                            ; ---------------------------------------------------------------------------
00014336                            
00014336                            LabyrinthConvey:
00014336 7000                       		moveq	#0,d0
00014338 1028 0024                  		move.b	obRoutine(a0),d0
0001433C 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014340 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014360                            
00014360                            LCon_Display:
00014360 6000 B0DC                  		bra.w	DisplaySprite
00014364                            ; ===========================================================================
00014364                            
00014364                            loc_1236A:
00014364 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001436A 6600                       		bne.s	loc_12378
0001436C 0C40 FF80                  		cmpi.w	#-$80,d0
00014370 64EE                       		bcc.s	LCon_Display
00014372                            
00014372                            loc_12378:
00014372 1028 002F                  		move.b	$2F(a0),d0
00014376 6A00 B106                  		bpl.w	DeleteObject
0001437A 0240 007F                  		andi.w	#$7F,d0
0001437E 45F8 F7C1                  		lea	(v_obj63).w,a2
00014382 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00014388 6000 B0F4                  		bra.w	DeleteObject
0001438C                            ; ===========================================================================
0001438C 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
0001438E 0000                       		dc.w loc_124B2-LCon_Index
00014390 0000                       		dc.w loc_124C2-LCon_Index
00014392 0000                       		dc.w loc_124DE-LCon_Index
00014394                            ; ===========================================================================
00014394                            
00014394                            LCon_Main:	; Routine 0
00014394 1028 0028                  		move.b	obSubtype(a0),d0
00014398 6B00 0000                  		bmi.w	loc_12460
0001439C 5428 0024                  		addq.b	#2,obRoutine(a0)
000143A0 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000143A8 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000143AE 0028 0004 0001             		ori.b	#4,obRender(a0)
000143B4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000143BA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000143C0 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000143C6 6600                       		bne.s	loc_123E2
000143C8 5828 0024                  		addq.b	#4,obRoutine(a0)
000143CC 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000143D2 317C 0080 0018             		move.w	#$80,obPriority(a0)
000143D8 6000 0000                  		bra.w	loc_124DE
000143DC                            ; ===========================================================================
000143DC                            
000143DC                            loc_123E2:
000143DC 117C 0004 001A             		move.b	#4,obFrame(a0)
000143E2 7000                       		moveq	#0,d0
000143E4 1028 0028                  		move.b	obSubtype(a0),d0
000143E8 3200                       		move.w	d0,d1
000143EA E648                       		lsr.w	#3,d0
000143EC 0240 001E                  		andi.w	#$1E,d0
000143F0 45FA 0000                  		lea	LCon_Data(pc),a2
000143F4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000143F8 315A 0038                  		move.w	(a2)+,$38(a0)
000143FC 315A 0030                  		move.w	(a2)+,$30(a0)
00014400 214A 003C                  		move.l	a2,$3C(a0)
00014404 0241 000F                  		andi.w	#$F,d1
00014408 E549                       		lsl.w	#2,d1
0001440A 1141 0038                  		move.b	d1,$38(a0)
0001440E 117C 0004 003A             		move.b	#4,$3A(a0)
00014414 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014418 6700                       		beq.s	loc_1244C
0001441A 117C 0001 003B             		move.b	#1,$3B(a0)
00014420 4428 003A                  		neg.b	$3A(a0)
00014424 7200                       		moveq	#0,d1
00014426 1228 0038                  		move.b	$38(a0),d1
0001442A D228 003A                  		add.b	$3A(a0),d1
0001442E B228 0039                  		cmp.b	$39(a0),d1
00014432 6500                       		bcs.s	loc_12448
00014434 1001                       		move.b	d1,d0
00014436 7200                       		moveq	#0,d1
00014438 4A00                       		tst.b	d0
0001443A 6A00                       		bpl.s	loc_12448
0001443C 1228 0039                  		move.b	$39(a0),d1
00014440 5901                       		subq.b	#4,d1
00014442                            
00014442                            loc_12448:
00014442 1141 0038                  		move.b	d1,$38(a0)
00014446                            
00014446                            loc_1244C:
00014446 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001444C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014452 6100 0000                  		bsr.w	LCon_ChangeDir
00014456 6000 0000                  		bra.w	loc_124B2
0001445A                            ; ===========================================================================
0001445A                            
0001445A                            loc_12460:
0001445A 1140 002F                  		move.b	d0,$2F(a0)
0001445E 0240 007F                  		andi.w	#$7F,d0
00014462 45F8 F7C1                  		lea	(v_obj63).w,a2
00014466 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001446C 6600 B010                  		bne.w	DeleteObject
00014470 D040                       		add.w	d0,d0
00014472 0240 001E                  		andi.w	#$1E,d0
00014476 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001447A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014480 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014484 321A                       		move.w	(a2)+,d1
00014486 2248                       		movea.l	a0,a1
00014488 6000                       		bra.s	LCon_MakePtfms
0001448A                            ; ===========================================================================
0001448A                            
0001448A                            LCon_Loop:
0001448A 6100 B54C                  		bsr.w	FindFreeObj
0001448E 6600                       		bne.s	loc_124AA
00014490                            
00014490                            LCon_MakePtfms:
00014490 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014494 335A 0008                  		move.w	(a2)+,obX(a1)
00014498 335A 000C                  		move.w	(a2)+,obY(a1)
0001449C 301A                       		move.w	(a2)+,d0
0001449E 1340 0028                  		move.b	d0,obSubtype(a1)
000144A2                            
000144A2                            loc_124AA:
000144A2 51C9 FFE6                  		dbf	d1,LCon_Loop
000144A6                            
000144A6 588F                       		addq.l	#4,sp
000144A8 4E75                       		rts	
000144AA                            ; ===========================================================================
000144AA                            
000144AA                            loc_124B2:	; Routine 2
000144AA 7200                       		moveq	#0,d1
000144AC 1228 0014                  		move.b	obActWid(a0),d1
000144B0 4EB9 0000 8AFC             		jsr	(PlatformObject).l
000144B6 6000 0000                  		bra.w	sub_12502
000144BA                            ; ===========================================================================
000144BA                            
000144BA                            loc_124C2:	; Routine 4
000144BA 7200                       		moveq	#0,d1
000144BC 1228 0014                  		move.b	obActWid(a0),d1
000144C0 4EB9 0000 8C70             		jsr	(ExitPlatform).l
000144C6 3F28 0008                  		move.w	obX(a0),-(sp)
000144CA 6100 0000                  		bsr.w	sub_12502
000144CE 341F                       		move.w	(sp)+,d2
000144D0 4EF9 0000 91DA             		jmp	(MvSonicOnPtfm2).l
000144D6                            ; ===========================================================================
000144D6                            
000144D6                            loc_124DE:	; Routine 6
000144D6 3038 FE04                  		move.w	(v_framecount).w,d0
000144DA 0240 0003                  		andi.w	#3,d0
000144DE 6600                       		bne.s	loc_124FC
000144E0 7201                       		moveq	#1,d1
000144E2 4A38 F7C0                  		tst.b	(f_conveyrev).w
000144E6 6700                       		beq.s	loc_124F2
000144E8 4401                       		neg.b	d1
000144EA                            
000144EA                            loc_124F2:
000144EA D328 001A                  		add.b	d1,obFrame(a0)
000144EE 0228 0003 001A             		andi.b	#3,obFrame(a0)
000144F4                            
000144F4                            loc_124FC:
000144F4 588F                       		addq.l	#4,sp
000144F6 6000 CFEA                  		bra.w	RememberState
000144FA                            
000144FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144FA                            
000144FA                            
000144FA                            sub_12502:
000144FA 4A38 F7EE                  		tst.b	(f_switch+$E).w
000144FE 6700                       		beq.s	loc_12520
00014500 4A28 003B                  		tst.b	$3B(a0)
00014504 6600                       		bne.s	loc_12520
00014506 117C 0001 003B             		move.b	#1,$3B(a0)
0001450C 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014512 4428 003A                  		neg.b	$3A(a0)
00014516 6000                       		bra.s	loc_12534
00014518                            ; ===========================================================================
00014518                            
00014518                            loc_12520:
00014518 3028 0008                  		move.w	obX(a0),d0
0001451C B068 0034                  		cmp.w	$34(a0),d0
00014520 6600                       		bne.s	loc_1256A
00014522 3028 000C                  		move.w	obY(a0),d0
00014526 B068 0036                  		cmp.w	$36(a0),d0
0001452A 6600                       		bne.s	loc_1256A
0001452C                            
0001452C                            loc_12534:
0001452C 7200                       		moveq	#0,d1
0001452E 1228 0038                  		move.b	$38(a0),d1
00014532 D228 003A                  		add.b	$3A(a0),d1
00014536 B228 0039                  		cmp.b	$39(a0),d1
0001453A 6500                       		bcs.s	loc_12552
0001453C 1001                       		move.b	d1,d0
0001453E 7200                       		moveq	#0,d1
00014540 4A00                       		tst.b	d0
00014542 6A00                       		bpl.s	loc_12552
00014544 1228 0039                  		move.b	$39(a0),d1
00014548 5901                       		subq.b	#4,d1
0001454A                            
0001454A                            loc_12552:
0001454A 1141 0038                  		move.b	d1,$38(a0)
0001454E 2268 003C                  		movea.l	$3C(a0),a1
00014552 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014558 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001455E 6100 0000                  		bsr.w	LCon_ChangeDir
00014562                            
00014562                            loc_1256A:
00014562 6100 AEC6                  		bsr.w	SpeedToPos
00014566 4E75                       		rts	
00014568                            ; End of function sub_12502
00014568                            
00014568                            
00014568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014568                            
00014568                            
00014568                            LCon_ChangeDir:
00014568 7000                       		moveq	#0,d0
0001456A 343C FF00                  		move.w	#-$100,d2
0001456E 3028 0008                  		move.w	obX(a0),d0
00014572 9068 0034                  		sub.w	$34(a0),d0
00014576 6400                       		bcc.s	loc_12584
00014578 4440                       		neg.w	d0
0001457A 4442                       		neg.w	d2
0001457C                            
0001457C                            loc_12584:
0001457C 7200                       		moveq	#0,d1
0001457E 363C FF00                  		move.w	#-$100,d3
00014582 3228 000C                  		move.w	obY(a0),d1
00014586 9268 0036                  		sub.w	$36(a0),d1
0001458A 6400                       		bcc.s	loc_12598
0001458C 4441                       		neg.w	d1
0001458E 4443                       		neg.w	d3
00014590                            
00014590                            loc_12598:
00014590 B240                       		cmp.w	d0,d1
00014592 6500                       		bcs.s	loc_125C2
00014594 3028 0008                  		move.w	obX(a0),d0
00014598 9068 0034                  		sub.w	$34(a0),d0
0001459C 6700                       		beq.s	loc_125AE
0001459E 48C0                       		ext.l	d0
000145A0 E180                       		asl.l	#8,d0
000145A2 81C1                       		divs.w	d1,d0
000145A4 4440                       		neg.w	d0
000145A6                            
000145A6                            loc_125AE:
000145A6 3140 0010                  		move.w	d0,obVelX(a0)
000145AA 3143 0012                  		move.w	d3,obVelY(a0)
000145AE 4840                       		swap	d0
000145B0 3140 000A                  		move.w	d0,obX+2(a0)
000145B4 4268 000E                  		clr.w	obY+2(a0)
000145B8 4E75                       		rts	
000145BA                            ; ===========================================================================
000145BA                            
000145BA                            loc_125C2:
000145BA 3228 000C                  		move.w	obY(a0),d1
000145BE 9268 0036                  		sub.w	$36(a0),d1
000145C2 6700                       		beq.s	loc_125D4
000145C4 48C1                       		ext.l	d1
000145C6 E181                       		asl.l	#8,d1
000145C8 83C0                       		divs.w	d0,d1
000145CA 4441                       		neg.w	d1
000145CC                            
000145CC                            loc_125D4:
000145CC 3141 0012                  		move.w	d1,obVelY(a0)
000145D0 3142 0010                  		move.w	d2,obVelX(a0)
000145D4 4841                       		swap	d1
000145D6 3141 000E                  		move.w	d1,obY+2(a0)
000145DA 4268 000A                  		clr.w	obX+2(a0)
000145DE 4E75                       		rts	
000145E0                            ; End of function LCon_ChangeDir
000145E0                            
000145E0                            ; ===========================================================================
000145E0 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000145E2 0000                       		dc.w word_12610-LCon_Data
000145E4 0000                       		dc.w word_12628-LCon_Data
000145E6 0000                       		dc.w word_1263C-LCon_Data
000145E8 0000                       		dc.w word_12650-LCon_Data
000145EA 0000                       		dc.w word_12668-LCon_Data
000145EC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000145FC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014608 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014618 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014620 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014634 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014648 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014660 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014660 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014674                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014674                            ; ---------------------------------------------------------------------------
00014674                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014674                            ; ---------------------------------------------------------------------------
00014674                            Map_LConv_internal:
00014674 0000                       		dc.w @wheel1-Map_LConv_internal
00014676 0000                       		dc.w @wheel2-Map_LConv_internal
00014678 0000                       		dc.w @wheel3-Map_LConv_internal
0001467A 0000                       		dc.w @wheel4-Map_LConv_internal
0001467C 0000                       		dc.w @platform-Map_LConv_internal
0001467E 01                         @wheel1:	dc.b 1
0001467F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014684 01                         @wheel2:	dc.b 1
00014685 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001468A 01                         @wheel3:	dc.b 1
0001468B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014690 01                         @wheel4:	dc.b 1
00014691 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014696 01                         @platform:	dc.b 1
00014697 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001469C                            		even
0001469C                            		even
0001469C                            		include	"_incObj\64 Bubbles.asm"
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            ; Object 64 - bubbles (LZ)
0001469C                            ; ---------------------------------------------------------------------------
0001469C                            
0001469C                            Bubble:
0001469C 7000                       		moveq	#0,d0
0001469E 1028 0024                  		move.b	obRoutine(a0),d0
000146A2 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
000146A6 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
000146AA                            ; ===========================================================================
000146AA 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
000146AC 0000                       		dc.w Bub_Animate-Bub_Index
000146AE 0000                       		dc.w Bub_ChkWater-Bub_Index
000146B0 0000                       		dc.w Bub_Display-Bub_Index
000146B2 0000                       		dc.w Bub_Delete-Bub_Index
000146B4 0000                       		dc.w Bub_BblMaker-Bub_Index
000146B6                            
000146B6 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
000146B6 =00000030                  bub_origX:	equ $30		; original x-axis position
000146B6 =00000032                  bub_time:	equ $32		; time until next bubble spawn
000146B6 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
000146B6                            ; ===========================================================================
000146B6                            
000146B6                            Bub_Main:	; Routine 0
000146B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000146BA 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
000146C2 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000146C8 117C 0084 0001             		move.b	#$84,obRender(a0)
000146CE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000146D4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000146DA 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000146DE 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
000146E0                            
000146E0 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
000146E4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000146E8 1140 0032                  		move.b	d0,bub_time(a0)
000146EC 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
000146F0 117C 0006 001C             		move.b	#6,obAnim(a0)
000146F6 6000 0000                  		bra.w	Bub_BblMaker
000146FA                            ; ===========================================================================
000146FA                            
000146FA                            @bubble:
000146FA 1140 001C                  		move.b	d0,obAnim(a0)
000146FE 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014704 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
0001470A 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00014710 1140 0026                  		move.b	d0,obAngle(a0)
00014714                            
00014714                            Bub_Animate:	; Routine 2
00014714 43F9 0000 0000             		lea	(Ani_Bub).l,a1
0001471A 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00014720 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014726 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014728                            
00014728 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
0001472E                            
0001472E                            Bub_ChkWater:	; Routine 4
0001472E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014732 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014736 6500                       		bcs.s	@wobble		; if yes, branch
00014738                            
00014738                            @burst:
00014738 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
0001473E 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014742 6000 0000                  		bra.w	Bub_Display
00014746                            ; ===========================================================================
00014746                            
00014746                            @wobble:
00014746 1028 0026                  		move.b	obAngle(a0),d0
0001474A 5228 0026                  		addq.b	#1,obAngle(a0)
0001474E 0240 007F                  		andi.w	#$7F,d0
00014752 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014758 1031 0000                  		move.b	(a1,d0.w),d0
0001475C 4880                       		ext.w	d0
0001475E D068 0030                  		add.w	bub_origX(a0),d0
00014762 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014766 4A28 002E                  		tst.b	bub_inhalable(a0)
0001476A 6700                       		beq.s	@display
0001476C 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014770 6700                       		beq.s	@display	; if not, branch
00014772                            
00014772 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014780 43F8 D000                  		lea	(v_player).w,a1
00014784 4269 0010                  		clr.w	obVelX(a1)
00014788 4269 0012                  		clr.w	obVelY(a1)
0001478C 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014790 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014796 337C 0023 003E             		move.w	#$23,$3E(a1)
0001479C 137C 0000 003C             		move.b	#0,$3C(a1)
000147A2 08A9 0005 0022             		bclr	#5,obStatus(a1)
000147A8 08A9 0004 0022             		bclr	#4,obStatus(a1)
000147AE 0829 0002 0022             		btst	#2,obStatus(a1)
000147B4 6700 FF82                  		beq.w	@burst
000147B8 08A9 0002 0022             		bclr	#2,obStatus(a1)
000147BE 137C 0013 0016             		move.b	#$13,obHeight(a1)
000147C4 137C 0009 0017             		move.b	#9,obWidth(a1)
000147CA 5B69 000C                  		subq.w	#5,obY(a1)
000147CE 6000 FF68                  		bra.w	@burst
000147D2                            ; ===========================================================================
000147D2                            
000147D2                            @display:
000147D2 6100 AC56                  		bsr.w	SpeedToPos
000147D6 4A28 0001                  		tst.b	obRender(a0)
000147DA 6A00                       		bpl.s	@delete
000147DC 4EF9 0000 F43E             		jmp	(DisplaySprite).l
000147E2                            
000147E2                            	@delete:
000147E2 4EF9 0000 F47E             		jmp	(DeleteObject).l
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Bub_Display:	; Routine 6
000147E8 43F9 0000 0000             		lea	(Ani_Bub).l,a1
000147EE 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
000147F4 4A28 0001                  		tst.b	obRender(a0)
000147F8 6A00                       		bpl.s	@delete
000147FA 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00014800                            
00014800                            	@delete:
00014800 4EF9 0000 F47E             		jmp	(DeleteObject).l
00014806                            ; ===========================================================================
00014806                            
00014806                            Bub_Delete:	; Routine 8
00014806 6000 AC76                  		bra.w	DeleteObject
0001480A                            ; ===========================================================================
0001480A                            
0001480A                            Bub_BblMaker:	; Routine $A
0001480A 4A68 0036                  		tst.w	$36(a0)
0001480E 6600                       		bne.s	@loc_12874
00014810 3038 F646                  		move.w	(v_waterpos1).w,d0
00014814 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014818 6400 0000                  		bcc.w	@chkdel		; if not, branch
0001481C 4A28 0001                  		tst.b	obRender(a0)
00014820 6A00 0000                  		bpl.w	@chkdel
00014824 5368 0038                  		subq.w	#1,$38(a0)
00014828 6A00 0000                  		bpl.w	@loc_12914
0001482C 317C 0001 0036             		move.w	#1,$36(a0)
00014832                            
00014832                            	@tryagain:
00014832 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00014838 3200                       		move.w	d0,d1
0001483A 0240 0007                  		andi.w	#7,d0
0001483E 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014842 64EE                       		bcc.s	@tryagain	; if yes, branch
00014844                            
00014844 1140 0034                  		move.b	d0,$34(a0)
00014848 0241 000C                  		andi.w	#$C,d1
0001484C 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014852 D2C1                       		adda.w	d1,a1
00014854 2149 003C                  		move.l	a1,$3C(a0)
00014858 5328 0032                  		subq.b	#1,bub_time(a0)
0001485C 6A00                       		bpl.s	@loc_12872
0001485E 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014864 08E8 0007 0036             		bset	#7,$36(a0)
0001486A                            
0001486A                            @loc_12872:
0001486A 6000                       		bra.s	@loc_1287C
0001486C                            ; ===========================================================================
0001486C                            
0001486C                            @loc_12874:
0001486C 5368 0038                  		subq.w	#1,$38(a0)
00014870 6A00 0000                  		bpl.w	@loc_12914
00014874                            
00014874                            @loc_1287C:
00014874 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001487A 0240 001F                  		andi.w	#$1F,d0
0001487E 3140 0038                  		move.w	d0,$38(a0)
00014882 6100 B154                  		bsr.w	FindFreeObj
00014886 6600                       		bne.s	@fail
00014888 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
0001488C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014892 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00014898 0240 000F                  		andi.w	#$F,d0
0001489C 5140                       		subq.w	#8,d0
0001489E D169 0008                  		add.w	d0,obX(a1)
000148A2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000148A8 7000                       		moveq	#0,d0
000148AA 1028 0034                  		move.b	$34(a0),d0
000148AE 2468 003C                  		movea.l	$3C(a0),a2
000148B2 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
000148B8 0828 0007 0036             		btst	#7,$36(a0)
000148BE 6700                       		beq.s	@fail
000148C0 4EB9 0000 3B7C             		jsr	(RandomNumber).l
000148C6 0240 0003                  		andi.w	#3,d0
000148CA 6600                       		bne.s	@loc_buh
000148CC 08E8 0006 0036             		bset	#6,$36(a0)
000148D2 6600                       		bne.s	@fail
000148D4 137C 0002 0028             		move.b	#2,obSubtype(a1)
000148DA                            
000148DA                            @loc_buh:
000148DA 4A28 0034                  		tst.b	$34(a0)
000148DE 6600                       		bne.s	@fail
000148E0 08E8 0006 0036             		bset	#6,$36(a0)
000148E6 6600                       		bne.s	@fail
000148E8 137C 0002 0028             		move.b	#2,obSubtype(a1)
000148EE                            
000148EE                            	@fail:
000148EE 5328 0034                  		subq.b	#1,$34(a0)
000148F2 6A00                       		bpl.s	@loc_12914
000148F4 4EB9 0000 3B7C             		jsr	(RandomNumber).l
000148FA 0240 007F                  		andi.w	#$7F,d0
000148FE 0640 0080                  		addi.w	#$80,d0
00014902 D168 0038                  		add.w	d0,$38(a0)
00014906 4268 0036                  		clr.w	$36(a0)
0001490A                            
0001490A                            @loc_12914:
0001490A 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014910 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00014916                            
00014916                            @chkdel:
00014934 3038 F646                  		move.w	(v_waterpos1).w,d0
00014938 B068 000C                  		cmp.w	obY(a0),d0
0001493C 6500 AB00                  		bcs.w	DisplaySprite
00014940 4E75                       		rts	
00014942                            ; ===========================================================================
00014942                            ; bubble production sequence
00014942                            
00014942                            ; 0 = small bubble, 1 =	large bubble
00014942                            
00014942 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014954                            
00014954                            ; ===========================================================================
00014954                            
00014954                            Bub_ChkSonic:
00014954 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014958 6B00                       		bmi.s	@loc_12998
0001495A 43F8 D000                  		lea	(v_player).w,a1
0001495E 3029 0008                  		move.w	obX(a1),d0
00014962 3228 0008                  		move.w	obX(a0),d1
00014966 0441 0010                  		subi.w	#$10,d1
0001496A B240                       		cmp.w	d0,d1
0001496C 6400                       		bcc.s	@loc_12998
0001496E 0641 0020                  		addi.w	#$20,d1
00014972 B240                       		cmp.w	d0,d1
00014974 6500                       		bcs.s	@loc_12998
00014976 3029 000C                  		move.w	obY(a1),d0
0001497A 3228 000C                  		move.w	obY(a0),d1
0001497E B240                       		cmp.w	d0,d1
00014980 6400                       		bcc.s	@loc_12998
00014982 0641 0010                  		addi.w	#$10,d1
00014986 B240                       		cmp.w	d0,d1
00014988 6500                       		bcs.s	@loc_12998
0001498A 7001                       		moveq	#1,d0
0001498C 4E75                       		rts	
0001498E                            ; ===========================================================================
0001498E                            
0001498E                            @loc_12998:
0001498E 7000                       		moveq	#0,d0
00014990 4E75                       		rts	
00014990 4E75                       		rts	
00014992                            		include	"_anim\Bubbles.asm"
00014992                            ; ---------------------------------------------------------------------------
00014992                            ; Animation script - bubbles (LZ)
00014992                            ; ---------------------------------------------------------------------------
00014992 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014994 0000                       		dc.w @medium-Ani_Bub
00014996 0000                       		dc.w @large-Ani_Bub
00014998 0000                       		dc.w @incroutine-Ani_Bub
0001499A 0000                       		dc.w @incroutine-Ani_Bub
0001499C 0000                       		dc.w @burst-Ani_Bub
0001499E 0000                       		dc.w @bubmaker-Ani_Bub
000149A0 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
000149A6 00                         		even
000149A6 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
000149AC 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
000149B4 00                         		even
000149B4 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
000149B6 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
000149BC 00                         		even
000149BC 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
000149C2 00                         		even
000149C2 00                         		even
000149C2                            Map_Bub:	include	"_maps\Bubbles.asm"
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            ; Sprite mappings - bubbles (LZ)
000149C2                            ; ---------------------------------------------------------------------------
000149C2                            Map_Bub_internal:
000149C2 0000                       		dc.w @bubble1-Map_Bub_internal
000149C4 0000                       		dc.w @bubble2-Map_Bub_internal
000149C6 0000                       		dc.w @bubble3-Map_Bub_internal
000149C8 0000                       		dc.w @bubble4-Map_Bub_internal
000149CA 0000                       		dc.w @bubble5-Map_Bub_internal
000149CC 0000                       		dc.w @bubble6-Map_Bub_internal
000149CE 0000                       		dc.w @bubblefull-Map_Bub_internal
000149D0 0000                       		dc.w @burst1-Map_Bub_internal
000149D2 0000                       		dc.w @burst2-Map_Bub_internal
000149D4 0000                       		dc.w @zero_sm-Map_Bub_internal
000149D6 0000                       		dc.w @five_sm-Map_Bub_internal
000149D8 0000                       		dc.w @three_sm-Map_Bub_internal
000149DA 0000                       		dc.w @one_sm-Map_Bub_internal
000149DC 0000                       		dc.w @zero-Map_Bub_internal
000149DE 0000                       		dc.w @five-Map_Bub_internal
000149E0 0000                       		dc.w @four-Map_Bub_internal
000149E2 0000                       		dc.w @three-Map_Bub_internal
000149E4 0000                       		dc.w @two-Map_Bub_internal
000149E6 0000                       		dc.w @one-Map_Bub_internal
000149E8 0000                       		dc.w @bubmaker1-Map_Bub_internal
000149EA 0000                       		dc.w @bubmaker2-Map_Bub_internal
000149EC 0000                       		dc.w @bubmaker3-Map_Bub_internal
000149EE 0000                       		dc.w @blank-Map_Bub_internal
000149F0 01                         @bubble1:	dc.b 1
000149F1 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
000149F6 01                         @bubble2:	dc.b 1
000149F7 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000149FC 01                         @bubble3:	dc.b 1
000149FD FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014A02 01                         @bubble4:	dc.b 1
00014A03 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014A08 01                         @bubble5:	dc.b 1
00014A09 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014A0E 01                         @bubble6:	dc.b 1
00014A0F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014A14 01                         @bubblefull:	dc.b 1
00014A15 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014A1A 04                         @burst1:	dc.b 4
00014A1B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014A20 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014A25 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014A2A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014A2F 04                         @burst2:	dc.b 4
00014A30 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014A35 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014A3A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014A3F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014A44 01                         @zero_sm:	dc.b 1
00014A45 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014A4A 01                         @five_sm:	dc.b 1
00014A4B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014A50 01                         @three_sm:	dc.b 1
00014A51 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014A56 01                         @one_sm:	dc.b 1
00014A57 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014A5C 01                         @zero:		dc.b 1
00014A5D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014A62 01                         @five:		dc.b 1
00014A63 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014A68 01                         @four:		dc.b 1
00014A69 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014A6E 01                         @three:		dc.b 1
00014A6F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014A74 01                         @two:		dc.b 1
00014A75 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014A7A 01                         @one:		dc.b 1
00014A7B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014A80 01                         @bubmaker1:	dc.b 1
00014A81 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014A86 01                         @bubmaker2:	dc.b 1
00014A87 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014A8C 01                         @bubmaker3:	dc.b 1
00014A8D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014A92 00                         @blank:		dc.b 0
00014A94 00                         		even
00014A94 00                         		even
00014A94                            		include	"_incObj\65 Waterfalls.asm"
00014A94                            ; ---------------------------------------------------------------------------
00014A94                            ; Object 65 - waterfalls (LZ)
00014A94                            ; ---------------------------------------------------------------------------
00014A94                            
00014A94                            Waterfall:
00014A94 7000                       		moveq	#0,d0
00014A96 1028 0024                  		move.b	obRoutine(a0),d0
00014A9A 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014A9E 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014AA2                            ; ===========================================================================
00014AA2 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014AA4 0000                       		dc.w WFall_Animate-WFall_Index
00014AA6 0000                       		dc.w WFall_ChkDel-WFall_Index
00014AA8 0000                       		dc.w WFall_OnWater-WFall_Index
00014AAA 0000                       		dc.w loc_12B36-WFall_Index
00014AAC                            ; ===========================================================================
00014AAC                            
00014AAC                            WFall_Main:	; Routine 0
00014AAC 5828 0024                  		addq.b	#4,obRoutine(a0)
00014AB0 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014AB8 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014ABE 0028 0004 0001             		ori.b	#4,obRender(a0)
00014AC4 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014ACA 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014AD0 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014AD4 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014AD6 08E8 0007 0002             		bset	#7,obGfx(a0)
00014ADC                            
00014ADC                            	@under80:
00014ADC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014AE0 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014AE4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014AE8 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014AEA                            
00014AEA 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014AEE 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014AF2 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014AF8 6700                       		beq.s	@not49		; if not, branch
00014AFA                            
00014AFA 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014B00                            
00014B00                            	@not49:
00014B00 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014B06 6700                       		beq.s	WFall_Animate	; if not, branch
00014B08 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014B0E                            
00014B0E                            WFall_Animate:	; Routine 2
00014B0E 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014B14 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00014B1A                            
00014B1A                            WFall_ChkDel:	; Routine 4
00014B1A 6000 C9C6                  		bra.w	RememberState
00014B1E                            ; ===========================================================================
00014B1E                            
00014B1E                            WFall_OnWater:	; Routine 6
00014B1E 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B22 0440 0010                  		subi.w	#$10,d0
00014B26 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014B2A 60E2                       		bra.s	WFall_Animate
00014B2C                            ; ===========================================================================
00014B2C                            
00014B2C                            loc_12B36:	; Routine 8
00014B2C 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014B32 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014B38 6600                       		bne.s	@animate
00014B3A 08E8 0007 0002             		bset	#7,obGfx(a0)
00014B40                            
00014B40                            	@animate:
00014B40 60CC                       		bra.s	WFall_Animate
00014B40 60CC                       		bra.s	WFall_Animate
00014B42                            		include	"_anim\Waterfalls.asm"
00014B42                            ; ---------------------------------------------------------------------------
00014B42                            ; Animation script - waterfall (LZ)
00014B42                            ; ---------------------------------------------------------------------------
00014B42 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014B44 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014B4A 00                         		even
00014B4A 00                         		even
00014B4A                            Map_WFall	include	"_maps\Waterfalls.asm"
00014B4A                            ; ---------------------------------------------------------------------------
00014B4A                            ; Sprite mappings - waterfalls (LZ)
00014B4A                            ; ---------------------------------------------------------------------------
00014B4A                            Map_WFall_internal:
00014B4A 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014B4C 0000                       		dc.w @cornerwide-Map_WFall_internal
00014B4E 0000                       		dc.w @cornermedium-Map_WFall_internal
00014B50 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014B52 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014B54 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014B56 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014B58 0000                       		dc.w @vertwide-Map_WFall_internal
00014B5A 0000                       		dc.w @diagonal-Map_WFall_internal
00014B5C 0000                       		dc.w @splash1-Map_WFall_internal
00014B5E 0000                       		dc.w @splash2-Map_WFall_internal
00014B60 0000                       		dc.w @splash3-Map_WFall_internal
00014B62 01                         @vertnarrow:	dc.b 1
00014B63 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014B68 02                         @cornerwide:	dc.b 2
00014B69 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014B6E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014B73 02                         @cornermedium:	dc.b 2
00014B74 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014B79 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014B7E 01                         @cornernarrow:	dc.b 1
00014B7F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014B84 02                         @cornermedium2:	dc.b 2
00014B85 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014B8A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014B8F 01                         @cornernarrow2:	dc.b 1
00014B90 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014B95 01                         @cornernarrow3:	dc.b 1
00014B96 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014B9B 01                         @vertwide:	dc.b 1
00014B9C F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014BA1 02                         @diagonal:	dc.b 2
00014BA2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014BA7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014BAC 02                         @splash1:	dc.b 2
00014BAD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014BB2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014BB7 02                         @splash2:	dc.b 2
00014BB8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014BBD F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014BC2 02                         @splash3:	dc.b 2
00014BC3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014BC8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014BCE 00                         		even
00014BCE 00                         		even
00014BCE                            
00014BCE                            
00014BCE                            SpinDash_dust:
00014BCE                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014BCE 7000                       		moveq	#0,d0
00014BD0 1028 0024                  		move.b	$24(a0),d0
00014BD4 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014BD8 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014BDC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014BDC 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014BDE 0000                       		dc loc_1DD90-off_1DD2E; 1
00014BE0 0000                       		dc loc_1DE46-off_1DD2E; 2
00014BE2 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014BE4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014BE4                            
00014BE4                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014BE4 5428 0024                  		addq.b	#2,$24(a0)
00014BE8 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014BF0 0028 0004 0001             		or.b	#4,1(a0)
00014BF6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014BFC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014C02 317C 07AC 0002             		move	#$7AC,2(a0)
00014C08 317C D000 003E             		move	#-$3000,$3E(a0)
00014C0E 317C F580 003C             		move	#$F580,$3C(a0)
00014C14 B0FC D1C0                  		cmp	#-$2E40,a0
00014C18 6700                       		beq.s	loc_1DD8C
00014C1A 117C 0001 0034             		move.b	#1,$34(a0)
00014C20                            ;		cmp	#2,($FFFFFF70).w
00014C20                            ;		beq.s	loc_1DD8C
00014C20                            ;		move	#$48C,2(a0)
00014C20                            ;		move	#-$4FC0,$3E(a0)
00014C20                            ;		move	#-$6E80,$3C(a0)
00014C20                            
00014C20                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014C20                            ;		bsr.w	sub_16D6E
00014C20                            
00014C20                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014C20 3468 003E                  		movea.w	$3E(a0),a2
00014C24 7000                       		moveq	#0,d0
00014C26 1028 001C                  		move.b	$1C(a0),d0
00014C2A D040                       		add	d0,d0
00014C2C 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014C30 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014C34                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C34 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014C36 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014C38 0000                       		dc loc_1DDCC-off_1DDA4; 2
00014C3A 0000                       		dc loc_1DE20-off_1DDA4; 3
00014C3C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C3C                            
00014C3C                            loc_1DDAC:				; DATA XREF: h+6E30?o
00014C3C 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00014C42 4A28 001D                  		tst.b	$1D(a0)
00014C46 6600                       		bne.s	loc_1DE28
00014C48 316A 0008 0008             		move	8(a2),8(a0)
00014C4E 117C 0000 0022             		move.b	#0,$22(a0)
00014C54 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014C5A 6000                       		bra.s	loc_1DE28
00014C5C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014C5C                            
00014C5C                            loc_1DDCC:				; DATA XREF: h+6E30?o
00014C5C                            ;		cmp.b	#$C,$28(a2)
00014C5C                            ;		bcs.s	loc_1DE3E
00014C5C 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00014C62 6400                       		bcc.s	loc_1DE3E
00014C64 4A2A 0039                  		tst.b	$39(a2)
00014C68 6700                       		beq.s	loc_1DE3E
00014C6A 316A 0008 0008             		move	8(a2),8(a0)
00014C70 316A 000C 000C             		move	$C(a2),$C(a0)
00014C76 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014C7C 0228 0001 0022             		and.b	#1,$22(a0)
00014C82 4A28 0034                  		tst.b	$34(a0)
00014C86 6700                       		beq.s	loc_1DE06
00014C88 5968 000C                  		sub	#4,$C(a0)
00014C8C                            
00014C8C                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014C8C 4A28 001D                  		tst.b	$1D(a0)
00014C90 6600                       		bne.s	loc_1DE28
00014C92 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014C98 4A6A 0002                  		tst	2(a2)
00014C9C 6A00                       		bpl.s	loc_1DE28
00014C9E 0068 8000 0002             		or	#-$8000,2(a0)
00014CA4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CA4                            
00014CA4                            loc_1DE20:				; DATA XREF: h+6E30?o
00014CA4                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014CA4 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014CAA 4EB9 0000 C4F8             		jsr	AnimateSprite
00014CB0 6100 0000                  		bsr.w	loc_1DEE4
00014CB4 4EFA A788                  		jmp	DisplaySprite
00014CB8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CB8                            
00014CB8                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014CB8 117C 0000 001C             		move.b	#0,$1C(a0)
00014CBE 4E75                       		rts	
00014CC0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CC0                            
00014CC0                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014CC0 6000 A7BC                  		bra.w	DeleteObject
00014CC4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CC4                            
00014CC4                            
00014CC4                            
00014CC4                            loc_1DE4A:
00014CC4 3468 003E                  	movea.w	$3E(a0),a2
00014CC8 7210                       	moveq	#$10,d1
00014CCA 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014CD0 6700                       	beq.s	loc_1DE64
00014CD2 7206                       	moveq	#$6,d1
00014CD4 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014CDA 6700                       	beq.s	loc_1DE64
00014CDC 117C 0002 0024             	move.b	#2,$24(a0)
00014CE2 117C 0000 0032             	move.b	#0,$32(a0)
00014CE8 4E75                       	rts
00014CEA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014CEA                            
00014CEA                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014CEA 5328 0032                  		subq.b	#1,$32(a0)
00014CEE 6A00                       		bpl.s	loc_1DEE0
00014CF0 117C 0003 0032             		move.b	#3,$32(a0)
00014CF6 4EBA ACE0                  		jsr	FindFreeObj
00014CFA 6600                       		bne.s	loc_1DEE0
00014CFC 1290                       		move.b	0(a0),0(a1)
00014CFE 336A 0008 0008             		move	8(a2),8(a1)
00014D04 336A 000C 000C             		move	$C(a2),$C(a1)
00014D0A 4A28 0034                  		tst.b	$34(a0)
00014D0E 6700                       		beq.s	loc_1DE9A
00014D10 5941                       		sub	#4,d1
00014D12                            
00014D12                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014D12 D369 000C                  		add	d1,$C(a1)
00014D16 137C 0000 0022             		move.b	#0,$22(a1)
00014D1C 137C 0003 001C             		move.b	#3,$1C(a1)
00014D22 5429 0024                  		addq.b	#2,$24(a1)
00014D26 2368 0004 0004             		move.l	4(a0),4(a1)
00014D2C 1368 0001 0001             		move.b	1(a0),1(a1)
00014D32 337C 0080 0018             		move.w	#$80,obPriority(a1)
00014D38 137C 0004 0014             		move.b	#4,obActWid(a1)
00014D3E 3368 0002 0002             		move	2(a0),2(a1)
00014D44 3368 003E 003E             		move	$3E(a0),$3E(a1)
00014D4A 0269 7FFF 0002             		and	#$7FFF,2(a1)
00014D50 4A6A 0002                  		tst	2(a2)
00014D54 6A00                       		bpl.s	loc_1DEE0
00014D56 0069 8000 0002             		or	#-$8000,2(a1)
00014D5C                            
00014D5C                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00014D5C 6100                       		bsr.s	loc_1DEE4
00014D5E 4E75                       		rts	
00014D60                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014D60                            
00014D60                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00014D60 7000                       		moveq	#0,d0
00014D62 1028 001A                  		move.b	$1A(a0),d0
00014D66 B028 0030                  		cmp.b	$30(a0),d0
00014D6A 6700 0000                  		beq.w	locret_1DF36
00014D6E 1140 0030                  		move.b	d0,$30(a0)
00014D72 45F9 0000 0000             		lea	(off_1E074).l,a2
00014D78 D040                       		add	d0,d0
00014D7A D4F2 0000                  		add	(a2,d0.w),a2
00014D7E 3A1A                       		move	(a2)+,d5
00014D80 5345                       		subq	#1,d5
00014D82 6B00 0000                  		bmi.w	locret_1DF36
00014D86 3828 003C                  		move $3C(a0),d4
00014D8A                            
00014D8A                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014D8A 7200                       		moveq	#0,d1
00014D8C 321A                       		move	(a2)+,d1
00014D8E 3601                       		move	d1,d3
00014D90 E04B                       		lsr.w	#8,d3
00014D92 0243 00F0                  		and	#$F0,d3	; 'ð'
00014D96 0643 0010                  		add	#$10,d3
00014D9A 0241 0FFF                  		and	#$FFF,d1
00014D9E EB89                       		lsl.l	#5,d1
00014DA0 0681 0000 0000             		add.l	#Art_Dust,d1
00014DA6 3404                       		move	d4,d2
00014DA8 D843                       		add	d3,d4
00014DAA D843                       		add	d3,d4
00014DAC 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00014DB2 51CD FFD6                  		dbf	d5,loc_1DF0A
00014DB6 4E75                           rts
00014DB8                            
00014DB8                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014DB8 4E75                       		rts	
00014DBA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014DBA 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014DBC 0000                       		dc byte_1DF43-off_1DF38; 1
00014DBE 0000                       		dc byte_1DF4F-off_1DF38; 2
00014DC0 0000                       		dc byte_1DF58-off_1DF38; 3
00014DC2 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014DC5 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014DD1 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014DDA 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014DE0                            ; -------------------------------------------------------------------------------
00014DE0                            ; Unknown Sprite Mappings
00014DE0                            ; -------------------------------------------------------------------------------
00014DE0                            MapUnc_1DF5E:
00014DE0 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014DE2 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014DE4 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014DE6 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014DE8 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014DEA 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014DEC 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014DEE 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014DF0 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014DF2 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014DF4 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
00014DF6 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
00014DF8 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
00014DFA 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014DFC 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014DFE 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014E00 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014E02 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014E04 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00014E06 0000                       	dc word_1E060-MapUnc_1DF5E; 19
00014E08 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
00014E0A 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014E0C 00                         word_1DF8A:	dc.b 0
00014E0D 01                         word_1DF8C:	dc.b 1
00014E0E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E13 01                         word_1DF96:	dc.b 1
00014E14 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E19 01                         word_1DFA0:	dc.b 1
00014E1A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E1F 01                         word_1DFAA:	dc.b 1
00014E20 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E25 01                         word_1DFB4:	dc.b 1
00014E26 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E2B 01                         word_1DFBE:	dc.b 1
00014E2C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00014E31 01                         word_1DFC8:	dc.b 1
00014E32 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E37 01                         word_1DFD2:	dc.b 1
00014E38 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E3D 01                         word_1DFDC:	dc.b 1
00014E3E F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014E43 01                         word_1DFE6:	dc.b 1
00014E44 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E49 01                         word_1DFF0:	dc.b 1
00014E4A 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E4F 01                         word_1DFFA:	dc.b 1
00014E50 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014E55 02                         word_1E004:	dc.b 2
00014E56 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014E5B 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014E60 02                         word_1E016:	dc.b 2
00014E61 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014E66 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014E6B 02                         word_1E028:	dc.b 2
00014E6C F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014E71 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014E76 02                         word_1E03A:	dc.b 2
00014E77 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014E7C 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014E81 01                         word_1E04C:	dc.b 1
00014E82 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014E87 01                         word_1E056:	dc.b 1
00014E88 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014E8D 01                         word_1E060:	dc.b 1
00014E8E F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014E93 01                         word_1E06A:	dc.b 1
00014E94 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014E99 00                         	dc.b 0
00014E9A 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014E9C 0000                       	dc word_1E0A2-off_1E074; 1
00014E9E 0000                       	dc word_1E0A6-off_1E074; 2
00014EA0 0000                       	dc word_1E0AA-off_1E074; 3
00014EA2 0000                       	dc word_1E0AE-off_1E074; 4
00014EA4 0000                       	dc word_1E0B2-off_1E074; 5
00014EA6 0000                       	dc word_1E0B6-off_1E074; 6
00014EA8 0000                       	dc word_1E0BA-off_1E074; 7
00014EAA 0000                       	dc word_1E0BE-off_1E074; 8
00014EAC 0000                       	dc word_1E0C2-off_1E074; 9
00014EAE 0000                       	dc word_1E0C6-off_1E074; 10
00014EB0 0000                       	dc word_1E0CA-off_1E074; 11
00014EB2 0000                       	dc word_1E0CE-off_1E074; 12
00014EB4 0000                       	dc word_1E0D2-off_1E074; 13
00014EB6 0000                       	dc word_1E0D8-off_1E074; 14
00014EB8 0000                       	dc word_1E0DE-off_1E074; 15
00014EBA 0000                       	dc word_1E0E4-off_1E074; 16
00014EBC 0000                       	dc word_1E0EA-off_1E074; 17
00014EBE 0000                       	dc word_1E0EA-off_1E074; 18
00014EC0 0000                       	dc word_1E0EA-off_1E074; 19
00014EC2 0000                       	dc word_1E0EA-off_1E074; 20
00014EC4 0000                       	dc word_1E0EC-off_1E074; 21
00014EC6 0000                       word_1E0A0:	dc 0
00014EC8 0001                       word_1E0A2:	dc 1
00014ECA 7000                       	dc $7000
00014ECC 0001                       word_1E0A6:	dc 1
00014ECE F008                       	dc $F008
00014ED0 0001                       word_1E0AA:	dc 1
00014ED2 F018                       	dc $F018
00014ED4 0001                       word_1E0AE:	dc 1
00014ED6 F028                       	dc $F028
00014ED8 0001                       word_1E0B2:	dc 1
00014EDA F038                       	dc $F038
00014EDC 0001                       word_1E0B6:	dc 1
00014EDE F048                       	dc $F048
00014EE0 0001                       word_1E0BA:	dc 1
00014EE2 7058                       	dc $7058
00014EE4 0001                       word_1E0BE:	dc 1
00014EE6 7060                       	dc $7060
00014EE8 0001                       word_1E0C2:	dc 1
00014EEA 7068                       	dc $7068
00014EEC 0001                       word_1E0C6:	dc 1
00014EEE 7070                       	dc $7070
00014EF0 0001                       word_1E0CA:	dc 1
00014EF2 7078                       	dc $7078
00014EF4 0001                       word_1E0CE:	dc 1
00014EF6 7080                       	dc $7080
00014EF8 0002                       word_1E0D2:	dc 2
00014EFA 1088                       	dc $1088
00014EFC 708A                       	dc $708A
00014EFE 0002                       word_1E0D8:	dc 2
00014F00 3092                       	dc $3092
00014F02 7096                       	dc $7096
00014F04 0002                       word_1E0DE:	dc 2
00014F06 509E                       	dc $509E
00014F08 70A4                       	dc $70A4
00014F0A 0002                       word_1E0E4:	dc 2
00014F0C 50AC                       	dc $50AC
00014F0E 70B2                       	dc $70B2
00014F10 0000                       word_1E0EA:	dc 0
00014F12 0001                       word_1E0EC:	dc 1
00014F14 F0BA                       	dc $F0BA
00014F16                            	even
00014F16                            
00014F16                            ; ===========================================================================
00014F16                            
00014F16                            LoadPlayerPal:
00014F16 7000                       		moveq	#0,d0
00014F18 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F1C 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F20 4E75                       		rts
00014F22                            
00014F22                            	@palLUT:
00014F22 0316 1718 19               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00014F27 1A1B 1C1D 1E1F             		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10, palid_Sonic11
00014F2E 00                         		even
00014F2E                            
00014F2E                            LoadPlayerWaterPal:
00014F2E 7000                       		moveq	#0,d0
00014F30 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00014F34 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00014F38 4E75                       		rts
00014F3A                            
00014F3A                            	@palLUT:
00014F3A 1020 2122 23               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00014F3F 2425 2627 2829             		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10, palid_SonWater11
00014F46 00                         		even
00014F46                            
00014F46                            LoadLifeIcon:
00014F46 7000                       		moveq	#0,d0
00014F48 3038 FE10                  		move.w	(v_zone).w,d0	
00014F4C E418                       		ror.b	#2,d0
00014F4E EC48                               lsr.w 	#6,d0		
00014F50 103B 0000                  		move.b	LoadLifeIcon_Table(pc,d0.w),d0	
00014F54 4EB8 173A                  		jsr		AddPLC	
00014F58 4E75                       		rts
00014F5A                            
00014F5A                            LoadLifeIcon_Table:
00014F5A                            		; GHZ
00014F5A 00                         		dc.b	plcid_LifeIcon
00014F5B 00                         		dc.b	plcid_LifeIcon
00014F5C 00                         		dc.b	plcid_LifeIcon	
00014F5D 00                         		dc.b	plcid_LifeIcon	
00014F5E                            		; LZ
00014F5E 00                         		dc.b	plcid_LifeIcon
00014F5F 00                         		dc.b	plcid_LifeIcon
00014F60 00                         		dc.b	plcid_LifeIcon	
00014F61 00                         		dc.b	plcid_LifeIconF	
00014F62                            		; MZ
00014F62 00                         		dc.b	plcid_LifeIconF
00014F63 00                         		dc.b	plcid_LifeIconF
00014F64 00                         		dc.b	plcid_LifeIconF
00014F65 00                         		dc.b	plcid_LifeIconF
00014F66                            		; SLZ
00014F66 00                         		dc.b	plcid_LifeIcon
00014F67 00                         		dc.b	plcid_LifeIcon
00014F68 00                         		dc.b	plcid_LifeIcon	
00014F69 00                         		dc.b	plcid_LifeIcon	
00014F6A                            		; SYZ
00014F6A 00                         		dc.b	plcid_LifeIconF
00014F6B 00                         		dc.b	plcid_LifeIconF
00014F6C 00                         		dc.b	plcid_LifeIconF
00014F6D 00                         		dc.b	plcid_LifeIconF	
00014F6E                            		; SBZ
00014F6E 00                         		dc.b	plcid_LifeIconF
00014F6F 00                         		dc.b	plcid_LifeIconF
00014F70 00                         		dc.b	plcid_LifeIconF
00014F71 00                         		dc.b	plcid_LifeIconF	
00014F72                            		even
00014F72                            
00014F72                            ; ---------------------------------------------------------------------------
00014F72                            ; Object 01 - Sonic
00014F72                            ; ---------------------------------------------------------------------------
00014F72                            
00014F72                            SonicPlayer:
00014F72 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00014F76 6700                       		beq.s	Sonic_Normal	; if not, branch
00014F78 4EF9 0000 0000             		jmp	(DebugMode).l
00014F7E                            ; ===========================================================================
00014F7E                            
00014F7E                            Sonic_Normal:
00014F7E 7000                       		moveq	#0,d0
00014F80 1028 0024                  		move.b	obRoutine(a0),d0
00014F84 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
00014F88 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00014F8C                            ; ===========================================================================
00014F8C 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00014F8E 0000                       		dc.w Sonic_Control-Sonic_Index
00014F90 0000                       		dc.w Sonic_Hurt-Sonic_Index
00014F92 0000                       		dc.w Sonic_Death-Sonic_Index
00014F94 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00014F96                            ; ===========================================================================
00014F96                            
00014F96                            Sonic_Main:	; Routine 0
00014F96 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00014F9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00014FA0 117C 0013 0016             		move.b	#$13,obHeight(a0)
00014FA6 117C 0009 0017             		move.b	#9,obWidth(a0)
00014FAC 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00014FB4 317C 0780 0002             		move.w	#$780,obGfx(a0)
00014FBA 317C 0100 0018             		move.w	#$100,obPriority(a0)
00014FC0 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014FC6 117C 0004 0001             		move.b	#4,obRender(a0)
00014FCC 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00014FD2 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
00014FD8 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00014FDE 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00014FE4                            
00014FE4                            Sonic_Control:    ; Routine 2
00014FE4 4A38 FF8B                   		tst.b	($FFFFFF8B).w
00014FE8 6700 0000                  		beq.w	@cont    
00014FEC 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
00014FEE                             
00014FEE                            	@cont: 
00014FEE 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
00014FF2 6700                       		beq.s    loc_12C58    ; if not, branch
00014FF4 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
00014FFA 6700                       		beq.s    loc_12C58    ; if not, branch
00014FFC 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00015002 4238 F7CC                  		clr.b    (f_lockctrl).w
00015006 4E75                       		rts
00015008                            		
00015008                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
00015008                            ; ---------------------------------------------------------------------------
00015008                            ; Subroutine to    horizontally pan the camera view ahead of the player
00015008                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
00015008                            ; ---------------------------------------------------------------------------
00015008                            
00015008                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00015008                            
00015008                            
00015008                            Sonic_PanCamera:
00015008 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
0001500C 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00015010 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
00015012 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00015014                            
00015014                                @abs_inertia:
00015014                            
00015014                            ; These lines were intended to prevent the Camera from panning while
00015014                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00015014                            ; However, given that no such object exists in Sonic 1, I just went
00015014                            ; ahead and commented these out.
00015014                                    ;tst.b	($FFFFF5C2).w               ; is sonic going up a giant ramp in PPZ?
00015014                                   ; bne.s	@reset_pan                   ; if not, branch
00015014                                    ;cmpi.w 	#$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00015014                                    ;bcs.s    @reset_pan                ; if so, branch
00015014                            
00015014                            ; These lines aren't part of the original routine; I added them myself.
00015014                            ; If you've ported the Spin Dash, uncomment the following lines of code
00015014                            ; to allow the camera to pan ahead while charging the Spin Dash:
00015014 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
00015018 6700                               beq.s    @skip                    ; if not, branch
0001501A 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015020 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00015022 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015024                            
00015024                                @skip:
00015024 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
00015028 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
0001502A 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
0001502E 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015030                            
00015030                                @pan_right:
00015030 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015032 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015036 6500                               bcs.s    @update_pan                ; if not, branch
00015038 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
0001503C 6000                               bra.s    @update_pan                ; branch
0001503E                            ; ---------------------------------------------------------------------------
0001503E                            
0001503E                                @pan_left:
0001503E 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015040 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015044 6400                               bcc.s    @update_pan                ; if not, branch
00015046 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001504A 6000                               bra.s    @update_pan                ; branch
0001504C                            ; ---------------------------------------------------------------------------
0001504C                            
0001504C                                @reset_pan:
0001504C 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015050 6700                               beq.s    @update_pan                ; if so, branch
00015052 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015054                                 
00015054                                @reset_right:
00015054 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015056 6000                               bra.s    @update_pan                ; branch
00015058                            ; ---------------------------------------------------------------------------
00015058                            
00015058                                @reset_left:
00015058 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001505A                            
0001505A                                @update_pan:
0001505A 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
0001505E 4E75                               rts                                ; return
00015060                                 
00015060                            ; End of function Sonic_PanCamera
00015060                            
00015060                            
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_12C58:
00015060 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015064 6600                       		bne.s	loc_12C64	; if yes, branch
00015066 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001506C                            
0001506C                            loc_12C64:
0001506C 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015072 6600                       		bne.s	loc_12C7E	; if yes, branch
00015074 7000                       		moveq	#0,d0
00015076 1028 0022                  		move.b	obStatus(a0),d0
0001507A 0240 0006                  		andi.w	#6,d0
0001507E 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015082 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015086                            
00015086                            loc_12C7E:
00015086 6100                       		bsr.s	Sonic_Display
00015088 6100 0000                  		bsr.w	Sonic_RecordPosition
0001508C 6100 0000                  		bsr.w	Sonic_Water
00015090 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015096 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001509C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
000150A0 6700                       		beq.s	loc_12CA6
000150A2 4A28 001C                  		tst.b	obAnim(a0)
000150A6 6600                       		bne.s	loc_12CA6
000150A8 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
000150AE                            
000150AE                            loc_12CA6:
000150AE 6100 0000                  		bsr.w	Sonic_Animate
000150B2 4A38 F7C8                  		tst.b	(f_lockmulti).w
000150B6 6B00                       		bmi.s	loc_12CB6
000150B8 4EB9 0000 0000             		jsr	(ReactToItem).l
000150BE                            
000150BE                            loc_12CB6:
000150BE 6100 0000                  		bsr.w	Sonic_Loops
000150C2 6100 0000                  		bsr.w	Sonic_LoadGfx
000150C6 4E75                       		rts	
000150C8                            ; ===========================================================================
000150C8 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
000150CA 0000                       		dc.w Sonic_MdJump-Sonic_Modes
000150CC 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000150CE 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000150D0                            ; ---------------------------------------------------------------------------
000150D0                            ; Music	to play	after invincibility wears off
000150D0                            ; ---------------------------------------------------------------------------
000150D0                            MusicList2:
000150D0 00                         		dc.b bgm_GHZ
000150D1 00                         		dc.b bgm_LZ
000150D2 00                         		dc.b bgm_MZ
000150D3 00                         		dc.b bgm_SLZ
000150D4 00                         		dc.b bgm_SYZ
000150D5 00                         		dc.b bgm_SBZ
000150D6                            		; The ending doesn't get an entry
000150D6                            		even
000150D6                            
000150D6                            		include	"_incObj\Sonic Display.asm"
000150D6                            ; ---------------------------------------------------------------------------
000150D6                            ; Subroutine to display Sonic and set music
000150D6                            ; ---------------------------------------------------------------------------
000150D6                            
000150D6                            Sonic_Display:
000150D6 3028 0030                  		move.w    flashtime(a0),d0
000150DA 6700                       		beq.s    @showAfterImage
000150DC 5368 0030                  		subq.w    #1,flashtime(a0)
000150E0 E648                               	lsr.w    #3,d0
000150E2 6400                               	bcc.s    @chkinvincible
000150E4                            
000150E4                            	@showAfterImage:
000150E4 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000150E8 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000150EA 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000150EC 4440                       		neg        d0                    ; if not, negate it
000150EE                            
000150EE                            	@AfterImage_Start:        
000150EE 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000150F2 6700                       		beq.s	@display	; if not, don't show the After Image
000150F4                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000150F4                            		;blt.s    @display	; if not, don't show the After Image
000150F4                            	
000150F4                            	@AfterImage_Start2:    
000150F4 6100 A8E2                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000150F8 6600                               	bne.s    @display    ; if not have, don't load the After Image
000150FA 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000150FE 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015104 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
0001510A 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
00015110                            
00015110                                	@display:
00015110 4EB9 0000 F43E                     	jsr    (DisplaySprite).l
00015116                            
00015116                            	@chkinvincible:
00015116 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
0001511A 6700                       		beq.s	@chkshoes	; if not, branch
0001511C 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015120 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015122 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
00015126 6600                       		bne.s	@chkshoes
00015128 4A38 F7AA                  		tst.b	(f_lockscreen).w
0001512C 6600                       		bne.s	@removeinvincible
0001512E 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015134 6500                       		bcs.s	@removeinvincible	
00015136 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
0001513C 6700                       		beq.s	@removeinvincible	
0001513E 0C38 0001 FE2E             		cmpi.b	#$1,(v_shoes).w	; does Sonic have speed shoes?
00015144 6600                       		bne.s	@haveshoes	; if no, branch, and load regular stage music
00015146 103C 008B                  		move.b	#$8B,d0		; if yes, load regular speed shoes music
0001514A 6000                       		bra.s	@playtune
0001514C                            		
0001514C                            @haveshoes:		
0001514C 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015150                            
00015150                            @playtune: 
00015150 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
00015156                            
00015156                            	@removeinvincible:
00015156 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
0001515C                            
0001515C                            	@chkshoes:
0001515C 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
00015160 6700                       		beq.s	@exit		; if not, branch
00015162 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015166 6700                       		beq.s	@exit
00015168 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
0001516C 6600                       		bne.s	@exit
0001516E 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015174 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001517A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015180 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015186 0C38 0001 F7AA             		cmpi.b	#$1,(f_lockscreen).w	
0001518C 6700                       		beq.s	@exit
0001518E 0C38 0001 FE2D             		cmpi.b	#$1,($FFFFFE2D).w	; does Sonic have invincibility?
00015194 6600                       		bne.s	@isinvincible	; if no, branch, and load regular stage music
00015196 103C 0087                  		move.b	#$87,d0		; if yes, load regular invincibility music
0001519A 6000                       		bra.b	@playtune2
0001519C                            @isinvincible:		
0001519C 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
000151A0                            @playtune2:
000151A0 4EB9 0000 129A             		jsr	(PlaySound).l    ; play normal music
000151A6                            		
000151A6                            	@exit:
000151A6 4E75                       		rts	
000151A6 4E75                       		rts	
000151A8                            		include	"_incObj\Sonic RecordPosition.asm"
000151A8                            ; ---------------------------------------------------------------------------
000151A8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000151A8                            ; ---------------------------------------------------------------------------
000151A8                            
000151A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151A8                            
000151A8                            
000151A8                            Sonic_RecordPosition:
000151A8 3038 F7A8                  		move.w	(v_trackpos).w,d0
000151AC 43F8 CB00                  		lea	(v_tracksonic).w,a1
000151B0 43F1 0000                  		lea	(a1,d0.w),a1
000151B4 32E8 0008                  		move.w	obX(a0),(a1)+
000151B8 32E8 000C                  		move.w	obY(a0),(a1)+
000151BC 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
000151C0 4E75                       		rts	
000151C2                            ; End of function Sonic_RecordPosition
000151C2                            ; End of function Sonic_RecordPosition
000151C2                            		include	"_incObj\Sonic Water.asm"
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Subroutine for Sonic when he's underwater
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            
000151C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151C2                            
000151C2                            
000151C2                            Sonic_Water:
000151C2 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
000151C8 6700                       		beq.s	WaterTagforMZ	; if yes, branch
000151CA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
000151D0 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
000151D2                            
000151D2                            	Sonic_Water_Exit:
000151D2 4E75                       		rts	
000151D4                            ; ===========================================================================
000151D4                            
000151D4                            	Sonic_Water_LZ:
000151D4 3038 F646                  		move.w	(v_waterpos1).w,d0
000151D8 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
000151DC 6C00 0000                  		bge.w	Abovewater	; if yes, branch
000151E0 6000 0000                  		bra	WaterStatus
000151E4                            	WaterTagforMZ:
000151E4 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000151EA 6700 0000                  		beq.w	Abovewater	; if yes, branch
000151EE                            		;move.w #$F,d0             ;TIS Length ($F = full line)
000151EE                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000151EE                                ;    	lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000151EE                            	;	jsr	Palload_Loop
000151EE                            	WaterStatus:
000151EE 08E8 0006 0022             		bset	#6,obStatus(a0)
000151F4 6600 FFDC                  		bne.w	Sonic_Water_Exit
000151F8 6100 0000                  		bsr.w	ResumeMusic
000151FC 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015202 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
00015208 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
0001520E 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
00015214 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
0001521A 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
00015220 E0E8 0010                  		asr	obVelX(a0)
00015224 E0E8 0012                  		asr	obVelY(a0)
00015228 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
0001522C 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
00015230                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015230 31FC 0100 D1DC                     	move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015240 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015246 6600 0000                  		bne.w	@return
0001524A                            		
0001524A                            		
0001524A                            	@return:
0001524A 4E75                       		rts
0001524C                            ; ===========================================================================
0001524C                            
0001524C                            Abovewater:
0001524C 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015252 6700 FF7E                  		beq.w	Sonic_Water_Exit
00015256 6100 0000                  		bsr.w	ResumeMusic
0001525A 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015260                            
00015260 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015266 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
0001526C 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015272 E1E8 0012                  		asl	obVelY(a0)
00015276 6700 FF5A                  		beq.w	Sonic_Water_Exit
0001527A 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015280 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
00015286 6E00                       		bgt.s	@belowmaxspeed
00015288 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
0001528E                            
0001528E                            	@belowmaxspeed:
00015298                            ; End of function Sonic_Water
00015298                            ; End of function Sonic_Water
00015298                            		include "_incObj\03 Hangable Sprite.asm"
00015298                            ; ===========================================================================
00015298                            ; ----------------------------------------------------------------------------
00015298                            ; Object 03 - Invisible sprite that you can hang on to
00015298                            ; ----------------------------------------------------------------------------
00015298                            ; Sprite_2C92C:
00015298                            Obj03:
00015298 7000                       	moveq    #0,d0
0001529A 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
0001529E 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
000152A2 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
000152A6                            ; ===========================================================================
000152A6                            ; off_2C93A:
000152A6                            Obj03_Index:
000152A6 0000                           dc.w Obj03_Main-Obj03_Index
000152A8 0000                               dc.w Obj03_Init-Obj03_Index
000152AA                            ; ===========================================================================
000152AA                            ; loc_2C93E:
000152AA                            Obj03_Init:
000152AA 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
000152AE 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
000152B4 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
000152BA 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
000152C0                            ; loc_2C954:
000152C0                            Obj03_Main:
000152C0 45E8 0030                      lea    $30(a0),a2
000152C4 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000152C8 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000152CC 6100                           bsr.s    Obj03_Check
000152CE                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000152CE                            ;    addq.w    #1,a2                          ;disabled
000152CE                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000152CE                            ;    bsr.s    Obj03_Check         	;disabled
000152CE 4EF9 0000 0000             	jmp		bonu_chkdel
000152D4                            ; ===========================================================================
000152D4                            ; loc_2C972:
000152D4                            Obj03_Check:
000152D4 4A12                       		tst.b	(a2)
000152D6 6700                       		beq.s	loc_2C9A0
000152D8 0200 0070                  		andi.b	#btnABC,d0
000152DC 6700 0000                  		beq.w	Obj03_Check_End
000152E0 4238 F7C8                  		clr.b	f_lockmulti.w
000152E4 4212                       		clr.b	(a2)
000152E6 157C 0012 0002             		move.b	#$12,2(a2)
000152EC 0240 0F00                  		andi.w	#$F00,d0
000152F0 6700                       		beq.s	loc_2C954
000152F2 157C 003C 0002             		move.b	#$3C,2(a2)
000152F8                            	
000152F8                            loc_2C954:
000152F8 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000152FE 6000 0000                  		bra.w	Obj03_Check_End
00015302                            ; ===========================================================================
00015302                            
00015302                            loc_2C9A0:
00015302 4A2A 0002                  		tst.b	2(a2)
00015306 6700                       		beq.s	loc_2C972
00015308 532A 0002                  		subq.b	#1,2(a2)
0001530C 6600 0000                  		bne.w	Obj03_Check_End
00015310                            
00015310                            loc_2C972:
00015310 3029 0008                  		move.w	obX(a1),d0
00015314 9068 0008                  		sub.w	obX(a0),d0
00015318 0640 0018                  		addi.w	#$18,d0
0001531C 0C40 0030                  		cmpi.w	#$30,d0
00015320 6400 0000                  		bhs.w	Obj03_Check_End
00015324 3229 000C                  		move.w	obY(a1),d1
00015328 9268 000C                  		sub.w	obY(a0),d1
0001532C 0C41 0010                  		cmpi.w	#$10,d1
00015330 6400 0000                  		bhs.w	Obj03_Check_End
00015334 4A38 F7C8                  		tst.b	f_lockmulti.w
00015338 6B00                       		bmi.s	Obj03_Check_End
0001533A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00015340 6400                       		bhs.s	Obj03_Check_End
00015342 4A78 FFFA                  		tst.w	(f_debugmode).w
00015346 6600                       		bne.s	Obj03_Check_End
00015348 4269 0010                  		clr.w	x_vel(a1)
0001534C 4269 0012                  		clr.w	y_vel(a1)
00015350 4269 0020                  		clr.w	obInertia(a1)
00015354 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001535A 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015360 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
00015366 14BC 0001                  		move.b	#1,(a2)
0001536A                            
0001536A                            ; return_2CA08:
0001536A                            Obj03_Check_End:
0001536A 4E75                       		rts
0001536A 4E75                       		rts
0001536C                            
0001536C                            ; ===========================================================================
0001536C                            ; ---------------------------------------------------------------------------
0001536C                            ; Modes	for controlling	Sonic
0001536C                            ; ---------------------------------------------------------------------------
0001536C                            
0001536C                            Sonic_MdNormal:
0001536C                            		;bsr.w	Sonic_Peelout
0001536C                            		;bsr.w	Sonic_SpinDash
0001536C 6100 0000                  		bsr.w	Sonic_Jump
00015370 6100 0000                  		bsr.w	Sonic_SlopeResist
00015374 6100 0000                  		bsr.w	Sonic_Move
00015378 6100 0000                  		bsr.w	Sonic_Roll
0001537C 6100 0000                  		bsr.w	Sonic_LevelBound
00015380 4EB9 0000 F42A             		jsr	(SpeedToPos).l
00015386 6100 0000                  		bsr.w	Sonic_AnglePos
0001538A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001538E 4E75                       		rts	
00015390                            
00015390                            ; ===========================================================================
00015390                            
00015390                            Sonic_MdJump:
00015390 6100 0000                  		bsr.w   Sonic_AirRoll
00015394 6100 0000                  		bsr.w	Sonic_JumpHeight
00015398 6100 0000                  		bsr.w	Sonic_JumpDirection
0001539C 6100 0000                  		bsr.w	Sonic_LevelBound
000153A0 4EB9 0000 F3F2             		jsr	(ObjectFall).l
000153A6 0828 0006 0022             		btst	#6,obStatus(a0)
000153AC 6700                       		beq.s	loc_12E5C
000153AE 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000153B4                            
000153B4                            loc_12E5C:
000153B4 6100 0000                  		bsr.w	Sonic_JumpAngle
000153B8 6100 0000                  		bsr.w	Sonic_Floor
000153BC 4E75                       		rts	
000153BE                            ; ===========================================================================
000153BE                            
000153BE                            Sonic_MdRoll:
000153BE 6100 0000                  		bsr.w	Sonic_Jump
000153C2 6100 0000                  		bsr.w	Sonic_RollRepel
000153C6 6100 0000                  		bsr.w	Sonic_RollSpeed
000153CA 6100 0000                  		bsr.w	Sonic_LevelBound
000153CE 4EB9 0000 F42A             		jsr	(SpeedToPos).l
000153D4 6100 0000                  		bsr.w	Sonic_AnglePos
000153D8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000153DC 4E75                       		rts	
000153DE                            ; ===========================================================================
000153DE                            
000153DE                            Sonic_MdJump2:
000153DE 6100 0000                  		bsr.w	Sonic_HomingAttack
000153E2 6100 0000                  		bsr.w	Sonic_JumpHeight
000153E6 6100 0000                  		bsr.w	Sonic_JumpDirection
000153EA 6100 0000                  		bsr.w	Sonic_LevelBound
000153EE 4EB9 0000 F3F2             		jsr	(ObjectFall).l
000153F4 0828 0006 0022             		btst	#6,obStatus(a0)
000153FA 6700                       		beq.s	loc_12EA6
000153FC 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015402                            
00015402                            loc_12EA6:
00015402 6100 0000                  		bsr.w	Sonic_JumpAngle
00015406 6100 0000                  		bsr.w	Sonic_Floor
0001540A 4E75                       		rts	
0001540C                            
0001540C                            		include	"_incObj\Sonic Move.asm"
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            ; Subroutine to	make Sonic walk/run
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            
0001540C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001540C                            
0001540C                            
0001540C                            Sonic_Move:
0001540C 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015410 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00015414 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015418 4A38 F7CA                  		tst.b	(f_jumponly).w
0001541C 6600 0000                  		bne.w	loc_12FEE
00015420 4A68 003E                  		tst.w	$3E(a0)
00015424 6600 0000                  		bne.w	Sonic_ResetScr
00015428 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001542E 6700                       		beq.s	@notleft	; if not, branch
00015430 6100 0000                  		bsr.w	Sonic_MoveLeft
00015434                            
00015434                            	@notleft:
00015434 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001543A 6700                       		beq.s	@notright	; if not, branch
0001543C 6100 0000                  		bsr.w	Sonic_MoveRight
00015440                            
00015440                            	@notright:
00015440 1028 0026                  		move.b	obAngle(a0),d0
00015444 0600 0020                  		addi.b	#$20,d0
00015448 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001544C 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015450 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015454 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015458 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001545E 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015464 0828 0003 0022             		btst	#3,obStatus(a0)
0001546A 6700                       		beq.s	Sonic_Balance
0001546C 7000                       		moveq	#0,d0
0001546E 1028 003D                  		move.b	$3D(a0),d0
00015472 ED48                       		lsl.w	#6,d0
00015474 43F8 D000                  		lea	(v_objspace).w,a1
00015478 43F1 0000                  		lea	(a1,d0.w),a1
0001547C 4A29 0022                  		tst.b	obStatus(a1)
00015480 6B00                       		bmi.s	Sonic_LookUp
00015482 7200                       		moveq	#0,d1
00015484 1229 0014                  		move.b	obActWid(a1),d1
00015488 3401                       		move.w	d1,d2
0001548A D442                       		add.w	d2,d2
0001548C 5942                       		subq.w	#4,d2
0001548E D268 0008                  		add.w	obX(a0),d1
00015492 9269 0008                  		sub.w	obX(a1),d1
00015496 0C41 0004                  		cmpi.w	#4,d1
0001549A 6D00                       		blt.s	loc_12F6A
0001549C B242                       		cmp.w	d2,d1
0001549E 6C00                       		bge.s	loc_12F5A
000154A0 6000                       		bra.s	Sonic_LookUp
000154A2                            ; ===========================================================================
000154A2                            
000154A2                            Sonic_Balance:
000154A2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000154A8 0C41 000C                  		cmpi.w	#$C,d1
000154AC 6D00                       		blt.s	Sonic_LookUp
000154AE 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000154B4 6600                       		bne.s	loc_12F62
000154B6                            
000154B6                            loc_12F5A:
000154B6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000154BC 6000                       		bra.s	loc_12F70
000154BE                            ; ===========================================================================
000154BE                            
000154BE                            loc_12F62:
000154BE 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000154C4 6600                       		bne.s	Sonic_LookUp
000154C6                            
000154C6                            loc_12F6A:
000154C6 08E8 0000 0022             		bset	#0,obStatus(a0)
000154CC                            
000154CC                            loc_12F70:
000154CC 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000154D2 6000 0000                  		bra.w	Sonic_ResetScr
000154D6                            ; ===========================================================================
000154D6                            
000154D6                            Sonic_LookUp:
000154D6 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
000154DC 6700                       		beq.s	Sonic_Duck	; if not, branch
000154DE 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
000154E4 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
000154EA 6700                       		beq.s	loc_12FC2
000154EC 5478 F73E                  		addq.w	#2,(v_lookshift).w
000154F0 6000                       		bra.s	loc_12FC2
000154F2                            ; ===========================================================================
000154F2                            
000154F2                            Sonic_Duck:
000154F2 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
000154F8 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000154FA 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
00015500 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
00015506 6700                       		beq.s	loc_12FC2
00015508 5578 F73E                  		subq.w	#2,(v_lookshift).w
0001550C 6000                       		bra.s	loc_12FC2
0001550E                            ; =============================================
0001550E                            ; ===========================================================================
0001550E                            
0001550E                            Sonic_ResetScr:
0001550E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015514                            		
00015514                            Sonic_ResetScr_Part2:
00015514 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001551A 6700                       		beq.s	loc_12FC2	; if yes, branch
0001551C 6400                       		bcc.s	loc_12FBE
0001551E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015522                            
00015522                            loc_12FBE:
00015522 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015526                            
00015526                            loc_12FC2:
00015526 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001552A 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001552E 6600                       		bne.s	loc_12FEE	; if yes, branch
00015530 3028 0020                  		move.w	obInertia(a0),d0
00015534 6700                       		beq.s	loc_12FEE
00015536 6B00                       		bmi.s	loc_12FE2
00015538 9045                       		sub.w	d5,d0
0001553A 6400                       		bcc.s	loc_12FDC
0001553C 303C 0000                  		move.w	#0,d0
00015540                            
00015540                            loc_12FDC:
00015540 3140 0020                  		move.w	d0,obInertia(a0)
00015544 6000                       		bra.s	loc_12FEE
00015546                            ; ===========================================================================
00015546                            
00015546                            loc_12FE2:
00015546 D045                       		add.w	d5,d0
00015548 6400                       		bcc.s	loc_12FEA
0001554A 303C 0000                  		move.w	#0,d0
0001554E                            
0001554E                            loc_12FEA:
0001554E 3140 0020                  		move.w	d0,obInertia(a0)
00015552                            
00015552                            loc_12FEE:
00015552 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015556 6600                       		bne.s	loc_1300C 	;Peelout
00015558 1028 0026                  		move.b	obAngle(a0),d0
0001555C 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015562 C3E8 0020                  		muls.w	obInertia(a0),d1
00015566 E081                       		asr.l	#8,d1
00015568 3141 0010                  		move.w	d1,obVelX(a0)
0001556C C1E8 0020                  		muls.w	obInertia(a0),d0
00015570 E080                       		asr.l	#8,d0
00015572 3140 0012                  		move.w	d0,obVelY(a0)
00015576                            
00015576                            loc_1300C:
00015576 1028 0026                  		move.b	obAngle(a0),d0
0001557A 0600 0040                  		addi.b	#$40,d0
0001557E 6B00                       		bmi.s	locret_1307C
00015580 123C 0040                  		move.b	#$40,d1
00015584 4A68 0020                  		tst.w	obInertia(a0)
00015588 6700                       		beq.s	locret_1307C
0001558A 6B00                       		bmi.s	loc_13024
0001558C 4441                       		neg.w	d1
0001558E                            
0001558E                            loc_13024:
0001558E 1028 0026                  		move.b	obAngle(a0),d0
00015592 D001                       		add.b	d1,d0
00015594 3F00                       		move.w	d0,-(sp)
00015596 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001559A 301F                       		move.w	(sp)+,d0
0001559C 4A41                       		tst.w	d1
0001559E 6A00                       		bpl.s	locret_1307C
000155A0 E141                       		asl.w	#8,d1
000155A2 0600 0020                  		addi.b	#$20,d0
000155A6 0200 00C0                  		andi.b	#$C0,d0
000155AA 6700                       		beq.s	loc_13078
000155AC 0C00 0040                  		cmpi.b	#$40,d0
000155B0 6700                       		beq.s	loc_13066
000155B2 0C00 0080                  		cmpi.b	#$80,d0
000155B6 6700                       		beq.s	loc_13060
000155B8 D368 0010                  		add.w	d1,obVelX(a0)
000155BC 08E8 0005 0022             		bset	#5,obStatus(a0)
000155C2 317C 0000 0020             		move.w	#0,obInertia(a0)
000155C8 4E75                       		rts	
000155CA                            ; ===========================================================================
000155CA                            
000155CA                            loc_13060:
000155CA 9368 0012                  		sub.w	d1,obVelY(a0)
000155CE 4E75                       		rts	
000155D0                            ; ===========================================================================
000155D0                            
000155D0                            loc_13066:
000155D0 9368 0010                  		sub.w	d1,obVelX(a0)
000155D4 08E8 0005 0022             		bset	#5,obStatus(a0)
000155DA 317C 0000 0020             		move.w	#0,obInertia(a0)
000155E0 4E75                       		rts	
000155E2                            ; ===========================================================================
000155E2                            
000155E2                            loc_13078:
000155E2 D368 0012                  		add.w	d1,obVelY(a0)
000155E6                            
000155E6                            locret_1307C:
000155E6 4E75                       		rts	
000155E8                            ; End of function Sonic_Move
000155E8                            
000155E8                            
000155E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155E8                            
000155E8                            
000155E8                            Sonic_MoveLeft:
000155E8 3028 0020                  		move.w	obInertia(a0),d0
000155EC 6700                       		beq.s	loc_13086
000155EE 6A00                       		bpl.s	loc_130B2
000155F0                            
000155F0                            loc_13086:
000155F0 08E8 0000 0022             		bset	#0,$22(a0)
000155F6 6600                       		bne.s	loc_1309A
000155F8 08A8 0005 0022             		bclr	#5,$22(a0)
000155FE 117C 0001 001D             		move.b	#1,$1D(a0)
00015604                            
00015604                            loc_1309A:
00015604 9045                       		sub.w	d5,d0
00015606 3206                       		move.w	d6,d1
00015608 4441                       		neg.w	d1
0001560A B041                       		cmp.w	d1,d0
0001560C 6E00                       		bgt.s	loc_130A6
0001560E D045                       		add.w	d5,d0
00015610 B041                       		cmp.w	d1,d0
00015612 6F00                       		ble.s	loc_130A6
00015614 3001                       		move.w	d1,d0
00015616                            
00015616                            loc_130A6:
00015616 3140 0020                  		move.w	d0,obInertia(a0)
0001561A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015620 4E75                       		rts
00015622                            ; ===========================================================================
00015622                            
00015622                            loc_130B2:
00015622 9044                       		sub.w	d4,d0
00015624 6400                       		bcc.s	loc_130BA
00015626 303C FF80                  		move.w	#-$80,d0
0001562A                            
0001562A                            loc_130BA:
0001562A 3140 0020                  		move.w	d0,obInertia(a0)
0001562E 1228 0026                  		move.b	obAngle(a0),d1
00015632 0601 0020                  		addi.b	#$20,d1
00015636 0201 00C0                  		andi.b	#$C0,d1
0001563A 6600                       		bne.s	locret_130E8
0001563C 0C40 0400                  		cmpi.w	#$400,d0
00015640 6D00                       		blt.s	locret_130E8
00015642 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015648 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015658 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
0001565E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015664                            		
00015664                            locret_130E8:
00015664 4E75                       		rts	
00015666                            ; End of function Sonic_MoveLeft
00015666                            
00015666                            
00015666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015666                            
00015666                            
00015666                            Sonic_MoveRight:
00015666 3028 0020                  		move.w	obInertia(a0),d0
0001566A 6B00                       		bmi.s	loc_13118
0001566C 08A8 0000 0022             		bclr	#0,$22(a0)
00015672 6700                       		beq.s	loc_13104
00015674 08A8 0005 0022             		bclr	#5,$22(a0)
0001567A 117C 0001 001D             		move.b	#1,$1D(a0)
00015680                            
00015680                            loc_13104:
00015680 D045                       		add.w	d5,d0
00015682 B046                       		cmp.w	d6,d0
00015684 6D00                       		blt.s	loc_1310C
00015686 9045                       		sub.w	d5,d0
00015688 B046                       		cmp.w	d6,d0
0001568A 6C00                       		bge.s	loc_1310C
0001568C 3006                       		move.w	d6,d0
0001568E                            
0001568E                            loc_1310C:
0001568E 3140 0020                  		move.w	d0,obInertia(a0)
00015692 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015698 4E75                       		rts
0001569A                            ; ===========================================================================
0001569A                            
0001569A                            loc_13118:
0001569A D044                       		add.w	d4,d0
0001569C 6400                       		bcc.s	loc_13120
0001569E 303C 0080                  		move.w	#$80,d0
000156A2                            
000156A2                            loc_13120:
000156A2 3140 0020                  		move.w	d0,obInertia(a0)
000156A6 1228 0026                  		move.b	obAngle(a0),d1
000156AA 0601 0020                  		addi.b	#$20,d1
000156AE 0201 00C0                  		andi.b	#$C0,d1
000156B2 6600                       		bne.s	locret_1314E
000156B4 0C40 FC00                  		cmpi.w	#-$400,d0
000156B8 6E00                       		bgt.s	locret_1314E
000156BA 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000156C0 08E8 0000 0022             		bset	#0,obStatus(a0)
000156D0 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
000156D6 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
000156DC                            		
000156DC                            locret_1314E:
000156DC 4E75                       		rts	
000156DE                            ; End of function Sonic_MoveRight
000156DE                            ; End of function Sonic_MoveRight
000156DE                            		include	"_incObj\Sonic RollSpeed.asm"
000156DE                            ; ---------------------------------------------------------------------------
000156DE                            ; Subroutine to	change Sonic's speed as he rolls
000156DE                            ; ---------------------------------------------------------------------------
000156DE                            
000156DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156DE                            
000156DE                            
000156DE                            Sonic_RollSpeed:
000156DE 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000156E2 E346                       		asl.w	#1,d6
000156E4 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
000156E6 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000156EA E444                       		asr.w	#2,d4
000156EC 4A38 F7CA                  		tst.b	(f_jumponly).w
000156F0 6600 0000                  		bne.w	loc_131CC
000156F4 4A68 003E                  		tst.w	$3E(a0)
000156F8 6600                       		bne.s	@notright
000156FA 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015700 6700                       		beq.s	@notleft	; if not, branch
00015702 6100 0000                  		bsr.w	Sonic_RollLeft
00015706                            
00015706                            	@notleft:
00015706 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001570C 6700                       		beq.s	@notright	; if not, branch
0001570E 6100 0000                  		bsr.w	Sonic_RollRight
00015712                            
00015712                            	@notright:
00015712 3028 0020                  		move.w	obInertia(a0),d0
00015716 6700                       		beq.s	loc_131AA
00015718 6B00                       		bmi.s	loc_1319E
0001571A 9045                       		sub.w	d5,d0
0001571C 6400                       		bcc.s	loc_13198
0001571E 303C 0000                  		move.w	#0,d0
00015722                            
00015722                            loc_13198:
00015722 3140 0020                  		move.w	d0,obInertia(a0)
00015726 6000                       		bra.s	loc_131AA
00015728                            ; ===========================================================================
00015728                            
00015728                            loc_1319E:
00015728 D045                       		add.w	d5,d0
0001572A 6400                       		bcc.s	loc_131A6
0001572C 303C 0000                  		move.w	#0,d0
00015730                            
00015730                            loc_131A6:
00015730 3140 0020                  		move.w	d0,obInertia(a0)
00015734                            
00015734                            loc_131AA:
00015734 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015738 6600                       		bne.s	loc_131CC	; if yes, branch
0001573A 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015740 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015746 117C 0009 0017             		move.b	#9,obWidth(a0)
0001574C 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015752 5B68 000C                  		subq.w	#5,obY(a0)
00015756                            
00015756                            loc_131CC:
00015756 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
0001575C 6700                       		beq.s	@cont2
0001575E 6400                       		bcc.s	@cont1
00015760 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015764                            		
00015764                            @cont1:
00015764 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015768                            		
00015768                            @cont2:
00015768 1028 0026                  		move.b	obAngle(a0),d0
0001576C 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015772 C1E8 0020                  		muls.w	obInertia(a0),d0
00015776 E080                       		asr.l	#8,d0
00015778 3140 0012                  		move.w	d0,obVelY(a0)
0001577C C3E8 0020                  		muls.w	obInertia(a0),d1
00015780 E081                       		asr.l	#8,d1
00015782 0C41 1000                  		cmpi.w	#$1000,d1
00015786 6F00                       		ble.s	loc_131F0
00015788 323C 1000                  		move.w	#$1000,d1
0001578C                            
0001578C                            loc_131F0:
0001578C 0C41 F000                  		cmpi.w	#-$1000,d1
00015790 6C00                       		bge.s	loc_131FA
00015792 323C F000                  		move.w	#-$1000,d1
00015796                            
00015796                            loc_131FA:
00015796 3141 0010                  		move.w	d1,obVelX(a0)
0001579A 6000 FDDA                  		bra.w	loc_1300C
0001579E                            ; End of function Sonic_RollSpeed
0001579E                            
0001579E                            
0001579E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001579E                            
0001579E                            
0001579E                            Sonic_RollLeft:
0001579E 3028 0020                  		move.w	obInertia(a0),d0
000157A2 6700                       		beq.s	loc_1320A
000157A4 6A00                       		bpl.s	loc_13218
000157A6                            
000157A6                            loc_1320A:
000157A6 08E8 0000 0022             		bset	#0,obStatus(a0)
000157AC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000157B2 4E75                       		rts	
000157B4                            ; ===========================================================================
000157B4                            
000157B4                            loc_13218:
000157B4 9044                       		sub.w	d4,d0
000157B6 6400                       		bcc.s	loc_13220
000157B8 303C FF80                  		move.w	#-$80,d0
000157BC                            
000157BC                            loc_13220:
000157BC 3140 0020                  		move.w	d0,obInertia(a0)
000157C0 4E75                       		rts	
000157C2                            ; End of function Sonic_RollLeft
000157C2                            
000157C2                            
000157C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C2                            
000157C2                            
000157C2                            Sonic_RollRight:
000157C2 3028 0020                  		move.w	obInertia(a0),d0
000157C6 6B00                       		bmi.s	loc_1323A
000157C8 08A8 0000 0022             		bclr	#0,obStatus(a0)
000157CE 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000157D4 4E75                       		rts	
000157D6                            ; ===========================================================================
000157D6                            
000157D6                            loc_1323A:
000157D6 D044                       		add.w	d4,d0
000157D8 6400                       		bcc.s	loc_13242
000157DA 303C 0080                  		move.w	#$80,d0
000157DE                            
000157DE                            loc_13242:
000157DE 3140 0020                  		move.w	d0,obInertia(a0)
000157E2 4E75                       		rts	
000157E4                            ; End of function Sonic_RollRight
000157E4                            ; End of function Sonic_RollRight
000157E4                            		include	"_incObj\Sonic JumpDirection.asm"
000157E4                            ; ---------------------------------------------------------------------------
000157E4                            ; Subroutine to	change Sonic's direction while jumping
000157E4                            ; ---------------------------------------------------------------------------
000157E4                            
000157E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E4                            
000157E4                            
000157E4                            Sonic_JumpDirection:
000157E4 3C38 F760                  		move.w	($FFFFF760).w,d6
000157E8 3A38 F762                  		move.w	($FFFFF762).w,d5
000157EC E345                       		asl.w	#1,d5
000157EE 3028 0010                  		move.w	$10(a0),d0	
000157F2 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
000157F8 6700                       		beq.s	loc_13278; if not, branch	
000157FA 08E8 0000 0022             		bset	#0,$22(a0)	
00015800 9045                       		sub.w	d5,d0	
00015802 3206                       		move.w	d6,d1	
00015804 4441                       		neg.w	d1	
00015806 B041                       		cmp.w	d1,d0	
00015808 6E00                       		bgt.s	loc_13278	
0001580A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
0001580C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
0001580E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015810 3001                       		move.w	d1,d0
00015812                            
00015812                            loc_13278:
00015812 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015818 6700                       		beq.s	Obj01_JumpMove; if not, branch	
0001581A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015820 D045                       		add.w	d5,d0	
00015822 B046                       		cmp.w	d6,d0	
00015824 6D00                       		blt.s	Obj01_JumpMove
00015826 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015828 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
0001582A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
0001582C 3006                       		move.w	d6,d0
0001582E                            
0001582E                            Obj01_JumpMove:
0001582E 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015832                            
00015832                            Obj01_ResetScr2:
00015832 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015838 6700                       		beq.s	loc_132A4	; if yes, branch
0001583A 6400                       		bcc.s	loc_132A0
0001583C 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015840                            
00015840                            loc_132A0:
00015840 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015844                            
00015844                            loc_132A4:
00015844 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
0001584A 6500                       		bcs.s	locret_132D2	; if yes, branch
0001584C 3028 0010                  		move.w	obVelX(a0),d0
00015850 3200                       		move.w	d0,d1
00015852 EA41                       		asr.w	#5,d1
00015854 6700                       		beq.s	locret_132D2
00015856 6B00                       		bmi.s	loc_132C6
00015858 9041                       		sub.w	d1,d0
0001585A 6400                       		bcc.s	loc_132C0
0001585C 303C 0000                  		move.w	#0,d0
00015860                            
00015860                            loc_132C0:
00015860 3140 0010                  		move.w	d0,obVelX(a0)
00015864 4E75                       		rts	
00015866                            ; ===========================================================================
00015866                            
00015866                            loc_132C6:
00015866 9041                       		sub.w	d1,d0
00015868 6500                       		bcs.s	loc_132CE
0001586A 303C 0000                  		move.w	#0,d0
0001586E                            
0001586E                            loc_132CE:
0001586E 3140 0010                  		move.w	d0,obVelX(a0)
00015872                            
00015872                            locret_132D2:
00015872 4E75                       		rts	
00015874                            ; End of function Sonic_JumpDirection
00015874                            ; End of function Sonic_JumpDirection
00015874                            		include "_incObj\Sonic Peelout.asm"
00015874                            ; ---------------------------------------------------------------------------
00015874                            ; Subroutine to make Sonic perform a peelout
00015874                            ; ---------------------------------------------------------------------------
00015874                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015874                            
00015874                            Sonic_Peelout:
00015874 0828 0001 0039             		btst	#1,$39(a0)
0001587A 6600                       		bne.s	SCDPeelout_Launch
0001587C 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015882 6600                       		bne.s	@return
00015884 1038 F603                  		move.b	($FFFFF603).w,d0
00015888 0200 0070                  		andi.b	#%01110000,d0
0001588C 6700 0000                  		beq.w	@return
00015890 117C 0001 001C             		move.b	#1,$1C(a0)
00015896 317C 0000 003A             		move.w	#0,$3A(a0)
0001589C 303C 00D2                  		move.w	#$D2,d0
000158A0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
000158A6                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
000158A6 588F                       		addq.l	#4,sp
000158A8 08E8 0001 0039             		bset	#1,$39(a0)
000158AE                            		
000158AE 4268 0020                  		clr.w	obInertia(a0)
000158B2                             
000158B2 6100 0000                  		bsr.w	Sonic_LevelBound
000158B6 6100 0000                  		bsr.w	Sonic_AnglePos
000158BA                             
000158BA                            	@return:
000158BA 4E75                       		rts	
000158BC                            ; ---------------------------------------------------------------------------
000158BC                             
000158BC                            SCDPeelout_Launch:
000158BC 0828 0001 0039             		btst	#1,$39(a0)
000158C2 1038 F602                  		move.b	($FFFFF602).w,d0
000158C6 0800 0000                  		btst	#0,d0
000158CA 6600 0000                  		bne.w	SCDPeelout_Charge
000158CE 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
000158D4 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
000158DA 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
000158DE 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
000158E4 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
000158EA 3028 0020                  		move.w	obInertia(a0),d0
000158EE 0440 0800                  		subi.w	#$800,d0
000158F2 D040                       		add.w	d0,d0
000158F4 0240 1F00                  		andi.w	#$1F00,d0
000158F8 4440                       		neg.w	d0
000158FA 0640 2000                  		addi.w	#$2000,d0
000158FE 31C0 C904                  		move.w	d0,($FFFFC904).w
00015902 0828 0000 0022             		btst	#0,$22(a0)
00015908 6700                       		beq.s	@dontflip
0001590A 4468 0020                  		neg.w	obInertia(a0)
0001590E                             
0001590E                            @dontflip:
0001590E 08A8 0007 0022             		bclr	#7,$22(a0)
00015914 303C 00D3                  		move.w	#$D3,d0
00015918 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001591E                            	;	sfx 	sfx_PeeloutRelease
0001591E 1028 0026                  		move.b	obAngle(a0),d0
00015922 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015928 C3E8 0020                  		muls.w	obInertia(a0),d1
0001592C E081                       		asr.l	#8,d1
0001592E 3141 0010                  		move.w	d1,obVelX(a0)
00015932 C1E8 0020                  		muls.w	obInertia(a0),d0
00015936 E080                       		asr.l	#8,d0
00015938 3140 0012                  		move.w	d0,obVelY(a0)	
0001593C 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015940                            ; ---------------------------------------------------------------------------
00015940                             
00015940                            SCDPeelout_Charge:				; If still charging the dash...
00015940 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015944 3401                       		move.w	d1,d2
00015946 D241                       		add.w	d1,d1
00015948 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
0001594C 6700                       		beq.s	@noshoes
0001594E E242                       		asr.w	#1,d2
00015950 9242                       		sub.w	d2,d1
00015952                            
00015952                            @noshoes:
00015952 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015958 B268 0020                  		cmp.w	obInertia(a0),d1
0001595C 6E00                       		bgt.s	@inctimer
0001595E 3141 0020                  		move.w	d1,obInertia(a0)
00015962                            
00015962                            @inctimer:
00015962 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015966 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
0001596C 6500                       		bcs.s	SCDPeelout_ResetScr
0001596E 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015974 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
0001597A                            		
0001597A                            SCDPeelout_Stop_Sound:
0001597A 303C 00D4                  		move.w	#$D4,d0
0001597E 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015984                            	;	sfx 	sfx_PeeloutStop
00015984 4268 0020                  		clr.w	obInertia(a0)
00015988                            
00015988                            SCDPeelout_ResetScr:
00015988 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
0001598A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015990 6700                       		beq.s	@finish
00015992 6400                       		bcc.s	@skip
00015994 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015998                             
00015998                            	@skip:
00015998 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001599C                             
0001599C                            	@finish:
0001599C 6100 0000                  		bsr.w	Sonic_LevelBound
000159A0 6100 0000                  		bsr.w	Sonic_AnglePos
000159A4 4E75                       		rts
000159A6                            		
000159A6                            		
000159A6                            		include "_incObj\Sonic Spindash.asm"
000159A6                            ; ---------------------------------------------------------------------------
000159A6                            ; Subroutine to make Sonic perform a spindash
000159A6                            ; ---------------------------------------------------------------------------
000159A6                             
000159A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159A6                             
000159A6                             
000159A6                            Sonic_SpinDash:
000159A6 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
000159AA 6600                       		bne.s	loc2_1AC8E		; if set, branch
000159AC 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
000159B2 6600                       		bne.s	locret2_1AC8C		; if not, return
000159B4 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
000159B8 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
000159BC 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
000159C0 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
000159C6 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
000159CA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
000159D0 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
000159D2 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
000159D8 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
000159DE                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
000159DE                            		;bcs.s	loc2_1AC84		; ??? branch if carry
000159DE 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
000159E4                            						; the smoke/dust object
000159E4                            loc2_1AC84:
000159E4 6100 0000                  		bsr.w	Sonic_LevelBound
000159E8 6100 0000                  		bsr.w	Sonic_AnglePos
000159EC                            
000159EC                            locret2_1AC8C:
000159EC 4E75                       		rts	
000159EE                            ; ---------------------------------------------------------------------------
000159EE                            
000159EE                            loc2_1AC8E:	
000159EE 117C 001F 001C             		move.b	#$1F,$1C(a0)
000159F4 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
000159F8 0800 0001                  		btst	#1,d0			; check down button
000159FC 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015A00 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015A06 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015A0C 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015A12 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015A16 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015A1C 7000                       		moveq	#0,d0
00015A1E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015A22 D040                       		add.w	d0,d0			; double it
00015A24 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015A2A 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015A2E 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015A32 D040                       		add.w	d0,d0			; double it
00015A34 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015A38 4440                       		neg.w	d0			; negate it
00015A3A 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015A3E 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015A42 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015A48 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015A4A 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015A4E                            
00015A4E                            loc2_1ACF4:
00015A4E 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015A54 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015A5A 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015A5E 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015A64 1028 0026                  		move.b	obAngle(a0),d0
00015A68 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015A6E C3E8 0020                  		muls.w	obInertia(a0),d1
00015A72 E081                       		asr.l	#8,d1
00015A74 3141 0010                  		move.w	d1,obVelX(a0)
00015A78 C1E8 0020                  		muls.w	obInertia(a0),d0
00015A7C E080                       		asr.l	#8,d0
00015A7E 3140 0012                  		move.w	d0,obVelY(a0)
00015A82                            	
00015A82 6000                       		bra.s	loc2_1AD78
00015A84                            ; ===========================================================================
00015A84                            Dash_Speeds:
00015A84 0700                       		dc.w  $700		; 0
00015A86 0780                       		dc.w  $780		; 1
00015A88 0800                       		dc.w  $800		; 2
00015A8A 0880                       		dc.w  $880		; 3
00015A8C 0900                       		dc.w  $900		; 4
00015A8E 0980                       		dc.w  $980		; 5
00015A90 0A00                       		dc.w  $A00		; 6
00015A92 0A80                       		dc.w  $A80		; 7
00015A94 0B00                       		dc.w  $B00		; 8
00015A96                            ; ===========================================================================
00015A96                            
00015A96                            loc2_1AD30:				; If still charging the dash...
00015A96 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015A9A 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015A9C 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015AA0 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015AA2 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015AA6 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015AA8 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015AAE                            
00015AAE                            loc2_1AD48:
00015AAE 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015AB2 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015AB6 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015ABA 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015AC0 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015AC4 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015ACA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015AD0 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015AD6 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015ADC 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015ADE 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015AE4                            
00015AE4                            loc2_1AD78:
00015AE4 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015AE6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015AEC 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015AEE 6400                       		bcc.s	loc2_1AD88
00015AF0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015AF4                            
00015AF4                            loc2_1AD88:
00015AF4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015AF8                            
00015AF8                            loc2_1AD8C:
00015AF8 6100 0000                  		bsr.w	Sonic_LevelBound
00015AFC 6100 0000                  		bsr.w	Sonic_AnglePos
00015B00                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015B00 4E75                       		rts
00015B02                            ; End of subroutine Sonic_SpinDash
00015B02                            ; End of subroutine Sonic_SpinDash
00015B02                            		include	"_incObj\Sonic HomingAttack.asm"
00015B02                            ; ===========================================================================
00015B02                            ; ---------------------------------------------------------------------------
00015B02                            ; Subroutine to perform Homing Attack
00015B02                            ; ---------------------------------------------------------------------------
00015B02                            
00015B02                            ;HomingAttackType = 1 ; 0 is Sonic Winter Adventures, 1 is Sonic and the Mystic Gems
00015B02                            
00015B02                            Sonic_HomingAttack:     
00015B02 4A38 F5C9                  		tst.b	(v_gshield)
00015B06 6700                       		beq.s	@Return2
00015B08 0C38 0002 F5CD             		cmpi.b	#2,(v_homingattack).w	; already Homing?
00015B0E 6700                       		beq.s	@Homing_Process		; if yes, branch
00015B10 0238 0070 F603             		andi.b	#btnABC,(v_jpadpress2).w	; is A, B or C pressed?
00015B16 6600                       		bne.s	@Homing_Perform
00015B18 4E75                       		rts
00015B1A                            	@Return2:
00015B1A 4E75                       		rts
00015B1C                            ; ---------------------------------------------------------------------------
00015B1C                            @Homing_Process:
00015B1C 5328 001E                  		subq.b	#1,obTimeFrame(a0)		; is timer over?
00015B20 6600                       		bne.s	@SetSpeeds		; if not, branch
00015B22 4238 F5CD                  		clr.b	(v_homingattack).w
00015B26 4E75                       		rts
00015B28                            
00015B28                            	@SetSpeeds:
00015B28 3268 003A                  		movea.w	$3A(a0),a1		; load object to follow
00015B2C                            
00015B2C                            			
00015B2C                            
00015B2C 3229 000C                  		move.w	obY(a1),d1
00015B30 9268 000C                  		sub.w	obY(a0),d1		; d1 -> Ydist
00015B34 3429 0008                  		move.w	obX(a1),d2
00015B38 9468 0008                  		sub.w	obX(a0),d2		; d2 -> Xdist
00015B3C 4EB9 0000 3E34                             jsr     (CalcAngle).l		; Calcuate Angle
00015B42 4EB9 0000 3BA2                             jsr     (CalcSine).l		; Get Sine
00015B48 363C 0000                                  move.w	#$0,d3		; d3 -> Homing Attack Speed
00015B4C 363C 0A00                                  move.w	#$A00,d3		; d3 -> Homing Attack Speed
00015B50 C1C3                       		muls.w	d3,d0
00015B52 C3C3                       		muls.w	d3,d1
00015B54 E080                       		asr.l	#8,d0
00015B56 E081                       		asr.l	#8,d1
00015B58 3141 0012                                  move.w  d1,obVelY(a0)		; set speed
00015B5C 3140 0010                                  move.w  d0,obVelX(a0)		; set speed
00015B60 3140 0020                  		move.w	d0,obInertia(a0)
00015B64 4E75                       		rts
00015B66                            
00015B66                            ; ---------------------------------------------------------------------------
00015B66                            @Homing_Perform:
00015B66 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B6C 76FF                       		moveq	#-1,d3			; d3 will contain the direct distance for current d4,d5 (Piphagor yay)
00015B6E 78FF                       		moveq	#-1,d4			; d4 will contain the shortest X-dist
00015B70 7AFF                       		moveq	#-1,d5			; d5 will contain the shortest Y-dist
00015B72 3C3C 005F                  		move.w	#$5F,d6
00015B76 43F8 D800                  		lea	(v_lvlobjspace).w,a1	; Load in-level objects RAM
00015B7A 3C3C 005F                  		move.w	#$5F,d6			; do $60 objects
00015B7E                            		
00015B7E                            	@ObjectsLoop:                  
00015B7E 4A29 0001                  		tst.b	1(a1)			; is object on-screen?
00015B82 6A00                       		bpl.s	@NextObject		; if yes, branch
00015B84 4A29 0020                  		tst.b	obColType(a1)			; load touch response
00015B88 6600                       		bne.s	@Homing_TestObject	; if touch response is not zero, branch
00015B8A                            
00015B8A                            	@NextObject:
00015B8A 43E9 0040                  		lea	$40(a1),a1		; load next object slot
00015B8E 51CE FFEE                  		dbf	d6,@ObjectsLoop		; repeat for all objects in RAM
00015B92                            		
00015B92 0C83 0000 6400             		cmpi.l	#$A0*$A0,d3		; if Distance ^ 2 > $A0 ^ 2, quit
00015B98 6200 0000                  		bhi.w	Sonic_JumpDash
00015B9C                            
00015B9C                            
00015B9C                            
00015B9C 117C 003C 001E             		move.b	#60,obTimeFrame(a0)		; follow object for 60 frames
00015BA2 11FC 0002 F5CD             		move.b  #2,(v_homingattack).w	; set flag as #2 (Homing Attack)
00015BA8 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015BAC 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015BB2                            
00015BB2                            
00015BB2                            ; ---------------------------------------------------------------------------
00015BB2                            @Homing_TestObject:
00015BB2 45FA 0000                  		lea	@Homing_ObjectList(pc),a2
00015BB6 1011                       		move.b	(a1),d0
00015BB8                            		
00015BB8                            	@CheckID:
00015BB8 B01A                       		cmp.b	(a2)+,d0		; compare current obj ID to one in list
00015BBA 6700                       		beq.s	@CalcXDist		; if object is in list, branch
00015BBC 62FA                       		bhi.s	@CheckID		; if current obj ID is higer, go on looking
00015BBE 60CA                       		bra.s	@NextObject		; the object is not in list, quit
00015BC0                            		
00015BC0                            	@CalcXDist:
00015BC0 3229 0008                  		move.w	obX(a1),d1		; d1 -> ObjX
00015BC4 9268 0008                  		sub.w	obX(a0),d1		; d1 -> ObjX - SonX
00015BC8 6A00                       		bpl.s	@ObjAhead
00015BCA                            
00015BCA                            	; Object is behind Sonic
00015BCA 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015BD0 67B8                       		beq.s	@NextObject		; if not, we can't home at object
00015BD2 6000                       		bra.s	@CalcYDist
00015BD4                            
00015BD4                            	@ObjAhead:
00015BD4 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced right?
00015BDA 66AE                       		bne.s	@NextObject		; if not, we can't home at object
00015BDC                            
00015BDC                            	@CalcYDist:
00015BDC 3429 000C                  		move.w	obY(a1),d2		; d2 -> ObjY
00015BE0 9468 000C                  		sub.w	obY(a0),d2		; d2 -> ObjY - SonY
00015BE4                            		
00015BE4                            	; Calculate absolute distance ( d1 * d1 + d2 * d2 )
00015BE4 3002                       		move.w	d2,d0			; d0 -> d2
00015BE6 4840                       		swap	d0
00015BE8 3001                       		move.w	d1,d0			; d0 -> d2 d1
00015BEA C3C1                       		muls.w	d1,d1			; d1 -> d1 * d1
00015BEC C5C2                       		muls.w	d2,d2			; d2 -> d2 * d2
00015BEE D481                       		add.l	d1,d2			; d2 -> d1 * d1 + d2 * d2
00015BF0 B483                       		cmp.l	d3,d2			; is new distance shorter after all?
00015BF2 6400 FF96                  		bcc.w	@NextObject		; if not, branch
00015BF6                            
00015BF6 2602                       		move.l	d2,d3			; set new distance
00015BF8 3800                       		move.w	d0,d4			; set new Xdist
00015BFA 4840                       		swap	d0
00015BFC 3A00                       		move.w	d0,d5			; set new Ydist
00015BFE 3149 003A                  		move.w	a1,$3A(a0)		; save obj ID
00015C02 6000 FF86                  		bra.w	@NextObject
00015C06                            
00015C06                            
00015C06                            ; ---------------------------------------------------------------------------
00015C06                            ; Object ids that are available for homming
00015C06                            ; NOTE: They should go in increasing order (1,2,3..)
00015C06                            ; ---------------------------------------------------------------------------
00015C06                            
00015C06                            @Homing_ObjectList:
00015C06 1E1F 2226 2B2C 2D40 4243   		dc.b	$1E, $1F, $22, $26, $2B, $2C, $2D, $40, $42, $43
00015C10 5055 6078                  		dc.b	$50, $55, $60, $78
00015C14 FF                         		dc.b	-1	; mark end of list
00015C16 00                         		even
00015C16                            
00015C16                            
00015C16                            ; ===========================================================================
00015C16                            ; ---------------------------------------------------------------------------
00015C16                            ; Subroutine to perform Jump Dash
00015C16                            ; ---------------------------------------------------------------------------
00015C16                            
00015C16                            Sonic_JumpDash:
00015C16 4A38 F5CD                  		tst.b	(v_homingattack).w		; already Jump Dashing?
00015C1A 6600                       		bne.s	@Return			; if yes, branch
00015C1C 11FC 0001 F5CD             		move.b	#1,(v_homingattack).w
00015C22 303C 0800                  		move.w	#$800,d0		; set Jump Dash speed
00015C26 0828 0006 0022             		btst	#6,obStatus(a0)		; is Sonic underwater
00015C2C 6700                       		beq.s	@ChkShoes
00015C2E 303C 0600                  		move.w	#$600,d0		; set JD speed for underwater
00015C32                            	
00015C32                            	@ChkShoes:
00015C32 4A38 FE2E                  		tst.b	(v_shoes).w		; does Sonic have speed	shoes?
00015C36 6700                       		beq.s	@SetSpeeds		; if not, branch
00015C38 0640 0200                  		addi.w	#$200,d0
00015C3C                            
00015C3C                            	;@ChkOrientation:
00015C3C                            		;btst	#0,obStatus(a0)
00015C3C                            		;beq.s	@SetSpeeds
00015C3C                            		;neg.w	d0
00015C3C                            
00015C3C                            	@SetSpeeds:
00015C3C 3140 0012                  		move.w	d0,obVelY(a0)
00015C40 3140 0020                  		move.w	d0,obInertia(a0)
00015C44                            		;move.w	#0,obVelY(a0)
00015C44 303C 00BC                  		move.w	#$BC,d0			; play JD sound
00015C48 4EF9 0000 12A0             		jmp	(PlaySound_Special).l   ;
00015C4E                            
00015C4E                            	@Return:
00015C4E 4E75                       		rts
00015C50                            
00015C50                            ; -------------------------------------------------------------------------
00015C50                            ; Subroutine to stop Sonic, bounce him up and to give him the ability to
00015C50                            ; Jumpdash again when he has performed a Jumpdash
00015C50                            ; -------------------------------------------------------------------------
00015C50                            
00015C50                            BounceJD:
00015C50 0C38 0002 F5CD             		cmp.b	#2,(v_homingattack).w; was HA flag set?
00015C56 6600                       		bne.s	BounceJD_End	; if not, branch
00015C58 4238 F5CD                  		clr.b	(v_homingattack).w	; if yes, clear HA flag (allow Sonic to HA again)
00015C5C 4268 0010                  		clr.w	obVelX(a0)		; clear X-velocity (stop sonic)
00015C60 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015C66 303C FF10                  		move.w	#-$F0,d0
00015C6A 0828 0000 0022             		btst	#0,obStatus(a0)		; is Sonic faced left?
00015C70 6600                       		bne.s	@MoveAhead		; if not, we can't move right
00015C72 4440                       		neg.w	d0
00015C74                            
00015C74                            	@MoveAhead:
00015C74 3140 0010                  		move.w	d0,obVelX(a0)
00015C78                            	@Cont:
00015C78 317C F810 0012             		move.w	#-$7F0,obVelY(a0)	; move sonic upwards
00015C7E 0828 0006 0022             		btst	#6,obStatus(a0)	; is sonic underwater?
00015C84 6700                       		beq.s	BounceJD_Shoes	; if not, branch
00015C86 317C FAE0 0012             		move.w	#-$520,obVelY(a0)
00015C8C                            		
00015C8C                            BounceJD_Shoes:
00015C8C 4A38 FE2E                  		tst.b	(v_shoes).w	; does sonic has speed shoes?
00015C90 6700                       		beq.s	BounceJD_End	; if not, branch
00015C92 317C F7E0 0012             		move.w	#-$820,obVelY(a0)	; use -$620 for Y-velocity (move sonic upwards)
00015C98                            		
00015C98                            BounceJD_End:
00015C98 4E75                       		rts			; return
00015C9A                            ; End of function BounceJD
00015C9A                            ; End of function BounceJD
00015C9A                            
00015C9A                            Sonic_AirRoll:
00015C9A 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015CA0 6600                               bne.s   AirRoll_Return   ; if not, return
00015CA2                            
00015CA2                            AirRoll_CheckBtn:
00015CA2 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015CA6 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015CAA 6700                               beq.s	AirRoll_Return
00015CAC 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015CB2                                   ; move.w	#$BC,d0
00015CB2                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015CB2                            
00015CB2                            AirRoll_Return:
00015CB2 4E75                               rts
00015CB4                            ; ===========================================================================
00015CB4                            ; ---------------------------------------------------------------------------
00015CB4                            ; Unused subroutine to squash Sonic
00015CB4                            ; ---------------------------------------------------------------------------
00015CB4 1028 0026                  		move.b	obAngle(a0),d0
00015CB8 0600 0020                  		addi.b	#$20,d0
00015CBC 0200 00C0                  		andi.b	#$C0,d0
00015CC0 6600                       		bne.s	locret_13302
00015CC2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015CC6 4A41                       		tst.w	d1
00015CC8 6A00                       		bpl.s	locret_13302
00015CCA 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015CD0 317C 0000 0010             		move.w	#0,obVelX(a0)
00015CD6 317C 0000 0012             		move.w	#0,obVelY(a0)
00015CDC 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015CE2                            
00015CE2                            locret_13302:
00015CE2 4E75                       		rts		
00015CE4                            		include	"_incObj\Sonic LevelBound.asm"
00015CE4                            ; ---------------------------------------------------------------------------
00015CE4                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015CE4                            ; ---------------------------------------------------------------------------
00015CE4                            
00015CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CE4                            
00015CE4                            
00015CE4                            Sonic_LevelBound:
00015CE4 2228 0008                  		move.l	obX(a0),d1
00015CE8 3028 0010                  		move.w	obVelX(a0),d0
00015CEC 48C0                       		ext.l	d0
00015CEE E180                       		asl.l	#8,d0
00015CF0 D280                       		add.l	d0,d1
00015CF2 4841                       		swap	d1
00015CF4 3038 F728                  		move.w	(v_limitleft2).w,d0
00015CF8 0640 0010                  		addi.w	#$10,d0
00015CFC B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015CFE 6200                       		bhi.s	@sides		; if yes, branch
00015D00 3038 F72A                  		move.w	(v_limitright2).w,d0
00015D04 0640 0128                  		addi.w	#$128,d0
00015D08 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015D0C 6600                       		bne.s	@screenlocked
00015D0E 0640 0040                  		addi.w	#$40,d0
00015D12                            
00015D12                            	@screenlocked:
00015D12 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015D14 6300                       		bls.s	@sides		; if yes, branch
00015D16                            
00015D16                            	@chkbottom:
00015D16 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015D1A 0640 00E0                  		addi.w	#$E0,d0
00015D1E B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015D22 6D00                       		blt.s	@bottom		; if yes, branch
00015D24 4E75                       		rts	
00015D26                            ; ===========================================================================
00015D26                            
00015D26                            @bottom:
00015D26 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015D2A 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015D2E B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015D30 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015D32 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
00015D38 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015D3C 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
00015D42 6500 0000                  		bcs.w	Kill_transport
00015D46 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015D4A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015D50 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015D56 4E75                       		rts	
00015D58                            @dontkill: 
00015D58 4E75                       		rts
00015D5A                            ; ===========================================================================
00015D5A                            
00015D5A                            @sides:
00015D5A 3140 0008                  		move.w	d0,obX(a0)
00015D5E 317C 0000 000A             		move.w	#0,obX+2(a0)
00015D64 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015D6A 317C 0000 0020             		move.w	#0,obInertia(a0)
00015D70 60A4                       		bra.s	@chkbottom
00015D72                            
00015D72                            Kill_transport: 
00015D72 4EF9 0000 0000                     	jmp        (KillSonic).l
00015D78                            
00015D78                            ; End of function Sonic_LevelBound
00015D78                            ; End of function Sonic_LevelBound
00015D78                            		include	"_incObj\Sonic Roll.asm"
00015D78                            ; ---------------------------------------------------------------------------
00015D78                            ; Subroutine allowing Sonic to roll when he's moving
00015D78                            ; ---------------------------------------------------------------------------
00015D78                            
00015D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D78                            
00015D78                            
00015D78                            Sonic_Roll:
00015D78 4A38 F7CA                  		tst.b	(f_jumponly).w
00015D7C 6600                       		bne.s	@noroll
00015D7E 3028 0020                  		move.w	obInertia(a0),d0
00015D82 6A00                       		bpl.s	@ispositive
00015D84 4440                       		neg.w	d0
00015D86                            
00015D86                            	@ispositive:
00015D86 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015D8A 6500                       		bcs.s	@noroll		; if not, branch
00015D8C 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015D90 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015D94 6600                       		bne.s	@noroll		; if yes, branch
00015D96 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015D9C 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015D9E                            
00015D9E                            	@noroll:
00015D9E 4E75                       		rts	
00015DA0                            ; ===========================================================================
00015DA0                            
00015DA0                            Sonic_ChkRoll:
00015DA0 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015DA6 6700                       		beq.s	@roll		; if not, branch
00015DA8 4E75                       		rts	
00015DAA                            ; ===========================================================================
00015DAA                            
00015DAA                            @roll:
00015DAA 08E8 0002 0022             		bset	#2,obStatus(a0)
00015DB0 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015DB6 117C 0007 0017             		move.b	#7,obWidth(a0)
00015DBC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015DC2 5A68 000C                  		addq.w	#5,obY(a0)
00015DD0 4A68 0020                  		tst.w	obInertia(a0)
00015DD4 6600                       		bne.s	@ismoving
00015DD6 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00015DDC                            
00015DDC                            	@ismoving:
00015DDC 4E75                       		rts	
00015DDE                            ; End of function Sonic_Roll
00015DDE                            ; End of function Sonic_Roll
00015DDE                            		include	"_incObj\Sonic Jump.asm"
00015DDE                            ; ---------------------------------------------------------------------------
00015DDE                            ; Subroutine allowing Sonic to jump
00015DDE                            ; ---------------------------------------------------------------------------
00015DDE                            
00015DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DDE                            
00015DDE                            
00015DDE                            Sonic_Jump:
00015DDE 1038 F603                  		move.b	(v_jpadpress2).w,d0
00015DE2 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015DE6 6700 0000                  		beq.w	locret_1348E	; if not, branch
00015DEA 7000                       		moveq	#0,d0
00015DEC 1028 0026                  		move.b	obAngle(a0),d0
00015DF0 0600 0080                  		addi.b	#$80,d0
00015DF4 6100 0000                  		bsr.w	sub_14D48
00015DF8 0C41 0006                  		cmpi.w	#6,d1
00015DFC 6D00 0000                  		blt.w	locret_1348E
00015E00 343C 0680                  		move.w	#$680,d2
00015E04 0828 0006 0022             		btst	#6,obStatus(a0)
00015E0A 6700                       		beq.s	loc_1341C
00015E0C 343C 0380                  		move.w	#$380,d2
00015E10                            
00015E10                            loc_1341C:
00015E10 7000                       		moveq	#0,d0
00015E12 1028 0026                  		move.b	obAngle(a0),d0
00015E16 0400 0040                  		subi.b	#$40,d0
00015E1A 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015E20 C3C2                       		muls.w	d2,d1
00015E22 E081                       		asr.l	#8,d1
00015E24 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00015E28 C1C2                       		muls.w	d2,d0
00015E2A E080                       		asr.l	#8,d0
00015E2C D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00015E30 08E8 0001 0022             		bset	#1,obStatus(a0)
00015E36 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015E3C 588F                       		addq.l	#4,sp
00015E3E 117C 0001 003C             		move.b	#1,$3C(a0)
00015E44 4228 0038                  		clr.b	$38(a0)
00015E52 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015E58 117C 0009 0017             		move.b	#9,obWidth(a0)
00015E5E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015E64 117C 0007 0017             		move.b	#7,obWidth(a0)
00015E6A                            Result_Check:
00015E6A 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
00015E6E 6700                       		beq.s   NormalJump ; If not, branch
00015E70 117C 0000 001C             		move.b  #id_Leap2,$1C(a0) ; Play the victory animation
00015E76 6000                       		bra.s   cont ; Continue
00015E78                            NormalJump:
00015E78 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
00015E7E                            cont:
00015E7E 08E8 0002 0022             		bset	#2,obStatus(a0)
00015E84 5A68 000C                  		addq.w	#5,obY(a0)
00015E88                            
00015E88                            locret_1348E:
00015E88 4E75                       		rts	
00015E8A                            ; ===========================================================================
00015E8A                            
00015E8A                            ; End of function Sonic_Jump
00015E8A                            ; End of function Sonic_Jump
00015E8A                            		include	"_incObj\Sonic JumpHeight.asm"
00015E8A                            ; ---------------------------------------------------------------------------
00015E8A                            ; Subroutine controlling Sonic's jump height/duration
00015E8A                            ; ---------------------------------------------------------------------------
00015E8A                            
00015E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E8A                            
00015E8A                            
00015E8A                            Sonic_JumpHeight:
00015E8A 4A28 003C                  		tst.b	$3C(a0)
00015E8E 6700                       		beq.s	loc_134C4
00015E90 323C FC00                  		move.w	#-$400,d1
00015E94 0828 0006 0022             		btst	#6,obStatus(a0)
00015E9A 6700                       		beq.s	loc_134AE
00015E9C 323C FE00                  		move.w	#-$200,d1
00015EA0                            
00015EA0                            loc_134AE:
00015EA0 B268 0012                  		cmp.w	obVelY(a0),d1
00015EA4 6F00                       		ble.s	locret_134C2
00015EA6 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015EAA 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00015EAE 6600                       		bne.s	locret_134C2	; if yes, branch
00015EB0 3141 0012                  		move.w	d1,obVelY(a0)
00015EB4                            
00015EB4                            locret_134C2:
00015EB4 4E75                       		rts	
00015EB6                            ; ===========================================================================
00015EB6                            
00015EB6                            loc_134C4:
00015EB6 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00015EBC 6C00                       		bge.s	locret_134D2
00015EBE 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00015EC4                            
00015EC4                            locret_134D2:
00015EC4 4E75                       		rts	
00015EC6                            ; End of function Sonic_JumpHeight
00015EC6                            ; End of function Sonic_JumpHeight
00015EC6                            		include	"_incObj\Sonic SlopeResist.asm"
00015EC6                            ; ---------------------------------------------------------------------------
00015EC6                            ; Subroutine to	slow Sonic walking up a	slope
00015EC6                            ; ---------------------------------------------------------------------------
00015EC6                            
00015EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EC6                            
00015EC6                            
00015EC6                            Sonic_SlopeResist:
00015EC6 1028 0026                  		move.b	obAngle(a0),d0
00015ECA 0600 0060                  		addi.b	#$60,d0
00015ECE 0C00 00C0                  		cmpi.b	#$C0,d0
00015ED2 6400                       		bcc.s	locret_13508
00015ED4 1028 0026                  		move.b	obAngle(a0),d0
00015ED8 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015EDE C1FC 0020                  		muls.w	#$20,d0
00015EE2 E080                       		asr.l	#8,d0
00015EE4 4A68 0020                  		tst.w	obInertia(a0)
00015EE8 6700                       		beq.s	locret_13508
00015EEA 6B00                       		bmi.s	loc_13504
00015EEC 4A40                       		tst.w	d0
00015EEE 6700                       		beq.s	locret_13502
00015EF0 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00015EF4                            
00015EF4                            locret_13502:
00015EF4 4E75                       		rts	
00015EF6                            ; ===========================================================================
00015EF6                            
00015EF6                            loc_13504:
00015EF6 D168 0020                  		add.w	d0,obInertia(a0)
00015EFA                            
00015EFA                            locret_13508:
00015EFA 4E75                       		rts	
00015EFC                            ; End of function Sonic_SlopeResist
00015EFC                            ; End of function Sonic_SlopeResist
00015EFC                            		include	"_incObj\Sonic RollRepel.asm"
00015EFC                            ; ---------------------------------------------------------------------------
00015EFC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00015EFC                            ; ---------------------------------------------------------------------------
00015EFC                            
00015EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EFC                            
00015EFC                            
00015EFC                            Sonic_RollRepel:
00015EFC 1028 0026                  		move.b	obAngle(a0),d0
00015F00 0600 0060                  		addi.b	#$60,d0
00015F04 0C00 00C0                  		cmpi.b	#-$40,d0
00015F08 6400                       		bcc.s	locret_13544
00015F0A 1028 0026                  		move.b	obAngle(a0),d0
00015F0E 4EB9 0000 3BA2             		jsr	(CalcSine).l
00015F14 C1FC 0050                  		muls.w	#$50,d0
00015F18 E080                       		asr.l	#8,d0
00015F1A 4A68 0020                  		tst.w	obInertia(a0)
00015F1E 6B00                       		bmi.s	loc_1353A
00015F20 4A40                       		tst.w	d0
00015F22 6A00                       		bpl.s	loc_13534
00015F24 E480                       		asr.l	#2,d0
00015F26                            
00015F26                            loc_13534:
00015F26 D168 0020                  		add.w	d0,obInertia(a0)
00015F2A 4E75                       		rts	
00015F2C                            ; ===========================================================================
00015F2C                            
00015F2C                            loc_1353A:
00015F2C 4A40                       		tst.w	d0
00015F2E 6B00                       		bmi.s	loc_13540
00015F30 E480                       		asr.l	#2,d0
00015F32                            
00015F32                            loc_13540:
00015F32 D168 0020                  		add.w	d0,obInertia(a0)
00015F36                            
00015F36                            locret_13544:
00015F36 4E75                       		rts	
00015F38                            ; End of function Sonic_RollRepel
00015F38                            ; End of function Sonic_RollRepel
00015F38                            		include	"_incObj\Sonic SlopeRepel.asm"
00015F38                            ; ---------------------------------------------------------------------------
00015F38                            ; Subroutine to	push Sonic down	a slope
00015F38                            ; ---------------------------------------------------------------------------
00015F38                            
00015F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F38                            
00015F38                            
00015F38                            Sonic_SlopeRepel:
00015F38 4E71                       		nop	
00015F3A 4A28 0038                  		tst.b	$38(a0)
00015F3E 6600                       		bne.s	locret_13580
00015F40 4A68 003E                  		tst.w	$3E(a0)
00015F44 6600                       		bne.s	loc_13582
00015F46 1028 0026                  		move.b	obAngle(a0),d0
00015F4A 0600 0020                  		addi.b	#$20,d0
00015F4E 0200 00C0                  		andi.b	#$C0,d0
00015F52 6700                       		beq.s	locret_13580
00015F54 3028 0020                  		move.w	obInertia(a0),d0
00015F58 6A00                       		bpl.s	loc_1356A
00015F5A 4440                       		neg.w	d0
00015F5C                            
00015F5C                            loc_1356A:
00015F5C 0C40 0280                  		cmpi.w	#$280,d0
00015F60 6400                       		bcc.s	locret_13580
00015F62 4268 0020                  		clr.w	obInertia(a0)
00015F66 08E8 0001 0022             		bset	#1,obStatus(a0)
00015F6C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00015F72                            
00015F72                            locret_13580:
00015F72 4E75                       		rts	
00015F74                            ; ===========================================================================
00015F74                            
00015F74                            loc_13582:
00015F74 5368 003E                  		subq.w	#1,$3E(a0)
00015F78 4E75                       		rts	
00015F7A                            ; End of function Sonic_SlopeRepel
00015F7A                            ; End of function Sonic_SlopeRepel
00015F7A                            		include	"_incObj\Sonic JumpAngle.asm"
00015F7A                            ; ---------------------------------------------------------------------------
00015F7A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00015F7A                            ; ---------------------------------------------------------------------------
00015F7A                            
00015F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F7A                            
00015F7A                            
00015F7A                            Sonic_JumpAngle:
00015F7A 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00015F7E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00015F80 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00015F82                            
00015F82 5400                       		addq.b	#2,d0		; increase angle
00015F84 6400                       		bcc.s	loc_13596
00015F86 7000                       		moveq	#0,d0
00015F88                            
00015F88                            loc_13596:
00015F88 6000                       		bra.s	loc_1359E
00015F8A                            ; ===========================================================================
00015F8A                            
00015F8A                            loc_13598:
00015F8A 5500                       		subq.b	#2,d0		; decrease angle
00015F8C 6400                       		bcc.s	loc_1359E
00015F8E 7000                       		moveq	#0,d0
00015F90                            
00015F90                            loc_1359E:
00015F90 1140 0026                  		move.b	d0,obAngle(a0)
00015F94                            
00015F94                            locret_135A2:
00015F94 4E75                       		rts	
00015F96                            ; End of function Sonic_JumpAngle
00015F96                            ; End of function Sonic_JumpAngle
00015F96                            		include	"_incObj\Sonic Floor.asm"
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            
00015F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F96                            
00015F96                            
00015F96                            Sonic_Floor:
00015F96 3228 0010                  		move.w	obVelX(a0),d1
00015F9A 3428 0012                  		move.w	obVelY(a0),d2
00015F9E 4EB9 0000 3E34             		jsr	(CalcAngle).l
00015FA4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00015FA8 0400 0020                  		subi.b	#$20,d0
00015FAC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00015FB0 0200 00C0                  		andi.b	#$C0,d0
00015FB4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00015FB8 0C00 0040                  		cmpi.b	#$40,d0
00015FBC 6700 0000                  		beq.w	loc_13680
00015FC0 0C00 0080                  		cmpi.b	#$80,d0
00015FC4 6700 0000                  		beq.w	loc_136E2
00015FC8 0C00 00C0                  		cmpi.b	#$C0,d0
00015FCC 6700 0000                  		beq.w	loc_1373E
00015FD0 6100 0000                  		bsr.w	Sonic_HitWall
00015FD4 4A41                       		tst.w	d1
00015FD6 6A00                       		bpl.s	loc_135F0
00015FD8 9368 0008                  		sub.w	d1,obX(a0)
00015FDC 317C 0000 0010             		move.w	#0,obVelX(a0)
00015FE2                            
00015FE2                            loc_135F0:
00015FE2 6100 0000                  		bsr.w	sub_14EB4
00015FE6 4A41                       		tst.w	d1
00015FE8 6A00                       		bpl.s	loc_13602
00015FEA D368 0008                  		add.w	d1,obX(a0)
00015FEE 317C 0000 0010             		move.w	#0,obVelX(a0)
00015FF4                            
00015FF4                            loc_13602:
00015FF4 6100 0000                  		bsr.w	Sonic_HitFloor
00015FF8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00015FFC 4A41                       		tst.w	d1
00015FFE 6A00                       		bpl.s	locret_1367E
00016000 1428 0012                  		move.b	obVelY(a0),d2
00016004 5002                       		addq.b	#8,d2
00016006 4402                       		neg.b	d2
00016008 B202                       		cmp.b	d2,d1
0001600A 6C00                       		bge.s	loc_1361E
0001600C B002                       		cmp.b	d2,d0
0001600E 6D00                       		blt.s	locret_1367E
00016010                            
00016010                            loc_1361E:
00016010 D368 000C                  		add.w	d1,obY(a0)
00016014 1143 0026                  		move.b	d3,obAngle(a0)
00016018 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001601C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016022 1003                       		move.b	d3,d0
00016024 0600 0020                  		addi.b	#$20,d0
00016028 0200 0040                  		andi.b	#$40,d0
0001602C 6600                       		bne.s	loc_1365C
0001602E 1003                       		move.b	d3,d0
00016030 0600 0010                  		addi.b	#$10,d0
00016034 0200 0020                  		andi.b	#$20,d0
00016038 6700                       		beq.s	loc_1364E
0001603A E0E8 0012                  		asr	obVelY(a0)
0001603E 6000                       		bra.s	loc_13670
00016040                            ; ===========================================================================
00016040                            
00016040                            loc_1364E:
00016040 317C 0000 0012             		move.w	#0,obVelY(a0)
00016046 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001604C 4E75                       		rts	
0001604E                            ; ===========================================================================
0001604E                            
0001604E                            loc_1365C:
0001604E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016054 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
0001605A 6F00                       		ble.s	loc_13670
0001605C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00016062                            
00016062                            loc_13670:
00016062 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016068 4A03                       		tst.b	d3
0001606A 6A00                       		bpl.s	locret_1367E
0001606C 4468 0020                  		neg.w	obInertia(a0)
00016070                            
00016070                            locret_1367E:
00016070 4E75                       		rts	
00016072                            ; ===========================================================================
00016072                            
00016072                            loc_13680:
00016072 6100 0000                  		bsr.w	Sonic_HitWall
00016076 4A41                       		tst.w	d1
00016078 6A00                       		bpl.s	loc_1369A
0001607A 9368 0008                  		sub.w	d1,obX(a0)
0001607E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016084 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001608A 4E75                       		rts	
0001608C                            ; ===========================================================================
0001608C                            
0001608C                            loc_1369A:
0001608C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016090 4A41                       		tst.w	d1
00016092 6A00                       		bpl.s	loc_136B4
00016094 9368 000C                  		sub.w	d1,obY(a0)
00016098 4A68 0012                  		tst.w	obVelY(a0)
0001609C 6A00                       		bpl.s	locret_136B2
0001609E 317C 0000 0012             		move.w	#0,obVelY(a0)
000160A4                            
000160A4                            locret_136B2:
000160A4 4E75                       		rts	
000160A6                            ; ===========================================================================
000160A6                            
000160A6                            loc_136B4:
000160A6 4A68 0012                  		tst.w	obVelY(a0)
000160AA 6B00                       		bmi.s	locret_136E0
000160AC 6100 0000                  		bsr.w	Sonic_HitFloor
000160B0 4A41                       		tst.w	d1
000160B2 6A00                       		bpl.s	locret_136E0
000160B4 D368 000C                  		add.w	d1,obY(a0)
000160B8 1143 0026                  		move.b	d3,obAngle(a0)
000160BC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000160C0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000160C6 317C 0000 0012             		move.w	#0,obVelY(a0)
000160CC 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000160D2                            
000160D2                            locret_136E0:
000160D2 4E75                       		rts	
000160D4                            ; ===========================================================================
000160D4                            
000160D4                            loc_136E2:
000160D4 6100 0000                  		bsr.w	Sonic_HitWall
000160D8 4A41                       		tst.w	d1
000160DA 6A00                       		bpl.s	loc_136F4
000160DC 9368 0008                  		sub.w	d1,obX(a0)
000160E0 317C 0000 0010             		move.w	#0,obVelX(a0)
000160E6                            
000160E6                            loc_136F4:
000160E6 6100 0000                  		bsr.w	sub_14EB4
000160EA 4A41                       		tst.w	d1
000160EC 6A00                       		bpl.s	loc_13706
000160EE D368 0008                  		add.w	d1,obX(a0)
000160F2 317C 0000 0010             		move.w	#0,obVelX(a0)
000160F8                            
000160F8                            loc_13706:
000160F8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000160FC 4A41                       		tst.w	d1
000160FE 6A00                       		bpl.s	locret_1373C
00016100 9368 000C                  		sub.w	d1,obY(a0)
00016104 1003                       		move.b	d3,d0
00016106 0600 0020                  		addi.b	#$20,d0
0001610A 0200 0040                  		andi.b	#$40,d0
0001610E 6600                       		bne.s	loc_13726
00016110 317C 0000 0012             		move.w	#0,obVelY(a0)
00016116 4E75                       		rts	
00016118                            ; ===========================================================================
00016118                            
00016118                            loc_13726:
00016118 1143 0026                  		move.b	d3,obAngle(a0)
0001611C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016120 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016126 4A03                       		tst.b	d3
00016128 6A00                       		bpl.s	locret_1373C
0001612A 4468 0020                  		neg.w	obInertia(a0)
0001612E                            
0001612E                            locret_1373C:
0001612E 4E75                       		rts	
00016130                            ; ===========================================================================
00016130                            
00016130                            loc_1373E:
00016130 6100 0000                  		bsr.w	sub_14EB4
00016134 4A41                       		tst.w	d1
00016136 6A00                       		bpl.s	loc_13758
00016138 D368 0008                  		add.w	d1,obX(a0)
0001613C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016142 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
00016148 4E75                       		rts	
0001614A                            ; ===========================================================================
0001614A                            
0001614A                            loc_13758:
0001614A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001614E 4A41                       		tst.w	d1
00016150 6A00                       		bpl.s	loc_13772
00016152 9368 000C                  		sub.w	d1,obY(a0)
00016156 4A68 0012                  		tst.w	obVelY(a0)
0001615A 6A00                       		bpl.s	locret_13770
0001615C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016162                            
00016162                            locret_13770:
00016162 4E75                       		rts	
00016164                            ; ===========================================================================
00016164                            
00016164                            loc_13772:
00016164 4A68 0012                  		tst.w	obVelY(a0)
00016168 6B00                       		bmi.s	locret_1379E
0001616A 6100 0000                  		bsr.w	Sonic_HitFloor
0001616E 4A41                       		tst.w	d1
00016170 6A00                       		bpl.s	locret_1379E
00016172 D368 000C                  		add.w	d1,obY(a0)
00016176 1143 0026                  		move.b	d3,obAngle(a0)
0001617A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001617E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016184 317C 0000 0012             		move.w	#0,obVelY(a0)
0001618A 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016190                            
00016190                            locret_1379E:
00016190 4E75                       		rts	
00016192                            ; End of function Sonic_Floor
00016192                            ; End of function Sonic_Floor
00016192                            		include	"_incObj\Sonic ResetOnFloor.asm"
00016192                            ; ---------------------------------------------------------------------------
00016192                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00016192                            ; ---------------------------------------------------------------------------
00016192                            
00016192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016192                            
00016192                            
00016192                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
00016192 4238 F5CD                  		clr.b	(v_homingattack).w
00016196 08A8 0005 0022                     	bclr    #5,$22(a0)
0001619C 08A8 0001 0022                     	bclr    #1,$22(a0)
000161A2 0828 0002 0022                     	btst    #2,$22(a0)
000161A8 6700                               	beq.s    loc_137E4
000161AA 08A8 0002 0022             		bclr	#2,obStatus(a0)
000161B0 117C 0013 0016             		move.b	#$13,obHeight(a0)
000161B6 117C 0009 0017             		move.b	#9,obWidth(a0)
000161BC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
000161C2 5B68 000C                  		subq.w	#5,obY(a0)
000161C6                            
000161C6                            loc_137E4:
000161C6 117C 0000 003C             		move.b	#0,$3C(a0)
000161CC 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
000161D2 4E75                       		rts	
000161D4                            ; End of function Sonic_ResetOnFloor
000161D4                            ; End of function Sonic_ResetOnFloor
000161D4                            		include	"_incObj\Sonic (part 2).asm"
000161D4                            ; ---------------------------------------------------------------------------
000161D4                            ; Sonic	when he	gets hurt
000161D4                            ; ---------------------------------------------------------------------------
000161D4                            
000161D4                            Sonic_Hurt:	; Routine 4
000161D4 4EB9 0000 F42A             		jsr	(SpeedToPos).l
000161DA 0668 0030 0012             		addi.w	#$30,obVelY(a0)
000161E0 0828 0006 0022             		btst	#6,obStatus(a0)
000161E6 6700                       		beq.s	loc_1380C
000161E8 0468 0020 0012             		subi.w	#$20,obVelY(a0)
000161EE                            
000161EE                            loc_1380C:
000161EE 6100 0000                  		bsr.w	Sonic_HurtStop
000161F2 6100 FAF0                  		bsr.w	Sonic_LevelBound
000161F6 6100 EFB0                  		bsr.w	Sonic_RecordPosition
000161FA 6100 0000                  		bsr.w	Sonic_Animate
000161FE 6100 0000                  		bsr.w	Sonic_LoadGfx
00016202 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00016208                            
00016208                            ; ---------------------------------------------------------------------------
00016208                            ; Subroutine to	stop Sonic falling after he's been hurt
00016208                            ; ---------------------------------------------------------------------------
00016208                            
00016208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016208                            
00016208                            
00016208                            Sonic_HurtStop:
00016208 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001620C 0640 00E0                  		addi.w	#$E0,d0
00016210                            		;cmp.w	obY(a0),d0
00016210                            		;bcs.w	KillSonic
00016210 6100 FD84                  		bsr.w	Sonic_Floor
00016214 0828 0001 0022             		btst	#1,obStatus(a0)
0001621A 6600                       		bne.s	locret_13860
0001621C 7000                       		moveq	#0,d0
0001621E 3140 0012                  		move.w	d0,obVelY(a0)
00016222 3140 0010                  		move.w	d0,obVelX(a0)
00016226 3140 0020                  		move.w	d0,obInertia(a0)
0001622A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016230 5528 0024                  		subq.b	#2,obRoutine(a0)
00016234 317C 0078 0030             		move.w	#$78,$30(a0)
0001623A                            
0001623A                            locret_13860:
0001623A 4E75                       		rts	
0001623C                            ; End of function Sonic_HurtStop
0001623C                            
0001623C                            ; ---------------------------------------------------------------------------
0001623C                            ; Sonic	when he	dies
0001623C                            ; ---------------------------------------------------------------------------
0001623C                            
0001623C                            Sonic_Death:	; Routine 6
0001623C 6100 0000                  		bsr.w	GameOver
00016240 4EB9 0000 F3F2             		jsr	(ObjectFall).l
00016246 6100 EF60                  		bsr.w	Sonic_RecordPosition
0001624A 6100 0000                  		bsr.w	Sonic_Animate
0001624E 6100 0000                  		bsr.w	Sonic_LoadGfx
00016252 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00016258                            
00016258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016258                            
00016258                            GameOver:
00016258 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001625C 0640 0100                  		addi.w	#$100,d0
00016260 B068 000C                  		cmp.w	obY(a0),d0
00016264 6400 0000                  		bcc.w	locret_13900
00016268 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
0001626E 5428 0024                  		addq.b	#2,obRoutine(a0)
00016272 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00016276 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
0001627A 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
0001627E 6600                       		bne.s	loc_138D4
00016280 317C 0000 003A             		move.w	#0,$3A(a0)
00016286 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
0001628C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016292 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
00016298 4238 FE1A                  		clr.b	(f_timeover).w
0001629C                            
0001629C                            loc_138C2:
000162A6 7003                       		moveq	#3,d0
000162A8 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000162AE                            		
000162AE                            loc_138C3:
000162B8 7003                       		moveq	#3,d0
000162BA 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
000162C0                            ; ===========================================================================
000162C0                            
000162C0                            loc_138D4:
000162C0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000162C6 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
000162CA 6700                       		beq.s	locret_13900	; if not, branch
000162CC 317C 0000 003A             		move.w	#0,$3A(a0)
000162D2 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
000162D8 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000162DE 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
000162E4 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000162EA 60B0                       		bra.s	loc_138C2
000162EC                            		
000162EC                            
000162EC                            ; ===========================================================================
000162EC                            
000162EC                            locret_13900:
000162EC 4E75                       		rts	
000162EE                            ; End of function GameOver
000162EE                            
000162EE                            ; ---------------------------------------------------------------------------
000162EE                            ; Sonic	when the level is restarted
000162EE                            ; ---------------------------------------------------------------------------
000162EE                            
000162EE                            Sonic_ResetLevel:; Routine 8
000162EE 4A68 003A                  		tst.w	$3A(a0)
000162F2 6700                       		beq.s	locret_13914
000162F4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000162F8 6600                       		bne.s	locret_13914
000162FA 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016300                            
00016300                            	locret_13914:
00016300 4E75                       		rts	
00016300 4E75                       		rts	
00016302                            		include	"_incObj\Sonic Loops.asm"
00016302                            ; ---------------------------------------------------------------------------
00016302                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016302                            ; ---------------------------------------------------------------------------
00016302                            
00016302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016302                            
00016302                            
00016302                            Sonic_Loops:
00016302 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00016308 6700                       		beq.s	@isstarlight	; if yes, branch
0001630A 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
0001630E 6600 0000                  		bne.w	@noloops	; if not, branch
00016312                            
00016312                            	@isstarlight:
00016312 3028 000C                  		move.w	obY(a0),d0
00016316 E248                       		lsr.w	#1,d0
00016318 0240 0380                  		andi.w	#$380,d0
0001631C 1228 0008                  		move.b	obX(a0),d1
00016320 0241 007F                  		andi.w	#$7F,d1
00016324 D041                       		add.w	d1,d0
00016326 43F8 A400                  		lea	(v_lvllayout).w,a1
0001632A 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001632E                            
0001632E B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016332 6700 FA6C                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016336 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001633A 6700 FA64                  		beq.w	Sonic_ChkRoll
0001633E                            
0001633E B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016342 6700                       		beq.s	@chkifleft	; if yes, branch
00016344 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
00016348 6700                       		beq.s	@chkifinair
0001634A 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016350 4E75                       		rts	
00016352                            ; ===========================================================================
00016352                            
00016352                            @chkifinair:
00016352 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
00016358 6700                       		beq.s	@chkifleft	; if not, branch
0001635A                            
0001635A 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016360 4E75                       		rts	
00016362                            ; ===========================================================================
00016362                            
00016362                            @chkifleft:
00016362 3428 0008                  		move.w	obX(a0),d2
00016366 0C02 002C                  		cmpi.b	#$2C,d2
0001636A 6400                       		bcc.s	@chkifright
0001636C                            
0001636C 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00016372 4E75                       		rts	
00016374                            ; ===========================================================================
00016374                            
00016374                            @chkifright:
00016374 0C02 00E0                  		cmpi.b	#$E0,d2
00016378 6500                       		bcs.s	@chkangle1
0001637A                            
0001637A 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016380 4E75                       		rts	
00016382                            ; ===========================================================================
00016382                            
00016382                            @chkangle1:
00016382 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
00016388 6600                       		bne.s	@chkangle2	; if yes, branch
0001638A                            
0001638A 1228 0026                  		move.b	obAngle(a0),d1
0001638E 6700                       		beq.s	@done
00016390 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
00016394 6200                       		bhi.s	@done		; if yes, branch
00016396 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
0001639C 4E75                       		rts	
0001639E                            ; ===========================================================================
0001639E                            
0001639E                            @chkangle2:
0001639E 1228 0026                  		move.b	obAngle(a0),d1
000163A2 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000163A6 6300                       		bls.s	@done		; if yes, branch
000163A8 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000163AE                            
000163AE                            @noloops:
000163AE                            @done:
000163AE 4E75                       		rts	
000163B0                            ; End of function Sonic_Loops
000163B0                            ; End of function Sonic_Loops
000163B0                            		include	"_incObj\Sonic Animate.asm"
000163B0                            ; ---------------------------------------------------------------------------
000163B0                            ; Subroutine to	animate	Sonic's sprites
000163B0                            ; ---------------------------------------------------------------------------
000163B0                            
000163B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163B0                            
000163B0                            
000163B0                            Sonic_Animate:				; XREF: Obj01_Control; et al
000163B0 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000163B6 7000                       		moveq	#0,d0
000163B8 1028 001C                  		move.b	obAnim(a0),d0
000163BC B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000163C0 6700                       		beq.s	@do		; if not, branch
000163C2 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000163C6 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
000163CA 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
000163CE                            		
000163CE 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
000163D4                            
000163D4                            	@do:
000163D4 D040                       		add.w	d0,d0
000163D6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000163DA 1011                       		move.b	(a1),d0
000163DC 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000163DE 1228 0022                  		move.b	obStatus(a0),d1
000163E2 0201 0001                  		andi.b	#1,d1
000163E6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000163EC 8328 0001                  		or.b	d1,obRender(a0)
000163F0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000163F4 6A00                       		bpl.s	@delay		; if time remains, branch
000163F6 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
000163FA                            
000163FA                            @loadframe:
000163FA 7200                       		moveq	#0,d1
000163FC 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016400 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016404 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
00016408 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
0001640C                            
0001640C                            	@next:
0001640C 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016410 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016414                            
00016414                            	@delay:
00016414 4E75                       		rts	
00016416                            ; ===========================================================================
00016416                            
00016416                            @end_FF:
00016416 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00016418 6600                       		bne.s	@end_FE		; if not, branch
0001641A 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
0001641E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016422 60E8                       		bra.s	@next
00016424                            ; ===========================================================================
00016424                            
00016424                            @end_FE:
00016424 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016426 6600                       		bne.s	@end_FD		; if not, branch
00016428 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001642C 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016430 9200                       		sub.b	d0,d1
00016432 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016436 60D4                       		bra.s	@next
00016438                            ; ===========================================================================
00016438                            
00016438                            @end_FD:
00016438 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001643A 6600                       		bne.s	@end		; if not, branch
0001643C 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016442                            
00016442                            	@end:
00016442 4E75                       		rts	
00016444                            ; ===========================================================================
00016444                            
00016444                            @walkrunroll:
00016444 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016448 6ACA                       		bpl.s	@delay		; if time remains, branch
0001644A 5200                       		addq.b	#1,d0		; is animation walking/running?
0001644C 6600 0000                  		bne.w	@rolljump	; if not, branch
00016450 7200                       		moveq	#0,d1
00016452 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016456 6B00                       		bmi.s	@ble 			; better handling of angles
00016458 6700                       		beq.s	@ble
0001645A 5300                       		subq.b	#1,d0
0001645C                            
0001645C                            	@ble:																
0001645C 1428 0022                  		move.b	obStatus(a0),d2
00016460 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00016464 6600                       		bne.s	@flip		; if yes, branch
00016466 4600                       		not.b	d0		; reverse angle
00016468                            
00016468                            	@flip:
00016468 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001646C 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
0001646E 7203                       		moveq	#3,d1
00016470                            
00016470                            	@noinvert:
00016470 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016476 B302                       		eor.b	d1,d2
00016478 8528 0001                  		or.b	d2,obRender(a0)
0001647C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
00016482 6600 0000                  		bne.w	@push		; if yes, branch
00016486                            
00016486 E808                       		lsr.b	#4,d0		; divide angle by $10
00016488 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001648C 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
00016490 6A00                       		bpl.s	@nomodspeed
00016492 4442                       		neg.w	d2		; modulus speed
00016494                            
00016494                            	@nomodspeed:
00016494 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
0001649A 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
0001649E 6400                       		bcc.s	@maxrunning	; if yes, branch
000164A0                            
000164A0 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000164A6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000164AA 6400                       		bcc.s	@running	; if yes, branch
000164AC                            
000164AC 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000164B2                            
000164B2                            	@running:
000164B2 D000                       		add.b	d0,d0
000164B4 D000                       		add.b	d0,d0
000164B6 1600                       		move.b	d0,d3
000164B8 4442                       		neg.w	d2
000164BA 0642 0780                  		addi.w	#$780,d2
000164BE 6A00                       		bpl.s	@belowmax
000164C0 7400                       		moveq	#0,d2		; max animation speed
000164C2 6000                       		bra.s	@belowmax
000164C4                            
000164C4                            	@maxrunning:
000164C4 D000                       		add.b d0,d0
000164C6 1600                       		move.b d0,d3
000164C8 4442                       		neg.w d2
000164CA 0642 0800                  		addi.w #$800, d2
000164CE 6A00                       		bpl.s @belowmax
000164D0 7400                       		moveq #0, d2 
000164D2                            
000164D2                            	@belowmax:
000164D2 E04A                       		lsr.w	#8,d2
000164D4 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000164D8 6100 FF20                  		bsr.w	@loadframe
000164DC D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
000164E0 4E75                       		rts	
000164E2                            ; ===========================================================================
000164E2                            
000164E2                            @rolljump:
000164E2 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000164E4 6600                       		bne.s	@push		; if not, branch
000164E6 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000164EA 6A00                       		bpl.s	@nomodspeed2
000164EC 4442                       		neg.w	d2
000164EE                            
000164EE                            	@nomodspeed2:
000164EE 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000164F4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000164F8 6400                       		bcc.s	@rollfast	; if yes, branch
000164FA 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016500                            
00016500                            	@rollfast:
00016500 4442                       		neg.w	d2
00016502 0642 0400                  		addi.w	#$400,d2
00016506 6A00                       		bpl.s	@belowmax2
00016508 7400                       		moveq	#0,d2
0001650A                            
0001650A                            	@belowmax2:
0001650A E04A                       		lsr.w	#8,d2
0001650C 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016510 1228 0022                  		move.b	obStatus(a0),d1
00016514 0201 0001                  		andi.b	#1,d1
00016518 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001651E 8328 0001                  		or.b	d1,obRender(a0)
00016522 6000 FED6                  		bra.w	@loadframe
00016526                            ; ===========================================================================
00016526                            
00016526                            @push:
00016526 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001652A 6B00                       		bmi.s	@negspeed
0001652C 4442                       		neg.w	d2
0001652E                            
0001652E                            	@negspeed:
0001652E 0642 0800                  		addi.w	#$800,d2
00016532 6A00                       		bpl.s	@belowmax3	
00016534 7400                       		moveq	#0,d2
00016536                            
00016536                            	@belowmax3:
00016536 EC4A                       		lsr.w	#6,d2
00016538 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001653C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016542 1228 0022                  		move.b	obStatus(a0),d1
00016546 0201 0001                  		andi.b	#1,d1
0001654A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016550 8328 0001                  		or.b	d1,obRender(a0)
00016554 6000 FEA4                  		bra.w	@loadframe
00016558                            
00016558                            ; End of function Sonic_Animate
00016558                            ; End of function Sonic_Animate
00016558                            		include	"_anim\Sonic.asm"
00016558                            ; ---------------------------------------------------------------------------
00016558                            ; Animation script - Sonic
00016558                            ; ---------------------------------------------------------------------------
00016558                            Ani_Sonic:
00016558                            
00016558 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
0001655A 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
0001655C 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
0001655E 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00016560 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00016562 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00016564 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00016566 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
00016568 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
0001656A 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
0001656C 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
0001656E 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00016570 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00016572 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00016574 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00016576 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
00016578 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
0001657A 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
0001657C 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
0001657E 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00016580 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00016582 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00016584 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00016586 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
00016588 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
0001658A 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
0001658C 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
0001658E 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00016590 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00016592 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00016594 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
00016596 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
00016598 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
0001659A 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
0001659C 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
0001659E 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000165A0 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000165A2 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000165A4 0000                       ptr_GetAir2:	dc.w SonAni_GetAir2-Ani_Sonic
000165A6 0000                       ptr_Transform:	dc.w SonAni_Transform-Ani_Sonic
000165A8                            
000165A8 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000165B6 00                         		even
000165B6 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
000165C4 00                         		even
000165C4 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000165CB 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000165D2 00                         		even
000165D2 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
000165D9 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
000165E0 00                         		even
000165E0 0D89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $D,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
000165EE 00                         		even
000165EE                            SonAni_Wait:	
000165EE 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
000165FD 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001660C 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001661B 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
0001662A 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016639 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016648 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016657 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016666 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
0001666E                            		even
0001666E 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
00016674                            		even
00016674 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
0001667A 00                         		even
0001667A 0270 71FE 01               SonAni_Duck:	dc.b $2, fr_duck2, fr_duck, afBack, 1
00016680 00                         		even
00016680 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
00016684 00                         		even
00016684 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
00016688 00                         		even
00016688 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
0001668C 00                         		even
0001668C 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
00016690 00                         		even
00016690 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
0001669A                            		even
0001669A 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000166A0 00                         		even
000166A0 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000166AA 00                         		even
000166AA 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000166B4 00                         		even
000166B4 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000166B8                            		even
000166B8 036F 8888 8888 8888 6F87+  SonAni_Leap1:	dc.b $3, fr_leap3, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap2, fr_leap3, fr_leap1, afBack, 1
000166C4                            		even
000166C4 0D87 FD00                  SonAni_Leap2:	dc.b $D, fr_leap1, afChange, id_Leap1
000166C8                            		even
000166C8 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
000166CC 00                         		even
000166CC 0B95 FD00                  SonAni_GetAir:	dc.b $B, fr_getair, afChange, id_GetAir2
000166D0                            		even
000166D0 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
000166D4 00                         		even
000166D4 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
000166D8 00                         		even
000166D8 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
000166DC 00                         		even
000166DC 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
000166E0 00                         		even
000166E0                            SonAni_WaterSlide:
000166E0 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
000166E4                            		even
000166E4 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
000166E8                            		even
000166E8 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
000166F0 00                         		even
000166F0 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
000166F4                            		even
000166F4 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016702 00                         		even
00016702 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001670E                            		even
0001670E 0298 9699 FF               SonAni_Hurt2:	dc.b 2, fr_skele1, fr_injury, fr_skele2, afEnd	
00016714 00                         		even
00016714 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016718                            		even
00016718 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
0001671C                            		even
0001671C 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016726 00                         		even
00016726 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
0001672F 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016737 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
0001673E 3334 35                    		dc.b	$33, $34, $35
00016741 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016748                            		even
00016748 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
0001674E                            		even
0001674E 0576 FD00                  SonAni_GetAir2: dc.b $5, fr_getair2, afChange, id_Roll
00016752                            		even
00016752                            SonAni_Transform:
00016752 02A1 A1A2 A3A3 A4A4 A4A5   				dc.b 2, $A1,$A1,$A2,$A3,$A3,$A4,$A4,$A4,$A5
0001675C A6A5 A7A7 A9A8 A9A8 A9A8+  		dc.b	$A6,$A5,$A7,$A7,$A9,$A8,$A9,$A8,$A9,$A8, afchange, id_Walk
00016768                            		even
00016768                            
00016768 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016768 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016768 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016768 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016768 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016768 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016768 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016768 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016768 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016768 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016768 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016768 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016768 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016768 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016768 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016768 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016768 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016768 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016768 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016768 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016768 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016768 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016768 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016768 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016768 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016768 =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016768 =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016768 =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016768 =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016768 =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016768 =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016768 =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016768 =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016768 =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016768 =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016768 =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016768 =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016768 =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016768 =00000026                  id_GetAir2:	equ (ptr_GetAir2-Ani_Sonic)/2
00016768 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016768 =00000027                  id_Transform:		equ	(ptr_Transform-Ani_Sonic)/2
00016768                            		include	"_incObj\Sonic LoadGfx.asm"
00016768                            ; ---------------------------------------------------------------------------
00016768                            ; Sonic	graphics loading subroutine
00016768                            ; ---------------------------------------------------------------------------
00016768                            
00016768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016768                            
00016768                            
00016768                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016768 7000                       		moveq	#0,d0
0001676A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001676E B038 F766                  		cmp.b	($FFFFF766).w,d0
00016772 6700                       		beq.s	locret_13C96
00016774 11C0 F766                  		move.b	d0,($FFFFF766).w
00016778 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001677E D040                       		add.w	d0,d0
00016780 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016784 7A00                       		moveq	#0,d5
00016786 1A1A                       		move.b	(a2)+,d5
00016788 5345                       		subq.w	#1,d5
0001678A 6B00                       		bmi.s	locret_13C96
0001678C 383C F000                  		move.w	#$F000,d4
00016790 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016796                            
00016796                            SPLC_ReadEntry:
00016796 7200                       		moveq	#0,d1
00016798 121A                       		move.b	(a2)+,d1
0001679A E149                       		lsl.w	#8,d1
0001679C 121A                       		move.b	(a2)+,d1
0001679E 3601                       		move.w	d1,d3
000167A0 E04B                       		lsr.w	#8,d3
000167A2 0243 00F0                  		andi.w	#$F0,d3
000167A6 0643 0010                  		addi.w	#$10,d3
000167AA 0241 0FFF                  		andi.w	#$FFF,d1
000167AE EB89                       		lsl.l	#5,d1
000167B0 D286                       		add.l	d6,d1
000167B2 3404                       		move.w	d4,d2
000167B4 D843                       		add.w	d3,d4
000167B6 D843                       		add.w	d3,d4
000167B8 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000167BE 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000167C2                            
000167C2                            locret_13C96:
000167C2 4E75                       		rts	
000167C4                            ; End of function Sonic_LoadGfx
000167C4                            ; End of function Sonic_LoadGfx
000167C4                            
000167C4                            		include	"_incObj\0A Drowning Countdown.asm"
000167C4                            ; ---------------------------------------------------------------------------
000167C4                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000167C4                            ; Sonic's mouth (LZ)
000167C4                            ; ---------------------------------------------------------------------------
000167C4                            
000167C4                            DrownCount:
000167C4 7000                       		moveq	#0,d0
000167C6 1028 0024                  		move.b	obRoutine(a0),d0
000167CA 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000167CE 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000167D2                            ; ===========================================================================
000167D2                            Drown_Index:
000167D2 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000167D4 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000167D6 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000167D8 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000167DA 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000167DC 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
000167DE 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
000167E0 0000                       			dc.w Drown_Display-Drown_Index
000167E2 0000                       			dc.w Drown_Delete-Drown_Index
000167E4                            
000167E4 =00000030                  drown_origX:		equ $30		; original x-axis position
000167E4 =00000038                  drown_time:		equ $38		; time between each number changes
000167E4                            
000167E4 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
000167E4 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
000167E4 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
000167E4 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
000167E4 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
000167E4 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
000167E4 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
000167E4                            ; ===========================================================================
000167E4                            
000167E4                            Drown_Main:	; Routine 0
000167E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000167E8 217C 0001 49C2 0004        		move.l	#Map_Bub,obMap(a0)
000167F0 317C 83F5 0002             		move.w	#$83F5,obGfx(a0)
000167F6 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
000167FC 6700                       		beq.s	Drown_IsSYZ	; if yes, branch
000167FE 317C 8348 0002             		move.w	#$8348,obGfx(a0)	; LZ
00016804                            
00016804                            	Drown_IsSYZ:	
00016804 117C 0084 0001             		move.b	#$84,obRender(a0)
0001680A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016810 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016816 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
0001681A 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
0001681C                            
0001681C 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016820 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016828 317C 0440 0002             		move.w	#$440,obGfx(a0)
0001682E 0240 007F                  		andi.w	#$7F,d0
00016832 1140 0033                  		move.b	d0,$33(a0)
00016836 6000 0000                  		bra.w	Drown_Countdown
0001683A                            ; ===========================================================================
0001683A                            
0001683A                            @smallbubble:
0001683A 1140 001C                  		move.b	d0,obAnim(a0)
0001683E 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016844 317C FF78 0012             		move.w	#-$88,obVelY(a0)
0001684A                            
0001684A                            Drown_Animate:	; Routine 2
0001684A 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016850 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00016856                            
00016856                            Drown_ChkWater:	; Routine 4
00016856 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone? TIS
0001685C 6600                       		bne.s	Normal_Water_Level	; if not, branch TIS
0001685E 3038 FF92                  		move.w	(v_watersplashpos).w,d0	;TIS
00016862 0640 0010                  		add.w	#$10,d0	;Lower it a little - TIS
00016866 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water tag surface? - TIS
0001686A 6200                       		bhi.s	Display_Next		; if so, branch TIS
0001686C                            		
0001686C                            
0001686C                            Normal_Water_Level:
0001686C 3038 F646                  		move.w	(v_waterpos1).w,d0
00016870 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016874 6500                       		bcs.s	Wobble		; if not, branch
00016876                            Display_Next:	;TIS		
00016876 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
0001687C 5E28 001C                  		addq.b	#7,obAnim(a0)
00016880 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016886 6700                       		beq.s	Drown_Display
00016888 6000                       		bra.s	Drown_Display
0001688A                            ; ===========================================================================
0001688A                            
0001688A                            Wobble:
0001688A 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
0001688E 6700                       		beq.s	@notunnel	; if not, branch
00016890 5868 0030                  		addq.w	#4,drown_origX(a0)
00016894                            
00016894                            	@notunnel:
00016894 1028 0026                  		move.b	obAngle(a0),d0
00016898 5228 0026                  		addq.b	#1,obAngle(a0)
0001689C 0240 007F                  		andi.w	#$7F,d0
000168A0 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
000168A6 1031 0000                  		move.b	(a1,d0.w),d0
000168AA 4880                       		ext.w	d0
000168AC D068 0030                  		add.w	drown_origX(a0),d0
000168B0 3140 0008                  		move.w	d0,obX(a0)
000168B4 6100                       		bsr.s	Drown_ShowNumber
000168B6 4EB9 0000 F42A             		jsr	(SpeedToPos).l
000168BC 4A28 0001                  		tst.b	obRender(a0)
000168C0 6A00                       		bpl.s	@delete
000168C2 4EF9 0000 F43E             		jmp	(DisplaySprite).l
000168C8                            
000168C8                            	@delete:
000168C8 4EF9 0000 F47E             		jmp	(DeleteObject).l
000168CE                            ; ===========================================================================
000168CE                            
000168CE                            Drown_Display:	; Routine 6, Routine $E
000168CE 6100                       		bsr.s	Drown_ShowNumber
000168D0 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000168D6 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
000168DC 4EF9 0000 F43E             		jmp	(DisplaySprite).l
000168E2                            ; ===========================================================================
000168E2                            
000168E2                            Drown_Delete:	; Routine 8, Routine $10
000168E2 4EF9 0000 F47E             		jmp	(DeleteObject).l
000168E8                            ; ===========================================================================
000168E8                            
000168E8                            Drown_AirLeft:	; Routine $C
000168E8 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
000168EE 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
000168F0 5368 0038                  		subq.w	#1,drown_time(a0)
000168F4 6600                       		bne.s	@display
000168F6 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
000168FC 5E28 001C                  		addq.b	#7,obAnim(a0)
00016900 60CC                       		bra.s	Drown_Display
00016902                            ; ===========================================================================
00016902                            
00016902                            	@display:
00016902 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016908 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001690E 4A28 0001                  		tst.b	obRender(a0)
00016912 6A00                       		bpl.s	Drown_AirLeft_Delete
00016914 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001691A                            
0001691A                            Drown_AirLeft_Delete:	
0001691A 4EF9 0000 F47E             		jmp	(DeleteObject).l
00016920                            ; ===========================================================================
00016920                            
00016920                            Drown_ShowNumber:
00016920 4A68 0038                  		tst.w	drown_time(a0)
00016924 6700                       		beq.s	@nonumber
00016926 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001692A 6600                       		bne.s	@nonumber	; if time remains, branch
0001692C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016932 6400                       		bcc.s	@nonumber
00016934                            
00016934 317C 000F 0038             		move.w	#15,drown_time(a0)
0001693A 4268 0012                  		clr.w	obVelY(a0)
0001693E 117C 0080 0001             		move.b	#$80,obRender(a0)
00016944 3028 0008                  		move.w	obX(a0),d0
00016948 9078 F700                  		sub.w	(v_screenposx).w,d0
0001694C 0640 0080                  		addi.w	#$80,d0
00016950 3140 0008                  		move.w	d0,obX(a0)
00016954 3028 000C                  		move.w	obY(a0),d0
00016958 9078 F704                  		sub.w	(v_screenposy).w,d0
0001695C 0640 0080                  		addi.w	#$80,d0
00016960 3140 000A                  		move.w	d0,obScreenY(a0)
00016964 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
0001696A                            
0001696A                            	@nonumber:
0001696A 4E75                       		rts	
0001696C                            ; ===========================================================================
0001696C                            Drown_WobbleData:
0001696C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001697C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001698C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001699C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
000169AC 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000169BC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000169CC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000169DC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000169EC 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000169FC 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016A0C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016A1C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016A2C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016A3C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016A4C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016A5C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016A6C                            ; ===========================================================================
00016A6C                            
00016A6C                            Drown_Countdown:; Routine $A
00016A6C 4A68 002C                  		tst.w	$2C(a0)
00016A70 6600 0000                  		bne.w	@loc_13F86
00016A74 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016A7A 6400 0000                  		bcc.w	@nocountdown
00016A7E 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016A84 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016A88                            
00016A88 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016A8C 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016A90 317C 003B 0038             		move.w	#59,drown_time(a0)
00016A96 317C 0001 0036             		move.w	#1,$36(a0)
00016A9C 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016AA2 0240 0001                  		andi.w	#1,d0
00016AA6 1140 0034                  		move.b	d0,$34(a0)
00016AAA 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016AAE 0C40 0019                  		cmpi.w	#25,d0
00016AB2 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016AB4 0C40 0014                  		cmpi.w	#20,d0
00016AB8 6700                       		beq.s	@warnsound
00016ABA 0C40 000F                  		cmpi.w	#15,d0
00016ABE 6700                       		beq.s	@warnsound
00016AC0 0C40 000C                  		cmpi.w	#12,d0
00016AC4 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016AC6                            
00016AC6                            	@skipmusic:
00016AD0 5328 0032                  		subq.b	#1,$32(a0)
00016AD4 6A00                       		bpl.s	@reduceair
00016AD6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016ADC 08E8 0007 0036             		bset	#7,$36(a0)
00016AE2 6000                       		bra.s	@reduceair
00016AE4                            ; ===========================================================================
00016AE4                            
00016AE4                            @warnsound:
00016AEE                            
00016AEE                            @reduceair:
00016AEE 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016AF2 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016AF6                            
00016AF6                            		; Sonic drowns here
00016AF6 6100 0000                  		bsr.w	ResumeMusic
00016AFA 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016B0A 31FC 0000 FF92             		move.w	#0,(v_watersplashpos).w	;max it out for now - TIS
00016B10 117C 000A 0034             		move.b	#$A,$34(a0)
00016B16 317C 0001 0036             		move.w	#1,$36(a0)
00016B1C 317C 0078 002C             		move.w	#$78,$2C(a0)
00016B22 2F08                       		move.l	a0,-(sp)
00016B24 41F8 D000                  		lea	(v_player).w,a0
00016B28 6100 F668                  		bsr.w	Sonic_ResetOnFloor
00016B2C 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016B32 08E8 0001 0022             		bset	#1,obStatus(a0)
00016B38 08E8 0007 0002             		bset	#7,obGfx(a0)
00016B3E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016B44 317C 0000 0010             		move.w	#0,obVelX(a0)
00016B4A 317C 0000 0020             		move.w	#0,obInertia(a0)
00016B50 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016B56 205F                       		movea.l	(sp)+,a0
00016B58 4E75                       		rts	
00016B5A                            ; ===========================================================================
00016B5A                            
00016B5A                            @loc_13F86:
00016B5A 5368 002C                  		subq.w	#1,$2C(a0)
00016B5E 6600                       		bne.s	@loc_13F94
00016B60 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016B66 4E75                       		rts	
00016B68                            ; ===========================================================================
00016B68                            
00016B68                            	@loc_13F94:
00016B68 2F08                       		move.l	a0,-(sp)
00016B6A 41F8 D000                  		lea	(v_player).w,a0
00016B6E 4EB9 0000 F42A             		jsr	(SpeedToPos).l
00016B74 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016B7A 205F                       		movea.l	(sp)+,a0
00016B7C 6000                       		bra.s	@nochange
00016B7E                            ; ===========================================================================
00016B7E                            
00016B7E                            @gotomakenum:
00016B7E 6000                       		bra.s	@makenum
00016B80                            ; ===========================================================================
00016B80                            
00016B80                            @nochange:
00016B80 4A68 0036                  		tst.w	$36(a0)
00016B84 6700 0000                  		beq.w	@nocountdown
00016B88 5368 003A                  		subq.w	#1,$3A(a0)
00016B8C 6A00 0000                  		bpl.w	@nocountdown
00016B90                            
00016B90                            @makenum:
00016B90 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016B96 0240 000F                  		andi.w	#$F,d0
00016B9A 3140 003A                  		move.w	d0,$3A(a0)
00016B9E 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
00016BA4 6600 0000                  		bne.w	@nocountdown
00016BA8 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016BAC 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016BB2 7006                       		moveq	#6,d0
00016BB4 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016BBA 6700                       		beq.s	@noflip
00016BBC 4440                       		neg.w	d0
00016BBE 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016BC4                            
00016BC4                            	@noflip:
00016BC4 D169 0008                  		add.w	d0,obX(a1)
00016BC8 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016BCE 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016BD4 4A68 002C                  		tst.w	$2C(a0)
00016BD8 6700 0000                  		beq.w	@loc_1403E
00016BDC 0268 0007 003A             		andi.w	#7,$3A(a0)
00016BE2 0668 0000 003A             		addi.w	#0,$3A(a0)
00016BE8 3038 D00C                  		move.w	(v_player+obY).w,d0
00016BEC 0440 000C                  		subi.w	#$C,d0
00016BF0 3340 000C                  		move.w	d0,obY(a1)
00016BF4 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016BFA 1340 0026                  		move.b	d0,obAngle(a1)
00016BFE 3038 FE04                  		move.w	(v_framecount).w,d0
00016C02 0200 0003                  		andi.b	#3,d0
00016C06 6600                       		bne.s	@loc_14082
00016C08 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016C0E 6000                       		bra.s	@loc_14082
00016C10                            ; ===========================================================================
00016C10                            
00016C10                            @loc_1403E:
00016C10 0828 0007 0036             		btst	#7,$36(a0)
00016C16 6700                       		beq.s	@loc_14082
00016C18 3438 FE14                  		move.w	(v_air).w,d2
00016C1C E24A                       		lsr.w	#1,d2
00016C1E 4EB9 0000 3B7C             		jsr	(RandomNumber).l
00016C24 0240 0003                  		andi.w	#3,d0
00016C28 6600                       		bne.s	@loc_1406A
00016C2A 08E8 0006 0036             		bset	#6,$36(a0)
00016C30 6600                       		bne.s	@loc_14082
00016C32 1342 0028                  		move.b	d2,obSubtype(a1)
00016C36 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016C3C                            
00016C3C                            	@loc_1406A:
00016C3C 4A28 0034                  		tst.b	$34(a0)
00016C40 6600                       		bne.s	@loc_14082
00016C42 08E8 0006 0036             		bset	#6,$36(a0)
00016C48 6600                       		bne.s	@loc_14082
00016C4A 1342 0028                  		move.b	d2,obSubtype(a1)
00016C4E 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016C54                            
00016C54                            @loc_14082:
00016C54 5328 0034                  		subq.b	#1,$34(a0)
00016C58 6A00                       		bpl.s	@nocountdown
00016C5A 4268 0036                  		clr.w	$36(a0)
00016C5E                            
00016C5E                            @nocountdown:
00016C5E 4E75                       		rts	
00016C5E 4E75                       		rts	
00016C60                            
00016C60                            
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016C60                            ; ---------------------------------------------------------------------------
00016C60                            
00016C60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C60                            
00016C60                            
00016C60                            ResumeMusic:
00016C60                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016C60                            		;bhi.s	@over12		; if yes, branch
00016C60                            		;move.b	(v_Saved_music),d0
00016C60                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016C60                            		;beq.s	@notinvinc ; if not, branch
00016C60                            		;move.w	#bgm_Invincible,d0
00016C60                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016C60                            		;beq.s	@notinvinc	; if not, branch
00016C60                            		;move.w	#bgm_Ending,d0
00016C60                            
00016C60                            	;@notinvinc:
00016C60                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016C60                            		;beq.s	@playselected ; if not, branch
00016C60                            		;move.w	#bgm_Boss,d0
00016C60                            
00016C60                            	;@playselected:
00016C60                            		;jsr	(PlaySound).l
00016C60                            
00016C60                            	;@over12:
00016C60 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016C66 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016C6A 4E75                       		rts	
00016C6C                            
00016C6C                            ;End of function ResumeMusic
00016C6C                            
00016C6C                            ; ===========================================================================
00016C6C                            
00016C6C                            		include	"_anim\Drowning Countdown.asm"
00016C6C                            ; ---------------------------------------------------------------------------
00016C6C                            ; Animation script - countdown numbers and bubbles (LZ)
00016C6C                            ; ---------------------------------------------------------------------------
00016C6C 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016C6E 0000                       		dc.w @oneappear-Ani_Drown
00016C70 0000                       		dc.w @twoappear-Ani_Drown
00016C72 0000                       		dc.w @threeappear-Ani_Drown
00016C74 0000                       		dc.w @fourappear-Ani_Drown
00016C76 0000                       		dc.w @fiveappear-Ani_Drown
00016C78 0000                       		dc.w @smallbubble-Ani_Drown
00016C7A 0000                       		dc.w @zeroflash-Ani_Drown
00016C7C 0000                       		dc.w @oneflash-Ani_Drown
00016C7E 0000                       		dc.w @twoflash-Ani_Drown
00016C80 0000                       		dc.w @threeflash-Ani_Drown
00016C82 0000                       		dc.w @fourflash-Ani_Drown
00016C84 0000                       		dc.w @fiveflash-Ani_Drown
00016C86 0000                       		dc.w @blank-Ani_Drown
00016C88 0000                       		dc.w @mediumbubble-Ani_Drown
00016C8A 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016C94 00                         		even
00016C94 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016C9E 00                         		even
00016C9E 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016CA8 00                         		even
00016CA8 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016CB2 00                         		even
00016CB2 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016CBC 00                         		even
00016CBC 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016CC6 00                         		even
00016CC6 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016CCC 00                         		even
00016CCC 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016CD4 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016CDC 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016CE4 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016CEC 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016CF4 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016CFC 0EFC                       @blank:		dc.b $E, afRoutine
00016CFE 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016D04                            		even
00016D04                            		even
00016D04                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016D04                            ; ---------------------------------------------------------------------------
00016D04                            ; Sprite mappings - drowning countdown numbers (LZ)
00016D04                            ; ---------------------------------------------------------------------------
00016D04                            Map_Drown_internal:
00016D04 0000                       		dc.w @num-Map_Drown_internal
00016D06 01                         @num:		dc.b 1
00016D07 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016D0C                            		even
00016D0C                            		even
00016D0C                            
00016D0C                            ; --------------------------------------------------
00016D0C                            ; Subroutine to load the shield's art over DMA
00016D0C                            ; --------------------------------------------------
00016D0C                            
00016D0C                            PLCLoad_Shields:
00016D0C 7000                       		moveq	#0,d0
00016D0E 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00016D12 B028 0033                  		cmp.b	shield_LastLoadedDPLC(a0),d0
00016D16 6700                       		beq.s	locret2_13C96
00016D18 1140 0033                  		move.b	d0,shield_LastLoadedDPLC(a0)
00016D1C 2468 003C                  		move.l  shield_DPLC_Address(A0),a2
00016D20 D040                       		add.w   d0,d0
00016D22 D4F2 0000                  		adda.w  (a2,D0),a2
00016D26 3A1A                       		move.w  (a2)+,d5
00016D28 5345                       		subq.w  #1,d5
00016D2A 6B00                       		bmi.s	locret2_13C96
00016D2C 3828 0036                  		move.w  shield_vram_art(A0),d4
00016D30                            
00016D30                            loc_199BE:
00016D30 7200                       		moveq	#0,d1
00016D32 121A                       		move.b	(a2)+,d1
00016D34 E149                       		lsl.w	#8,d1
00016D36 121A                       		move.b	(a2)+,d1
00016D38 3601                       		move.w	d1,d3
00016D3A E04B                       		lsr.w	#8,d3
00016D3C 0243 00F0                  		andi.w	#$F0,d3
00016D40 0643 0010                  		addi.w	#$10,d3
00016D44 0241 0FFF                  		andi.w	#$FFF,d1
00016D48 EB89                       		lsl.l	#5,d1
00016D4A D2A8 0038                  		add.l   shield_Art_Address(a0),d1
00016D4E 3404                       		move.w  d4,d2
00016D50 D843                       		add.w   d3,d4
00016D52 D843                       		add.w   d3,d4
00016D54 4EB9 0000 1476             		jsr     (QueueDMATransfer).l
00016D5A 51CD FFD4                  		dbf     d5,loc_199BE	; repeat for number of entries
00016D5E                            
00016D5E                            locret2_13C96:
00016D5E 4E75                       		rts	
00016D60                            ; End of function PLCLoad_Shields
00016D60                            
00016D60                            		include	"_incObj\4E Silver Shield.asm"
00016D60                            ; ---------------------------------------------------------------------------
00016D60                            ; Object 4E - Silver Shield
00016D60                            ; ---------------------------------------------------------------------------
00016D60                            SPShieldItem: ; XREF: Obj_Index
00016D60 7000                       		moveq	#0,d0
00016D62 1028 0024                  		move.b	obRoutine(a0),d0
00016D66 323B 0000                  		move.w	SPShieldItem_Index(pc,d0.w),d1
00016D6A 4EFB 1000                  		jmp	SPShieldItem_Index(pc,d1.w)
00016D6E                            ; ===========================================================================
00016D6E                            ; off_1D900:
00016D6E                            SPShieldItem_Index:
00016D6E 0000                       		dc.w SPShieldItem_Init-SPShieldItem_Index	; 0
00016D70 0000                       		dc.w SPShieldItem_Main-SPShieldItem_Index	; 2
00016D72                            ; ===========================================================================
00016D72                            ; loc_1D904:
00016D72                            SPShieldItem_Init:
00016D72 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016D7A 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016D82 217C 0000 0000 0038        		move.l	#Art_SpShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016D8A 117C 0004 0001             		move.b	#4,obRender(a0)
00016D90 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016D96 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016D9C 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016DA2 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016DA8 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016DAE 6700                       		beq.s	@animclear
00016DB0 08E8 0007 0002             		bset	#7,obGfx(a0)
00016DB6                            
00016DB6                            @animclear:
00016DB6 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016DBC 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016DC2 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016DC6                            ; loc_1D92C:
00016DC6                            SPShieldItem_Main:
00016DC6 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016DCA 4A38 FE2D                  		tst.b	(v_invinc).w
00016DCE 6600                       		bne.s	@return
00016DD0                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016DD0                            		;beq.s	@return	; If so, do not display and do not update variables
00016DD0 4A38 F5CA                  		tst.b	(v_SpShield).w
00016DD4 6700 0000                  		beq.w	SPShieldItem_Destroy	; If not, change to Insta-Shield
00016DD8 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016DDE 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016DE4 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016DEA 4A6A 0002                  		tst.w	obGFX(a2)
00016DEE 6A00                       		bpl.s	@nothighpriority
00016DF0 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016DF6                            
00016DF6                            		@nothighpriority:
00016DF6 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016DFC 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00016E02 4EB9 0001 6D0C             		jsr	(PLCLoad_Shields).l
00016E08 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00016E0E                            ; ---------------------------------------------------------------------------
00016E0E                            ; ===========================================================================
00016E0E                            
00016E0E                            @return:
00016E0E 4E75                       		rts
00016E10                            
00016E10                            SPShieldItem_Destroy:
00016E10 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016E14 4E75                       		rts
00016E16                            ; ===========================================================================
00016E16                            ; ===========================================================================
00016E16                            		include	"_incObj\04 Gold Shield.asm"
00016E16                            ; ---------------------------------------------------------------------------
00016E16                            ; Object 04 - Gold Shield
00016E16                            ; ---------------------------------------------------------------------------
00016E16                            GShieldItem: ; XREF: Obj_Index
00016E16 7000                       		moveq	#0,d0
00016E18 1028 0024                  		move.b	obRoutine(a0),d0
00016E1C 323B 0000                  		move.w	GShieldItem_Index(pc,d0.w),d1
00016E20 4EFB 1000                  		jmp	GShieldItem_Index(pc,d1.w)
00016E24                            ; ===========================================================================
00016E24                            ; off_1D900:
00016E24                            GShieldItem_Index:
00016E24 0000                       		dc.w GShieldItem_Init-GShieldItem_Index	; 0
00016E26 0000                       		dc.w GShieldItem_Main-GShieldItem_Index	; 2
00016E28                            ; ===========================================================================
00016E28                            ; loc_1D904:
00016E28                            GShieldItem_Init:
00016E28 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016E30 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016E38 217C 0000 0000 0038        		move.l	#Art_GShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016E40 117C 0004 0001             		move.b	#4,obRender(a0)
00016E46 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016E4C 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016E52 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016E58 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016E5E 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016E64 6700                       		beq.s	@animclear
00016E66 08E8 0007 0002             		bset	#7,obGfx(a0)
00016E6C                            
00016E6C                            @animclear:
00016E6C 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016E72 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016E78 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016E7C                            ; loc_1D92C:
00016E7C                            GShieldItem_Main:
00016E7C 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016E80 4A38 FE2D                  		tst.b	(v_invinc).w
00016E84 6600                       		bne.s	@return
00016E86                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016E86                            		;beq.s	@return	; If so, do not display and do not update variables
00016E86 4A38 F5C9                  		tst.b	(v_GShield).w
00016E8A 6700 0000                  		beq.w	GShieldItem_Destroy	; If not, change to Insta-Shield
00016E8E 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016E94 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016E9A 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016EA0 4A6A 0002                  		tst.w	obGFX(a2)
00016EA4 6A00                       		bpl.s	@nothighpriority
00016EA6 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016EAC                            
00016EAC                            		@nothighpriority:
00016EAC 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016EB2 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00016EB8 4EB9 0001 6D0C             		jsr	(PLCLoad_Shields).l
00016EBE 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00016EC4                            ; ---------------------------------------------------------------------------
00016EC4                            ; ===========================================================================
00016EC4                            
00016EC4                            @return:
00016EC4 4E75                       		rts
00016EC6                            
00016EC6                            GShieldItem_Destroy:
00016EC6 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016ECA 4E75                       		rts
00016ECC                            ; ===========================================================================
00016ECC                            ; ===========================================================================
00016ECC                            		include	"_incObj\07 Red Shield.asm"
00016ECC                            ; ---------------------------------------------------------------------------
00016ECC                            ; Object 07 - Red Shield
00016ECC                            ; ---------------------------------------------------------------------------
00016ECC                            RShieldItem: ; XREF: Obj_Index
00016ECC 7000                       		moveq	#0,d0
00016ECE 1028 0024                  		move.b	obRoutine(a0),d0
00016ED2 323B 0000                  		move.w	RShieldItem_Index(pc,d0.w),d1
00016ED6 4EFB 1000                  		jmp	RShieldItem_Index(pc,d1.w)
00016EDA                            ; ===========================================================================
00016EDA                            ; off_1D900:
00016EDA                            RShieldItem_Index:
00016EDA 0000                       		dc.w RShieldItem_Init-RShieldItem_Index	; 0
00016EDC 0000                       		dc.w RShieldItem_Main-RShieldItem_Index	; 2
00016EDE                            ; ===========================================================================
00016EDE                            ; loc_1D904:
00016EDE                            RShieldItem_Init:
00016EDE 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016EE6 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016EEE 217C 0000 0000 0038        		move.l	#Art_RedShield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016EF6 117C 0004 0001             		move.b	#4,obRender(a0)
00016EFC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016F02 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016F08 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016F0E 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016F14 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016F1A 6700                       		beq.s	@animclear
00016F1C 08E8 0007 0002             		bset	#7,obGfx(a0)
00016F22                            
00016F22                            @animclear:
00016F22 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016F28 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016F2E 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016F32                            ; loc_1D92C:
00016F32                            RShieldItem_Main:
00016F32 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016F36 4A38 FE2D                  		tst.b	(v_invinc).w
00016F3A 6600                       		bne.s	@return
00016F3C                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016F3C                            		;beq.s	@return	; If so, do not display and do not update variables
00016F3C 4A38 F5C8                  		tst.b	(v_RShield).w
00016F40 6700 0000                  		beq.w	RShieldItem_Destroy	; If not, change to Insta-Shield
00016F44 316A 0008 0008             		move.w	obX(a2),obX(a0)
00016F4A 316A 000C 000C             		move.w	obY(a2),obY(a0)
00016F50 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
00016F56 4A6A 0002                  		tst.w	obGFX(a2)
00016F5A 6A00                       		bpl.s	@nothighpriority
00016F5C 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00016F62                            
00016F62                            		@nothighpriority:
00016F62 43F9 0000 0000             		lea	(Ani_Shield).l,a1
00016F68 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00016F6E 4EB9 0001 6D0C             		jsr	(PLCLoad_Shields).l
00016F74 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00016F7A                            ; ---------------------------------------------------------------------------
00016F7A                            ; ===========================================================================
00016F7A                            
00016F7A                            @return:
00016F7A 4E75                       		rts
00016F7C                            
00016F7C                            RShieldItem_Destroy:
00016F7C 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00016F80 4E75                       		rts
00016F82                            ; ===========================================================================
00016F82                            ; ===========================================================================
00016F82                            		include	"_incObj\38 Shield.asm"
00016F82                            ; ---------------------------------------------------------------------------
00016F82                            ; Object 38 - Shield
00016F82                            ; ---------------------------------------------------------------------------
00016F82                            ShieldItem: ; XREF: Obj_Index
00016F82 7000                       		moveq	#0,d0
00016F84 1028 0024                  		move.b	obRoutine(a0),d0
00016F88 323B 0000                  		move.w	ShieldItem_Index(pc,d0.w),d1
00016F8C 4EFB 1000                  		jmp	ShieldItem_Index(pc,d1.w)
00016F90                            ; ===========================================================================
00016F90                            ; off_1D900:
00016F90                            ShieldItem_Index:
00016F90 0000                       		dc.w ShieldItem_Init-ShieldItem_Index	; 0
00016F92 0000                       		dc.w ShieldItem_Main-ShieldItem_Index	; 2
00016F94                            ; ===========================================================================
00016F94                            ; loc_1D904:
00016F94                            ShieldItem_Init:
00016F94 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
00016F9C 217C 0000 0000 003C        		move.l	#DPLC_Shield,shield_DPLC_Address(a0)	; Used by PLCLoad_Shields
00016FA4 217C 0000 0000 0038        		move.l	#Art_Shield,shield_Art_Address(a0)	; Used by PLCLoad_Shields
00016FAC 117C 0004 0001             		move.b	#4,obRender(a0)
00016FB2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016FB8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00016FBE 317C 0541 0002             		move.w	#$541,obGfx(a0)
00016FC4 317C A820 0036             		move.w	#$A820,shield_vram_art(a0)	; Used by PLCLoad_Shields
00016FCA 0838 0007 D002             		btst	#7,(v_player+obGfx).w
00016FD0 6700                       		beq.s	loc_195F0S
00016FD2 08E8 0007 0002             		bset	#7,obGfx(a0)
00016FD8                            
00016FD8                            loc_195F0S:
00016FD8 317C 0001 001C             		move.w	#1,obAnim(a0)	; Clear anim and set prev_anim to 1
00016FDE 117C 00FF 0033             		move.b	#-1,shield_LastLoadedDPLC(a0)	; Reset LastLoadedDPLC (used by PLCLoad_Shields)
00016FE4 5428 0024                  		addq.b	#2,obRoutine(a0) ; => ShieldItem_Main
00016FE8                            ; loc_1D92C:
00016FE8                            ShieldItem_Main:
00016FE8 45F8 D000                  		lea	(v_player).w,a2 ; a2=character
00016FEC 4A38 FE2D                  		tst.b	(v_invinc).w
00016FF0 6600                       		bne.s	return_1D976
00016FF2                            		;cmpi.b	#id_Null,obAnim(a2)	; Is player in their 'blank' animation?
00016FF2                            		;beq.s	return_1D976	; If so, do not display and do not update variables
00016FF2 4A38 FE2C                  		tst.b	(v_shield).w
00016FF6 6700 0000                  		beq.w	ShieldItem_Destroy	; If not, change to Insta-Shield
00016FFA 316A 0008 0008             		move.w	obX(a2),obX(a0)
00017000 316A 000C 000C             		move.w	obY(a2),obY(a0)
00017006 0268 7FFF 0002             		andi.w	#$7FFF,obGFX(a0)
0001700C 4A6A 0002                  		tst.w	obGFX(a2)
00017010 6A00                       		bpl.s	@nothighpriority
00017012 0068 8000 0002             		ori.w	#$8000,obGFX(a0)
00017018                            
00017018                            		@nothighpriority:
00017018 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001701E 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00017024 4EB9 0001 6D0C             		jsr	(PLCLoad_Shields).l
0001702A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00017030                            ; ---------------------------------------------------------------------------
00017030                            ; ===========================================================================
00017030                            
00017030                            return_1D976:
00017030 4E75                       		rts
00017032                            
00017032                            ShieldItem_Destroy:
00017032 4238 FE2C                  		clr.b	(v_shield).w		; remove shield				
00017036 4E75                       		rts
00017038                            ; ===========================================================================
00017038                            ; ===========================================================================
00017038                            		include	"_incObj\19 Invincibility Stars.asm"		
00017038                            ; ---------------------------------------------------------------------------
00017038                            ; Object 10 - invincibility stars
00017038                            ; ---------------------------------------------------------------------------
00017038 =00000024                  invstars_obroutine: equ obRoutine ; the same as routine in other objects
00017038 =00000030                  InvStars_AniScript: equ $30 ; animation script used by sub-objects(in main object it's clear and unused) (4 bytes)
00017038 =00000034                  InvStars_SpeedIndex: equ $34  ; (2 bytes)
00017038 =00000036                  InvStars_PrevPosIndex: equ $36 ; clear and unused in main object
00017038                            
00017038                            InvStarsObj: 
00017038 7000                       		moveq	#0,d0
0001703A 1028 0024                  		move.b	InvStars_obRoutine(a0),d0
0001703E 323B 0000                  		move.w	InvStars_Index(pc,d0.w),d1
00017042 4EFB 1000                  		jmp	InvStars_Index(pc,d1.w)
00017046                            ; ===========================================================================
00017046 0000                       InvStars_Index:	dc.w @InitObjects-InvStars_Index
00017048 0000                       		dc.w @MainObject-InvStars_Index
0001704A 0000                       		dc.w @SubObject-InvStars_Index
0001704C                            ; ===========================================================================
0001704C                            
0001704C                            	@SubObjectsData:
0001704C 0000 0000                  		dc.l Ani_InvStars2 ; animation script
00017050 0B00                       		dc.w $0B00 ; speed index,sub3 anim
00017052 0000 0000                  		dc.l Ani_InvStars3
00017056 160D                       		dc.w $160D
00017058 0000 0000                  		dc.l Ani_InvStars4
0001705C 2C0D                       		dc.w $2C0D
0001705E                            ; ===========================================================================
0001705E                            
0001705E                            	@InitObjects:
0001705E 223C 0000 0000             		move.l	#Unc_Stars,d1
00017064 343C ABC0                  		move.w	#$ABC0,d2
00017068 363C 0220                  		move.w	#$220,d3
0001706C 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00017072 7400                       		moveq	#0,d2
00017074 45FA FFD0                  		lea	@SubObjectsData-6(pc),a2
00017078 43D0                       		lea	(a0),a1
0001707A 7203                       		moveq	#3,d1
0001707C                            		
0001707C                            	@initStars:
0001707C 1290                       		move.b	(a0),(a1) ; load obj35
0001707E 137C 0004 0024             		move.b	#4,InvStars_obRoutine(a1)		; => @SubObject
00017084 237C 0000 0000 0004        		move.l	#Map_InvStars,obMap(a1)
0001708C 337C 055E 0002             		move.w	#$55E,obGfx(a1)
00017092 137C 0044 0001             		move.b  #%001000100,obRender(a1)
00017098 137C 0010 000E             		move.b	#$10,mainspr_width(a1)
0001709E 137C 0002 000F             		move.b	#2,mainspr_childsprites(a1)							 
000170A4 1342 0036                  		move.b	d2,InvStars_PrevPosIndex(a1)
000170A8 5242                       		addq.w	#1,d2
000170AA 235A 0030                  		move.l	(a2)+,InvStars_AniScript(a1)
000170AE 335A 0034                  		move.w	(a2)+,InvStars_SpeedIndex(a1)
000170B2 43E9 0040                  		lea	$40(a1),a1 ; a1=object
000170B6 51C9 FFC4                  		dbf	d1,@initStars
000170BA                            
000170BA 117C 0002 0024             		move.b	#2,InvStars_obRoutine(a0)		; => @MainObject
000170C0 117C 0004 0034             		move.b	#4,InvStars_SpeedIndex(a0)
000170C6                            
000170C6                            	@MainObject:
000170C6 43F8 D000                  		lea (v_player).w,a1 ; a1=character
000170CA 4A38 FE2D                  		tst.b   (v_invinc).w
000170CE 6700 83AE                  		beq.w	DeleteObject
000170D2 3029 0008                  		move.w	obX(a1),d0
000170D6 3140 0008                  		move.w	d0,obX(a0)
000170DA 3229 000C                  		move.w	obY(a1),d1
000170DE 3141 000C                  		move.w	d1,obY(a0)
000170E2 45E8 0010                  		lea	sub2_x_pos(a0),a2
000170E6 47F9 0000 0000             		lea	Ani_InvStars1,a3
000170EC 7A00                       		moveq	#0,d5
000170EE                            
000170EE                            	@getFrame_main:
000170EE 3428 0038                  		move.w	$38(a0),d2
000170F2 1A33 2000                  		move.b	(a3,d2.w),d5
000170F6 6A00                       		bpl.s	@setFrameAndPosition_main
000170F8 4268 0038                  		clr.w	$38(a0)
000170FC 60F0                       		bra.s	@getFrame_main
000170FE                            ; ===========================================================================
000170FE                            
000170FE                            	@setFrameAndPosition_main:
000170FE 5268 0038                  		addq.w	#1,$38(a0)
00017102 4DF9 0000 0000             		lea	InvStars_Speeds,a6
00017108 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001710C 6100 0000                  		bsr.w	InvStars_get_speed
00017110 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
00017112 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
00017114 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
00017116 0646 0020                  		addi.w	#$20,d6
0001711A 6100 0000                  		bsr.w	InvStars_get_speed
0001711E 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
00017120 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
00017122 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
00017124 7012                       		moveq	#$12,d0
00017126 0829 0000 0022             		btst	#0,obStatus(a1)
0001712C 6700                       		beq.s	@display_main
0001712E 4440                       		neg.w	d0
00017130                            
00017130                            	@display_main:
00017130 D128 0034                  		add.b	d0,InvStars_SpeedIndex(a0)
00017134 303C 0080                  		move.w	#(1*$80),d0
00017138 6000 8330                  		bra.w	DisplaySprite2
0001713C                            ; ===========================================================================
0001713C                            
0001713C                            	@SubObject:
0001713C 43F8 D000                  		lea 	(v_player).w,a1 ; a1=character
00017140 4A38 FE2D                  		tst.b   (v_invinc).w
00017144 6700 8338                  		beq.w	DeleteObject
00017148 4BF8 F7A8                  		lea		(v_trackpos).w,a5
0001714C 4DF8 CB00                  		lea		(v_tracksonic).w,a6
00017150                            
00017150                            	@getPosition_sub:
00017150 1228 0036                  		move.b	InvStars_PrevPosIndex(a0),d1
00017154 E509                       		lsl.b	#2,d1
00017156 3401                       		move.w	d1,d2
00017158 D241                       		add.w	d1,d1
0001715A D242                       		add.w	d2,d1
0001715C 3015                       		move.w	(a5),d0
0001715E 9001                       		sub.b	d1,d0
00017160 45F6 0000                  		lea	(a6,d0.w),a2
00017164 301A                       		move.w	(a2)+,d0
00017166 321A                       		move.w	(a2)+,d1
00017168 3140 0008                  		move.w	d0,obX(a0)
0001716C 3141 000C                  		move.w	d1,obY(a0)
00017170 45E8 0010                  		lea	sub2_x_pos(a0),a2
00017174 2668 0030                  		movea.l	InvStars_AniScript(a0),a3
00017178                            
00017178                            	@getFrame_sub:
00017178 3428 0038                  		move.w	$38(a0),d2
0001717C 1A33 2000                  		move.b	(a3,d2.w),d5
00017180 6A00                       		bpl.s	@setFrameAndPosition_sub
00017182 4268 0038                  		clr.w	$38(a0)
00017186 60F0                       		bra.s	@getFrame_sub
00017188                            ; ===========================================================================
00017188                            
00017188                            	@setFrameAndPosition_sub:
00017188 4845                       		swap	d5
0001718A D428 0035                  		add.b	$35(a0),d2
0001718E 1A33 2000                  		move.b	(a3,d2.w),d5
00017192 5268 0038                  		addq.w	#1,$38(a0)
00017196 4DFA 0000                  		lea	InvStars_Speeds(pc),a6
0001719A 1C28 0034                  		move.b	InvStars_SpeedIndex(a0),d6
0001719E 6100                       		bsr.s	InvStars_get_speed
000171A0 34C2                       		move.w	d2,(a2)+	; sub2_x_pos
000171A2 34C3                       		move.w	d3,(a2)+	; sub2_y_pos
000171A4 34C5                       		move.w	d5,(a2)+	; sub2_mapframe
000171A6 0646 0020                  		addi.w	#$20,d6
000171AA 4845                       		swap	d5
000171AC 6100                       		bsr.s	InvStars_get_speed
000171AE 34C2                       		move.w	d2,(a2)+	; sub3_x_pos
000171B0 34C3                       		move.w	d3,(a2)+	; sub3_y_pos
000171B2 34C5                       		move.w	d5,(a2)+	; sub3_mapframe
000171B4 7002                       		moveq	#2,d0
000171B6 0829 0000 0022             		btst	#0,obStatus(a1)
000171BC 6700                       		beq.s	loc_1DB20
000171BE 4440                       		neg.w	d0
000171C0                            
000171C0                            loc_1DB20:
000171C0 D128 0034                  		add.b    d0,InvStars_SpeedIndex(a0)
000171C4 303C 0080                  		move.w    #(1*$80),d0
000171C8 6000 82A0                  		bra.w    DisplaySprite2
000171CC                            ; ===========================================================================
000171CC                            
000171CC                            InvStars_get_speed:
000171CC 0246 003E                  		andi.w	#$3E,d6 ; limit to 6 bits and clear first bit
000171D0 1436 6000                  		move.b	(a6,d6.w),d2 ; move x-move speed to d2
000171D4 1636 6001                  		move.b	1(a6,d6.w),d3 ; move y-move speed to d3
000171D8 4882                       		ext.w	d2
000171DA 4883                       		ext.w	d3
000171DC D440                       		add.w	d0,d2 ; add object x position to x-move speed
000171DE D641                       		add.w	d1,d3 ; add object y position to y-move speed
000171E0 4E75                       		rts
000171E2                            
000171E2                            InvStars_Speeds: ; x-move speed,	y-move speed	
000171E2 0F00 0F03 0E06 0D08 0B0B+  		dc.w   $F00,  $F03,  $E06,  $D08,  $B0B,  $80D,  $60E,  $30F
000171F2 0010 FC0F F90E F70D F40B+  		dc.w    $10, -$3F1, -$6F2, -$8F3, -$BF5, -$DF8, -$EFA, -$FFD
00017202 F000 F0FC F1F9 F2F7 F4F4+  		dc.w  $F000, -$F04, -$E07, -$D09, -$B0C, -$80E, -$60F, -$310
00017212 FFF0 03F0 06F1 08F2 0BF4+  		dc.w   -$10,  $3F0,  $6F1,  $8F2,  $BF4,  $DF7,  $EF9,  $FFC
00017222                            
00017222                            ; ---------------------------------------------------------------------------
00017222                            ; Animation script - invincibility stars
00017222                            ; ---------------------------------------------------------------------------
00017222                            
00017222                            ; The animation script differs from the animate_sprite subroutine
00017222                            ; Every positive byte - mapping
00017222                            ; Every negative byte - loop flag 
00017222                            
00017222 0805 0706 0607 0508 0607+  Ani_InvStars1:	dc.b   8,  5,  7,  6,  6,  7,  5,  8,  6,  7,  7,  6,$FF
00017230 00                         		even
00017230 0807 0605 0403 0405 0607+  Ani_InvStars2:	dc.b   8,  7,  6,  5,  4,  3,  4,  5,  6,  7,$FF
0001723B 0304 0506 0708 0706 0504   		dc.b   3,  4,  5,  6,  7,  8,  7,  6,  5,  4
00017246 00                         		even
00017246 0807 0605 0403 0203 0405+  Ani_InvStars3:	dc.b   8,  7,  6,  5,  4,  3,  2,  3,  4,  5,  6,  7,$FF
00017253 0203 0405 0607 0807 0605+  		dc.b   2,  3,  4,  5,  6,  7,  8,  7,  6,  5,  4,  3
00017260 00                         		even
00017260 0706 0504 0302 0102 0304+  Ani_InvStars4:	dc.b   7,  6,  5,  4,  3,  2,  1,  2,  3,  4,  5,  6,$FF
0001726D 0102 0304 0506 0706 0504+  		dc.b   1,  2,  3,  4,  5,  6,  7,  6,  5,  4,  3,  2
0001727A 00                         		even			
0001727A 00                         		even			
0001727A                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
0001727A                            ; ---------------------------------------------------------------------------
0001727A                            ; Object 4A - special stage entry from beta
0001727A                            ; ---------------------------------------------------------------------------
0001727A                            
0001727A                            VanishSonic:
0001727A 7000                       		moveq	#0,d0
0001727C 1028 0024                  		move.b	obRoutine(a0),d0
00017280 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017284 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
00017288                            ; ===========================================================================
00017288 0000                       Van_Index:	dc.w Van_Main-Van_Index
0001728A 0000                       		dc.w Van_RmvSonic-Van_Index
0001728C 0000                       		dc.w Van_LoadSonic-Van_Index
0001728E                            
0001728E =00000030                  van_time:	equ $30		; time for Sonic to disappear
0001728E                            ; ===========================================================================
0001728E                            
0001728E                            Van_Main:	; Routine 0
0001728E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017292 6700                       		beq.s	@isempty	; if yes, branch
00017294 4E75                       		rts	
00017296                            
00017296                            	@isempty:
00017296 5428 0024                  		addq.b	#2,obRoutine(a0)
0001729A 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000172A2 117C 0004 0001             		move.b	#4,obRender(a0)
000172A8 317C 0080 0018             		move.w	#$80,obPriority(a0)
000172AE 117C 0038 0014             		move.b	#$38,obActWid(a0)
000172B4 317C 0541 0002             		move.w	#$541,obGfx(a0)
000172BA 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
000172C0                            
000172C0                            Van_RmvSonic:	; Routine 2
000172C0 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
000172C6 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
000172CC 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
000172D2 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
000172D8 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
000172DE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
000172E4 6600                       		bne.s	@display
000172E6 4A38 D000                  		tst.b	(v_player).w
000172EA 6700                       		beq.s	@display
000172EC 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
000172FC                            
000172FC                            	@display:
000172FC 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00017302                            ; ===========================================================================
00017302                            
00017302                            Van_LoadSonic:	; Routine 4
00017302 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017306 6600                       		bne.s	@wait		; if time remains, branch
00017308 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001730E 4EF9 0000 F47E             		jmp	(DeleteObject).l
00017314                            
00017314                            	@wait:
00017314 4E75                       		rts	
00017314 4E75                       		rts	
00017316                            		include	"_incObj\08 Water Splash.asm"
00017316                            ; ---------------------------------------------------------------------------
00017316                            ; Object 08 - water splash (LZ)
00017316                            ; ---------------------------------------------------------------------------
00017316                            
00017316                            Splash:
00017316 7000                       		moveq	#0,d0
00017318 1028 0024                  		move.b	obRoutine(a0),d0
0001731C 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017320 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017324                            ; ===========================================================================
00017324 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017326 0000                       		dc.w Spla_Display-Spla_Index
00017328 0000                       		dc.w Spla_Delete-Spla_Index
0001732A                            ; ===========================================================================
0001732A                            
0001732A                            Spla_Main:    ; Routine 0
0001732A 5428 0024                          addq.b    #2,obRoutine(a0)
0001732E 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
00017336 0028 0004 0001                     ori.b    #4,obRender(a0)
0001733C 117C 0001 0018                     move.b    #1,obPriority(a0)
00017342 117C 0010 0014                     move.b    #$10,obActWid(a0)
00017348 317C 4259 0002                     move.w    #$4259,obGfx(a0)
0001734E 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
00017354                            
00017354                            Spla_Display:    ; Routine 2
00017354                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
00017354 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
0001735A 43F9 0000 0000                     lea    (Ani_Splash).l,a1
00017360 4EB9 0000 C4F8                     jsr    (AnimateSprite).l
00017366 4EF9 0000 F43E                     jmp    (DisplaySprite).l
0001736C                            ; ===========================================================================
0001736C                            
0001736C                            Spla_Delete:	; Routine 4
0001736C 4EF9 0000 F47E             		jmp	(DeleteObject).l	; delete when animation	is complete
0001736C 4EF9 0000 F47E             		jmp	(DeleteObject).l	; delete when animation	is complete
00017372                            		include	"_anim\Shield and Invincibility.asm"
00017372                            ; ---------------------------------------------------------------------------
00017372                            ; Animation script - shield and invincibility stars
00017372                            ; ---------------------------------------------------------------------------
00017372 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017374 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
00017374 0101 0002 0003 0004 0005+  @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, $A, 0, $B, 0, $C, 0, afEnd
0001738E                            Map_Shield:	include	"_maps\Shield.asm"
0001738E                            ; --------------------------------------------------------------------------------
0001738E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001738E                            ; --------------------------------------------------------------------------------
0001738E                            
0001738E                            SME_ocN6K:	
0001738E 0000 0000                  		dc.w SME_ocN6K_1A-SME_ocN6K, SME_ocN6K_1B-SME_ocN6K	
00017392 0000 0000                  		dc.w SME_ocN6K_30-SME_ocN6K, SME_ocN6K_45-SME_ocN6K	
00017396 0000 0000                  		dc.w SME_ocN6K_5A-SME_ocN6K, SME_ocN6K_6F-SME_ocN6K	
0001739A 0000 0000                  		dc.w SME_ocN6K_7A-SME_ocN6K, SME_ocN6K_85-SME_ocN6K	
0001739E 0000 0000                  		dc.w SME_ocN6K_90-SME_ocN6K, SME_ocN6K_9B-SME_ocN6K	
000173A2 0000 0000                  		dc.w SME_ocN6K_A6-SME_ocN6K, SME_ocN6K_BB-SME_ocN6K	
000173A6 0000                       		dc.w SME_ocN6K_D0-SME_ocN6K	
000173A8 00                         SME_ocN6K_1A:	dc.b 0	
000173A9 04                         SME_ocN6K_1B:	dc.b 4	
000173AA E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000173AF E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000173B4 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000173B9 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000173BE 04                         SME_ocN6K_30:	dc.b 4	
000173BF E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000173C4 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000173C9 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000173CE 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000173D3 04                         SME_ocN6K_45:	dc.b 4	
000173D4 E80E 2000 E3               		dc.b $E8, $E, $20, 0, $E3	
000173D9 E80A 200C 03               		dc.b $E8, $A, $20, $C, 3	
000173DE 000A 3015 03               		dc.b 0, $A, $30, $15, 3	
000173E3 000E 301E E3               		dc.b 0, $E, $30, $1E, $E3	
000173E8 04                         SME_ocN6K_5A:	dc.b 4	
000173E9 E80E 2000 EB               		dc.b $E8, $E, $20, 0, $EB	
000173EE E802 200C 0B               		dc.b $E8, 2, $20, $C, $B	
000173F3 000E 300F EB               		dc.b 0, $E, $30, $F, $EB	
000173F8 0002 301B 0B               		dc.b 0, 2, $30, $1B, $B	
000173FD 02                         SME_ocN6K_6F:	dc.b 2	
000173FE E80E 2000 EC               		dc.b $E8, $E, $20, 0, $EC	
00017403 000E 300C EC               		dc.b 0, $E, $30, $C, $EC	
00017408 02                         SME_ocN6K_7A:	dc.b 2	
00017409 E80A 2000 F1               		dc.b $E8, $A, $20, 0, $F1	
0001740E 000A 3009 F1               		dc.b 0, $A, $30, 9, $F1	
00017413 02                         SME_ocN6K_85:	dc.b 2	
00017414 E802 2000 F9               		dc.b $E8, 2, $20, 0, $F9	
00017419 0002 3003 F9               		dc.b 0, 2, $30, 3, $F9	
0001741E 02                         SME_ocN6K_90:	dc.b 2	
0001741F E80A 2800 F1               		dc.b $E8, $A, $28, 0, $F1	
00017424 000A 3809 F1               		dc.b 0, $A, $38, 9, $F1	
00017429 02                         SME_ocN6K_9B:	dc.b 2	
0001742A E80E 2800 EC               		dc.b $E8, $E, $28, 0, $EC	
0001742F 000E 380C EC               		dc.b 0, $E, $38, $C, $EC	
00017434 04                         SME_ocN6K_A6:	dc.b 4	
00017435 E80E 2800 F3               		dc.b $E8, $E, $28, 0, $F3	
0001743A E802 280C EB               		dc.b $E8, 2, $28, $C, $EB	
0001743F 000E 380F F3               		dc.b 0, $E, $38, $F, $F3	
00017444 0002 381B EB               		dc.b 0, 2, $38, $1B, $EB	
00017449 04                         SME_ocN6K_BB:	dc.b 4	
0001744A E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
0001744F E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017454 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
00017459 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
0001745E 04                         SME_ocN6K_D0:	dc.b 4	
0001745F E80E 2800 FB               		dc.b $E8, $E, $28, 0, $FB	
00017464 E80A 280C E3               		dc.b $E8, $A, $28, $C, $E3	
00017469 000A 3815 E3               		dc.b 0, $A, $38, $15, $E3	
0001746E 000E 381E FB               		dc.b 0, $E, $38, $1E, $FB	
00017474 00                         		even
00017474 00                         		even
00017474                            DPLC_Shield:	include	"_maps\Shield - Dynamic Gfx Script.asm"
00017474                            ; --------------------------------------------------------------------------------
00017474                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 3 & Knuckles format; --------------------------------------------------------------------------------
00017474                            
00017474                            SME_yRIsY:	
00017474 0000 0000                  		dc.w SME_yRIsY_1A-SME_yRIsY, SME_yRIsY_1C-SME_yRIsY	
00017478 0000 0000                  		dc.w SME_yRIsY_26-SME_yRIsY, SME_yRIsY_30-SME_yRIsY	
0001747C 0000 0000                  		dc.w SME_yRIsY_3A-SME_yRIsY, SME_yRIsY_44-SME_yRIsY	
00017480 0000 0000                  		dc.w SME_yRIsY_4A-SME_yRIsY, SME_yRIsY_50-SME_yRIsY	
00017484 0000 0000                  		dc.w SME_yRIsY_56-SME_yRIsY, SME_yRIsY_5C-SME_yRIsY	
00017488 0000 0000                  		dc.w SME_yRIsY_62-SME_yRIsY, SME_yRIsY_6C-SME_yRIsY	
0001748C 0000                       		dc.w SME_yRIsY_76-SME_yRIsY	
0001748E 0000                       SME_yRIsY_1A:	dc.b 0, 0	
00017490 0004 B000 800C 800C B000   SME_yRIsY_1C:	dc.b 0, 4, $B0, 0, $80, $C, $80, $C, $B0, 0	
0001749A 0004 B015 8021 8021 B015   SME_yRIsY_26:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
000174A4 0004 B02A 8036 8036 B02A   SME_yRIsY_30:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
000174AE 0004 B03F 204B B03F 204B   SME_yRIsY_3A:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
000174B8 0002 B04E B04E             SME_yRIsY_44:	dc.b 0, 2, $B0, $4E, $B0, $4E	
000174BE 0002 805A 805A             SME_yRIsY_4A:	dc.b 0, 2, $80, $5A, $80, $5A	
000174C4 0002 2063 2063             SME_yRIsY_50:	dc.b 0, 2, $20, $63, $20, $63	
000174CA 0002 805A 805A             SME_yRIsY_56:	dc.b 0, 2, $80, $5A, $80, $5A	
000174D0 0002 B04E B04E             SME_yRIsY_5C:	dc.b 0, 2, $B0, $4E, $B0, $4E	
000174D6 0004 B03F 204B B03F 204B   SME_yRIsY_62:	dc.b 0, 4, $B0, $3F, $20, $4B, $B0, $3F, $20, $4B	
000174E0 0004 B02A 8036 8036 B02A   SME_yRIsY_6C:	dc.b 0, 4, $B0, $2A, $80, $36, $80, $36, $B0, $2A	
000174EA 0004 B015 8021 8021 B015   SME_yRIsY_76:	dc.b 0, 4, $B0, $15, $80, $21, $80, $21, $B0, $15	
000174F4                            		even
000174F4                            		even
000174F4                            Map_InvStars:	include	"_maps\Invincibility Stars.asm"
000174F4                            ; ================================================================================
000174F4                            ; Sprite Mappings - generated by Flex 2 Thu Apr 23 2020 12:30:36 GMT+0300 (RTZ 2 (зима))
000174F4                            ; ================================================================================
000174F4                            
000174F4                            InvStarMap:
000174F4 0000 0000                  	dc.w $0, InvStarMap_1-InvStarMap
000174F8 0000 0000                  	dc.w InvStarMap_2-InvStarMap, InvStarMap_3-InvStarMap
000174FC 0000 0000                  	dc.w InvStarMap_4-InvStarMap, InvStarMap_5-InvStarMap
00017500 0000 0000                  	dc.w InvStarMap_6-InvStarMap, InvStarMap_7-InvStarMap
00017504 0000                       	dc.w InvStarMap_8-InvStarMap
00017506 01                         InvStarMap_1: dc.b $1
00017507 F800 0000 FC               	dc.b $F8, $0, $0, $0, $FC
0001750C 01                         InvStarMap_2: dc.b $1
0001750D F800 0001 FC               	dc.b $F8, $0, $0, $1, $FC
00017512 01                         InvStarMap_3: dc.b $1
00017513 F801 0002 FC               	dc.b $F8, $1, $0, $2, $FC
00017518 01                         InvStarMap_4: dc.b $1
00017519 F801 0004 FC               	dc.b $F8, $1, $0, $4, $FC
0001751E 01                         InvStarMap_5: dc.b $1
0001751F F801 0006 FC               	dc.b $F8, $1, $0, $6, $FC
00017524 01                         InvStarMap_6: dc.b $1
00017525 F805 0008 F8               	dc.b $F8, $5, $0, $8, $F8
0001752A 01                         InvStarMap_7: dc.b $1
0001752B F805 000C F8               	dc.b $F8, $5, $0, $C, $F8
00017530 01                         InvStarMap_8: dc.b $1
00017531 F00F 0010 F0               	dc.b $F0, $F, $0, $10, $F0
00017536                            	even
00017536                            	even
00017536                            		include	"_anim\Special Stage Entry (Unused).asm"
00017536                            ; ---------------------------------------------------------------------------
00017536                            ; Animation script - special stage entry effect from beta
00017536                            ; ---------------------------------------------------------------------------
00017536 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017538 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
0001754C                            		even
0001754C                            		even
0001754C                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
0001754C                            ; ---------------------------------------------------------------------------
0001754C                            ; Sprite mappings - special stage entry	from beta
0001754C                            ; ---------------------------------------------------------------------------
0001754C                            Map_Vanish_internal:
0001754C 0000                       		dc.w @flash1-Map_Vanish_internal
0001754E 0000                       		dc.w @flash2-Map_Vanish_internal
00017550 0000                       		dc.w @flash3-Map_Vanish_internal
00017552 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017554 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017556 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017558 0000                       		dc.w @sparkle4-Map_Vanish_internal
0001755A 0000                       		dc.w @blank-Map_Vanish_internal
0001755C 03                         @flash1:	dc.b 3
0001755D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017562 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017567 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001756C 03                         @flash2:	dc.b 3
0001756D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017572 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017577 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001757C 05                         @flash3:	dc.b 5
0001757D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017582 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017587 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001758C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00017591 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017596 09                         @sparkle1:	dc.b 9
00017597 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001759C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000175A1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000175A6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000175AB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000175B0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000175B5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000175BA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000175BF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000175C4 12                         @sparkle2:	dc.b $12
000175C5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000175CA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000175CF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000175D4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000175D9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000175DE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000175E3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000175E8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000175ED 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000175F2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000175F7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000175FC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017601 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017606 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001760B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017610 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017615 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001761A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001761F 11                         @sparkle3:	dc.b $11
00017620 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017625 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001762A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001762F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017634 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017639 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001763E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017643 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017648 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001764D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017652 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017657 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001765C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017661 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017666 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001766B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017670 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017675 09                         @sparkle4:	dc.b 9
00017676 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001767B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00017680 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017685 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001768A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001768F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017694 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017699 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001769E 04                         		dc.b 4
0001769F 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000176A4                            		even
000176A4                            		even
000176A4                            		include	"_anim\Water Splash.asm"
000176A4                            ; ---------------------------------------------------------------------------
000176A4                            ; Animation script - water splash (LZ)
000176A4                            ; ---------------------------------------------------------------------------
000176A4 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000176A6 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000176AC 00                         		even
000176AC 00                         		even
000176AC                            Map_Splash:	include	"_maps\Water Splash.asm"
000176AC                            ; ---------------------------------------------------------------------------
000176AC                            ; Sprite mappings - water splash (LZ)
000176AC                            ; ---------------------------------------------------------------------------
000176AC                            Map_Splash_internal:
000176AC 0000                       		dc.w @splash1-Map_Splash_internal
000176AE 0000                       		dc.w @splash2-Map_Splash_internal
000176B0 0000                       		dc.w @splash3-Map_Splash_internal
000176B2 02                         @splash1:	dc.b 2
000176B3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000176B8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000176BD 02                         @splash2:	dc.b 2
000176BE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000176C3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000176C8 01                         @splash3:	dc.b 1
000176C9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000176CE                            		even
000176CE                            		even
000176CE                            
000176CE                            		include	"_incObj\Sonic AnglePos.asm"
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            
000176CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176CE                            
000176CE                            
000176CE                            Sonic_AnglePos:
000176CE 0828 0003 0022             		btst	#3,obStatus(a0)
000176D4 6700                       		beq.s	loc_14602
000176D6 7000                       		moveq	#0,d0
000176D8 11C0 F768                  		move.b	d0,($FFFFF768).w
000176DC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176E0 4E75                       		rts	
000176E2                            ; ===========================================================================
000176E2                            
000176E2                            loc_14602:
000176E2 7003                       		moveq	#3,d0
000176E4 11C0 F768                  		move.b	d0,($FFFFF768).w
000176E8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176EC 1028 0026                  		move.b	obAngle(a0),d0
000176F0 0600 0020                  		addi.b	#$20,d0
000176F4 6A00                       		bpl.s	loc_14624
000176F6 1028 0026                  		move.b	obAngle(a0),d0
000176FA 6A00                       		bpl.s	loc_1461E
000176FC 5300                       		subq.b	#1,d0
000176FE                            
000176FE                            loc_1461E:
000176FE 0600 0020                  		addi.b	#$20,d0
00017702 6000                       		bra.s	loc_14630
00017704                            ; ===========================================================================
00017704                            
00017704                            loc_14624:
00017704 1028 0026                  		move.b	obAngle(a0),d0
00017708 6A00                       		bpl.s	loc_1462C
0001770A 5200                       		addq.b	#1,d0
0001770C                            
0001770C                            loc_1462C:
0001770C 0600 001F                  		addi.b	#$1F,d0
00017710                            
00017710                            loc_14630:
00017710 0200 00C0                  		andi.b	#$C0,d0
00017714 0C00 0040                  		cmpi.b	#$40,d0
00017718 6700 0000                  		beq.w	Sonic_WalkVertL
0001771C 0C00 0080                  		cmpi.b	#$80,d0
00017720 6700 0000                  		beq.w	Sonic_WalkCeiling
00017724 0C00 00C0                  		cmpi.b	#$C0,d0
00017728 6700 0000                  		beq.w	Sonic_WalkVertR
0001772C 3428 000C                  		move.w	obY(a0),d2
00017730 3628 0008                  		move.w	obX(a0),d3
00017734 7000                       		moveq	#0,d0
00017736 1028 0016                  		move.b	obHeight(a0),d0
0001773A 4880                       		ext.w	d0
0001773C D440                       		add.w	d0,d2
0001773E 1028 0017                  		move.b	obWidth(a0),d0
00017742 4880                       		ext.w	d0
00017744 D640                       		add.w	d0,d3
00017746 49F8 F768                  		lea	($FFFFF768).w,a4
0001774A 367C 0010                  		movea.w	#$10,a3
0001774E 3C3C 0000                  		move.w	#0,d6
00017752 7A0D                       		moveq	#$D,d5
00017754 6100 0000                  		bsr.w	FindFloor
00017758 3F01                       		move.w	d1,-(sp)
0001775A 3428 000C                  		move.w	obY(a0),d2
0001775E 3628 0008                  		move.w	obX(a0),d3
00017762 7000                       		moveq	#0,d0
00017764 1028 0016                  		move.b	obHeight(a0),d0
00017768 4880                       		ext.w	d0
0001776A D440                       		add.w	d0,d2
0001776C 1028 0017                  		move.b	obWidth(a0),d0
00017770 4880                       		ext.w	d0
00017772 4440                       		neg.w	d0
00017774 D640                       		add.w	d0,d3
00017776 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001777A 367C 0010                  		movea.w	#$10,a3
0001777E 3C3C 0000                  		move.w	#0,d6
00017782 7A0D                       		moveq	#$D,d5
00017784 6100 0000                  		bsr.w	FindFloor
00017788 301F                       		move.w	(sp)+,d0
0001778A 6100 0000                  		bsr.w	Sonic_Angle
0001778E 4A41                       		tst.w	d1
00017790 6700                       		beq.s	locret_146BE
00017792 6A00                       		bpl.s	loc_146C0
00017794 0C41 FFF2                  		cmpi.w	#-$E,d1
00017798 6D00                       		blt.s	locret_146E6
0001779A D368 000C                  		add.w	d1,obY(a0)
0001779E                            
0001779E                            locret_146BE:
0001779E 4E75                       		rts	
000177A0                            ; ===========================================================================
000177A0                            
000177A0                            loc_146C0:
000177A0 0C41 000E                  		cmpi.w	#$E,d1
000177A4 6E00                       		bgt.s	loc_146CC
000177A6                            
000177A6                            loc_146C6:
000177A6 D368 000C                  		add.w	d1,obY(a0)
000177AA 4E75                       		rts	
000177AC                            ; ===========================================================================
000177AC                            
000177AC                            loc_146CC:
000177AC 4A28 0038                  		tst.b	$38(a0)
000177B0 66F4                       		bne.s	loc_146C6
000177B2 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177BE 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177C4 4E75                       		rts	
000177C6                            ; ===========================================================================
000177C6                            
000177C6                            locret_146E6:
000177C6 4E75                       		rts	
000177C8                            ; End of function Sonic_AnglePos
000177C8                            
000177C8                            ; ===========================================================================
000177C8 2428 0008                  		move.l	obX(a0),d2
000177CC 3028 0010                  		move.w	obVelX(a0),d0
000177D0 48C0                       		ext.l	d0
000177D2 E180                       		asl.l	#8,d0
000177D4 9480                       		sub.l	d0,d2
000177D6 2142 0008                  		move.l	d2,obX(a0)
000177DA 303C 0038                  		move.w	#$38,d0
000177DE 48C0                       		ext.l	d0
000177E0 E180                       		asl.l	#8,d0
000177E2 9680                       		sub.l	d0,d3
000177E4 2143 000C                  		move.l	d3,obY(a0)
000177E8 4E75                       		rts	
000177EA                            ; ===========================================================================
000177EA                            
000177EA                            locret_1470A:
000177EA 4E75                       		rts	
000177EC                            ; ===========================================================================
000177EC 2628 000C                  		move.l	obY(a0),d3
000177F0 3028 0012                  		move.w	obVelY(a0),d0
000177F4 0440 0038                  		subi.w	#$38,d0
000177F8 3140 0012                  		move.w	d0,obVelY(a0)
000177FC 48C0                       		ext.l	d0
000177FE E180                       		asl.l	#8,d0
00017800 9680                       		sub.l	d0,d3
00017802 2143 000C                  		move.l	d3,obY(a0)
00017806 4E75                       		rts	
00017808 4E75                       		rts	
0001780A                            ; ===========================================================================
0001780A 2428 0008                  		move.l	obX(a0),d2
0001780E 2628 000C                  		move.l	obY(a0),d3
00017812 3028 0010                  		move.w	obVelX(a0),d0
00017816 48C0                       		ext.l	d0
00017818 E180                       		asl.l	#8,d0
0001781A 9480                       		sub.l	d0,d2
0001781C 3028 0012                  		move.w	obVelY(a0),d0
00017820 48C0                       		ext.l	d0
00017822 E180                       		asl.l	#8,d0
00017824 9680                       		sub.l	d0,d3
00017826 2142 0008                  		move.l	d2,obX(a0)
0001782A 2143 000C                  		move.l	d3,obY(a0)
0001782E 4E75                       		rts	
00017830                            
00017830                            ; ---------------------------------------------------------------------------
00017830                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017830                            ; ---------------------------------------------------------------------------
00017830                            
00017830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017830                            
00017830                            
00017830                            Sonic_Angle:
00017830 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017834 B240                       		cmp.w	d0,d1
00017836 6F00                       		ble.s	loc_1475E
00017838 1438 F768                  		move.b	($FFFFF768).w,d2
0001783C 3200                       		move.w	d0,d1
0001783E                            
0001783E                            loc_1475E:
0001783E 0802 0000                  		btst	#0,d2
00017842 6600                       		bne.s	loc_1476A
00017844 1142 0026                  		move.b	d2,obAngle(a0)
00017848 4E75                       		rts	
0001784A                            ; ===========================================================================
0001784A                            
0001784A                            loc_1476A:
0001784A 1428 0026                  		move.b	obAngle(a0),d2
0001784E 0602 0020                  		addi.b	#$20,d2
00017852 0202 00C0                  		andi.b	#$C0,d2
00017856 1142 0026                  		move.b	d2,obAngle(a0)
0001785A 4E75                       		rts	
0001785C                            ; End of function Sonic_Angle
0001785C                            
0001785C                            ; ---------------------------------------------------------------------------
0001785C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001785C                            ; ---------------------------------------------------------------------------
0001785C                            
0001785C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001785C                            
0001785C                            
0001785C                            Sonic_WalkVertR:
0001785C 3428 000C                  		move.w	obY(a0),d2
00017860 3628 0008                  		move.w	obX(a0),d3
00017864 7000                       		moveq	#0,d0
00017866 1028 0017                  		move.b	obWidth(a0),d0
0001786A 4880                       		ext.w	d0
0001786C 4440                       		neg.w	d0
0001786E D440                       		add.w	d0,d2
00017870 1028 0016                  		move.b	obHeight(a0),d0
00017874 4880                       		ext.w	d0
00017876 D640                       		add.w	d0,d3
00017878 49F8 F768                  		lea	($FFFFF768).w,a4
0001787C 367C 0010                  		movea.w	#$10,a3
00017880 3C3C 0000                  		move.w	#0,d6
00017884 7A0D                       		moveq	#$D,d5
00017886 6100 0000                  		bsr.w	FindWall
0001788A 3F01                       		move.w	d1,-(sp)
0001788C 3428 000C                  		move.w	obY(a0),d2
00017890 3628 0008                  		move.w	obX(a0),d3
00017894 7000                       		moveq	#0,d0
00017896 1028 0017                  		move.b	obWidth(a0),d0
0001789A 4880                       		ext.w	d0
0001789C D440                       		add.w	d0,d2
0001789E 1028 0016                  		move.b	obHeight(a0),d0
000178A2 4880                       		ext.w	d0
000178A4 D640                       		add.w	d0,d3
000178A6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178AA 367C 0010                  		movea.w	#$10,a3
000178AE 3C3C 0000                  		move.w	#0,d6
000178B2 7A0D                       		moveq	#$D,d5
000178B4 6100 0000                  		bsr.w	FindWall
000178B8 301F                       		move.w	(sp)+,d0
000178BA 6100 FF74                  		bsr.w	Sonic_Angle
000178BE 4A41                       		tst.w	d1
000178C0 6700                       		beq.s	locret_147F0
000178C2 6A00                       		bpl.s	loc_147F2
000178C4 0C41 FFF2                  		cmpi.w	#-$E,d1
000178C8 6D00 FF20                  		blt.w	locret_1470A
000178CC D368 0008                  		add.w	d1,obX(a0)
000178D0                            
000178D0                            locret_147F0:
000178D0 4E75                       		rts	
000178D2                            ; ===========================================================================
000178D2                            
000178D2                            loc_147F2:
000178D2 0C41 000E                  		cmpi.w	#$E,d1
000178D6 6E00                       		bgt.s	loc_147FE
000178D8                            
000178D8                            loc_147F8:
000178D8 D368 0008                  		add.w	d1,obX(a0)
000178DC 4E75                       		rts	
000178DE                            ; ===========================================================================
000178DE                            
000178DE                            loc_147FE:
000178DE 4A28 0038                  		tst.b	$38(a0)
000178E2 66F4                       		bne.s	loc_147F8
000178E4 08E8 0001 0022             		bset	#1,obStatus(a0)
000178EA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178F0 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178F6 4E75                       		rts	
000178F8                            ; End of function Sonic_WalkVertR
000178F8                            
000178F8                            ; ---------------------------------------------------------------------------
000178F8                            ; Subroutine allowing Sonic to walk upside-down
000178F8                            ; ---------------------------------------------------------------------------
000178F8                            
000178F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178F8                            
000178F8                            
000178F8                            Sonic_WalkCeiling:
000178F8 3428 000C                  		move.w	obY(a0),d2
000178FC 3628 0008                  		move.w	obX(a0),d3
00017900 7000                       		moveq	#0,d0
00017902 1028 0016                  		move.b	obHeight(a0),d0
00017906 4880                       		ext.w	d0
00017908 9440                       		sub.w	d0,d2
0001790A 0A42 000F                  		eori.w	#$F,d2
0001790E 1028 0017                  		move.b	obWidth(a0),d0
00017912 4880                       		ext.w	d0
00017914 D640                       		add.w	d0,d3
00017916 49F8 F768                  		lea	($FFFFF768).w,a4
0001791A 367C FFF0                  		movea.w	#-$10,a3
0001791E 3C3C 1000                  		move.w	#$1000,d6
00017922 7A0D                       		moveq	#$D,d5
00017924 6100 0000                  		bsr.w	FindFloor
00017928 3F01                       		move.w	d1,-(sp)
0001792A 3428 000C                  		move.w	obY(a0),d2
0001792E 3628 0008                  		move.w	obX(a0),d3
00017932 7000                       		moveq	#0,d0
00017934 1028 0016                  		move.b	obHeight(a0),d0
00017938 4880                       		ext.w	d0
0001793A 9440                       		sub.w	d0,d2
0001793C 0A42 000F                  		eori.w	#$F,d2
00017940 1028 0017                  		move.b	obWidth(a0),d0
00017944 4880                       		ext.w	d0
00017946 9640                       		sub.w	d0,d3
00017948 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001794C 367C FFF0                  		movea.w	#-$10,a3
00017950 3C3C 1000                  		move.w	#$1000,d6
00017954 7A0D                       		moveq	#$D,d5
00017956 6100 0000                  		bsr.w	FindFloor
0001795A 301F                       		move.w	(sp)+,d0
0001795C 6100 FED2                  		bsr.w	Sonic_Angle
00017960 4A41                       		tst.w	d1
00017962 6700                       		beq.s	locret_14892
00017964 6A00                       		bpl.s	loc_14894
00017966 0C41 FFF2                  		cmpi.w	#-$E,d1
0001796A 6D00 FE5A                  		blt.w	locret_146E6
0001796E 9368 000C                  		sub.w	d1,obY(a0)
00017972                            
00017972                            locret_14892:
00017972 4E75                       		rts	
00017974                            ; ===========================================================================
00017974                            
00017974                            loc_14894:
00017974 0C41 000E                  		cmpi.w	#$E,d1
00017978 6E00                       		bgt.s	loc_148A0
0001797A                            
0001797A                            loc_1489A:
0001797A 9368 000C                  		sub.w	d1,obY(a0)
0001797E 4E75                       		rts	
00017980                            ; ===========================================================================
00017980                            
00017980                            loc_148A0:
00017980 4A28 0038                  		tst.b	$38(a0)
00017984 66F4                       		bne.s	loc_1489A
00017986 08E8 0001 0022             		bset	#1,obStatus(a0)
0001798C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017992 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017998 4E75                       		rts	
0001799A                            ; End of function Sonic_WalkCeiling
0001799A                            
0001799A                            ; ---------------------------------------------------------------------------
0001799A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001799A                            ; ---------------------------------------------------------------------------
0001799A                            
0001799A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001799A                            
0001799A                            
0001799A                            Sonic_WalkVertL:
0001799A 3428 000C                  		move.w	obY(a0),d2
0001799E 3628 0008                  		move.w	obX(a0),d3
000179A2 7000                       		moveq	#0,d0
000179A4 1028 0017                  		move.b	obWidth(a0),d0
000179A8 4880                       		ext.w	d0
000179AA 9440                       		sub.w	d0,d2
000179AC 1028 0016                  		move.b	obHeight(a0),d0
000179B0 4880                       		ext.w	d0
000179B2 9640                       		sub.w	d0,d3
000179B4 0A43 000F                  		eori.w	#$F,d3
000179B8 49F8 F768                  		lea	($FFFFF768).w,a4
000179BC 367C FFF0                  		movea.w	#-$10,a3
000179C0 3C3C 0800                  		move.w	#$800,d6
000179C4 7A0D                       		moveq	#$D,d5
000179C6 6100 0000                  		bsr.w	FindWall
000179CA 3F01                       		move.w	d1,-(sp)
000179CC 3428 000C                  		move.w	obY(a0),d2
000179D0 3628 0008                  		move.w	obX(a0),d3
000179D4 7000                       		moveq	#0,d0
000179D6 1028 0017                  		move.b	obWidth(a0),d0
000179DA 4880                       		ext.w	d0
000179DC D440                       		add.w	d0,d2
000179DE 1028 0016                  		move.b	obHeight(a0),d0
000179E2 4880                       		ext.w	d0
000179E4 9640                       		sub.w	d0,d3
000179E6 0A43 000F                  		eori.w	#$F,d3
000179EA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179EE 367C FFF0                  		movea.w	#-$10,a3
000179F2 3C3C 0800                  		move.w	#$800,d6
000179F6 7A0D                       		moveq	#$D,d5
000179F8 6100 0000                  		bsr.w	FindWall
000179FC 301F                       		move.w	(sp)+,d0
000179FE 6100 FE30                  		bsr.w	Sonic_Angle
00017A02 4A41                       		tst.w	d1
00017A04 6700                       		beq.s	locret_14934
00017A06 6A00                       		bpl.s	loc_14936
00017A08 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A0C 6D00 FDDC                  		blt.w	locret_1470A
00017A10 9368 0008                  		sub.w	d1,obX(a0)
00017A14                            
00017A14                            locret_14934:
00017A14 4E75                       		rts	
00017A16                            ; ===========================================================================
00017A16                            
00017A16                            loc_14936:
00017A16 0C41 000E                  		cmpi.w	#$E,d1
00017A1A 6E00                       		bgt.s	loc_14942
00017A1C                            
00017A1C                            loc_1493C:
00017A1C 9368 0008                  		sub.w	d1,obX(a0)
00017A20 4E75                       		rts	
00017A22                            ; ===========================================================================
00017A22                            
00017A22                            loc_14942:
00017A22 4A28 0038                  		tst.b	$38(a0)
00017A26 66F4                       		bne.s	loc_1493C
00017A28 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A2E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A34 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A3A 4E75                       		rts	
00017A3C                            ; End of function Sonic_WalkVertL
00017A3C                            ; End of function Sonic_WalkVertL
00017A3C                            
00017A3C                            		include	"_incObj\sub FindNearestTile.asm"
00017A3C                            ; ---------------------------------------------------------------------------
00017A3C                            ; Subroutine to	find which tile	the object is standing on
00017A3C                            
00017A3C                            ; input:
00017A3C                            ;	d2 = y-position of object's bottom edge
00017A3C                            ;	d3 = x-position of object
00017A3C                            
00017A3C                            ; output:
00017A3C                            ;	a1 = address within 256x256 mappings where object is standing
00017A3C                            ;	     (refers to a 16x16 tile number)
00017A3C                            ; ---------------------------------------------------------------------------
00017A3C                            
00017A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A3C                            
00017A3C                            
00017A3C                            FindNearestTile:
00017A3C 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017A3E E248                       		lsr.w	#1,d0
00017A40 0240 0380                  		andi.w	#$380,d0
00017A44 3203                       		move.w	d3,d1		; get x-pos. of object
00017A46 E049                       		lsr.w	#8,d1
00017A48 0241 007F                  		andi.w	#$7F,d1
00017A4C D041                       		add.w	d1,d0		; combine
00017A4E 72FF                       		moveq	#-1,d1
00017A50 43F8 A400                  		lea	(v_lvllayout).w,a1
00017A54 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017A58 6700                       		beq.s	@blanktile	; branch if 0
00017A5A 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017A5C 5301                       		subq.b	#1,d1
00017A5E 4881                       		ext.w	d1
00017A60 EE59                       		ror.w	#7,d1
00017A62 3002                       		move.w	d2,d0
00017A64 D040                       		add.w	d0,d0
00017A66 0240 01E0                  		andi.w	#$1E0,d0
00017A6A D240                       		add.w	d0,d1
00017A6C 3003                       		move.w	d3,d0
00017A6E E648                       		lsr.w	#3,d0
00017A70 0240 001E                  		andi.w	#$1E,d0
00017A74 D240                       		add.w	d0,d1
00017A76                            
00017A76                            @blanktile:
00017A76 2241                       		movea.l	d1,a1
00017A78 4E75                       		rts	
00017A7A                            ; ===========================================================================
00017A7A                            
00017A7A                            @specialtile:
00017A7A 0241 007F                  		andi.w	#$7F,d1
00017A7E 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017A84 6700                       		beq.s	@treatasnormal	; if not, branch
00017A86 5241                       		addq.w	#1,d1
00017A88 0C41 0029                  		cmpi.w	#$29,d1
00017A8C 6600                       		bne.s	@treatasnormal
00017A8E 323C 0051                  		move.w	#$51,d1
00017A92                            
00017A92                            	@treatasnormal:
00017A92 5301                       		subq.b	#1,d1
00017A94 EE59                       		ror.w	#7,d1
00017A96 3002                       		move.w	d2,d0
00017A98 D040                       		add.w	d0,d0
00017A9A 0240 01E0                  		andi.w	#$1E0,d0
00017A9E D240                       		add.w	d0,d1
00017AA0 3003                       		move.w	d3,d0
00017AA2 E648                       		lsr.w	#3,d0
00017AA4 0240 001E                  		andi.w	#$1E,d0
00017AA8 D240                       		add.w	d0,d1
00017AAA 2241                       		movea.l	d1,a1
00017AAC 4E75                       		rts	
00017AAE                            ; End of function FindNearestTile
00017AAE                            ; End of function FindNearestTile
00017AAE                            		include	"_incObj\sub FindFloor.asm"
00017AAE                            ; ---------------------------------------------------------------------------
00017AAE                            ; Subroutine to	find the floor
00017AAE                            
00017AAE                            ; input:
00017AAE                            ;	d2 = y-position of object's bottom edge
00017AAE                            ;	d3 = x-position of object
00017AAE                            ;	d5 = bit to test for solidness
00017AAE                            
00017AAE                            ; output:
00017AAE                            ;	d1 = distance to the floor
00017AAE                            ;	a1 = address within 256x256 mappings where object is standing
00017AAE                            ;	     (refers to a 16x16 tile number)
00017AAE                            ;	(a4) = floor angle
00017AAE                            ; ---------------------------------------------------------------------------
00017AAE                            
00017AAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AAE                            
00017AAE                            
00017AAE                            FindFloor:
00017AAE 618C                       		bsr.s	FindNearestTile
00017AB0 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017AB2 3800                       		move.w	d0,d4
00017AB4 0240 07FF                  		andi.w	#$7FF,d0
00017AB8 6700                       		beq.s	@isblank	; branch if tile is blank
00017ABA 0B04                       		btst	d5,d4		; is the tile solid?
00017ABC 6600                       		bne.s	@issolid	; if yes, branch
00017ABE                            
00017ABE                            @isblank:
00017ABE D44B                       		add.w	a3,d2
00017AC0 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017AC4 944B                       		sub.w	a3,d2
00017AC6 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017ACA 4E75                       		rts	
00017ACC                            ; ===========================================================================
00017ACC                            
00017ACC                            @issolid:
00017ACC 2478 F796                  		movea.l	(v_collindex).w,a2
00017AD0 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017AD4 0240 00FF                  		andi.w	#$FF,d0
00017AD8 67E4                       		beq.s	@isblank	; branch if 0
00017ADA 45F9 0000 0000             		lea	(AngleMap).l,a2
00017AE0 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017AE4 E948                       		lsl.w	#4,d0
00017AE6 3203                       		move.w	d3,d1		; get x-pos. of object
00017AE8 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017AEC 6700                       		beq.s	@noflip		; if not, branch
00017AEE 4641                       		not.w	d1
00017AF0 4414                       		neg.b	(a4)
00017AF2                            
00017AF2                            	@noflip:
00017AF2 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017AF6 6700                       		beq.s	@noflip2	; if not, branch
00017AF8 0614 0040                  		addi.b	#$40,(a4)
00017AFC 4414                       		neg.b	(a4)
00017AFE 0414 0040                  		subi.b	#$40,(a4)
00017B02                            
00017B02                            	@noflip2:
00017B02 0241 000F                  		andi.w	#$F,d1
00017B06 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017B08 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B0E 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017B12 4880                       		ext.w	d0
00017B14 BD44                       		eor.w	d6,d4
00017B16 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B1A 6700                       		beq.s	@noflip3	; if not, branch
00017B1C 4440                       		neg.w	d0
00017B1E                            
00017B1E                            	@noflip3:
00017B1E 4A40                       		tst.w	d0
00017B20 679C                       		beq.s	@isblank	; branch if height is 0
00017B22 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017B24 0C00 0010                  		cmpi.b	#$10,d0
00017B28 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017B2A 3202                       		move.w	d2,d1		; get y-pos. of object
00017B2C 0241 000F                  		andi.w	#$F,d1
00017B30 D041                       		add.w	d1,d0
00017B32 323C 000F                  		move.w	#$F,d1
00017B36 9240                       		sub.w	d0,d1		; return distance to floor
00017B38 4E75                       		rts	
00017B3A                            ; ===========================================================================
00017B3A                            
00017B3A                            @negfloor:
00017B3A 3202                       		move.w	d2,d1
00017B3C 0241 000F                  		andi.w	#$F,d1
00017B40 D041                       		add.w	d1,d0
00017B42 6A00 FF7A                  		bpl.w	@isblank
00017B46                            
00017B46                            @maxfloor:
00017B46 944B                       		sub.w	a3,d2
00017B48 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017B4C D44B                       		add.w	a3,d2
00017B4E 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017B52 4E75                       		rts	
00017B54                            ; End of function FindFloor
00017B54                            
00017B54                            
00017B54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B54                            
00017B54                            
00017B54                            FindFloor2:
00017B54 6100 FEE6                  		bsr.w	FindNearestTile
00017B58 3011                       		move.w	(a1),d0
00017B5A 3800                       		move.w	d0,d4
00017B5C 0240 07FF                  		andi.w	#$7FF,d0
00017B60 6700                       		beq.s	@isblank2
00017B62 0B04                       		btst	d5,d4
00017B64 6600                       		bne.s	@issolid
00017B66                            
00017B66                            @isblank2:
00017B66 323C 000F                  		move.w	#$F,d1
00017B6A 3002                       		move.w	d2,d0
00017B6C 0240 000F                  		andi.w	#$F,d0
00017B70 9240                       		sub.w	d0,d1
00017B72 4E75                       		rts	
00017B74                            ; ===========================================================================
00017B74                            
00017B74                            @issolid:
00017B74 2478 F796                  		movea.l	(v_collindex).w,a2
00017B78 1032 0000                  		move.b	(a2,d0.w),d0
00017B7C 0240 00FF                  		andi.w	#$FF,d0
00017B80 67E4                       		beq.s	@isblank2
00017B82 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B88 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B8C E948                       		lsl.w	#4,d0
00017B8E 3203                       		move.w	d3,d1
00017B90 0804 000B                  		btst	#$B,d4
00017B94 6700                       		beq.s	@noflip
00017B96 4641                       		not.w	d1
00017B98 4414                       		neg.b	(a4)
00017B9A                            
00017B9A                            	@noflip:
00017B9A 0804 000C                  		btst	#$C,d4
00017B9E 6700                       		beq.s	@noflip2
00017BA0 0614 0040                  		addi.b	#$40,(a4)
00017BA4 4414                       		neg.b	(a4)
00017BA6 0414 0040                  		subi.b	#$40,(a4)
00017BAA                            
00017BAA                            	@noflip2:
00017BAA 0241 000F                  		andi.w	#$F,d1
00017BAE D240                       		add.w	d0,d1
00017BB0 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BB6 1032 1000                  		move.b	(a2,d1.w),d0
00017BBA 4880                       		ext.w	d0
00017BBC BD44                       		eor.w	d6,d4
00017BBE 0804 000C                  		btst	#$C,d4
00017BC2 6700                       		beq.s	@noflip3
00017BC4 4440                       		neg.w	d0
00017BC6                            
00017BC6                            	@noflip3:
00017BC6 4A40                       		tst.w	d0
00017BC8 679C                       		beq.s	@isblank2
00017BCA 6B00                       		bmi.s	@negfloor
00017BCC 3202                       		move.w	d2,d1
00017BCE 0241 000F                  		andi.w	#$F,d1
00017BD2 D041                       		add.w	d1,d0
00017BD4 323C 000F                  		move.w	#$F,d1
00017BD8 9240                       		sub.w	d0,d1
00017BDA 4E75                       		rts	
00017BDC                            ; ===========================================================================
00017BDC                            
00017BDC                            @negfloor:
00017BDC 3202                       		move.w	d2,d1
00017BDE 0241 000F                  		andi.w	#$F,d1
00017BE2 D041                       		add.w	d1,d0
00017BE4 6A00 FF80                  		bpl.w	@isblank2
00017BE8 4641                       		not.w	d1
00017BEA 4E75                       		rts	
00017BEC                            ; End of function FindFloor2
00017BEC                            ; End of function FindFloor2
00017BEC                            		include	"_incObj\sub FindWall.asm"
00017BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BEC                            
00017BEC                            
00017BEC                            FindWall:
00017BEC 6100 FE4E                  		bsr.w	FindNearestTile
00017BF0 3011                       		move.w	(a1),d0
00017BF2 3800                       		move.w	d0,d4
00017BF4 0240 07FF                  		andi.w	#$7FF,d0
00017BF8 6700                       		beq.s	loc_14B1E
00017BFA 0B04                       		btst	d5,d4
00017BFC 6600                       		bne.s	loc_14B2C
00017BFE                            
00017BFE                            loc_14B1E:
00017BFE D64B                       		add.w	a3,d3
00017C00 6100 0000                  		bsr.w	FindWall2
00017C04 964B                       		sub.w	a3,d3
00017C06 0641 0010                  		addi.w	#$10,d1
00017C0A 4E75                       		rts	
00017C0C                            ; ===========================================================================
00017C0C                            
00017C0C                            loc_14B2C:
00017C0C 2478 F796                  		movea.l	(v_collindex).w,a2
00017C10 1032 0000                  		move.b	(a2,d0.w),d0
00017C14 0240 00FF                  		andi.w	#$FF,d0
00017C18 67E4                       		beq.s	loc_14B1E
00017C1A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C20 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C24 E948                       		lsl.w	#4,d0
00017C26 3202                       		move.w	d2,d1
00017C28 0804 000C                  		btst	#$C,d4
00017C2C 6700                       		beq.s	loc_14B5A
00017C2E 4641                       		not.w	d1
00017C30 0614 0040                  		addi.b	#$40,(a4)
00017C34 4414                       		neg.b	(a4)
00017C36 0414 0040                  		subi.b	#$40,(a4)
00017C3A                            
00017C3A                            loc_14B5A:
00017C3A 0804 000B                  		btst	#$B,d4
00017C3E 6700                       		beq.s	loc_14B62
00017C40 4414                       		neg.b	(a4)
00017C42                            
00017C42                            loc_14B62:
00017C42 0241 000F                  		andi.w	#$F,d1
00017C46 D240                       		add.w	d0,d1
00017C48 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C4E 1032 1000                  		move.b	(a2,d1.w),d0
00017C52 4880                       		ext.w	d0
00017C54 BD44                       		eor.w	d6,d4
00017C56 0804 000B                  		btst	#$B,d4
00017C5A 6700                       		beq.s	loc_14B7E
00017C5C 4440                       		neg.w	d0
00017C5E                            
00017C5E                            loc_14B7E:
00017C5E 4A40                       		tst.w	d0
00017C60 679C                       		beq.s	loc_14B1E
00017C62 6B00                       		bmi.s	loc_14B9A
00017C64 0C00 0010                  		cmpi.b	#$10,d0
00017C68 6700                       		beq.s	loc_14BA6
00017C6A 3203                       		move.w	d3,d1
00017C6C 0241 000F                  		andi.w	#$F,d1
00017C70 D041                       		add.w	d1,d0
00017C72 323C 000F                  		move.w	#$F,d1
00017C76 9240                       		sub.w	d0,d1
00017C78 4E75                       		rts	
00017C7A                            ; ===========================================================================
00017C7A                            
00017C7A                            loc_14B9A:
00017C7A 3203                       		move.w	d3,d1
00017C7C 0241 000F                  		andi.w	#$F,d1
00017C80 D041                       		add.w	d1,d0
00017C82 6A00 FF7A                  		bpl.w	loc_14B1E
00017C86                            
00017C86                            loc_14BA6:
00017C86 964B                       		sub.w	a3,d3
00017C88 6100 0000                  		bsr.w	FindWall2
00017C8C D64B                       		add.w	a3,d3
00017C8E 0441 0010                  		subi.w	#$10,d1
00017C92 4E75                       		rts	
00017C94                            ; End of function FindWall
00017C94                            
00017C94                            
00017C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C94                            
00017C94                            
00017C94                            FindWall2:
00017C94 6100 FDA6                  		bsr.w	FindNearestTile
00017C98 3011                       		move.w	(a1),d0
00017C9A 3800                       		move.w	d0,d4
00017C9C 0240 07FF                  		andi.w	#$7FF,d0
00017CA0 6700                       		beq.s	loc_14BC6
00017CA2 0B04                       		btst	d5,d4
00017CA4 6600                       		bne.s	loc_14BD4
00017CA6                            
00017CA6                            loc_14BC6:
00017CA6 323C 000F                  		move.w	#$F,d1
00017CAA 3003                       		move.w	d3,d0
00017CAC 0240 000F                  		andi.w	#$F,d0
00017CB0 9240                       		sub.w	d0,d1
00017CB2 4E75                       		rts	
00017CB4                            ; ===========================================================================
00017CB4                            
00017CB4                            loc_14BD4:
00017CB4 2478 F796                  		movea.l	(v_collindex).w,a2
00017CB8 1032 0000                  		move.b	(a2,d0.w),d0
00017CBC 0240 00FF                  		andi.w	#$FF,d0
00017CC0 67E4                       		beq.s	loc_14BC6
00017CC2 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CC8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CCC E948                       		lsl.w	#4,d0
00017CCE 3202                       		move.w	d2,d1
00017CD0 0804 000C                  		btst	#$C,d4
00017CD4 6700                       		beq.s	loc_14C02
00017CD6 4641                       		not.w	d1
00017CD8 0614 0040                  		addi.b	#$40,(a4)
00017CDC 4414                       		neg.b	(a4)
00017CDE 0414 0040                  		subi.b	#$40,(a4)
00017CE2                            
00017CE2                            loc_14C02:
00017CE2 0804 000B                  		btst	#$B,d4
00017CE6 6700                       		beq.s	loc_14C0A
00017CE8 4414                       		neg.b	(a4)
00017CEA                            
00017CEA                            loc_14C0A:
00017CEA 0241 000F                  		andi.w	#$F,d1
00017CEE D240                       		add.w	d0,d1
00017CF0 45F9 0000 0000             		lea	(CollArray2).l,a2
00017CF6 1032 1000                  		move.b	(a2,d1.w),d0
00017CFA 4880                       		ext.w	d0
00017CFC BD44                       		eor.w	d6,d4
00017CFE 0804 000B                  		btst	#$B,d4
00017D02 6700                       		beq.s	loc_14C26
00017D04 4440                       		neg.w	d0
00017D06                            
00017D06                            loc_14C26:
00017D06 4A40                       		tst.w	d0
00017D08 679C                       		beq.s	loc_14BC6
00017D0A 6B00                       		bmi.s	loc_14C3C
00017D0C 3203                       		move.w	d3,d1
00017D0E 0241 000F                  		andi.w	#$F,d1
00017D12 D041                       		add.w	d1,d0
00017D14 323C 000F                  		move.w	#$F,d1
00017D18 9240                       		sub.w	d0,d1
00017D1A 4E75                       		rts	
00017D1C                            ; ===========================================================================
00017D1C                            
00017D1C                            loc_14C3C:
00017D1C 3203                       		move.w	d3,d1
00017D1E 0241 000F                  		andi.w	#$F,d1
00017D22 D041                       		add.w	d1,d0
00017D24 6A00 FF80                  		bpl.w	loc_14BC6
00017D28 4641                       		not.w	d1
00017D2A 4E75                       		rts	
00017D2C                            ; End of function FindWall2
00017D2C                            ; End of function FindWall2
00017D2C                            
00017D2C                            ; ---------------------------------------------------------------------------
00017D2C                            ; Unused floor/wall subroutine - logs something	to do with collision
00017D2C                            ; ---------------------------------------------------------------------------
00017D2C                            
00017D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D2C                            
00017D2C                            
00017D2C                            FloorLog_Unk:
00017D2C 4E75                       		rts	
00017D2E                            
00017D2E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D34 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D3A 363C 00FF                  		move.w	#$FF,d3
00017D3E                            
00017D3E                            loc_14C5E:
00017D3E 7A10                       		moveq	#$10,d5
00017D40 343C 000F                  		move.w	#$F,d2
00017D44                            
00017D44                            loc_14C64:
00017D44 7800                       		moveq	#0,d4
00017D46 323C 000F                  		move.w	#$F,d1
00017D4A                            
00017D4A                            loc_14C6A:
00017D4A 3019                       		move.w	(a1)+,d0
00017D4C EAA8                       		lsr.l	d5,d0
00017D4E D944                       		addx.w	d4,d4
00017D50 51C9 FFF8                  		dbf	d1,loc_14C6A
00017D54                            
00017D54 34C4                       		move.w	d4,(a2)+
00017D56 92FC 0020                  		suba.w	#$20,a1
00017D5A 5345                       		subq.w	#1,d5
00017D5C 51CA FFE6                  		dbf	d2,loc_14C64
00017D60                            
00017D60 D2FC 0020                  		adda.w	#$20,a1
00017D64 51CB FFD8                  		dbf	d3,loc_14C5E
00017D68                            
00017D68 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D6E 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D74 6100                       		bsr.s	FloorLog_Unk2
00017D76 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D7C 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D82                            
00017D82                            ; End of function FloorLog_Unk
00017D82                            
00017D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D82                            
00017D82                            
00017D82                            FloorLog_Unk2:
00017D82 363C 0FFF                  		move.w	#$FFF,d3
00017D86                            
00017D86                            loc_14CA6:
00017D86 7400                       		moveq	#0,d2
00017D88 323C 000F                  		move.w	#$F,d1
00017D8C 3019                       		move.w	(a1)+,d0
00017D8E 6700                       		beq.s	loc_14CD4
00017D90 6B00                       		bmi.s	loc_14CBE
00017D92                            
00017D92                            loc_14CB2:
00017D92 E248                       		lsr.w	#1,d0
00017D94 6400                       		bhs.s	loc_14CB8
00017D96 5202                       		addq.b	#1,d2
00017D98                            
00017D98                            loc_14CB8:
00017D98 51C9 FFF8                  		dbf	d1,loc_14CB2
00017D9C                            
00017D9C 6000                       		bra.s	loc_14CD6
00017D9E                            ; ===========================================================================
00017D9E                            
00017D9E                            loc_14CBE:
00017D9E 0C40 FFFF                  		cmpi.w	#-1,d0
00017DA2 6700                       		beq.s	loc_14CD0
00017DA4                            
00017DA4                            loc_14CC4:
00017DA4 E348                       		lsl.w	#1,d0
00017DA6 6400                       		bhs.s	loc_14CCA
00017DA8 5302                       		subq.b	#1,d2
00017DAA                            
00017DAA                            loc_14CCA:
00017DAA 51C9 FFF8                  		dbf	d1,loc_14CC4
00017DAE                            
00017DAE 6000                       		bra.s	loc_14CD6
00017DB0                            ; ===========================================================================
00017DB0                            
00017DB0                            loc_14CD0:
00017DB0 303C 0010                  		move.w	#$10,d0
00017DB4                            
00017DB4                            loc_14CD4:
00017DB4 3400                       		move.w	d0,d2
00017DB6                            
00017DB6                            loc_14CD6:
00017DB6 14C2                       		move.b	d2,(a2)+
00017DB8 51CB FFCC                  		dbf	d3,loc_14CA6
00017DBC                            
00017DBC 4E75                       		rts	
00017DBE                            
00017DBE                            ; End of function FloorLog_Unk2
00017DBE                            
00017DBE                            
00017DBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DBE                            
00017DBE                            
00017DBE                            Sonic_WalkSpeed:
00017DBE 2628 0008                  		move.l	obX(a0),d3
00017DC2 2428 000C                  		move.l	obY(a0),d2
00017DC6 3228 0010                  		move.w	obVelX(a0),d1
00017DCA 48C1                       		ext.l	d1
00017DCC E181                       		asl.l	#8,d1
00017DCE D681                       		add.l	d1,d3
00017DD0 3228 0012                  		move.w	obVelY(a0),d1
00017DD4 48C1                       		ext.l	d1
00017DD6 E181                       		asl.l	#8,d1
00017DD8 D481                       		add.l	d1,d2
00017DDA 4842                       		swap	d2
00017DDC 4843                       		swap	d3
00017DDE 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017DE2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017DE6 1200                       		move.b	d0,d1
00017DE8 0600 0020                  		addi.b	#$20,d0
00017DEC 6A00                       		bpl.s	loc_14D1A
00017DEE 1001                       		move.b	d1,d0
00017DF0 6A00                       		bpl.s	loc_14D14
00017DF2 5300                       		subq.b	#1,d0
00017DF4                            
00017DF4                            loc_14D14:
00017DF4 0600 0020                  		addi.b	#$20,d0
00017DF8 6000                       		bra.s	loc_14D24
00017DFA                            ; ===========================================================================
00017DFA                            
00017DFA                            loc_14D1A:
00017DFA 1001                       		move.b	d1,d0
00017DFC 6A00                       		bpl.s	loc_14D20
00017DFE 5200                       		addq.b	#1,d0
00017E00                            
00017E00                            loc_14D20:
00017E00 0600 001F                  		addi.b	#$1F,d0
00017E04                            
00017E04                            loc_14D24:
00017E04 0200 00C0                  		andi.b	#$C0,d0
00017E08 6700 0000                  		beq.w	loc_14DF0
00017E0C 0C00 0080                  		cmpi.b	#$80,d0
00017E10 6700 0000                  		beq.w	loc_14F7C
00017E14 0201 0038                  		andi.b	#$38,d1
00017E18 6600                       		bne.s	loc_14D3C
00017E1A 5042                       		addq.w	#8,d2
00017E1C                            
00017E1C                            loc_14D3C:
00017E1C 0C00 0040                  		cmpi.b	#$40,d0
00017E20 6700 0000                  		beq.w	loc_1504A
00017E24 6000 0000                  		bra.w	loc_14EBC
00017E28                            
00017E28                            ; End of function Sonic_WalkSpeed
00017E28                            
00017E28                            
00017E28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E28                            
00017E28                            
00017E28                            sub_14D48:
00017E28 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E2C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E30 0600 0020                  		addi.b	#$20,d0
00017E34 0200 00C0                  		andi.b	#$C0,d0
00017E38 0C00 0040                  		cmpi.b	#$40,d0
00017E3C 6700 0000                  		beq.w	loc_14FD6
00017E40 0C00 0080                  		cmpi.b	#$80,d0
00017E44 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017E48 0C00 00C0                  		cmpi.b	#$C0,d0
00017E4C 6700 0000                  		beq.w	sub_14E50
00017E50                            
00017E50                            ; End of function sub_14D48
00017E50                            
00017E50                            ; ---------------------------------------------------------------------------
00017E50                            ; Subroutine to	make Sonic land	on the floor after jumping
00017E50                            ; ---------------------------------------------------------------------------
00017E50                            
00017E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E50                            
00017E50                            
00017E50                            Sonic_HitFloor:
00017E50 3428 000C                  		move.w	obY(a0),d2
00017E54 3628 0008                  		move.w	obX(a0),d3
00017E58 7000                       		moveq	#0,d0
00017E5A 1028 0016                  		move.b	obHeight(a0),d0
00017E5E 4880                       		ext.w	d0
00017E60 D440                       		add.w	d0,d2
00017E62 1028 0017                  		move.b	obWidth(a0),d0
00017E66 4880                       		ext.w	d0
00017E68 D640                       		add.w	d0,d3
00017E6A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E6E 367C 0010                  		movea.w	#$10,a3
00017E72 3C3C 0000                  		move.w	#0,d6
00017E76 7A0D                       		moveq	#$D,d5
00017E78 6100 FC34                  		bsr.w	FindFloor
00017E7C 3F01                       		move.w	d1,-(sp)
00017E7E 3428 000C                  		move.w	obY(a0),d2
00017E82 3628 0008                  		move.w	obX(a0),d3
00017E86 7000                       		moveq	#0,d0
00017E88 1028 0016                  		move.b	obHeight(a0),d0
00017E8C 4880                       		ext.w	d0
00017E8E D440                       		add.w	d0,d2
00017E90 1028 0017                  		move.b	obWidth(a0),d0
00017E94 4880                       		ext.w	d0
00017E96 9640                       		sub.w	d0,d3
00017E98 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E9C 367C 0010                  		movea.w	#$10,a3
00017EA0 3C3C 0000                  		move.w	#0,d6
00017EA4 7A0D                       		moveq	#$D,d5
00017EA6 6100 FC06                  		bsr.w	FindFloor
00017EAA 301F                       		move.w	(sp)+,d0
00017EAC 143C 0000                  		move.b	#0,d2
00017EB0                            
00017EB0                            loc_14DD0:
00017EB0 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017EB4 B240                       		cmp.w	d0,d1
00017EB6 6F00                       		ble.s	loc_14DDE
00017EB8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EBC C141                       		exg	d0,d1
00017EBE                            
00017EBE                            loc_14DDE:
00017EBE 0803 0000                  		btst	#0,d3
00017EC2 6700                       		beq.s	locret_14DE6
00017EC4 1602                       		move.b	d2,d3
00017EC6                            
00017EC6                            locret_14DE6:
00017EC6 4E75                       		rts	
00017EC8                            
00017EC8                            ; End of function Sonic_HitFloor
00017EC8                            
00017EC8                            ; ===========================================================================
00017EC8 3428 000C                  		move.w	obY(a0),d2
00017ECC 3628 0008                  		move.w	obX(a0),d3
00017ED0                            
00017ED0                            loc_14DF0:
00017ED0 0642 000A                  		addi.w	#$A,d2
00017ED4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED8 367C 0010                  		movea.w	#$10,a3
00017EDC 3C3C 0000                  		move.w	#0,d6
00017EE0 7A0E                       		moveq	#$E,d5
00017EE2 6100 FBCA                  		bsr.w	FindFloor
00017EE6 143C 0000                  		move.b	#0,d2
00017EEA                            
00017EEA                            loc_14E0A:
00017EEA 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EEE 0803 0000                  		btst	#0,d3
00017EF2 6700                       		beq.s	locret_14E16
00017EF4 1602                       		move.b	d2,d3
00017EF6                            
00017EF6                            locret_14E16:
00017EF6 4E75                       		rts	
00017EF8                            
00017EF8                            		include	"_incObj\sub ObjFloorDist.asm"
00017EF8                            ; ---------------------------------------------------------------------------
00017EF8                            ; Subroutine to find the distance of an object to the floor
00017EF8                            
00017EF8                            ; input:
00017EF8                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017EF8                            
00017EF8                            ; output:
00017EF8                            ;	d1 = distance to the floor
00017EF8                            ;	d3 = floor angle
00017EF8                            ;	a1 = address within 256x256 mappings where object is standing
00017EF8                            ;	     (refers to a 16x16 tile number)
00017EF8                            ;	(a4) = floor angle
00017EF8                            ; ---------------------------------------------------------------------------
00017EF8                            
00017EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF8                            
00017EF8                            
00017EF8                            ObjFloorDist:
00017EF8 3628 0008                  		move.w	obX(a0),d3
00017EFC                            
00017EFC                            
00017EFC                            ObjFloorDist2:
00017EFC 3428 000C                  		move.w	obY(a0),d2
00017F00 7000                       		moveq	#0,d0
00017F02 1028 0016                  		move.b	obHeight(a0),d0
00017F06 4880                       		ext.w	d0
00017F08 D440                       		add.w	d0,d2
00017F0A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F0E 18BC 0000                  		move.b	#0,(a4)
00017F12 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017F16 3C3C 0000                  		move.w	#0,d6
00017F1A 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017F1C 6100 FB90                  		bsr.w	FindFloor
00017F20 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F24 0803 0000                  		btst	#0,d3
00017F28 6700                       		beq.s	locret_14E4E
00017F2A 163C 0000                  		move.b	#0,d3
00017F2E                            
00017F2E                            	locret_14E4E:
00017F2E 4E75                       		rts	
00017F30                            
00017F30                            ; End of function ObjFloorDist2
00017F30                            ; End of function ObjFloorDist2
00017F30                            
00017F30                            
00017F30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F30                            
00017F30                            
00017F30                            sub_14E50:
00017F30 3428 000C                  		move.w	obY(a0),d2
00017F34 3628 0008                  		move.w	obX(a0),d3
00017F38 7000                       		moveq	#0,d0
00017F3A 1028 0017                  		move.b	obWidth(a0),d0
00017F3E 4880                       		ext.w	d0
00017F40 9440                       		sub.w	d0,d2
00017F42 1028 0016                  		move.b	obHeight(a0),d0
00017F46 4880                       		ext.w	d0
00017F48 D640                       		add.w	d0,d3
00017F4A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F4E 367C 0010                  		movea.w	#$10,a3
00017F52 3C3C 0000                  		move.w	#0,d6
00017F56 7A0E                       		moveq	#$E,d5
00017F58 6100 FC92                  		bsr.w	FindWall
00017F5C 3F01                       		move.w	d1,-(sp)
00017F5E 3428 000C                  		move.w	obY(a0),d2
00017F62 3628 0008                  		move.w	obX(a0),d3
00017F66 7000                       		moveq	#0,d0
00017F68 1028 0017                  		move.b	obWidth(a0),d0
00017F6C 4880                       		ext.w	d0
00017F6E D440                       		add.w	d0,d2
00017F70 1028 0016                  		move.b	obHeight(a0),d0
00017F74 4880                       		ext.w	d0
00017F76 D640                       		add.w	d0,d3
00017F78 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F7C 367C 0010                  		movea.w	#$10,a3
00017F80 3C3C 0000                  		move.w	#0,d6
00017F84 7A0E                       		moveq	#$E,d5
00017F86 6100 FC64                  		bsr.w	FindWall
00017F8A 301F                       		move.w	(sp)+,d0
00017F8C 143C 00C0                  		move.b	#-$40,d2
00017F90 6000 FF1E                  		bra.w	loc_14DD0
00017F94                            
00017F94                            ; End of function sub_14E50
00017F94                            
00017F94                            
00017F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F94                            
00017F94                            
00017F94                            sub_14EB4:
00017F94 3428 000C                  		move.w	obY(a0),d2
00017F98 3628 0008                  		move.w	obX(a0),d3
00017F9C                            
00017F9C                            loc_14EBC:
00017F9C 0643 000A                  		addi.w	#$A,d3
00017FA0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FA4 367C 0010                  		movea.w	#$10,a3
00017FA8 3C3C 0000                  		move.w	#0,d6
00017FAC 7A0E                       		moveq	#$E,d5
00017FAE 6100 FC3C                  		bsr.w	FindWall
00017FB2 143C 00C0                  		move.b	#-$40,d2
00017FB6 6000 FF32                  		bra.w	loc_14E0A
00017FBA                            
00017FBA                            ; End of function sub_14EB4
00017FBA                            
00017FBA                            ; ---------------------------------------------------------------------------
00017FBA                            ; Subroutine to	detect when an object hits a wall to its right
00017FBA                            ; ---------------------------------------------------------------------------
00017FBA                            
00017FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FBA                            
00017FBA                            
00017FBA                            ObjHitWallRight:
00017FBA D668 0008                  		add.w	obX(a0),d3
00017FBE 3428 000C                  		move.w	obY(a0),d2
00017FC2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FC6 18BC 0000                  		move.b	#0,(a4)
00017FCA 367C 0010                  		movea.w	#$10,a3
00017FCE 3C3C 0000                  		move.w	#0,d6
00017FD2 7A0E                       		moveq	#$E,d5
00017FD4 6100 FC16                  		bsr.w	FindWall
00017FD8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FDC 0803 0000                  		btst	#0,d3
00017FE0 6700                       		beq.s	locret_14F06
00017FE2 163C 00C0                  		move.b	#-$40,d3
00017FE6                            
00017FE6                            locret_14F06:
00017FE6 4E75                       		rts	
00017FE8                            
00017FE8                            ; End of function ObjHitWallRight
00017FE8                            
00017FE8                            ; ---------------------------------------------------------------------------
00017FE8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017FE8                            ; touches them
00017FE8                            ; ---------------------------------------------------------------------------
00017FE8                            
00017FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FE8                            
00017FE8                            
00017FE8                            Sonic_DontRunOnWalls:
00017FE8 3428 000C                  		move.w	obY(a0),d2
00017FEC 3628 0008                  		move.w	obX(a0),d3
00017FF0 7000                       		moveq	#0,d0
00017FF2 1028 0016                  		move.b	obHeight(a0),d0
00017FF6 4880                       		ext.w	d0
00017FF8 9440                       		sub.w	d0,d2
00017FFA 0A42 000F                  		eori.w	#$F,d2
00017FFE 1028 0017                  		move.b	obWidth(a0),d0
00018002 4880                       		ext.w	d0
00018004 D640                       		add.w	d0,d3
00018006 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001800A 367C FFF0                  		movea.w	#-$10,a3
0001800E 3C3C 1000                  		move.w	#$1000,d6
00018012 7A0E                       		moveq	#$E,d5
00018014 6100 FA98                  		bsr.w	FindFloor
00018018 3F01                       		move.w	d1,-(sp)
0001801A 3428 000C                  		move.w	obY(a0),d2
0001801E 3628 0008                  		move.w	obX(a0),d3
00018022 7000                       		moveq	#0,d0
00018024 1028 0016                  		move.b	obHeight(a0),d0
00018028 4880                       		ext.w	d0
0001802A 9440                       		sub.w	d0,d2
0001802C 0A42 000F                  		eori.w	#$F,d2
00018030 1028 0017                  		move.b	obWidth(a0),d0
00018034 4880                       		ext.w	d0
00018036 9640                       		sub.w	d0,d3
00018038 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001803C 367C FFF0                  		movea.w	#-$10,a3
00018040 3C3C 1000                  		move.w	#$1000,d6
00018044 7A0E                       		moveq	#$E,d5
00018046 6100 FA66                  		bsr.w	FindFloor
0001804A 301F                       		move.w	(sp)+,d0
0001804C 143C 0080                  		move.b	#-$80,d2
00018050 6000 FE5E                  		bra.w	loc_14DD0
00018054                            ; End of function Sonic_DontRunOnWalls
00018054                            
00018054                            ; ===========================================================================
00018054 3428 000C                  		move.w	obY(a0),d2
00018058 3628 0008                  		move.w	obX(a0),d3
0001805C                            
0001805C                            loc_14F7C:
0001805C 0442 000A                  		subi.w	#$A,d2
00018060 0A42 000F                  		eori.w	#$F,d2
00018064 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018068 367C FFF0                  		movea.w	#-$10,a3
0001806C 3C3C 1000                  		move.w	#$1000,d6
00018070 7A0E                       		moveq	#$E,d5
00018072 6100 FA3A                  		bsr.w	FindFloor
00018076 143C 0080                  		move.b	#-$80,d2
0001807A 6000 FE6E                  		bra.w	loc_14E0A
0001807E                            
0001807E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001807E                            
0001807E                            
0001807E                            ObjHitCeiling:
0001807E 3428 000C                  		move.w	obY(a0),d2
00018082 3628 0008                  		move.w	obX(a0),d3
00018086 7000                       		moveq	#0,d0
00018088 1028 0016                  		move.b	obHeight(a0),d0
0001808C 4880                       		ext.w	d0
0001808E 9440                       		sub.w	d0,d2
00018090 0A42 000F                  		eori.w	#$F,d2
00018094 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018098 367C FFF0                  		movea.w	#-$10,a3
0001809C 3C3C 1000                  		move.w	#$1000,d6
000180A0 7A0E                       		moveq	#$E,d5
000180A2 6100 FA0A                  		bsr.w	FindFloor
000180A6 1638 F768                  		move.b	(v_anglebuffer).w,d3
000180AA 0803 0000                  		btst	#0,d3
000180AE 6700                       		beq.s	locret_14FD4
000180B0 163C 0080                  		move.b	#-$80,d3
000180B4                            
000180B4                            locret_14FD4:
000180B4 4E75                       		rts	
000180B6                            ; End of function ObjHitCeiling
000180B6                            
000180B6                            ; ===========================================================================
000180B6                            
000180B6                            loc_14FD6:
000180B6 3428 000C                  		move.w	obY(a0),d2
000180BA 3628 0008                  		move.w	obX(a0),d3
000180BE 7000                       		moveq	#0,d0
000180C0 1028 0017                  		move.b	obWidth(a0),d0
000180C4 4880                       		ext.w	d0
000180C6 9440                       		sub.w	d0,d2
000180C8 1028 0016                  		move.b	obHeight(a0),d0
000180CC 4880                       		ext.w	d0
000180CE 9640                       		sub.w	d0,d3
000180D0 0A43 000F                  		eori.w	#$F,d3
000180D4 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180D8 367C FFF0                  		movea.w	#-$10,a3
000180DC 3C3C 0800                  		move.w	#$800,d6
000180E0 7A0E                       		moveq	#$E,d5
000180E2 6100 FB08                  		bsr.w	FindWall
000180E6 3F01                       		move.w	d1,-(sp)
000180E8 3428 000C                  		move.w	obY(a0),d2
000180EC 3628 0008                  		move.w	obX(a0),d3
000180F0 7000                       		moveq	#0,d0
000180F2 1028 0017                  		move.b	obWidth(a0),d0
000180F6 4880                       		ext.w	d0
000180F8 D440                       		add.w	d0,d2
000180FA 1028 0016                  		move.b	obHeight(a0),d0
000180FE 4880                       		ext.w	d0
00018100 9640                       		sub.w	d0,d3
00018102 0A43 000F                  		eori.w	#$F,d3
00018106 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001810A 367C FFF0                  		movea.w	#-$10,a3
0001810E 3C3C 0800                  		move.w	#$800,d6
00018112 7A0E                       		moveq	#$E,d5
00018114 6100 FAD6                  		bsr.w	FindWall
00018118 301F                       		move.w	(sp)+,d0
0001811A 143C 0040                  		move.b	#$40,d2
0001811E 6000 FD90                  		bra.w	loc_14DD0
00018122                            
00018122                            ; ---------------------------------------------------------------------------
00018122                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018122                            ; ---------------------------------------------------------------------------
00018122                            
00018122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018122                            
00018122                            
00018122                            Sonic_HitWall:
00018122 3428 000C                  		move.w	obY(a0),d2
00018126 3628 0008                  		move.w	obX(a0),d3
0001812A                            
0001812A                            loc_1504A:
0001812A 0443 000A                  		subi.w	#$A,d3
0001812E 0A43 000F                  		eori.w	#$F,d3
00018132 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018136 367C FFF0                  		movea.w	#-$10,a3
0001813A 3C3C 0800                  		move.w	#$800,d6
0001813E 7A0E                       		moveq	#$E,d5
00018140 6100 FAAA                  		bsr.w	FindWall
00018144 143C 0040                  		move.b	#$40,d2
00018148 6000 FDA0                  		bra.w	loc_14E0A
0001814C                            ; End of function Sonic_HitWall
0001814C                            
0001814C                            ; ---------------------------------------------------------------------------
0001814C                            ; Subroutine to	detect when an object hits a wall to its left
0001814C                            ; ---------------------------------------------------------------------------
0001814C                            
0001814C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001814C                            
0001814C                            
0001814C                            ObjHitWallLeft:
0001814C D668 0008                  		add.w	obX(a0),d3
00018150 3428 000C                  		move.w	obY(a0),d2
00018154                            		; Engine bug: colliding with left walls is erratic with this function.
00018154                            		; The cause is this: a missing instruction to flip collision on the found
00018154                            		; 16x16 block; this one:
00018154                            		;eori.w	#$F,d3
00018154 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018158 18BC 0000                  		move.b	#0,(a4)
0001815C 367C FFF0                  		movea.w	#-$10,a3
00018160 3C3C 0800                  		move.w	#$800,d6
00018164 7A0E                       		moveq	#$E,d5
00018166 6100 FA84                  		bsr.w	FindWall
0001816A 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001816E 0803 0000                  		btst	#0,d3
00018172 6700                       		beq.s	locret_15098
00018174 163C 0040                  		move.b	#$40,d3
00018178                            
00018178                            locret_15098:
00018178 4E75                       		rts	
0001817A                            ; End of function ObjHitWallLeft
0001817A                            
0001817A                            ; ===========================================================================
0001817A                            
0001817A                            		include	"_incObj\66 Rotating Junction.asm"
0001817A                            ; ---------------------------------------------------------------------------
0001817A                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
0001817A                            ; ---------------------------------------------------------------------------
0001817A                            
0001817A                            Junction:
0001817A 7000                       		moveq	#0,d0
0001817C 1028 0024                  		move.b	obRoutine(a0),d0
00018180 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018184 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018188                            ; ===========================================================================
00018188 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
0001818A 0000                       		dc.w Jun_Action-Jun_Index
0001818C 0000                       		dc.w Jun_Display-Jun_Index
0001818E 0000                       		dc.w Jun_Release-Jun_Index
00018190                            
00018190 =00000034                  jun_frame:	equ $34		; current frame
00018190 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00018190 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00018190                            ; ===========================================================================
00018190                            
00018190                            Jun_Main:	; Routine 0
00018190 5428 0024                  		addq.b	#2,obRoutine(a0)
00018194 323C 0001                  		move.w	#1,d1
00018198 2248                       		movea.l	a0,a1
0001819A 6000                       		bra.s	@makeitem
0001819C                            ; ===========================================================================
0001819C                            
0001819C                            	@repeat:
0001819C 4EB9 0000 F9D8             		jsr	FindFreeObj
000181A2 6600                       		bne.s	@fail
000181A4 12BC 0066                  		move.b	#id_Junction,0(a1)
000181A8 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000181AC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000181B2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000181B8 337C 0180 0018             		move.w	#$180,obPriority(a1)
000181BE 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000181C4                            
000181C4                            @makeitem:
000181C4 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000181CC 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000181D2 0029 0004 0001             		ori.b	#4,obRender(a1)
000181D8 137C 0038 0014             		move.b	#$38,obActWid(a1)
000181DE                            
000181DE                            	@fail:
000181DE 51C9 FFBC                  		dbf	d1,@repeat
000181E2                            
000181E2 117C 0030 0014             		move.b	#$30,obActWid(a0)
000181E8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000181EE 317C 003C 0030             		move.w	#$3C,$30(a0)
000181F4 117C 0001 0034             		move.b	#1,jun_frame(a0)
000181FA 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018200                            
00018200                            Jun_Action:	; Routine 2
00018200 6100 0000                  		bsr.w	Jun_ChkSwitch
00018204 4A28 0001                  		tst.b	obRender(a0)
00018208 6A00 0000                  		bpl.w	Jun_Display
0001820C 323C 0030                  		move.w	#$30,d1
00018210 3401                       		move.w	d1,d2
00018212 3602                       		move.w	d2,d3
00018214 5243                       		addq.w	#1,d3
00018216 3828 0008                  		move.w	obX(a0),d4
0001821A 6100 975E                  		bsr.w	SolidObject
0001821E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018224 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018228                            
00018228 43F8 D000                  		lea	(v_player).w,a1
0001822C 720E                       		moveq	#$E,d1
0001822E 3029 0008                  		move.w	obX(a1),d0
00018232 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018236 6500                       		bcs.s	@isleft		; if yes, branch
00018238 7207                       		moveq	#7,d1		
0001823A                            
0001823A                            	@isleft:
0001823A B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
0001823E 6600                       		bne.s	Jun_Display	; if not, branch
00018240                            
00018240 1141 0032                  		move.b	d1,$32(a0)
00018244 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018248 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001824E 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018254 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001825A 337C 0000 0010             		move.w	#0,obVelX(a1)
00018260 337C 0000 0012             		move.w	#0,obVelY(a1)
00018266 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001826C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018272 08E9 0001 0022             		bset	#1,obStatus(a1)
00018278 3429 0008                  		move.w	obX(a1),d2
0001827C 3629 000C                  		move.w	obY(a1),d3
00018280 6100 0000                  		bsr.w	Jun_ChgPos
00018284 D569 0008                  		add.w	d2,obX(a1)
00018288 D769 000C                  		add.w	d3,obY(a1)
0001828C E0E9 0008                  		asr	obX(a1)
00018290 E0E9 000C                  		asr	obY(a1)
00018294                            
00018294                            Jun_Display:	; Routine 4
00018294 6000 924C                  		bra.w	RememberState
00018298                            ; ===========================================================================
00018298                            
00018298                            Jun_Release:	; Routine 6
00018298 1028 001A                  		move.b	obFrame(a0),d0
0001829C 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
000182A0 6700                       		beq.s	@release	; if yes, branch
000182A2 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000182A6 6600                       		bne.s	@dontrelease	; if not, branch
000182A8                            
000182A8                            	@release:
000182A8 B028 0032                  		cmp.b	$32(a0),d0
000182AC 6700                       		beq.s	@dontrelease
000182AE 43F8 D000                  		lea	(v_player).w,a1
000182B2 337C 0000 0010             		move.w	#0,obVelX(a1)
000182B8 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182BE 0C00 0004                  		cmpi.b	#4,d0
000182C2 6700                       		beq.s	@isdown
000182C4 337C 0800 0010             		move.w	#$800,obVelX(a1)
000182CA 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182D0                            
000182D0                            	@isdown:
000182D0 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000182D4 5928 0024                  		subq.b	#4,obRoutine(a0)
000182D8                            
000182D8                            	@dontrelease:
000182D8 6100                       		bsr.s	Jun_ChkSwitch
000182DA 6100                       		bsr.s	Jun_ChgPos
000182DC 6000 9204                  		bra.w	RememberState
000182E0                            
000182E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182E0                            
000182E0                            
000182E0                            Jun_ChkSwitch:
000182E0 45F8 F7E0                  		lea	(f_switch).w,a2
000182E4 7000                       		moveq	#0,d0
000182E6 1028 0038                  		move.b	jun_switch(a0),d0
000182EA 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000182F0 6700                       		beq.s	@unpressed	; if not, branch
000182F2                            
000182F2 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000182F6 6600                       		bne.s	@animate	; if yes, branch
000182F8 4428 0034                  		neg.b	jun_frame(a0)
000182FC 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018302 6000                       		bra.s	@animate
00018304                            ; ===========================================================================
00018304                            
00018304                            @unpressed:
00018304 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018308                            
00018308                            @animate:
00018308 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
0001830C 6A00                       		bpl.s	@nochange	; if time remains, branch
0001830E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018314 1228 0034                  		move.b	jun_frame(a0),d1
00018318 1028 001A                  		move.b	obFrame(a0),d0
0001831C D001                       		add.b	d1,d0
0001831E 0200 000F                  		andi.b	#$F,d0
00018322 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018326                            
00018326                            	@nochange:
00018326 4E75                       		rts	
00018328                            ; End of function Jun_ChkSwitch
00018328                            
00018328                            
00018328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018328                            
00018328                            
00018328                            Jun_ChgPos:
00018328 43F8 D000                  		lea	(v_player).w,a1
0001832C 7000                       		moveq	#0,d0
0001832E 1028 001A                  		move.b	obFrame(a0),d0
00018332 D040                       		add.w	d0,d0
00018334 45FB 0000                  		lea	@data(pc,d0.w),a2
00018338 101A                       		move.b	(a2)+,d0
0001833A 4880                       		ext.w	d0
0001833C D068 0008                  		add.w	obX(a0),d0
00018340 3340 0008                  		move.w	d0,obX(a1)
00018344 101A                       		move.b	(a2)+,d0
00018346 4880                       		ext.w	d0
00018348 D068 000C                  		add.w	obY(a0),d0
0001834C 3340 000C                  		move.w	d0,obY(a1)
00018350 4E75                       		rts	
00018352                            
00018352                            
00018352 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018356 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
0001835A 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
0001835E 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018362 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018366 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
0001836A 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
0001836E E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001836E E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018372                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018372                            ; ---------------------------------------------------------------------------
00018372                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018372                            ; ---------------------------------------------------------------------------
00018372                            Map_Jun_internal:
00018372 0000                       		dc.w @gap0-Map_Jun_internal
00018374 0000                       		dc.w @gap1-Map_Jun_internal
00018376 0000                       		dc.w @gap2-Map_Jun_internal
00018378 0000                       		dc.w @gap3-Map_Jun_internal
0001837A 0000                       		dc.w @gap4-Map_Jun_internal
0001837C 0000                       		dc.w @gap5-Map_Jun_internal
0001837E 0000                       		dc.w @gap6-Map_Jun_internal
00018380 0000                       		dc.w @gap7-Map_Jun_internal
00018382 0000                       		dc.w @gap8-Map_Jun_internal
00018384 0000                       		dc.w @gap9-Map_Jun_internal
00018386 0000                       		dc.w @gapA-Map_Jun_internal
00018388 0000                       		dc.w @gapB-Map_Jun_internal
0001838A 0000                       		dc.w @gapC-Map_Jun_internal
0001838C 0000                       		dc.w @gapD-Map_Jun_internal
0001838E 0000                       		dc.w @gapE-Map_Jun_internal
00018390 0000                       		dc.w @gapF-Map_Jun_internal
00018392 0000                       		dc.w @circle-Map_Jun_internal
00018394 06                         @gap0:		dc.b 6
00018395 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
0001839A 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001839F E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000183A4 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000183A9 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000183AE 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000183B3 06                         @gap1:		dc.b 6
000183B4 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000183B9 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000183BE F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000183C3 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000183C8 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000183CD 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000183D2 06                         @gap2:		dc.b 6
000183D3 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000183D8 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000183DD 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000183E2 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000183E7 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000183EC 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000183F1 06                         @gap3:		dc.b 6
000183F2 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000183F7 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000183FC 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018401 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018406 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001840B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018410 06                         @gap4:		dc.b 6
00018411 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018416 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001841B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018420 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018425 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001842A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001842F 06                         @gap5:		dc.b 6
00018430 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018435 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001843A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001843F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018444 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018449 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001844E 06                         @gap6:		dc.b 6
0001844F 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018454 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018459 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001845E 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018463 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018468 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001846D 06                         @gap7:		dc.b 6
0001846E 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018473 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018478 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001847D F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018482 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018487 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001848C 06                         @gap8:		dc.b 6
0001848D E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018492 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018497 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001849C E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000184A1 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000184A6 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000184AB 06                         @gap9:		dc.b 6
000184AC D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000184B1 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000184B6 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000184BB DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000184C0 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000184C5 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000184CA 06                         @gapA:		dc.b 6
000184CB D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000184D0 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000184D5 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000184DA D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000184DF E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000184E4 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000184E9 06                         @gapB:		dc.b 6
000184EA D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000184EF D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000184F4 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000184F9 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000184FE E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018503 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018508 06                         @gapC:		dc.b 6
00018509 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001850E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018513 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018518 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001851D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018522 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018527 06                         @gapD:		dc.b 6
00018528 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001852D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018532 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018537 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001853C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018541 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018546 06                         @gapE:		dc.b 6
00018547 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001854C D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018551 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018556 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001855B E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018560 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018565 06                         @gapF:		dc.b 6
00018566 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001856B D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018570 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018575 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
0001857A F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001857F F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018584 0C                         @circle:	dc.b $C
00018585 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
0001858A D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001858F E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018594 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018599 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001859E E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000185A3 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000185A8 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000185AD 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000185B2 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000185B7 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000185BC 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000185C2 00                         		even
000185C2 00                         		even
000185C2                            		include	"_incObj\67 Running Disc.asm"
000185C2                            ; ---------------------------------------------------------------------------
000185C2                            ; Object 67 - disc that	you run	around (SBZ)
000185C2                            ; ---------------------------------------------------------------------------
000185C2                            
000185C2                            RunningDisc:
000185C2 7000                       		moveq	#0,d0
000185C4 1028 0024                  		move.b	obRoutine(a0),d0
000185C8 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000185CC 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000185D0                            ; ===========================================================================
000185D0 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000185D2 0000                       		dc.w Disc_Action-Disc_Index
000185D4                            
000185D4 =00000032                  disc_origX:	equ $32		; original x-axis position
000185D4 =00000030                  disc_origY:	equ $30		; original y-axis position
000185D4                            ; ===========================================================================
000185D4                            
000185D4                            Disc_Main:	; Routine 0
000185D4 5428 0024                  		addq.b	#2,obRoutine(a0)
000185D8 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000185E0 317C C344 0002             		move.w	#$C344,obGfx(a0)
000185E6 117C 0004 0001             		move.b	#4,obRender(a0)
000185EC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000185F2 117C 0008 0014             		move.b	#8,obActWid(a0)
000185F8 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000185FE 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018604 117C 0018 0034             		move.b	#$18,$34(a0)
0001860A 117C 0048 0038             		move.b	#$48,$38(a0)
00018610 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018614 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018618 6700                       		beq.s	@typeis0	; branch if 0
0001861A 117C 0010 0034             		move.b	#$10,$34(a0)
00018620 117C 0038 0038             		move.b	#$38,$38(a0)
00018626                            
00018626                            	@typeis0:
00018626 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001862A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001862E 4881                       		ext.w	d1
00018630 E741                       		asl.w	#3,d1
00018632 3141 0036                  		move.w	d1,$36(a0)
00018636 1028 0022                  		move.b	obStatus(a0),d0
0001863A E418                       		ror.b	#2,d0
0001863C 0200 00C0                  		andi.b	#$C0,d0
00018640 1140 0026                  		move.b	d0,obAngle(a0)
00018644                            
00018644                            Disc_Action:	; Routine 2
00018644 6100 0000                  		bsr.w	Disc_MoveSonic
00018648 6100 0000                  		bsr.w	Disc_MoveSpot
0001864C 6000 0000                  		bra.w	Disc_ChkDel
00018650                            ; ===========================================================================
00018650                            
00018650                            Disc_MoveSonic:
00018650 7400                       		moveq	#0,d2
00018652 1428 0038                  		move.b	$38(a0),d2
00018656 3602                       		move.w	d2,d3
00018658 D643                       		add.w	d3,d3
0001865A 43F8 D000                  		lea	(v_player).w,a1
0001865E 3029 0008                  		move.w	obX(a1),d0
00018662 9068 0032                  		sub.w	disc_origX(a0),d0
00018666 D042                       		add.w	d2,d0
00018668 B043                       		cmp.w	d3,d0
0001866A 6400                       		bcc.s	loc_155A8
0001866C 3229 000C                  		move.w	obY(a1),d1
00018670 9268 0030                  		sub.w	disc_origY(a0),d1
00018674 D242                       		add.w	d2,d1
00018676 B243                       		cmp.w	d3,d1
00018678 6400                       		bcc.s	loc_155A8
0001867A 0829 0001 0022             		btst	#1,obStatus(a1)
00018680 6700                       		beq.s	loc_155B8
00018682 4228 003A                  		clr.b	$3A(a0)
00018686 4E75                       		rts	
00018688                            ; ===========================================================================
00018688                            
00018688                            loc_155A8:
00018688 4A28 003A                  		tst.b	$3A(a0)
0001868C 6700                       		beq.s	locret_155B6
0001868E 4229 0038                  		clr.b	$38(a1)
00018692 4228 003A                  		clr.b	$3A(a0)
00018696                            
00018696                            locret_155B6:
00018696 4E75                       		rts	
00018698                            ; ===========================================================================
00018698                            
00018698                            loc_155B8:
00018698 4A28 003A                  		tst.b	$3A(a0)
0001869C 6600                       		bne.s	loc_155E2
0001869E 117C 0001 003A             		move.b	#1,$3A(a0)
000186A4 0829 0002 0022             		btst	#2,obStatus(a1)
000186AA 6600                       		bne.s	loc_155D0
000186AC 4229 001C                  		clr.b	obAnim(a1)
000186B0                            
000186B0                            loc_155D0:
000186B0 08A9 0005 0022             		bclr	#5,obStatus(a1)
000186B6 137C 0001 001D             		move.b	#1,obNextAni(a1)
000186BC 137C 0001 0038             		move.b	#1,$38(a1)
000186C2                            
000186C2                            loc_155E2:
000186C2 3029 0020                  		move.w	obInertia(a1),d0
000186C6 4A68 0036                  		tst.w	$36(a0)
000186CA 6A00                       		bpl.s	loc_15608
000186CC 0C40 FC00                  		cmpi.w	#-$400,d0
000186D0 6F00                       		ble.s	loc_155FA
000186D2 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000186D8 4E75                       		rts	
000186DA                            ; ===========================================================================
000186DA                            
000186DA                            loc_155FA:
000186DA 0C40 F100                  		cmpi.w	#-$F00,d0
000186DE 6C00                       		bge.s	locret_15606
000186E0 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000186E6                            
000186E6                            locret_15606:
000186E6 4E75                       		rts	
000186E8                            ; ===========================================================================
000186E8                            
000186E8                            loc_15608:
000186E8 0C40 0400                  		cmpi.w	#$400,d0
000186EC 6C00                       		bge.s	loc_15616
000186EE 337C 0400 0020             		move.w	#$400,obInertia(a1)
000186F4 4E75                       		rts	
000186F6                            ; ===========================================================================
000186F6                            
000186F6                            loc_15616:
000186F6 0C40 0F00                  		cmpi.w	#$F00,d0
000186FA 6F00                       		ble.s	locret_15622
000186FC 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018702                            
00018702                            locret_15622:
00018702 4E75                       		rts	
00018704                            ; ===========================================================================
00018704                            
00018704                            Disc_MoveSpot:
00018704 3028 0036                  		move.w	$36(a0),d0
00018708 D168 0026                  		add.w	d0,obAngle(a0)
0001870C 1028 0026                  		move.b	obAngle(a0),d0
00018710 4EB9 0000 3BA2             		jsr	(CalcSine).l
00018716 3428 0030                  		move.w	disc_origY(a0),d2
0001871A 3628 0032                  		move.w	disc_origX(a0),d3
0001871E 7800                       		moveq	#0,d4
00018720 1828 0034                  		move.b	$34(a0),d4
00018724 E14C                       		lsl.w	#8,d4
00018726 2A04                       		move.l	d4,d5
00018728 C9C0                       		muls.w	d0,d4
0001872A 4844                       		swap	d4
0001872C CBC1                       		muls.w	d1,d5
0001872E 4845                       		swap	d5
00018730 D842                       		add.w	d2,d4
00018732 DA43                       		add.w	d3,d5
00018734 3144 000C                  		move.w	d4,obY(a0)
00018738 3145 0008                  		move.w	d5,obX(a0)
0001873C 4E75                       		rts	
0001873E                            ; ===========================================================================
0001873E                            
0001873E                            Disc_ChkDel:
0001875A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00018760                            
00018760                            	@delete:
00018760 4EF9 0000 F47E             		jmp	(DeleteObject).l
00018760 4EF9 0000 F47E             		jmp	(DeleteObject).l
00018766                            Map_Disc:	include	"_maps\Running Disc.asm"
00018766                            ; ---------------------------------------------------------------------------
00018766                            ; Sprite mappings - disc that you run around (SBZ)
00018766                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018766                            ; part of the level tiles.)
00018766                            ; ---------------------------------------------------------------------------
00018766                            Map_Disc_internal:
00018766 0000                       		dc.w @spot-Map_Disc_internal
00018768 01                         @spot:		dc.b 1
00018769 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001876E                            		even
0001876E                            		even
0001876E                            		include	"_incObj\68 Conveyor Belt.asm"
0001876E                            ; ---------------------------------------------------------------------------
0001876E                            ; Object 68 - conveyor belts (SBZ)
0001876E                            ; ---------------------------------------------------------------------------
0001876E                            
0001876E                            Conveyor:
0001876E 7000                       		moveq	#0,d0
00018770 1028 0024                  		move.b	obRoutine(a0),d0
00018774 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018778 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
0001877C                            ; ===========================================================================
0001877C 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001877E 0000                       		dc.w Conv_Action-Conv_Index
00018780                            
00018780 =00000036                  conv_speed:	equ $36
00018780 =00000038                  conv_width:	equ $38
00018780                            ; ===========================================================================
00018780                            
00018780                            Conv_Main:	; Routine 0
00018780 5428 0024                  		addq.b	#2,obRoutine(a0)
00018784 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
0001878A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001878E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018792 6700                       		beq.s	@typeis0	; if zero, branch
00018794 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
0001879A                            
0001879A                            	@typeis0:
0001879A 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001879E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000187A2 4881                       		ext.w	d1
000187A4 E841                       		asr.w	#4,d1
000187A6 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000187AA                            
000187AA                            Conv_Action:	; Routine 2
000187AA 6100                       		bsr.s	@movesonic
000187C8 4E75                       		rts	
000187CA                            
000187CA                            	@delete:
000187CA 4EF9 0000 F47E             		jmp	(DeleteObject).l
000187D0                            ; ===========================================================================
000187D0                            
000187D0                            @movesonic:
000187D0 7400                       		moveq	#0,d2
000187D2 1428 0038                  		move.b	conv_width(a0),d2
000187D6 3602                       		move.w	d2,d3
000187D8 D643                       		add.w	d3,d3
000187DA 43F8 D000                  		lea	(v_player).w,a1
000187DE 3029 0008                  		move.w	obX(a1),d0
000187E2 9068 0008                  		sub.w	obX(a0),d0
000187E6 D042                       		add.w	d2,d0
000187E8 B043                       		cmp.w	d3,d0
000187EA 6400                       		bcc.s	@notonconveyor
000187EC 3229 000C                  		move.w	obY(a1),d1
000187F0 9268 000C                  		sub.w	obY(a0),d1
000187F4 0641 0030                  		addi.w	#$30,d1
000187F8 0C41 0030                  		cmpi.w	#$30,d1
000187FC 6400                       		bcc.s	@notonconveyor
000187FE 0829 0001 0022             		btst	#1,obStatus(a1)
00018804 6600                       		bne.s	@notonconveyor
00018806 3028 0036                  		move.w	conv_speed(a0),d0
0001880A D169 0008                  		add.w	d0,obX(a1)
0001880E                            
0001880E                            	@notonconveyor:
0001880E 4E75                       		rts	
0001880E 4E75                       		rts	
00018810                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018810                            ; ---------------------------------------------------------------------------
00018810                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018810                            ; ---------------------------------------------------------------------------
00018810                            
00018810                            SpinPlatform:
00018810 7000                       		moveq	#0,d0
00018812 1028 0024                  		move.b	obRoutine(a0),d0
00018816 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
0001881A 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001881E                            ; ===========================================================================
0001881E 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018820 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018822 0000                       		dc.w Spin_Spinner-Spin_Index
00018824                            
00018824 =00000030                  spin_timer:	equ $30		; time counter until change
00018824 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018824                            ; ===========================================================================
00018824                            
00018824                            Spin_Main:	; Routine 0
00018824 5428 0024                  		addq.b	#2,obRoutine(a0)
00018828 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018830 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018836 0028 0004 0001             		ori.b	#4,obRender(a0)
0001883C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00018842 7000                       		moveq	#0,d0
00018844 1028 0028                  		move.b	obSubtype(a0),d0
00018848 0240 000F                  		andi.w	#$F,d0
0001884C C0FC 003C                  		mulu.w	#$3C,d0
00018850 3140 0032                  		move.w	d0,spin_timelen(a0)
00018854 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018858 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
0001885A                            
0001885A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001885E 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018866 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001886C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018872 117C 0002 001C             		move.b	#2,obAnim(a0)
00018878 7000                       		moveq	#0,d0
0001887A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001887E 3200                       		move.w	d0,d1
00018880 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018884 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018888 3140 0030                  		move.w	d0,spin_timer(a0)
0001888C 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00018890 0241 0070                  		andi.w	#$70,d1
00018894 0641 0010                  		addi.w	#$10,d1
00018898 E549                       		lsl.w	#2,d1
0001889A 5341                       		subq.w	#1,d1
0001889C 3141 0036                  		move.w	d1,$36(a0)
000188A0 6000                       		bra.s	Spin_Spinner
000188A2                            ; ===========================================================================
000188A2                            
000188A2                            Spin_Trapdoor:	; Routine 2
000188A2 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000188A6 6A00                       		bpl.s	@animate	; if time remains, branch
000188A8                            
000188A8 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000188AE 0868 0000 001C             		bchg	#0,obAnim(a0)
000188B4 4A28 0001                  		tst.b	obRender(a0)
000188B8 6A00                       		bpl.s	@animate
000188C4                            
000188C4                            	@animate:
000188C4 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000188CA 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
000188D0 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000188D4 6600                       		bne.s	@notsolid	; if not, branch
000188D6 323C 004B                  		move.w	#$4B,d1
000188DA 343C 000C                  		move.w	#$C,d2
000188DE 3602                       		move.w	d2,d3
000188E0 5243                       		addq.w	#1,d3
000188E2 3828 0008                  		move.w	obX(a0),d4
000188E6 6100 9092                  		bsr.w	SolidObject
000188EA 6000 8BF6                  		bra.w	RememberState
000188EE                            ; ===========================================================================
000188EE                            
000188EE                            @notsolid:
000188EE 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000188F4 6700                       		beq.s	@display	; if not, branch
000188F6 43F8 D000                  		lea	(v_player).w,a1
000188FA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018900 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018906 4228 0025                  		clr.b	obSolid(a0)
0001890A                            
0001890A                            	@display:
0001890A 6000 8BD6                  		bra.w	RememberState
0001890E                            ; ===========================================================================
0001890E                            
0001890E                            Spin_Spinner:	; Routine 4
0001890E 3038 FE04                  		move.w	(v_framecount).w,d0
00018912 C068 0036                  		and.w	$36(a0),d0
00018916 6600                       		bne.s	@delay
00018918 117C 0001 0034             		move.b	#1,$34(a0)
0001891E                            
0001891E                            	@delay:
0001891E 4A28 0034                  		tst.b	$34(a0)
00018922 6700                       		beq.s	@animate
00018924 5368 0030                  		subq.w	#1,spin_timer(a0)
00018928 6A00                       		bpl.s	@animate
0001892A 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018930 4228 0034                  		clr.b	$34(a0)
00018934 0868 0000 001C             		bchg	#0,obAnim(a0)
0001893A                            
0001893A                            	@animate:
0001893A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018940 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00018946 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
0001894A 6600                       		bne.s	@notsolid2	; if not, branch
0001894C 323C 001B                  		move.w	#$1B,d1
00018950 343C 0007                  		move.w	#7,d2
00018954 3602                       		move.w	d2,d3
00018956 5243                       		addq.w	#1,d3
00018958 3828 0008                  		move.w	obX(a0),d4
0001895C 6100 901C                  		bsr.w	SolidObject
00018960 6000 8B80                  		bra.w	RememberState
00018964                            ; ===========================================================================
00018964                            
00018964                            @notsolid2:
00018964 0828 0003 0022             		btst	#3,obStatus(a0)
0001896A 6700                       		beq.s	@display
0001896C 43F8 D000                  		lea	(v_player).w,a1
00018970 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018976 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001897C 4228 0025                  		clr.b	obSolid(a0)
00018980                            
00018980                            	@display:
00018980 6000 8B60                  		bra.w	RememberState
00018980 6000 8B60                  		bra.w	RememberState
00018984                            		include	"_anim\SBZ Spinning Platforms.asm"
00018984                            ; ---------------------------------------------------------------------------
00018984                            ; Animation script - trapdoor (SBZ)
00018984                            ; ---------------------------------------------------------------------------
00018984 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018986 0000                       		dc.w @trapclose-Ani_Spin
00018988 0000                       		dc.w @spin1-Ani_Spin
0001898A 0000                       		dc.w @spin2-Ani_Spin
0001898C 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018992 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018998 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189AC 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189C0                            		even
000189C0                            		even
000189C0                            Map_Trap:	include	"_maps\Trapdoor.asm"
000189C0                            ; ---------------------------------------------------------------------------
000189C0                            ; Sprite mappings - trapdoor (SBZ)
000189C0                            ; ---------------------------------------------------------------------------
000189C0                            Map_Trap_internal:
000189C0 0000                       		dc.w @closed-Map_Trap_internal
000189C2 0000                       		dc.w @half-Map_Trap_internal
000189C4 0000                       		dc.w @open-Map_Trap_internal
000189C6 04                         @closed:	dc.b 4
000189C7 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000189CC F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000189D1 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000189D6 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000189DB 08                         @half:		dc.b 8
000189DC F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000189E1 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000189E6 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000189EB 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000189F0 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000189F5 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000189FA 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000189FF 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018A04 04                         @open:		dc.b 4
00018A05 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018A0A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018A0F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018A14 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018A1A 00                         		even
00018A1A 00                         		even
00018A1A                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018A1A                            ; ---------------------------------------------------------------------------
00018A1A                            ; Sprite mappings - spinning platforms (SBZ)
00018A1A                            ; ---------------------------------------------------------------------------
00018A1A                            Map_Spin_internal:
00018A1A 0000                       		dc.w @flat-Map_Spin_internal
00018A1C 0000                       		dc.w @spin1-Map_Spin_internal
00018A1E 0000                       		dc.w @spin2-Map_Spin_internal
00018A20 0000                       		dc.w @spin3-Map_Spin_internal
00018A22 0000                       		dc.w @spin4-Map_Spin_internal
00018A24 02                         @flat:		dc.b 2
00018A25 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018A2A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018A2F 02                         @spin1:		dc.b 2
00018A30 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018A35 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018A3A 02                         @spin2:		dc.b 2
00018A3B F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018A40 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018A45 02                         @spin3:		dc.b 2
00018A46 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018A4B 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018A50 02                         @spin4:		dc.b 2
00018A51 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018A56 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018A5C 00                         		even
00018A5C 00                         		even
00018A5C                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018A5C                            ; ---------------------------------------------------------------------------
00018A5C                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018A5C                            ; ---------------------------------------------------------------------------
00018A5C                            
00018A5C                            Saws:
00018A5C 7000                       		moveq	#0,d0
00018A5E 1028 0024                  		move.b	obRoutine(a0),d0
00018A62 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018A66 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018A6A                            ; ===========================================================================
00018A6A 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018A6C 0000                       		dc.w Saw_Action-Saw_Index
00018A6E                            
00018A6E =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018A6E =00000038                  saw_origY:	equ $38		; original y-axis position
00018A6E =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018A6E                            ; ===========================================================================
00018A6E                            
00018A6E                            Saw_Main:	; Routine 0
00018A6E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A72 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018A7A 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018A80 117C 0004 0001             		move.b	#4,obRender(a0)
00018A86 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018A8C 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018A92 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A98 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018A9E 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018AA4 6400                       		bcc.s	Saw_Action	; if yes, branch
00018AA6 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018AAC                            
00018AAC                            Saw_Action:	; Routine 2
00018AAC 7000                       		moveq	#0,d0
00018AAE 1028 0028                  		move.b	obSubtype(a0),d0
00018AB2 0240 0007                  		andi.w	#7,d0
00018AB6 D040                       		add.w	d0,d0
00018AB8 323B 0000                  		move.w	@index(pc,d0.w),d1
00018ABC 4EBB 1000                  		jsr	@index(pc,d1.w)
00018ADC 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00018AE2                            
00018AE2                            	@delete:
00018AE2 4EF9 0000 F47E             		jmp	(DeleteObject).l
00018AE8                            ; ===========================================================================
00018AE8 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018AEE 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018AF2                            ; ===========================================================================
00018AF2                            
00018AF2                            @type00:
00018AF2 4E75                       		rts			; doesn't move
00018AF4                            ; ===========================================================================
00018AF4                            
00018AF4                            @type01:
00018AF4 323C 0060                  		move.w	#$60,d1
00018AF8 7000                       		moveq	#0,d0
00018AFA 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018AFE 0828 0000 0022             		btst	#0,obStatus(a0)
00018B04 6700                       		beq.s	@noflip01
00018B06 4440                       		neg.w	d0
00018B08 D041                       		add.w	d1,d0
00018B0A                            
00018B0A                            	@noflip01:
00018B0A 3228 003A                  		move.w	saw_origX(a0),d1
00018B0E 9240                       		sub.w	d0,d1
00018B10 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018B14                            
00018B14 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B18 6A00                       		bpl.s	@sameframe01
00018B1A 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018B20 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018B26                            
00018B26                            	@sameframe01:
00018B26 4A28 0001                  		tst.b	obRender(a0)
00018B2A 6A00                       		bpl.s	@nosound01
00018B2C 3038 FE04                  		move.w	(v_framecount).w,d0
00018B30 0240 000F                  		andi.w	#$F,d0
00018B34 6600                       		bne.s	@nosound01
00018B40                            
00018B40                            	@nosound01:
00018B40 4E75                       		rts	
00018B42                            ; ===========================================================================
00018B42                            
00018B42                            @type02:
00018B42 323C 0030                  		move.w	#$30,d1
00018B46 7000                       		moveq	#0,d0
00018B48 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B4C 0828 0000 0022             		btst	#0,obStatus(a0)
00018B52 6700                       		beq.s	@noflip02
00018B54 4440                       		neg.w	d0
00018B56 0640 0080                  		addi.w	#$80,d0
00018B5A                            
00018B5A                            	@noflip02:
00018B5A 3228 0038                  		move.w	saw_origY(a0),d1
00018B5E 9240                       		sub.w	d0,d1
00018B60 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018B64 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B68 6A00                       		bpl.s	@sameframe02
00018B6A 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B70 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B76                            
00018B76                            	@sameframe02:
00018B76 4A28 0001                  		tst.b	obRender(a0)
00018B7A 6A00                       		bpl.s	@nosound02
00018B7C 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B80 0C00 0018                  		cmpi.b	#$18,d0
00018B84 6600                       		bne.s	@nosound02
00018B90                            
00018B90                            	@nosound02:
00018B90 4E75                       		rts	
00018B92                            ; ===========================================================================
00018B92                            
00018B92                            @type03:
00018B92 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018B96 6600                       		bne.s	@here03		; if yes, branch
00018B98                            
00018B98 3038 D008                  		move.w	(v_player+obX).w,d0
00018B9C 0440 00C0                  		subi.w	#$C0,d0
00018BA0 6500                       		bcs.s	@nosaw03x
00018BA2 9068 0008                  		sub.w	obX(a0),d0
00018BA6 6500                       		bcs.s	@nosaw03x
00018BA8 3038 D00C                  		move.w	(v_player+obY).w,d0
00018BAC 0440 0080                  		subi.w	#$80,d0
00018BB0 B068 000C                  		cmp.w	obY(a0),d0
00018BB4 6400                       		bcc.s	@nosaw03y
00018BB6 0640 0100                  		addi.w	#$100,d0
00018BBA B068 000C                  		cmp.w	obY(a0),d0
00018BBE 6500                       		bcs.s	@nosaw03y
00018BC0 117C 0001 003D             		move.b	#1,saw_here(a0)
00018BC6 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018BCC 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018BD2 117C 0002 001A             		move.b	#2,obFrame(a0)
00018BE2                            
00018BE2                            	@nosaw03x:
00018BE2 588F                       		addq.l	#4,sp
00018BE4                            
00018BE4                            	@nosaw03y:
00018BE4 4E75                       		rts	
00018BE6                            ; ===========================================================================
00018BE6                            
00018BE6                            @here03:
00018BE6 4EB9 0000 F42A             		jsr	(SpeedToPos).l
00018BEC 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018BF2 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BF6 6A00                       		bpl.s	@sameframe03
00018BF8 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018BFE 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C04                            
00018C04                            	@sameframe03:
00018C04 4E75                       		rts	
00018C06                            ; ===========================================================================
00018C06                            
00018C06                            @type04:
00018C06 4A28 003D                  		tst.b	saw_here(a0)
00018C0A 6600                       		bne.s	@here04
00018C0C 3038 D008                  		move.w	(v_player+obX).w,d0
00018C10 0640 00E0                  		addi.w	#$E0,d0
00018C14 9068 0008                  		sub.w	obX(a0),d0
00018C18 6400                       		bcc.s	@nosaw04x
00018C1A 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C1E 0440 0080                  		subi.w	#$80,d0
00018C22 B068 000C                  		cmp.w	obY(a0),d0
00018C26 6400                       		bcc.s	@nosaw04y
00018C28 0640 0100                  		addi.w	#$100,d0
00018C2C B068 000C                  		cmp.w	obY(a0),d0
00018C30 6500                       		bcs.s	@nosaw04y
00018C32 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C38 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018C3E 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C44 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C54                            
00018C54                            	@nosaw04x:
00018C54 588F                       		addq.l	#4,sp
00018C56                            
00018C56                            	@nosaw04y:
00018C56 4E75                       		rts	
00018C58                            ; ===========================================================================
00018C58                            
00018C58                            @here04:
00018C58 4EB9 0000 F42A             		jsr	(SpeedToPos).l
00018C5E 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018C64 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C68 6A00                       		bpl.s	@sameframe04
00018C6A 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C70 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C76                            
00018C76                            	@sameframe04:
00018C76 4E75                       		rts	
00018C76 4E75                       		rts	
00018C78                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018C78                            ; ---------------------------------------------------------------------------
00018C78                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018C78                            ; ---------------------------------------------------------------------------
00018C78                            Map_Saw_internal:
00018C78 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018C7A 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018C7C 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018C7E 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018C80 07                         @pizzacutter1:	dc.b 7
00018C81 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018C86 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018C8B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018C90 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018C95 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018C9A 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018C9F 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CA4 07                         @pizzacutter2:	dc.b 7
00018CA5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018CAA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018CAF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018CB4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CB9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CBE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CC3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CC8 04                         @groundsaw1:	dc.b 4
00018CC9 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018CCE E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018CD3 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018CD8 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CDD 04                         @groundsaw2:	dc.b 4
00018CDE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CE3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CE8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CED 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CF2                            		even
00018CF2                            		even
00018CF2                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018CF2                            ; ---------------------------------------------------------------------------
00018CF2                            ; Object 6B - stomper and sliding door (SBZ)
00018CF2                            ; ---------------------------------------------------------------------------
00018CF2                            
00018CF2                            ScrapStomp:
00018CF2 7000                       		moveq	#0,d0
00018CF4 1028 0024                  		move.b	obRoutine(a0),d0
00018CF8 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018CFC 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018D00                            ; ===========================================================================
00018D00 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018D02 0000                       		dc.w Sto_Action-Sto_Index
00018D04                            
00018D04 =00000016                  sto_height:	equ $16
00018D04 =00000034                  sto_origX:	equ $34		; original x-axis position
00018D04 =00000030                  sto_origY:	equ $30		; original y-axis position
00018D04 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018D04                            
00018D04 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018D08 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018D0C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018D10 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018D14 8040 0005                  		dc.b  $80, $40,	  0,   5
00018D18                            ; ===========================================================================
00018D18                            
00018D18                            Sto_Main:	; Routine 0
00018D18 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D1C 7000                       		moveq	#0,d0
00018D1E 1028 0028                  		move.b	obSubtype(a0),d0
00018D22 E448                       		lsr.w	#2,d0
00018D24 0240 001C                  		andi.w	#$1C,d0
00018D28 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018D2C 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018D30 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018D34 E448                       		lsr.w	#2,d0
00018D36 1140 001A                  		move.b	d0,obFrame(a0)
00018D3A 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018D42 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018D48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018D4E 6600                       		bne.s	@isSBZ12	; if not, branch
00018D50 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018D56 6700                       		beq.s	@isSBZ3
00018D58                            
00018D58                            @chkdel:
00018D58 45F8 FC00                  		lea	(v_objstate).w,a2
00018D5C 7000                       		moveq	#0,d0
00018D5E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D62 6700                       		beq.s	@delete
00018D64 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D6A                            
00018D6A                            	@delete:
00018D6A 4EF9 0000 F47E             		jmp	(DeleteObject).l
00018D70                            ; ===========================================================================
00018D70                            
00018D70                            @isSBZ3:
00018D70 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018D76 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018D7C 6600                       		bne.s	@isSBZ12
00018D7E 45F8 FC00                  		lea	(v_objstate).w,a2
00018D82 7000                       		moveq	#0,d0
00018D84 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D88 6700                       		beq.s	@isSBZ12
00018D8A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018D90 6700                       		beq.s	@isSBZ12
00018D92 4238 F7CB                  		clr.b	(v_obj6B).w
00018D96 60C0                       		bra.s	@chkdel
00018D98                            ; ===========================================================================
00018D98                            
00018D98                            @isSBZ12:
00018D98 0028 0004 0001             		ori.b	#4,obRender(a0)
00018D9E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018DA4 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DAA 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018DB0 7000                       		moveq	#0,d0
00018DB2 101B                       		move.b	(a3)+,d0
00018DB4 3140 003C                  		move.w	d0,$3C(a0)
00018DB8 7000                       		moveq	#0,d0
00018DBA 1028 0028                  		move.b	obSubtype(a0),d0
00018DBE 6A00                       		bpl.s	Sto_Action
00018DC0 0200 000F                  		andi.b	#$F,d0
00018DC4 1140 003E                  		move.b	d0,$3E(a0)
00018DC8 1153 0028                  		move.b	(a3),obSubtype(a0)
00018DCC 0C13 0005                  		cmpi.b	#5,(a3)
00018DD0 6600                       		bne.s	@chkgone
00018DD2 08E8 0004 0001             		bset	#4,obRender(a0)
00018DD8                            
00018DD8                            	@chkgone:
00018DD8 45F8 FC00                  		lea	(v_objstate).w,a2
00018DDC 7000                       		moveq	#0,d0
00018DDE 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DE2 6700                       		beq.s	Sto_Action
00018DE4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018DEA                            
00018DEA                            Sto_Action:	; Routine 2
00018DEA 3F28 0008                  		move.w	obX(a0),-(sp)
00018DEE 7000                       		moveq	#0,d0
00018DF0 1028 0028                  		move.b	obSubtype(a0),d0
00018DF4 0240 000F                  		andi.w	#$F,d0
00018DF8 D040                       		add.w	d0,d0
00018DFA 323B 0000                  		move.w	@index(pc,d0.w),d1
00018DFE 4EBB 1000                  		jsr	@index(pc,d1.w)
00018E02 381F                       		move.w	(sp)+,d4
00018E04 4A28 0001                  		tst.b	obRender(a0)
00018E08 6A00                       		bpl.s	@chkdel
00018E0A 7200                       		moveq	#0,d1
00018E0C 1228 0014                  		move.b	obActWid(a0),d1
00018E10 0641 000B                  		addi.w	#$B,d1
00018E14 7400                       		moveq	#0,d2
00018E16 1428 0016                  		move.b	sto_height(a0),d2
00018E1A 3602                       		move.w	d2,d3
00018E1C 5243                       		addq.w	#1,d3
00018E1E 6100 8B5A                  		bsr.w	SolidObject
00018E22                            
00018E22                            	@chkdel:
00018E3E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00018E44                            
00018E44                            	@chkgone:
00018E44 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018E4A 6600                       		bne.s	@delete
00018E4C 4238 F7CB                  		clr.b	(v_obj6B).w
00018E50 45F8 FC00                  		lea	(v_objstate).w,a2
00018E54 7000                       		moveq	#0,d0
00018E56 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E5A 6700                       		beq.s	@delete
00018E5C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E62                            
00018E62                            	@delete:
00018E62 4EF9 0000 F47E             		jmp	(DeleteObject).l
00018E68                            ; ===========================================================================
00018E68 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018E6C 0000 0000                  		dc.w @type02-@index, @type03-@index
00018E70 0000 0000                  		dc.w @type04-@index, @type05-@index
00018E74                            ; ===========================================================================
00018E74                            
00018E74                            @type00:
00018E74 4E75                       		rts
00018E76                            ; ===========================================================================
00018E76                            
00018E76                            @type01:
00018E76 4A28 0038                  		tst.b	sto_active(a0)
00018E7A 6600                       		bne.s	@isactive01
00018E7C 45F8 F7E0                  		lea	(f_switch).w,a2
00018E80 7000                       		moveq	#0,d0
00018E82 1028 003E                  		move.b	$3E(a0),d0
00018E86 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E8C 6700                       		beq.s	@loc_15DC2
00018E8E 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E94                            
00018E94                            	@isactive01:
00018E94 3028 003C                  		move.w	$3C(a0),d0
00018E98 B068 003A                  		cmp.w	$3A(a0),d0
00018E9C 6700                       		beq.s	@loc_15DE0
00018E9E 5468 003A                  		addq.w	#2,$3A(a0)
00018EA2                            
00018EA2                            	@loc_15DC2:
00018EA2 3028 003A                  		move.w	$3A(a0),d0
00018EA6 0828 0000 0022             		btst	#0,obStatus(a0)
00018EAC 6700                       		beq.s	@noflip01
00018EAE 4440                       		neg.w	d0
00018EB0 0640 0080                  		addi.w	#$80,d0
00018EB4                            
00018EB4                            	@noflip01:
00018EB4 3228 0034                  		move.w	sto_origX(a0),d1
00018EB8 9240                       		sub.w	d0,d1
00018EBA 3141 0008                  		move.w	d1,obX(a0)
00018EBE 4E75                       		rts	
00018EC0                            ; ===========================================================================
00018EC0                            
00018EC0                            @loc_15DE0:
00018EC0 5228 0028                  		addq.b	#1,obSubtype(a0)
00018EC4 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018ECA 4228 0038                  		clr.b	sto_active(a0)
00018ECE 45F8 FC00                  		lea	(v_objstate).w,a2
00018ED2 7000                       		moveq	#0,d0
00018ED4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ED8 67C8                       		beq.s	@loc_15DC2
00018EDA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EE0 60C0                       		bra.s	@loc_15DC2
00018EE2                            ; ===========================================================================
00018EE2                            
00018EE2                            @type02:
00018EE2 4A28 0038                  		tst.b	sto_active(a0)
00018EE6 6600                       		bne.s	@isactive02
00018EE8 5368 0036                  		subq.w	#1,$36(a0)
00018EEC 6600                       		bne.s	@loc_15E1E
00018EEE 117C 0001 0038             		move.b	#1,sto_active(a0)
00018EF4                            
00018EF4                            	@isactive02:
00018EF4 4A68 003A                  		tst.w	$3A(a0)
00018EF8 6700                       		beq.s	@loc_15E3C
00018EFA 5568 003A                  		subq.w	#2,$3A(a0)
00018EFE                            
00018EFE                            	@loc_15E1E:
00018EFE 3028 003A                  		move.w	$3A(a0),d0
00018F02 0828 0000 0022             		btst	#0,obStatus(a0)
00018F08 6700                       		beq.s	@noflip02
00018F0A 4440                       		neg.w	d0
00018F0C 0640 0080                  		addi.w	#$80,d0
00018F10                            
00018F10                            	@noflip02:
00018F10 3228 0034                  		move.w	sto_origX(a0),d1
00018F14 9240                       		sub.w	d0,d1
00018F16 3141 0008                  		move.w	d1,obX(a0)
00018F1A 4E75                       		rts	
00018F1C                            ; ===========================================================================
00018F1C                            
00018F1C                            @loc_15E3C:
00018F1C 5328 0028                  		subq.b	#1,obSubtype(a0)
00018F20 4228 0038                  		clr.b	sto_active(a0)
00018F24 45F8 FC00                  		lea	(v_objstate).w,a2
00018F28 7000                       		moveq	#0,d0
00018F2A 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F2E 67CE                       		beq.s	@loc_15E1E
00018F30 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018F36 60C6                       		bra.s	@loc_15E1E
00018F38                            ; ===========================================================================
00018F38                            
00018F38                            @type03:
00018F38 4A28 0038                  		tst.b	sto_active(a0)
00018F3C 6600                       		bne.s	@isactive03
00018F3E 4A68 003A                  		tst.w	$3A(a0)
00018F42 6700                       		beq.s	@loc_15E6A
00018F44 5368 003A                  		subq.w	#1,$3A(a0)
00018F48 6000                       		bra.s	@loc_15E8E
00018F4A                            ; ===========================================================================
00018F4A                            
00018F4A                            @loc_15E6A:
00018F4A 5368 0036                  		subq.w	#1,$36(a0)
00018F4E 6A00                       		bpl.s	@loc_15E8E
00018F50 317C 003C 0036             		move.w	#$3C,$36(a0)
00018F56 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F5C                            
00018F5C                            @isactive03:
00018F5C 5068 003A                  		addq.w	#8,$3A(a0)
00018F60 3028 003A                  		move.w	$3A(a0),d0
00018F64 B068 003C                  		cmp.w	$3C(a0),d0
00018F68 6600                       		bne.s	@loc_15E8E
00018F6A 4228 0038                  		clr.b	sto_active(a0)
00018F6E                            
00018F6E                            @loc_15E8E:
00018F6E 3028 003A                  		move.w	$3A(a0),d0
00018F72 0828 0000 0022             		btst	#0,obStatus(a0)
00018F78 6700                       		beq.s	@noflip03
00018F7A 4440                       		neg.w	d0
00018F7C 0640 0038                  		addi.w	#$38,d0
00018F80                            
00018F80                            	@noflip03:
00018F80 3228 0030                  		move.w	sto_origY(a0),d1
00018F84 D240                       		add.w	d0,d1
00018F86 3141 000C                  		move.w	d1,obY(a0)
00018F8A 4E75                       		rts	
00018F8C                            ; ===========================================================================
00018F8C                            
00018F8C                            @type04:
00018F8C 4A28 0038                  		tst.b	sto_active(a0)
00018F90 6600                       		bne.s	@isactive04
00018F92 4A68 003A                  		tst.w	$3A(a0)
00018F96 6700                       		beq.s	@loc_15EBE
00018F98 5168 003A                  		subq.w	#8,$3A(a0)
00018F9C 6000                       		bra.s	@loc_15EF0
00018F9E                            ; ===========================================================================
00018F9E                            
00018F9E                            @loc_15EBE:
00018F9E 5368 0036                  		subq.w	#1,$36(a0)
00018FA2 6A00                       		bpl.s	@loc_15EF0
00018FA4 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FAA 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FB0                            
00018FB0                            @isactive04:
00018FB0 3028 003A                  		move.w	$3A(a0),d0
00018FB4 B068 003C                  		cmp.w	$3C(a0),d0
00018FB8 6700                       		beq.s	@loc_15EE0
00018FBA 5068 003A                  		addq.w	#8,$3A(a0)
00018FBE 6000                       		bra.s	@loc_15EF0
00018FC0                            ; ===========================================================================
00018FC0                            
00018FC0                            @loc_15EE0:
00018FC0 5368 0036                  		subq.w	#1,$36(a0)
00018FC4 6A00                       		bpl.s	@loc_15EF0
00018FC6 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FCC 4228 0038                  		clr.b	sto_active(a0)
00018FD0                            
00018FD0                            @loc_15EF0:
00018FD0 3028 003A                  		move.w	$3A(a0),d0
00018FD4 0828 0000 0022             		btst	#0,obStatus(a0)
00018FDA 6700                       		beq.s	@noflip04
00018FDC 4440                       		neg.w	d0
00018FDE 0640 0038                  		addi.w	#$38,d0
00018FE2                            
00018FE2                            	@noflip04:
00018FE2 3228 0030                  		move.w	sto_origY(a0),d1
00018FE6 D240                       		add.w	d0,d1
00018FE8 3141 000C                  		move.w	d1,obY(a0)
00018FEC 4E75                       		rts	
00018FEE                            ; ===========================================================================
00018FEE                            
00018FEE                            @type05:
00018FEE 4A28 0038                  		tst.b	sto_active(a0)
00018FF2 6600                       		bne.s	@loc_15F3E
00018FF4 45F8 F7E0                  		lea	(f_switch).w,a2
00018FF8 7000                       		moveq	#0,d0
00018FFA 1028 003E                  		move.b	$3E(a0),d0
00018FFE 0832 0000 0000             		btst	#0,(a2,d0.w)
00019004 6700                       		beq.s	@locret_15F5C
00019006 117C 0001 0038             		move.b	#1,sto_active(a0)
0001900C 45F8 FC00                  		lea	(v_objstate).w,a2
00019010 7000                       		moveq	#0,d0
00019012 1028 0023                  		move.b	obRespawnNo(a0),d0
00019016 6700                       		beq.s	@loc_15F3E
00019018 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001901E                            
0001901E                            @loc_15F3E:
0001901E 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019026 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
0001902E 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019034 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
0001903A 6700                       		beq.s	@loc_15F5E
0001903C                            
0001903C                            @locret_15F5C:
0001903C 4E75                       		rts	
0001903E                            ; ===========================================================================
0001903E                            
0001903E                            @loc_15F5E:
0001903E 4228 0028                  		clr.b	obSubtype(a0)
00019042 4228 0038                  		clr.b	sto_active(a0)
00019046 4E75                       		rts	
00019046 4E75                       		rts	
00019048                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019048                            ; ---------------------------------------------------------------------------
00019048                            ; Sprite mappings - stomper and	platforms (SBZ)
00019048                            ; ---------------------------------------------------------------------------
00019048                            Map_Stomp_internal:
00019048 0000                       		dc.w @door-Map_Stomp_internal
0001904A 0000                       		dc.w @stomper-Map_Stomp_internal
0001904C 0000                       		dc.w @stomper-Map_Stomp_internal
0001904E 0000                       		dc.w @stomper-Map_Stomp_internal
00019050 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019052 04                         @door:		dc.b 4
00019053 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019058 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001905D F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019062 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019067 08                         @stomper:	dc.b 8
00019068 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
0001906D E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019072 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019077 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001907C 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00019081 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019086 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001908B 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00019090 0E                         @bigdoor:	dc.b $E
00019091 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019096 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001909B C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000190A0 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000190A5 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000190AA C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000190AF C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000190B4 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000190B9 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000190BE E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000190C3 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000190C8 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000190CD 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000190D2 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000190D8 00                         		even
000190D8 00                         		even
000190D8                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
000190D8                            ; ---------------------------------------------------------------------------
000190D8                            ; Object 6C - vanishing	platforms (SBZ)
000190D8                            ; ---------------------------------------------------------------------------
000190D8                            
000190D8                            VanishPlatform:
000190D8 7000                       		moveq	#0,d0
000190DA 1028 0024                  		move.b	obRoutine(a0),d0
000190DE 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
000190E2 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
000190E6                            ; ===========================================================================
000190E6 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
000190E8 0000                       		dc.w VanP_Vanish-VanP_Index
000190EA 0000                       		dc.w VanP_Appear-VanP_Index
000190EC 0000                       		dc.w loc_16068-VanP_Index
000190EE                            
000190EE =00000030                  vanp_timer:	equ $30		; counter for time until event
000190EE =00000032                  vanp_timelen:	equ $32		; time between events (general)
000190EE                            ; ===========================================================================
000190EE                            
000190EE                            VanP_Main:	; Routine 0
000190EE 5C28 0024                  		addq.b	#6,obRoutine(a0)
000190F2 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
000190FA 317C 445D 0002             		move.w	#$445D,obGfx(a0)
00019100 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; is level Spring Yard Zone?
00019106 6700                       		beq.s	VanP_IsSYZ	; if yes, branch
00019108 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)	; SBZ
0001910E                            
0001910E                            	VanP_IsSYZ:	
0001910E 0028 0004 0001             		ori.b	#4,obRender(a0)
00019114 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001911A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019120 7000                       		moveq	#0,d0
00019122 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019126 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001912A 5240                       		addq.w	#1,d0		; add 1
0001912C EF48                       		lsl.w	#7,d0		; multiply by $80
0001912E 3200                       		move.w	d0,d1
00019130 5340                       		subq.w	#1,d0
00019132 3140 0030                  		move.w	d0,vanp_timer(a0)
00019136 3140 0032                  		move.w	d0,vanp_timelen(a0)
0001913A 7000                       		moveq	#0,d0
0001913C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019140 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019144 0641 0080                  		addi.w	#$80,d1
00019148 C0C1                       		mulu.w	d1,d0
0001914A E088                       		lsr.l	#8,d0
0001914C 3140 0036                  		move.w	d0,$36(a0)
00019150 5341                       		subq.w	#1,d1
00019152 3141 0038                  		move.w	d1,$38(a0)
00019156                            
00019156                            loc_16068:	; Routine 6
00019156 3038 FE04                  		move.w	(v_framecount).w,d0
0001915A 9068 0036                  		sub.w	$36(a0),d0
0001915E C068 0038                  		and.w	$38(a0),d0
00019162 6600                       		bne.s	@animate
00019164 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019168 6000                       		bra.s	VanP_Vanish
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            @animate:
0001916A 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019170 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00019176 6000 836A                  		bra.w	RememberState
0001917A                            ; ===========================================================================
0001917A                            
0001917A                            VanP_Vanish:	; Routine 2
0001917A                            VanP_Appear:	; Routine 4
0001917A 5368 0030                  		subq.w	#1,vanp_timer(a0)
0001917E 6A00                       		bpl.s	@wait
00019180 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019186 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
0001918A 6700                       		beq.s	@isvanishing	; if yes, branch
0001918C 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019192                            
00019192                            	@isvanishing:
00019192 0868 0000 001C             		bchg	#0,obAnim(a0)
00019198                            
00019198                            	@wait:
00019198 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001919E 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
000191A4 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
000191AA 6600                       		bne.s	@notsolid	; if yes, branch
000191AC 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
000191B2 6600                       		bne.s	@loc_160D6
000191B4 7200                       		moveq	#0,d1
000191B6 1228 0014                  		move.b	obActWid(a0),d1
000191BA 4EB9 0000 8AFC             		jsr	(PlatformObject).l
000191C0 6000 8320                  		bra.w	RememberState
000191C4                            ; ===========================================================================
000191C4                            
000191C4                            @loc_160D6:
000191C4 7200                       		moveq	#0,d1
000191C6 1228 0014                  		move.b	obActWid(a0),d1
000191CA 4EB9 0000 8C70             		jsr	(ExitPlatform).l
000191D0 3428 0008                  		move.w	obX(a0),d2
000191D4 4EB9 0000 91DA             		jsr	(MvSonicOnPtfm2).l
000191DA 6000 8306                  		bra.w	RememberState
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            @notsolid:
000191DE 0828 0003 0022             		btst	#3,obStatus(a0)
000191E4 6700                       		beq.s	@display
000191E6 43F8 D000                  		lea	(v_player).w,a1
000191EA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000191F0 08A8 0003 0022             		bclr	#3,obStatus(a0)
000191F6 117C 0002 0024             		move.b	#2,obRoutine(a0)
000191FC 4228 0025                  		clr.b	obSolid(a0)
00019200                            
00019200                            	@display:
00019200 6000 82E0                  		bra.w	RememberState
00019200 6000 82E0                  		bra.w	RememberState
00019204                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019204                            ; ---------------------------------------------------------------------------
00019204                            ; Animation script - vanishing platforms (SBZ)
00019204                            ; ---------------------------------------------------------------------------
00019204 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019206 0000                       		dc.w @appear-Ani_Van
00019208 0300 0102 0304 0506 FE01   @vanish:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, afBack, 1
00019212                            		even
00019212 0306 0504 0302 0100 FE01   @appear:	dc.b 3,	6, 5, 4, 3, 2, 1, 0, afBack, 1
0001921C                            		even
0001921C                            		even
0001921C                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
0001921C                            ; --------------------------------------------------------------------------------
0001921C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001921C                            ; --------------------------------------------------------------------------------
0001921C                            
0001921C                            SME_Mrcg1:	
0001921C 0000 0000                  		dc.w SME_Mrcg1_E-SME_Mrcg1, SME_Mrcg1_14-SME_Mrcg1	
00019220 0000 0000                  		dc.w SME_Mrcg1_29-SME_Mrcg1, SME_Mrcg1_2F-SME_Mrcg1	
00019224 0000 0000                  		dc.w SME_Mrcg1_3A-SME_Mrcg1, SME_Mrcg1_40-SME_Mrcg1	
00019228 0000                       		dc.w SME_Mrcg1_46-SME_Mrcg1	
0001922A 01                         SME_Mrcg1_E:	dc.b 1	
0001922B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00019230 04                         SME_Mrcg1_14:	dc.b 4	
00019231 F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019236 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
0001923B F803 0010 F0               		dc.b $F8, 3, 0, $10, $F0	
00019240 F803 0010 08               		dc.b $F8, 3, 0, $10, 8	
00019245 01                         SME_Mrcg1_29:	dc.b 1	
00019246 F807 0000 F8               		dc.b $F8, 7, 0, 0, $F8	
0001924B 02                         SME_Mrcg1_2F:	dc.b 2	
0001924C F803 0010 F8               		dc.b $F8, 3, 0, $10, $F8	
00019251 F803 0010 00               		dc.b $F8, 3, 0, $10, 0	
00019256 01                         SME_Mrcg1_3A:	dc.b 1	
00019257 F803 0000 FD               		dc.b $F8, 3, 0, 0, $FD	
0001925C 01                         SME_Mrcg1_40:	dc.b 1	
0001925D F803 0010 FD               		dc.b $F8, 3, 0, $10, $FD	
00019262 00                         SME_Mrcg1_46:	dc.b 0	
00019264 00                         		even
00019264 00                         		even
00019264                            		include	"_incObj\6E Electrocuter.asm"
00019264                            ; ---------------------------------------------------------------------------
00019264                            ; Object 6E - electrocution orbs (SBZ)
00019264                            ; ---------------------------------------------------------------------------
00019264                            
00019264                            Electro:
00019264 7000                       		moveq	#0,d0
00019266 1028 0024                  		move.b	obRoutine(a0),d0
0001926A 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
0001926E 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019272                            ; ===========================================================================
00019272 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019274 0000                       		dc.w Elec_Shock-Elec_Index
00019276                            
00019276 =00000034                  elec_freq:	equ $34		; frequency
00019276                            ; ===========================================================================
00019276                            
00019276                            Elec_Main:	; Routine 0
00019276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001927A 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019282 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019288 0028 0004 0001             		ori.b	#4,obRender(a0)
0001928E 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019294 7000                       		moveq	#0,d0
00019296 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
0001929A E948                       		lsl.w	#4,d0		; multiply by $10
0001929C 5340                       		subq.w	#1,d0
0001929E 3140 0034                  		move.w	d0,elec_freq(a0)
000192A2                            
000192A2                            Elec_Shock:	; Routine 2
000192A2 3038 FE04                  		move.w	(v_framecount).w,d0
000192A6 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
000192AA 6600                       		bne.s	@animate	; if not, branch
000192AC                            
000192AC 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
000192B2 4A28 0001                  		tst.b	obRender(a0)
000192B6 6A00                       		bpl.s	@animate
000192C2                            
000192C2                            	@animate:
000192C2 43F9 0000 0000             		lea	(Ani_Elec).l,a1
000192C8 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
000192CE 117C 0000 0020             		move.b	#0,obColType(a0)
000192D4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
000192DA 6600                       		bne.s	@display	; if not, branch
000192DC 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000192E2                            
000192E2                            	@display:
000192E2 6000 81FE                  		bra.w	RememberState
000192E2 6000 81FE                  		bra.w	RememberState
000192E6                            		include	"_anim\Electrocuter.asm"
000192E6                            ; ---------------------------------------------------------------------------
000192E6                            ; Animation script - electrocution orbs (SBZ)
000192E6                            ; ---------------------------------------------------------------------------
000192E6 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000192E8 0000                       		dc.w byte_161D0-Ani_Elec
000192EA 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000192EE 00                         		even
000192EE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000192FE                            		even
000192FE                            		even
000192FE                            Map_Elec:	include	"_maps\Electrocuter.asm"
000192FE                            ; --------------------------------------------------------------------------------
000192FE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000192FE                            ; --------------------------------------------------------------------------------
000192FE                            
000192FE                            SME_KiF9w:	
000192FE 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
00019302 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
00019306 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
0001930A 02                         SME_KiF9w_C:	dc.b 2	
0001930B F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019310 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019315 03                         SME_KiF9w_17:	dc.b 3	
00019316 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001931B F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019320 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019325 05                         SME_KiF9w_27:	dc.b 5	
00019326 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001932B F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019330 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019335 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001933A F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
0001933F 04                         SME_KiF9w_41:	dc.b 4	
00019340 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019345 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001934A F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001934F F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019354 06                         SME_KiF9w_56:	dc.b 6	
00019355 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001935A 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001935F F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019364 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019369 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001936E F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019373 04                         SME_KiF9w_75:	dc.b 4	
00019374 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019379 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001937E F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019383 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019388                            		even
00019388                            		even
00019388                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019388                            ; ---------------------------------------------------------------------------
00019388                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019388                            ; ---------------------------------------------------------------------------
00019388                            
00019388                            SpinConvey:
00019388 7000                       		moveq	#0,d0
0001938A 1028 0024                  		move.b	obRoutine(a0),d0
0001938E 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019392 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
000193B2                            
000193B2                            SpinC_Display:
000193B2 4EF9 0000 F43E             		jmp	(DisplaySprite).l
000193B8                            ; ===========================================================================
000193B8                            
000193B8                            loc_1629A:
000193B8 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000193BE 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000193C0 0C40 FF80                  		cmpi.w	#-$80,d0
000193C4 64EC                       		bcc.s	SpinC_Display
000193C6                            
000193C6                            SpinC_Act1or2:
000193C6 1028 002F                  		move.b	$2F(a0),d0
000193CA 6A00                       		bpl.s	SpinC_Delete
000193CC 0240 007F                  		andi.w	#$7F,d0
000193D0 45F8 F7C1                  		lea	(v_obj63).w,a2
000193D4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000193DA                            
000193DA                            SpinC_Delete:
000193DA 4EF9 0000 F47E             		jmp	(DeleteObject).l
000193E0                            ; ===========================================================================
000193E0 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000193E2 0000                       		dc.w loc_163D8-SpinC_Index
000193E4                            ; ===========================================================================
000193E4                            
000193E4                            SpinC_Main:	; Routine 0
000193E4 1028 0028                  		move.b	obSubtype(a0),d0
000193E8 6B00 0000                  		bmi.w	loc_16380
000193EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000193F0 217C 0001 8A1A 0004        		move.l	#Map_Spin,obMap(a0)
000193F8 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000193FE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00019404 0028 0004 0001             		ori.b	#4,obRender(a0)
0001940A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019410 7000                       		moveq	#0,d0
00019412 1028 0028                  		move.b	obSubtype(a0),d0
00019416 3200                       		move.w	d0,d1
00019418 E648                       		lsr.w	#3,d0
0001941A 0240 001E                  		andi.w	#$1E,d0
0001941E 45FA 0000                  		lea	off_164A6(pc),a2
00019422 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019426 315A 0038                  		move.w	(a2)+,$38(a0)
0001942A 315A 0030                  		move.w	(a2)+,$30(a0)
0001942E 214A 003C                  		move.l	a2,$3C(a0)
00019432 0241 000F                  		andi.w	#$F,d1
00019436 E549                       		lsl.w	#2,d1
00019438 1141 0038                  		move.b	d1,$38(a0)
0001943C 117C 0004 003A             		move.b	#4,$3A(a0)
00019442 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019446 6700                       		beq.s	loc_16356
00019448 117C 0001 003B             		move.b	#1,$3B(a0)
0001944E 4428 003A                  		neg.b	$3A(a0)
00019452 7200                       		moveq	#0,d1
00019454 1228 0038                  		move.b	$38(a0),d1
00019458 D228 003A                  		add.b	$3A(a0),d1
0001945C B228 0039                  		cmp.b	$39(a0),d1
00019460 6500                       		bcs.s	loc_16352
00019462 1001                       		move.b	d1,d0
00019464 7200                       		moveq	#0,d1
00019466 4A00                       		tst.b	d0
00019468 6A00                       		bpl.s	loc_16352
0001946A 1228 0039                  		move.b	$39(a0),d1
0001946E 5901                       		subq.b	#4,d1
00019470                            
00019470                            loc_16352:
00019470 1141 0038                  		move.b	d1,$38(a0)
00019474                            
00019474                            loc_16356:
00019474 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001947A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019480 4A41                       		tst.w	d1
00019482 6600                       		bne.s	loc_1636C
00019484 117C 0001 001C             		move.b	#1,obAnim(a0)
0001948A                            
0001948A                            loc_1636C:
0001948A 0C41 0008                  		cmpi.w	#8,d1
0001948E 6600                       		bne.s	loc_16378
00019490 117C 0000 001C             		move.b	#0,obAnim(a0)
00019496                            
00019496                            loc_16378:
00019496 6100 B0D0                  		bsr.w	LCon_ChangeDir
0001949A 6000 0000                  		bra.w	loc_163D8
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            loc_16380:
0001949E 1140 002F                  		move.b	d0,$2F(a0)
000194A2 0240 007F                  		andi.w	#$7F,d0
000194A6 45F8 F7C1                  		lea	(v_obj63).w,a2
000194AA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000194B0 6700                       		beq.s	loc_1639A
000194B2 4EF9 0000 F47E             		jmp	(DeleteObject).l
000194B8                            ; ===========================================================================
000194B8                            
000194B8                            loc_1639A:
000194B8 D040                       		add.w	d0,d0
000194BA 0240 001E                  		andi.w	#$1E,d0
000194BE 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000194C2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000194C8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000194CC 321A                       		move.w	(a2)+,d1
000194CE 2248                       		movea.l	a0,a1
000194D0 6000                       		bra.s	SpinC_LoadPform
000194D2                            ; ===========================================================================
000194D2                            
000194D2                            SpinC_Loop:
000194D2 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
000194D8 6600                       		bne.s	loc_163D0
000194DA                            
000194DA                            SpinC_LoadPform:
000194DA 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
000194DE 335A 0008                  		move.w	(a2)+,obX(a1)
000194E2 335A 000C                  		move.w	(a2)+,obY(a1)
000194E6 301A                       		move.w	(a2)+,d0
000194E8 1340 0028                  		move.b	d0,obSubtype(a1)
000194EC                            
000194EC                            loc_163D0:
000194EC 51C9 FFE4                  		dbf	d1,SpinC_Loop
000194F0                            
000194F0 588F                       		addq.l	#4,sp
000194F2 4E75                       		rts	
000194F4                            ; ===========================================================================
000194F4                            
000194F4                            loc_163D8:	; Routine 2
000194F4 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000194FA 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
00019500 4A28 001A                  		tst.b	obFrame(a0)
00019504 6600                       		bne.s	loc_16404
00019506 3F28 0008                  		move.w	obX(a0),-(sp)
0001950A 6100 0000                  		bsr.w	loc_16424
0001950E 323C 001B                  		move.w	#$1B,d1
00019512 343C 0007                  		move.w	#7,d2
00019516 3602                       		move.w	d2,d3
00019518 5243                       		addq.w	#1,d3
0001951A 381F                       		move.w	(sp)+,d4
0001951C 6000 845C                  		bra.w	SolidObject
00019520                            ; ===========================================================================
00019520                            
00019520                            loc_16404:
00019520 0828 0003 0022             		btst	#3,obStatus(a0)
00019526 6700                       		beq.s	loc_16420
00019528 43F8 D000                  		lea	(v_objspace).w,a1
0001952C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019532 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019538 4228 0025                  		clr.b	obSolid(a0)
0001953C                            
0001953C                            loc_16420:
0001953C 6000 0000                  		bra.w	loc_16424
00019540                            
00019540                            loc_16424:
00019540 3028 0008                  		move.w	obX(a0),d0
00019544 B068 0034                  		cmp.w	$34(a0),d0
00019548 6600                       		bne.s	loc_16484
0001954A 3028 000C                  		move.w	obY(a0),d0
0001954E B068 0036                  		cmp.w	$36(a0),d0
00019552 6600                       		bne.s	loc_16484
00019554 7200                       		moveq	#0,d1
00019556 1228 0038                  		move.b	$38(a0),d1
0001955A D228 003A                  		add.b	$3A(a0),d1
0001955E B228 0039                  		cmp.b	$39(a0),d1
00019562 6500                       		bcs.s	loc_16456
00019564 1001                       		move.b	d1,d0
00019566 7200                       		moveq	#0,d1
00019568 4A00                       		tst.b	d0
0001956A 6A00                       		bpl.s	loc_16456
0001956C 1228 0039                  		move.b	$39(a0),d1
00019570 5901                       		subq.b	#4,d1
00019572                            
00019572                            loc_16456:
00019572 1141 0038                  		move.b	d1,$38(a0)
00019576 2268 003C                  		movea.l	$3C(a0),a1
0001957A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019580 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019586 4A41                       		tst.w	d1
00019588 6600                       		bne.s	loc_16474
0001958A 117C 0001 001C             		move.b	#1,obAnim(a0)
00019590                            
00019590                            loc_16474:
00019590 0C41 0008                  		cmpi.w	#8,d1
00019594 6600                       		bne.s	loc_16480
00019596 117C 0000 001C             		move.b	#0,obAnim(a0)
0001959C                            
0001959C                            loc_16480:
0001959C 6100 AFCA                  		bsr.w	LCon_ChangeDir
000195A0                            
000195A0                            loc_16484:
000195A0 4EF9 0000 F42A             		jmp	(SpeedToPos).l
000195A0 4EF9 0000 F42A             		jmp	(SpeedToPos).l
000195A6                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
000195A6                            ; ---------------------------------------------------------------------------
000195A6                            ; Animation script - platform on conveyor belt (SBZ)
000195A6                            ; ---------------------------------------------------------------------------
000195A6 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
000195A8 0000                       		dc.w @still-Ani_SpinConvey
000195AA 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000195B7 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000195BE 00                         		even
000195BE 0F00 FF                    @still:		dc.b $F, 0, afEnd
000195C2 00                         		even
000195C2 00                         		even
000195C2                            
000195C2 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000195C8 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000195CE 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000195E2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000195F6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001960A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001961E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019632 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019646                            ; ===========================================================================
00019646                            
00019646                            		include	"_incObj\70 Girder Block.asm"
00019646                            ; ---------------------------------------------------------------------------
00019646                            ; Object 70 - large girder block (SBZ)
00019646                            ; ---------------------------------------------------------------------------
00019646                            
00019646                            Girder:
00019646 7000                       		moveq	#0,d0
00019648 1028 0024                  		move.b	obRoutine(a0),d0
0001964C 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019650 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019654                            ; ===========================================================================
00019654 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019656 0000                       		dc.w Gird_Action-Gird_Index
00019658                            
00019658 =00000016                  gird_height:	equ $16
00019658 =00000032                  gird_origX:	equ $32		; original x-axis position
00019658 =00000030                  gird_origY:	equ $30		; original y-axis position
00019658 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019658 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019658 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019658                            ; ===========================================================================
00019658                            
00019658                            Gird_Main:	; Routine 0
00019658 5428 0024                  		addq.b	#2,obRoutine(a0)
0001965C 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019664 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001966A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019670 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019676 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001967C 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019682 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019688 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001968E 6100 0000                  		bsr.w	Gird_ChgMove
00019692                            
00019692                            Gird_Action:	; Routine 2
00019692 3F28 0008                  		move.w	obX(a0),-(sp)
00019696 4A68 003A                  		tst.w	gird_delay(a0)
0001969A 6700                       		beq.s	@beginmove
0001969C 5368 003A                  		subq.w	#1,gird_delay(a0)
000196A0 6600                       		bne.s	@solid
000196A2                            
000196A2                            	@beginmove:
000196A2 4EB9 0000 F42A             		jsr	(SpeedToPos).l
000196A8 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
000196AC 6600                       		bne.s	@solid		; if time remains, branch
000196AE 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
000196B2                            
000196B2                            	@solid:
000196B2 381F                       		move.w	(sp)+,d4
000196B4 4A28 0001                  		tst.b	obRender(a0)
000196B8 6A00                       		bpl.s	@chkdel
000196BA 7200                       		moveq	#0,d1
000196BC 1228 0014                  		move.b	obActWid(a0),d1
000196C0 0641 000B                  		addi.w	#$B,d1
000196C4 7400                       		moveq	#0,d2
000196C6 1428 0016                  		move.b	gird_height(a0),d2
000196CA 3602                       		move.w	d2,d3
000196CC 5243                       		addq.w	#1,d3
000196CE 6100 82AA                  		bsr.w	SolidObject
000196D2                            
000196D2                            	@chkdel:
000196EE 4EF9 0000 F43E             		jmp	(DisplaySprite).l
000196F4                            
000196F4                            	@delete:
000196F4 4EF9 0000 F47E             		jmp	(DeleteObject).l
000196FA                            ; ===========================================================================
000196FA                            
000196FA                            Gird_ChgMove:
000196FA 1028 0038                  		move.b	gird_set(a0),d0
000196FE 0240 0018                  		andi.w	#$18,d0
00019702 43F9 0000 0000             		lea	(@settings).l,a1
00019708 43F1 0000                  		lea	(a1,d0.w),a1
0001970C 3159 0010                  		move.w	(a1)+,obVelX(a0)
00019710 3159 0012                  		move.w	(a1)+,obVelY(a0)
00019714 3159 0034                  		move.w	(a1)+,gird_time(a0)
00019718 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
0001971C 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019722 4E75                       		rts	
00019724                            ; ===========================================================================
00019724                            @settings:	;   x-speed, y-speed, duration
00019724 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001972C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019734 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001973C 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001973C 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019744                            Map_Gird:	include	"_maps\Girder Block.asm"
00019744                            ; ---------------------------------------------------------------------------
00019744                            ; Sprite mappings - large girder block (SBZ)
00019744                            ; ---------------------------------------------------------------------------
00019744                            Map_Gird_internal:
00019744 0000                       		dc.w @girder-Map_Gird_internal
00019746 0C                         @girder:	dc.b $C
00019747 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001974C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019751 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019756 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001975B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019760 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019765 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001976A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001976F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019774 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019779 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001977E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019784 00                         		even
00019784 00                         		even
00019784                            		include	"_incObj\72 Teleporter.asm"
00019784                            ; ---------------------------------------------------------------------------
00019784                            ; Object 72 - teleporter (SBZ)
00019784                            ; ---------------------------------------------------------------------------
00019784                            
00019784                            Teleport:
00019784 7000                       		moveq	#0,d0
00019786 1028 0024                  		move.b	obRoutine(a0),d0
0001978A 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001978E 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
000197AE 4E75                       		rts	
000197B0                            
000197B0                            	@delete:
000197B0 4EF9 0000 F47E             		jmp	(DeleteObject).l
000197B6                            ; ===========================================================================
000197B6 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
000197B8 0000                       		dc.w loc_166C8-Tele_Index
000197BA 0000                       		dc.w loc_1675E-Tele_Index
000197BC 0000                       		dc.w loc_16798-Tele_Index
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            Tele_Main:	; Routine 0
000197BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000197C2 1028 0028                  		move.b	obSubtype(a0),d0
000197C6 D040                       		add.w	d0,d0
000197C8 0240 001E                  		andi.w	#$1E,d0
000197CC 45FA 0000                  		lea	Tele_Data(pc),a2
000197D0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000197D4 315A 003A                  		move.w	(a2)+,$3A(a0)
000197D8 214A 003C                  		move.l	a2,$3C(a0)
000197DC 315A 0036                  		move.w	(a2)+,$36(a0)
000197E0 315A 0038                  		move.w	(a2)+,$38(a0)
000197E4                            
000197E4                            loc_166C8:	; Routine 2
000197E4 43F8 D000                  		lea	(v_player).w,a1
000197E8 3029 0008                  		move.w	obX(a1),d0
000197EC 9068 0008                  		sub.w	obX(a0),d0
000197F0 0828 0000 0022             		btst	#0,obStatus(a0)
000197F6 6700                       		beq.s	loc_166E0
000197F8 0640 000F                  		addi.w	#$F,d0
000197FC                            
000197FC                            loc_166E0:
000197FC 0C40 0010                  		cmpi.w	#$10,d0
00019800 6400                       		bcc.s	locret_1675C
00019802 3229 000C                  		move.w	obY(a1),d1
00019806 9268 000C                  		sub.w	obY(a0),d1
0001980A 0641 0020                  		addi.w	#$20,d1
0001980E 0C41 0040                  		cmpi.w	#$40,d1
00019812 6400                       		bcc.s	locret_1675C
00019814 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019818 6600                       		bne.s	locret_1675C
0001981A 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00019820 6600                       		bne.s	loc_1670E
00019822 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
00019828 6500                       		bcs.s	locret_1675C
0001982A                            
0001982A                            loc_1670E:
0001982A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001982E 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019834 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001983A 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019840 337C 0000 0010             		move.w	#0,obVelX(a1)
00019846 337C 0000 0012             		move.w	#0,obVelY(a1)
0001984C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019852 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019858 08E9 0001 0022             		bset	#1,obStatus(a1)
0001985E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019864 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001986A 4228 0032                  		clr.b	$32(a0)
00019878                            
00019878                            locret_1675C:
00019878 4E75                       		rts	
0001987A                            ; ===========================================================================
0001987A                            
0001987A                            loc_1675E:	; Routine 4
0001987A 43F8 D000                  		lea	(v_player).w,a1
0001987E 1028 0032                  		move.b	$32(a0),d0
00019882 5428 0032                  		addq.b	#2,$32(a0)
00019886 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001988C EA40                       		asr.w	#5,d0
0001988E 3428 000C                  		move.w	obY(a0),d2
00019892 9440                       		sub.w	d0,d2
00019894 3342 000C                  		move.w	d2,obY(a1)
00019898 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001989E 6600                       		bne.s	locret_16796
000198A0 6100 0000                  		bsr.w	sub_1681C
000198A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000198B2                            
000198B2                            locret_16796:
000198B2 4E75                       		rts	
000198B4                            ; ===========================================================================
000198B4                            
000198B4                            loc_16798:	; Routine 6
000198B4 588F                       		addq.l	#4,sp
000198B6 43F8 D000                  		lea	(v_player).w,a1
000198BA 5328 002E                  		subq.b	#1,$2E(a0)
000198BE 6A00                       		bpl.s	loc_167DA
000198C0 3368 0036 0008             		move.w	$36(a0),obX(a1)
000198C6 3368 0038 000C             		move.w	$38(a0),obY(a1)
000198CC 7200                       		moveq	#0,d1
000198CE 1228 003A                  		move.b	$3A(a0),d1
000198D2 5801                       		addq.b	#4,d1
000198D4 B228 003B                  		cmp.b	$3B(a0),d1
000198D8 6500                       		bcs.s	loc_167C2
000198DA 7200                       		moveq	#0,d1
000198DC 6000                       		bra.s	loc_16800
000198DE                            ; ===========================================================================
000198DE                            
000198DE                            loc_167C2:
000198DE 1141 003A                  		move.b	d1,$3A(a0)
000198E2 2468 003C                  		movea.l	$3C(a0),a2
000198E6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000198EC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000198F2 6000 0000                  		bra.w	sub_1681C
000198F6                            ; ===========================================================================
000198F6                            
000198F6                            loc_167DA:
000198F6 2429 0008                  		move.l	obX(a1),d2
000198FA 2629 000C                  		move.l	obY(a1),d3
000198FE 3029 0010                  		move.w	obVelX(a1),d0
00019902 48C0                       		ext.l	d0
00019904 E180                       		asl.l	#8,d0
00019906 D480                       		add.l	d0,d2
00019908 3029 0012                  		move.w	obVelY(a1),d0
0001990C 48C0                       		ext.l	d0
0001990E E180                       		asl.l	#8,d0
00019910 D680                       		add.l	d0,d3
00019912 2342 0008                  		move.l	d2,obX(a1)
00019916 2343 000C                  		move.l	d3,obY(a1)
0001991A 4E75                       		rts	
0001991C                            ; ===========================================================================
0001991C                            
0001991C                            loc_16800:
0001991C 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00019922 4228 0024                  		clr.b	obRoutine(a0)
00019926 4238 F7C8                  		clr.b	(f_lockmulti).w
0001992A 337C 0000 0010             		move.w	#0,obVelX(a1)
00019930 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019936 4E75                       		rts	
00019938                            
00019938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019938                            
00019938                            
00019938                            sub_1681C:
00019938 7000                       		moveq	#0,d0
0001993A 343C 1000                  		move.w	#$1000,d2
0001993E 3028 0036                  		move.w	$36(a0),d0
00019942 9069 0008                  		sub.w	obX(a1),d0
00019946 6C00                       		bge.s	loc_16830
00019948 4440                       		neg.w	d0
0001994A 4442                       		neg.w	d2
0001994C                            
0001994C                            loc_16830:
0001994C 7200                       		moveq	#0,d1
0001994E 363C 1000                  		move.w	#$1000,d3
00019952 3228 0038                  		move.w	$38(a0),d1
00019956 9269 000C                  		sub.w	obY(a1),d1
0001995A 6C00                       		bge.s	loc_16844
0001995C 4441                       		neg.w	d1
0001995E 4443                       		neg.w	d3
00019960                            
00019960                            loc_16844:
00019960 B240                       		cmp.w	d0,d1
00019962 6500                       		bcs.s	loc_1687A
00019964 7200                       		moveq	#0,d1
00019966 3228 0038                  		move.w	$38(a0),d1
0001996A 9269 000C                  		sub.w	obY(a1),d1
0001996E 4841                       		swap	d1
00019970 83C3                       		divs.w	d3,d1
00019972 7000                       		moveq	#0,d0
00019974 3028 0036                  		move.w	$36(a0),d0
00019978 9069 0008                  		sub.w	obX(a1),d0
0001997C 6700                       		beq.s	loc_16866
0001997E 4840                       		swap	d0
00019980 81C1                       		divs.w	d1,d0
00019982                            
00019982                            loc_16866:
00019982 3340 0010                  		move.w	d0,obVelX(a1)
00019986 3343 0012                  		move.w	d3,obVelY(a1)
0001998A 4A41                       		tst.w	d1
0001998C 6A00                       		bpl.s	loc_16874
0001998E 4441                       		neg.w	d1
00019990                            
00019990                            loc_16874:
00019990 3141 002E                  		move.w	d1,$2E(a0)
00019994 4E75                       		rts	
00019996                            ; ===========================================================================
00019996                            
00019996                            loc_1687A:
00019996 7000                       		moveq	#0,d0
00019998 3028 0036                  		move.w	$36(a0),d0
0001999C 9069 0008                  		sub.w	obX(a1),d0
000199A0 4840                       		swap	d0
000199A2 81C2                       		divs.w	d2,d0
000199A4 7200                       		moveq	#0,d1
000199A6 3228 0038                  		move.w	$38(a0),d1
000199AA 9269 000C                  		sub.w	obY(a1),d1
000199AE 6700                       		beq.s	loc_16898
000199B0 4841                       		swap	d1
000199B2 83C0                       		divs.w	d0,d1
000199B4                            
000199B4                            loc_16898:
000199B4 3341 0012                  		move.w	d1,obVelY(a1)
000199B8 3342 0010                  		move.w	d2,obVelX(a1)
000199BC 4A40                       		tst.w	d0
000199BE 6A00                       		bpl.s	loc_168A6
000199C0 4440                       		neg.w	d0
000199C2                            
000199C2                            loc_168A6:
000199C2 3140 002E                  		move.w	d0,$2E(a0)
000199C6 4E75                       		rts	
000199C8                            ; End of function sub_1681C
000199C8                            
000199C8                            ; ===========================================================================
000199C8 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
000199CE 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
000199D4 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
000199D8 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
000199DE 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000199E4 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000199EA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000199F0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000199F6 0884 0298 0894             		dc.w $884, $298, $894
000199FC 0270 0894 0190             		dc.w $270, $894, $190
00019A02 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019A08 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019A0E 1184 0498 1158             		dc.w $1184, $498, $1158
00019A14 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019A1A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019A20 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019A26 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019A2C 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019A32 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019A38 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019A3E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019A44 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019A4A 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A4A 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A50                            
00019A50                            		include	"_incObj\78 Caterkiller.asm"
00019A50                            ; ---------------------------------------------------------------------------
00019A50                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019A50                            ; ---------------------------------------------------------------------------
00019A50                            
00019A50                            Caterkiller:
00019A50 7000                       		moveq	#0,d0
00019A52 1028 0024                  		move.b	obRoutine(a0),d0
00019A56 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019A5A 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019A5E                            ; ===========================================================================
00019A5E 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019A60 0000                       		dc.w Cat_Head-Cat_Index
00019A62 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A64 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019A66 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A68 0000                       		dc.w Cat_Delete-Cat_Index
00019A6A 0000                       		dc.w loc_16CC0-Cat_Index
00019A6C                            
00019A6C =0000003C                  cat_parent:	equ $3C		; address of parent object
00019A6C                            ; ===========================================================================
00019A6C                            
00019A6C                            locret_16950:
00019A6C 4E75                       		rts	
00019A6E                            ; ===========================================================================
00019A6E                            
00019A6E                            Cat_Main:	; Routine 0
00019A6E 117C 0007 0016             		move.b	#7,obHeight(a0)
00019A74 117C 0008 0017             		move.b	#8,obWidth(a0)
00019A7A 4EB9 0000 F3F2             		jsr	(ObjectFall).l
00019A80 4EB9 0001 7EF8             		jsr	(ObjFloorDist).l
00019A86 4A41                       		tst.w	d1
00019A88 6AE2                       		bpl.s	locret_16950
00019A8A D368 000C                  		add.w	d1,obY(a0)
00019A8E 4268 0012                  		clr.w	obVelY(a0)
00019A92 5428 0024                  		addq.b	#2,obRoutine(a0)
00019A96 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019A9E 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019AA4 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019AAA 6700                       		beq.s	@isscrapbrain
00019AAC 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019AB2                            
00019AB2                            	@isscrapbrain:
00019AB2 0228 0003 0001             		andi.b	#3,obRender(a0)
00019AB8 0028 0004 0001             		ori.b	#4,obRender(a0)
00019ABE 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019AC4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019ACA 117C 0008 0014             		move.b	#8,obActWid(a0)
00019AD0 117C 000B 0020             		move.b	#$B,obColType(a0)
00019AD6 3428 0008                  		move.w	obX(a0),d2
00019ADA 7A0C                       		moveq	#$C,d5
00019ADC 0828 0000 0022             		btst	#0,obStatus(a0)
00019AE2 6700                       		beq.s	@noflip
00019AE4 4445                       		neg.w	d5
00019AE6                            
00019AE6                            	@noflip:
00019AE6 1C3C 0004                  		move.b	#4,d6
00019AEA 7600                       		moveq	#0,d3
00019AEC 7804                       		moveq	#4,d4
00019AEE 2448                       		movea.l	a0,a2
00019AF0 7202                       		moveq	#2,d1
00019AF2                            
00019AF2                            Cat_Loop:
00019AF2 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
00019AF8 6600 0000                  			bne.w	Cat_ChkGone
00019AFC 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019B00 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019B04 5406                       		addq.b	#2,d6		; alternate between the two
00019B06 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019B0C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019B12 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019B18 137C 0008 0014             		move.b	#8,obActWid(a1)
00019B1E 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019B24 D445                       		add.w	d5,d2
00019B26 3342 0008                  		move.w	d2,obX(a1)
00019B2A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019B30 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019B36 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019B3C 137C 0008 001A             		move.b	#8,obFrame(a1)
00019B42 234A 003C                  		move.l	a2,cat_parent(a1)
00019B46 1344 003C                  		move.b	d4,cat_parent(a1)
00019B4A 5804                       		addq.b	#4,d4
00019B4C 2449                       		movea.l	a1,a2
00019B4E                            
00019B4E                            	@fail:
00019B4E 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019B52                            
00019B52 117C 0007 002A             		move.b	#7,$2A(a0)
00019B58 4228 003C                  		clr.b	cat_parent(a0)
00019B5C                            
00019B5C                            Cat_Head:	; Routine 2
00019B5C 4A28 0022                  		tst.b	obStatus(a0)
00019B60 6B00 0000                  		bmi.w	loc_16C96
00019B64 7000                       		moveq	#0,d0
00019B66 1028 0025                  		move.b	ob2ndRout(a0),d0
00019B6A 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019B6E 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019B72 1228 002B                  		move.b	$2B(a0),d1
00019B76 6A00                       		bpl.s	@display
00019B78 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B7E 1028 0026                  		move.b	obAngle(a0),d0
00019B82 0240 007F                  		andi.w	#$7F,d0
00019B86 5828 0026                  		addq.b	#4,obAngle(a0)
00019B8A 1031 0000                  		move.b	(a1,d0.w),d0
00019B8E 6A00                       		bpl.s	@animate
00019B90 08A8 0007 002B             		bclr	#7,$2B(a0)
00019B96 6000                       		bra.s	@display
00019B98                            
00019B98                            	@animate:
00019B98 0201 0010                  		andi.b	#$10,d1
00019B9C D001                       		add.b	d1,d0
00019B9E 1140 001A                  		move.b	d0,obFrame(a0)
00019BA2                            
00019BA2                            	@display:
00019BC0 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00019BC6                            
00019BC6                            	Cat_ChkGone:
00019BC6 45F8 FC00                  		lea	(v_objstate).w,a2
00019BCA 7000                       		moveq	#0,d0
00019BCC 1028 0023                  		move.b	obRespawnNo(a0),d0
00019BD0 6700                       		beq.s	@delete
00019BD2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019BD8                            
00019BD8                            	@delete:
00019BD8 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019BDE 4E75                       		rts	
00019BE0                            ; ===========================================================================
00019BE0                            
00019BE0                            Cat_Delete:	; Routine $A
00019BE0 4EF9 0000 F47E             		jmp	(DeleteObject).l
00019BE6                            ; ===========================================================================
00019BE6 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019BE8 0000                       		dc.w loc_16B02-Cat_Index2
00019BEA                            ; ===========================================================================
00019BEA                            
00019BEA                            @wait:
00019BEA 5328 002A                  		subq.b	#1,$2A(a0)
00019BEE 6B00                       		bmi.s	@move
00019BF0 4E75                       		rts	
00019BF2                            ; ===========================================================================
00019BF2                            
00019BF2                            @move:
00019BF2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019BF6 117C 0010 002A             		move.b	#$10,$2A(a0)
00019BFC 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019C02 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019C08 0868 0004 002B             		bchg	#4,$2B(a0)
00019C0E 6600                       		bne.s	loc_16AFC
00019C10 4268 0010                  		clr.w	obVelX(a0)
00019C14 4468 001C                  		neg.w	obAnim(a0)
00019C18                            
00019C18                            loc_16AFC:
00019C18 08E8 0007 002B             		bset	#7,$2B(a0)
00019C1E                            
00019C1E                            loc_16B02:
00019C1E 5328 002A                  		subq.b	#1,$2A(a0)
00019C22 6B00                       		bmi.s	@loc_16B5E
00019C24 4A68 0010                  			tst.w	obVelX(a0)
00019C28 6700                       			beq.s	@notmoving
00019C2A 2428 0008                  			move.l	obX(a0),d2
00019C2E 2602                       			move.l	d2,d3
00019C30 3028 0010                  		move.w	obVelX(a0),d0
00019C34 0828 0000 0022             		btst	#0,obStatus(a0)
00019C3A 6700                       		beq.s	@noflip
00019C3C 4440                       		neg.w	d0
00019C3E                            
00019C3E                            	@noflip:
00019C3E 48C0                       		ext.l	d0
00019C40 E180                       		asl.l	#8,d0
00019C42 D480                       		add.l	d0,d2
00019C44 2142 0008                  		move.l	d2,obX(a0)
00019C48 4843                       			swap	d3
00019C4A B668 0008                  			cmp.w	obX(a0),d3
00019C4E 6700                       			beq.s	@notmoving
00019C50 4EB9 0001 7EF8             			jsr	(ObjFloorDist).l
00019C56 0C41 FFF8                  			cmpi.w	#-8,d1
00019C5A 6D00                       			blt.s	@loc_16B70
00019C5C 0C41 000C                  			cmpi.w	#$C,d1
00019C60 6C00                       			bge.s	@loc_16B70
00019C62 D368 000C                  			add.w	d1,obY(a0)
00019C66 7000                       		moveq	#0,d0
00019C68 1028 003C                  		move.b	cat_parent(a0),d0
00019C6C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C70 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C76 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C7A                            
00019C7A                            	@notmoving:
00019C7A 4E75                       		rts	
00019C7C                            ; ===========================================================================
00019C7C                            
00019C7C                            @loc_16B5E:
00019C7C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019C80 117C 0007 002A             		move.b	#7,$2A(a0)
00019C86 4268 0010                  			clr.w	obVelX(a0)
00019C8A 4268 001C                  			clr.w	obAnim(a0)
00019C8E 4E75                       		rts	
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            @loc_16B70:
00019C90 7000                       			moveq	#0,d0
00019C92 1028 003C                  			move.b	cat_parent(a0),d0
00019C96 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019C9C 4468 000A                  			neg.w	obX+2(a0)
00019CA0 6700                       			beq.s	@loc_1730A
00019CA2 0828 0000 0022             			btst	#0,obStatus(a0)
00019CA8 6700                       			beq.s	@loc_1730A
00019CAA 5368 0008                  			subq.w	#1,obX(a0)
00019CAE 5228 003C                  			addq.b	#1,cat_parent(a0)
00019CB2 7000                       			moveq	#0,d0
00019CB4 1028 003C                  			move.b	cat_parent(a0),d0
00019CB8 4230 002C                  			clr.b	$2C(a0,d0)
00019CBC                            	@loc_1730A:
00019CBC 0868 0000 0022             			bchg	#0,obStatus(a0)
00019CC2 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019CC8 5228 003C                  		addq.b	#1,cat_parent(a0)
00019CCC 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019CD2 4E75                       		rts	
00019CD4                            ; ===========================================================================
00019CD4                            
00019CD4                            Cat_BodySeg2:	; Routine 6
00019CD4 2268 003C                  		movea.l	cat_parent(a0),a1
00019CD8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019CDE 6A00                       		bpl.s	Cat_BodySeg1
00019CE0 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019CE6 1028 0026                  		move.b	obAngle(a0),d0
00019CEA 0240 007F                  		andi.w	#$7F,d0
00019CEE 5828 0026                  		addq.b	#4,obAngle(a0)
00019CF2 4A31 0004                  		tst.b	4(a1,d0.w)
00019CF6 6A00                       		bpl.s	Cat_AniBody
00019CF8 5828 0026                  		addq.b	#4,obAngle(a0)
00019CFC                            
00019CFC                            Cat_AniBody:
00019CFC 1031 0000                  		move.b	(a1,d0.w),d0
00019D00 5000                       		addq.b	#8,d0
00019D02 1140 001A                  		move.b	d0,obFrame(a0)
00019D06                            
00019D06                            Cat_BodySeg1:	; Routine 4, 8
00019D06 2268 003C                  		movea.l	cat_parent(a0),a1
00019D0A 4A28 0022                  		tst.b	obStatus(a0)
00019D0E 6B00 0000                  		bmi.w	loc_16C90
00019D12 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019D18 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019D1E 6700 0000                  		beq.w	loc_16C64
00019D22 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019D28 3029 0010                  		move.w	obVelX(a1),d0
00019D2C D068 001C                  			add.w	obAnim(a0),d0
00019D30 3140 0010                  		move.w	d0,obVelX(a0)
00019D34 2428 0008                  		move.l	obX(a0),d2
00019D38 2602                       		move.l	d2,d3
00019D3A 3028 0010                  		move.w	obVelX(a0),d0
00019D3E 0828 0000 0022             		btst	#0,obStatus(a0)
00019D44 6700                       		beq.s	loc_16C0C
00019D46 4440                       		neg.w	d0
00019D48                            
00019D48                            loc_16C0C:
00019D48 48C0                       		ext.l	d0
00019D4A E180                       		asl.l	#8,d0
00019D4C D480                       		add.l	d0,d2
00019D4E 2142 0008                  		move.l	d2,obX(a0)
00019D52 4843                       		swap	d3
00019D54 B668 0008                  		cmp.w	obX(a0),d3
00019D58 6700                       		beq.s	loc_16C64
00019D5A 7000                       		moveq	#0,d0
00019D5C 1028 003C                  		move.b	cat_parent(a0),d0
00019D60 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019D64 0C01 0080                  		cmpi.b	#$80,d1
00019D68 6600                       		bne.s	loc_16C50
00019D6A 1181 002C                  			move.b	d1,$2C(a0,d0)
00019D6E 4468 000A                  			neg.w	obX+2(a0)
00019D72 6700                       			beq.s	locj_173E4
00019D74 0828 0000 0022             			btst	#0,obStatus(a0)
00019D7A 6700                       			beq.s	locj_173E4
00019D7C 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019D82 6600                       			bne.s	locj_173E4
00019D84 5368 0008                  			subq.w	#1,obX(a0)
00019D88 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D8C 7000                       			moveq	#0,d0
00019D8E 1028 003C                  			move.b	cat_parent(a0),d0
00019D92 4230 002C                  			clr.b	$2C(a0,d0)
00019D96                            	locj_173E4:
00019D96 0868 0000 0022             		bchg	#0,obStatus(a0)
00019D9C 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019DA2 5228 003C                  		addq.b	#1,cat_parent(a0)
00019DA6 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019DAC 6000                       		bra.s	loc_16C64
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            loc_16C50:
00019DAE 4881                       		ext.w	d1
00019DB0 D368 000C                  		add.w	d1,obY(a0)
00019DB4 5228 003C                  		addq.b	#1,cat_parent(a0)
00019DB8 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019DBE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019DC2                            
00019DC2                            loc_16C64:
00019DC2 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019DC8 6700                       		beq.s	loc_16C90
00019DCA 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019DCE 6700                       		beq.s	loc_16C7C
00019DD0 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019DD6 6600                       		bne.s	loc_16C82
00019DD8                            
00019DD8                            loc_16C7C:
00019DD8 4229 0020                  		clr.b    $20(a1)
00019DDC 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019DE2                            
00019DE2                            loc_16C82:
00019DE2 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00019DE8                            
00019DE8                            ; ===========================================================================
00019DE8 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019DF0                            ; ===========================================================================
00019DF0                            
00019DF0                            loc_16C90:
00019DF0 08E9 0007 0022             		bset	#7,obStatus(a1)
00019DF6                            
00019DF6                            loc_16C96:
00019DF6 7000                       		moveq	#0,d0
00019DF8 1028 0024                  		move.b	obRoutine(a0),d0
00019DFC 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019E00 0828 0000 0022             		btst	#0,obStatus(a0)
00019E06 6700                       		beq.s	loc_16CAA
00019E08 4440                       		neg.w	d0
00019E0A                            
00019E0A                            loc_16CAA:
00019E0A 3140 0010                  		move.w	d0,obVelX(a0)
00019E0E 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019E14 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019E1A 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019E20                            
00019E20                            loc_16CC0:	; Routine $C
00019E20 4EB9 0000 F3F2             		jsr	(ObjectFall).l
00019E26 4A68 0012                  		tst.w	obVelY(a0)
00019E2A 6B00                       		bmi.s	loc_16CE0
00019E2C 4EB9 0001 7EF8             		jsr	(ObjFloorDist).l
00019E32 4A41                       		tst.w	d1
00019E34 6A00                       		bpl.s	loc_16CE0
00019E36 D368 000C                  		add.w	d1,obY(a0)
00019E3A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019E40                            
00019E40                            loc_16CE0:
00019E40 4A28 0001                  		tst.b	obRender(a0)
00019E44 6A00 FD80                  		bpl.w	Cat_ChkGone
00019E48 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00019E48 4EF9 0000 F43E             		jmp	(DisplaySprite).l
00019E4E                            		include	"_anim\Caterkiller.asm"
00019E4E                            ; ---------------------------------------------------------------------------
00019E4E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019E4E                            ; ---------------------------------------------------------------------------
00019E4E 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019E5E 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019E6E 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019E7E 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019E8E 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019E9E 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019EAE 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019EBE 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019ECE                            		even
00019ECE                            		even
00019ECE                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019ECE                            ; ---------------------------------------------------------------------------
00019ECE                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019ECE                            ; ---------------------------------------------------------------------------
00019ECE                            Map_Cat_internal:
00019ECE 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019ED0 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019ED2 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019ED4 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019ED6 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019ED8 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019EDA 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019EDC 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019EDE 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019EE0 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019EE2 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019EE4 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019EE6 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019EE8 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019EEA 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019EEC 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019EEE 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019EF0 0000                       		dc.w byte_16E04-Map_Cat_internal
00019EF2 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019EF4 0000                       		dc.w byte_16E10-Map_Cat_internal
00019EF6 0000                       		dc.w byte_16E16-Map_Cat_internal
00019EF8 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019EFA 0000                       		dc.w byte_16E22-Map_Cat_internal
00019EFC 0000                       		dc.w byte_16E28-Map_Cat_internal
00019EFE 01                         byte_16D9E:	dc.b 1
00019EFF F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019F04 01                         byte_16DA4:	dc.b 1
00019F05 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019F0A 01                         byte_16DAA:	dc.b 1
00019F0B F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019F10 01                         byte_16DB0:	dc.b 1
00019F11 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019F16 01                         byte_16DB6:	dc.b 1
00019F17 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019F1C 01                         byte_16DBC:	dc.b 1
00019F1D ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019F22 01                         byte_16DC2:	dc.b 1
00019F23 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019F28 01                         byte_16DC8:	dc.b 1
00019F29 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019F2E 01                         byte_16DCE:	dc.b 1
00019F2F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019F34 01                         byte_16DD4:	dc.b 1
00019F35 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019F3A 01                         byte_16DDA:	dc.b 1
00019F3B F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019F40 01                         byte_16DE0:	dc.b 1
00019F41 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019F46 01                         byte_16DE6:	dc.b 1
00019F47 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019F4C 01                         byte_16DEC:	dc.b 1
00019F4D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019F52 01                         byte_16DF2:	dc.b 1
00019F53 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019F58 01                         byte_16DF8:	dc.b 1
00019F59 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019F5E 01                         byte_16DFE:	dc.b 1
00019F5F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019F64 01                         byte_16E04:	dc.b 1
00019F65 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019F6A 01                         byte_16E0A:	dc.b 1
00019F6B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019F70 01                         byte_16E10:	dc.b 1
00019F71 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019F76 01                         byte_16E16:	dc.b 1
00019F77 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019F7C 01                         byte_16E1C:	dc.b 1
00019F7D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019F82 01                         byte_16E22:	dc.b 1
00019F83 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019F88 01                         byte_16E28:	dc.b 1
00019F89 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019F8E                            		even
00019F8E                            		even
00019F8E                            
00019F8E                            		include	"_incObj\79 Lamppost.asm"
00019F8E                            ; ---------------------------------------------------------------------------
00019F8E                            ; Object 79 - lamppost
00019F8E                            ; ---------------------------------------------------------------------------
00019F8E                            
00019F8E                            Lamppost:
00019F8E 7000                       		moveq	#0,d0
00019F90 1028 0024                  		move.b	obRoutine(a0),d0
00019F94 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019F98 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019F9C 4EF9 0001 14E2             		jmp	(RememberState).l
00019FA2                            ; ===========================================================================
00019FA2 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019FA4 0000                       		dc.w Lamp_Blue-Lamp_Index
00019FA6 0000                       		dc.w Lamp_Finish-Lamp_Index
00019FA8 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019FAA                            
00019FAA =00000030                  lamp_origX:	equ $30		; original x-axis position
00019FAA =00000032                  lamp_origY:	equ $32		; original y-axis position
00019FAA =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019FAA                            ; ===========================================================================
00019FAA                            
00019FAA                            Lamp_Main:	; Routine 0
00019FAA 5428 0024                  		addq.b	#2,obRoutine(a0)
00019FAE 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019FB6 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019FBC 117C 0004 0001             		move.b	#4,obRender(a0)
00019FC2 117C 0008 0014             		move.b	#8,obActWid(a0)
00019FC8 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019FCE 45F8 FC00                  		lea	(v_objstate).w,a2
00019FD2 7000                       		moveq	#0,d0
00019FD4 1028 0023                  		move.b	obRespawnNo(a0),d0
00019FD8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019FDE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019FE4 6600                       		bne.s	@red
00019FE6 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FEA 0201 007F                  		andi.b	#$7F,d1
00019FEE 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019FF2 0202 007F                  		andi.b	#$7F,d2
00019FF6 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FF8 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019FFA                            
00019FFA                            @red:
00019FFA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A000 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A006 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A00C 4E75                       		rts	
0001A00E                            
0001A00E                            ; ===========================================================================
0001A00E                            
0001A00E                            Lamp_Blue:	; Routine 2
0001A00E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001A012 6600 0000                  		bne.w	@donothing	; if yes, branch
0001A016 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A01A 6B00 0000                  		bmi.w	@donothing
0001A01E 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A022 0201 007F                  		andi.b	#$7F,d1
0001A026 1428 0028                  		move.b	obSubtype(a0),d2
0001A02A 0202 007F                  		andi.b	#$7F,d2
0001A02E B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A030 6500                       		bcs.s	@chkhit		; if yes, branch
0001A032 45F8 FC00                  		lea	(v_objstate).w,a2
0001A036 7000                       		moveq	#0,d0
0001A038 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A03C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A042 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A048 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A04E 6000 0000                  		bra.w	@donothing
0001A052                            ; ===========================================================================
0001A052                            
0001A052                            @chkhit:
0001A052 3038 D008                  		move.w	(v_player+obX).w,d0
0001A056 9068 0008                  		sub.w	obX(a0),d0
0001A05A 5040                       		addq.w	#8,d0
0001A05C 0C40 0010                  		cmpi.w	#$10,d0
0001A060 6400 0000                  		bcc.w	@donothing
0001A064 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A068 9068 000C                  		sub.w	obY(a0),d0
0001A06C 0640 0040                  		addi.w	#$40,d0
0001A070 0C40 0068                  		cmpi.w	#$68,d0
0001A074 6400                       		bcc.s	@donothing
0001A076                            
0001A080 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A084 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001A08A 6600                       		bne.s	@fail
0001A08C 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A090 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A096 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A09C 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A0A2 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A0A8 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A0B0 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A0B6 137C 0004 0001             		move.b	#4,obRender(a1)
0001A0BC 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A0C2 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A0C8 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A0CE 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A0D4                            
0001A0D4                            	@fail:
0001A0D4 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A0DA 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A0DE 45F8 FC00                  		lea	(v_objstate).w,a2
0001A0E2 7000                       		moveq	#0,d0
0001A0E4 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0EE                            
0001A0EE                            	@donothing:
0001A0EE 4E75                       		rts	
0001A0F0                            ; ===========================================================================
0001A0F0                            
0001A0F0                            Lamp_Finish:	; Routine 4	
0001A0F0 4E75                       		rts	
0001A0F2                            ; ===========================================================================
0001A0F2                            
0001A0F2                            Lamp_Twirl:	; Routine 6
0001A0F2 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A0F6 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A0F8 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A0FE                            
0001A0FE                            	@continue:
0001A0FE 1028 0026                  		move.b	obAngle(a0),d0
0001A102 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A108 0400 0040                  		subi.b	#$40,d0
0001A10C 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001A112 C3FC 0C00                  		muls.w	#$C00,d1
0001A116 4841                       		swap	d1
0001A118 D268 0030                  		add.w	lamp_origX(a0),d1
0001A11C 3141 0008                  		move.w	d1,obX(a0)
0001A120 C1FC 0C00                  		muls.w	#$C00,d0
0001A124 4840                       		swap	d0
0001A126 D068 0032                  		add.w	lamp_origY(a0),d0
0001A12A 3140 000C                  		move.w	d0,obY(a0)
0001A12E 4E75                       		rts	
0001A130                            ; ===========================================================================
0001A130                            ; ---------------------------------------------------------------------------
0001A130                            ; Subroutine to	store information when you hit a lamppost
0001A130                            ; ---------------------------------------------------------------------------
0001A130                            
0001A130                            Lamp_StoreInfo:
0001A130 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A136 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A13C 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A142 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A148 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A14E 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A154 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A15A 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A160 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A166 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A16C 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A172 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A178 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A17E 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A184 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A18A 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A190 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A196 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A19C 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A1A2 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A1A8 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A1AE 4E75                       		rts	
0001A1B0                            
0001A1B0                            ; ---------------------------------------------------------------------------
0001A1B0                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A1B0                            ; ---------------------------------------------------------------------------
0001A1B0                            
0001A1B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A1B0                            
0001A1B0                            
0001A1B0                            Lamp_LoadInfo:
0001A1B0 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A1B6 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A1BC 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A1C2 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A1C8 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A1CE 4278 FE20                  		clr.w	(v_rings).w
0001A1D2 4238 FE1B                  		clr.b	(v_lifecount).w
0001A1D6 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A1DC 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A1E2 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A1E6 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A1EC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A1F2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A1F8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A1FE 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A204 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A20A 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A210 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A216 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A21C 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A222 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A228 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A22E 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A234 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A23A 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A23C                            
0001A23C 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A242 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A248 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A24E                            
0001A24E                            	@notlabyrinth:
0001A24E 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A252 6A00                       		bpl.s	locret_170F6
0001A254 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A258 0440 00A0                  		subi.w	#$A0,d0
0001A25C 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A260                            
0001A260                            locret_170F6:
0001A260 4E75                       		rts	
0001A260 4E75                       		rts	
0001A262                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A262                            ; --------------------------------------------------------------------------------
0001A262                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A262                            ; --------------------------------------------------------------------------------
0001A262                            
0001A262                            SME_JfaKr:	
0001A262 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A266 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A26A 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A26C 0A                         SME_JfaKr_A:	dc.b $A	
0001A26D E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A272 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A277 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A27C D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A281 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A286 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A28B 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A290 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A295 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A29A 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A29F 08                         SME_JfaKr_3D:	dc.b 8	
0001A2A0 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A2A5 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2AA F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2AF F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2B4 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2B9 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2BE 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2C3 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2C8 02                         SME_JfaKr_66:	dc.b 2	
0001A2C9 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A2CE F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A2D3 0A                         SME_JfaKr_71:	dc.b $A	
0001A2D4 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A2D9 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2DE F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2E3 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2E8 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2ED 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2F2 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2F7 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2FC D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A301 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A306 0A                         SME_JfaKr_A4:	dc.b $A	
0001A307 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A30C E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A311 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A316 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A31B 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A320 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A325 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A32A 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A32F D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A334 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A33A 00                         		even
0001A33A 00                         		even
0001A33A                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A33A                            ; ---------------------------------------------------------------------------
0001A33A                            ; Object 7D - hidden points at the end of a level
0001A33A                            ; ---------------------------------------------------------------------------
0001A33A                            
0001A33A                            HiddenBonus:
0001A33A 7000                       		moveq	#0,d0
0001A33C 1028 0024                  		move.b	obRoutine(a0),d0
0001A340 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A344 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A348                            ; ===========================================================================
0001A348 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A34A 0000                       		dc.w Bonus_Display-Bonus_Index
0001A34C                            
0001A34C =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A34C                            ; ===========================================================================
0001A34C                            
0001A34C                            Bonus_Main:	; Routine 0
0001A34C 7410                       		moveq	#$10,d2
0001A34E 3602                       		move.w	d2,d3
0001A350 D643                       		add.w	d3,d3
0001A352 43F8 D000                  		lea	(v_player).w,a1
0001A356 3029 0008                  		move.w	obX(a1),d0
0001A35A 9068 0008                  		sub.w	obX(a0),d0
0001A35E D042                       		add.w	d2,d0
0001A360 B043                       		cmp.w	d3,d0
0001A362 6400                       		bcc.s	bonu_chkdel
0001A364 3229 000C                  		move.w	obY(a1),d1
0001A368 9268 000C                  		sub.w	obY(a0),d1
0001A36C D242                       		add.w	d2,d1
0001A36E B243                       		cmp.w	d3,d1
0001A370 6400                       		bcc.s	bonu_chkdel
0001A372 4A78 FE08                  		tst.w	(v_debuguse).w
0001A376 6600                       		bne.s	bonu_chkdel
0001A378 4A38 F7CD                  		tst.b	(f_bigring).w
0001A37C 6600                       		bne.s	bonu_chkdel
0001A37E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A382 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A38A 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A390 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A396 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A39C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A3A2 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A3A8 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A3B8 7000                       		moveq	#0,d0
0001A3BA 1028 0028                  		move.b	obSubtype(a0),d0
0001A3BE D040                       		add.w	d0,d0
0001A3C0 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A3C4 4EB9 0000 0000             		jsr	(AddPoints).l
0001A3CA                            
0001A3CA                            bonu_chkdel:
0001A3E6 4E75                       		rts	
0001A3E8                            
0001A3E8                            	@delete:
0001A3E8 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001A3EE                            
0001A3EE                            ; ===========================================================================
0001A3EE 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A3F0 03E8                       		dc.w 1000
0001A3F2 0064                       		dc.w 100
0001A3F4 000A                       		dc.w 10
0001A3F6                            ; ===========================================================================
0001A3F6                            
0001A3F6                            Bonus_Display:	; Routine 2
0001A3F6 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A3FA 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A418 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001A41E                            
0001A41E                            Bonus_Display_Delete:	
0001A41E 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001A41E 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001A424                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A424                            ; ---------------------------------------------------------------------------
0001A424                            ; Sprite mappings - hidden points at the end of	a level
0001A424                            ; ---------------------------------------------------------------------------
0001A424                            Map_Bonus_internal:
0001A424 0000                       		dc.w @blank-Map_Bonus_internal
0001A426 0000                       		dc.w @10000-Map_Bonus_internal
0001A428 0000                       		dc.w @1000-Map_Bonus_internal
0001A42A 0000                       		dc.w @100-Map_Bonus_internal
0001A42C 00                         @blank:		dc.b 0
0001A42D 01                         @10000:		dc.b 1
0001A42E F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A433 01                         @1000:		dc.b 1
0001A434 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A439 01                         @100:		dc.b 1
0001A43A F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A440 00                         		even
0001A440 00                         		even
0001A440                            
0001A440                            		include	"_incObj\8A Credits.asm"
0001A440                            ; ---------------------------------------------------------------------------
0001A440                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A440                            ; ---------------------------------------------------------------------------
0001A440                            
0001A440                            CreditsText:
0001A440 7000                       		moveq	#0,d0
0001A442 1028 0024                  		move.b	obRoutine(a0),d0
0001A446 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A44A 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A44E                            ; ===========================================================================
0001A44E 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A450 0000                       		dc.w Cred_Display-Cred_Index
0001A452                            ; ===========================================================================
0001A452                            
0001A452                            Cred_Main:	; Routine 0
0001A452 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A456 317C 0120 0008             		move.w	#$120,obX(a0)
0001A45C 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A462 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A46A 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A470 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A474 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A478 117C 0000 0001             		move.b	#0,obRender(a0)
0001A47E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A484                            
0001A484 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A48A 6600                       		bne.s	Cred_Display	; if not, branch
0001A48C                            
0001A48C 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A492 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A498 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A49C 6700                       		beq.s	Cred_Display	; if not, branch
0001A49E 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A4A4 6600                       		bne.s	Cred_Display	; if not, branch
0001A4A6 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A4AC 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A4B2 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001A4B8                            ; ===========================================================================
0001A4B8                            
0001A4B8                            Cred_Display:	; Routine 2
0001A4B8 4EF9 0000 F43E             		jmp	DisplaySprite
0001A4B8 4EF9 0000 F43E             		jmp	DisplaySprite
0001A4BE                            Map_Cred:	include	"_maps\Credits.asm"
0001A4BE                            ; ---------------------------------------------------------------------------
0001A4BE                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A4BE                            ; ---------------------------------------------------------------------------
0001A4BE                            Map_Cred_internal:
0001A4BE 0000                       		dc.w @staff-Map_Cred_internal
0001A4C0 0000                       		dc.w @gameplan-Map_Cred_internal
0001A4C2 0000                       		dc.w @program-Map_Cred_internal
0001A4C4 0000                       		dc.w @character-Map_Cred_internal
0001A4C6 0000                       		dc.w @design-Map_Cred_internal
0001A4C8 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A4CA 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A4CC 0000                       		dc.w @thanks-Map_Cred_internal
0001A4CE 0000                       		dc.w @presentedby-Map_Cred_internal
0001A4D0 0000                       		dc.w @tryagain-Map_Cred_internal
0001A4D2 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A4D4 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A4D5 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A4DA F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A4DF F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A4E4 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A4E9 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A4EE F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A4F3 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A4F8 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A4FD F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A502 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A507 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A50C F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A511 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A516 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A51B 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A51C 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A521 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A526 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A52B 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A530 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A535 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A53A 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A53F 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A544 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A549                            
0001A549 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A54E B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A553 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A558 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A55D B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A562 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A563 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A568 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A56D 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A572 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A577 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A57C 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A581 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A586                            
0001A586 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A58B B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A590 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A595 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A59A B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A59F B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A5A4 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A5A9 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A5AE                            
0001A5AE D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A5B3 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A5B8                            
0001A5B8 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A5BD D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A5C2 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A5C7 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A5CC D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A5D1 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A5D6                            
0001A5D6 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A5DB F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A5E0 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A5E5 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A5E6 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A5EB 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5F0 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A5F5                            
0001A5F5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5FA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5FF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A604 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A609 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A60E 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A60F 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A614 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A619 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A61E 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A623 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A628 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A62D                            
0001A62D B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A632 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A637 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A63C B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A641 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A646 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A647 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A64C 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A651 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A656 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A65B 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A660 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A665 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A66A 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A66F 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A674 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A679                            
0001A679 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A67E B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A683 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A688 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A68D B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A692 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A697 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A69C B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A6A1                            
0001A6A1 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A6A6 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A6AB D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A6B0 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A6B5 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A6BA D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A6BF D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A6C4 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A6C9 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A6CE D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A6D3 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A6D4 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A6D9 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A6DE D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A6E3 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A6E8 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A6ED D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A6F2 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A6F7 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A6FC D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A701 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A706 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A70B D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A710 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A715 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A71A 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A71F 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A724 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A729 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A72E 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A733 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A738 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A73D 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A742 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A747 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A748 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A74D 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A752 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A757 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A75C 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A761 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A766 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A76B 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A770                            
0001A770 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A775 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A77A B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A77F B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A784 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A789 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A78E                            
0001A78E D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A793 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A798 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A79D 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A79E 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A7A3 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A7A8 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A7AD 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A7B2 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A7B7 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A7BC 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A7C1 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A7C6 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A7CB                            
0001A7CB B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A7D0 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A7D5                            
0001A7D5 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A7DA D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A7DF D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A7E4 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A7E9 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A7EE 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A7EF 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A7F4 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A7F9 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A7FE 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A803 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A808 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A80D 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A812 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A817 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A818 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A81D E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A822 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A827 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A82C E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A831 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A836                            
0001A836 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A83B 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A840 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A845 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A84A 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A84F 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A854 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A859 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A85E                            		even
0001A85E                            		even
0001A85E                            
0001A85E                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A85E                            ; ---------------------------------------------------------------------------
0001A85E                            ; Object 3D - Eggman (GHZ)
0001A85E                            ; ---------------------------------------------------------------------------
0001A85E                            
0001A85E                            BossGreenHill:
0001A85E 7000                       		moveq	#0,d0
0001A860 1028 0024                  		move.b	obRoutine(a0),d0
0001A864 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A868 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A86C                            ; ===========================================================================
0001A86C 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A86E 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A870 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A872 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A874                            
0001A874 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A876 0401                       		dc.b 4,	1
0001A878 0607                       		dc.b 6,	7
0001A87A                            ; ===========================================================================
0001A87A                            
0001A87A                            BGHZ_Main:	; Routine 0
0001A87A 45F9 0001 A874             		lea	(BGHZ_ObjData).l,a2
0001A880 2248                       		movea.l	a0,a1
0001A882 7202                       		moveq	#2,d1
0001A884 6000                       		bra.s	BGHZ_LoadBoss
0001A886                            ; ===========================================================================
0001A886                            
0001A886                            BGHZ_Loop:
0001A886 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001A88C 6600                       		bne.s	loc_17772
0001A88E                            
0001A88E                            BGHZ_LoadBoss:
0001A88E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A892 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A896 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A89C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A8A2 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A8AA 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A8B0 137C 0004 0001             		move.b	#4,obRender(a1)
0001A8B6 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A8BC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A8C2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A8C6 2348 0034                  		move.l	a0,$34(a1)
0001A8CA 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A8CE                            
0001A8CE                            loc_17772:
0001A8CE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A8D4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A8DA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A8E0 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A8E6                            
0001A8E6                            
0001A8E6                            BGHZ_ShipMain:	; Routine 2
0001A8E6 7000                       		moveq	#0,d0
0001A8E8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A8EC 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A8F0 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A8F4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A8FA 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001A900 1028 0022                  		move.b	obStatus(a0),d0
0001A904 0200 0003                  		andi.b	#3,d0
0001A908 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A90E 8128 0001                  		or.b	d0,obRender(a0)
0001A912 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001A918                            ; ===========================================================================
0001A918 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A91A 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A91C 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A91E 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A920 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A922 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A924 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A926                            ; ===========================================================================
0001A926                            
0001A926                            BGHZ_ShipStart:
0001A926 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A92C 6100 0000                  		bsr.w	BossMove
0001A930 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A936 6600                       		bne.s	loc_177E6
0001A938 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A93E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A942                            
0001A942                            loc_177E6:
0001A942 1028 003F                  		move.b	$3F(a0),d0
0001A946 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001A94C EC40                       		asr.w	#6,d0
0001A94E D068 0038                  		add.w	$38(a0),d0
0001A952 3140 000C                  		move.w	d0,obY(a0)
0001A956 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A95C 5428 003F                  		addq.b	#2,$3F(a0)
0001A960 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A966 6400                       		bcc.s	locret_1784A
0001A968 4A28 0022                  		tst.b	obStatus(a0)
0001A96C 6B00                       		bmi.s	loc_1784C
0001A96E 4A28 0020                  		tst.b	obColType(a0)
0001A972 6600                       		bne.s	locret_1784A
0001A974 4A28 003E                  		tst.b	$3E(a0)
0001A978 6600                       		bne.s	BGHZ_ShipFlash
0001A97A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A98A                            
0001A98A                            BGHZ_ShipFlash:
0001A98A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A98E 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A990 4A51                       		tst.w	(a1)
0001A992 6600                       		bne.s	loc_1783C
0001A994 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A998                            
0001A998                            loc_1783C:
0001A998 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A99A 5328 003E                  		subq.b	#1,$3E(a0)
0001A99E 6600                       		bne.s	locret_1784A
0001A9A0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A9A6                            
0001A9A6                            locret_1784A:
0001A9A6 4E75                       		rts	
0001A9A8                            ; ===========================================================================
0001A9A8                            
0001A9A8                            loc_1784C:
0001A9A8 7064                       		moveq	#100,d0
0001A9AA 6100 0000                  		bsr.w	AddPoints
0001A9AE 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A9B4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A9BA 4E75                       		rts	
0001A9BA 4E75                       		rts	
0001A9BC                            
0001A9BC                            ; ---------------------------------------------------------------------------
0001A9BC                            ; Defeated boss	subroutine
0001A9BC                            ; ---------------------------------------------------------------------------
0001A9BC                            
0001A9BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9BC                            
0001A9BC                            
0001A9BC                            BossDefeated:
0001A9BC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A9C0 0200 0007                  		andi.b	#7,d0
0001A9C4 6600                       		bne.s	locret_178A2
0001A9C6 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001A9CC 6600                       		bne.s	locret_178A2
0001A9CE 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A9D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A9D8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A9DE 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001A9E4 3200                       		move.w	d0,d1
0001A9E6 7200                       		moveq	#0,d1
0001A9E8 1200                       		move.b	d0,d1
0001A9EA E409                       		lsr.b	#2,d1
0001A9EC 0441 0020                  		subi.w	#$20,d1
0001A9F0 D369 0008                  		add.w	d1,obX(a1)
0001A9F4 E048                       		lsr.w	#8,d0
0001A9F6 E608                       		lsr.b	#3,d0
0001A9F8 D169 000C                  		add.w	d0,obY(a1)
0001A9FC                            
0001A9FC                            locret_178A2:
0001A9FC 4E75                       		rts	
0001A9FE                            ; End of function BossDefeated
0001A9FE                            
0001A9FE                            ; ---------------------------------------------------------------------------
0001A9FE                            ; Subroutine to	move a boss
0001A9FE                            ; ---------------------------------------------------------------------------
0001A9FE                            
0001A9FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9FE                            
0001A9FE                            
0001A9FE                            BossMove:
0001A9FE 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001AA04 E188                       		lsl.l	#8,d0
0001AA06 D1A8 0030                  		add.l	d0,$30(a0)
0001AA0A E18A                       		lsl.l	#8,d2
0001AA0C D5A8 0038                  		add.l	d2,$38(a0)
0001AA10 4E75                       		rts
0001AA12                            ; End of function BossMove
0001AA12                            
0001AA12                            ; ===========================================================================
0001AA12                            
0001AA12                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001AA12                            
0001AA12                            BGHZ_MakeBall:
0001AA12 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001AA18 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AA1E 6100 FFDE                  		bsr.w	BossMove
0001AA22 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AA28 6600                       		bne.s	loc_17916
0001AA2A 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AA30 317C 0000 0012             		move.w	#0,obVelY(a0)
0001AA36 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA3A 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001AA40 6600                       		bne.s	loc_17910
0001AA42 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AA46 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AA4C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AA52 2348 0034                  		move.l	a0,$34(a1)
0001AA56                            
0001AA56                            loc_17910:
0001AA56 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AA5C                            
0001AA5C                            loc_17916:
0001AA5C 6000 FEE4                  		bra.w	loc_177E6
0001AA60                            ; ===========================================================================
0001AA60                            
0001AA60                            BGHZ_ShipMove:
0001AA60 5368 003C                  		subq.w	#1,$3C(a0)
0001AA64 6A00                       		bpl.s	BGHZ_Reverse
0001AA66 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA6A 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA70 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AA76 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AA7C 6600                       		bne.s	BGHZ_Reverse
0001AA7E 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AA84 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AA8A                            
0001AA8A                            BGHZ_Reverse:
0001AA8A 0828 0000 0022             		btst	#0,obStatus(a0)
0001AA90 6600                       		bne.s	loc_17950
0001AA92 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AA96                            
0001AA96                            loc_17950:
0001AA96 6000 FEAA                  		bra.w	loc_177E6
0001AA9A                            ; ===========================================================================
0001AA9A                            
0001AA9A                            loc_17954:
0001AA9A 5368 003C                  		subq.w	#1,$3C(a0)
0001AA9E 6B00                       		bmi.s	loc_17960
0001AAA0 6100 FF5C                  		bsr.w	BossMove
0001AAA4 6000                       		bra.s	loc_17976
0001AAA6                            ; ===========================================================================
0001AAA6                            
0001AAA6                            loc_17960:
0001AAA6 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AAAC 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AAB2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AAB6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AABC                            
0001AABC                            loc_17976:
0001AABC 6000 FE84                  		bra.w	loc_177E6
0001AAC0                            ; ===========================================================================
0001AAC0                            
0001AAC0                            loc_1797A:
0001AAC0 5368 003C                  		subq.w	#1,$3C(a0)
0001AAC4 6B00                       		bmi.s	loc_17984
0001AAC6 6000 FEF4                  		bra.w	BossDefeated
0001AACA                            ; ===========================================================================
0001AACA                            
0001AACA                            loc_17984:
0001AACA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AAD0 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AAD6 4268 0010                  		clr.w	obVelX(a0)
0001AADA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AADE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AAE4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AAE8 6600                       		bne.s	locret_179AA
0001AAEA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AAF0                            
0001AAF0                            locret_179AA:
0001AAF0 4E75                       		rts	
0001AAF2                            ; ===========================================================================
0001AAF2                            
0001AAF2                            loc_179AC:
0001AAF2 5268 003C                  		addq.w	#1,$3C(a0)
0001AAF6 6700                       		beq.s	loc_179BC
0001AAF8 6A00                       		bpl.s	loc_179C2
0001AAFA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AB00 6000                       		bra.s	loc_179EE
0001AB02                            ; ===========================================================================
0001AB02                            
0001AB02                            loc_179BC:
0001AB02 4268 0012                  		clr.w	obVelY(a0)
0001AB06 6000                       		bra.s	loc_179EE
0001AB08                            ; ===========================================================================
0001AB08                            
0001AB08                            loc_179C2:
0001AB08 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AB0E 6500                       		bcs.s	loc_179DA
0001AB10 6700                       		beq.s	loc_179E0
0001AB12 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AB18 6500                       		bcs.s	loc_179EE
0001AB1A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB1E 6000                       		bra.s	loc_179EE
0001AB20                            ; ===========================================================================
0001AB20                            
0001AB20                            loc_179DA:
0001AB20 5168 0012                  		subq.w	#8,obVelY(a0)
0001AB24 6000                       		bra.s	loc_179EE
0001AB26                            ; ===========================================================================
0001AB26                            
0001AB26                            loc_179E0:
0001AB26 4268 0012                          clr.w    obVelY(a0)
0001AB2A 4A38 FE2D                          tst.b     (v_invinc).w
0001AB2E 6600                               bne.s   @boss_invinc
0001AB30 4A38 FE2E                          tst.b     (v_shoes).w
0001AB34 6600                               bne.s   @boss_shoes
0001AB36                            
0001AB36 1038 F5C6                          move.b   (v_Saved_music),d0
0001AB3A 6000 0000                          bra.w      @boss_play
0001AB3E                            
0001AB3E                            @boss_invinc:
0001AB3E 103C 0000                          move.b #bgm_Invincible,d0
0001AB42                            
0001AB42                            @boss_shoes:
0001AB42 103C 0000                          move.b #bgm_Ending,d0
0001AB46                            
0001AB46                            @boss_play:
0001AB46 4EB8 129A                          jsr PlaySound
0001AB4A                            
0001AB4A                            loc_179EE:
0001AB4A 6100 FEB2                  		bsr.w	BossMove
0001AB4E 6000 FDF2                  		bra.w	loc_177E6
0001AB52                            ; ===========================================================================
0001AB52                            
0001AB52                            loc_179F6:
0001AB52 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AB58 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AB5E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001AB64 6700                       		beq.s	loc_17A10
0001AB66 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AB6A 6000                       		bra.s	loc_17A16
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_17A10:
0001AB6C 4A28 0001                  		tst.b	obRender(a0)
0001AB70 6A00                       		bpl.s	BGHZ_ShipDel
0001AB72                            
0001AB72                            loc_17A16:
0001AB72 6100 FE8A                  		bsr.w	BossMove
0001AB76 6000 FDCA                  		bra.w	loc_177E6
0001AB7A                            ; ===========================================================================
0001AB7A                            
0001AB7A                            BGHZ_ShipDel:
0001AB7A 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001AB80                            ; ===========================================================================
0001AB80                            
0001AB80                            BGHZ_FaceMain:	; Routine 4
0001AB80 7000                       		moveq	#0,d0
0001AB82 7201                       		moveq	#1,d1
0001AB84 2268 0034                  		movea.l	$34(a0),a1
0001AB88 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AB8C 5900                       		subq.b	#4,d0
0001AB8E 6600                       		bne.s	loc_17A3E
0001AB90 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001AB96 6600                       		bne.s	loc_17A46
0001AB98 7204                       		moveq	#4,d1
0001AB9A                            
0001AB9A                            loc_17A3E:
0001AB9A 5D00                       		subq.b	#6,d0
0001AB9C 6B00                       		bmi.s	loc_17A46
0001AB9E 720A                       		moveq	#$A,d1
0001ABA0 6000                       		bra.s	loc_17A5A
0001ABA2                            ; ===========================================================================
0001ABA2                            
0001ABA2                            loc_17A46:
0001ABA2 4A29 0020                  		tst.b	obColType(a1)
0001ABA6 6600                       		bne.s	loc_17A50
0001ABA8 7205                       		moveq	#5,d1
0001ABAA 6000                       		bra.s	loc_17A5A
0001ABAC                            ; ===========================================================================
0001ABAC                            
0001ABAC                            loc_17A50:
0001ABAC 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001ABB2 6500                       		bcs.s	loc_17A5A
0001ABB4 7204                       		moveq	#4,d1
0001ABB6                            
0001ABB6                            loc_17A5A:
0001ABB6 1141 001C                  		move.b	d1,obAnim(a0)
0001ABBA 5500                       		subq.b	#2,d0
0001ABBC 6600                       		bne.s	BGHZ_FaceDisp
0001ABBE 117C 0006 001C             		move.b	#6,obAnim(a0)
0001ABC4 4A28 0001                  		tst.b	obRender(a0)
0001ABC8 6A00                       		bpl.s	BGHZ_FaceDel
0001ABCA                            
0001ABCA                            BGHZ_FaceDisp:
0001ABCA 6000                       		bra.s	BGHZ_Display
0001ABCC                            ; ===========================================================================
0001ABCC                            
0001ABCC                            BGHZ_FaceDel:
0001ABCC 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001ABD2                            ; ===========================================================================
0001ABD2                            
0001ABD2                            BGHZ_FlameMain:	; Routine 6
0001ABD2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001ABD8 2268 0034                  		movea.l	$34(a0),a1
0001ABDC 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001ABE2 6600                       		bne.s	loc_17A96
0001ABE4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001ABEA 4A28 0001                  		tst.b	obRender(a0)
0001ABEE 6A00                       		bpl.s	BGHZ_FlameDel
0001ABF0 6000                       		bra.s	BGHZ_FlameDisp
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            loc_17A96:
0001ABF2 3029 0010                  		move.w	obVelX(a1),d0
0001ABF6 6700                       		beq.s	BGHZ_FlameDisp
0001ABF8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001ABFE                            
0001ABFE                            BGHZ_FlameDisp:
0001ABFE 6000                       		bra.s	BGHZ_Display
0001AC00                            ; ===========================================================================
0001AC00                            
0001AC00                            BGHZ_FlameDel:
0001AC00 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001AC06                            ; ===========================================================================
0001AC06                            
0001AC06                            BGHZ_Display:
0001AC06 2268 0034                  		movea.l	$34(a0),a1
0001AC0A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AC10 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AC16 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AC1C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AC22 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001AC28 1028 0022                  		move.b	obStatus(a0),d0
0001AC2C 0200 0003                  		andi.b	#3,d0
0001AC30 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AC36 8128 0001                  		or.b	d0,obRender(a0)
0001AC3A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001AC3A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001AC40                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AC40                            ; ---------------------------------------------------------------------------
0001AC40                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AC40                            ; ---------------------------------------------------------------------------
0001AC40                            
0001AC40                            BossBall:
0001AC40 7000                       		moveq	#0,d0
0001AC42 1028 0024                  		move.b	obRoutine(a0),d0
0001AC46 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AC4A 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AC4E                            ; ===========================================================================
0001AC4E 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AC50 0000                       		dc.w GBall_Base-GBall_Index
0001AC52 0000                       		dc.w GBall_Display2-GBall_Index
0001AC54 0000                       		dc.w loc_17C68-GBall_Index
0001AC56 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AC58                            ; ===========================================================================
0001AC58                            
0001AC58                            GBall_Main:	; Routine 0
0001AC58 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC5C 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AC62 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AC68 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AC70 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AC76 45E8 0028                  		lea	obSubtype(a0),a2
0001AC7A 14FC 0000                  		move.b	#0,(a2)+
0001AC7E 7205                       		moveq	#5,d1
0001AC80 2248                       		movea.l	a0,a1
0001AC82 6000                       		bra.s	loc_17B60
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            GBall_MakeLinks:
0001AC84 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001AC8A 6600                       		bne.s	GBall_MakeBall
0001AC8C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AC92 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AC98 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AC9C 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001ACA2 237C 0000 92F4 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001ACAA 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001ACB0 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ACB6 5228 0028                  		addq.b	#1,obSubtype(a0)
0001ACBA                            
0001ACBA                            loc_17B60:
0001ACBA 3A09                       		move.w	a1,d5
0001ACBC 0445 D000                  		subi.w	#$D000,d5
0001ACC0 EC4D                       		lsr.w	#6,d5
0001ACC2 0245 007F                  		andi.w	#$7F,d5
0001ACC6 14C5                       		move.b	d5,(a2)+
0001ACC8 137C 0004 0001             		move.b	#4,obRender(a1)
0001ACCE 137C 0008 0014             		move.b	#8,obActWid(a1)
0001ACD4 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001ACDA 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001ACE0 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001ACE4                            
0001ACE4                            GBall_MakeBall:
0001ACE4 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ACEA 237C 0000 9850 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ACF2 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ACF8 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ACFE 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001AD04 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001AD0A 4E75                       		rts	
0001AD0C                            ; ===========================================================================
0001AD0C                            
0001AD0C 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001AD12                            
0001AD12                            ; ===========================================================================
0001AD12                            
0001AD12                            GBall_Base:	; Routine 2
0001AD12 47F9 0001 AD0C             		lea	(GBall_PosData).l,a3
0001AD18 45E8 0028                  		lea	obSubtype(a0),a2
0001AD1C 7C00                       		moveq	#0,d6
0001AD1E 1C1A                       		move.b	(a2)+,d6
0001AD20                            
0001AD20                            loc_17BC6:
0001AD20 7800                       		moveq	#0,d4
0001AD22 181A                       		move.b	(a2)+,d4
0001AD24 ED4C                       		lsl.w	#6,d4
0001AD26 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AD2C 2244                       		movea.l	d4,a1
0001AD2E 101B                       		move.b	(a3)+,d0
0001AD30 B029 003C                  		cmp.b	$3C(a1),d0
0001AD34 6700                       		beq.s	loc_17BE0
0001AD36 5229 003C                  		addq.b	#1,$3C(a1)
0001AD3A                            
0001AD3A                            loc_17BE0:
0001AD3A 51CE FFE4                  		dbf	d6,loc_17BC6
0001AD3E                            
0001AD3E B029 003C                  		cmp.b	$3C(a1),d0
0001AD42 6600                       		bne.s	loc_17BFA
0001AD44 2268 0034                  		movea.l	$34(a0),a1
0001AD48 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AD4E 6600                       		bne.s	loc_17BFA
0001AD50 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AD54                            
0001AD54                            loc_17BFA:
0001AD54 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AD5A 6700                       		beq.s	GBall_Display
0001AD5C 5268 0032                  		addq.w	#1,$32(a0)
0001AD60                            
0001AD60                            GBall_Display:
0001AD60 6100 0000                  		bsr.w	sub_17C2A
0001AD64 1028 0026                  		move.b	obAngle(a0),d0
0001AD68 4EB9 0000 9266             		jsr	(Swing_Move2).l
0001AD6E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001AD74                            ; ===========================================================================
0001AD74                            
0001AD74                            GBall_Display2:	; Routine 4
0001AD74 6100 0000                  		bsr.w	sub_17C2A
0001AD78 4EB9 0000 9226             		jsr	(Obj48_Move).l
0001AD7E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001AD84                            
0001AD84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AD84                            
0001AD84                            
0001AD84                            sub_17C2A:
0001AD84 2268 0034                  		movea.l	$34(a0),a1
0001AD88 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AD8E 6400                       		bcc.s	loc_17C3C
0001AD90 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AD96                            
0001AD96                            loc_17C3C:
0001AD96 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AD9C 3029 000C                  		move.w	obY(a1),d0
0001ADA0 D068 0032                  		add.w	$32(a0),d0
0001ADA4 3140 0038                  		move.w	d0,$38(a0)
0001ADA8 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ADAE 4A29 0022                  		tst.b	obStatus(a1)
0001ADB2 6A00                       		bpl.s	locret_17C66
0001ADB4 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ADB8 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ADBE                            
0001ADBE                            locret_17C66:
0001ADBE 4E75                       		rts	
0001ADC0                            ; End of function sub_17C2A
0001ADC0                            
0001ADC0                            ; ===========================================================================
0001ADC0                            
0001ADC0                            loc_17C68:	; Routine 6
0001ADC0 2268 0034                  		movea.l	$34(a0),a1
0001ADC4 4A29 0022                  		tst.b	obStatus(a1)
0001ADC8 6A00                       		bpl.s	GBall_Display3
0001ADCA 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001ADCE 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ADD4                            
0001ADD4                            GBall_Display3:
0001ADD4 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001ADDA                            ; ===========================================================================
0001ADDA                            
0001ADDA                            GBall_ChkVanish:; Routine 8
0001ADDA 7000                       		moveq	#0,d0
0001ADDC 4A28 001A                  		tst.b	obFrame(a0)
0001ADE0 6600                       		bne.s	GBall_Vanish
0001ADE2 5200                       		addq.b	#1,d0
0001ADE4                            
0001ADE4                            GBall_Vanish:
0001ADE4 1140 001A                  		move.b	d0,obFrame(a0)
0001ADE8 2268 0034                  		movea.l	$34(a0),a1
0001ADEC 4A29 0022                  		tst.b	obStatus(a1)
0001ADF0 6A00                       		bpl.s	GBall_Display4
0001ADF2 117C 0000 0020             		move.b	#0,obColType(a0)
0001ADF8 6100 FBC2                  		bsr.w	BossDefeated
0001ADFC 5328 003C                  		subq.b	#1,$3C(a0)
0001AE00 6A00                       		bpl.s	GBall_Display4
0001AE02 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AE06 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AE0C                            
0001AE0C                            GBall_Display4:
0001AE0C 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001AE0C 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001AE12                            		include	"_anim\Eggman.asm"
0001AE12                            ; ---------------------------------------------------------------------------
0001AE12                            ; Animation script - Eggman (bosses)
0001AE12                            ; ---------------------------------------------------------------------------
0001AE12 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AE14 0000                       		dc.w @facenormal1-Ani_Eggman
0001AE16 0000                       		dc.w @facenormal2-Ani_Eggman
0001AE18 0000                       		dc.w @facenormal3-Ani_Eggman
0001AE1A 0000                       		dc.w @facelaugh-Ani_Eggman
0001AE1C 0000                       		dc.w @facehit-Ani_Eggman
0001AE1E 0000                       		dc.w @facepanic-Ani_Eggman
0001AE20 0000                       		dc.w @blank-Ani_Eggman
0001AE22 0000                       		dc.w @flame1-Ani_Eggman
0001AE24 0000                       		dc.w @flame2-Ani_Eggman
0001AE26 0000                       		dc.w @facedefeat-Ani_Eggman
0001AE28 0000                       		dc.w @escapeflame-Ani_Eggman
0001AE2A 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AE2E 00                         		even
0001AE2E 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AE32                            		even
0001AE32 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AE36                            		even
0001AE36 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AE3A                            		even
0001AE3A 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AE3E                            		even
0001AE3E 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AE42                            		even
0001AE42 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AE46                            		even
0001AE46 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AE4A 00                         		even
0001AE4A 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AE4E                            		even
0001AE4E 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AE52                            		even
0001AE52 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AE56 00                         		even
0001AE56 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AE62 00                         		even
0001AE62 00                         		even
0001AE62                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AE62                            ; --------------------------------------------------------------------------------
0001AE62                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AE62                            ; --------------------------------------------------------------------------------
0001AE62                            
0001AE62                            SME_F_pyS:	
0001AE62 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AE66 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AE6A 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AE6E 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AE72 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AE76 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AE7A 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AE7C 05                         SME_F_pyS_1A:	dc.b 5	
0001AE7D EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AE82 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AE87 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AE8C 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AE91 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AE96 03                         SME_F_pyS_34:	dc.b 3	
0001AE97 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE9C EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AEA1 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AEA6 03                         SME_F_pyS_44:	dc.b 3	
0001AEA7 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AEAC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AEB1 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AEB6 04                         SME_F_pyS_54:	dc.b 4	
0001AEB7 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AEBC EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AEC1 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AEC6 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AECB 04                         SME_F_pyS_69:	dc.b 4	
0001AECC E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AED1 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AED6 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AEDB EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEE0 04                         SME_F_pyS_7E:	dc.b 4	
0001AEE1 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AEE6 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AEEB EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AEF0 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEF5 04                         SME_F_pyS_93:	dc.b 4	
0001AEF6 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AEFB E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF00 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AF05 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF0A 07                         SME_F_pyS_A8:	dc.b 7	
0001AF0B E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AF10 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AF15 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AF1A EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AF1F F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AF24 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AF29 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AF2E 01                         SME_F_pyS_CC:	dc.b 1	
0001AF2F 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AF34 01                         SME_F_pyS_D2:	dc.b 1	
0001AF35 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AF3A 00                         SME_F_pyS_D8:	dc.b 0	
0001AF3B 02                         SME_F_pyS_D9:	dc.b 2	
0001AF3C 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AF41 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AF46 02                         SME_F_pyS_E4:	dc.b 2	
0001AF47 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AF4C 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AF52 00                         		even
0001AF52 00                         		even
0001AF52                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AF52                            ; ---------------------------------------------------------------------------
0001AF52                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AF52                            ; ---------------------------------------------------------------------------
0001AF52                            Map_BossItems_internal:
0001AF52 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AF54 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AF56 0000                       		dc.w @cross-Map_BossItems_internal
0001AF58 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AF5A 0000                       		dc.w @pipe-Map_BossItems_internal
0001AF5C 0000                       		dc.w @spike-Map_BossItems_internal
0001AF5E 0000                       		dc.w @legmask-Map_BossItems_internal
0001AF60 0000                       		dc.w @legs-Map_BossItems_internal
0001AF62 01                         @chainanchor1:	dc.b 1
0001AF63 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AF68 02                         @chainanchor2:	dc.b 2
0001AF69 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AF6E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AF74 00                         		even
0001AF74 01                         @cross:		dc.b 1
0001AF75 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AF7A 01                         @widepipe:	dc.b 1
0001AF7B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AF80 01                         @pipe:		dc.b 1
0001AF81 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AF86 04                         @spike:		dc.b 4
0001AF87 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AF8C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AF91 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AF96 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AF9C 00                         		even
0001AF9C 02                         @legmask:	dc.b 2
0001AF9D 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AFA2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AFA8 00                         		even
0001AFA8 02                         @legs:		dc.b 2
0001AFA9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AFAE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AFB4 00                         		even
0001AFB4 00                         		even
0001AFB4                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AFB4                            ; ---------------------------------------------------------------------------
0001AFB4                            ; Object 77 - Eggman (LZ)
0001AFB4                            ; ---------------------------------------------------------------------------
0001AFB4                            
0001AFB4                            BossLabyrinth:
0001AFB4 7000                       		moveq	#0,d0
0001AFB6 1028 0024                  		move.b	obRoutine(a0),d0
0001AFBA 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AFBE 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AFC2                            ; ===========================================================================
0001AFC2 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AFC4 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AFC6 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AFC8 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AFCA                            
0001AFCA 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AFCC 0401                       		dc.b 4,	1
0001AFCE 0607                       		dc.b 6,	7
0001AFD0                            ; ===========================================================================
0001AFD0                            
0001AFD0                            Obj77_Main:	; Routine 0
0001AFD0 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AFD6 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AFDC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AFE2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AFE8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AFEE 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AFF4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AFFA 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AFFE 2248                       		movea.l	a0,a1
0001B000 7202                       		moveq	#2,d1
0001B002 6000                       		bra.s	Obj77_LoadBoss
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            Obj77_Loop:
0001B004 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001B00A 6600                       		bne.s	Obj77_ShipMain
0001B00C 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001B010 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B016 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B01C                            
0001B01C                            Obj77_LoadBoss:
0001B01C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B022 4229 0025                  		clr.b	ob2ndRout(a1)
0001B026 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B02A 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B02E 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001B034 237C 0001 AE62 0004        		move.l	#Map_Eggman,obMap(a1)
0001B03C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B042 137C 0004 0001             		move.b	#4,obRender(a1)
0001B048 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B04E 2348 0034                  		move.l	a0,$34(a1)
0001B052 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B056                            
0001B056                            Obj77_ShipMain:	; Routine 2
0001B056 43F8 D000                  		lea	(v_player).w,a1
0001B05A 7000                       		moveq	#0,d0
0001B05C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B060 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B064 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B068 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001B06E 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001B074 7003                       		moveq	#3,d0
0001B076 C028 0022                  		and.b	obStatus(a0),d0
0001B07A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B080 8128 0001                  		or.b	d0,obRender(a0)
0001B084 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001B08A                            ; ===========================================================================
0001B08A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B08E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B092 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B096 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B09A                            ; ===========================================================================
0001B09A                            
0001B09A                            loc_17F1E:
0001B09A 3029 0008                  		move.w	obX(a1),d0
0001B09E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B0A2 6500                       		bcs.s	loc_17F38
0001B0A4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B0AA 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B0B0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B0B4                            
0001B0B4                            loc_17F38:
0001B0B4 6100 F948                  		bsr.w	BossMove
0001B0B8 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B0BE 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B0C4                            
0001B0C4                            loc_17F48:
0001B0C4 4A28 003D                  		tst.b	$3D(a0)
0001B0C8 6600                       		bne.s	loc_17F8E
0001B0CA 4A28 0022                  		tst.b	obStatus(a0)
0001B0CE 6B00                       		bmi.s	loc_17F92
0001B0D0 4A28 0020                  		tst.b	obColType(a0)
0001B0D4 6600                       		bne.s	locret_17F8C
0001B0D6 4A28 003E                  		tst.b	$3E(a0)
0001B0DA 6600                       		bne.s	loc_17F70
0001B0DC 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B0EC                            
0001B0EC                            loc_17F70:
0001B0EC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B0F0 7000                       		moveq	#0,d0
0001B0F2 4A51                       		tst.w	(a1)
0001B0F4 6600                       		bne.s	loc_17F7E
0001B0F6 303C 0EEE                  		move.w	#cWhite,d0
0001B0FA                            
0001B0FA                            loc_17F7E:
0001B0FA 3280                       		move.w	d0,(a1)
0001B0FC 5328 003E                  		subq.b	#1,$3E(a0)
0001B100 6600                       		bne.s	locret_17F8C
0001B102 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B108                            
0001B108                            locret_17F8C:
0001B108 4E75                       		rts	
0001B10A                            ; ===========================================================================
0001B10A                            
0001B10A                            loc_17F8E:
0001B10A 6000 F8B0                  		bra.w	BossDefeated
0001B10E                            ; ===========================================================================
0001B10E                            
0001B10E                            loc_17F92:
0001B10E 7064                       		moveq	#100,d0
0001B110 6100 0000                  		bsr.w	AddPoints
0001B114 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B11A 4E75                       		rts	
0001B11C                            ; ===========================================================================
0001B11C                            
0001B11C                            loc_17FA0:
0001B11C 70FE                       		moveq	#-2,d0
0001B11E 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B124 6500                       		bcs.s	loc_17FB6
0001B126 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B12C 4268 0010                  		clr.w	obVelX(a0)
0001B130 5240                       		addq.w	#1,d0
0001B132                            
0001B132                            loc_17FB6:
0001B132 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B138 6E00                       		bgt.s	loc_17FCA
0001B13A 317C 0500 0038             		move.w	#$500,$38(a0)
0001B140 4268 0012                  		clr.w	obVelY(a0)
0001B144 5240                       		addq.w	#1,d0
0001B146                            
0001B146                            loc_17FCA:
0001B146 6600                       		bne.s	loc_17FDC
0001B148 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B14E 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B154 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B158                            
0001B158                            loc_17FDC:
0001B158 6000 FF5A                  		bra.w	loc_17F38
0001B15C                            ; ===========================================================================
0001B15C                            
0001B15C                            loc_17FE0:
0001B15C 70FE                       		moveq	#-2,d0
0001B15E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B164 6500                       		bcs.s	loc_17FF6
0001B166 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B16C 4268 0010                  		clr.w	obVelX(a0)
0001B170 5240                       		addq.w	#1,d0
0001B172                            
0001B172                            loc_17FF6:
0001B172 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B178 6E00                       		bgt.s	loc_1800A
0001B17A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B180 4268 0012                  		clr.w	obVelY(a0)
0001B184 5240                       		addq.w	#1,d0
0001B186                            
0001B186                            loc_1800A:
0001B186 6600                       		bne.s	loc_1801A
0001B188 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B18E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B192 4228 003F                  		clr.b	$3F(a0)
0001B196                            
0001B196                            loc_1801A:
0001B196 6000 FF1C                  		bra.w	loc_17F38
0001B19A                            ; ===========================================================================
0001B19A                            
0001B19A                            loc_1801E:
0001B19A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B1A0 6E00                       		bgt.s	loc_1804E
0001B1A2 317C 0100 0038             		move.w	#$100,$38(a0)
0001B1A8 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B1AE 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B1B4 4A28 003D                  		tst.b	$3D(a0)
0001B1B8 6700                       		beq.s	loc_18046
0001B1BA E1E8 0010                  		asl	obVelX(a0)
0001B1BE E1E8 0012                  		asl	obVelY(a0)
0001B1C2                            
0001B1C2                            loc_18046:
0001B1C2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1C6 6000 FEEC                  		bra.w	loc_17F38
0001B1CA                            ; ===========================================================================
0001B1CA                            
0001B1CA                            loc_1804E:
0001B1CA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B1D0 5428 003F                  		addq.b	#2,$3F(a0)
0001B1D4 1028 003F                  		move.b	$3F(a0),d0
0001B1D8 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001B1DE 4A41                       		tst.w	d1
0001B1E0 6A00                       		bpl.s	loc_1806C
0001B1E2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B1E8                            
0001B1E8                            loc_1806C:
0001B1E8 E840                       		asr.w	#4,d0
0001B1EA 4840                       		swap	d0
0001B1EC 4240                       		clr.w	d0
0001B1EE D0A8 0030                  		add.l	$30(a0),d0
0001B1F2 4840                       		swap	d0
0001B1F4 3140 0008                  		move.w	d0,obX(a0)
0001B1F8 3028 0012                  		move.w	obVelY(a0),d0
0001B1FC 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B200 9268 000C                  		sub.w	obY(a0),d1
0001B204 6500                       		bcs.s	loc_180A2
0001B206 0441 0048                  		subi.w	#$48,d1
0001B20A 6500                       		bcs.s	loc_180A2
0001B20C E240                       		asr.w	#1,d0
0001B20E 0441 0028                  		subi.w	#$28,d1
0001B212 6500                       		bcs.s	loc_180A2
0001B214 E240                       		asr.w	#1,d0
0001B216 0441 0028                  		subi.w	#$28,d1
0001B21A 6500                       		bcs.s	loc_180A2
0001B21C 7000                       		moveq	#0,d0
0001B21E                            
0001B21E                            loc_180A2:
0001B21E 48C0                       		ext.l	d0
0001B220 E180                       		asl.l	#8,d0
0001B222 4A28 003D                  		tst.b	$3D(a0)
0001B226 6700                       		beq.s	loc_180AE
0001B228 D080                       		add.l	d0,d0
0001B22A                            
0001B22A                            loc_180AE:
0001B22A D1A8 0038                  		add.l	d0,$38(a0)
0001B22E 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B234 6000 FE8E                  		bra.w	loc_17F48
0001B238                            ; ===========================================================================
0001B238                            
0001B238                            loc_180BC:
0001B238 70FE                       		moveq	#-2,d0
0001B23A 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B240 6500                       		bcs.s	loc_180D2
0001B242 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B248 4268 0010                  		clr.w	obVelX(a0)
0001B24C 5240                       		addq.w	#1,d0
0001B24E                            
0001B24E                            loc_180D2:
0001B24E 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B254 6E00                       		bgt.s	loc_180E6
0001B256 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B25C 4268 0012                  		clr.w	obVelY(a0)
0001B260 5240                       		addq.w	#1,d0
0001B262                            
0001B262                            loc_180E6:
0001B262 6600                       		bne.s	loc_180F2
0001B264 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B268 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B26E                            
0001B26E                            loc_180F2:
0001B26E 6000 FE44                  		bra.w	loc_17F38
0001B272                            ; ===========================================================================
0001B272                            
0001B272                            loc_180F6:
0001B272 4A28 003D                  		tst.b	$3D(a0)
0001B276 6600                       		bne.s	loc_18112
0001B278 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B27E 6D00                       		blt.s	loc_18126
0001B280 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B286 6E00                       		bgt.s	loc_18126
0001B288 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B28E                            
0001B28E                            loc_18112:
0001B28E 4A38 FE2D                          tst.b     (v_invinc).w
0001B292 6600                               bne.s   @boss_invinc
0001B294                            
0001B294 1038 F5C6                          move.b   (v_Saved_music),d0
0001B298 6000 0000                          bra.w      @boss_play
0001B29C                            
0001B29C                            @boss_invinc:
0001B29C 103C 0000                          move.b #bgm_Invincible,d0
0001B2A0                            
0001B2A0                            @boss_play:
0001B2A0 4EB8 129A                          jsr PlaySound
0001B2A4 4238 F7AA                          clr.b    (f_lockscreen).w
0001B2A8 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B2AE 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B2B2                            
0001B2B2                            loc_18126:
0001B2B2 6000 FE00                  		bra.w	loc_17F38
0001B2B6                            ; ===========================================================================
0001B2B6                            
0001B2B6                            loc_1812A:
0001B2B6 4A28 003D                  		tst.b	$3D(a0)
0001B2BA 6600                       		bne.s	loc_18136
0001B2BC 5328 003C                  		subq.b	#1,$3C(a0)
0001B2C0 6600                       		bne.s	loc_1814E
0001B2C2                            
0001B2C2                            loc_18136:
0001B2C2 4228 003C                  		clr.b	$3C(a0)
0001B2C6 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B2CC 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B2D2 4228 003D                  		clr.b	$3D(a0)
0001B2D6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2DA                            
0001B2DA                            loc_1814E:
0001B2DA 6000 FDD8                  		bra.w	loc_17F38
0001B2DE                            ; ===========================================================================
0001B2DE                            
0001B2DE                            loc_18152:
0001B2DE 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B2E4 6400                       		bcc.s	loc_18160
0001B2E6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B2EA 6000                       		bra.s	loc_18166
0001B2EC                            ; ===========================================================================
0001B2EC                            
0001B2EC                            loc_18160:
0001B2EC 4A28 0001                  		tst.b	obRender(a0)
0001B2F0 6A00                       		bpl.s	Obj77_ShipDel
0001B2F2                            
0001B2F2                            loc_18166:
0001B2F2 6000 FDC0                  		bra.w	loc_17F38
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            Obj77_ShipDel:
0001B2F6 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B2FC                            ; ===========================================================================
0001B2FC                            
0001B2FC                            Obj77_FaceMain:	; Routine 4
0001B2FC 2268 0034                  		movea.l	$34(a0),a1
0001B300 1011                       		move.b	(a1),d0
0001B302 B010                       		cmp.b	(a0),d0
0001B304 6600                       		bne.s	Obj77_FaceDel
0001B306 7000                       		moveq	#0,d0
0001B308 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B30C 7201                       		moveq	#1,d1
0001B30E 4A28 003D                  		tst.b	$3D(a0)
0001B312 6700                       		beq.s	loc_1818C
0001B314 720A                       		moveq	#$A,d1
0001B316 6000                       		bra.s	loc_181A0
0001B318                            ; ===========================================================================
0001B318                            
0001B318                            loc_1818C:
0001B318 4A29 0020                  		tst.b	obColType(a1)
0001B31C 6600                       		bne.s	loc_18196
0001B31E 7205                       		moveq	#5,d1
0001B320 6000                       		bra.s	loc_181A0
0001B322                            ; ===========================================================================
0001B322                            
0001B322                            loc_18196:
0001B322 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B328 6500                       		bcs.s	loc_181A0
0001B32A 7204                       		moveq	#4,d1
0001B32C                            
0001B32C                            loc_181A0:
0001B32C 1141 001C                  		move.b	d1,obAnim(a0)
0001B330 0C00 000E                  		cmpi.b	#$E,d0
0001B334 6600                       		bne.s	loc_181B6
0001B336 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B33C 4A28 0001                  		tst.b	obRender(a0)
0001B340 6A00                       		bpl.s	Obj77_FaceDel
0001B342                            
0001B342                            loc_181B6:
0001B342 6000                       		bra.s	Obj77_Display
0001B344                            ; ===========================================================================
0001B344                            
0001B344                            Obj77_FaceDel:
0001B344 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B34A                            ; ===========================================================================
0001B34A                            
0001B34A                            Obj77_FlameMain:; Routine 6
0001B34A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B350 2268 0034                  		movea.l	$34(a0),a1
0001B354 1011                       		move.b	(a1),d0
0001B356 B010                       		cmp.b	(a0),d0
0001B358 6600                       		bne.s	Obj77_FlameDel
0001B35A 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B360 6600                       		bne.s	loc_181F0
0001B362 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B368 4A28 0001                  		tst.b	1(a0)
0001B36C 6A00                       		bpl.s	Obj77_FlameDel
0001B36E 6000                       		bra.s	loc_181F0
0001B370                            ; ===========================================================================
0001B370 4A69 0010                  		tst.w	obVelX(a1)
0001B374 6700                       		beq.s	loc_181F0
0001B376 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B37C                            
0001B37C                            loc_181F0:
0001B37C 6000                       		bra.s	Obj77_Display
0001B37E                            ; ===========================================================================
0001B37E                            
0001B37E                            Obj77_FlameDel:
0001B37E 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B384                            ; ===========================================================================
0001B384                            
0001B384                            Obj77_Display:
0001B384 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001B38A 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001B390 2268 0034                  		movea.l	$34(a0),a1
0001B394 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B39A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B3A0 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B3A6 7003                       		moveq	#3,d0
0001B3A8 C028 0022                  		and.b	obStatus(a0),d0
0001B3AC 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B3B2 8128 0001                  		or.b	d0,obRender(a0)
0001B3B6 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001B3B6 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001B3BC                            		include	"_incObj\73 Boss - Marble.asm"
0001B3BC                            ; ---------------------------------------------------------------------------
0001B3BC                            ; Object 73 - Eggman (MZ)
0001B3BC                            ; ---------------------------------------------------------------------------
0001B3BC                            
0001B3BC                            BossMarble:
0001B3BC 7000                       		moveq	#0,d0
0001B3BE 1028 0024                  		move.b	obRoutine(a0),d0
0001B3C2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B3C6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B3CA                            ; ===========================================================================
0001B3CA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B3CC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B3CE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B3D0 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B3D2 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B3D4                            
0001B3D4 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B3D8 0401 0200                  		dc.b 4,	1, $02, $00
0001B3DC 0607 0200                  		dc.b 6,	7, $02, $00
0001B3E0 0800 0180                  		dc.b 8,	0, $01, $80
0001B3E4                            ; ===========================================================================
0001B3E4                            
0001B3E4                            Obj73_Main:	; Routine 0
0001B3E4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B3EA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B3F0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3F6 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B3FC 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B400 2248                       		movea.l	a0,a1
0001B402 7203                       		moveq	#3,d1
0001B404 6000                       		bra.s	Obj73_LoadBoss
0001B406                            ; ===========================================================================
0001B406                            
0001B406                            Obj73_Loop:
0001B406 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001B40C 6600                       		bne.s	Obj73_ShipMain
0001B40E 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B412 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B418 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B41E                            
0001B41E                            Obj73_LoadBoss:
0001B41E 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B424 4229 0025                  		clr.b	ob2ndRout(a1)
0001B428 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B42C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B430 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B434 237C 0001 AE62 0004        		move.l	#Map_Eggman,obMap(a1)
0001B43C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B442 137C 0004 0001             		move.b	#4,obRender(a1)
0001B448 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B44E 2348 0034                  		move.l	a0,$34(a1)
0001B452 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B456                            
0001B456                            Obj73_ShipMain:	; Routine 2
0001B456 7000                       		moveq	#0,d0
0001B458 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B45C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B460 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B464 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001B46A 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001B470 7003                       		moveq	#3,d0
0001B472 C028 0022                  		and.b	obStatus(a0),d0
0001B476 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B47C 8128 0001                  		or.b	d0,obRender(a0)
0001B480 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001B486                            ; ===========================================================================
0001B486 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B488 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B48A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B48C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B48E 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            loc_18302:
0001B490 1028 003F                  		move.b	$3F(a0),d0
0001B494 5428 003F                  		addq.b	#2,$3F(a0)
0001B498 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001B49E E440                       		asr.w	#2,d0
0001B4A0 3140 0012                  		move.w	d0,obVelY(a0)
0001B4A4 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B4AA 6100 F552                  		bsr.w	BossMove
0001B4AE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B4B4 6600                       		bne.s	loc_18334
0001B4B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B4BA 4228 0028                  		clr.b	obSubtype(a0)
0001B4BE 42A8 0010                  		clr.l	obVelX(a0)
0001B4C2                            
0001B4C2                            loc_18334:
0001B4C2 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001B4C8 1140 0034                  		move.b	d0,$34(a0)
0001B4CC                            
0001B4CC                            loc_1833E:
0001B4CC 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B4D2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B4D8 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B4DE 6400                       		bcc.s	locret_18390
0001B4E0 4A28 0022                  		tst.b	obStatus(a0)
0001B4E4 6B00                       		bmi.s	loc_18392
0001B4E6 4A28 0020                  		tst.b	obColType(a0)
0001B4EA 6600                       		bne.s	locret_18390
0001B4EC 4A28 003E                  		tst.b	$3E(a0)
0001B4F0 6600                       		bne.s	loc_18374
0001B4F2 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B502                            
0001B502                            loc_18374:
0001B502 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B506 7000                       		moveq	#0,d0
0001B508 4A51                       		tst.w	(a1)
0001B50A 6600                       		bne.s	loc_18382
0001B50C 303C 0EEE                  		move.w	#cWhite,d0
0001B510                            
0001B510                            loc_18382:
0001B510 3280                       		move.w	d0,(a1)
0001B512 5328 003E                  		subq.b	#1,$3E(a0)
0001B516 6600                       		bne.s	locret_18390
0001B518 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B51E                            
0001B51E                            locret_18390:
0001B51E 4E75                       		rts	
0001B520                            ; ===========================================================================
0001B520                            
0001B520                            loc_18392:
0001B520 7064                       		moveq	#100,d0
0001B522 6100 0000                  		bsr.w	AddPoints
0001B526 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B52C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B532 4268 0010                  		clr.w	obVelX(a0)
0001B536 4E75                       		rts	
0001B538                            ; ===========================================================================
0001B538                            
0001B538                            loc_183AA:
0001B538 7000                       		moveq	#0,d0
0001B53A 1028 0028                  		move.b	obSubtype(a0),d0
0001B53E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B542 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B546 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B54C 6000 FF7E                  		bra.w	loc_1833E
0001B550                            ; ===========================================================================
0001B550 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B552 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B554 0000                       		dc.w loc_183CA-off_183C2
0001B556 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B558                            ; ===========================================================================
0001B558                            
0001B558                            loc_183CA:
0001B558 4A68 0010                  		tst.w	obVelX(a0)
0001B55C 6600                       		bne.s	loc_183FE
0001B55E 7040                       		moveq	#$40,d0
0001B560 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B566 6700                       		beq.s	loc_183E6
0001B568 6500                       		bcs.s	loc_183DE
0001B56A 4440                       		neg.w	d0
0001B56C                            
0001B56C                            loc_183DE:
0001B56C 3140 0012                  		move.w	d0,obVelY(a0)
0001B570 6000 F48C                  		bra.w	BossMove
0001B574                            ; ===========================================================================
0001B574                            
0001B574                            loc_183E6:
0001B574 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B57A 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B580 0828 0000 0022             		btst	#0,obStatus(a0)
0001B586 6600                       		bne.s	loc_183FE
0001B588 4468 0010                  		neg.w	obVelX(a0)
0001B58C                            
0001B58C                            loc_183FE:
0001B58C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B592 6400                       		bcc.s	Obj73_MakeLava
0001B594 6100 F468                  		bsr.w	BossMove
0001B598 5968 0012                  		subq.w	#4,obVelY(a0)
0001B59C                            
0001B59C                            Obj73_MakeLava:
0001B59C 5328 0034                  		subq.b	#1,$34(a0)
0001B5A0 6400                       		bcc.s	loc_1845C
0001B5A2 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001B5A8 6600                       		bne.s	loc_1844A
0001B5AA 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B5AE 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B5B4 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001B5BA 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B5C0 80FC 0050                  		divu.w	#$50,d0
0001B5C4 4840                       		swap	d0
0001B5C6 0640 1878                  		addi.w	#$1878,d0
0001B5CA 3340 0008                  		move.w	d0,obX(a1)
0001B5CE EE09                       		lsr.b	#7,d1
0001B5D0 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B5D6                            
0001B5D6                            loc_1844A:
0001B5D6 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001B5DC 0200 001F                  		andi.b	#$1F,d0
0001B5E0 0600 0040                  		addi.b	#$40,d0
0001B5E4 1140 0034                  		move.b	d0,$34(a0)
0001B5E8                            
0001B5E8                            loc_1845C:
0001B5E8 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5EE 6700                       		beq.s	loc_18474
0001B5F0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B5F6 6D00                       		blt.s	locret_1849C
0001B5F8 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B5FE 6000                       		bra.s	loc_18482
0001B600                            ; ===========================================================================
0001B600                            
0001B600                            loc_18474:
0001B600 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B606 6E00                       		bgt.s	locret_1849C
0001B608 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B60E                            
0001B60E                            loc_18482:
0001B60E 4268 0010                  		clr.w	obVelX(a0)
0001B612 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B618 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B61E 6400                       		bcc.s	loc_18498
0001B620 4468 0012                  		neg.w	obVelY(a0)
0001B624                            
0001B624                            loc_18498:
0001B624 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B628                            
0001B628                            locret_1849C:
0001B628 4E75                       		rts	
0001B62A                            ; ===========================================================================
0001B62A                            
0001B62A                            Obj73_MakeLava2:
0001B62A 6100 F3D2                  		bsr.w	BossMove
0001B62E 3028 0038                  		move.w	$38(a0),d0
0001B632 0440 022C                  		subi.w	#$22C,d0
0001B636 6E00                       		bgt.s	locret_184F4
0001B638 303C 022C                  		move.w	#$22C,d0
0001B63C 4A68 0012                  		tst.w	obVelY(a0)
0001B640 6700                       		beq.s	loc_184EA
0001B642 4268 0012                  		clr.w	obVelY(a0)
0001B646 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B64C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B652 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001B658 6600                       		bne.s	loc_184EA
0001B65A 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B660 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B666 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B66C 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B670 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B676                            
0001B676                            loc_184EA:
0001B676 5368 003C                  		subq.w	#1,$3C(a0)
0001B67A 6600                       		bne.s	locret_184F4
0001B67C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B680                            
0001B680                            locret_184F4:
0001B680 4E75                       		rts	
0001B682                            ; ===========================================================================
0001B682                            
0001B682                            loc_184F6:
0001B682 5368 003C                  		subq.w	#1,$3C(a0)
0001B686 6B00                       		bmi.s	loc_18500
0001B688 6000 F332                  		bra.w	BossDefeated
0001B68C                            ; ===========================================================================
0001B68C                            
0001B68C                            loc_18500:
0001B68C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B692 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B698 4268 0010                  		clr.w	obVelX(a0)
0001B69C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6A0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B6A6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B6AA 6600                       		bne.s	locret_1852A
0001B6AC 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B6B2 4268 0012                  		clr.w	obVelY(a0)
0001B6B6                            
0001B6B6                            locret_1852A:
0001B6B6 4E75                       		rts	
0001B6B8                            ; ===========================================================================
0001B6B8                            
0001B6B8                            loc_1852C:
0001B6B8 5268 003C                  		addq.w	#1,$3C(a0)
0001B6BC 6700                       		beq.s	loc_18544
0001B6BE 6A00                       		bpl.s	loc_1854E
0001B6C0 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B6C6 6400                       		bcc.s	loc_18544
0001B6C8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B6CE 6000                       		bra.s	loc_1857A
0001B6D0                            ; ===========================================================================
0001B6D0                            
0001B6D0                            loc_18544:
0001B6D0 4268 0012                  		clr.w	obVelY(a0)
0001B6D4 4268 003C                  		clr.w	$3C(a0)
0001B6D8 6000                       		bra.s	loc_1857A
0001B6DA                            ; ===========================================================================
0001B6DA                            
0001B6DA                            loc_1854E:
0001B6DA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B6E0 6500                       		bcs.s	loc_18566
0001B6E2 6700                       		beq.s	loc_1856C
0001B6E4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B6EA 6500                       		bcs.s	loc_1857A
0001B6EC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6F0 6000                       		bra.s	loc_1857A
0001B6F2                            ; ===========================================================================
0001B6F2                            
0001B6F2                            loc_18566:
0001B6F2 5168 0012                  		subq.w	#8,obVelY(a0)
0001B6F6 6000                       		bra.s	loc_1857A
0001B6F8                            ; ===========================================================================
0001B6F8                            
0001B6F8                            loc_1856C:
0001B6F8 4268 0012                  		clr.w	obVelY(a0)
0001B706                            
0001B706                            loc_1857A:
0001B706 6100 F2F6                  		bsr.w	BossMove
0001B70A 6000 FDC0                  		bra.w	loc_1833E
0001B70E                            ; ===========================================================================
0001B70E                            
0001B70E                            loc_18582:
0001B70E 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B714 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B71A 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B720 6400                       		bcc.s	loc_1859C
0001B722 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B726 6000                       		bra.s	loc_185A2
0001B728                            ; ===========================================================================
0001B728                            
0001B728                            loc_1859C:
0001B728 4A28 0001                  		tst.b	obRender(a0)
0001B72C 6A00                       		bpl.s	Obj73_ShipDel
0001B72E                            
0001B72E                            loc_185A2:
0001B72E 6100 F2CE                  		bsr.w	BossMove
0001B732 6000 FD98                  		bra.w	loc_1833E
0001B736                            ; ===========================================================================
0001B736                            
0001B736                            Obj73_ShipDel:
0001B736 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B73C                            ; ===========================================================================
0001B73C                            
0001B73C                            Obj73_FaceMain:	; Routine 4
0001B73C 7000                       		moveq	#0,d0
0001B73E 7201                       		moveq	#1,d1
0001B740 2268 0034                  		movea.l	$34(a0),a1
0001B744 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B748 5540                       		subq.w	#2,d0
0001B74A 6600                       		bne.s	loc_185D2
0001B74C 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B752 6700                       		beq.s	loc_185DA
0001B754 4A69 0012                  		tst.w	obVelY(a1)
0001B758 6600                       		bne.s	loc_185DA
0001B75A 7204                       		moveq	#4,d1
0001B75C 6000                       		bra.s	loc_185EE
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_185D2:
0001B75E 5500                       		subq.b	#2,d0
0001B760 6B00                       		bmi.s	loc_185DA
0001B762 720A                       		moveq	#$A,d1
0001B764 6000                       		bra.s	loc_185EE
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            loc_185DA:
0001B766 4A29 0020                  		tst.b	obColType(a1)
0001B76A 6600                       		bne.s	loc_185E4
0001B76C 7205                       		moveq	#5,d1
0001B76E 6000                       		bra.s	loc_185EE
0001B770                            ; ===========================================================================
0001B770                            
0001B770                            loc_185E4:
0001B770 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B776 6500                       		bcs.s	loc_185EE
0001B778 7204                       		moveq	#4,d1
0001B77A                            
0001B77A                            loc_185EE:
0001B77A 1141 001C                  		move.b	d1,obAnim(a0)
0001B77E 5900                       		subq.b	#4,d0
0001B780 6600                       		bne.s	loc_18602
0001B782 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B788 4A28 0001                  		tst.b	obRender(a0)
0001B78C 6A00                       		bpl.s	Obj73_FaceDel
0001B78E                            
0001B78E                            loc_18602:
0001B78E 6000                       		bra.s	Obj73_Display
0001B790                            ; ===========================================================================
0001B790                            
0001B790                            Obj73_FaceDel:
0001B790 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B796                            ; ===========================================================================
0001B796                            
0001B796                            Obj73_FlameMain:; Routine 6
0001B796 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B79C 2268 0034                  		movea.l	$34(a0),a1
0001B7A0 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B7A6 6D00                       		blt.s	loc_1862A
0001B7A8 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B7AE 4A28 0001                  		tst.b	obRender(a0)
0001B7B2 6A00                       		bpl.s	Obj73_FlameDel
0001B7B4 6000                       		bra.s	loc_18636
0001B7B6                            ; ===========================================================================
0001B7B6                            
0001B7B6                            loc_1862A:
0001B7B6 4A69 0010                  		tst.w	obVelX(a1)
0001B7BA 6700                       		beq.s	loc_18636
0001B7BC 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B7C2                            
0001B7C2                            loc_18636:
0001B7C2 6000                       		bra.s	Obj73_Display
0001B7C4                            ; ===========================================================================
0001B7C4                            
0001B7C4                            Obj73_FlameDel:
0001B7C4 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B7CA                            ; ===========================================================================
0001B7CA                            
0001B7CA                            Obj73_Display:
0001B7CA 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001B7D0 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001B7D6                            
0001B7D6                            loc_1864A:
0001B7D6 2268 0034                  		movea.l	$34(a0),a1
0001B7DA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B7E0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B7E6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B7EC 7003                       		moveq	#3,d0
0001B7EE C028 0022                  		and.b	obStatus(a0),d0
0001B7F2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B7F8 8128 0001                  		or.b	d0,obRender(a0)
0001B7FC 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001B802                            ; ===========================================================================
0001B802                            
0001B802                            Obj73_TubeMain:	; Routine 8
0001B802 2268 0034                  		movea.l	$34(a0),a1
0001B806 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B80C 6600                       		bne.s	loc_18688
0001B80E 4A28 0001                  		tst.b	obRender(a0)
0001B812 6A00                       		bpl.s	Obj73_TubeDel
0001B814                            
0001B814                            loc_18688:
0001B814 217C 0001 AF52 0004        		move.l	#Map_BossItems,obMap(a0)
0001B81C 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B822 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B828 60AC                       		bra.s	loc_1864A
0001B82A                            ; ===========================================================================
0001B82A                            
0001B82A                            Obj73_TubeDel:
0001B82A 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B82A 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B830                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B830                            ; ---------------------------------------------------------------------------
0001B830                            ; Object 74 - lava that	Eggman drops (MZ)
0001B830                            ; ---------------------------------------------------------------------------
0001B830                            
0001B830                            BossFire:
0001B830 7000                       		moveq	#0,d0
0001B832 1028 0024                  		move.b	obRoutine(a0),d0
0001B836 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B83A 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B83E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001B844                            ; ===========================================================================
0001B844 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B846 0000                       		dc.w Obj74_Action-Obj74_Index
0001B848 0000                       		dc.w loc_18886-Obj74_Index
0001B84A 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B84C                            ; ===========================================================================
0001B84C                            
0001B84C                            Obj74_Main:	; Routine 0
0001B84C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B852 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B858 217C 0000 D14A 0004        		move.l	#Map_Fire,obMap(a0)
0001B860 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B866 117C 0004 0001             		move.b	#4,obRender(a0)
0001B86C 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B872 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B878 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B87E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B882 4A28 0028                  		tst.b	obSubtype(a0)
0001B886 6600                       		bne.s	loc_1870A
0001B888 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B88E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B892 6000 0000                  		bra.w	loc_18886
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            loc_1870A:
0001B896 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B8A6                            
0001B8A6                            Obj74_Action:	; Routine 2
0001B8A6 7000                       		moveq	#0,d0
0001B8A8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B8AC 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B8B0 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B8B4 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001B8BA 43F9 0001 0414             		lea	(Ani_Fire).l,a1
0001B8C0 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001B8C6 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B8CC 6200                       		bhi.s	Obj74_Delete
0001B8CE 4E75                       		rts	
0001B8D0                            ; ===========================================================================
0001B8D0                            
0001B8D0                            Obj74_Delete:
0001B8D0 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001B8D6                            ; ===========================================================================
0001B8D6 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B8D8 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B8DA 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B8DC 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B8DE                            ; ===========================================================================
0001B8DE                            
0001B8DE                            Obj74_Drop:
0001B8DE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B8E4 5328 0029                  		subq.b	#1,$29(a0)
0001B8E8 6A00                       		bpl.s	locret_18780
0001B8EA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B8F0 4228 0028                  		clr.b	obSubtype(a0)
0001B8F4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B8FA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B900 6100 C5F6                  		bsr.w	ObjFloorDist
0001B904 4A41                       		tst.w	d1
0001B906 6A00                       		bpl.s	locret_18780
0001B908 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B90C                            
0001B90C                            locret_18780:
0001B90C 4E75                       		rts	
0001B90E                            ; ===========================================================================
0001B90E                            
0001B90E                            Obj74_MakeFlame:
0001B90E 5568 000C                  		subq.w	#2,obY(a0)
0001B912 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B918 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B91E 4268 0012                  		clr.w	obVelY(a0)
0001B922 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B928 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B92E 117C 0003 0029             		move.b	#3,$29(a0)
0001B934 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001B93A 6600                       		bne.s	loc_187CA
0001B93C 47D1                       		lea	(a1),a3
0001B93E 45D0                       		lea	(a0),a2
0001B940 7003                       		moveq	#3,d0
0001B942                            
0001B942                            Obj74_Loop:
0001B942 26DA                       		move.l	(a2)+,(a3)+
0001B944 26DA                       		move.l	(a2)+,(a3)+
0001B946 26DA                       		move.l	(a2)+,(a3)+
0001B948 26DA                       		move.l	(a2)+,(a3)+
0001B94A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B94E                            
0001B94E 4469 0010                  		neg.w	obVelX(a1)
0001B952 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B956                            
0001B956                            loc_187CA:
0001B956 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B95A 4E75                       		rts	
0001B95C                            
0001B95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B95C                            
0001B95C                            
0001B95C                            Obj74_Duplicate2:
0001B95C 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001B962 6600                       		bne.s	locret_187EE
0001B964 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B96A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B970 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B974 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B97A                            
0001B97A                            locret_187EE:
0001B97A 4E75                       		rts	
0001B97C                            ; End of function Obj74_Duplicate2
0001B97C                            
0001B97C                            ; ===========================================================================
0001B97C                            
0001B97C                            Obj74_Duplicate:
0001B97C 6100 C57A                  		bsr.w	ObjFloorDist
0001B980 4A41                       		tst.w	d1
0001B982 6A00                       		bpl.s	loc_18826
0001B984 3028 0008                  		move.w	obX(a0),d0
0001B988 0C40 1940                  		cmpi.w	#$1940,d0
0001B98C 6E00                       		bgt.s	loc_1882C
0001B98E 3228 0030                  		move.w	$30(a0),d1
0001B992 B240                       		cmp.w	d0,d1
0001B994 6700                       		beq.s	loc_1881E
0001B996 0240 0010                  		andi.w	#$10,d0
0001B99A 0241 0010                  		andi.w	#$10,d1
0001B99E B240                       		cmp.w	d0,d1
0001B9A0 6700                       		beq.s	loc_1881E
0001B9A2 61B8                       		bsr.s	Obj74_Duplicate2
0001B9A4 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B9AA                            
0001B9AA                            loc_1881E:
0001B9AA 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B9B0 4E75                       		rts	
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            loc_18826:
0001B9B2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9B6 4E75                       		rts	
0001B9B8                            ; ===========================================================================
0001B9B8                            
0001B9B8                            loc_1882C:
0001B9B8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B9BC 4E75                       		rts	
0001B9BE                            ; ===========================================================================
0001B9BE                            
0001B9BE                            Obj74_FallEdge:
0001B9BE 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B9C4 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B9CA 3028 0008                  		move.w	obX(a0),d0
0001B9CE 9068 0032                  		sub.w	$32(a0),d0
0001B9D2 6A00                       		bpl.s	loc_1884A
0001B9D4 4440                       		neg.w	d0
0001B9D6                            
0001B9D6                            loc_1884A:
0001B9D6 0C40 0012                  		cmpi.w	#$12,d0
0001B9DA 6600                       		bne.s	loc_18856
0001B9DC 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B9E2                            
0001B9E2                            loc_18856:
0001B9E2 6100 C514                  		bsr.w	ObjFloorDist
0001B9E6 4A41                       		tst.w	d1
0001B9E8 6A00                       		bpl.s	locret_1887E
0001B9EA 5328 0029                  		subq.b	#1,$29(a0)
0001B9EE 6700                       		beq.s	Obj74_Delete2
0001B9F0 4268 0012                  		clr.w	obVelY(a0)
0001B9F4 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B9FA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BA00 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BA06 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BA0A                            
0001BA0A                            locret_1887E:
0001BA0A 4E75                       		rts	
0001BA0C                            ; ===========================================================================
0001BA0C                            
0001BA0C                            Obj74_Delete2:
0001BA0C 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001BA12                            ; ===========================================================================
0001BA12                            
0001BA12                            loc_18886:	; Routine 4
0001BA12 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BA18 5328 0029                  		subq.b	#1,$29(a0)
0001BA1C 6600                       		bne.s	Obj74_Animate
0001BA1E 117C 0001 001C             		move.b	#1,obAnim(a0)
0001BA24 5968 000C                  		subq.w	#4,obY(a0)
0001BA28 4228 0020                  		clr.b	obColType(a0)
0001BA2C                            
0001BA2C                            Obj74_Animate:
0001BA2C 43F9 0001 0414             		lea	(Ani_Fire).l,a1
0001BA32 4EF9 0000 C4F8             		jmp	(AnimateSprite).l
0001BA38                            ; ===========================================================================
0001BA38                            
0001BA38                            Obj74_Delete3:	; Routine 6
0001BA38 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001BA38 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001BA3E                            
0001BA3E                            	Obj7A_Delete:
0001BA3E 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001BA44                            
0001BA44                            		include	"_incObj\7A Boss - Star Light.asm"
0001BA44                            ; ---------------------------------------------------------------------------
0001BA44                            ; Object 7A - Eggman (SLZ)
0001BA44                            ; ---------------------------------------------------------------------------
0001BA44                            
0001BA44                            BossStarLight:
0001BA44 7000                       		moveq	#0,d0
0001BA46 1028 0024                  		move.b	obRoutine(a0),d0
0001BA4A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BA4E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BA52                            ; ===========================================================================
0001BA52 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BA54 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BA56 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BA58 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BA5A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BA5C                            
0001BA5C 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BA60 0401 0200                  		dc.b 4,	1, $02, $00
0001BA64 0607 0200                  		dc.b 6,	7, $02, $00
0001BA68 0800 0180                  		dc.b 8,	0, $01, $80
0001BA6C                            ; ===========================================================================
0001BA6C                            
0001BA6C                            Obj7A_Main:
0001BA6C 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BA72 317C 0228 000C             		move.w	#$228,obY(a0)
0001BA78 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA7E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA84 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA8A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA90 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BA94 2248                       		movea.l	a0,a1
0001BA96 7203                       		moveq	#3,d1
0001BA98 6000                       		bra.s	Obj7A_LoadBoss
0001BA9A                            ; ===========================================================================
0001BA9A                            
0001BA9A                            Obj7A_Loop:
0001BA9A 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001BAA0 6600                       		bne.s	loc_1895C
0001BAA2 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BAA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BAAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BAB2                            
0001BAB2                            Obj7A_LoadBoss:
0001BAB2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BAB8 4229 0025                  		clr.b	ob2ndRout(a1)
0001BABC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BAC0 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BAC4 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BAC8 237C 0001 AE62 0004        		move.l	#Map_Eggman,obMap(a1)
0001BAD0 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BAD6 137C 0004 0001             		move.b	#4,obRender(a1)
0001BADC 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BAE2 2348 0034                  		move.l	a0,$34(a1)
0001BAE6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BAEA                            
0001BAEA                            loc_1895C:
0001BAEA 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BAEE 45E8 002A                  		lea	$2A(a0),a2
0001BAF2 705E                       		moveq	#$5E,d0
0001BAF4 723E                       		moveq	#$3E,d1
0001BAF6                            
0001BAF6                            loc_18968:
0001BAF6 B011                       		cmp.b	(a1),d0
0001BAF8 6600                       		bne.s	loc_18974
0001BAFA 4A29 0028                  		tst.b	obSubtype(a1)
0001BAFE 6700                       		beq.s	loc_18974
0001BB00 34C9                       		move.w	a1,(a2)+
0001BB02                            
0001BB02                            loc_18974:
0001BB02 D2FC 0040                  		adda.w	#$40,a1
0001BB06 51C9 FFEE                  		dbf	d1,loc_18968
0001BB0A                            
0001BB0A                            Obj7A_ShipMain:	; Routine 2
0001BB0A 7000                       		moveq	#0,d0
0001BB0C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BB10 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BB14 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BB18 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001BB1E 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001BB24 7003                       		moveq	#3,d0
0001BB26 C028 0022                  		and.b	obStatus(a0),d0
0001BB2A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BB30 8128 0001                  		or.b	d0,obRender(a0)
0001BB34 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001BB3A                            ; ===========================================================================
0001BB3A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BB3C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BB3E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BB40 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BB42 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BB44 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BB46                            ; ===========================================================================
0001BB46                            
0001BB46                            loc_189B8:
0001BB46 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BB4C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BB52 6400                       		bcc.s	loc_189CA
0001BB54 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB58                            
0001BB58                            loc_189CA:
0001BB58 6100 EEA4                  		bsr.w	BossMove
0001BB5C 1028 003F                  		move.b	$3F(a0),d0
0001BB60 5428 003F                  		addq.b	#2,$3F(a0)
0001BB64 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001BB6A EC40                       		asr.w	#6,d0
0001BB6C D068 0038                  		add.w	$38(a0),d0
0001BB70 3140 000C                  		move.w	d0,obY(a0)
0001BB74 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB7A 6000                       		bra.s	loc_189FE
0001BB7C                            ; ===========================================================================
0001BB7C                            
0001BB7C                            loc_189EE:
0001BB7C 6100 EE80                  		bsr.w	BossMove
0001BB80 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB86 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB8C                            
0001BB8C                            loc_189FE:
0001BB8C 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BB92 6400                       		bcc.s	locret_18A44
0001BB94 4A28 0022                  		tst.b	obStatus(a0)
0001BB98 6B00                       		bmi.s	loc_18A46
0001BB9A 4A28 0020                  		tst.b	obColType(a0)
0001BB9E 6600                       		bne.s	locret_18A44
0001BBA0 4A28 003E                  		tst.b	$3E(a0)
0001BBA4 6600                       		bne.s	loc_18A28
0001BBA6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BBB6                            
0001BBB6                            loc_18A28:
0001BBB6 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BBBA 7000                       		moveq	#0,d0
0001BBBC 4A51                       		tst.w	(a1)
0001BBBE 6600                       		bne.s	loc_18A36
0001BBC0 303C 0EEE                  		move.w	#cWhite,d0
0001BBC4                            
0001BBC4                            loc_18A36:
0001BBC4 3280                       		move.w	d0,(a1)
0001BBC6 5328 003E                  		subq.b	#1,$3E(a0)
0001BBCA 6600                       		bne.s	locret_18A44
0001BBCC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BBD2                            
0001BBD2                            locret_18A44:
0001BBD2 4E75                       		rts	
0001BBD4                            ; ===========================================================================
0001BBD4                            
0001BBD4                            loc_18A46:
0001BBD4 7064                       		moveq	#100,d0
0001BBD6 6100 0000                  		bsr.w	AddPoints
0001BBDA 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BBE0 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BBE6 4268 0010                  		clr.w	obVelX(a0)
0001BBEA 4E75                       		rts	
0001BBEC                            ; ===========================================================================
0001BBEC                            
0001BBEC                            loc_18A5E:
0001BBEC 3028 0030                  		move.w	$30(a0),d0
0001BBF0 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BBF6 0828 0000 0022             		btst	#0,obStatus(a0)
0001BBFC 6600                       		bne.s	loc_18A7C
0001BBFE 4468 0010                  		neg.w	obVelX(a0)
0001BC02 0C40 2008                  		cmpi.w	#$2008,d0
0001BC06 6E00                       		bgt.s	loc_18A88
0001BC08 6000                       		bra.s	loc_18A82
0001BC0A                            ; ===========================================================================
0001BC0A                            
0001BC0A                            loc_18A7C:
0001BC0A 0C40 2138                  		cmpi.w	#$2138,d0
0001BC0E 6D00                       		blt.s	loc_18A88
0001BC10                            
0001BC10                            loc_18A82:
0001BC10 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BC16                            
0001BC16                            loc_18A88:
0001BC16 3028 0008                  		move.w	8(a0),d0
0001BC1A 72FF                       		moveq	#-1,d1
0001BC1C 7402                       		moveq	#2,d2
0001BC1E 45E8 002A                  		lea	$2A(a0),a2
0001BC22 7828                       		moveq	#$28,d4
0001BC24 4A68 0010                  		tst.w	obVelX(a0)
0001BC28 6A00                       		bpl.s	loc_18A9E
0001BC2A 4444                       		neg.w	d4
0001BC2C                            
0001BC2C                            loc_18A9E:
0001BC2C 321A                       		move.w	(a2)+,d1
0001BC2E 2641                       		movea.l	d1,a3
0001BC30 082B 0003 0022             		btst	#3,obStatus(a3)
0001BC36 6600                       		bne.s	loc_18AB4
0001BC38 362B 0008                  		move.w	8(a3),d3
0001BC3C D644                       		add.w	d4,d3
0001BC3E 9640                       		sub.w	d0,d3
0001BC40 6700                       		beq.s	loc_18AC0
0001BC42                            
0001BC42                            loc_18AB4:
0001BC42 51CA FFE8                  		dbf	d2,loc_18A9E
0001BC46                            
0001BC46 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC4A 6000 FF0C                  		bra.w	loc_189CA
0001BC4E                            ; ===========================================================================
0001BC4E                            
0001BC4E                            loc_18AC0:
0001BC4E 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC52 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC56 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BC5C 6000 FEFA                  		bra.w	loc_189CA
0001BC60                            ; ===========================================================================
0001BC60                            
0001BC60                            Obj7A_MakeBall:
0001BC60 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BC66 6600                       		bne.s	loc_18B36
0001BC68 70FF                       		moveq	#-1,d0
0001BC6A 1028 0028                  		move.b	obSubtype(a0),d0
0001BC6E 4880                       		ext.w	d0
0001BC70 6B00                       		bmi.s	loc_18B40
0001BC72 5540                       		subq.w	#2,d0
0001BC74 4440                       		neg.w	d0
0001BC76 D040                       		add.w	d0,d0
0001BC78 43E8 002A                  		lea	$2A(a0),a1
0001BC7C 3031 0000                  		move.w	(a1,d0.w),d0
0001BC80 2440                       		movea.l	d0,a2
0001BC82 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BC86 723E                       		moveq	#$3E,d1
0001BC88                            
0001BC88                            loc_18AFA:
0001BC88 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BC8C 6700                       		beq.s	loc_18B40
0001BC8E D2FC 0040                  		adda.w	#$40,a1
0001BC92 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BC96                            
0001BC96 2F08                       		move.l	a0,-(sp)
0001BC98 41D2                       		lea	(a2),a0
0001BC9A 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001BCA0 205F                       		movea.l	(sp)+,a0
0001BCA2 6600                       		bne.s	loc_18B40
0001BCA4 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BCA8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BCAE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BCB4 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BCBA 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BCC0 234A 003C                  		move.l	a2,$3C(a1)
0001BCC4                            
0001BCC4                            loc_18B36:
0001BCC4 5328 003C                  		subq.b	#1,$3C(a0)
0001BCC8 6700                       		beq.s	loc_18B40
0001BCCA 6000 FEC0                  		bra.w	loc_189FE
0001BCCE                            ; ===========================================================================
0001BCCE                            
0001BCCE                            loc_18B40:
0001BCCE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BCD2 6000 FE84                  		bra.w	loc_189CA
0001BCD6                            ; ===========================================================================
0001BCD6                            
0001BCD6                            loc_18B48:
0001BCD6 5328 003C                  		subq.b	#1,$3C(a0)
0001BCDA 6B00                       		bmi.s	loc_18B52
0001BCDC 6000 ECDE                  		bra.w	BossDefeated
0001BCE0                            ; ===========================================================================
0001BCE0                            
0001BCE0                            loc_18B52:
0001BCE0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCE4 4268 0012                  		clr.w	obVelY(a0)
0001BCE8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCEE 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BCF4 4268 0010                  		clr.w	obVelX(a0)
0001BCF8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BCFE 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BD02 6600                       		bne.s	loc_18B7C
0001BD04 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BD0A                            
0001BD0A                            loc_18B7C:
0001BD0A 6000 FE80                  		bra.w	loc_189FE
0001BD0E                            ; ===========================================================================
0001BD0E                            
0001BD0E                            loc_18B80:
0001BD0E 5228 003C                  		addq.b	#1,$3C(a0)
0001BD12 6700                       		beq.s	loc_18B90
0001BD14 6A00                       		bpl.s	loc_18B96
0001BD16 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BD1C 6000                       		bra.s	loc_18BC2
0001BD1E                            ; ===========================================================================
0001BD1E                            
0001BD1E                            loc_18B90:
0001BD1E 4268 0012                  		clr.w	obVelY(a0)
0001BD22 6000                       		bra.s	loc_18BC2
0001BD24                            ; ===========================================================================
0001BD24                            
0001BD24                            loc_18B96:
0001BD24 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BD2A 6500                       		bcs.s	loc_18BAE
0001BD2C 6700                       		beq.s	loc_18BB4
0001BD2E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BD34 6500                       		bcs.s	loc_18BC2
0001BD36 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD3A 6000                       		bra.s	loc_18BC2
0001BD3C                            ; ===========================================================================
0001BD3C                            
0001BD3C                            loc_18BAE:
0001BD3C 5168 0012                  		subq.w	#8,obVelY(a0)
0001BD40 6000                       		bra.s	loc_18BC2
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            loc_18BB4:
0001BD42 4268 0012                          	clr.w    obVelY(a0)
0001BD46 4A38 FE2D                          	tst.b     (v_invinc).w
0001BD4A 6600                               	bne.s   @boss_invinc
0001BD4C                            
0001BD4C 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BD50 6000 0000                          	bra.w      @boss_play
0001BD54                            
0001BD54                            	@boss_invinc:
0001BD54 103C 0000                          	move.b #bgm_Invincible,d0
0001BD58                            
0001BD58                            	@boss_play:
0001BD58 4EB8 129A                          	jsr PlaySound
0001BD5C                            
0001BD5C                            loc_18BC2:
0001BD5C 6000 FE1E                  		bra.w	loc_189EE
0001BD60                            ; ===========================================================================
0001BD60                            
0001BD60                            loc_18BC6:
0001BD60 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD66 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD6C 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BD72 6400                       		bcc.s	loc_18BE0
0001BD74 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD78 6000                       		bra.s	loc_18BE8
0001BD7A                            ; ===========================================================================
0001BD7A                            
0001BD7A                            loc_18BE0:
0001BD7A 4A28 0001                  		tst.b	obRender(a0)
0001BD7E 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BD82                            
0001BD82                            loc_18BE8:
0001BD82 6100 EC7A                  		bsr.w	BossMove
0001BD86 6000 FDD0                  		bra.w	loc_189CA
0001BD8A                            ; ===========================================================================
0001BD8A                            
0001BD8A                            Obj7A_FaceMain:	; Routine 4
0001BD8A 7000                       		moveq	#0,d0
0001BD8C 7201                       		moveq	#1,d1
0001BD8E 2268 0034                  		movea.l	$34(a0),a1
0001BD92 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BD96 0C00 0006                  		cmpi.b	#6,d0
0001BD9A 6B00                       		bmi.s	loc_18C06
0001BD9C 720A                       		moveq	#$A,d1
0001BD9E 6000                       		bra.s	loc_18C1A
0001BDA0                            ; ===========================================================================
0001BDA0                            
0001BDA0                            loc_18C06:
0001BDA0 4A29 0020                  		tst.b	obColType(a1)
0001BDA4 6600                       		bne.s	loc_18C10
0001BDA6 7205                       		moveq	#5,d1
0001BDA8 6000                       		bra.s	loc_18C1A
0001BDAA                            ; ===========================================================================
0001BDAA                            
0001BDAA                            loc_18C10:
0001BDAA 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BDB0 6500                       		bcs.s	loc_18C1A
0001BDB2 7204                       		moveq	#4,d1
0001BDB4                            
0001BDB4                            loc_18C1A:
0001BDB4 1141 001C                  		move.b	d1,obAnim(a0)
0001BDB8 0C00 000A                  		cmpi.b	#$A,d0
0001BDBC 6600                       		bne.s	loc_18C32
0001BDBE 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BDC4 4A28 0001                  		tst.b	obRender(a0)
0001BDC8 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BDCC                            
0001BDCC                            loc_18C32:
0001BDCC 6000                       		bra.s	loc_18C6C
0001BDCE                            ; ===========================================================================
0001BDCE                            
0001BDCE                            Obj7A_FlameMain:; Routine 6
0001BDCE 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BDD4 2268 0034                  		movea.l	$34(a0),a1
0001BDD8 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BDDE 6600                       		bne.s	loc_18C56
0001BDE0 4A28 0001                  		tst.b	obRender(a0)
0001BDE4 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BDE8 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BDEE 6000                       		bra.s	loc_18C6C
0001BDF0                            ; ===========================================================================
0001BDF0                            
0001BDF0                            loc_18C56:
0001BDF0 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BDF6 6E00                       		bgt.s	loc_18C6C
0001BDF8 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BDFE 6D00                       		blt.s	loc_18C6C
0001BE00 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BE06                            
0001BE06                            loc_18C6C:
0001BE06 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001BE0C 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001BE12                            
0001BE12                            loc_18C78:
0001BE12 2268 0034                  		movea.l	$34(a0),a1
0001BE16 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BE1C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BE22 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BE28 7003                       		moveq	#3,d0
0001BE2A C028 0022                  		and.b	obStatus(a0),d0
0001BE2E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BE34 8128 0001                  		or.b	d0,obRender(a0)
0001BE38 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001BE3E                            ; ===========================================================================
0001BE3E                            
0001BE3E                            Obj7A_TubeMain:	; Routine 8
0001BE3E 2268 0034                  		movea.l	$34(a0),a1
0001BE42 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE48 6600                       		bne.s	loc_18CB8
0001BE4A 4A28 0001                  		tst.b	obRender(a0)
0001BE4E 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BE52                            
0001BE52                            loc_18CB8:
0001BE52 217C 0001 AF52 0004        		move.l	#Map_BossItems,obMap(a0)
0001BE5A 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BE60 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BE66 60AA                       		bra.s	loc_18C78
0001BE66 60AA                       		bra.s	loc_18C78
0001BE68                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BE68                            ; ---------------------------------------------------------------------------
0001BE68                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BE68                            ; ---------------------------------------------------------------------------
0001BE68                            
0001BE68                            BossSpikeball:
0001BE68 7000                       		moveq	#0,d0
0001BE6A 1028 0024                  		move.b	obRoutine(a0),d0
0001BE6E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BE72 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BE76 3028 0030                  		move.w	$30(a0),d0
0001BE7A 0240 FF80                  		andi.w	#$FF80,d0
0001BE7E 3238 F700                  		move.w	(v_screenposx).w,d1
0001BE82 0441 0080                  		subi.w	#$80,d1
0001BE86 0241 FF80                  		andi.w	#$FF80,d1
0001BE8A 9041                       		sub.w	d1,d0
0001BE8C 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BE90 0C40 0280                  		cmpi.w	#$280,d0
0001BE94 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BE98 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001BE9E                            ; ===========================================================================
0001BE9E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BEA0 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BEA2 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BEA4 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BEA6 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BEA8 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BEAA                            ; ===========================================================================
0001BEAA                            
0001BEAA                            Obj7B_Main:	; Routine 0
0001BEAA 217C 0001 39EE 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BEB2 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BEB8 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BEBE 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BEC4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BECA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BED0 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BED6 2268 003C                  		movea.l	$3C(a0),a1
0001BEDA 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BEE0 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BEE6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BEEC 3028 0008                  		move.w	obX(a0),d0
0001BEF0 B069 0008                  		cmp.w	obX(a1),d0
0001BEF4 6E00                       		bgt.s	loc_18D68
0001BEF6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEFC 117C 0002 003A             		move.b	#2,$3A(a0)
0001BF02                            
0001BF02                            loc_18D68:
0001BF02 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF06                            
0001BF06                            Obj7B_Fall:	; Routine 2
0001BF06 4EB9 0000 F3F2             		jsr	(ObjectFall).l
0001BF0C 2268 003C                  		movea.l	$3C(a0),a1
0001BF10 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF16 7000                       		moveq	#0,d0
0001BF18 1029 001A                  		move.b	obFrame(a1),d0
0001BF1C 3228 0008                  		move.w	8(a0),d1
0001BF20 9268 0030                  		sub.w	$30(a0),d1
0001BF24 6400                       		bcc.s	loc_18D8E
0001BF26 5440                       		addq.w	#2,d0
0001BF28                            
0001BF28                            loc_18D8E:
0001BF28 D040                       		add.w	d0,d0
0001BF2A 3228 0034                  		move.w	$34(a0),d1
0001BF2E D272 0000                  		add.w	(a2,d0.w),d1
0001BF32 B268 000C                  		cmp.w	obY(a0),d1
0001BF36 6E00                       		bgt.s	locret_18DC4
0001BF38 2268 003C                  		movea.l	$3C(a0),a1
0001BF3C 7202                       		moveq	#2,d1
0001BF3E 0828 0000 0022             		btst	#0,obStatus(a0)
0001BF44 6700                       		beq.s	loc_18DAE
0001BF46 7200                       		moveq	#0,d1
0001BF48                            
0001BF48                            loc_18DAE:
0001BF48 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BF4E 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BF54 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BF5A 6000 0000                  		bra.w	loc_18FA2
0001BF5E                            ; ===========================================================================
0001BF5E                            
0001BF5E                            locret_18DC4:
0001BF5E 4E75                       		rts	
0001BF60                            ; ===========================================================================
0001BF60                            
0001BF60                            loc_18DC6:	; Routine 4
0001BF60 2268 003C                  		movea.l	$3C(a0),a1
0001BF64 7000                       		moveq	#0,d0
0001BF66 1028 003A                  		move.b	$3A(a0),d0
0001BF6A 9029 003A                  		sub.b	$3A(a1),d0
0001BF6E 6700                       		beq.s	loc_18E2A
0001BF70 6400                       		bcc.s	loc_18DDA
0001BF72 4400                       		neg.b	d0
0001BF74                            
0001BF74                            loc_18DDA:
0001BF74 323C F7E8                  		move.w	#-$818,d1
0001BF78 343C FEEC                  		move.w	#-$114,d2
0001BF7C 0C00 0001                  		cmpi.b	#1,d0
0001BF80 6700                       		beq.s	loc_18E00
0001BF82 323C F6A0                  		move.w	#-$960,d1
0001BF86 343C FF0C                  		move.w	#-$F4,d2
0001BF8A 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BF90 6D00                       		blt.s	loc_18E00
0001BF92 323C F5E0                  		move.w	#-$A20,d1
0001BF96 343C FF80                  		move.w	#-$80,d2
0001BF9A                            
0001BF9A                            loc_18E00:
0001BF9A 3141 0012                  		move.w	d1,obVelY(a0)
0001BF9E 3142 0010                  		move.w	d2,obVelX(a0)
0001BFA2 3028 0008                  		move.w	obX(a0),d0
0001BFA6 9068 0030                  		sub.w	$30(a0),d0
0001BFAA 6400                       		bcc.s	loc_18E16
0001BFAC 4468 0010                  		neg.w	obVelX(a0)
0001BFB0                            
0001BFB0                            loc_18E16:
0001BFB0 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BFB6 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BFBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BFC0 6000 0000                  		bra.w	loc_18EAA
0001BFC4                            ; ===========================================================================
0001BFC4                            
0001BFC4                            loc_18E2A:
0001BFC4 45F9 0000 0000             		lea	(word_19018).l,a2
0001BFCA 7000                       		moveq	#0,d0
0001BFCC 1029 001A                  		move.b	obFrame(a1),d0
0001BFD0 343C 0028                  		move.w	#$28,d2
0001BFD4 3228 0008                  		move.w	obX(a0),d1
0001BFD8 9268 0030                  		sub.w	$30(a0),d1
0001BFDC 6400                       		bcc.s	loc_18E48
0001BFDE 4442                       		neg.w	d2
0001BFE0 5440                       		addq.w	#2,d0
0001BFE2                            
0001BFE2                            loc_18E48:
0001BFE2 D040                       		add.w	d0,d0
0001BFE4 3228 0034                  		move.w	$34(a0),d1
0001BFE8 D272 0000                  		add.w	(a2,d0.w),d1
0001BFEC 3141 000C                  		move.w	d1,obY(a0)
0001BFF0 D468 0030                  		add.w	$30(a0),d2
0001BFF4 3142 0008                  		move.w	d2,obX(a0)
0001BFF8 4268 000E                  		clr.w	obY+2(a0)
0001BFFC 4268 000A                  		clr.w	obX+2(a0)
0001C000 5368 0028                  		subq.w	#1,obSubtype(a0)
0001C004 6600                       		bne.s	loc_18E7A
0001C006 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C00C 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001C012 4E75                       		rts	
0001C014                            ; ===========================================================================
0001C014                            
0001C014                            loc_18E7A:
0001C014 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001C01A 6600                       		bne.s	loc_18E88
0001C01C 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001C022                            
0001C022                            loc_18E88:
0001C022 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001C028 6600                       		bne.s	loc_18E96
0001C02A 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001C030                            
0001C030                            loc_18E96:
0001C030 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001C034 6E00                       		bgt.s	locret_18EA8
0001C036 0868 0000 001A             		bchg	#0,obFrame(a0)
0001C03C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C042                            
0001C042                            locret_18EA8:
0001C042 4E75                       		rts	
0001C044                            ; ===========================================================================
0001C044                            
0001C044                            loc_18EAA:	; Routine 6
0001C044 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C048 707A                       		moveq	#id_BossStarLight,d0
0001C04A 7240                       		moveq	#$40,d1
0001C04C 743E                       		moveq	#$3E,d2
0001C04E                            
0001C04E                            loc_18EB4:
0001C04E B011                       		cmp.b	(a1),d0
0001C050 6700                       		beq.s	loc_18EC0
0001C052 D2C1                       		adda.w	d1,a1
0001C054 51CA FFF8                  		dbf	d2,loc_18EB4
0001C058                            
0001C058 6000                       		bra.s	loc_18F38
0001C05A                            ; ===========================================================================
0001C05A                            
0001C05A                            loc_18EC0:
0001C05A 3029 0008                  		move.w	obX(a1),d0
0001C05E 3229 000C                  		move.w	obY(a1),d1
0001C062 3428 0008                  		move.w	obX(a0),d2
0001C066 3628 000C                  		move.w	obY(a0),d3
0001C06A 45FA 0000                  		lea	byte_19022(pc),a2
0001C06E 47FA 0000                  		lea	byte_19026(pc),a3
0001C072 181A                       		move.b	(a2)+,d4
0001C074 4884                       		ext.w	d4
0001C076 D044                       		add.w	d4,d0
0001C078 181B                       		move.b	(a3)+,d4
0001C07A 4884                       		ext.w	d4
0001C07C D444                       		add.w	d4,d2
0001C07E B440                       		cmp.w	d0,d2
0001C080 6500                       		bcs.s	loc_18F38
0001C082 181A                       		move.b	(a2)+,d4
0001C084 4884                       		ext.w	d4
0001C086 D044                       		add.w	d4,d0
0001C088 181B                       		move.b	(a3)+,d4
0001C08A 4884                       		ext.w	d4
0001C08C D444                       		add.w	d4,d2
0001C08E B042                       		cmp.w	d2,d0
0001C090 6500                       		bcs.s	loc_18F38
0001C092 181A                       		move.b	(a2)+,d4
0001C094 4884                       		ext.w	d4
0001C096 D244                       		add.w	d4,d1
0001C098 181B                       		move.b	(a3)+,d4
0001C09A 4884                       		ext.w	d4
0001C09C D644                       		add.w	d4,d3
0001C09E B641                       		cmp.w	d1,d3
0001C0A0 6500                       		bcs.s	loc_18F38
0001C0A2 181A                       		move.b	(a2)+,d4
0001C0A4 4884                       		ext.w	d4
0001C0A6 D244                       		add.w	d4,d1
0001C0A8 181B                       		move.b	(a3)+,d4
0001C0AA 4884                       		ext.w	d4
0001C0AC D644                       		add.w	d4,d3
0001C0AE B243                       		cmp.w	d3,d1
0001C0B0 6500                       		bcs.s	loc_18F38
0001C0B2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C0B6 4268 0028                  		clr.w	obSubtype(a0)
0001C0BA 4229 0020                  		clr.b	obColType(a1)
0001C0BE 5329 0021                  		subq.b	#1,obColProp(a1)
0001C0C2 6600                       		bne.s	loc_18F38
0001C0C4 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C0CA 4268 0010                  		clr.w	obVelX(a0)
0001C0CE 4268 0012                  		clr.w	obVelY(a0)
0001C0D2                            
0001C0D2                            loc_18F38:
0001C0D2 4A68 0012                  		tst.w	obVelY(a0)
0001C0D6 6A00                       		bpl.s	loc_18F5C
0001C0D8 4EB9 0000 F3F2             		jsr	(ObjectFall).l
0001C0DE 3028 0034                  		move.w	$34(a0),d0
0001C0E2 0440 002F                  		subi.w	#$2F,d0
0001C0E6 B068 000C                  		cmp.w	obY(a0),d0
0001C0EA 6E00                       		bgt.s	loc_18F58
0001C0EC 4EB9 0000 F3F2             		jsr	(ObjectFall).l
0001C0F2                            
0001C0F2                            loc_18F58:
0001C0F2 6000 FF20                  		bra.w	loc_18E7A
0001C0F6                            ; ===========================================================================
0001C0F6                            
0001C0F6                            loc_18F5C:
0001C0F6 4EB9 0000 F3F2             		jsr	(ObjectFall).l
0001C0FC 2268 003C                  		movea.l	$3C(a0),a1
0001C100 45F9 0000 0000             		lea	(word_19018).l,a2
0001C106 7000                       		moveq	#0,d0
0001C108 1029 001A                  		move.b	obFrame(a1),d0
0001C10C 3228 0008                  		move.w	obX(a0),d1
0001C110 9268 0030                  		sub.w	$30(a0),d1
0001C114 6400                       		bcc.s	loc_18F7E
0001C116 5440                       		addq.w	#2,d0
0001C118                            
0001C118                            loc_18F7E:
0001C118 D040                       		add.w	d0,d0
0001C11A 3228 0034                  		move.w	$34(a0),d1
0001C11E D272 0000                  		add.w	(a2,d0.w),d1
0001C122 B268 000C                  		cmp.w	obY(a0),d1
0001C126 6ECA                       		bgt.s	loc_18F58
0001C128 2268 003C                  		movea.l	$3C(a0),a1
0001C12C 7202                       		moveq	#2,d1
0001C12E 4A68 0010                  		tst.w	obVelX(a0)
0001C132 6B00                       		bmi.s	loc_18F9C
0001C134 7200                       		moveq	#0,d1
0001C136                            
0001C136                            loc_18F9C:
0001C136 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C13C                            
0001C13C                            loc_18FA2:
0001C13C 1341 003A                  		move.b	d1,$3A(a1)
0001C140 1141 003A                  		move.b	d1,$3A(a0)
0001C144 B229 001A                  		cmp.b	obFrame(a1),d1
0001C148 6700                       		beq.s	loc_19008
0001C14A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C150 6700                       		beq.s	loc_19008
0001C152 4229 0025                  		clr.b	ob2ndRout(a1)
0001C156 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C15C 45F8 D000                  		lea	(v_objspace).w,a2
0001C160 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C166 446A 0012                  		neg.w	obVelY(a2)
0001C16A 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C170 6600                       		bne.s	loc_18FDC
0001C172 E0EA 0012                  		asr	obVelY(a2)
0001C176                            
0001C176                            loc_18FDC:
0001C176 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C17C 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C182 422A 003C                  		clr.b	$3C(a2)
0001C186 2F08                       		move.l	a0,-(sp)
0001C188 41D2                       		lea	(a2),a0
0001C18A 4EB9 0001 5DA0             		jsr	(Sonic_ChkRoll).l
0001C190 205F                       		movea.l	(sp)+,a0
0001C192 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C1A2                            
0001C1A2                            loc_19008:
0001C1A2 4268 0010                  		clr.w	obVelX(a0)
0001C1A6 4268 0012                  		clr.w	obVelY(a0)
0001C1AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C1AE 6000 FE64                  		bra.w	loc_18E7A
0001C1B2                            ; ===========================================================================
0001C1B2 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C1BC                            		even
0001C1BC E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C1C0                            		even
0001C1C0 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C1C4                            		even
0001C1C4                            ; ===========================================================================
0001C1C4                            
0001C1C4                            Obj7B_Explode:	; Routine 8
0001C1C4 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C1C8 4228 0024                  		clr.b	obRoutine(a0)
0001C1CC 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C1D2 6700                       		beq.s	Obj7B_MakeFrag
0001C1D4 4E75                       		rts	
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            Obj7B_MakeFrag:
0001C1D6 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C1DC 7203                       		moveq	#3,d1
0001C1DE 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C1E2                            
0001C1E2                            Obj7B_Loop:
0001C1E2 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001C1E8 6600                       		bne.s	loc_1909A
0001C1EA 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C1EE 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C1F4 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C1FC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C202 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C208 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C20E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C214 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C218 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C21C 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C222 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C228 08E9 0007 0001             		bset	#7,obRender(a1)
0001C22E 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C234                            
0001C234                            loc_1909A:
0001C234 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C238                            
0001C238 4E75                       		rts	
0001C23A                            ; ===========================================================================
0001C23A FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C23E FF60 FDC0                  		dc.w -$A0, -$240
0001C242 0100 FCC0                  		dc.w $100, -$340
0001C246 00A0 FDC0                  		dc.w $A0, -$240
0001C24A                            ; ===========================================================================
0001C24A                            
0001C24A                            Obj7B_MoveFrag:	; Routine $A
0001C24A 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001C250 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C256 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C25C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C262 7004                       		moveq	#4,d0
0001C264 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C268 E448                       		lsr.w	#2,d0
0001C26A 1140 001A                  		move.b	d0,obFrame(a0)
0001C26E 4A28 0001                  		tst.b	1(a0)
0001C272 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C276 4E75                       		rts	
0001C276 4E75                       		rts	
0001C278                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C278                            ; ---------------------------------------------------------------------------
0001C278                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C278                            ; ---------------------------------------------------------------------------
0001C278                            Map_BSBall_internal:
0001C278 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C27A 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C27C 01                         @fireball1:	dc.b 1
0001C27D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C282 01                         @fireball2:	dc.b 1
0001C283 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C288                            		even
0001C288                            		even
0001C288                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C288                            ; ---------------------------------------------------------------------------
0001C288                            ; Object 75 - Eggman (SYZ)
0001C288                            ; ---------------------------------------------------------------------------
0001C288                            
0001C288                            BossSpringYard:
0001C288 7000                       		moveq	#0,d0
0001C28A 1028 0024                  		move.b	obRoutine(a0),d0
0001C28E 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C292 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C296                            ; ===========================================================================
0001C296 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C298 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C29A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C29C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C29E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C2A0                            
0001C2A0 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C2A4 0401 0280                  		dc.b 4,	1, $02, $80
0001C2A8 0607 0280                  		dc.b 6,	7, $02, $80
0001C2AC 0800 0280                  		dc.b 8,	0, $02, $80
0001C2B0                            ; ===========================================================================
0001C2B0                            
0001C2B0                            Obj75_Main:	; Routine 0
0001C2B0 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C2B6 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C2BC 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C2C2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C2C8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C2CE 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C2D4 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C2D8 2248                       		movea.l	a0,a1
0001C2DA 7203                       		moveq	#3,d1
0001C2DC 6000                       		bra.s	Obj75_LoadBoss
0001C2DE                            ; ===========================================================================
0001C2DE                            
0001C2DE                            Obj75_Loop:
0001C2DE 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001C2E4 6600                       		bne.s	Obj75_ShipMain
0001C2E6 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C2EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C2F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C2F6                            
0001C2F6                            Obj75_LoadBoss:
0001C2F6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C2FC 4229 0025                  		clr.b	ob2ndRout(a1)
0001C300 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C304 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C308 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C30C 237C 0001 AE62 0004        		move.l	#Map_Eggman,obMap(a1)
0001C314 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C31A 137C 0004 0001             		move.b	#4,obRender(a1)
0001C320 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C326 2348 0034                  		move.l	a0,$34(a1)
0001C32A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C32E                            
0001C32E                            Obj75_ShipMain:	; Routine 2
0001C32E 7000                       		moveq	#0,d0
0001C330 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C334 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C338 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C33C 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001C342 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001C348 7003                       		moveq	#3,d0
0001C34A C028 0022                  		and.b	obStatus(a0),d0
0001C34E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C354 8128 0001                  		or.b	d0,obRender(a0)
0001C358 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001C35E                            ; ===========================================================================
0001C35E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C362 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C366 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C36A                            ; ===========================================================================
0001C36A                            
0001C36A                            loc_191CC:
0001C36A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C370 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C376 6400                       		bcc.s	loc_191DE
0001C378 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C37C                            
0001C37C                            loc_191DE:
0001C37C 1028 003F                  		move.b	$3F(a0),d0
0001C380 5428 003F                  		addq.b	#2,$3F(a0)
0001C384 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001C38A E440                       		asr.w	#2,d0
0001C38C 3140 0012                  		move.w	d0,obVelY(a0)
0001C390                            
0001C390                            loc_191F2:
0001C390 6100 E66C                  		bsr.w	BossMove
0001C394 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C39A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C3A0                            
0001C3A0                            loc_19202:
0001C3A0 3028 0008                  		move.w	8(a0),d0
0001C3A4 0440 2C00                  		subi.w	#$2C00,d0
0001C3A8 EA48                       		lsr.w	#5,d0
0001C3AA 1140 0034                  		move.b	d0,$34(a0)
0001C3AE 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C3B4 6400                       		bcc.s	locret_19256
0001C3B6 4A28 0022                  		tst.b	obStatus(a0)
0001C3BA 6B00                       		bmi.s	loc_19258
0001C3BC 4A28 0020                  		tst.b	obColType(a0)
0001C3C0 6600                       		bne.s	locret_19256
0001C3C2 4A28 003E                  		tst.b	$3E(a0)
0001C3C6 6600                       		bne.s	loc_1923A
0001C3C8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C3D8                            
0001C3D8                            loc_1923A:
0001C3D8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C3DC 7000                       		moveq	#0,d0
0001C3DE 4A51                       		tst.w	(a1)
0001C3E0 6600                       		bne.s	loc_19248
0001C3E2 303C 0EEE                  		move.w	#cWhite,d0
0001C3E6                            
0001C3E6                            loc_19248:
0001C3E6 3280                       		move.w	d0,(a1)
0001C3E8 5328 003E                  		subq.b	#1,$3E(a0)
0001C3EC 6600                       		bne.s	locret_19256
0001C3EE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C3F4                            
0001C3F4                            locret_19256:
0001C3F4 4E75                       		rts	
0001C3F6                            ; ===========================================================================
0001C3F6                            
0001C3F6                            loc_19258:
0001C3F6 7064                       		moveq	#100,d0
0001C3F8 6100 0000                  		bsr.w	AddPoints
0001C3FC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C402 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C408 4268 0010                  		clr.w	obVelX(a0)
0001C40C 4E75                       		rts	
0001C40E                            ; ===========================================================================
0001C40E                            
0001C40E                            loc_19270:
0001C40E 3028 0030                  		move.w	$30(a0),d0
0001C412 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C418 0828 0000 0022             		btst	#0,obStatus(a0)
0001C41E 6600                       		bne.s	loc_1928E
0001C420 4468 0010                  		neg.w	obVelX(a0)
0001C424 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C428 6E00                       		bgt.s	loc_1929E
0001C42A 6000                       		bra.s	loc_19294
0001C42C                            ; ===========================================================================
0001C42C                            
0001C42C                            loc_1928E:
0001C42C 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C430 6D00                       		blt.s	loc_1929E
0001C432                            
0001C432                            loc_19294:
0001C432 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C438 4228 003D                  		clr.b	$3D(a0)
0001C43C                            
0001C43C                            loc_1929E:
0001C43C 0440 2C10                  		subi.w	#$2C10,d0
0001C440 0240 001F                  		andi.w	#$1F,d0
0001C444 0440 001F                  		subi.w	#$1F,d0
0001C448 6A00                       		bpl.s	loc_192AE
0001C44A 4440                       		neg.w	d0
0001C44C                            
0001C44C                            loc_192AE:
0001C44C 5340                       		subq.w	#1,d0
0001C44E 6E00                       		bgt.s	loc_192E8
0001C450 4A28 003D                  		tst.b	$3D(a0)
0001C454 6600                       		bne.s	loc_192E8
0001C456 3238 D008                  		move.w	(v_player+obX).w,d1
0001C45A 0441 2C00                  		subi.w	#$2C00,d1
0001C45E EA41                       		asr.w	#5,d1
0001C460 B228 0034                  		cmp.b	$34(a0),d1
0001C464 6600                       		bne.s	loc_192E8
0001C466 7000                       		moveq	#0,d0
0001C468 1028 0034                  		move.b	$34(a0),d0
0001C46C EB40                       		asl.w	#5,d0
0001C46E 0640 2C10                  		addi.w	#$2C10,d0
0001C472 3140 0030                  		move.w	d0,$30(a0)
0001C476 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C47A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C47E 4268 0028                  		clr.w	obSubtype(a0)
0001C482 4268 0010                  		clr.w	obVelX(a0)
0001C486                            
0001C486                            loc_192E8:
0001C486 6000 FEF4                  		bra.w	loc_191DE
0001C48A                            ; ===========================================================================
0001C48A                            
0001C48A                            loc_192EC:
0001C48A 7000                       		moveq	#0,d0
0001C48C 1028 0028                  		move.b	obSubtype(a0),d0
0001C490 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C494 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C498                            ; ===========================================================================
0001C498 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C49A 0000                       		dc.w loc_19348-off_192FA
0001C49C 0000                       		dc.w loc_1938E-off_192FA
0001C49E 0000                       		dc.w loc_193D0-off_192FA
0001C4A0                            ; ===========================================================================
0001C4A0                            
0001C4A0                            loc_19302:
0001C4A0 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C4A6 3028 0038                  		move.w	$38(a0),d0
0001C4AA 0C40 0556                  		cmpi.w	#$556,d0
0001C4AE 6500                       		bcs.s	loc_19344
0001C4B0 317C 0556 0038             		move.w	#$556,$38(a0)
0001C4B6 4268 003C                  		clr.w	$3C(a0)
0001C4BA 70FF                       		moveq	#-1,d0
0001C4BC 3028 0036                  		move.w	$36(a0),d0
0001C4C0 6700                       		beq.s	loc_1933C
0001C4C2 2240                       		movea.l	d0,a1
0001C4C4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C4CA 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C4D0 2348 0034                  		move.l	a0,$34(a1)
0001C4D4 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C4DA                            
0001C4DA                            loc_1933C:
0001C4DA 4268 0012                  		clr.w	obVelY(a0)
0001C4DE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4E2                            
0001C4E2                            loc_19344:
0001C4E2 6000 FEAC                  		bra.w	loc_191F2
0001C4E6                            ; ===========================================================================
0001C4E6                            
0001C4E6                            loc_19348:
0001C4E6 5368 003C                  		subq.w	#1,$3C(a0)
0001C4EA 6A00                       		bpl.s	loc_19366
0001C4EC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4F0 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C4F6 4A68 0036                  		tst.w	$36(a0)
0001C4FA 6600                       		bne.s	loc_19362
0001C4FC E0E8 0012                  		asr	obVelY(a0)
0001C500                            
0001C500                            loc_19362:
0001C500 7000                       		moveq	#0,d0
0001C502 6000                       		bra.s	loc_1937C
0001C504                            ; ===========================================================================
0001C504                            
0001C504                            loc_19366:
0001C504 7000                       		moveq	#0,d0
0001C506 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C50C 6E00                       		bgt.s	loc_1937C
0001C50E 7002                       		moveq	#2,d0
0001C510 0828 0001 003D             		btst	#1,$3D(a0)
0001C516 6700                       		beq.s	loc_1937C
0001C518 4440                       		neg.w	d0
0001C51A                            
0001C51A                            loc_1937C:
0001C51A D068 0038                  		add.w	$38(a0),d0
0001C51E 3140 000C                  		move.w	d0,obY(a0)
0001C522 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C528 6000 FE76                  		bra.w	loc_19202
0001C52C                            ; ===========================================================================
0001C52C                            
0001C52C                            loc_1938E:
0001C52C 303C 04DA                  		move.w	#$4DA,d0
0001C530 4A68 0036                  		tst.w	$36(a0)
0001C534 6700                       		beq.s	loc_1939C
0001C536 0440 0018                  		subi.w	#$18,d0
0001C53A                            
0001C53A                            loc_1939C:
0001C53A B068 0038                  		cmp.w	$38(a0),d0
0001C53E 6D00                       		blt.s	loc_193BE
0001C540 317C 0008 003C             		move.w	#8,$3C(a0)
0001C546 4A68 0036                  		tst.w	$36(a0)
0001C54A 6700                       		beq.s	loc_193B4
0001C54C 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C552                            
0001C552                            loc_193B4:
0001C552 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C556 4268 0012                  		clr.w	obVelY(a0)
0001C55A 6000                       		bra.s	loc_193CC
0001C55C                            ; ===========================================================================
0001C55C                            
0001C55C                            loc_193BE:
0001C55C 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C562 6C00                       		bge.s	loc_193CC
0001C564 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C56A                            
0001C56A                            loc_193CC:
0001C56A 6000 FE24                  		bra.w	loc_191F2
0001C56E                            ; ===========================================================================
0001C56E                            
0001C56E                            loc_193D0:
0001C56E 5368 003C                  		subq.w	#1,$3C(a0)
0001C572 6E00                       		bgt.s	loc_19406
0001C574 6B00                       		bmi.s	loc_193EE
0001C576 70FF                       		moveq	#-1,d0
0001C578 3028 0036                  		move.w	$36(a0),d0
0001C57C 6700                       		beq.s	loc_193E8
0001C57E 2240                       		movea.l	d0,a1
0001C580 137C 000A 0029             		move.b	#$A,$29(a1)
0001C586                            
0001C586                            loc_193E8:
0001C586 4268 0036                  		clr.w	$36(a0)
0001C58A 6000                       		bra.s	loc_19406
0001C58C                            ; ===========================================================================
0001C58C                            
0001C58C                            loc_193EE:
0001C58C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C592 6600                       		bne.s	loc_19406
0001C594 4228 0029                  		clr.b	$29(a0)
0001C598 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C59C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C5A2 6000                       		bra.s	loc_19446
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            loc_19406:
0001C5A4 7001                       		moveq	#1,d0
0001C5A6 4A68 0036                  		tst.w	$36(a0)
0001C5AA 6700                       		beq.s	loc_19410
0001C5AC 7002                       		moveq	#2,d0
0001C5AE                            
0001C5AE                            loc_19410:
0001C5AE 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C5B4 6700                       		beq.s	loc_19424
0001C5B6 6D00                       		blt.s	loc_1941C
0001C5B8 4440                       		neg.w	d0
0001C5BA                            
0001C5BA                            loc_1941C:
0001C5BA 4A68 0036                  		tst.w	$36(a0)
0001C5BE D168 0038                  		add.w	d0,$38(a0)
0001C5C2                            
0001C5C2                            loc_19424:
0001C5C2 7000                       		moveq	#0,d0
0001C5C4 4A68 0036                  		tst.w	$36(a0)
0001C5C8 6700                       		beq.s	loc_19438
0001C5CA 7002                       		moveq	#2,d0
0001C5CC 0828 0000 003D             		btst	#0,$3D(a0)
0001C5D2 6700                       		beq.s	loc_19438
0001C5D4 4440                       		neg.w	d0
0001C5D6                            
0001C5D6                            loc_19438:
0001C5D6 D068 0038                  		add.w	$38(a0),d0
0001C5DA 3140 000C                  		move.w	d0,obY(a0)
0001C5DE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C5E4                            
0001C5E4                            loc_19446:
0001C5E4 6000 FDBA                  		bra.w	loc_19202
0001C5E8                            
0001C5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5E8                            
0001C5E8                            
0001C5E8                            Obj75_FindBlocks:
0001C5E8 4268 0036                  		clr.w	$36(a0)
0001C5EC 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C5F0 703E                       		moveq	#$3E,d0
0001C5F2 7276                       		moveq	#$76,d1
0001C5F4 1428 0034                  		move.b	$34(a0),d2
0001C5F8                            
0001C5F8                            Obj75_FindLoop:
0001C5F8 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C5FA 6600                       		bne.s	loc_1946A	; if not, branch
0001C5FC B429 0028                  		cmp.b	obSubtype(a1),d2
0001C600 6600                       		bne.s	loc_1946A
0001C602 3149 0036                  		move.w	a1,$36(a0)
0001C606 6000                       		bra.s	locret_19472
0001C608                            ; ===========================================================================
0001C608                            
0001C608                            loc_1946A:
0001C608 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C60C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C610                            
0001C610                            locret_19472:
0001C610 4E75                       		rts	
0001C612                            ; End of function Obj75_FindBlocks
0001C612                            
0001C612                            ; ===========================================================================
0001C612                            
0001C612                            loc_19474:
0001C612 5368 003C                  		subq.w	#1,$3C(a0)
0001C616 6B00                       		bmi.s	loc_1947E
0001C618 6000 E3A2                  		bra.w	BossDefeated
0001C61C                            ; ===========================================================================
0001C61C                            
0001C61C                            loc_1947E:
0001C61C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C620 4268 0012                  		clr.w	obVelY(a0)
0001C624 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C62A 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C630 4268 0010                  		clr.w	obVelX(a0)
0001C634 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C63A 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C63E 6600                       		bne.s	loc_194A8
0001C640 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C646                            
0001C646                            loc_194A8:
0001C646 6000 FD58                  		bra.w	loc_19202
0001C64A                            ; ===========================================================================
0001C64A                            
0001C64A                            loc_194AC:
0001C64A 5268 003C                  		addq.w	#1,$3C(a0)
0001C64E 6700                       		beq.s	loc_194BC
0001C650 6A00                       		bpl.s	loc_194C2
0001C652 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C658 6000                       		bra.s	loc_194EE
0001C65A                            ; ===========================================================================
0001C65A                            
0001C65A                            loc_194BC:
0001C65A 4268 0012                  		clr.w	obVelY(a0)
0001C65E 6000                       		bra.s	loc_194EE
0001C660                            ; ===========================================================================
0001C660                            
0001C660                            loc_194C2:
0001C660 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C666 6500                       		bcs.s	loc_194DA
0001C668 6700                       		beq.s	loc_194E0
0001C66A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C670 6500                       		bcs.s	loc_194EE
0001C672 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C676 6000                       		bra.s	loc_194EE
0001C678                            ; ===========================================================================
0001C678                            
0001C678                            loc_194DA:
0001C678 5168 0012                  		subq.w	#8,obVelY(a0)
0001C67C 6000                       		bra.s	loc_194EE
0001C67E                            ; ===========================================================================
0001C67E                            
0001C67E                            loc_194E0:
0001C67E 4268 0012                  		clr.w    obVelY(a0)
0001C682 4A38 FE2D                          	tst.b     (v_invinc).w
0001C686 6600                               	bne.s   @boss_invinc
0001C688                            
0001C688 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C68C 6000 0000                          	bra.w      @boss_play
0001C690                            
0001C690                            @boss_invinc:
0001C690 103C 0000                          	move.b #bgm_Invincible,d0
0001C694                            
0001C694                            @boss_play:
0001C694 4EB8 129A                          	jsr PlaySound
0001C698                            
0001C698                            loc_194EE:
0001C698 6000 FCF6                  		bra.w	loc_191F2
0001C69C                            ; ===========================================================================
0001C69C                            
0001C69C                            loc_194F2:
0001C69C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C6A2 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C6A8 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C6AE 6400                       		bcc.s	loc_1950C
0001C6B0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C6B4 6000                       		bra.s	loc_19512
0001C6B6                            ; ===========================================================================
0001C6B6                            
0001C6B6                            loc_1950C:
0001C6B6 4A28 0001                  		tst.b	obRender(a0)
0001C6BA 6A00                       		bpl.s	Obj75_ShipDelete
0001C6BC                            
0001C6BC                            loc_19512:
0001C6BC 6100 E340                  		bsr.w	BossMove
0001C6C0 6000 FCBA                  		bra.w	loc_191DE
0001C6C4                            ; ===========================================================================
0001C6C4                            
0001C6C4                            Obj75_ShipDelete:
0001C6C4 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C6CA                            ; ===========================================================================
0001C6CA                            
0001C6CA                            Obj75_FaceMain:	; Routine 4
0001C6CA 7201                       		moveq	#1,d1
0001C6CC 2268 0034                  		movea.l	$34(a0),a1
0001C6D0 7000                       		moveq	#0,d0
0001C6D2 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C6D6 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C6DA 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C6DE 1141 001C                  		move.b	d1,obAnim(a0)
0001C6E2 1010                       		move.b	(a0),d0
0001C6E4 B011                       		cmp.b	(a1),d0
0001C6E6 6600                       		bne.s	Obj75_FaceDelete
0001C6E8 6000                       		bra.s	loc_195BE
0001C6EA                            ; ===========================================================================
0001C6EA                            
0001C6EA                            Obj75_FaceDelete:
0001C6EA 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C6F0                            ; ===========================================================================
0001C6F0 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C6F4 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C6F8 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C6FC                            ; ===========================================================================
0001C6FC                            
0001C6FC                            loc_19552:
0001C6FC 720A                       		moveq	#$A,d1
0001C6FE 4E75                       		rts	
0001C700                            ; ===========================================================================
0001C700                            
0001C700                            loc_19556:
0001C700 7206                       		moveq	#6,d1
0001C702 4E75                       		rts	
0001C704                            ; ===========================================================================
0001C704                            
0001C704                            loc_1955A:
0001C704 7000                       		moveq	#0,d0
0001C706 1029 0028                  		move.b	obSubtype(a1),d0
0001C70A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C70E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C712                            ; ===========================================================================
0001C712 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C716 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C71A                            ; ===========================================================================
0001C71A                            
0001C71A                            loc_19570:
0001C71A 6000                       		bra.s	loc_19574
0001C71C                            ; ===========================================================================
0001C71C                            
0001C71C                            loc_19572:
0001C71C 7206                       		moveq	#6,d1
0001C71E                            
0001C71E                            loc_19574:
0001C71E 4A29 0020                  		tst.b	obColType(a1)
0001C722 6600                       		bne.s	loc_1957E
0001C724 7205                       		moveq	#5,d1
0001C726 4E75                       		rts	
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            loc_1957E:
0001C728 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C72E 6500                       		bcs.s	locret_19588
0001C730 7204                       		moveq	#4,d1
0001C732                            
0001C732                            locret_19588:
0001C732 4E75                       		rts	
0001C734                            ; ===========================================================================
0001C734                            
0001C734                            Obj75_FlameMain:; Routine 6
0001C734 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C73A 2268 0034                  		movea.l	$34(a0),a1
0001C73E 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C744 6600                       		bne.s	loc_195AA
0001C746 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C74C 4A28 0001                  		tst.b	1(a0)
0001C750 6A00                       		bpl.s	Obj75_FlameDelete
0001C752 6000                       		bra.s	loc_195B6
0001C754                            ; ===========================================================================
0001C754                            
0001C754                            loc_195AA:
0001C754 4A69 0010                  		tst.w	obVelX(a1)
0001C758 6700                       		beq.s	loc_195B6
0001C75A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C760                            
0001C760                            loc_195B6:
0001C760 6000                       		bra.s	loc_195BE
0001C762                            ; ===========================================================================
0001C762                            
0001C762                            Obj75_FlameDelete:
0001C762 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C768                            ; ===========================================================================
0001C768                            
0001C768                            loc_195BE:
0001C768 43F9 0001 AE12             		lea	(Ani_Eggman).l,a1
0001C76E 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001C774 2268 0034                  		movea.l	$34(a0),a1
0001C778 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C77E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C784                            
0001C784                            loc_195DA:
0001C784 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C78A 7003                       		moveq	#3,d0
0001C78C C028 0022                  		and.b	obStatus(a0),d0
0001C790 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C796 8128 0001                  		or.b	d0,obRender(a0)
0001C79A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001C7A0                            ; ===========================================================================
0001C7A0                            
0001C7A0                            Obj75_SpikeMain:; Routine 8
0001C7A0 217C 0001 AF52 0004        		move.l	#Map_BossItems,obMap(a0)
0001C7A8 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C7AE 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C7B4 2268 0034                  		movea.l	$34(a0),a1
0001C7B8 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C7BE 6600                       		bne.s	loc_1961C
0001C7C0 4A28 0001                  		tst.b	obRender(a0)
0001C7C4 6A00                       		bpl.s	Obj75_SpikeDelete
0001C7C6                            
0001C7C6                            loc_1961C:
0001C7C6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C7CC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C7D2 3028 003C                  		move.w	$3C(a0),d0
0001C7D6 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C7DC 6600                       		bne.s	loc_19652
0001C7DE 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C7E4 6700                       		beq.s	loc_1964C
0001C7E6 4A29 0028                  		tst.b	obSubtype(a1)
0001C7EA 6600                       		bne.s	loc_19658
0001C7EC 0C40 0094                  		cmpi.w	#$94,d0
0001C7F0 6C00                       		bge.s	loc_19658
0001C7F2 5E40                       		addq.w	#7,d0
0001C7F4 6000                       		bra.s	loc_19658
0001C7F6                            ; ===========================================================================
0001C7F6                            
0001C7F6                            loc_1964C:
0001C7F6 4A69 003C                  		tst.w	$3C(a1)
0001C7FA 6A00                       		bpl.s	loc_19658
0001C7FC                            
0001C7FC                            loc_19652:
0001C7FC 4A40                       		tst.w	d0
0001C7FE 6F00                       		ble.s	loc_19658
0001C800 5B40                       		subq.w	#5,d0
0001C802                            
0001C802                            loc_19658:
0001C802 3140 003C                  		move.w	d0,$3C(a0)
0001C806 E440                       		asr.w	#2,d0
0001C808 D168 000C                  		add.w	d0,obY(a0)
0001C80C 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C812 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C818 4228 0020                  		clr.b	obColType(a0)
0001C81C 2268 0034                  		movea.l	$34(a0),a1
0001C820 4A29 0020                  		tst.b	obColType(a1)
0001C824 6700                       		beq.s	loc_19688
0001C826 4A29 0029                  		tst.b	$29(a1)
0001C82A 6600                       		bne.s	loc_19688
0001C82C 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C832                            
0001C832                            loc_19688:
0001C832 6000 FF50                  		bra.w	loc_195DA
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            Obj75_SpikeDelete:
0001C836 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C836 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C83C                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C83C                            ; ---------------------------------------------------------------------------
0001C83C                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C83C                            ; ---------------------------------------------------------------------------
0001C83C                            
0001C83C                            BossBlock:
0001C83C 7000                       		moveq	#0,d0
0001C83E 1028 0024                  		move.b	obRoutine(a0),d0
0001C842 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C846 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C84A                            ; ===========================================================================
0001C84A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C84C 0000                       		dc.w Obj76_Action-Obj76_Index
0001C84E 0000                       		dc.w loc_19762-Obj76_Index
0001C850                            ; ===========================================================================
0001C850                            
0001C850                            Obj76_Main:	; Routine 0
0001C850 7800                       		moveq	#0,d4
0001C852 3A3C 2C10                  		move.w	#$2C10,d5
0001C856 7C09                       		moveq	#9,d6
0001C858 43D0                       		lea	(a0),a1
0001C85A 6000                       		bra.s	Obj76_MakeBlock
0001C85C                            ; ===========================================================================
0001C85C                            
0001C85C                            Obj76_Loop:
0001C85C 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001C862 6600                       		bne.s	Obj76_ExitLoop
0001C864                            
0001C864                            Obj76_MakeBlock:
0001C864 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C868 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C870 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C876 137C 0004 0001             		move.b	#4,obRender(a1)
0001C87C 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C882 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C888 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C88E 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C892 337C 0582 000C             		move.w	#$582,obY(a1)
0001C898 3344 0028                  		move.w	d4,obSubtype(a1)
0001C89C 0644 0101                  		addi.w	#$101,d4
0001C8A0 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C8A4 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C8A8 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C8AC                            
0001C8AC                            Obj76_ExitLoop:
0001C8AC 4E75                       		rts	
0001C8AE                            ; ===========================================================================
0001C8AE                            
0001C8AE                            Obj76_Action:	; Routine 2
0001C8AE 1028 0029                  		move.b	$29(a0),d0
0001C8B2 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C8B6 6700                       		beq.s	Obj76_Solid
0001C8B8 4A00                       		tst.b	d0
0001C8BA 6B00                       		bmi.s	loc_19718
0001C8BC                            
0001C8BC                            loc_19712:
0001C8BC 6100 0000                  		bsr.w	Obj76_Break
0001C8C0 6000                       		bra.s	Obj76_Display
0001C8C2                            ; ===========================================================================
0001C8C2                            
0001C8C2                            loc_19718:
0001C8C2 2268 0034                  		movea.l	$34(a0),a1
0001C8C6 4A29 0021                  		tst.b	obColProp(a1)
0001C8CA 67F0                       		beq.s	loc_19712
0001C8CC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C8D2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C8D8 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C8DE B2C8                       		cmpa.w	a0,a1
0001C8E0 6500                       		bcs.s	Obj76_Display
0001C8E2 3029 0012                  		move.w	obVelY(a1),d0
0001C8E6 48C0                       		ext.l	d0
0001C8E8 E080                       		asr.l	#8,d0
0001C8EA D168 000C                  		add.w	d0,obY(a0)
0001C8EE 6000                       		bra.s	Obj76_Display
0001C8F0                            ; ===========================================================================
0001C8F0                            
0001C8F0                            Obj76_Solid:
0001C8F0 323C 001B                  		move.w	#$1B,d1
0001C8F4 343C 0010                  		move.w	#$10,d2
0001C8F8 363C 0011                  		move.w	#$11,d3
0001C8FC 3828 0008                  		move.w	obX(a0),d4
0001C900 4EB9 0001 197A             		jsr	(SolidObject).l
0001C906                            
0001C906                            Obj76_Display:
0001C906 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001C90C                            ; ===========================================================================
0001C90C                            
0001C90C                            loc_19762:	; Routine 4
0001C90C 4A28 0001                  		tst.b	obRender(a0)
0001C910 6A00                       		bpl.s	Obj76_Delete
0001C912 4EB9 0000 F3F2             		jsr	(ObjectFall).l
0001C918 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001C91E                            ; ===========================================================================
0001C91E                            
0001C91E                            Obj76_Delete:
0001C91E 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C924                            
0001C924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C924                            
0001C924                            
0001C924                            Obj76_Break:
0001C924 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C928 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C92C 7801                       		moveq	#1,d4
0001C92E 7203                       		moveq	#3,d1
0001C930 7438                       		moveq	#$38,d2
0001C932 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C936 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C93C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C942 43D0                       		lea	(a0),a1
0001C944 6000                       		bra.s	Obj76_MakeFrag
0001C946                            ; ===========================================================================
0001C946                            
0001C946                            Obj76_LoopFrag:
0001C946 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001C94C 6600                       		bne.s	loc_197D4
0001C94E                            
0001C94E                            Obj76_MakeFrag:
0001C94E 45D0                       		lea	(a0),a2
0001C950 47D1                       		lea	(a1),a3
0001C952 7603                       		moveq	#3,d3
0001C954                            
0001C954                            loc_197AA:
0001C954 26DA                       		move.l	(a2)+,(a3)+
0001C956 26DA                       		move.l	(a2)+,(a3)+
0001C958 26DA                       		move.l	(a2)+,(a3)+
0001C95A 26DA                       		move.l	(a2)+,(a3)+
0001C95C 51CB FFF6                  		dbf	d3,loc_197AA
0001C960                            
0001C960 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C964 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C968 361D                       		move.w	(a5)+,d3
0001C96A D769 0008                  		add.w	d3,obX(a1)
0001C96E 361D                       		move.w	(a5)+,d3
0001C970 D769 000C                  		add.w	d3,obY(a1)
0001C974 1344 001A                  		move.b	d4,obFrame(a1)
0001C978 5244                       		addq.w	#1,d4
0001C97A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C97E                            
0001C97E                            loc_197D4:
0001C988                            ; End of function Obj76_Break
0001C988                            
0001C988                            ; ===========================================================================
0001C988 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C98C 0180 FE00                  		dc.w $180, -$200
0001C990 FF00 FF00                  		dc.w -$100, -$100
0001C994 0100 FF00                  		dc.w $100, -$100
0001C998 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C99C 0010 0000                  		dc.w $10, 0
0001C9A0 0000 0010                  		dc.w 0,	$10
0001C9A4 0010 0010                  		dc.w $10, $10
0001C9A4 0010 0010                  		dc.w $10, $10
0001C9A8                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C9A8                            ; ---------------------------------------------------------------------------
0001C9A8                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C9A8                            ; ---------------------------------------------------------------------------
0001C9A8                            Map_BossBlock_internal:
0001C9A8 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C9AA 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C9AC 0000                       		dc.w @topright-Map_BossBlock_internal
0001C9AE 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C9B0 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C9B2 02                         @wholeblock:	dc.b 2
0001C9B3 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C9B8 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C9BD 00                         		dc.b 0
0001C9BE 01                         @topleft:	dc.b 1
0001C9BF F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C9C4 01                         @topright:	dc.b 1
0001C9C5 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C9CA 01                         @bottomleft:	dc.b 1
0001C9CB F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C9D0 01                         @bottomright:	dc.b 1
0001C9D1 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C9D6                            		even
0001C9D6                            		even
0001C9D6                            
0001C9D6                            loc_1982C:
0001C9D6 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001C9DC                            
0001C9DC                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C9DC                            ; ---------------------------------------------------------------------------
0001C9DC                            ; Object 82 - Eggman (SBZ2)
0001C9DC                            ; ---------------------------------------------------------------------------
0001C9DC                            
0001C9DC                            ScrapEggman:
0001C9DC 7000                       		moveq	#0,d0
0001C9DE 1028 0024                  		move.b	obRoutine(a0),d0
0001C9E2 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C9E6 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C9EA                            ; ===========================================================================
0001C9EA 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C9EC 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C9EE 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C9F0                            
0001C9F0 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C9F3 0400 03                    		dc.b 4,	0, 3
0001C9F6                            ; ===========================================================================
0001C9F6                            
0001C9F6                            SEgg_Main:	; Routine 0
0001C9F6 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C9FA 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001CA00 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001CA06 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CA0C 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001CA12 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CA18 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA1C 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001CA20 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001CA24 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001CA28 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001CA30 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001CA36 117C 0004 0001             		move.b	#4,obRender(a0)
0001CA3C 08E8 0007 0001             		bset	#7,obRender(a0)
0001CA42 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CA48 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001CA4E 6600                       		bne.s	SEgg_Eggman
0001CA50 2348 0034                  		move.l	a0,$34(a1)
0001CA54 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CA58 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001CA5E 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001CA64 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA68 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CA6C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CA70 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CA74 237C 0000 DC7A 0004        		move.l	#Map_But,obMap(a1)
0001CA7C 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CA82 137C 0004 0001             		move.b	#4,obRender(a1)
0001CA88 08E9 0007 0001             		bset	#7,obRender(a1)
0001CA8E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CA94 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CA9A                            
0001CA9A                            SEgg_Eggman:	; Routine 2
0001CA9A 7000                       		moveq	#0,d0
0001CA9C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CAA0 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CAA4 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CAA8 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CAAC 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001CAB2 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001CAB8                            ; ===========================================================================
0001CAB8 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CABA 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CABC 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CABE 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CAC0                            ; ===========================================================================
0001CAC0                            
0001CAC0                            SEgg_ChkSonic:
0001CAC0 3028 0008                  		move.w	obX(a0),d0
0001CAC4 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CAC8 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CACC 6400                       		bcc.s	loc_19934	; if not, branch
0001CACE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CAD2 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CAD8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CADE                            
0001CADE                            loc_19934:
0001CADE 4EF9 0000 F42A             		jmp	(SpeedToPos).l
0001CAE4                            ; ===========================================================================
0001CAE4                            
0001CAE4                            SEgg_PreLeap:
0001CAE4 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CAE8 6600                       		bne.s	loc_19954	; if time remains, branch
0001CAEA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CAEE 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CAF4 5868 000C                  		addq.w	#4,obY(a0)
0001CAF8 317C 000F 003C             		move.w	#15,$3C(a0)
0001CAFE                            
0001CAFE                            loc_19954:
0001CAFE 60DE                       		bra.s	loc_19934
0001CB00                            ; ===========================================================================
0001CB00                            
0001CB00                            SEgg_Leap:
0001CB00 5368 003C                  		subq.w	#1,$3C(a0)
0001CB04 6E00                       		bgt.s	loc_199D0
0001CB06 6600                       		bne.s	loc_1996A
0001CB08 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CB0E 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CB14                            
0001CB14                            loc_1996A:
0001CB14 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001CB1A 6E00                       		bgt.s	loc_19976
0001CB1C 4268 0010                  		clr.w	obVelX(a0)
0001CB20                            
0001CB20                            loc_19976:
0001CB20 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CB26 4A68 0012                  		tst.w	obVelY(a0)
0001CB2A 6B00                       		bmi.s	SEgg_FindBlocks
0001CB2C 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001CB32 6500                       		bcs.s	SEgg_FindBlocks
0001CB34 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CB3A 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001CB40 6500                       		bcs.s	SEgg_FindBlocks
0001CB42 317C 029B 000C             		move.w	#$29B,obY(a0)
0001CB48 4268 0012                  		clr.w	obVelY(a0)
0001CB4C                            
0001CB4C                            SEgg_FindBlocks:
0001CB4C 3028 0010                  		move.w	obVelX(a0),d0
0001CB50 8068 0012                  		or.w	obVelY(a0),d0
0001CB54 6600                       		bne.s	loc_199D0
0001CB56 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CB5A 703E                       		moveq	#$3E,d0
0001CB5C 7240                       		moveq	#$40,d1
0001CB5E                            
0001CB5E                            SEgg_FindLoop:	
0001CB5E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CB60 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CB64 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CB68                            
0001CB68 6600                       		bne.s	loc_199D0
0001CB6A 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CB70 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB74 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB7A                            
0001CB7A                            loc_199D0:
0001CB7A 6000 FF62                  		bra.w	loc_19934
0001CB7E                            ; ===========================================================================
0001CB7E                            
0001CB7E                            SEgg_Switch:	; Routine 4
0001CB7E 7000                       		moveq	#0,d0
0001CB80 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB84 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CB88 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CB8C                            ; ===========================================================================
0001CB8C 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CB8E 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CB90                            ; ===========================================================================
0001CB90                            
0001CB90                            loc_199E6:
0001CB90 2268 0034                  		movea.l	$34(a0),a1
0001CB94 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CB9A 6600                       		bne.s	SEgg_SwDisplay
0001CB9C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CBA2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CBA6                            
0001CBA6                            SEgg_SwDisplay:
0001CBA6 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001CBA6 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001CBAC                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CBAC                            ; ---------------------------------------------------------------------------
0001CBAC                            ; Animation script - Eggman (SBZ2)
0001CBAC                            ; ---------------------------------------------------------------------------
0001CBAC 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CBAE 0000                       		dc.w @laugh-Ani_SEgg
0001CBB0 0000                       		dc.w @jump1-Ani_SEgg
0001CBB2 0000                       		dc.w @intube-Ani_SEgg
0001CBB4 0000                       		dc.w @running-Ani_SEgg
0001CBB6 0000                       		dc.w @jump2-Ani_SEgg
0001CBB8 0000                       		dc.w @starjump-Ani_SEgg
0001CBBA 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CBBE 00                         		even
0001CBBE 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CBC2 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CBCA 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CBCE 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CBD4 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CBDA 00                         		even
0001CBDA 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CBDE 00                         		even
0001CBDE 00                         		even
0001CBDE                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CBDE                            ; --------------------------------------------------------------------------------
0001CBDE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001CBDE                            ; --------------------------------------------------------------------------------
0001CBDE                            
0001CBDE                            SME_y00JM:	
0001CBDE 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001CBE2 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001CBE6 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001CBEA 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001CBEE 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001CBF2 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001CBF4 03                         SME_y00JM_16:	dc.b 3	
0001CBF5 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CBFA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CBFF 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC04 07                         SME_y00JM_26:	dc.b 7	
0001CC05 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001CC0A 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC0F FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CC14 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001CC19 F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001CC1E F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001CC23 F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001CC28 07                         SME_y00JM_4A:	dc.b 7	
0001CC29 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001CC2E FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001CC33 F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001CC38 F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001CC3D F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001CC42 F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001CC47 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001CC4C 04                         SME_y00JM_6E:	dc.b 4	
0001CC4D F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001CC52 F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001CC57 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001CC5C EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001CC61 07                         SME_y00JM_83:	dc.b 7	
0001CC62 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CC67 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CC6C 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CC71 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CC76 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CC7B E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CC80 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CC85 04                         SME_y00JM_A7:	dc.b 4	
0001CC86 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CC8B E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CC90 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CC95 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CC9A 07                         SME_y00JM_BC:	dc.b 7	
0001CC9B E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CCA0 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CCA5 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CCAA 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CCAF F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CCB4 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CCB9 F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CCBE 05                         SME_y00JM_E0:	dc.b 5	
0001CCBF F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CCC4 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CCC9 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CCCE 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CCD3 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CCD8 06                         SME_y00JM_FA:	dc.b 6	
0001CCD9 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CCDE EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CCE3 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CCE8 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CCED 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CCF2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CCF7 08                         SME_y00JM_119:	dc.b 8	
0001CCF8 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CCFD E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD02 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD07 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CD0C E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CD11 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CD16 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CD1B 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CD20 03                         SME_y00JM_142:	dc.b 3	
0001CD21 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CD26 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CD2B EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CD30                            		even
0001CD30                            		even
0001CD30                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CD30                            ; ---------------------------------------------------------------------------
0001CD30                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CD30                            ; ---------------------------------------------------------------------------
0001CD30                            
0001CD30                            FalseFloor:
0001CD30 7000                       		moveq	#0,d0
0001CD32 1028 0024                  		move.b	obRoutine(a0),d0
0001CD36 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CD3A 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CD3E                            ; ===========================================================================
0001CD3E 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CD40 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CD42 0000                       		dc.w loc_19C36-FFloor_Index
0001CD44 0000                       		dc.w loc_19C62-FFloor_Index
0001CD46 0000                       		dc.w loc_19C72-FFloor_Index
0001CD48 0000                       		dc.w loc_19C80-FFloor_Index
0001CD4A                            ; ===========================================================================
0001CD4A                            
0001CD4A                            FFloor_Main:	; Routine 0
0001CD4A 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CD50 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CD56 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CD5C 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CD62 117C 0004 0001             		move.b	#4,obRender(a0)
0001CD68 08E8 0007 0001             		bset	#7,obRender(a0)
0001CD6E 7800                       		moveq	#0,d4
0001CD70 3A3C 1B10                  		move.w	#$1B10,d5
0001CD74 7C07                       		moveq	#7,d6
0001CD76 45E8 0030                  		lea	$30(a0),a2
0001CD7A                            
0001CD7A                            FFloor_MakeBlock:
0001CD7A 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001CD80 6600                       		bne.s	FFloor_ExitMake
0001CD82 34C9                       		move.w	a1,(a2)+
0001CD84 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CD88 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CD90 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CD96 137C 0004 0001             		move.b	#4,obRender(a1)
0001CD9C 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CDA2 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CDA8 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CDAE 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CDB2 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CDB8 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CDBC 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CDC2 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CDC6                            
0001CDC6                            FFloor_ExitMake:
0001CDC6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CDCA 4E75                       		rts	
0001CDCC                            ; ===========================================================================
0001CDCC                            
0001CDCC                            FFloor_ChkBreak:; Routine 2
0001CDCC 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CDD2 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CDD4 4228 001A                  		clr.b	obFrame(a0)
0001CDD8 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CDDC                            
0001CDDC                            FFloor_Solid:
0001CDDC 7000                       		moveq	#0,d0
0001CDDE 1028 001A                  		move.b	obFrame(a0),d0
0001CDE2 4400                       		neg.b	d0
0001CDE4 4880                       		ext.w	d0
0001CDE6 5040                       		addq.w	#8,d0
0001CDE8 E940                       		asl.w	#4,d0
0001CDEA 383C 1C00                  		move.w	#$1C00,d4
0001CDEE 9840                       		sub.w	d0,d4
0001CDF0 1140 0014                  		move.b	d0,obActWid(a0)
0001CDF4 3144 0008                  		move.w	d4,obX(a0)
0001CDF8 720B                       		moveq	#$B,d1
0001CDFA D240                       		add.w	d0,d1
0001CDFC 7410                       		moveq	#$10,d2
0001CDFE 7611                       		moveq	#$11,d3
0001CE00 4EF9 0001 197A             		jmp	(SolidObject).l
0001CE06                            ; ===========================================================================
0001CE06                            
0001CE06                            loc_19C36:	; Routine 4
0001CE06 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CE0C 6400                       		bcc.s	FFloor_Solid2
0001CE0E 70FF                       		moveq	#-1,d0
0001CE10 1028 001A                  		move.b	obFrame(a0),d0
0001CE14 4880                       		ext.w	d0
0001CE16 D040                       		add.w	d0,d0
0001CE18 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CE1C 2240                       		movea.l	d0,a1
0001CE1E 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CE24 5228 001A                  		addq.b	#1,obFrame(a0)
0001CE28 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CE2E 6700                       		beq.s	loc_19C62
0001CE30                            
0001CE30                            FFloor_Solid2:
0001CE30 60AA                       		bra.s	FFloor_Solid
0001CE32                            ; ===========================================================================
0001CE32                            
0001CE32                            loc_19C62:	; Routine 6
0001CE32 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CE38 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CE3E 6000 FB96                  		bra.w	loc_1982C
0001CE42                            ; ===========================================================================
0001CE42                            
0001CE42                            loc_19C72:	; Routine 8
0001CE42 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CE48 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CE4A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001CE50                            ; ===========================================================================
0001CE50                            
0001CE50                            loc_19C80:	; Routine $A
0001CE50 4A28 0001                  		tst.b	obRender(a0)
0001CE54 6A00 FB80                  		bpl.w	loc_1982C
0001CE58 4EB9 0000 F3F2             		jsr	(ObjectFall).l
0001CE5E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001CE64                            ; ===========================================================================
0001CE64                            
0001CE64                            FFloor_Break:
0001CE64 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CE68 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CE6C 7801                       		moveq	#1,d4
0001CE6E 7203                       		moveq	#3,d1
0001CE70 7438                       		moveq	#$38,d2
0001CE72 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE76 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CE7C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CE82 43D0                       		lea	(a0),a1
0001CE84 6000                       		bra.s	FFloor_MakeFrag
0001CE86                            ; ===========================================================================
0001CE86                            
0001CE86                            FFloor_LoopFrag:
0001CE86 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001CE8C 6600                       		bne.s	FFloor_BreakSnd
0001CE8E                            
0001CE8E                            FFloor_MakeFrag:
0001CE8E 45D0                       		lea	(a0),a2
0001CE90 47D1                       		lea	(a1),a3
0001CE92 7603                       		moveq	#3,d3
0001CE94                            
0001CE94                            loc_19CC4:
0001CE94 26DA                       		move.l	(a2)+,(a3)+
0001CE96 26DA                       		move.l	(a2)+,(a3)+
0001CE98 26DA                       		move.l	(a2)+,(a3)+
0001CE9A 26DA                       		move.l	(a2)+,(a3)+
0001CE9C 51CB FFF6                  		dbf	d3,loc_19CC4
0001CEA0                            
0001CEA0 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CEA4 361D                       		move.w	(a5)+,d3
0001CEA6 D769 0008                  		add.w	d3,obX(a1)
0001CEAA 361D                       		move.w	(a5)+,d3
0001CEAC D769 000C                  		add.w	d3,obY(a1)
0001CEB0 1344 001A                  		move.b	d4,obFrame(a1)
0001CEB4 5244                       		addq.w	#1,d4
0001CEB6 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CEBA                            
0001CEBA                            FFloor_BreakSnd:
0001CEC4 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001CECA                            ; ===========================================================================
0001CECA 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CECE 0120 00C0                  		dc.w $120, $C0
0001CED2 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CED6 0010 0000                  		dc.w $10, 0
0001CEDA 0000 0010                  		dc.w 0,	$10
0001CEDE 0010 0010                  		dc.w $10, $10
0001CEDE 0010 0010                  		dc.w $10, $10
0001CEE2                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CEE2                            ; ---------------------------------------------------------------------------
0001CEE2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CEE2                            ; ---------------------------------------------------------------------------
0001CEE2                            Map_FFloor_internal:
0001CEE2 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CEE4 0000                       		dc.w @topleft-Map_FFloor_internal
0001CEE6 0000                       		dc.w @topright-Map_FFloor_internal
0001CEE8 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CEEA 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CEEC 01                         @wholeblock:	dc.b 1
0001CEED F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CEF2 02                         @topleft:	dc.b 2
0001CEF3 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CEF8 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CEFD 00                         		dc.b 0
0001CEFE 02                         @topright:	dc.b 2
0001CEFF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CF04 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CF09 00                         		dc.b 0
0001CF0A 02                         @bottomleft:	dc.b 2
0001CF0B F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CF10 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CF15 00                         		dc.b 0
0001CF16 02                         @bottomright:	dc.b 2
0001CF17 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CF1C F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CF22 00                         		even
0001CF22 00                         		even
0001CF22                            		include	"_incObj\85 Boss - Final.asm"
0001CF22                            ; ---------------------------------------------------------------------------
0001CF22                            ; Object 85 - Eggman (FZ)
0001CF22                            ; ---------------------------------------------------------------------------
0001CF22                            
0001CF22                            Obj85_Delete:
0001CF22 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001CF28                            ; ===========================================================================
0001CF28                            
0001CF28                            BossFinal:
0001CF28 7000                       		moveq	#0,d0
0001CF2A 1028 0024                  		move.b	obRoutine(a0),d0
0001CF2E 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CF32 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CF36                            ; ===========================================================================
0001CF36 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CF38 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CF3A 0000                       		dc.w loc_1A38E-Obj85_Index
0001CF3C 0000                       		dc.w loc_1A346-Obj85_Index
0001CF3E 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CF40 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CF42 0000                       		dc.w loc_1A264-Obj85_Index
0001CF44                            
0001CF44 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CF4A 0001 CBDE                  		dc.l Map_SEgg		; mappings pointer
0001CF4E 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CF54 0000 0000                  		dc.l Map_EggCyl
0001CF58 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CF5E 0000 0000                  		dc.l Map_FZLegs
0001CF62 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CF68 0001 CBDE                  		dc.l Map_SEgg
0001CF6C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF72 0001 AE62                  		dc.l Map_Eggman
0001CF76 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF7C 0001 AE62                  		dc.l Map_Eggman
0001CF80                            
0001CF80                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CF80 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CF86 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CF8C 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CF92 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CF98 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CF9E 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            Obj85_Main:	; Routine 0
0001CFA4 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CFA8 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CFAC 2248                       		movea.l	a0,a1
0001CFAE 7205                       		moveq	#5,d1
0001CFB0 6000                       		bra.s	Obj85_LoadBoss
0001CFB2                            ; ===========================================================================
0001CFB2                            
0001CFB2                            Obj85_Loop:
0001CFB2 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001CFB8 6600                       		bne.s	loc_19E20
0001CFBA                            
0001CFBA                            Obj85_LoadBoss:
0001CFBA 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CFBE 335A 0008                  		move.w	(a2)+,obX(a1)
0001CFC2 335A 000C                  		move.w	(a2)+,obY(a1)
0001CFC6 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CFCA 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CFCE 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CFD2 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CFD6 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CFDA 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CFDE 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CFE2 137C 0004 0001             		move.b	#4,obRender(a1)
0001CFE8 08E8 0007 0001             		bset	#7,obRender(a0)
0001CFEE 2348 0034                  		move.l	a0,$34(a1)
0001CFF2 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CFF6                            
0001CFF6                            loc_19E20:
0001CFF6 45E8 0036                  		lea	$36(a0),a2
0001CFFA 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001D000 6600                       		bne.s	loc_19E5A
0001D002 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001D006 3489                       		move.w	a1,(a2)
0001D008 2348 0034                  		move.l	a0,$34(a1)
0001D00C 45E8 0038                  		lea	$38(a0),a2
0001D010 7400                       		moveq	#0,d2
0001D012 7203                       		moveq	#3,d1
0001D014                            
0001D014                            loc_19E3E:
0001D014 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001D01A 6600                       		bne.s	loc_19E5A
0001D01C 34C9                       		move.w	a1,(a2)+
0001D01E 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001D022 2348 0034                  		move.l	a0,$34(a1)
0001D026 1342 0028                  		move.b	d2,obSubtype(a1)
0001D02A 5442                       		addq.w	#2,d2
0001D02C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001D030                            
0001D030                            loc_19E5A:
0001D030 317C 0000 0034             		move.w	#0,$34(a0)
0001D036 117C 0006 0021             		move.b	#6,obColProp(a0) ; set number of hits to 6
0001D03C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D042                            
0001D042                            Obj85_Eggman:	; Routine 2
0001D042 7000                       		moveq	#0,d0
0001D044 1028 0034                  		move.b	$34(a0),d0
0001D048 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001D04C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001D050 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001D056                            ; ===========================================================================
0001D056 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001D05A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001D05E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001D062 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D066                            ; ===========================================================================
0001D066                            
0001D066                            loc_19E90:
0001D066 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D06A 6600                       		bne.s	loc_19EA2
0001D06C 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D072 6500                       		bcs.s	loc_19EA2
0001D074 5428 0034                  		addq.b	#2,$34(a0)
0001D078                            
0001D078                            loc_19EA2:
0001D078 52B8 F636                  		addq.l	#1,(v_random).w
0001D07C 4E75                       		rts	
0001D07E                            ; ===========================================================================
0001D07E                            
0001D07E                            loc_19EA8:
0001D07E 4A68 0030                  		tst.w	$30(a0)
0001D082 6A00                       		bpl.s	loc_19F10
0001D084 4268 0030                  		clr.w	$30(a0)
0001D088 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001D08E 0240 000C                  		andi.w	#$C,d0
0001D092 3200                       		move.w	d0,d1
0001D094 5441                       		addq.w	#2,d1
0001D096 4A80                       		tst.l	d0
0001D098 6A00                       		bpl.s	loc_19EC6
0001D09A C340                       		exg	d1,d0
0001D09C                            
0001D09C                            loc_19EC6:
0001D09C 43FA 0000                  		lea	word_19FD6(pc),a1
0001D0A0 3031 0000                  		move.w	(a1,d0.w),d0
0001D0A4 3231 1000                  		move.w	(a1,d1.w),d1
0001D0A8 3140 0030                  		move.w	d0,$30(a0)
0001D0AC 74FF                       		moveq	#-1,d2
0001D0AE 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D0B2 2242                       		movea.l	d2,a1
0001D0B4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D0BA 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D0C0 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D0C4 2242                       		movea.l	d2,a1
0001D0C6 137C 0001 0029             		move.b	#1,$29(a1)
0001D0CC 337C 0000 0030             		move.w	#0,$30(a1)
0001D0D2 317C 0001 0032             		move.w	#1,$32(a0)
0001D0D8 4228 0035                  		clr.b	$35(a0)
0001D0E6                            
0001D0E6                            loc_19F10:
0001D0E6 4A68 0032                  		tst.w	$32(a0)
0001D0EA 6B00 0000                  		bmi.w	loc_19FA6
0001D0EE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D0F4 3038 D008                  		move.w	(v_player+obX).w,d0
0001D0F8 9068 0008                  		sub.w	obX(a0),d0
0001D0FC 6500                       		bcs.s	loc_19F2E
0001D0FE 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D104                            
0001D104                            loc_19F2E:
0001D104 323C 002B                  		move.w	#$2B,d1
0001D108 343C 0014                  		move.w	#$14,d2
0001D10C 363C 0014                  		move.w	#$14,d3
0001D110 3828 0008                  		move.w	obX(a0),d4
0001D114 4EB9 0001 197A             		jsr	(SolidObject).l
0001D11A 4A44                       		tst.w	d4
0001D11C 6E00                       		bgt.s	loc_19F50
0001D11E                            
0001D11E                            loc_19F48:
0001D11E 4A28 0035                  		tst.b	$35(a0)
0001D122 6600                       		bne.s	loc_19F88
0001D124 6000                       		bra.s	loc_19F96
0001D126                            ; ===========================================================================
0001D126                            
0001D126                            loc_19F50:
0001D126 5E78 F636                  		addq.w	#7,(v_random).w
0001D12A 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D130 66EC                       		bne.s	loc_19F48
0001D132 303C 0300                  		move.w	#$300,d0
0001D136 0828 0000 0022             		btst	#0,obStatus(a0)
0001D13C 6600                       		bne.s	loc_19F6A
0001D13E 4440                       		neg.w	d0
0001D140                            
0001D140                            loc_19F6A:
0001D140 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D144 4A28 0035                  		tst.b	$35(a0)
0001D148 6600                       		bne.s	loc_19F88
0001D14A 5328 0021                  		subq.b	#1,obColProp(a0)
0001D14E 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D154 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D15A                            
0001D15A                            loc_19F88:
0001D15A 5328 0035                  		subq.b	#1,$35(a0)
0001D15E 6700                       		beq.s	loc_19F96
0001D160 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D166 6000                       		bra.s	loc_19F9C
0001D168                            ; ===========================================================================
0001D168                            
0001D168                            loc_19F96:
0001D168 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D16E                            
0001D16E                            loc_19F9C:
0001D16E 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001D172 4EF9 0000 C4F8             		jmp	(AnimateSprite).l
0001D178                            ; ===========================================================================
0001D178                            
0001D178                            loc_19FA6:
0001D178 4A28 0021                  		tst.b	obColProp(a0)
0001D17C 6700                       		beq.s	loc_19FBC
0001D17E 5428 0034                  		addq.b	#2,$34(a0)
0001D182 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D188 4268 0032                  		clr.w	$32(a0)
0001D18C 4E75                       		rts	
0001D18E                            ; ===========================================================================
0001D18E                            
0001D18E                            loc_19FBC:
0001D18E 7064                       			moveq	#100,d0
0001D190 6100 0000                  			bsr.w	AddPoints
0001D194 117C 0006 0034             		move.b	#6,$34(a0)
0001D19A 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D1A0 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D1A6 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D1AC 4E75                       		rts	
0001D1AE                            ; ===========================================================================
0001D1AE 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D1BE                            ; ===========================================================================
0001D1BE                            
0001D1BE                            loc_19FE6:
0001D1BE 70FF                       		moveq	#-1,d0
0001D1C0 3028 0036                  		move.w	$36(a0),d0
0001D1C4 2240                       		movea.l	d0,a1
0001D1C6 4A68 0030                  		tst.w	$30(a0)
0001D1CA 6A00                       		bpl.s	loc_1A000
0001D1CC 4268 0030                  		clr.w	$30(a0)
0001D1D0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D1D6 6100                       		bsr.s	loc_1A020
0001D1D8                            
0001D1D8                            loc_1A000:
0001D1D8 700F                       		moveq	#$F,d0
0001D1DA C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D1DE 6600                       		bne.s	loc_1A00A
0001D1E0 6100                       		bsr.s	loc_1A020
0001D1E2                            
0001D1E2                            loc_1A00A:
0001D1E2 4A68 0032                  		tst.w	$32(a0)
0001D1E6 6700                       		beq.s	locret_1A01E
0001D1E8 5528 0034                  		subq.b	#2,$34(a0)
0001D1EC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D1F2 4268 0032                  		clr.w	$32(a0)
0001D1F6                            
0001D1F6                            locret_1A01E:
0001D1F6 4E75                       		rts	
0001D1F8                            ; ===========================================================================
0001D1F8                            
0001D1F8                            loc_1A020:
0001D202                            ; ===========================================================================
0001D202                            
0001D202                            loc_1A02A:
0001D202 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D208 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D20E 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001D214 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D21A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D220 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D226 6500                       		bcs.s	loc_1A070
0001D228 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D22E 5428 0034                  		addq.b	#2,$34(a0)
0001D232 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D238 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D23E 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D244 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D248                            
0001D248                            loc_1A070:
0001D248 6000 0000                  		bra.w	loc_1A166
0001D24C                            ; ===========================================================================
0001D24C                            
0001D24C                            loc_1A074:
0001D24C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D252 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D258 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001D25E 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D264 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D26A 6500                       		bcs.s	loc_1A09A
0001D26C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D272                            
0001D272                            loc_1A09A:
0001D272 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D278 3028 0008                  		move.w	obX(a0),d0
0001D27C 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D280 6A00                       		bpl.s	loc_1A0B4
0001D282 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D288 6000 0000                  		bra.w	loc_1A0F2
0001D28C                            ; ===========================================================================
0001D28C                            
0001D28C                            loc_1A0B4:
0001D28C 0440 0070                  		subi.w	#$70,d0
0001D290 6500                       		bcs.s	loc_1A0F2
0001D292 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D298 5140                       		subq.w	#8,d0
0001D29A 6500                       		bcs.s	loc_1A0F2
0001D29C 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D2A2 5140                       		subq.w	#8,d0
0001D2A4 6500                       		bcs.s	loc_1A0F2
0001D2A6 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D2AC 5140                       		subq.w	#8,d0
0001D2AE 6500                       		bcs.s	loc_1A0F2
0001D2B0 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D2B6 5140                       		subq.w	#8,d0
0001D2B8 6500                       		bcs.s	loc_1A0F2
0001D2BA 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D2C0 0440 0038                  		subi.w	#$38,d0
0001D2C4 6500                       		bcs.s	loc_1A0F2
0001D2C6 4268 0010                  		clr.w	obVelX(a0)
0001D2CA                            
0001D2CA                            loc_1A0F2:
0001D2CA 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D2D0 6500                       		bcs.s	loc_1A110
0001D2D2 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D2D8 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D2DE 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D2E4 5428 0034                  		addq.b	#2,$34(a0)
0001D2E8                            
0001D2E8                            loc_1A110:
0001D2E8 6000                       		bra.s	loc_1A15C
0001D2EA                            ; ===========================================================================
0001D2EA                            
0001D2EA                            loc_1A112:
0001D2EA 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001D2F0 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D2F6 6500                       		bcs.s	loc_1A124
0001D2F8 4268 0010                  		clr.w	obVelX(a0)
0001D2FC                            
0001D2FC                            loc_1A124:
0001D2FC 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D302 4A68 0012                  		tst.w	obVelY(a0)
0001D306 6B00                       		bmi.s	loc_1A142
0001D308 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D30E 6500                       		bcs.s	loc_1A142
0001D310 317C 0592 000C             		move.w	#$592,obY(a0)
0001D316 4268 0012                  		clr.w	obVelY(a0)
0001D31A                            
0001D31A                            loc_1A142:
0001D31A 3028 0010                  		move.w	obVelX(a0),d0
0001D31E 8068 0012                  		or.w	obVelY(a0),d0
0001D322 6600                       		bne.s	loc_1A15C
0001D324 5428 0034                  		addq.b	#2,$34(a0)
0001D328 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D32E 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D334                            
0001D334                            loc_1A15C:
0001D334 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D338 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001D33E                            
0001D33E                            loc_1A166:
0001D33E 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D344 6C00                       		bge.s	loc_1A172
0001D346 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D34A                            
0001D34A                            loc_1A172:
0001D34A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D350 6C00                       		bge.s	locret_1A190
0001D352 323C 001B                  		move.w	#$1B,d1
0001D356 343C 0070                  		move.w	#$70,d2
0001D35A 363C 0071                  		move.w	#$71,d3
0001D35E 3828 0008                  		move.w	obX(a0),d4
0001D362 4EF9 0001 197A             		jmp	(SolidObject).l
0001D368                            ; ===========================================================================
0001D368                            
0001D368                            locret_1A190:
0001D368 4E75                       		rts	
0001D36A                            ; ===========================================================================
0001D36A                            
0001D36A                            loc_1A192:
0001D36A 217C 0001 AE62 0004        		move.l	#Map_Eggman,obMap(a0)
0001D372 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D378 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D37E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D384 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001D38A 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D390 6400                       		bcc.s	loc_1A1D0
0001D392 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D398 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D39E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D3A4 5428 0034                  		addq.b	#2,$34(a0)
0001D3A8                            
0001D3A8                            loc_1A1D0:
0001D3A8 6000 FF8A                  		bra.w	loc_1A15C
0001D3AC                            ; ===========================================================================
0001D3AC                            
0001D3AC                            loc_1A1D4:
0001D3AC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D3B2 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001D3B8 4A68 0030                  		tst.w	$30(a0)
0001D3BC 6600                       		bne.s	loc_1A1FC
0001D3BE 4A28 0020                  		tst.b	obColType(a0)
0001D3C2 6600                       		bne.s	loc_1A216
0001D3C4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D3CA 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D3D0                            
0001D3D0                            loc_1A1FC:
0001D3D0 5368 0030                  		subq.w	#1,$30(a0)
0001D3D4 6600                       		bne.s	loc_1A216
0001D3D6 4A28 0022                  		tst.b	obStatus(a0)
0001D3DA 6A00                       		bpl.s	loc_1A210
0001D3DC 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D3E2 6000                       		bra.s	loc_1A216
0001D3E4                            ; ===========================================================================
0001D3E4                            
0001D3E4                            loc_1A210:
0001D3E4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D3EA                            
0001D3EA                            loc_1A216:
0001D3EA 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D3F0 6D00                       		blt.s	loc_1A23A
0001D3F2 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D3F8 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D3FE 4278 D020                  		clr.w	(v_player+obInertia).w
0001D402 4A68 0012                  		tst.w	obVelY(a0)
0001D406 6A00                       		bpl.s	loc_1A248
0001D408 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D40E                            
0001D40E                            loc_1A23A:
0001D40E 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D414 6D00                       		blt.s	loc_1A248
0001D416 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D41C                            
0001D41C                            loc_1A248:
0001D41C 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D422 6500                       		bcs.s	loc_1A260
0001D424 4A28 0001                  		tst.b	obRender(a0)
0001D428 6B00                       		bmi.s	loc_1A260
0001D42A 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D430 6000 FAF0                  		bra.w	Obj85_Delete
0001D434                            ; ===========================================================================
0001D434                            
0001D434                            loc_1A260:
0001D434 6000 FEFE                  		bra.w	loc_1A15C
0001D438                            ; ===========================================================================
0001D438                            
0001D438                            loc_1A264:	; Routine 4
0001D438 2268 0034                  		movea.l	$34(a0),a1
0001D43C 1011                       		move.b	(a1),d0
0001D43E B010                       		cmp.b	(a0),d0
0001D440 6600 FAE0                  		bne.w	Obj85_Delete
0001D444 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D44A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D450 6C00                       		bge.s	loc_1A280
0001D452 6000                       		bra.s	loc_1A2A6
0001D454                            ; ===========================================================================
0001D454                            
0001D454                            loc_1A280:
0001D454 4A69 0010                  		tst.w	obVelX(a1)
0001D458 6700                       		beq.s	loc_1A28C
0001D45A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D460                            
0001D460                            loc_1A28C:
0001D460 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D464 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001D46A                            
0001D46A                            loc_1A296:
0001D46A 2268 0034                  		movea.l	$34(a0),a1
0001D46E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D474 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D47A                            
0001D47A                            loc_1A2A6:
0001D47A 2268 0034                  		movea.l	$34(a0),a1
0001D47E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D484 7003                       		moveq	#3,d0
0001D486 C028 0022                  		and.b	obStatus(a0),d0
0001D48A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D490 8128 0001                  		or.b	d0,obRender(a0)
0001D494 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001D49A                            ; ===========================================================================
0001D49A                            
0001D49A                            loc_1A2C6:	; Routine 6
0001D49A 2268 0034                  		movea.l	$34(a0),a1
0001D49E 1011                       		move.b	(a1),d0
0001D4A0 B010                       		cmp.b	(a0),d0
0001D4A2 6600 FA7E                  		bne.w	Obj85_Delete
0001D4A6 0CA9 0001 AE62 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D4AE 6700                       		beq.s	loc_1A2E4
0001D4B0 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D4B6 60C2                       		bra.s	loc_1A2A6
0001D4B8                            ; ===========================================================================
0001D4B8                            
0001D4B8                            loc_1A2E4:
0001D4B8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D4BE 4A29 0021                  		tst.b	obColProp(a1)
0001D4C2 6F00                       		ble.s	loc_1A312
0001D4C4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D4CA 217C 0001 AE62 0004        		move.l	#Map_Eggman,obMap(a0)
0001D4D2 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D4D8 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D4DC 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001D4E2 6000 FF86                  		bra.w	loc_1A296
0001D4E6                            ; ===========================================================================
0001D4E6                            
0001D4E6                            loc_1A312:
0001D4E6 4A28 0001                  		tst.b	1(a0)
0001D4EA 6A00 FA36                  		bpl.w	Obj85_Delete
0001D4EE 6100 D4CC                  		bsr.w	BossDefeated
0001D4F2 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D4F8 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D4FE 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D506 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D50C 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D510 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001D516 6000 FF52                  		bra.w	loc_1A296
0001D51A                            ; ===========================================================================
0001D51A                            
0001D51A                            loc_1A346:	; Routine 8
0001D51A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D520 2268 0034                  		movea.l	$34(a0),a1
0001D524 0CA9 0001 AE62 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D52C 6700                       		beq.s	loc_1A35E
0001D52E 6000 FF4A                  		bra.w	loc_1A2A6
0001D532                            ; ===========================================================================
0001D532                            
0001D532                            loc_1A35E:
0001D532 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D538 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D53E 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D542 6600                       		bne.s	loc_1A376
0001D544 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D54A                            
0001D54A                            loc_1A376:
0001D54A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D54E 6E00                       		bgt.s	loc_1A38A
0001D550 5228 001A                  		addq.b	#1,obFrame(a0)
0001D554 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D55A 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D55E                            
0001D55E                            loc_1A38A:
0001D55E 6000 FF0A                  		bra.w	loc_1A296
0001D562                            ; ===========================================================================
0001D562                            
0001D562                            loc_1A38E:	; Routine $A
0001D562 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D568 3038 D008                  		move.w	(v_player+obX).w,d0
0001D56C 9068 0008                  		sub.w	obX(a0),d0
0001D570 6500                       		bcs.s	loc_1A3A6
0001D572 4A28 0001                  		tst.b	obRender(a0)
0001D576 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D57A                            
0001D57A                            loc_1A3A6:
0001D57A 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001D580                            ; ===========================================================================
0001D580                            
0001D580                            loc_1A3AC:	; Routine $C
0001D580 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D586 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D58C 2268 0034                  		movea.l	$34(a0),a1
0001D590 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D596 6600                       		bne.s	loc_1A3D0
0001D598 0CA9 0001 AE62 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D5A0 6700 F980                  		beq.w	Obj85_Delete
0001D5A4                            
0001D5A4                            loc_1A3D0:
0001D5A4 6000 FED4                  		bra.w	loc_1A2A6
0001D5A8                            		
0001D5A8                            BossModeMusic:
0001D5A8 0C28 0002 0021             		cmpi.b	#2,obColProp(a0)
0001D5AE 6600 0000                  		bne.w	NormalMode
0001D5B2 4EF9 0000 0000             		jmp	PinchMode
0001D5B8                            
0001D5B8                            NormalMode:
0001D5B8 303C 00AC                  		move.w	#$AC,d0
0001D5BC 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D5C2 4E75                       		rts
0001D5C4                            
0001D5C4                            PinchMode:
0001D5C4 303C 0094                  		move.w	#$94,d0
0001D5C8 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D5CE 303C 00E2                  		move.w	#$E2,d0
0001D5D2 4EB9 0000 129A             		jsr	(PlaySound).l
0001D5D8 4E75                       		rts		
0001D5D8 4E75                       		rts		
0001D5DA                            		include	"_anim\FZ Eggman in Ship.asm"
0001D5DA                            ; ---------------------------------------------------------------------------
0001D5DA                            ; Animation script - Eggman (FZ)
0001D5DA                            ; ---------------------------------------------------------------------------
0001D5DA 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D5DC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D5E0                            		even
0001D5E0                            		even
0001D5E0                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D5E0                            ; ---------------------------------------------------------------------------
0001D5E0                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D5E0                            ; ---------------------------------------------------------------------------
0001D5E0                            Map_FZDamaged_internal:
0001D5E0 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D5E2 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D5E4 06                         @damage1:	dc.b 6
0001D5E5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D5EA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D5EF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D5F4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D5F9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D5FE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D603 06                         @damage2:	dc.b 6
0001D604 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D609 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D60E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D613 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D618 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D61D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D622                            		even
0001D622                            		even
0001D622                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D622                            ; ---------------------------------------------------------------------------
0001D622                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D622                            ; ---------------------------------------------------------------------------
0001D622                            Map_FZLegs_internal:
0001D622 0000                       		dc.w @extended-Map_FZLegs_internal
0001D624 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D626 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D628 02                         @extended:	dc.b 2
0001D629 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D62E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D633 03                         @halfway:	dc.b 3
0001D634 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D639 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D63E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D643 02                         @retracted:	dc.b 2
0001D644 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D649 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D64E                            		even
0001D64E                            		even
0001D64E                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D64E                            ; ---------------------------------------------------------------------------
0001D64E                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D64E                            ; ---------------------------------------------------------------------------
0001D64E                            
0001D64E                            Obj84_Delete:
0001D64E 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001D654                            ; ===========================================================================
0001D654                            
0001D654                            EggmanCylinder:
0001D654 7000                       		moveq	#0,d0
0001D656 1028 0024                  		move.b	obRoutine(a0),d0
0001D65A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D65E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D662                            ; ===========================================================================
0001D662 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D664 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D666 0000                       		dc.w loc_1A57E-Obj84_Index
0001D668                            
0001D668 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D66C 2550 0620                  		dc.w $2550, $620
0001D670 2490 04C0                  		dc.w $2490, $4C0
0001D674 2510 04C0                  		dc.w $2510, $4C0
0001D678                            ; ===========================================================================
0001D678                            
0001D678                            Obj84_Main:	; Routine
0001D678 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D67C 7000                       		moveq	#0,d0
0001D67E 1028 0028                  		move.b	obSubtype(a0),d0
0001D682 D040                       		add.w	d0,d0
0001D684 D2C0                       		adda.w	d0,a1
0001D686 117C 0004 0001             		move.b	#4,obRender(a0)
0001D68C 08E8 0007 0001             		bset	#7,obRender(a0)
0001D692 08E8 0004 0001             		bset	#4,obRender(a0)
0001D698 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D69E 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D6A6 3159 0008                  		move.w	(a1)+,obX(a0)
0001D6AA 3151 000C                  		move.w	(a1),obY(a0)
0001D6AE 3159 0038                  		move.w	(a1)+,$38(a0)
0001D6B2 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D6B8 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D6BE 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D6C4 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D6CA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D6D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D6D4                            
0001D6D4                            loc_1A4CE:	; Routine 2
0001D6D4 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D6DA 6F00                       		ble.s	loc_1A4DC
0001D6DC 08E8 0001 0001             		bset	#1,obRender(a0)
0001D6E2                            
0001D6E2                            loc_1A4DC:
0001D6E2 42A8 003C                  		clr.l	$3C(a0)
0001D6E6 4A28 0029                  		tst.b	$29(a0)
0001D6EA 6700                       		beq.s	loc_1A4EA
0001D6EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D6F0                            
0001D6F0                            loc_1A4EA:
0001D6F0 2028 003C                  		move.l	$3C(a0),d0
0001D6F4 2228 0038                  		move.l	$38(a0),d1
0001D6F8 D280                       		add.l	d0,d1
0001D6FA 4841                       		swap	d1
0001D6FC 3141 000C                  		move.w	d1,obY(a0)
0001D700 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D706 6600                       		bne.s	loc_1A524
0001D708 4A68 0030                  		tst.w	$30(a0)
0001D70C 6A00                       		bpl.s	loc_1A524
0001D70E 70F6                       		moveq	#-$A,d0
0001D710 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D716 6F00                       		ble.s	loc_1A514
0001D718 700E                       		moveq	#$E,d0
0001D71A                            
0001D71A                            loc_1A514:
0001D71A D240                       		add.w	d0,d1
0001D71C 2268 0034                  		movea.l	$34(a0),a1
0001D720 3341 000C                  		move.w	d1,obY(a1)
0001D724 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D72A                            
0001D72A                            loc_1A524:
0001D72A 323C 002B                  		move.w	#$2B,d1
0001D72E 343C 0060                  		move.w	#$60,d2
0001D732 363C 0061                  		move.w	#$61,d3
0001D736 3828 0008                  		move.w	obX(a0),d4
0001D73A 4EB9 0001 197A             		jsr	(SolidObject).l
0001D740 7000                       		moveq	#0,d0
0001D742 3228 003C                  		move.w	$3C(a0),d1
0001D746 6A00                       		bpl.s	loc_1A550
0001D748 4441                       		neg.w	d1
0001D74A 5141                       		subq.w	#8,d1
0001D74C 6500                       		bcs.s	loc_1A55C
0001D74E 5200                       		addq.b	#1,d0
0001D750 E841                       		asr.w	#4,d1
0001D752 D041                       		add.w	d1,d0
0001D754 6000                       		bra.s	loc_1A55C
0001D756                            ; ===========================================================================
0001D756                            
0001D756                            loc_1A550:
0001D756 0441 0027                  		subi.w	#$27,d1
0001D75A 6500                       		bcs.s	loc_1A55C
0001D75C 5200                       		addq.b	#1,d0
0001D75E E841                       		asr.w	#4,d1
0001D760 D041                       		add.w	d1,d0
0001D762                            
0001D762                            loc_1A55C:
0001D762 1140 001A                  		move.b	d0,obFrame(a0)
0001D766 3038 D008                  		move.w	(v_player+obX).w,d0
0001D76A 9068 0008                  		sub.w	obX(a0),d0
0001D76E 6B00                       		bmi.s	loc_1A578
0001D770 0440 0140                  		subi.w	#$140,d0
0001D774 6B00                       		bmi.s	loc_1A578
0001D776 4A28 0001                  		tst.b	obRender(a0)
0001D77A 6A00 FED2                  		bpl.w	Obj84_Delete
0001D77E                            
0001D77E                            loc_1A578:
0001D77E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001D784                            ; ===========================================================================
0001D784                            
0001D784                            loc_1A57E:	; Routine 4
0001D784 7000                       		moveq	#0,d0
0001D786 1028 0028                  		move.b	obSubtype(a0),d0
0001D78A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D78E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D792 6000 FF5C                  		bra.w	loc_1A4EA
0001D796                            ; ===========================================================================
0001D796 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D798 0000                       		dc.w loc_1A598-off_1A590
0001D79A 0000                       		dc.w loc_1A604-off_1A590
0001D79C 0000                       		dc.w loc_1A604-off_1A590
0001D79E                            ; ===========================================================================
0001D79E                            
0001D79E                            loc_1A598:
0001D79E 4A28 0029                  		tst.b	$29(a0)
0001D7A2 6600                       		bne.s	loc_1A5D4
0001D7A4 2268 0034                  		movea.l	$34(a0),a1
0001D7A8 4A29 0021                  		tst.b	obColProp(a1)
0001D7AC 6600                       		bne.s	loc_1A5B4
0001D7AE 6100 D20C                  		bsr.w	BossDefeated
0001D7B2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D7BA                            
0001D7BA                            loc_1A5B4:
0001D7BA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D7C2 6400                       		bcc.s	locret_1A602
0001D7C4 42A8 003C                  		clr.l	$3C(a0)
0001D7C8 2268 0034                  		movea.l	$34(a0),a1
0001D7CC 5369 0032                  		subq.w	#1,$32(a1)
0001D7D0 4269 0030                  		clr.w	$30(a1)
0001D7D4 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D7D8 4E75                       		rts	
0001D7DA                            ; ===========================================================================
0001D7DA                            
0001D7DA                            loc_1A5D4:
0001D7DA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D7E0 6C00                       		bge.s	loc_1A5E4
0001D7E2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D7EA                            
0001D7EA                            loc_1A5E4:
0001D7EA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D7F2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D7F8 6E00                       		bgt.s	locret_1A602
0001D7FA 4268 003E                  		clr.w	$3E(a0)
0001D7FE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D804 4228 0029                  		clr.b	$29(a0)
0001D808                            
0001D808                            locret_1A602:
0001D808 4E75                       		rts	
0001D80A                            ; ===========================================================================
0001D80A                            
0001D80A                            loc_1A604:
0001D80A 08E8 0001 0001             		bset	#1,obRender(a0)
0001D810 4A28 0029                  		tst.b	$29(a0)
0001D814 6600                       		bne.s	loc_1A646
0001D816 2268 0034                  		movea.l	$34(a0),a1
0001D81A 4A29 0021                  		tst.b	obColProp(a1)
0001D81E 6600                       		bne.s	loc_1A626
0001D820 6100 D19A                  		bsr.w	BossDefeated
0001D824 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D82C                            
0001D82C                            loc_1A626:
0001D82C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D834 6400                       		bcc.s	locret_1A674
0001D836 42A8 003C                  		clr.l	$3C(a0)
0001D83A 2268 0034                  		movea.l	$34(a0),a1
0001D83E 5369 0032                  		subq.w	#1,$32(a1)
0001D842 4269 0030                  		clr.w	$30(a1)
0001D846 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D84A 4E75                       		rts	
0001D84C                            ; ===========================================================================
0001D84C                            
0001D84C                            loc_1A646:
0001D84C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D852 6D00                       		blt.s	loc_1A656
0001D854 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D85C                            
0001D85C                            loc_1A656:
0001D85C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D864 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D86A 6D00                       		blt.s	locret_1A674
0001D86C 4268 003E                  		clr.w	$3E(a0)
0001D870 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D876 4228 0029                  		clr.b	$29(a0)
0001D87A                            
0001D87A                            locret_1A674:
0001D87A 4E75                       		rts	
0001D87A 4E75                       		rts	
0001D87C                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D87C                            ; --------------------------------------------------------------------------------
0001D87C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D87C                            ; --------------------------------------------------------------------------------
0001D87C                            
0001D87C                            SME_SCUpI:	
0001D87C 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D880 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D884 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D888 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D88C 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D890 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D894 06                         SME_SCUpI_18:	dc.b 6	
0001D895 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D89A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D89F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8A4 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8A9 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8AE A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8B3 08                         SME_SCUpI_37:	dc.b 8	
0001D8B4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8B9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8BE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8C3 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8C8 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8CD D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8D2 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8D7 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8DC 0A                         SME_SCUpI_60:	dc.b $A	
0001D8DD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8E2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8E7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8EC B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8F1 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8F6 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8FB D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D900 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D905 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D90A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D90F 0C                         SME_SCUpI_93:	dc.b $C	
0001D910 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D915 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D91A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D91F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D924 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D929 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D92E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D933 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D938 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D93D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D942 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D947 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D94C 0D                         SME_SCUpI_D0:	dc.b $D	
0001D94D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D952 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D957 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D95C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D961 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D966 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D96B D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D970 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D975 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D97A 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D97F 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D984 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D989 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D98E 0E                         SME_SCUpI_112:	dc.b $E	
0001D98F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D994 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D999 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D99E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9A3 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9A8 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9AD D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9B2 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9B7 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9BC 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9C1 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9C6 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9CB 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9D0 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9D5 0E                         SME_SCUpI_159:	dc.b $E	
0001D9D6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9DB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9E0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9E5 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9EA B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9EF D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9F4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9F9 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9FE F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA03 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA08 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA0D 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA12 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA17 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA1C 0E                         SME_SCUpI_1A0:	dc.b $E	
0001DA1D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA22 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA27 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA2C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA31 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA36 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA3B D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA40 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA45 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA4A 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA4F 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA54 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA59 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA5E A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA63 0E                         SME_SCUpI_1E7:	dc.b $E	
0001DA64 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA69 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA6E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA73 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA78 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA7D D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA82 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA87 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA8C F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA91 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA96 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA9B 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAA0 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAA5 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DAAA 0E                         SME_SCUpI_22E:	dc.b $E	
0001DAAB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DAB0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DAB5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DABA B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DABF B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAC4 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAC9 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DACE F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAD3 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAD8 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DADD 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DAE2 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAE7 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAEC A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DAF1 0E                         SME_SCUpI_275:	dc.b $E	
0001DAF2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DAF7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DAFC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB01 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB06 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB0B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB10 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB15 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB1A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB1F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB24 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB29 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB2E 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB33 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB38 02                         SME_SCUpI_2BC:	dc.b 2	
0001DB39 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DB3E 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DB44 00                         		even
0001DB44 00                         		even
0001DB44                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DB44                            ; ---------------------------------------------------------------------------
0001DB44                            ; Object 86 - energy balls (FZ)
0001DB44                            ; ---------------------------------------------------------------------------
0001DB44                            
0001DB44                            BossPlasma:
0001DB44 7000                       		moveq	#0,d0
0001DB46 1028 0024                  		move.b	obRoutine(a0),d0
0001DB4A 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DB4E 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DB52                            ; ===========================================================================
0001DB52 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DB54 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DB56 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DB58 0000                       		dc.w loc_1A962-Obj86_Index
0001DB5A 0000                       		dc.w loc_1A982-Obj86_Index
0001DB5C                            ; ===========================================================================
0001DB5C                            
0001DB5C                            Obj86_Main:	; Routine 0
0001DB5C 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DB62 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DB68 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DB6E 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DB76 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB7C 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DB82 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DB88 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DB8E 117C 0004 0001             		move.b	#4,obRender(a0)
0001DB94 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB9E                            
0001DB9E                            Obj86_Generator:; Routine 2
0001DB9E 2268 0034                  		movea.l	$34(a0),a1
0001DBA2 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DBA8 6600                       		bne.s	loc_1A850
0001DBAA 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DBAE 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DBB4 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001DBBA                            ; ===========================================================================
0001DBBA                            
0001DBBA                            loc_1A850:
0001DBBA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DBC0 4A28 0029                  		tst.b	$29(a0)
0001DBC4 6700                       		beq.s	loc_1A86C
0001DBC6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DBCA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DBD0 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DBD6                            
0001DBD6                            loc_1A86C:
0001DBD6 323C 0013                  		move.w	#$13,d1
0001DBDA 343C 0008                  		move.w	#8,d2
0001DBDE 363C 0011                  		move.w	#$11,d3
0001DBE2 3828 0008                  		move.w	obX(a0),d4
0001DBE6 4EB9 0001 197A             		jsr	(SolidObject).l
0001DBEC 3038 D008                  		move.w	(v_player+obX).w,d0
0001DBF0 9068 0008                  		sub.w	obX(a0),d0
0001DBF4 6B00                       		bmi.s	loc_1A89A
0001DBF6 0440 0140                  		subi.w	#$140,d0
0001DBFA 6B00                       		bmi.s	loc_1A89A
0001DBFC 4A28 0001                  		tst.b	obRender(a0)
0001DC00 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DC04                            
0001DC04                            loc_1A89A:
0001DC04 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DC08 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001DC0E 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001DC14                            ; ===========================================================================
0001DC14                            
0001DC14                            Obj86_MakeBalls:; Routine 4
0001DC14 4A28 0029                  		tst.b	$29(a0)
0001DC18 6700 0000                  		beq.w	loc_1A954
0001DC1C 4228 0029                  		clr.b	$29(a0)
0001DC20 D068 0030                  		add.w	$30(a0),d0
0001DC24 0240 001E                  		andi.w	#$1E,d0
0001DC28 D4C0                       		adda.w	d0,a2
0001DC2A 5868 0030                  		addq.w	#4,$30(a0)
0001DC2E 4268 0032                  		clr.w	$32(a0)
0001DC32 7403                       		moveq	#3,d2
0001DC34                            
0001DC34                            Obj86_Loop:
0001DC34 4EB9 0000 F9EE             		jsr	(FindNextFreeObj).l
0001DC3A 6600 0000                  		bne.w	loc_1A954
0001DC3E 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DC42 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DC48 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DC4E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DC54 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DC5A 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DC62 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DC68 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DC6E 137C 0000 0020             		move.b	#0,obColType(a1)
0001DC74 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DC7A 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DC80 137C 0004 0001             		move.b	#4,obRender(a1)
0001DC86 08E9 0007 0001             		bset	#7,obRender(a1)
0001DC8C 2348 0034                  		move.l	a0,$34(a1)
0001DC90 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001DC96 3228 0032                  		move.w	$32(a0),d1
0001DC9A C3FC FFB1                  		muls.w	#-$4F,d1
0001DC9E 0641 2578                  		addi.w	#$2578,d1
0001DCA2 0240 001F                  		andi.w	#$1F,d0
0001DCA6 0440 0010                  		subi.w	#$10,d0
0001DCAA D041                       		add.w	d1,d0
0001DCAC 3340 0030                  		move.w	d0,$30(a1)
0001DCB0 5268 0032                  		addq.w	#1,$32(a0)
0001DCB4 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DCBA 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DCBE                            
0001DCBE                            loc_1A954:
0001DCBE 4A68 0032                  		tst.w	$32(a0)
0001DCC2 6600                       		bne.s	loc_1A95E
0001DCC4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DCC8                            
0001DCC8                            loc_1A95E:
0001DCC8 6000 FF0C                  		bra.w	loc_1A86C
0001DCCC                            ; ===========================================================================
0001DCCC                            
0001DCCC                            loc_1A962:	; Routine 6
0001DCCC 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DCD2 4A68 0038                  		tst.w	$38(a0)
0001DCD6 6600                       		bne.s	loc_1A97E
0001DCD8 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DCDE 2268 0034                  		movea.l	$34(a0),a1
0001DCE2 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DCE8                            
0001DCE8                            loc_1A97E:
0001DCE8 6000 FEEC                  		bra.w	loc_1A86C
0001DCEC                            ; ===========================================================================
0001DCEC                            
0001DCEC                            loc_1A982:	; Routine 8
0001DCEC 7000                       		moveq	#0,d0
0001DCEE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DCF2 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DCF6 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DCFA 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DCFE 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001DD04 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001DD0A                            ; ===========================================================================
0001DD0A 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DD0C 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DD0E 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DD10                            ; ===========================================================================
0001DD10                            
0001DD10                            loc_1A9A6:
0001DD10 3028 0030                  		move.w	$30(a0),d0
0001DD14 9068 0008                  		sub.w	obX(a0),d0
0001DD18 E940                       		asl.w	#4,d0
0001DD1A 3140 0010                  		move.w	d0,obVelX(a0)
0001DD1E 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD24 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DD28 4E75                       		rts	
0001DD2A                            ; ===========================================================================
0001DD2A                            
0001DD2A                            loc_1A9C0:
0001DD2A 4A68 0010                  		tst.w	obVelX(a0)
0001DD2E 6700                       		beq.s	loc_1A9E6
0001DD30 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001DD36 3028 0008                  		move.w	obX(a0),d0
0001DD3A 9068 0030                  		sub.w	$30(a0),d0
0001DD3E 6400                       		bcc.s	loc_1A9E6
0001DD40 4268 0010                  		clr.w	obVelX(a0)
0001DD44 D168 0008                  		add.w	d0,obX(a0)
0001DD48 2268 0034                  		movea.l	$34(a0),a1
0001DD4C 5369 0032                  		subq.w	#1,$32(a1)
0001DD50                            
0001DD50                            loc_1A9E6:
0001DD50 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DD56 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DD5A 6600                       		bne.s	locret_1AA1C
0001DD5C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DD60 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DD66 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DD6C 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD72 7000                       		moveq	#0,d0
0001DD74 3038 D008                  		move.w	(v_player+obX).w,d0
0001DD78 9068 0008                  		sub.w	obX(a0),d0
0001DD7C 3140 0010                  		move.w	d0,obVelX(a0)
0001DD80 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DD86                            
0001DD86                            locret_1AA1C:
0001DD86 4E75                       		rts	
0001DD88                            ; ===========================================================================
0001DD88                            
0001DD88                            loc_1AA1E:
0001DD88 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001DD8E 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DD94 6400                       		bcc.s	loc_1AA34
0001DD96 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DD9A 6700                       		beq.s	loc_1AA34
0001DD9C 4E75                       		rts	
0001DD9E                            ; ===========================================================================
0001DD9E                            
0001DD9E                            loc_1AA34:
0001DD9E 2268 0034                  		movea.l	$34(a0),a1
0001DDA2 5369 0038                  		subq.w	#1,$38(a1)
0001DDA6 6000 F8A6                  		bra.w	Obj84_Delete
0001DDA6 6000 F8A6                  		bra.w	Obj84_Delete
0001DDAA                            		include	"_anim\Plasma Ball Launcher.asm"
0001DDAA                            ; ---------------------------------------------------------------------------
0001DDAA                            ; Animation script - energy ball launcher (FZ)
0001DDAA                            ; ---------------------------------------------------------------------------
0001DDAA 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DDAC 0000                       		dc.w @redsparking-Ani_PLaunch
0001DDAE 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DDB0 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DDB4 00                         		even
0001DDB4 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DDBA                            		even
0001DDBA 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DDC0                            		even
0001DDC0                            		even
0001DDC0                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DDC0                            ; ---------------------------------------------------------------------------
0001DDC0                            ; Sprite mappings - energy ball	launcher (FZ)
0001DDC0                            ; ---------------------------------------------------------------------------
0001DDC0                            Map_PLaunch_internal:
0001DDC0 0000                       		dc.w @red-Map_PLaunch_internal
0001DDC2 0000                       		dc.w @white-Map_PLaunch_internal
0001DDC4 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DDC6 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DDC8 01                         @red:		dc.b 1
0001DDC9 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DDCE 01                         @white:		dc.b 1
0001DDCF F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DDD4 01                         @sparking1:	dc.b 1
0001DDD5 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DDDA 01                         @sparking2:	dc.b 1
0001DDDB F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DDE0                            		even
0001DDE0                            		even
0001DDE0                            		include	"_anim\Plasma Balls.asm"
0001DDE0                            ; ---------------------------------------------------------------------------
0001DDE0                            ; Animation script - energy balls (FZ)
0001DDE0                            ; ---------------------------------------------------------------------------
0001DDE0 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DDE2 0000                       		dc.w @short-Ani_Plasma
0001DDE4 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DDF3 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DE02 0A05 FF                    		dc.b $A, 5, afEnd
0001DE06 00                         		even
0001DE06 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DE10                            		even
0001DE10                            		even
0001DE10                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DE10                            ; ---------------------------------------------------------------------------
0001DE10                            ; Sprite mappings - energy balls (FZ)
0001DE10                            ; ---------------------------------------------------------------------------
0001DE10                            Map_Plasma_internal:
0001DE10 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DE12 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DE14 0000                       		dc.w @white1-Map_Plasma_internal
0001DE16 0000                       		dc.w @white2-Map_Plasma_internal
0001DE18 0000                       		dc.w @white3-Map_Plasma_internal
0001DE1A 0000                       		dc.w @white4-Map_Plasma_internal
0001DE1C 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DE1E 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DE20 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DE22 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DE24 0000                       		dc.w @blank-Map_Plasma_internal
0001DE26 02                         @fuzzy1:	dc.b 2
0001DE27 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DE2C 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DE31 02                         @fuzzy2:	dc.b 2
0001DE32 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DE37 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DE3C 02                         @white1:	dc.b 2
0001DE3D F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DE42 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DE47 02                         @white2:	dc.b 2
0001DE48 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DE4D 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DE52 02                         @white3:	dc.b 2
0001DE53 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DE58 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DE5D 02                         @white4:	dc.b 2
0001DE5E F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DE63 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DE68 01                         @fuzzy3:	dc.b 1
0001DE69 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DE6E 01                         @fuzzy4:	dc.b 1
0001DE6F F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DE74 02                         @fuzzy5:	dc.b 2
0001DE75 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DE7A 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DE7F 02                         @fuzzy6:	dc.b 2
0001DE80 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DE85 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DE8A 00                         @blank:		dc.b 0
0001DE8C 00                         		even
0001DE8C 00                         		even
0001DE8C                            
0001DE8C                            		include	"_incObj\3E Prison Capsule.asm"
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C                            ; Object 3E - prison capsule
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C                            
0001DE8C                            Prison:
0001DE8C 7000                       		moveq	#0,d0
0001DE8E 1028 0024                  		move.b	obRoutine(a0),d0
0001DE92 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DE96 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DEB6 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001DEBC                            
0001DEBC                            	@delete:
0001DEBC 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001DEC2                            ; ===========================================================================
0001DEC2 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DEC4 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DEC6 0000                       		dc.w Pri_Switched-Pri_Index
0001DEC8 0000                       		dc.w Pri_Explosion-Pri_Index
0001DECA 0000                       		dc.w Pri_Explosion-Pri_Index
0001DECC 0000                       		dc.w Pri_Explosion-Pri_Index
0001DECE 0000                       		dc.w Pri_Animals-Pri_Index
0001DED0 0000                       		dc.w Pri_EndAct-Pri_Index
0001DED2                            
0001DED2 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DED2                            
0001DED2 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DED6 040C 0501                  		dc.b 4,	$C, 5, 1
0001DEDA 0610 0403                  		dc.b 6,	$10, 4,	3
0001DEDE 0810 0305                  		dc.b 8,	$10, 3,	5
0001DEE2                            ; ===========================================================================
0001DEE2                            
0001DEE2                            Pri_Main:	; Routine 0
0001DEE2 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DEEA 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DEF0 117C 0004 0001             		move.b	#4,obRender(a0)
0001DEF6 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DEFC 7000                       		moveq	#0,d0
0001DEFE 1028 0028                  		move.b	obSubtype(a0),d0
0001DF02 E548                       		lsl.w	#2,d0
0001DF04 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DF08 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DF0C 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DF10 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DF14 3028 0018                  		move.w obPriority(a0),d0 
0001DF18 E248                       		lsr.w #1,d0 
0001DF1A 0240 0380                  		andi.w #$380,d0 
0001DF1E 3140 0018                  		move.w d0,obPriority(a0)		
0001DF22 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DF26 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DF2A 6600                       		bne.s	@not02		; if not, branch
0001DF2C                            
0001DF2C 117C 0006 0020             		move.b	#6,obColType(a0)
0001DF32 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DF38                            
0001DF38                            	@not02:
0001DF38 4E75                       		rts	
0001DF3A                            ; ===========================================================================
0001DF3A                            
0001DF3A                            Pri_BodyMain:	; Routine 2
0001DF3A 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DF40 6700                       		beq.s	@chkopened
0001DF42 323C 002B                  		move.w	#$2B,d1
0001DF46 343C 0018                  		move.w	#$18,d2
0001DF4A 363C 0018                  		move.w	#$18,d3
0001DF4E 3828 0008                  		move.w	obX(a0),d4
0001DF52 4EF9 0001 197A             		jmp	(SolidObject).l
0001DF58                            ; ===========================================================================
0001DF58                            
0001DF58                            @chkopened:
0001DF58 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DF5C 6700                       		beq.s	@open		; if yes, branch
0001DF5E 4228 0025                  		clr.b	ob2ndRout(a0)
0001DF62 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF68 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF6E                            
0001DF6E                            	@open:
0001DF6E 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DF74                            		
0001DF74                            	@rts:
0001DF74 4E75                       		rts
0001DF76                            ; ===========================================================================
0001DF76                            
0001DF76                            Pri_Switched:	; Routine 4
0001DF76 323C 0017                  		move.w	#$17,d1
0001DF7A 343C 0008                  		move.w	#8,d2
0001DF7E 363C 0008                  		move.w	#8,d3
0001DF82 3828 0008                  		move.w	obX(a0),d4
0001DF86 4EB9 0001 197A             		jsr	(SolidObject).l
0001DF8C 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DF92 4EB9 0000 C4F8             		jsr	(AnimateSprite).l
0001DF98 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DF9E 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DFA2 6700                       		beq.s	@open2		; if yes, branch
0001DFA4                            
0001DFA4 5068 000C                  		addq.w	#8,obY(a0)
0001DFA8 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DFAE 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DFB4 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DFB8 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DFBC 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DFC2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DFC8 4228 0025                  		clr.b	ob2ndRout(a0)
0001DFCC 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DFD2 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DFD8 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001DFDC 6700                       		beq.s	@open2
0001DFDE 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001DFEC                            
0001DFEC                            	@open2:
0001DFEC 4E75                       		rts	
0001DFEE                            ; ===========================================================================
0001DFEE                            
0001DFEE                            Pri_Explosion:	; Routine 6, 8, $A
0001DFEE 7007                       		moveq	#7,d0
0001DFF0 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DFF4 6600                       		bne.s	@noexplosion
0001DFF6 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001DFFC 6600                       		bne.s	@noexplosion
0001DFFE 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001E002 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E008 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E00E 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001E014 7200                       		moveq	#0,d1
0001E016 1200                       		move.b	d0,d1
0001E018 E409                       		lsr.b	#2,d1
0001E01A 0441 0020                  		subi.w	#$20,d1
0001E01E D369 0008                  		add.w	d1,obX(a1)
0001E022 E048                       		lsr.w	#8,d0
0001E024 E608                       		lsr.b	#3,d0
0001E026 D169 000C                  		add.w	d0,obY(a1)
0001E02A                            
0001E02A                            	@noexplosion:
0001E02A 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E02E 6700                       		beq.s	@makeanimal
0001E030 4E75                       		rts	
0001E032                            ; ===========================================================================
0001E032                            
0001E032                            @makeanimal:
0001E032 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001E038 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001E03E 117C 0006 001A             		move.b	#6,obFrame(a0)
0001E044 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001E04A 0668 0020 000C             		addi.w	#$20,obY(a0)
0001E050 7C07                       		moveq	#7,d6
0001E052 3A3C 009A                  		move.w	#$9A,d5
0001E056 78E4                       		moveq	#-$1C,d4
0001E058                            
0001E058                            	@loop:
0001E058 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001E05E 6600                       		bne.s	@fail
0001E060 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E064 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E06A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E070 D969 0008                  		add.w	d4,obX(a1)
0001E074 5E44                       		addq.w	#7,d4
0001E076 3345 0036                  		move.w	d5,$36(a1)
0001E07A 5145                       		subq.w	#8,d5
0001E07C 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E080                            
0001E080                            	@fail:
0001E080 4E75                       		rts	
0001E082                            ; ===========================================================================
0001E082                            
0001E082                            Pri_Animals:	; Routine $C
0001E082 7007                       		moveq	#7,d0
0001E084 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E088 6600                       		bne.s	@noanimal
0001E08A 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001E090 6600                       		bne.s	@noanimal
0001E092 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E096 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E09C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0A2 4EB9 0000 3B7C             		jsr	(RandomNumber).l
0001E0A8 0240 001F                  		andi.w	#$1F,d0
0001E0AC 5D40                       		subq.w	#6,d0
0001E0AE 4A41                       		tst.w	d1
0001E0B0 6A00                       		bpl.s	@ispositive
0001E0B2 4440                       		neg.w	d0
0001E0B4                            
0001E0B4                            	@ispositive:
0001E0B4 D169 0008                  		add.w	d0,obX(a1)
0001E0B8 337C 000C 0036             		move.w	#$C,$36(a1)
0001E0BE                            
0001E0BE                            	@noanimal:
0001E0BE 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E0C2 6600                       		bne.s	@wait
0001E0C4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E0C8 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E0CE                            
0001E0CE                            	@wait:
0001E0CE 4E75                       		rts	
0001E0D0                            ; ===========================================================================
0001E0D0                            
0001E0D0                            Pri_EndAct:	; Routine $E
0001E0D0 703E                       		moveq	#$3E,d0
0001E0D2 7228                       		moveq	#id_Animals,d1
0001E0D4 7440                       		moveq	#$40,d2
0001E0D6 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E0DA                            
0001E0DA                            	@findanimal:
0001E0DA B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E0DC 6700                       		beq.s	@found		; if yes, branch
0001E0DE D2C2                       		adda.w	d2,a1		; next object RAM
0001E0E0 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E0E4                            
0001E0E4 4EB9 0001 0C9C             		jsr	(GotThroughAct1).l
0001E0EA 4EF9 0000 F47E             		jmp	(DeleteObject).l
0001E0F0                            
0001E0F0                            	@found:
0001E0F0 4E75                       		rts	
0001E0F0 4E75                       		rts	
0001E0F2                            		include	"_anim\Prison Capsule.asm"
0001E0F2                            ; ---------------------------------------------------------------------------
0001E0F2                            ; Animation script - prison capsule
0001E0F2                            ; ---------------------------------------------------------------------------
0001E0F2 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E0F4 0000                       		dc.w @switchflash-Ani_Pri
0001E0F6 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E0FA                            		even
0001E0FA                            		even
0001E0FA                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E0FA                            ; ---------------------------------------------------------------------------
0001E0FA                            ; Sprite mappings - prison capsule
0001E0FA                            ; ---------------------------------------------------------------------------
0001E0FA                            Map_Pri_internal:
0001E0FA 0000                       		dc.w @capsule-Map_Pri_internal
0001E0FC 0000                       		dc.w @switch1-Map_Pri_internal
0001E0FE 0000                       		dc.w @broken-Map_Pri_internal
0001E100 0000                       		dc.w @switch2-Map_Pri_internal
0001E102 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E104 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E106 0000                       		dc.w @blank-Map_Pri_internal
0001E108 07                         @capsule:	dc.b 7
0001E109 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E10E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E113 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E118 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E11D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E122 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E127 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E12C 01                         @switch1:	dc.b 1
0001E12D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E132 06                         @broken:	dc.b 6
0001E133 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E138 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E13D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E142 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E147 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E14C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E151 01                         @switch2:	dc.b 1
0001E152 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E157 02                         @unusedthing1:	dc.b 2
0001E158 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E15D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E162 01                         @unusedthing2:	dc.b 1
0001E163 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E168 00                         @blank:		dc.b 0
0001E16A 00                         		even
0001E16A 00                         		even
0001E16A                            
0001E16A                            		include	"_incObj\sub ReactToItem.asm"
0001E16A                            ; ---------------------------------------------------------------------------
0001E16A                            ; Subroutine to react to obColType(a0)
0001E16A                            ; ---------------------------------------------------------------------------
0001E16A                            
0001E16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E16A                            
0001E16A                            
0001E16A                            ReactToItem:
0001E16A 4E71                       		nop	
0001E16C 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E170 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E174 5142                       		subq.w	#8,d2
0001E176 7A00                       		moveq	#0,d5
0001E178 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E17C 5705                       		subq.b	#3,d5
0001E17E 9645                       		sub.w	d5,d3
0001E180 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E186 6600                       		bne.s	@notducking	; if not, branch
0001E188 0643 000C                  		addi.w	#$C,d3
0001E18C 7A0A                       		moveq	#$A,d5
0001E18E                            
0001E18E                            	@notducking:
0001E18E 383C 0010                  		move.w	#$10,d4
0001E192 DA45                       		add.w	d5,d5
0001E194 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E198 3C3C 005F                  		move.w	#$5F,d6
0001E19C                            
0001E19C                            @loop:
0001E19C 4A29 0001                  		tst.b	obRender(a1)
0001E1A0 6A00                       		bpl.s	@next
0001E1A2 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E1A6 6600                       		bne.s	@proximity	; if nonzero, branch
0001E1A8                            
0001E1A8                            	@next:
0001E1A8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E1AC 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E1B0                            
0001E1B0 7000                       		moveq	#0,d0
0001E1B2 4E75                       		rts	
0001E1B4                            ; ===========================================================================
0001E1B4                            @sizes:		;   width, height
0001E1B4 1414                       		dc.b  $14, $14		; $01
0001E1B6 0C14                       		dc.b   $C, $14		; $02
0001E1B8 140C                       		dc.b  $14,  $C		; $03
0001E1BA 0410                       		dc.b	4, $10		; $04
0001E1BC 0C12                       		dc.b   $C, $12		; $05
0001E1BE 1010                       		dc.b  $10, $10		; $06
0001E1C0 0606                       		dc.b	6,   6		; $07
0001E1C2 180C                       		dc.b  $18,  $C		; $08
0001E1C4 0C10                       		dc.b   $C, $10		; $09
0001E1C6 100C                       		dc.b  $10,  $C		; $0A
0001E1C8 0808                       		dc.b	8,   8		; $0B
0001E1CA 1410                       		dc.b  $14, $10		; $0C
0001E1CC 1408                       		dc.b  $14,   8		; $0D
0001E1CE 0E0E                       		dc.b   $E,  $E		; $0E
0001E1D0 1818                       		dc.b  $18, $18		; $0F
0001E1D2 2810                       		dc.b  $28, $10		; $10
0001E1D4 1018                       		dc.b  $10, $18		; $11
0001E1D6 0810                       		dc.b	8, $10		; $12
0001E1D8 2070                       		dc.b  $20, $70		; $13
0001E1DA 4020                       		dc.b  $40, $20		; $14
0001E1DC 8020                       		dc.b  $80, $20		; $15
0001E1DE 2020                       		dc.b  $20, $20		; $16
0001E1E0 0808                       		dc.b	8,   8		; $17
0001E1E2 0404                       		dc.b	4,   4		; $18
0001E1E4 2008                       		dc.b  $20,   8		; $19
0001E1E6 0C0C                       		dc.b   $C,  $C		; $1A
0001E1E8 0804                       		dc.b	8,   4		; $1B
0001E1EA 1804                       		dc.b  $18,   4		; $1C
0001E1EC 2804                       		dc.b  $28,   4		; $1D
0001E1EE 0408                       		dc.b	4,   8		; $1E
0001E1F0 0418                       		dc.b	4, $18		; $1F
0001E1F2 0428                       		dc.b	4, $28		; $20
0001E1F4 0420                       		dc.b	4, $20		; $21
0001E1F6 1818                       		dc.b  $18, $18		; $22
0001E1F8 0C18                       		dc.b   $C, $18		; $23
0001E1FA 4808                       		dc.b  $48,   8		; $24
0001E1FC                            ; ===========================================================================
0001E1FC                            
0001E1FC                            @proximity:
0001E1FC 0240 003F                  		andi.w	#$3F,d0
0001E200 D040                       		add.w	d0,d0
0001E202 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E206 7200                       		moveq	#0,d1
0001E208 121A                       		move.b	(a2)+,d1
0001E20A 3029 0008                  		move.w	obX(a1),d0
0001E20E 9041                       		sub.w	d1,d0
0001E210 9042                       		sub.w	d2,d0
0001E212 6400                       		bcc.s	@outsidex	; branch if not touching
0001E214 D241                       		add.w	d1,d1
0001E216 D041                       		add.w	d1,d0
0001E218 6500                       		bcs.s	@withinx	; branch if touching
0001E21A 6000 FF8C                  		bra.w	@next
0001E21E                            ; ===========================================================================
0001E21E                            
0001E21E                            @outsidex:
0001E21E 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E222 B044                       		cmp.w	d4,d0
0001E224 6200 FF82                  		bhi.w	@next
0001E228                            
0001E228                            @withinx:
0001E228 7200                       		moveq	#0,d1
0001E22A 121A                       		move.b	(a2)+,d1
0001E22C 3029 000C                  		move.w	obY(a1),d0
0001E230 9041                       		sub.w	d1,d0
0001E232 9043                       		sub.w	d3,d0
0001E234 6400                       		bcc.s	@outsidey	; branch if not touching
0001E236 D241                       		add.w	d1,d1
0001E238 D240                       		add.w	d0,d1
0001E23A 6500                       		bcs.s	@withiny	; branch if touching
0001E23C 6000 FF6A                  		bra.w	@next
0001E240                            
0001E240                            ; ===========================================================================
0001E240                            
0001E240                            @outsidey:
0001E240 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E244 B045                       		cmp.w	d5,d0
0001E246 6200 FF60                  		bhi.w	@next
0001E24A                            
0001E24A                            @withiny:
0001E24A                            	@chktype:
0001E24A 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E250 6600 0000                          	bne	NotGHZReact  ;TIS
0001E254 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E258 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E25C 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E260 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E264 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E268 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E26C 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E270                            NotGHZReact:                      ;TIS
0001E270 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E274 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E278 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E27C 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E280 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E284 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E286 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E28A                            
0001E28A                            ; obColType is $40-$7F (powerups)
0001E28A                            
0001E28A 1029 0020                  		move.b	obColType(a1),d0
0001E28E 0200 003F                  		andi.b	#$3F,d0
0001E292 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E296 6700                       		beq.s	React_Monitor	; if yes, branch
0001E298 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E29E 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E2A2 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E2A6                            
0001E2A6                            	@invincible:
0001E2A6 4E75                       		rts	
0001E2A8                            ; ===========================================================================
0001E2A8                            
0001E2A8                            React_Monitor:
0001E2A8 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E2AC 6A00                       		bpl.s	@movingdown	; if not, branch
0001E2AE                            
0001E2AE 3028 000C                  		move.w	obY(a0),d0
0001E2B2 0440 0010                  		subi.w	#$10,d0
0001E2B6 B069 000C                  		cmp.w	obY(a1),d0
0001E2BA 6500                       		bcs.s	@donothing
0001E2BC 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E2C0 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E2C6 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E2CA 6600                       		bne.s	@donothing
0001E2CC 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E2D0 4E75                       		rts	
0001E2D2                            ; ===========================================================================
0001E2D2                            
0001E2D2                            @movingdown:
0001E2D2 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E2D8 6600                       		bne.s	@donothing
0001E2DA 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E2DE 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E2E2 4EB9 0001 5C50             		jsr		BounceJD
0001E2E8                            
0001E2E8                            	@donothing:
0001E2E8 4E75                       		rts	
0001E2EA                            ; ===========================================================================
0001E2EA                            
0001E2EA                            React_Enemy:
0001E2EA 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E2EE 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E2F0 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E2F6 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E2FA 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E300 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E304                            
0001E304                            	@donthurtsonic:
0001E304 4A29 0021                  		tst.b	obColProp(a1)
0001E308 6700                       		beq.s	breakenemy
0001E30A                            
0001E30A 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E30E 4468 0012                  		neg.w	obVelY(a0)
0001E312 E0E8 0010                  		asr	obVelX(a0)
0001E316 E0E8 0012                  		asr	obVelY(a0)
0001E31A 137C 0000 0020             		move.b	#0,obColType(a1)
0001E320 5329 0021                  		subq.b	#1,obColProp(a1)
0001E324 6600                       		bne.s	@flagnotclear
0001E326 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E32C                            
0001E32C                            	@flagnotclear:
0001E32C 4E75                       		rts	
0001E32E                            ; ===========================================================================
0001E32E                            
0001E32E                            breakenemy:
0001E32E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E334 7000                       		moveq	#0,d0
0001E336 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E33A 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E33E 0C40 0006                  		cmpi.w	#6,d0
0001E342 6500                       		bcs.s	@bonusokay
0001E344 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E346                            
0001E346                            	@bonusokay:
0001E346 3340 003E                  		move.w	d0,$3E(a1)
0001E34A 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E34E 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E354 6500                       		bcs.s	@lessthan16	; if not, branch
0001E356 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E35A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E360                            
0001E360                            	@lessthan16:
0001E360 6100 0000                  		bsr.w	AddPoints
0001E364 4EB9 0001 5C50             		jsr		BounceJD
0001E36A 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E36E 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E374 4A68 0012                  		tst.w	obVelY(a0)
0001E378 6B00                       		bmi.s	@bouncedown
0001E37A 3028 000C                  		move.w	obY(a0),d0
0001E37E B069 000C                  		cmp.w	obY(a1),d0
0001E382 6400                       		bcc.s	@bounceup
0001E384 4468 0012                  		neg.w	obVelY(a0)
0001E388 4E75                       		rts	
0001E38A                            ; ===========================================================================
0001E38A                            
0001E38A                            	@bouncedown:
0001E38A 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E390 4E75                       		rts	
0001E392                            
0001E392                            	@bounceup:
0001E392 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E398 4E75                       		rts	
0001E39A                            
0001E39A 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E3A2                            
0001E3A2                            ; ===========================================================================
0001E3A2                            
0001E3A2                            React_Caterkiller:
0001E3A2 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E3A8                            
0001E3A8                            React_ChkHurt:
0001E3A8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E3AC 6700                       		beq.s	notinvincible	; if not, branch
0001E3AE                            
0001E3AE                            	isflashing:
0001E3AE 70FF                       		moveq	#-1,d0
0001E3B0 4E75                       		rts	
0001E3B2                            ; ===========================================================================
0001E3B2                            
0001E3B2                            	notinvincible:
0001E3B2 4E71                       		nop	
0001E3B4 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E3B8 66F4                       		bne.s	isflashing	; if yes, branch
0001E3BA 2449                       		movea.l	a1,a2
0001E3BC                            
0001E3BC                            ; End of function ReactToItem
0001E3BC                            ; continue straight to HurtSonic
0001E3BC                            
0001E3BC                            ; ---------------------------------------------------------------------------
0001E3BC                            ; Hurting Sonic	subroutine
0001E3BC                            ; ---------------------------------------------------------------------------
0001E3BC                            
0001E3BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3BC                            
0001E3BC                            
0001E3BC                            HurtSonic:
0001E3BC 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E3C0 6600                       		bne.s	@hasshield	; if yes, branch
0001E3C2 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E3C6 6600                       		bne.s	@hasshield	; if yes, branch
0001E3C8 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E3CC 6600                       		bne.s	@hasshield	; if yes, branch
0001E3CE 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E3D2 6600                       		bne.s	@hasshield	; if yes, branch
0001E3D4 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E3D8 6700 0000                  		beq.w	@norings	; if not, branch
0001E3DC                            
0001E3DC 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
0001E3E2 6600                       		bne.s	@hasshield
0001E3E4 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E3E8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E3EE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E3F4                            
0001E3F4                            	@hasshield:
0001E3F4 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E3FA 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E3FC 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E400 6700 FFAC                  		beq.w	isflashing
0001E404 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E408 6700 FFA4                  		beq.w	isflashing
0001E40C                            
0001E40C                            	@hasrshield:
0001E40C 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E412 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E414 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E418 6700 FF94                  		beq.w 	isflashing
0001E41C 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E420 6700 FF8C                  		beq.w 	isflashing
0001E424 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E428 6700 FF84                  		beq.w 	isflashing
0001E42C 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E430 6700 FF7C                  		beq.w 	isflashing
0001E434 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E438 6700 FF74                  		beq.w 	isflashing
0001E43C 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E440 6700 FF6C                  		beq.w 	isflashing
0001E444 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E448 6700 FF64                  		beq.w 	isflashing
0001E44C 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E450 6700 FF5C                  		beq.w 	isflashing
0001E454                            
0001E454                            	@hasspshield:
0001E454 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E45A 6600 0000                  		bne.w	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E45E 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E462 6700 FF4A                  		beq.w 	isflashing
0001E466 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E46A 6700 FF42                  		beq.w 	isflashing
0001E46E 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by helix of spikes?
0001E472 6700 FF3A                  		beq.w 	isflashing
0001E476 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E47A 6700 FF32                  		beq.w 	isflashing
0001E47E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E482 6700 FF2A                  		beq.w 	isflashing
0001E486 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E48A 6700 FF22                  		beq.w 	isflashing
0001E48E 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E492 6700 FF1A                  		beq.w 	isflashing
0001E496 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E49A 6700 FF12                  		beq.w 	isflashing
0001E49E 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E4A2 6700 FF0A                  		beq.w 	isflashing
0001E4A6 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E4AA 6700 FF02                  		beq.w 	isflashing
0001E4AE                            
0001E4AE 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E4B2 6700 FE7A                  		beq.w 	breakenemy
0001E4B6 0C12 001E                  		cmpi.b	#$1E,(a2)	; was damage caused by Ball Hog?
0001E4BA 6700 FE72                  		beq.w 	breakenemy
0001E4BE 0C12 002D                  		cmpi.b	#$2D,(a2)	; was damage caused by Burrobot?
0001E4C2 6700 FE6A                  		beq.w 	breakenemy
0001E4C6 0C12 0017                  		cmpi.b	#$17,(a2)	; was damage caused by Jaws?
0001E4CA 6700 FEE2                  		beq.w 	isflashing
0001E4CE 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E4D2 6700 FE5A                  		beq.w 	breakenemy
0001E4D6                            		;cmpi.b	#$5F,(a2)	; was damage caused by Bomb?
0001E4D6                            		;beq.w 	breakenemy
0001E4D6 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E4DA 6700 FE52                  		beq.w 	breakenemy
0001E4DE 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E4E2 6700 FE4A                  		beq.w 	breakenemy
0001E4E6                            
0001E4E6                            	@hurtcont:
0001E4E6 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E4EC                            		;move.b	#0,(v_gshield).w	; remove g shield
0001E4EC 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E4F2                            		
0001E4F2 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E4F8 6700                       		beq.s	@gshieldcheck	;if not, branch
0001E4FA 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E4FE                            		
0001E4FE                            	@gshieldcheck:
0001E4FE 0C38 0000 F5C9             		cmpi.b	#0,(v_gshield).w 	; do you have no g shield?
0001E504 6700                       		beq.s	@hurtcont2			;if not, branch
0001E506 5338 F5C9                  		subq.b	#1,(v_gshield).w	
0001E50A                            		
0001E50A                            	@hurtcont2:
0001E50A 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E510 4EB9 0001 6192             		jsr		Sonic_ResetOnFloor
0001E516 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E51C 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E522 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E528 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E52E 6700                       		beq.s	@isdry		; if not, branch
0001E530                            
0001E530 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E536 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E53C                            
0001E53C                            	@isdry:
0001E53C 3028 0008                  		move.w	obX(a0),d0
0001E540 B06A 0008                  		cmp.w	obX(a2),d0
0001E544 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E546 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E54A                            
0001E54A                            	@isleft:
0001E54A 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E550 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E556 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E55C 317C 0120 0030             		move.w	#$120,$30(a0)
0001E562 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E566 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E568 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E56C 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E56E 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E574 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E57A 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E580 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E584 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E588 6600                       		bne.s	@sound		; if not, branch
0001E58A 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E58E 6600                       		bne.s	@sound		; if not, branch
0001E590 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E594                            
0001E594                            	@sound:
0001E594 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E59A 70FF                       		moveq	#-1,d0
0001E59C 4E75                       		rts	
0001E59E                            
0001E59E                            	@hurtelec:
0001E59E 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E5A4 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E5AA 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E5AE 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E5B2 66E0                       		bne.s	@sound		; if not, branch
0001E5B4 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E5B8 66DA                       		bne.s	@sound		; if not, branch
0001E5BA 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E5BE                            ; ===========================================================================
0001E5BE                            
0001E5BE                            @norings:
0001E5BE 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E5C2 6600 FE30                  		bne.w	@hasshield	; if yes, branch
0001E5C6                            
0001E5C6                            ; ---------------------------------------------------------------------------
0001E5C6                            ; Subroutine to	kill Sonic
0001E5C6                            ; ---------------------------------------------------------------------------
0001E5C6                            
0001E5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5C6                            
0001E5C6                            
0001E5C6                            KillSonic:
0001E5C6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E5CA 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E5CE 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E5D4 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E5DA 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E5E0 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E5E6 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w  ;clear victory animation flag
0001E5EC 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E5F2 4EB9 0001 6192             		jsr		Sonic_ResetOnFloor
0001E5F8 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E5FE 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E604 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E60A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E610 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E616 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E61A 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E61C 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E620 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E622 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E628 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E62E 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E632 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E636 6600                       		bne.s	@sound
0001E638 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E63C                            
0001E63C                            	@sound:
0001E63C 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E642                            
0001E642                            	@dontdie:
0001E642 70FF                       		moveq	#-1,d0
0001E644 4E75                       		rts	
0001E646                            ; End of function KillSonic
0001E646                            Kill_Lava:	
0001E646 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E64C 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E652 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E656 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001E65C                            
0001E65C                            
0001E65C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E65C                            
0001E65C                            
0001E65C                            React_Special:
0001E65C 1229 0020                  		move.b	obColType(a1),d1
0001E660 0201 003F                  		andi.b	#$3F,d1
0001E664 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E668 6700                       		beq.s	@caterkiller	; if yes, branch
0001E66A 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E66E 6700                       		beq.s	@yadrin		; if yes, branch
0001E670 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E674 6700                       		beq.s	@D7orE1		; if yes, branch
0001E676 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E67A 6700                       		beq.s	@D7orE1		; if yes, branch
0001E67C 4E75                       		rts	
0001E67E                            ; ===========================================================================
0001E67E                            
0001E67E                            @caterkiller:
0001E67E 6000 FD22                  		bra.w	React_Caterkiller
0001E682                            ; ===========================================================================
0001E682                            
0001E682                            @yadrin:
0001E682 9A40                       		sub.w	d0,d5
0001E684 0C45 0008                  		cmpi.w	#8,d5
0001E688 6400                       		bcc.s	@normalenemy
0001E68A 3029 0008                  		move.w	obX(a1),d0
0001E68E 5940                       		subq.w	#4,d0
0001E690 0829 0000 0022             		btst	#0,obStatus(a1)
0001E696 6700                       		beq.s	@noflip
0001E698 0440 0010                  		subi.w	#$10,d0
0001E69C                            
0001E69C                            	@noflip:
0001E69C 9042                       		sub.w	d2,d0
0001E69E 6400                       		bcc.s	@loc_1B13C
0001E6A0 0640 0018                  		addi.w	#$18,d0
0001E6A4 6500                       		bcs.s	@loc_1B140
0001E6A6 6000                       		bra.s	@normalenemy
0001E6A8                            ; ===========================================================================
0001E6A8                            
0001E6A8                            	@loc_1B13C:
0001E6A8 B044                       		cmp.w	d4,d0
0001E6AA 6200                       		bhi.s	@normalenemy
0001E6AC                            
0001E6AC                            	@loc_1B140:
0001E6AC 6000 FCFA                  		bra.w	React_ChkHurt
0001E6B0                            ; ===========================================================================
0001E6B0                            
0001E6B0                            	@normalenemy:
0001E6B0 6000 FC38                  		bra.w	React_Enemy
0001E6B4                            ; ===========================================================================
0001E6B4                            
0001E6B4                            @D7orE1:
0001E6B4 5229 0021                  		addq.b	#1,obColProp(a1)
0001E6B8 4E75                       		rts	
0001E6BA                            ; End of function React_Special
0001E6BA                            
0001E6BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6BA                            
0001E6BA                            React_ChkWaterTag:
0001E6BA 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E6C0 6600 0000                  		bne	NotWaterTag
0001E6C4 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E6CA                            	NotWaterTag:
0001E6CA 4E75                       		rts
0001E6CC                            
0001E6CC                            React_WaterTag:
0001E6CC 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E6D2 6700 0000                  		beq	SkipWaterTag
0001E6D6 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E6DC                            	SkipWaterTag:
0001E6DC 4E75                       		rts
0001E6DC 4E75                       		rts
0001E6DE                            
0001E6DE                            ; ---------------------------------------------------------------------------
0001E6DE                            ; Subroutine to	show the special stage layout
0001E6DE                            ; ---------------------------------------------------------------------------
0001E6DE                            
0001E6DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E6DE                            
0001E6DE                            
0001E6DE                            SS_ShowLayout:
0001E6DE 6100 0000                  		bsr.w	SS_AniWallsRings
0001E6E2 6100 0000                  		bsr.w	SS_AniItems
0001E6E6 3F05                       		move.w	d5,-(sp)
0001E6E8 43F8 8000                  		lea	($FFFF8000).w,a1
0001E6EC 1038 F780                  		move.b	(v_ssangle).w,d0
0001E6F0 0200 00FC                  		andi.b	#$FC,d0
0001E6F4 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001E6FA 3800                       		move.w	d0,d4
0001E6FC 3A01                       		move.w	d1,d5
0001E6FE C9FC 0018                  		muls.w	#$18,d4
0001E702 CBFC 0018                  		muls.w	#$18,d5
0001E706 7400                       		moveq	#0,d2
0001E708 3438 F700                  		move.w	(v_screenposx).w,d2
0001E70C 84FC 0018                  		divu.w	#$18,d2
0001E710 4842                       		swap	d2
0001E712 4442                       		neg.w	d2
0001E714 0642 FF4C                  		addi.w	#-$B4,d2
0001E718 7600                       		moveq	#0,d3
0001E71A 3638 F704                  		move.w	(v_screenposy).w,d3
0001E71E 86FC 0018                  		divu.w	#$18,d3
0001E722 4843                       		swap	d3
0001E724 4443                       		neg.w	d3
0001E726 0643 FF4C                  		addi.w	#-$B4,d3
0001E72A 3E3C 000F                  		move.w	#$F,d7
0001E72E                            
0001E72E                            loc_1B19E:
0001E72E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E732 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E736 4440                       		neg.w	d0
0001E738 C3C2                       		muls.w	d2,d1
0001E73A C1C3                       		muls.w	d3,d0
0001E73C 2C00                       		move.l	d0,d6
0001E73E DC81                       		add.l	d1,d6
0001E740 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E744 C1C2                       		muls.w	d2,d0
0001E746 C3C3                       		muls.w	d3,d1
0001E748 D280                       		add.l	d0,d1
0001E74A 2406                       		move.l	d6,d2
0001E74C 3C3C 000F                  		move.w	#$F,d6
0001E750                            
0001E750                            loc_1B1C0:
0001E750 2002                       		move.l	d2,d0
0001E752 E080                       		asr.l	#8,d0
0001E754 32C0                       		move.w	d0,(a1)+
0001E756 2001                       		move.l	d1,d0
0001E758 E080                       		asr.l	#8,d0
0001E75A 32C0                       		move.w	d0,(a1)+
0001E75C D485                       		add.l	d5,d2
0001E75E D284                       		add.l	d4,d1
0001E760 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E764                            
0001E764 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E768 0643 0018                  		addi.w	#$18,d3
0001E76C 51CF FFC0                  		dbf	d7,loc_1B19E
0001E770                            
0001E770 3A1F                       		move.w	(sp)+,d5
0001E772 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E778 7000                       		moveq	#0,d0
0001E77A 3038 F704                  		move.w	(v_screenposy).w,d0
0001E77E 80FC 0018                  		divu.w	#$18,d0
0001E782 C0FC 0080                  		mulu.w	#$80,d0
0001E786 D1C0                       		adda.l	d0,a0
0001E788 7000                       		moveq	#0,d0
0001E78A 3038 F700                  		move.w	(v_screenposx).w,d0
0001E78E 80FC 0018                  		divu.w	#$18,d0
0001E792 D0C0                       		adda.w	d0,a0
0001E794 49F8 8000                  		lea	($FFFF8000).w,a4
0001E798 3E3C 000F                  		move.w	#$F,d7
0001E79C                            
0001E79C                            loc_1B20C:
0001E79C 3C3C 000F                  		move.w	#$F,d6
0001E7A0                            
0001E7A0                            loc_1B210:
0001E7A0 7000                       		moveq	#0,d0
0001E7A2 1018                       		move.b	(a0)+,d0
0001E7A4 6700                       		beq.s	loc_1B268
0001E7A6 0C00 004E                  		cmpi.b	#$4E,d0
0001E7AA 6200                       		bhi.s	loc_1B268
0001E7AC 3614                       		move.w	(a4),d3
0001E7AE 0643 0120                  		addi.w	#$120,d3
0001E7B2 0C43 0070                  		cmpi.w	#$70,d3
0001E7B6 6500                       		blo.s	loc_1B268
0001E7B8 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E7BC 6400                       		bhs.s	loc_1B268
0001E7BE 342C 0002                  		move.w	2(a4),d2
0001E7C2 0642 00F0                  		addi.w	#$F0,d2
0001E7C6 0C42 0070                  		cmpi.w	#$70,d2
0001E7CA 6500                       		blo.s	loc_1B268
0001E7CC 0C42 0170                  		cmpi.w	#$170,d2
0001E7D0 6400                       		bhs.s	loc_1B268
0001E7D2 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E7D8 E748                       		lsl.w	#3,d0
0001E7DA 4BF5 0000                  		lea	(a5,d0.w),a5
0001E7DE 225D                       		movea.l	(a5)+,a1
0001E7E0 321D                       		move.w	(a5)+,d1
0001E7E2 D241                       		add.w	d1,d1
0001E7E4 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E7E8 365D                       		movea.w	(a5)+,a3
0001E7EA 7200                       		moveq	#0,d1
0001E7EC 1219                       		move.b	(a1)+,d1
0001E7EE 5301                       		subq.b	#1,d1
0001E7F0 6B00                       		bmi.s	loc_1B268
0001E7F2 4EB9 0000 F6B0             		jsr	(sub_D762).l
0001E7F8                            
0001E7F8                            loc_1B268:
0001E7F8 584C                       		addq.w	#4,a4
0001E7FA 51CE FFA4                  		dbf	d6,loc_1B210
0001E7FE                            
0001E7FE 41E8 0070                  		lea	$70(a0),a0
0001E802 51CF FF98                  		dbf	d7,loc_1B20C
0001E806                            
0001E806 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E80A 0C05 0050                  		cmpi.b	#$50,d5
0001E80E 6700                       		beq.s	loc_1B288
0001E810 24BC 0000 0000             		move.l	#0,(a2)
0001E816 4E75                       		rts	
0001E818                            ; ===========================================================================
0001E818                            
0001E818                            loc_1B288:
0001E818 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E81E 4E75                       		rts	
0001E820                            ; End of function SS_ShowLayout
0001E820                            
0001E820                            ; ---------------------------------------------------------------------------
0001E820                            ; Subroutine to	animate	walls and rings	in the special stage
0001E820                            ; ---------------------------------------------------------------------------
0001E820                            
0001E820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E820                            
0001E820                            
0001E820                            SS_AniWallsRings:
0001E820 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E826 7000                       		moveq	#0,d0
0001E828 1038 F780                  		move.b	(v_ssangle).w,d0
0001E82C E408                       		lsr.b	#2,d0
0001E82E 0240 000F                  		andi.w	#$F,d0
0001E832 7223                       		moveq	#$23,d1
0001E834                            
0001E834                            loc_1B2A4:
0001E834 3280                       		move.w	d0,(a1)
0001E836 5049                       		addq.w	#8,a1
0001E838 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E83C                            
0001E83C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E842 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E846 6A00                       		bpl.s	loc_1B2C8
0001E848 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E84E 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E852 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E858                            
0001E858                            loc_1B2C8:
0001E858 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E85E 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E862 6A00                       		bpl.s	loc_1B2E4
0001E864 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E86A 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E86E 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E874                            
0001E874                            loc_1B2E4:
0001E874 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E878 1340 0138                  		move.b	d0,$138(a1)
0001E87C 1340 0160                  		move.b	d0,$160(a1)
0001E880 1340 0148                  		move.b	d0,$148(a1)
0001E884 1340 0150                  		move.b	d0,$150(a1)
0001E888 1340 01D8                  		move.b	d0,$1D8(a1)
0001E88C 1340 01E0                  		move.b	d0,$1E0(a1)
0001E890 1340 01E8                  		move.b	d0,$1E8(a1)
0001E894 1340 01F0                  		move.b	d0,$1F0(a1)
0001E898 1340 01F8                  		move.b	d0,$1F8(a1)
0001E89C 1340 0200                  		move.b	d0,$200(a1)
0001E8A0 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E8A4 6A00                       		bpl.s	loc_1B326
0001E8A6 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E8AC 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E8B0 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E8B6                            
0001E8B6                            loc_1B326:
0001E8B6 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E8BA 1340 0168                  		move.b	d0,$168(a1)
0001E8BE 1340 0170                  		move.b	d0,$170(a1)
0001E8C2 1340 0178                  		move.b	d0,$178(a1)
0001E8C6 1340 0180                  		move.b	d0,$180(a1)
0001E8CA 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E8CE 6A00                       		bpl.s	loc_1B350
0001E8D0 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E8D6 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E8DA 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E8E0                            
0001E8E0                            loc_1B350:
0001E8E0 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E8E6 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E8EC 7000                       		moveq	#0,d0
0001E8EE 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E8F2 D040                       		add.w	d0,d0
0001E8F4 41F0 0000                  		lea	(a0,d0.w),a0
0001E8F8 3290                       		move.w	(a0),(a1)
0001E8FA 3368 0002 0008             		move.w	2(a0),8(a1)
0001E900 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E906 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E90C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E912 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E918 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E91E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E924 D0FC 0020                  		adda.w	#$20,a0
0001E928 D2FC 0048                  		adda.w	#$48,a1
0001E92C 3290                       		move.w	(a0),(a1)
0001E92E 3368 0002 0008             		move.w	2(a0),8(a1)
0001E934 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E93A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E940 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E946 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E94C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E952 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E958 D0FC 0020                  		adda.w	#$20,a0
0001E95C D2FC 0048                  		adda.w	#$48,a1
0001E960 3290                       		move.w	(a0),(a1)
0001E962 3368 0002 0008             		move.w	2(a0),8(a1)
0001E968 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E96E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E974 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E97A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E980 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E986 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E98C D0FC 0020                  		adda.w	#$20,a0
0001E990 D2FC 0048                  		adda.w	#$48,a1
0001E994 3290                       		move.w	(a0),(a1)
0001E996 3368 0002 0008             		move.w	2(a0),8(a1)
0001E99C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9A2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9A8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9AE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9B4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E9BA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E9C0 D0FC 0020                  		adda.w	#$20,a0
0001E9C4 D2FC 0048                  		adda.w	#$48,a1
0001E9C8 4E75                       		rts	
0001E9CA                            ; End of function SS_AniWallsRings
0001E9CA                            
0001E9CA                            ; ===========================================================================
0001E9CA 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E9DA 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E9EA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E9FA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EA0A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EA1A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EA2A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EA3A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EA4A                            ; ---------------------------------------------------------------------------
0001EA4A                            ; Subroutine to	remove items when you collect them in the special stage
0001EA4A                            ; ---------------------------------------------------------------------------
0001EA4A                            
0001EA4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA4A                            
0001EA4A                            
0001EA4A                            SS_RemoveCollectedItem:
0001EA4A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001EA50 303C 001F                  		move.w	#$1F,d0
0001EA54                            
0001EA54                            loc_1B4C4:
0001EA54 4A12                       		tst.b	(a2)
0001EA56 6700                       		beq.s	locret_1B4CE
0001EA58 504A                       		addq.w	#8,a2
0001EA5A 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001EA5E                            
0001EA5E                            locret_1B4CE:
0001EA5E 4E75                       		rts	
0001EA60                            ; End of function SS_RemoveCollectedItem
0001EA60                            
0001EA60                            ; ---------------------------------------------------------------------------
0001EA60                            ; Subroutine to	animate	special	stage items when you touch them
0001EA60                            ; ---------------------------------------------------------------------------
0001EA60                            
0001EA60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA60                            
0001EA60                            
0001EA60                            SS_AniItems:
0001EA60 41F9 00FF 4400             		lea	($FF4400).l,a0
0001EA66 3E3C 001F                  		move.w	#$1F,d7
0001EA6A                            
0001EA6A                            loc_1B4DA:
0001EA6A 7000                       		moveq	#0,d0
0001EA6C 1010                       		move.b	(a0),d0
0001EA6E 6700                       		beq.s	loc_1B4E8
0001EA70 E548                       		lsl.w	#2,d0
0001EA72 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001EA76 4E91                       		jsr	(a1)
0001EA78                            
0001EA78                            loc_1B4E8:
0001EA78 5048                       		addq.w	#8,a0
0001EA7A                            
0001EA7A                            loc_1B4EA:
0001EA7A 51CF FFEE                  		dbf	d7,loc_1B4DA
0001EA7E                            
0001EA7E 4E75                       		rts	
0001EA80                            ; End of function SS_AniItems
0001EA80                            
0001EA80                            ; ===========================================================================
0001EA80 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001EA84 0000 0000                  		dc.l SS_AniBumper
0001EA88 0000 0000                  		dc.l SS_Ani1Up
0001EA8C 0000 0000                  		dc.l SS_AniReverse
0001EA90 0000 0000                  		dc.l SS_AniEmeraldSparks
0001EA94 0000 0000                  		dc.l SS_AniGlassBlock
0001EA98                            ; ===========================================================================
0001EA98                            
0001EA98                            SS_AniRingSparks:
0001EA98 5328 0002                  		subq.b	#1,2(a0)
0001EA9C 6A00                       		bpl.s	locret_1B530
0001EA9E 117C 0005 0002             		move.b	#5,2(a0)
0001EAA4 7000                       		moveq	#0,d0
0001EAA6 1028 0003                  		move.b	3(a0),d0
0001EAAA 5228 0003                  		addq.b	#1,3(a0)
0001EAAE 2268 0004                  		movea.l	4(a0),a1
0001EAB2 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EAB6 1280                       		move.b	d0,(a1)
0001EAB8 6600                       		bne.s	locret_1B530
0001EABA 4290                       		clr.l	(a0)
0001EABC 42A8 0004                  		clr.l	4(a0)
0001EAC0                            
0001EAC0                            locret_1B530:
0001EAC0 4E75                       		rts	
0001EAC2                            ; ===========================================================================
0001EAC2 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EAC8                            ; ===========================================================================
0001EAC8                            
0001EAC8                            SS_AniBumper:
0001EAC8 5328 0002                  		subq.b	#1,2(a0)
0001EACC 6A00                       		bpl.s	locret_1B566
0001EACE 117C 0007 0002             		move.b	#7,2(a0)
0001EAD4 7000                       		moveq	#0,d0
0001EAD6 1028 0003                  		move.b	3(a0),d0
0001EADA 5228 0003                  		addq.b	#1,3(a0)
0001EADE 2268 0004                  		movea.l	4(a0),a1
0001EAE2 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EAE6 6600                       		bne.s	loc_1B564
0001EAE8 4290                       		clr.l	(a0)
0001EAEA 42A8 0004                  		clr.l	4(a0)
0001EAEE 12BC 0025                  		move.b	#$25,(a1)
0001EAF2 4E75                       		rts	
0001EAF4                            ; ===========================================================================
0001EAF4                            
0001EAF4                            loc_1B564:
0001EAF4 1280                       		move.b	d0,(a1)
0001EAF6                            
0001EAF6                            locret_1B566:
0001EAF6 4E75                       		rts	
0001EAF8                            ; ===========================================================================
0001EAF8 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EAFE                            ; ===========================================================================
0001EAFE                            
0001EAFE                            SS_Ani1Up:
0001EAFE 5328 0002                  		subq.b	#1,2(a0)
0001EB02 6A00                       		bpl.s	locret_1B596
0001EB04 117C 0005 0002             		move.b	#5,2(a0)
0001EB0A 7000                       		moveq	#0,d0
0001EB0C 1028 0003                  		move.b	3(a0),d0
0001EB10 5228 0003                  		addq.b	#1,3(a0)
0001EB14 2268 0004                  		movea.l	4(a0),a1
0001EB18 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EB1C 1280                       		move.b	d0,(a1)
0001EB1E 6600                       		bne.s	locret_1B596
0001EB20 4290                       		clr.l	(a0)
0001EB22 42A8 0004                  		clr.l	4(a0)
0001EB26                            
0001EB26                            locret_1B596:
0001EB26 4E75                       		rts	
0001EB28                            ; ===========================================================================
0001EB28 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EB2E                            ; ===========================================================================
0001EB2E                            
0001EB2E                            SS_AniReverse:
0001EB2E 5328 0002                  		subq.b	#1,2(a0)
0001EB32 6A00                       		bpl.s	locret_1B5CC
0001EB34 117C 0007 0002             		move.b	#7,2(a0)
0001EB3A 7000                       		moveq	#0,d0
0001EB3C 1028 0003                  		move.b	3(a0),d0
0001EB40 5228 0003                  		addq.b	#1,3(a0)
0001EB44 2268 0004                  		movea.l	4(a0),a1
0001EB48 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EB4C 6600                       		bne.s	loc_1B5CA
0001EB4E 4290                       		clr.l	(a0)
0001EB50 42A8 0004                  		clr.l	4(a0)
0001EB54 12BC 002B                  		move.b	#$2B,(a1)
0001EB58 4E75                       		rts	
0001EB5A                            ; ===========================================================================
0001EB5A                            
0001EB5A                            loc_1B5CA:
0001EB5A 1280                       		move.b	d0,(a1)
0001EB5C                            
0001EB5C                            locret_1B5CC:
0001EB5C 4E75                       		rts	
0001EB5E                            ; ===========================================================================
0001EB5E 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EB64                            ; ===========================================================================
0001EB64                            
0001EB64                            SS_AniEmeraldSparks:
0001EB64 5328 0002                  		subq.b	#1,2(a0)
0001EB68 6A00                       		bpl.s	locret_1B60C
0001EB6A 117C 0005 0002             		move.b	#5,2(a0)
0001EB70 7000                       		moveq	#0,d0
0001EB72 1028 0003                  		move.b	3(a0),d0
0001EB76 5228 0003                  		addq.b	#1,3(a0)
0001EB7A 2268 0004                  		movea.l	4(a0),a1
0001EB7E 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EB82 1280                       		move.b	d0,(a1)
0001EB84 6600                       		bne.s	locret_1B60C
0001EB86 4290                       		clr.l	(a0)
0001EB88 42A8 0004                  		clr.l	4(a0)
0001EB8C 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EB9C                            
0001EB9C                            locret_1B60C:
0001EB9C 4E75                       		rts	
0001EB9E                            ; ===========================================================================
0001EB9E 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EBA4                            ; ===========================================================================
0001EBA4                            
0001EBA4                            SS_AniGlassBlock:
0001EBA4 5328 0002                  		subq.b	#1,2(a0)
0001EBA8 6A00                       		bpl.s	locret_1B640
0001EBAA 117C 0001 0002             		move.b	#1,2(a0)
0001EBB0 7000                       		moveq	#0,d0
0001EBB2 1028 0003                  		move.b	3(a0),d0
0001EBB6 5228 0003                  		addq.b	#1,3(a0)
0001EBBA 2268 0004                  		movea.l	4(a0),a1
0001EBBE 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EBC2 1280                       		move.b	d0,(a1)
0001EBC4 6600                       		bne.s	locret_1B640
0001EBC6 12A8 0004                  		move.b	4(a0),(a1)
0001EBCA 4290                       		clr.l	(a0)
0001EBCC 42A8 0004                  		clr.l	4(a0)
0001EBD0                            
0001EBD0                            locret_1B640:
0001EBD0 4E75                       		rts	
0001EBD2                            ; ===========================================================================
0001EBD2 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EBDC                            
0001EBDC                            ; ---------------------------------------------------------------------------
0001EBDC                            ; Special stage	layout pointers
0001EBDC                            ; ---------------------------------------------------------------------------
0001EBDC                            SS_LayoutIndex:
0001EBDC 0000 0000                  		dc.l SS_1
0001EBE0 0000 0000                  		dc.l SS_2
0001EBE4 0000 0000                  		dc.l SS_3
0001EBE8 0000 0000                  		dc.l SS_4
0001EBEC 0000 0000                  		dc.l SS_5
0001EBF0 0000 0000                  		dc.l SS_6
0001EBF4                            		even
0001EBF4                            
0001EBF4                            ; ---------------------------------------------------------------------------
0001EBF4                            ; Special stage start locations
0001EBF4                            ; ---------------------------------------------------------------------------
0001EBF4                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EBF4                            ; ---------------------------------------------------------------------------
0001EBF4                            ; Special stage start locations
0001EBF4                            ; ---------------------------------------------------------------------------
0001EBF4                            
0001EBF4                            		incbin	"startpos\ss1.bin"
0001EBF8                            		incbin	"startpos\ss2.bin"
0001EBFC                            		incbin	"startpos\ss3.bin"
0001EC00                            		incbin	"startpos\ss4.bin"
0001EC04                            		incbin	"startpos\ss5.bin"
0001EC08                            		incbin	"startpos\ss6.bin"
0001EC0C                            		even
0001EC0C                            		even
0001EC0C                            
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C                            ; Subroutine to	load special stage layout
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C                            
0001EC0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EC0C                            
0001EC0C                            
0001EC0C                            SS_Load:
0001EC0C 7000                       		moveq	#0,d0
0001EC0E 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EC12 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EC16 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EC1C 6500                       		blo.s	SS_ChkEmldNum
0001EC1E 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EC24                            
0001EC24                            SS_ChkEmldNum:
0001EC24 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EC2A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EC2C 7200                       		moveq	#0,d1
0001EC2E 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EC32 5301                       		subq.b	#1,d1
0001EC34 6500                       		blo.s	SS_LoadData
0001EC36 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EC3A                            
0001EC3A                            SS_ChkEmldLoop:	
0001EC3A B033 1000                  		cmp.b	(a3,d1.w),d0
0001EC3E 6600                       		bne.s	SS_ChkEmldRepeat
0001EC40 60CA                       		bra.s	SS_Load
0001EC42                            ; ===========================================================================
0001EC42                            
0001EC42                            SS_ChkEmldRepeat:
0001EC42 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EC46                            
0001EC46                            SS_LoadData:
0001EC46 E548                       		lsl.w	#2,d0
0001EC48 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EC4C 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EC50 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EC54 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EC58 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EC5E 303C 0000                  		move.w	#0,d0
0001EC62 4EB9 0000 18D8             		jsr	(EniDec).l
0001EC68 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EC6E 303C 0FFF                  		move.w	#$FFF,d0
0001EC72                            
0001EC72                            SS_ClrRAM3:
0001EC72 4299                       		clr.l	(a1)+
0001EC74 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EC78                            
0001EC78 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EC7E 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EC84 723F                       		moveq	#$3F,d1
0001EC86                            
0001EC86                            loc_1B6F6:
0001EC86 743F                       		moveq	#$3F,d2
0001EC88                            
0001EC88                            loc_1B6F8:
0001EC88 12D8                       		move.b	(a0)+,(a1)+
0001EC8A 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EC8E                            
0001EC8E 43E9 0040                  		lea	$40(a1),a1
0001EC92 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EC96                            
0001EC96 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EC9C 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001ECA2 724D                       		moveq	#$4D,d1
0001ECA4                            
0001ECA4                            loc_1B714:
0001ECA4 22D8                       		move.l	(a0)+,(a1)+
0001ECA6 32FC 0000                  		move.w	#0,(a1)+
0001ECAA 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001ECB0 32D8                       		move.w	(a0)+,(a1)+
0001ECB2 51C9 FFF0                  		dbf	d1,loc_1B714
0001ECB6                            
0001ECB6 43F9 00FF 4400             		lea	($FF4400).l,a1
0001ECBC 323C 003F                  		move.w	#$3F,d1
0001ECC0                            
0001ECC0                            loc_1B730:
0001ECC0                            
0001ECC0 4299                       		clr.l	(a1)+
0001ECC2 51C9 FFFC                  		dbf	d1,loc_1B730
0001ECC6                            
0001ECC6 4E75                       		rts	
0001ECC8                            ; End of function SS_Load
0001ECC8                            
0001ECC8                            ; ===========================================================================
0001ECC8                            
0001ECC8                            SS_MapIndex:
0001ECC8                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001ECC8                            ; ---------------------------------------------------------------------------
0001ECC8                            ; Special stage	mappings and VRAM pointers
0001ECC8                            ; ---------------------------------------------------------------------------
0001ECC8 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001ECCC 0142                       	dc.w $142		; VRAM setting
0001ECCE 0000 0000                  	dc.l Map_SSWalls
0001ECD2 0142                       	dc.w $142
0001ECD4 0000 0000                  	dc.l Map_SSWalls
0001ECD8 0142                       	dc.w $142
0001ECDA 0000 0000                  	dc.l Map_SSWalls
0001ECDE 0142                       	dc.w $142
0001ECE0 0000 0000                  	dc.l Map_SSWalls
0001ECE4 0142                       	dc.w $142
0001ECE6 0000 0000                  	dc.l Map_SSWalls
0001ECEA 0142                       	dc.w $142
0001ECEC 0000 0000                  	dc.l Map_SSWalls
0001ECF0 0142                       	dc.w $142
0001ECF2 0000 0000                  	dc.l Map_SSWalls
0001ECF6 0142                       	dc.w $142
0001ECF8 0000 0000                  	dc.l Map_SSWalls
0001ECFC 0142                       	dc.w $142
0001ECFE 0000 0000                  	dc.l Map_SSWalls
0001ED02 2142                       	dc.w $2142
0001ED04 0000 0000                  	dc.l Map_SSWalls
0001ED08 2142                       	dc.w $2142
0001ED0A 0000 0000                  	dc.l Map_SSWalls
0001ED0E 2142                       	dc.w $2142
0001ED10 0000 0000                  	dc.l Map_SSWalls
0001ED14 2142                       	dc.w $2142
0001ED16 0000 0000                  	dc.l Map_SSWalls
0001ED1A 2142                       	dc.w $2142
0001ED1C 0000 0000                  	dc.l Map_SSWalls
0001ED20 2142                       	dc.w $2142
0001ED22 0000 0000                  	dc.l Map_SSWalls
0001ED26 2142                       	dc.w $2142
0001ED28 0000 0000                  	dc.l Map_SSWalls
0001ED2C 2142                       	dc.w $2142
0001ED2E 0000 0000                  	dc.l Map_SSWalls
0001ED32 2142                       	dc.w $2142
0001ED34 0000 0000                  	dc.l Map_SSWalls
0001ED38 4142                       	dc.w $4142
0001ED3A 0000 0000                  	dc.l Map_SSWalls
0001ED3E 4142                       	dc.w $4142
0001ED40 0000 0000                  	dc.l Map_SSWalls
0001ED44 4142                       	dc.w $4142
0001ED46 0000 0000                  	dc.l Map_SSWalls
0001ED4A 4142                       	dc.w $4142
0001ED4C 0000 0000                  	dc.l Map_SSWalls
0001ED50 4142                       	dc.w $4142
0001ED52 0000 0000                  	dc.l Map_SSWalls
0001ED56 4142                       	dc.w $4142
0001ED58 0000 0000                  	dc.l Map_SSWalls
0001ED5C 4142                       	dc.w $4142
0001ED5E 0000 0000                  	dc.l Map_SSWalls
0001ED62 4142                       	dc.w $4142
0001ED64 0000 0000                  	dc.l Map_SSWalls
0001ED68 4142                       	dc.w $4142
0001ED6A 0000 0000                  	dc.l Map_SSWalls
0001ED6E 6142                       	dc.w $6142
0001ED70 0000 0000                  	dc.l Map_SSWalls
0001ED74 6142                       	dc.w $6142
0001ED76 0000 0000                  	dc.l Map_SSWalls
0001ED7A 6142                       	dc.w $6142
0001ED7C 0000 0000                  	dc.l Map_SSWalls
0001ED80 6142                       	dc.w $6142
0001ED82 0000 0000                  	dc.l Map_SSWalls
0001ED86 6142                       	dc.w $6142
0001ED88 0000 0000                  	dc.l Map_SSWalls
0001ED8C 6142                       	dc.w $6142
0001ED8E 0000 0000                  	dc.l Map_SSWalls
0001ED92 6142                       	dc.w $6142
0001ED94 0000 0000                  	dc.l Map_SSWalls
0001ED98 6142                       	dc.w $6142
0001ED9A 0000 0000                  	dc.l Map_SSWalls
0001ED9E 6142                       	dc.w $6142
0001EDA0 0001 0A74                  	dc.l Map_Bump
0001EDA4 023B                       	dc.w $23B
0001EDA6 0000 0000                  	dc.l Map_SS_R
0001EDAA 0570                       	dc.w $570
0001EDAC 0000 0000                  	dc.l Map_SS_R
0001EDB0 0251                       	dc.w $251
0001EDB2 0000 0000                  	dc.l Map_SS_R
0001EDB6 0370                       	dc.w $370
0001EDB8 0000 0000                  	dc.l Map_SS_Up
0001EDBC 0263                       	dc.w $263
0001EDBE 0000 0000                  	dc.l Map_SS_Down
0001EDC2 0263                       	dc.w $263
0001EDC4 0000 0000                  	dc.l Map_SS_R
0001EDC8 22F0                       	dc.w $22F0
0001EDCA 0000 0000                  	dc.l Map_SS_Glass
0001EDCE 0470                       	dc.w $470
0001EDD0 0000 0000                  	dc.l Map_SS_Glass
0001EDD4 05F0                       	dc.w $5F0
0001EDD6 0000 0000                  	dc.l Map_SS_Glass
0001EDDA 65F0                       	dc.w $65F0
0001EDDC 0000 0000                  	dc.l Map_SS_Glass
0001EDE0 25F0                       	dc.w $25F0
0001EDE2 0000 0000                  	dc.l Map_SS_Glass
0001EDE6 45F0                       	dc.w $45F0
0001EDE8 0000 0000                  	dc.l Map_SS_R
0001EDEC 02F0                       	dc.w $2F0
0001EDEE 0101 0A74                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EDF2 023B                       	dc.w $23B
0001EDF4 0201 0A74                  	dc.l Map_Bump+$2000000
0001EDF8 023B                       	dc.w $23B
0001EDFA 0000 0000                  	dc.l Map_SS_R
0001EDFE 0797                       	dc.w $797
0001EE00 0000 0000                  	dc.l Map_SS_R
0001EE04 07A0                       	dc.w $7A0
0001EE06 0000 0000                  	dc.l Map_SS_R
0001EE0A 07A9                       	dc.w $7A9
0001EE0C 0000 0000                  	dc.l Map_SS_R
0001EE10 0797                       	dc.w $797
0001EE12 0000 0000                  	dc.l Map_SS_R
0001EE16 07A0                       	dc.w $7A0
0001EE18 0000 0000                  	dc.l Map_SS_R
0001EE1C 07A9                       	dc.w $7A9
0001EE1E 0000 BA5E                  	dc.l Map_Ring
0001EE22 2798                       	dc.w $2798
0001EE24 0000 0000                  	dc.l Map_SS_Chaos3
0001EE28 0770                       	dc.w $770
0001EE2A 0000 0000                  	dc.l Map_SS_Chaos3
0001EE2E 2770                       	dc.w $2770
0001EE30 0000 0000                  	dc.l Map_SS_Chaos3
0001EE34 4770                       	dc.w $4770
0001EE36 0000 0000                  	dc.l Map_SS_Chaos3
0001EE3A 6770                       	dc.w $6770
0001EE3C 0000 0000                  	dc.l Map_SS_Chaos1
0001EE40 0770                       	dc.w $770
0001EE42 0000 0000                  	dc.l Map_SS_Chaos2
0001EE46 0770                       	dc.w $770
0001EE48 0000 0000                  	dc.l Map_SS_R
0001EE4C 04F0                       	dc.w $4F0
0001EE4E 0400 BA5E                  	dc.l Map_Ring+$4000000
0001EE52 2798                       	dc.w $2798
0001EE54 0500 BA5E                  	dc.l Map_Ring+$5000000
0001EE58 2798                       	dc.w $2798
0001EE5A 0600 BA5E                  	dc.l Map_Ring+$6000000
0001EE5E 2798                       	dc.w $2798
0001EE60 0700 BA5E                  	dc.l Map_Ring+$7000000
0001EE64 2798                       	dc.w $2798
0001EE66 0000 0000                  	dc.l Map_SS_Glass
0001EE6A 23F0                       	dc.w $23F0
0001EE6C 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EE70 23F0                       	dc.w $23F0
0001EE72 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EE76 23F0                       	dc.w $23F0
0001EE78 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EE7C 23F0                       	dc.w $23F0
0001EE7E 0000 0000                  	dc.l Map_SS_R+$2000000
0001EE82 04F0                       	dc.w $4F0
0001EE84 0000 0000                  	dc.l Map_SS_Glass
0001EE88 05F0                       	dc.w $5F0
0001EE8A 0000 0000                  	dc.l Map_SS_Glass
0001EE8E 65F0                       	dc.w $65F0
0001EE90 0000 0000                  	dc.l Map_SS_Glass
0001EE94 25F0                       	dc.w $25F0
0001EE96 0000 0000                  	dc.l Map_SS_Glass
0001EE9A 45F0                       	dc.w $45F0
0001EE9A 45F0                       	dc.w $45F0
0001EE9C                            
0001EE9C                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EE9C                            ; ---------------------------------------------------------------------------
0001EE9C                            ; Sprite mappings - special stage "R" block
0001EE9C                            ; ---------------------------------------------------------------------------
0001EE9C                            Map_SS_R_internal:
0001EE9C 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EE9E 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EEA0 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EEA2 01                         byte_1B912:	dc.b 1
0001EEA3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EEA8 01                         byte_1B918:	dc.b 1
0001EEA9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EEAE 00                         byte_1B91E:	dc.b 0
0001EEB0 00                         		even
0001EEB0 00                         		even
0001EEB0                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EEB0                            ; ---------------------------------------------------------------------------
0001EEB0                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EEB0                            ; ---------------------------------------------------------------------------
0001EEB0                            Map_SS_Glass_internal:
0001EEB0 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EEB2 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EEB4 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EEB6 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EEB8 01                         byte_1B928:	dc.b 1
0001EEB9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EEBE 01                         byte_1B92E:	dc.b 1
0001EEBF F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EEC4 01                         byte_1B934:	dc.b 1
0001EEC5 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EECA 01                         byte_1B93A:	dc.b 1
0001EECB F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EED0                            		even
0001EED0                            		even
0001EED0                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EED0                            ; ---------------------------------------------------------------------------
0001EED0                            ; Sprite mappings - special stage "UP" block
0001EED0                            ; ---------------------------------------------------------------------------
0001EED0                            Map_SS_Up_internal:
0001EED0 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EED2 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EED4 01                         byte_1B944:	dc.b 1
0001EED5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EEDA 01                         byte_1B94A:	dc.b 1
0001EEDB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EEE0                            		even
0001EEE0                            		even
0001EEE0                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EEE0                            ; ---------------------------------------------------------------------------
0001EEE0                            ; Sprite mappings - special stage "DOWN" block
0001EEE0                            ; ---------------------------------------------------------------------------
0001EEE0                            Map_SS_Down_internal:
0001EEE0 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EEE2 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EEE4 01                         byte_1B954:	dc.b 1
0001EEE5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EEEA 01                         byte_1B95A:	dc.b 1
0001EEEB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EEF0                            		even
0001EEF0                            		even
0001EEF0                            		include	"_maps\SS Chaos Emeralds.asm"
0001EEF0                            ; ---------------------------------------------------------------------------
0001EEF0                            ; Sprite mappings - special stage chaos	emeralds
0001EEF0                            ; ---------------------------------------------------------------------------
0001EEF0 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EEF2 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EEF4 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EEF6 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EEF8 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EEFA 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EEFC 01                         byte_1B96C:	dc.b 1
0001EEFD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EF02 01                         byte_1B972:	dc.b 1
0001EF03 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EF08 01                         byte_1B978:	dc.b 1
0001EF09 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EF0E 01                         byte_1B97E:	dc.b 1
0001EF0F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EF14                            		even
0001EF14                            		even
0001EF14                            
0001EF14                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EF14                            ; ---------------------------------------------------------------------------
0001EF14                            ; Object 09 - Sonic (special stage)
0001EF14                            ; ---------------------------------------------------------------------------
0001EF14                            
0001EF14                            SonicSpecial:
0001EF14 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EF18 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EF1A 6100 0000                  		bsr.w	SS_FixCamera
0001EF1E 6000 0000                  		bra.w	DebugMode
0001EF22                            ; ===========================================================================
0001EF22                            
0001EF22                            Obj09_Normal:
0001EF22 7000                       		moveq	#0,d0
0001EF24 1028 0024                  		move.b	obRoutine(a0),d0
0001EF28 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EF2C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EF30                            ; ===========================================================================
0001EF30 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EF32 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EF34 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EF36 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EF38                            ; ===========================================================================
0001EF38                            
0001EF38                            Obj09_Main:	; Routine 0
0001EF38 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EF3C 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EF42 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EF48 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EF50 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EF56 117C 0004 0001             		move.b	#4,obRender(a0)
0001EF5C 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EF62 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EF68 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EF6E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EF74                            
0001EF74                            Obj09_ChkDebug:	; Routine 2
0001EF74 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EF78 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EF7A 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EF80 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EF82 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EF88                            
0001EF88                            Obj09_NoDebug:
0001EF88 117C 0000 0030             		move.b	#0,$30(a0)
0001EF8E 7000                       		moveq	#0,d0
0001EF90 1028 0022                  		move.b	obStatus(a0),d0
0001EF94 0240 0002                  		andi.w	#2,d0
0001EF98 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EF9C 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EFA0 4EB9 0001 6768             		jsr	(Sonic_LoadGfx).l
0001EFA6 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001EFAC                            ; ===========================================================================
0001EFAC 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EFAE 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EFB0                            ; ===========================================================================
0001EFB0                            
0001EFB0                            Obj09_OnWall:
0001EFB0 6100 0000                  		bsr.w	Obj09_Jump
0001EFB4 6100 0000                  		bsr.w	Obj09_Move
0001EFB8 6100 0000                  		bsr.w	Obj09_Fall
0001EFBC 6000                       		bra.s	Obj09_Display
0001EFBE                            ; ===========================================================================
0001EFBE                            
0001EFBE                            Obj09_InAir:
0001EFBE 6100 0000                  		bsr.w	nullsub_2
0001EFC2 6100 0000                  		bsr.w	Obj09_Move
0001EFC6 6100 0000                  		bsr.w	Obj09_Fall
0001EFCA                            
0001EFCA                            Obj09_Display:
0001EFCA 6100 0000                  		bsr.w	Obj09_ChkItems
0001EFCE 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EFD2 4EB9 0000 F42A             		jsr	(SpeedToPos).l
0001EFD8 6100 0000                  		bsr.w	SS_FixCamera
0001EFDC 3038 F780                  		move.w	(v_ssangle).w,d0
0001EFE0 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EFE4 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EFE8 4EB9 0001 63B0             		jsr	(Sonic_Animate).l
0001EFEE 4E75                       		rts	
0001EFF0                            
0001EFF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFF0                            
0001EFF0                            
0001EFF0                            Obj09_Move:
0001EFF0 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EFF6 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EFF8 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EFFC                            
0001EFFC                            Obj09_ChkRight:
0001EFFC 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001F002 6700                       		beq.s	loc_1BA78	; if not, branch
0001F004 6100 0000                  		bsr.w	Obj09_MoveRight
0001F008                            
0001F008                            loc_1BA78:
0001F008 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F00C 0200 000C                  		andi.b	#btnL+btnR,d0
0001F010 6600                       		bne.s	loc_1BAA8
0001F012 3028 0020                  		move.w	obInertia(a0),d0
0001F016 6700                       		beq.s	loc_1BAA8
0001F018 6B00                       		bmi.s	loc_1BA9A
0001F01A 0440 000C                  		subi.w	#$C,d0
0001F01E 6400                       		bcc.s	loc_1BA94
0001F020 303C 0000                  		move.w	#0,d0
0001F024                            
0001F024                            loc_1BA94:
0001F024 3140 0020                  		move.w	d0,obInertia(a0)
0001F028 6000                       		bra.s	loc_1BAA8
0001F02A                            ; ===========================================================================
0001F02A                            
0001F02A                            loc_1BA9A:
0001F02A 0640 000C                  		addi.w	#$C,d0
0001F02E 6400                       		bcc.s	loc_1BAA4
0001F030 303C 0000                  		move.w	#0,d0
0001F034                            
0001F034                            loc_1BAA4:
0001F034 3140 0020                  		move.w	d0,obInertia(a0)
0001F038                            
0001F038                            loc_1BAA8:
0001F038 1038 F780                  		move.b	(v_ssangle).w,d0
0001F03C 0600 0020                  		addi.b	#$20,d0
0001F040 0200 00C0                  		andi.b	#$C0,d0
0001F044 4400                       		neg.b	d0
0001F046 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F04C C3E8 0020                  		muls.w	obInertia(a0),d1
0001F050 D3A8 0008                  		add.l	d1,obX(a0)
0001F054 C1E8 0020                  		muls.w	obInertia(a0),d0
0001F058 D1A8 000C                  		add.l	d0,obY(a0)
0001F05C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001F060 2428 000C                  		move.l	obY(a0),d2
0001F064 2628 0008                  		move.l	obX(a0),d3
0001F068 6100 0000                  		bsr.w	sub_1BCE8
0001F06C 6700                       		beq.s	loc_1BAF2
0001F06E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F072 93A8 0008                  		sub.l	d1,obX(a0)
0001F076 91A8 000C                  		sub.l	d0,obY(a0)
0001F07A 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F080 4E75                       		rts	
0001F082                            ; ===========================================================================
0001F082                            
0001F082                            loc_1BAF2:
0001F082 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F086 4E75                       		rts	
0001F088                            ; End of function Obj09_Move
0001F088                            
0001F088                            
0001F088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F088                            
0001F088                            
0001F088                            Obj09_MoveLeft:
0001F088 08E8 0000 0022             		bset	#0,obStatus(a0)
0001F08E 3028 0020                  		move.w	obInertia(a0),d0
0001F092 6700                       		beq.s	loc_1BB06
0001F094 6A00                       		bpl.s	loc_1BB1A
0001F096                            
0001F096                            loc_1BB06:
0001F096 0440 000C                  		subi.w	#$C,d0
0001F09A 0C40 F800                  		cmpi.w	#-$800,d0
0001F09E 6E00                       		bgt.s	loc_1BB14
0001F0A0 303C F800                  		move.w	#-$800,d0
0001F0A4                            
0001F0A4                            loc_1BB14:
0001F0A4 3140 0020                  		move.w	d0,obInertia(a0)
0001F0A8 4E75                       		rts	
0001F0AA                            ; ===========================================================================
0001F0AA                            
0001F0AA                            loc_1BB1A:
0001F0AA 0440 0040                  		subi.w	#$40,d0
0001F0AE 6400                       		bcc.s	loc_1BB22
0001F0B0 4E71                       		nop	
0001F0B2                            
0001F0B2                            loc_1BB22:
0001F0B2 3140 0020                  		move.w	d0,obInertia(a0)
0001F0B6 4E75                       		rts	
0001F0B8                            ; End of function Obj09_MoveLeft
0001F0B8                            
0001F0B8                            
0001F0B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0B8                            
0001F0B8                            
0001F0B8                            Obj09_MoveRight:
0001F0B8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F0BE 3028 0020                  		move.w	obInertia(a0),d0
0001F0C2 6B00                       		bmi.s	loc_1BB48
0001F0C4 0640 000C                  		addi.w	#$C,d0
0001F0C8 0C40 0800                  		cmpi.w	#$800,d0
0001F0CC 6D00                       		blt.s	loc_1BB42
0001F0CE 303C 0800                  		move.w	#$800,d0
0001F0D2                            
0001F0D2                            loc_1BB42:
0001F0D2 3140 0020                  		move.w	d0,obInertia(a0)
0001F0D6 6000                       		bra.s	locret_1BB54
0001F0D8                            ; ===========================================================================
0001F0D8                            
0001F0D8                            loc_1BB48:
0001F0D8 0640 0040                  		addi.w	#$40,d0
0001F0DC 6400                       		bcc.s	loc_1BB50
0001F0DE 4E71                       		nop	
0001F0E0                            
0001F0E0                            loc_1BB50:
0001F0E0 3140 0020                  		move.w	d0,obInertia(a0)
0001F0E4                            
0001F0E4                            locret_1BB54:
0001F0E4 4E75                       		rts	
0001F0E6                            ; End of function Obj09_MoveRight
0001F0E6                            
0001F0E6                            
0001F0E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0E6                            
0001F0E6                            
0001F0E6                            Obj09_Jump:
0001F0E6 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F0EA 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F0EE 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F0F0 1038 F780                  		move.b	(v_ssangle).w,d0
0001F0F4 0200 00FC                  		andi.b	#$FC,d0
0001F0F8 4400                       		neg.b	d0
0001F0FA 0400 0040                  		subi.b	#$40,d0
0001F0FE 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F104 C3FC 0680                  		muls.w	#$680,d1
0001F108 E081                       		asr.l	#8,d1
0001F10A 3141 0010                  		move.w	d1,obVelX(a0)
0001F10E C1FC 0680                  		muls.w	#$680,d0
0001F112 E080                       		asr.l	#8,d0
0001F114 3140 0012                  		move.w	d0,obVelY(a0)
0001F118 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F128                            
0001F128                            Obj09_NoJump:
0001F128 4E75                       		rts	
0001F12A                            ; End of function Obj09_Jump
0001F12A                            
0001F12A                            
0001F12A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F12A                            
0001F12A                            
0001F12A                            nullsub_2:
0001F12A 4E75                       		rts	
0001F12C                            ; End of function nullsub_2
0001F12C                            
0001F12C                            ; ===========================================================================
0001F12C                            ; ---------------------------------------------------------------------------
0001F12C                            ; unused subroutine to limit Sonic's upward vertical speed
0001F12C                            ; ---------------------------------------------------------------------------
0001F12C 323C FC00                  		move.w	#-$400,d1
0001F130 B268 0012                  		cmp.w	obVelY(a0),d1
0001F134 6F00                       		ble.s	locret_1BBB4
0001F136 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F13A 0200 0070                  		andi.b	#btnABC,d0
0001F13E 6600                       		bne.s	locret_1BBB4
0001F140 3141 0012                  		move.w	d1,obVelY(a0)
0001F144                            
0001F144                            locret_1BBB4:
0001F144 4E75                       		rts	
0001F146                            ; ---------------------------------------------------------------------------
0001F146                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F146                            ; ---------------------------------------------------------------------------
0001F146                            
0001F146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F146                            
0001F146                            
0001F146                            SS_FixCamera:
0001F146 3428 000C                  		move.w	obY(a0),d2
0001F14A 3628 0008                  		move.w	obX(a0),d3
0001F14E 3038 F700                  		move.w	(v_screenposx).w,d0
0001F152 0443 00A0                  		subi.w	#$A0,d3
0001F156 6500                       		bcs.s	loc_1BBCE
0001F158 9043                       		sub.w	d3,d0
0001F15A 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F15E                            
0001F15E                            loc_1BBCE:
0001F15E 3038 F704                  		move.w	(v_screenposy).w,d0
0001F162 0442 0070                  		subi.w	#$70,d2
0001F166 6500                       		bcs.s	locret_1BBDE
0001F168 9042                       		sub.w	d2,d0
0001F16A 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F16E                            
0001F16E                            locret_1BBDE:
0001F16E 4E75                       		rts	
0001F170                            ; End of function SS_FixCamera
0001F170                            
0001F170                            ; ===========================================================================
0001F170                            
0001F170                            Obj09_ExitStage:
0001F170 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F176 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F17C 6600                       		bne.s	loc_1BBF4
0001F17E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F184                            
0001F184                            loc_1BBF4:
0001F184 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F18A 6D00                       		blt.s	loc_1BC12
0001F18C 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F192 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F198 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F19C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F1A2                            
0001F1A2                            loc_1BC12:
0001F1A2 3038 F780                  		move.w	(v_ssangle).w,d0
0001F1A6 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F1AA 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F1AE 4EB9 0001 63B0             		jsr	(Sonic_Animate).l
0001F1B4 4EB9 0001 6768             		jsr	(Sonic_LoadGfx).l
0001F1BA 6100 FF8A                  		bsr.w	SS_FixCamera
0001F1BE 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001F1C4                            ; ===========================================================================
0001F1C4                            
0001F1C4                            Obj09_Exit2:
0001F1C4 5368 0038                  		subq.w	#1,$38(a0)
0001F1C8 6600                       		bne.s	loc_1BC40
0001F1CA 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F1D0                            
0001F1D0                            loc_1BC40:
0001F1D0 4EB9 0001 63B0             		jsr	(Sonic_Animate).l
0001F1D6 4EB9 0001 6768             		jsr	(Sonic_LoadGfx).l
0001F1DC 6100 FF68                  		bsr.w	SS_FixCamera
0001F1E0 4EF9 0000 F43E             		jmp	(DisplaySprite).l
0001F1E6                            
0001F1E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1E6                            
0001F1E6                            
0001F1E6                            Obj09_Fall:
0001F1E6 2428 000C                  		move.l	obY(a0),d2
0001F1EA 2628 0008                  		move.l	obX(a0),d3
0001F1EE 1038 F780                  		move.b	(v_ssangle).w,d0
0001F1F2 0200 00FC                  		andi.b	#$FC,d0
0001F1F6 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F1FC 3828 0010                  		move.w	obVelX(a0),d4
0001F200 48C4                       		ext.l	d4
0001F202 E184                       		asl.l	#8,d4
0001F204 C1FC 002A                  		muls.w	#$2A,d0
0001F208 D084                       		add.l	d4,d0
0001F20A 3828 0012                  		move.w	obVelY(a0),d4
0001F20E 48C4                       		ext.l	d4
0001F210 E184                       		asl.l	#8,d4
0001F212 C3FC 002A                  		muls.w	#$2A,d1
0001F216 D284                       		add.l	d4,d1
0001F218 D680                       		add.l	d0,d3
0001F21A 6100 0000                  		bsr.w	sub_1BCE8
0001F21E 6700                       		beq.s	loc_1BCB0
0001F220 9680                       		sub.l	d0,d3
0001F222 7000                       		moveq	#0,d0
0001F224 3140 0010                  		move.w	d0,obVelX(a0)
0001F228 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F22E D481                       		add.l	d1,d2
0001F230 6100 0000                  		bsr.w	sub_1BCE8
0001F234 6700                       		beq.s	loc_1BCC6
0001F236 9481                       		sub.l	d1,d2
0001F238 7200                       		moveq	#0,d1
0001F23A 3141 0012                  		move.w	d1,obVelY(a0)
0001F23E 4E75                       		rts	
0001F240                            ; ===========================================================================
0001F240                            
0001F240                            loc_1BCB0:
0001F240 D481                       		add.l	d1,d2
0001F242 6100 0000                  		bsr.w	sub_1BCE8
0001F246 6700                       		beq.s	loc_1BCD4
0001F248 9481                       		sub.l	d1,d2
0001F24A 7200                       		moveq	#0,d1
0001F24C 3141 0012                  		move.w	d1,obVelY(a0)
0001F250 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F256                            
0001F256                            loc_1BCC6:
0001F256 E080                       		asr.l	#8,d0
0001F258 E081                       		asr.l	#8,d1
0001F25A 3140 0010                  		move.w	d0,obVelX(a0)
0001F25E 3141 0012                  		move.w	d1,obVelY(a0)
0001F262 4E75                       		rts	
0001F264                            ; ===========================================================================
0001F264                            
0001F264                            loc_1BCD4:
0001F264 E080                       		asr.l	#8,d0
0001F266 E081                       		asr.l	#8,d1
0001F268 3140 0010                  		move.w	d0,obVelX(a0)
0001F26C 3141 0012                  		move.w	d1,obVelY(a0)
0001F270 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F276 4E75                       		rts	
0001F278                            ; End of function Obj09_Fall
0001F278                            
0001F278                            
0001F278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F278                            
0001F278                            
0001F278                            sub_1BCE8:
0001F278 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F27E 7800                       		moveq	#0,d4
0001F280 4842                       		swap	d2
0001F282 3802                       		move.w	d2,d4
0001F284 4842                       		swap	d2
0001F286 0644 0044                  		addi.w	#$44,d4
0001F28A 88FC 0018                  		divu.w	#$18,d4
0001F28E C8FC 0080                  		mulu.w	#$80,d4
0001F292 D3C4                       		adda.l	d4,a1
0001F294 7800                       		moveq	#0,d4
0001F296 4843                       		swap	d3
0001F298 3803                       		move.w	d3,d4
0001F29A 4843                       		swap	d3
0001F29C 0644 0014                  		addi.w	#$14,d4
0001F2A0 88FC 0018                  		divu.w	#$18,d4
0001F2A4 D2C4                       		adda.w	d4,a1
0001F2A6 7A00                       		moveq	#0,d5
0001F2A8 1819                       		move.b	(a1)+,d4
0001F2AA 6100                       		bsr.s	sub_1BD30
0001F2AC 1819                       		move.b	(a1)+,d4
0001F2AE 6100                       		bsr.s	sub_1BD30
0001F2B0 D2FC 007E                  		adda.w	#$7E,a1
0001F2B4 1819                       		move.b	(a1)+,d4
0001F2B6 6100                       		bsr.s	sub_1BD30
0001F2B8 1819                       		move.b	(a1)+,d4
0001F2BA 6100                       		bsr.s	sub_1BD30
0001F2BC 4A05                       		tst.b	d5
0001F2BE 4E75                       		rts	
0001F2C0                            ; End of function sub_1BCE8
0001F2C0                            
0001F2C0                            
0001F2C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2C0                            
0001F2C0                            
0001F2C0                            sub_1BD30:
0001F2C0 6700                       		beq.s	locret_1BD44
0001F2C2 0C04 0028                  		cmpi.b	#$28,d4
0001F2C6 6700                       		beq.s	locret_1BD44
0001F2C8 0C04 003A                  		cmpi.b	#$3A,d4
0001F2CC 6500                       		bcs.s	loc_1BD46
0001F2CE 0C04 004B                  		cmpi.b	#$4B,d4
0001F2D2 6400                       		bcc.s	loc_1BD46
0001F2D4                            
0001F2D4                            locret_1BD44:
0001F2D4 4E75                       		rts	
0001F2D6                            ; ===========================================================================
0001F2D6                            
0001F2D6                            loc_1BD46:
0001F2D6 1144 0030                  		move.b	d4,$30(a0)
0001F2DA 2149 0032                  		move.l	a1,$32(a0)
0001F2DE 7AFF                       		moveq	#-1,d5
0001F2E0 4E75                       		rts	
0001F2E2                            ; End of function sub_1BD30
0001F2E2                            
0001F2E2                            
0001F2E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F2E2                            
0001F2E2                            
0001F2E2                            Obj09_ChkItems:
0001F2E2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F2E8 7800                       		moveq	#0,d4
0001F2EA 3828 000C                  		move.w	obY(a0),d4
0001F2EE 0644 0050                  		addi.w	#$50,d4
0001F2F2 88FC 0018                  		divu.w	#$18,d4
0001F2F6 C8FC 0080                  		mulu.w	#$80,d4
0001F2FA D3C4                       		adda.l	d4,a1
0001F2FC 7800                       		moveq	#0,d4
0001F2FE 3828 0008                  		move.w	obX(a0),d4
0001F302 0644 0020                  		addi.w	#$20,d4
0001F306 88FC 0018                  		divu.w	#$18,d4
0001F30A D2C4                       		adda.w	d4,a1
0001F30C 1811                       		move.b	(a1),d4
0001F30E 6600                       		bne.s	Obj09_ChkCont
0001F310 4A28 003A                  		tst.b	$3A(a0)
0001F314 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F318 7800                       		moveq	#0,d4
0001F31A 4E75                       		rts	
0001F31C                            ; ===========================================================================
0001F31C                            
0001F31C                            Obj09_ChkCont:
0001F31C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F320 6600                       		bne.s	Obj09_Chk1Up
0001F322 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F326 6600                       		bne.s	Obj09_GetCont
0001F328 14BC 0001                  		move.b	#1,(a2)
0001F32C 2549 0004                  		move.l	a1,4(a2)
0001F330                            
0001F330                            Obj09_GetCont:
0001F330 4EB9 0000 B5C6             		jsr	(CollectRing).l
0001F336 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F33C 6500                       		bcs.s	Obj09_NoCont
0001F33E 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F344 6600                       		bne.s	Obj09_NoCont
0001F346 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F354                            
0001F354                            Obj09_NoCont:
0001F354 7800                       		moveq	#0,d4
0001F356 4E75                       		rts	
0001F358                            ; ===========================================================================
0001F358                            
0001F358                            Obj09_Chk1Up:
0001F358 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F35C 6600                       		bne.s	Obj09_ChkEmer
0001F35E 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F362 6600                       		bne.s	Obj09_Get1Up
0001F364 14BC 0003                  		move.b	#3,(a2)
0001F368 2549 0004                  		move.l	a1,4(a2)
0001F36C                            
0001F36C                            Obj09_Get1Up:
0001F36C 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F370 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F37E 7800                       		moveq	#0,d4
0001F380 4E75                       		rts	
0001F382                            ; ===========================================================================
0001F382                            
0001F382                            Obj09_ChkEmer:
0001F382 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F386 6500                       		bcs.s	Obj09_ChkGhost
0001F388 0C04 0040                  		cmpi.b	#$40,d4
0001F38C 6200                       		bhi.s	Obj09_ChkGhost
0001F38E 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F392 6600                       		bne.s	Obj09_GetEmer
0001F394 14BC 0005                  		move.b	#5,(a2)
0001F398 2549 0004                  		move.l	a1,4(a2)
0001F39C                            
0001F39C                            Obj09_GetEmer:
0001F39C 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F3A2 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F3A4 0404 003B                  		subi.b	#$3B,d4
0001F3A8 7000                       		moveq	#0,d0
0001F3AA 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F3AE 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F3B2 1584 0000                  		move.b	d4,(a2,d0.w)
0001F3B6 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F3BA                            
0001F3BA                            Obj09_NoEmer:
0001F3C4 7800                       		moveq	#0,d4
0001F3C6 4E75                       		rts	
0001F3C8                            ; ===========================================================================
0001F3C8                            
0001F3C8                            Obj09_ChkGhost:
0001F3C8 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F3CC 6600                       		bne.s	Obj09_ChkGhostTag
0001F3CE 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F3D4                            
0001F3D4                            Obj09_ChkGhostTag:
0001F3D4 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F3D8 6600                       		bne.s	Obj09_NoGhost
0001F3DA 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F3E0 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F3E2 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F3E8                            
0001F3E8                            Obj09_NoGhost:
0001F3E8 78FF                       		moveq	#-1,d4
0001F3EA 4E75                       		rts	
0001F3EC                            ; ===========================================================================
0001F3EC                            
0001F3EC                            Obj09_MakeGhostSolid:
0001F3EC 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F3F2 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F3F4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F3FA 723F                       		moveq	#$3F,d1
0001F3FC                            
0001F3FC                            Obj09_GhostLoop2:
0001F3FC 743F                       		moveq	#$3F,d2
0001F3FE                            
0001F3FE                            Obj09_GhostLoop:
0001F3FE 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F402 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F404 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F408                            
0001F408                            Obj09_NoReplace:
0001F408 5249                       		addq.w	#1,a1
0001F40A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F40E 43E9 0040                  		lea	$40(a1),a1
0001F412 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F416                            
0001F416                            Obj09_GhostNotSolid:
0001F416 4228 003A                  		clr.b	$3A(a0)
0001F41A 7800                       		moveq	#0,d4
0001F41C 4E75                       		rts	
0001F41E                            ; End of function Obj09_ChkItems
0001F41E                            
0001F41E                            
0001F41E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F41E                            
0001F41E                            
0001F41E                            Obj09_ChkItems2:
0001F41E 1028 0030                  		move.b	$30(a0),d0
0001F422 6600                       		bne.s	Obj09_ChkBumper
0001F424 5328 0036                  		subq.b	#1,$36(a0)
0001F428 6A00                       		bpl.s	loc_1BEA0
0001F42A 117C 0000 0036             		move.b	#0,$36(a0)
0001F430                            
0001F430                            loc_1BEA0:
0001F430 5328 0037                  		subq.b	#1,$37(a0)
0001F434 6A00                       		bpl.s	locret_1BEAC
0001F436 117C 0000 0037             		move.b	#0,$37(a0)
0001F43C                            
0001F43C                            locret_1BEAC:
0001F43C 4E75                       		rts	
0001F43E                            ; ===========================================================================
0001F43E                            
0001F43E                            Obj09_ChkBumper:
0001F43E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F442 6600                       		bne.s	Obj09_GOAL
0001F444 2228 0032                  		move.l	$32(a0),d1
0001F448 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F44E 3401                       		move.w	d1,d2
0001F450 0241 007F                  		andi.w	#$7F,d1
0001F454 C2FC 0018                  		mulu.w	#$18,d1
0001F458 0441 0014                  		subi.w	#$14,d1
0001F45C EE4A                       		lsr.w	#7,d2
0001F45E 0242 007F                  		andi.w	#$7F,d2
0001F462 C4FC 0018                  		mulu.w	#$18,d2
0001F466 0442 0044                  		subi.w	#$44,d2
0001F46A 9268 0008                  		sub.w	obX(a0),d1
0001F46E 9468 000C                  		sub.w	obY(a0),d2
0001F472 4EB9 0000 3E34             		jsr	(CalcAngle).l
0001F478 4EB9 0000 3BA2             		jsr	(CalcSine).l
0001F47E C3FC F900                  		muls.w	#-$700,d1
0001F482 E081                       		asr.l	#8,d1
0001F484 3141 0010                  		move.w	d1,obVelX(a0)
0001F488 C1FC F900                  		muls.w	#-$700,d0
0001F48C E080                       		asr.l	#8,d0
0001F48E 3140 0012                  		move.w	d0,obVelY(a0)
0001F492 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F498 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F49C 6600                       		bne.s	Obj09_BumpSnd
0001F49E 14BC 0002                  		move.b	#2,(a2)
0001F4A2 2028 0032                  		move.l	$32(a0),d0
0001F4A6 5380                       		subq.l	#1,d0
0001F4A8 2540 0004                  		move.l	d0,4(a2)
0001F4AC                            
0001F4AC                            Obj09_BumpSnd:
0001F4B6                            ; ===========================================================================
0001F4B6                            
0001F4B6                            Obj09_GOAL:
0001F4B6 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F4BA 6600                       		bne.s	Obj09_UPblock
0001F4BC 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F4CA 4E75                       		rts	
0001F4CC                            ; ===========================================================================
0001F4CC                            
0001F4CC                            Obj09_UPblock:
0001F4CC 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F4D0 6600                       		bne.s	Obj09_DOWNblock
0001F4D2 4A28 0036                  		tst.b	$36(a0)
0001F4D6 6600 0000                  		bne.w	Obj09_NoGlass
0001F4DA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F4E0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F4E6 6700                       		beq.s	Obj09_UPsnd
0001F4E8 E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F4EC 2268 0032                  		movea.l	$32(a0),a1
0001F4F0 5389                       		subq.l	#1,a1
0001F4F2 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F4F6                            
0001F4F6                            Obj09_UPsnd:
0001F500                            ; ===========================================================================
0001F500                            
0001F500                            Obj09_DOWNblock:
0001F500 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F504 6600                       		bne.s	Obj09_Rblock
0001F506 4A28 0036                  		tst.b	$36(a0)
0001F50A 6600 0000                  		bne.w	Obj09_NoGlass
0001F50E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F514 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F51A 6600                       		bne.s	Obj09_DOWNsnd
0001F51C E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F520 2268 0032                  		movea.l	$32(a0),a1
0001F524 5389                       		subq.l	#1,a1
0001F526 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F52A                            
0001F52A                            Obj09_DOWNsnd:
0001F534                            ; ===========================================================================
0001F534                            
0001F534                            Obj09_Rblock:
0001F534 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F538 6600                       		bne.s	Obj09_ChkGlass
0001F53A 4A28 0037                  		tst.b	$37(a0)
0001F53E 6600 0000                  		bne.w	Obj09_NoGlass
0001F542 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F548 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F54C 6600                       		bne.s	Obj09_RevStage
0001F54E 14BC 0004                  		move.b	#4,(a2)
0001F552 2028 0032                  		move.l	$32(a0),d0
0001F556 5380                       		subq.l	#1,d0
0001F558 2540 0004                  		move.l	d0,4(a2)
0001F55C                            
0001F55C                            Obj09_RevStage:
0001F55C 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F56A                            ; ===========================================================================
0001F56A                            
0001F56A                            Obj09_ChkGlass:
0001F56A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F56E 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F570 0C00 002E                  		cmpi.b	#$2E,d0
0001F574 6700                       		beq.s	Obj09_Glass
0001F576 0C00 002F                  		cmpi.b	#$2F,d0
0001F57A 6700                       		beq.s	Obj09_Glass
0001F57C 0C00 0030                  		cmpi.b	#$30,d0
0001F580 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F582                            
0001F582                            Obj09_Glass:
0001F582 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F586 6600                       		bne.s	Obj09_GlassSnd
0001F588 14BC 0006                  		move.b	#6,(a2)
0001F58C 2268 0032                  		movea.l	$32(a0),a1
0001F590 5389                       		subq.l	#1,a1
0001F592 2549 0004                  		move.l	a1,4(a2)
0001F596 1011                       		move.b	(a1),d0
0001F598 5200                       		addq.b	#1,d0		; change glass type when touched
0001F59A 0C00 0030                  		cmpi.b	#$30,d0
0001F59E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F5A0 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F5A2                            
0001F5A2                            Obj09_GlassUpdate:
0001F5A2 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F5A6                            
0001F5A6                            Obj09_GlassSnd:
0001F5B0                            ; ===========================================================================
0001F5B0                            
0001F5B0                            Obj09_NoGlass:
0001F5B0 4E75                       		rts	
0001F5B2                            ; End of function Obj09_ChkItems2
0001F5B2                            ; End of function Obj09_ChkItems2
0001F5B2                            
0001F5B2                            		include	"_incObj\10.asm"
0001F5B2                            ; ---------------------------------------------------------------------------
0001F5B2                            ; Object 10 - After-Image
0001F5B2                            ; ---------------------------------------------------------------------------
0001F5B2                            
0001F5B2                            Obj10:
0001F5B2 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F5B8 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F5BC                            
0001F5BC 7000                             moveq   #0,d0
0001F5BE 1028 0024                        move.b   obRoutine(a0),d0
0001F5C2 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F5C6 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F5CA                            
0001F5CA                            ; ===========================================================================
0001F5CA                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F5CA                            ; ===========================================================================
0001F5CA                            Afterimage_Index:
0001F5CA 0000                             dc.w NoAfterImage-Afterimage_Index
0001F5CC 0000                             dc.w NoAfterImage-Afterimage_Index
0001F5CE 0000                             dc.w NoAfterImage-Afterimage_Index
0001F5D0 0000                             dc.w AfterimageStart-Afterimage_Index
0001F5D2 0000                             dc.w NoAfterImage-Afterimage_Index
0001F5D4 0000                             dc.w NoAfterImage-Afterimage_Index
0001F5D6 0000                             dc.w NoAfterImage-Afterimage_Index
0001F5D8 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F5DA 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F5DC                            ; ===========================================================================
0001F5DC                            NoAfterImage:
0001F5DC 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F5E0 4E75                             rts
0001F5E2                            ; ===========================================================================
0001F5E2                            AfterimageStart:
0001F5E2 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F5E8 6000                             bra.s   Afterimage_Show
0001F5EA                            ; ===========================================================================
0001F5EA                            AfterimageLPrio:
0001F5EA 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F5EE                            ; ===========================================================================
0001F5EE                            Afterimage_Show:
0001F5EE 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F5F2 4EB9 0000 3B7C                   jsr   (RandomNumber).l         ; get a random number
0001F5F8 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F5FC 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F5FE 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F600                            
0001F600                            AfterimageException:
0001F600 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F606 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F60C 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F612 4EF9 0000 F43E                   jmp   DisplaySprite
0001F618                            ; ===========================================================================
0001F618                            AfterimageEnd:
0001F618 4EF9 0000 F47E                   jmp   DeleteObject
0001F618 4EF9 0000 F47E                   jmp   DeleteObject
0001F61E                            
0001F61E                            		include	"_inc\AnimateLevelGfx.asm"
0001F61E                            ; ---------------------------------------------------------------------------
0001F61E                            ; Subroutine to	animate	level graphics
0001F61E                            ; ---------------------------------------------------------------------------
0001F61E                            
0001F61E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F61E                            
0001F61E                            
0001F61E                            AnimateLevelGfx:
0001F61E 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001F622 6600                       		bne.s	@ispaused	; if yes, branch
0001F624 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F62A 6100 0000                  		bsr.w	AniArt_GiantRing
0001F62E 7000                       		moveq	#0,d0
0001F630 1038 FE10                  		move.b	(v_zone).w,d0
0001F634 D040                       		add.w	d0,d0
0001F636 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F63A 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F63E                            
0001F63E                            	@ispaused:
0001F63E 4E75                       		rts	
0001F640                            
0001F640                            ; ===========================================================================
0001F640 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F644 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F648 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F64C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F64E                            ; ===========================================================================
0001F64E                            ; ---------------------------------------------------------------------------
0001F64E                            ; Animated pattern routine - Green Hill
0001F64E                            ; ---------------------------------------------------------------------------
0001F64E                            
0001F64E                            AniArt_GHZ:
0001F64E                            
0001F64E                            AniArt_GHZ_Waterfall:
0001F64E                            
0001F64E =00000008                  @size:		equ 8	; number of tiles per frame
0001F64E                            
0001F64E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F652 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F654                            
0001F654 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F65A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F660 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F664 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F668 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F66C 6700                       		beq.s	@isframe0	; branch if frame 0
0001F66E 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F672                            
0001F672                            	@isframe0:
0001F67C 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F680 6000 0000                  		bra.w	LoadTiles
0001F684                            ; ===========================================================================
0001F684                            
0001F684                            AniArt_GHZ_Bigflower:
0001F684                            
0001F684 =00000010                  @size:		equ 16	; number of tiles per frame
0001F684                            
0001F684 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F688 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F68A                            
0001F68A 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F690 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F696 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F69A 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F69E 0240 0001                  		andi.w	#1,d0
0001F6A2 6700                       		beq.s	@isframe0
0001F6A4 43E9 0200                  		lea	@size*$20(a1),a1
0001F6A8                            
0001F6A8                            	@isframe0:
0001F6B2 323C 000F                  		move.w	#@size-1,d1
0001F6B6 6000 0000                  		bra.w	LoadTiles
0001F6BA                            ; ===========================================================================
0001F6BA                            
0001F6BA                            AniArt_GHZ_Smallflower:
0001F6BA                            
0001F6BA =0000000C                  @size:		equ 12	; number of tiles per frame
0001F6BA                            
0001F6BA 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F6BE 6A00                       		bpl.s	@end
0001F6C0                            
0001F6C0 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F6C6 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F6CA 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F6CE 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F6D2 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F6D6 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F6DA 6600                       		bne.s	@isframe1	; if not, branch
0001F6DC 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F6E2                            
0001F6E2                            	@isframe1:
0001F6E2 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F6E4 3200                       		move.w	d0,d1
0001F6E6 D040                       		add.w	d0,d0
0001F6E8 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F6F4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F6FA 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F6FE 323C 000B                  		move.w	#@size-1,d1
0001F702 6100 0000                  		bsr.w	LoadTiles
0001F706                            
0001F706                            @end:
0001F706 4E75                       		rts	
0001F708                            
0001F708 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F70C                            ; ===========================================================================
0001F70C                            ; ---------------------------------------------------------------------------
0001F70C                            ; Animated pattern routine - Marble
0001F70C                            ; ---------------------------------------------------------------------------
0001F70C                            
0001F70C                            AniArt_MZ:
0001F70C                            
0001F70C                            AniArt_MZ_Lava:
0001F70C                            
0001F70C =00000008                  @size:		equ 8	; number of tiles per frame
0001F70C                            
0001F70C 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F710 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F712                            
0001F712 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F718 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F71E 7000                       		moveq	#0,d0
0001F720 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F724 5200                       		addq.b	#1,d0		; increment frame counter
0001F726 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F72A 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F72C 7000                       		moveq	#0,d0
0001F72E                            
0001F72E                            	@frame01or2:
0001F72E 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F732 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F736 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F742 323C 0007                  		move.w	#@size-1,d1
0001F746 6100 0000                  		bsr.w	LoadTiles
0001F74A                            
0001F74A                            AniArt_MZ_Magma:
0001F74A 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F74E 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F750                            		
0001F750 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F756 7000                       		moveq	#0,d0
0001F758 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F75C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F762 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F764 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F770 7600                       		moveq	#0,d3
0001F772 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F776 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F77A 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F77E 343C 0003                  		move.w	#3,d2
0001F782                            
0001F782                            	@loop:
0001F782 3003                       		move.w	d3,d0
0001F784 D040                       		add.w	d0,d0
0001F786 0240 001E                  		andi.w	#$1E,d0
0001F78A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F790 3033 0000                  		move.w	(a3,d0.w),d0
0001F794 47F3 0000                  		lea	(a3,d0.w),a3
0001F798 224C                       		movea.l	a4,a1
0001F79A 323C 001F                  		move.w	#$1F,d1
0001F79E 4E93                       		jsr	(a3)
0001F7A0 5843                       		addq.w	#4,d3
0001F7A2 51CA FFDE                  		dbf	d2,@loop
0001F7A6 4E75                       		rts	
0001F7A8                            ; ===========================================================================
0001F7A8                            
0001F7A8                            AniArt_MZ_Torch:
0001F7A8                            
0001F7A8 =00000006                  @size:		equ 6	; number of tiles per frame
0001F7A8                            
0001F7A8 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F7AC 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F7B0                            		
0001F7B0 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F7B6 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F7BC 7000                       		moveq	#0,d0
0001F7BE 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F7C2 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F7C6 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F7CC C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F7D0 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F7DC 323C 0005                  		move.w	#@size-1,d1
0001F7E0 6000 0000                  		bra.w	LoadTiles
0001F7E4                            
0001F7E4                            @end:
0001F7E4 4E75                       		rts	
0001F7E6                            ; ===========================================================================
0001F7E6                            ; ---------------------------------------------------------------------------
0001F7E6                            ; Animated pattern routine - Scrap Brain
0001F7E6                            ; ---------------------------------------------------------------------------
0001F7E6                            
0001F7E6                            AniArt_SBZ:
0001F7E6                            
0001F7E6 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F7E6                            
0001F7E6 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F7EA 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F7EC                            		
0001F7EC 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F7F0 6000                       		bra.s	@chk_smokepuff2
0001F7F2                            ; ===========================================================================
0001F7F2                            
0001F7F2                            @smokepuff:
0001F7F2 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F7F6 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F7F8                            		
0001F7F8 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F7FE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F80E 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F812 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F816 0240 0007                  		andi.w	#7,d0
0001F81A 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F81C 5340                       		subq.w	#1,d0
0001F81E C0FC 0180                  		mulu.w	#@size*$20,d0
0001F822 43F1 0000                  		lea	(a1,d0.w),a1
0001F826 323C 000B                  		move.w	#@size-1,d1
0001F82A 6000 0000                  		bra.w	LoadTiles
0001F82E                            ; ===========================================================================
0001F82E                            
0001F82E                            @untilnextpuff:
0001F82E 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F834                            
0001F834                            @clearsky:
0001F834 323C 0005                  		move.w	#(@size/2)-1,d1
0001F838 6100 0000                  		bsr.w	LoadTiles
0001F83C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F842 323C 0005                  		move.w	#(@size/2)-1,d1
0001F846 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F84A                            ; ===========================================================================
0001F84A                            
0001F84A                            @chk_smokepuff2:
0001F84A 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F84E 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F850                            		
0001F850 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F854 6000                       		bra.s	@end
0001F856                            ; ===========================================================================
0001F856                            
0001F856                            @smokepuff2:
0001F856 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F85A 6A00                       		bpl.s	@end		; branch if not 0
0001F85C                            		
0001F85C 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F862 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F872 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F876 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F87A 0240 0007                  		andi.w	#7,d0
0001F87E 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F880 5340                       		subq.w	#1,d0
0001F882 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F886 43F1 0000                  		lea	(a1,d0.w),a1
0001F88A 323C 000B                  		move.w	#@size-1,d1
0001F88E 6000 0000                  		bra.w	LoadTiles
0001F892                            ; ===========================================================================
0001F892                            
0001F892                            @untilnextpuff2:
0001F892 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F898 609A                       		bra.s	@clearsky
0001F89A                            ; ===========================================================================
0001F89A                            
0001F89A                            @end:
0001F89A 4E75                       		rts	
0001F89C                            ; ===========================================================================
0001F89C                            ; ---------------------------------------------------------------------------
0001F89C                            ; Animated pattern routine - ending sequence
0001F89C                            ; ---------------------------------------------------------------------------
0001F89C                            
0001F89C                            AniArt_Ending:
0001F89C                            
0001F89C                            AniArt_Ending_BigFlower:
0001F89C                            
0001F89C =00000010                  @size:		equ 16	; number of tiles per frame
0001F89C                            
0001F89C 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F8A0 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F8A2                            		
0001F8A2 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F8A8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F8AE 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F8B2 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F8B6 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F8BA 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F8BE 6700                       		beq.s	@isframe0	; branch if frame 0
0001F8C0 43E9 0200                  		lea	@size*$20(a1),a1
0001F8C4 45EA 0200                  		lea	@size*$20(a2),a2
0001F8C8                            
0001F8C8                            	@isframe0:
0001F8D2 323C 000F                  		move.w	#@size-1,d1
0001F8D6 6100 0000                  		bsr.w	LoadTiles
0001F8DA 224A                       		movea.l	a2,a1
0001F8E6 323C 000F                  		move.w	#@size-1,d1
0001F8EA 6000 0000                  		bra.w	LoadTiles
0001F8EE                            ; ===========================================================================
0001F8EE                            
0001F8EE                            AniArt_Ending_SmallFlower:
0001F8EE                            
0001F8EE =0000000C                  @size:		equ 12	; number of tiles per frame
0001F8EE                            
0001F8EE 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F8F2 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F8F4                            		
0001F8F4 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F8FA 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F8FE 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F902 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F906 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F90A EF48                       		lsl.w	#7,d0		; multiply by $80
0001F90C 3200                       		move.w	d0,d1
0001F90E D040                       		add.w	d0,d0
0001F910 D041                       		add.w	d1,d0		; multiply by 3
0001F91C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F922 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F926 323C 000B                  		move.w	#@size-1,d1
0001F92A 6000 0000                  		bra.w	LoadTiles
0001F92E                            ; ===========================================================================
0001F92E 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F936                            ; ===========================================================================
0001F936                            
0001F936                            AniArt_Ending_Flower3:
0001F936                            
0001F936 =00000010                  @size:		equ 16	; number of tiles per frame
0001F936                            
0001F936 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F93A 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F93C                            		
0001F93C 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F942 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F946 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F94A 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F94E 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F952 E148                       		lsl.w	#8,d0		; multiply by $100
0001F954 D040                       		add.w	d0,d0		; multiply by 2
0001F960 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F964 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F968 323C 000F                  		move.w	#@size-1,d1
0001F96C 6000 0000                  		bra.w	LoadTiles
0001F970                            ; ===========================================================================
0001F970 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F974                            ; ===========================================================================
0001F974                            
0001F974                            AniArt_Ending_Flower4:
0001F974                            
0001F974 =00000010                  @size:		equ 16	; number of tiles per frame
0001F974                            
0001F974 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F978 6A00                       		bpl.s	@end		; branch if not 0
0001F97A                            		
0001F97A 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F980 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F984 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F988 0240 0003                  		andi.w	#3,d0
0001F98C 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F990 E148                       		lsl.w	#8,d0		; multiply by $100
0001F992 D040                       		add.w	d0,d0		; multiply by 2
0001F99E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F9A2 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F9A6 323C 000F                  		move.w	#@size-1,d1
0001F9AA 6000 0000                  		bra.w	LoadTiles
0001F9AE                            ; ===========================================================================
0001F9AE                            
0001F9AE                            @end:
0001F9AE 4E75                       		rts	
0001F9B0                            ; ===========================================================================
0001F9B0                            
0001F9B0                            AniArt_none:
0001F9B0 4E75                       		rts	
0001F9B2                            
0001F9B2                            ; ---------------------------------------------------------------------------
0001F9B2                            ; Subroutine to	transfer graphics to VRAM
0001F9B2                            
0001F9B2                            ; input:
0001F9B2                            ;	a1 = source address
0001F9B2                            ;	a6 = vdp_data_port ($C00000)
0001F9B2                            ;	d1 = number of tiles to load (minus one)
0001F9B2                            ; ---------------------------------------------------------------------------
0001F9B2                            
0001F9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F9B2                            
0001F9B2                            
0001F9B2                            LoadTiles:
0001F9B2 2C99                       		move.l	(a1)+,(a6)
0001F9B4 2C99                       		move.l	(a1)+,(a6)
0001F9B6 2C99                       		move.l	(a1)+,(a6)
0001F9B8 2C99                       		move.l	(a1)+,(a6)
0001F9BA 2C99                       		move.l	(a1)+,(a6)
0001F9BC 2C99                       		move.l	(a1)+,(a6)
0001F9BE 2C99                       		move.l	(a1)+,(a6)
0001F9C0 2C99                       		move.l	(a1)+,(a6)
0001F9C2 51C9 FFEE                  		dbf	d1,LoadTiles
0001F9C6 4E75                       		rts	
0001F9C8                            ; End of function LoadTiles
0001F9C8                            
0001F9C8                            ; ===========================================================================
0001F9C8                            ; ---------------------------------------------------------------------------
0001F9C8                            ; Animated pattern routine - more Marble Zone
0001F9C8                            ; ---------------------------------------------------------------------------
0001F9C8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F9CC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F9D0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F9D4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F9D8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F9DC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F9E0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F9E4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F9E8                            ; ===========================================================================
0001F9E8                            
0001F9E8                            loc_1C3EE:
0001F9E8 2C91                       		move.l	(a1),(a6)
0001F9EA 43E9 0010                  		lea	$10(a1),a1
0001F9EE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F9F2 4E75                       		rts	
0001F9F4                            ; ===========================================================================
0001F9F4                            
0001F9F4                            loc_1C3FA:
0001F9F4 2029 0002                  		move.l	2(a1),d0
0001F9F8 1029 0001                  		move.b	1(a1),d0
0001F9FC E098                       		ror.l	#8,d0
0001F9FE 2C80                       		move.l	d0,(a6)
0001FA00 43E9 0010                  		lea	$10(a1),a1
0001FA04 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001FA08 4E75                       		rts	
0001FA0A                            ; ===========================================================================
0001FA0A                            
0001FA0A                            loc_1C410:
0001FA0A 2CA9 0002                  		move.l	2(a1),(a6)
0001FA0E 43E9 0010                  		lea	$10(a1),a1
0001FA12 51C9 FFF6                  		dbf	d1,loc_1C410
0001FA16 4E75                       		rts	
0001FA18                            ; ===========================================================================
0001FA18                            
0001FA18                            loc_1C41E:
0001FA18 2029 0004                  		move.l	4(a1),d0
0001FA1C 1029 0003                  		move.b	3(a1),d0
0001FA20 E098                       		ror.l	#8,d0
0001FA22 2C80                       		move.l	d0,(a6)
0001FA24 43E9 0010                  		lea	$10(a1),a1
0001FA28 51C9 FFEE                  		dbf	d1,loc_1C41E
0001FA2C 4E75                       		rts	
0001FA2E                            ; ===========================================================================
0001FA2E                            
0001FA2E                            loc_1C434:
0001FA2E 2CA9 0004                  		move.l	4(a1),(a6)
0001FA32 43E9 0010                  		lea	$10(a1),a1
0001FA36 51C9 FFF6                  		dbf	d1,loc_1C434
0001FA3A 4E75                       		rts	
0001FA3C                            ; ===========================================================================
0001FA3C                            
0001FA3C                            loc_1C442:
0001FA3C 2029 0006                  		move.l	6(a1),d0
0001FA40 1029 0005                  		move.b	5(a1),d0
0001FA44 E098                       		ror.l	#8,d0
0001FA46 2C80                       		move.l	d0,(a6)
0001FA48 43E9 0010                  		lea	$10(a1),a1
0001FA4C 51C9 FFEE                  		dbf	d1,loc_1C442
0001FA50 4E75                       		rts	
0001FA52                            ; ===========================================================================
0001FA52                            
0001FA52                            loc_1C458:
0001FA52 2CA9 0006                  		move.l	6(a1),(a6)
0001FA56 43E9 0010                  		lea	$10(a1),a1
0001FA5A 51C9 FFF6                  		dbf	d1,loc_1C458
0001FA5E 4E75                       		rts	
0001FA60                            ; ===========================================================================
0001FA60                            
0001FA60                            loc_1C466:
0001FA60 2029 0008                  		move.l	8(a1),d0
0001FA64 1029 0007                  		move.b	7(a1),d0
0001FA68 E098                       		ror.l	#8,d0
0001FA6A 2C80                       		move.l	d0,(a6)
0001FA6C 43E9 0010                  		lea	$10(a1),a1
0001FA70 51C9 FFEE                  		dbf	d1,loc_1C466
0001FA74 4E75                       		rts	
0001FA76                            ; ===========================================================================
0001FA76                            
0001FA76                            loc_1C47C:
0001FA76 2CA9 0008                  		move.l	8(a1),(a6)
0001FA7A 43E9 0010                  		lea	$10(a1),a1
0001FA7E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001FA82 4E75                       		rts	
0001FA84                            ; ===========================================================================
0001FA84                            
0001FA84                            loc_1C48A:
0001FA84 2029 000A                  		move.l	$A(a1),d0
0001FA88 1029 0009                  		move.b	9(a1),d0
0001FA8C E098                       		ror.l	#8,d0
0001FA8E 2C80                       		move.l	d0,(a6)
0001FA90 43E9 0010                  		lea	$10(a1),a1
0001FA94 51C9 FFEE                  		dbf	d1,loc_1C48A
0001FA98 4E75                       		rts	
0001FA9A                            ; ===========================================================================
0001FA9A                            
0001FA9A                            loc_1C4A0:
0001FA9A 2CA9 000A                  		move.l	$A(a1),(a6)
0001FA9E 43E9 0010                  		lea	$10(a1),a1
0001FAA2 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001FAA6 4E75                       		rts	
0001FAA8                            ; ===========================================================================
0001FAA8                            
0001FAA8                            loc_1C4AE:
0001FAA8 2029 000C                  		move.l	$C(a1),d0
0001FAAC 1029 000B                  		move.b	$B(a1),d0
0001FAB0 E098                       		ror.l	#8,d0
0001FAB2 2C80                       		move.l	d0,(a6)
0001FAB4 43E9 0010                  		lea	$10(a1),a1
0001FAB8 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FABC 4E75                       		rts	
0001FABE                            ; ===========================================================================
0001FABE                            
0001FABE                            loc_1C4C4:
0001FABE 2CA9 000C                  		move.l	$C(a1),(a6)
0001FAC2 43E9 0010                  		lea	$10(a1),a1
0001FAC6 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FACA 4E75                       		rts	
0001FACC                            ; ===========================================================================
0001FACC                            
0001FACC                            loc_1C4D2:
0001FACC 2029 000C                  		move.l	$C(a1),d0
0001FAD0 E198                       		rol.l	#8,d0
0001FAD2 1011                       		move.b	0(a1),d0
0001FAD4 2C80                       		move.l	d0,(a6)
0001FAD6 43E9 0010                  		lea	$10(a1),a1
0001FADA 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FADE 4E75                       		rts	
0001FAE0                            ; ===========================================================================
0001FAE0                            
0001FAE0                            loc_1C4E8:
0001FAE0 3CA9 000E                  		move.w	$E(a1),(a6)
0001FAE4 3C91                       		move.w	0(a1),(a6)
0001FAE6 43E9 0010                  		lea	$10(a1),a1
0001FAEA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FAEE 4E75                       		rts	
0001FAF0                            ; ===========================================================================
0001FAF0                            
0001FAF0                            loc_1C4FA:
0001FAF0 2011                       		move.l	0(a1),d0
0001FAF2 1029 000F                  		move.b	$F(a1),d0
0001FAF6 E098                       		ror.l	#8,d0
0001FAF8 2C80                       		move.l	d0,(a6)
0001FAFA 43E9 0010                  		lea	$10(a1),a1
0001FAFE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FB02 4E75                       		rts	
0001FB04                            
0001FB04                            ; ---------------------------------------------------------------------------
0001FB04                            ; Animated pattern routine - giant ring
0001FB04                            ; ---------------------------------------------------------------------------
0001FB04                            
0001FB04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FB04                            
0001FB04                            
0001FB04                            AniArt_GiantRing:
0001FB04                            
0001FB04 =0000000E                  @size:		equ 14
0001FB04                            
0001FB04 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FB08 6600                       		bne.s	@loadTiles		; If so, get to work
0001FB0A 4E75                       		rts	
0001FB0C                            ; ===========================================================================
0001FB0C                            ; loc_1C518:
0001FB0C                            @loadTiles:
0001FB0C 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FB12 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FB18 7000                       		moveq	#0,d0
0001FB1A 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FB1E 43F1 0000                  		lea	(a1,d0.w),a1
0001FB22                            		; Turn VRAM address into VDP command
0001FB22 0640 8000                  		addi.w	#$8000,d0
0001FB26 E588                       		lsl.l	#2,d0
0001FB28 E448                       		lsr.w	#2,d0
0001FB2A 0040 4000                  		ori.w	#$4000,d0
0001FB2E 4840                       		swap	d0
0001FB30                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FB30 2D40 0004                  		move.l	d0,4(a6)
0001FB34                            
0001FB34 323C 000D                  		move.w	#@size-1,d1
0001FB38 6000 FE78                  		bra.w	LoadTiles
0001FB3C                            
0001FB3C                            ; End of function AniArt_GiantRing
0001FB3C                            ; End of function AniArt_GiantRing
0001FB3C                            
0001FB3C                            		include	"_incObj\21 HUD.asm"
0001FB3C                            ; ---------------------------------------------------------------------------
0001FB3C                            ; Object 21 - SCORE, TIME, RINGS
0001FB3C                            ; ---------------------------------------------------------------------------
0001FB3C                            
0001FB3C                            HUD:
0001FB3C 7000                       		moveq	#0,d0
0001FB3E 1028 0024                  		move.b	obRoutine(a0),d0
0001FB42 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FB46 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FB4A                            ; ===========================================================================
0001FB4A 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FB4C 0000                       		dc.w HUD_Flash-HUD_Index
0001FB4E                            ; ===========================================================================
0001FB4E                            
0001FB4E                            HUD_Main:	; Routine 0
0001FB4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FB52 317C 0090 0008             		move.w	#$90,obX(a0)
0001FB58 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FB5E 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FB66 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FB6C 117C 0000 0001             		move.b	#0,obRender(a0)
0001FB72 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FB78                            
0001FB78                            HUD_Flash:	; Routine 2
0001FB78 7000                       		moveq	#0,d0
0001FB7A 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FB80 6600                       		bne.s	@display
0001FB82 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FB86 6600                       		bne.s	@norings	; if so, branch
0001FB88 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FB8A                            ; ===========================================================================
0001FB8A                            
0001FB8A                            @norings:
0001FB8A 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FB90 6600                       		bne.s	@display	; if not, branch
0001FB92 5440                       		addq.w	#2,d0		; make time counter flash red
0001FB94                            
0001FB94                            	@display:
0001FB94 1140 001A                  		move.b	d0,obFrame(a0)
0001FB98 4EF9 0000 F43E             		jmp	DisplaySprite
0001FB98 4EF9 0000 F43E             		jmp	DisplaySprite
0001FB9E                            Map_HUD:	include	"_maps\HUD.asm"
0001FB9E                            ; ---------------------------------------------------------------------------
0001FB9E                            ; Sprite mappings - SCORE, TIME, RINGS
0001FB9E                            ; ---------------------------------------------------------------------------
0001FB9E                            Map_HUD_internal:
0001FB9E 0000                       		dc.w @allyellow-Map_HUD_internal
0001FBA0 0000                       		dc.w @ringred-Map_HUD_internal
0001FBA2 0000                       		dc.w @timered-Map_HUD_internal
0001FBA4 0000                       		dc.w @allred-Map_HUD_internal
0001FBA6 0A                         @allyellow:	dc.b $A
0001FBA7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FBAC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FBB1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FBB6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FBBB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FBC0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FBC5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FBCA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FBCF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FBD4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FBD9 00                         		dc.b 0
0001FBDA 0A                         @ringred:	dc.b $A
0001FBDB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FBE0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FBE5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FBEA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FBEF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FBF4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FBF9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FBFE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC03 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC08 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC0D 00                         		dc.b 0
0001FC0E 0A                         @timered:	dc.b $A
0001FC0F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC14 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC19 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC1E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FC23 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC28 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FC2D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FC32 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC37 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC3C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC41 00                         		dc.b 0
0001FC42 0A                         @allred:	dc.b $A
0001FC43 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC48 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC4D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC52 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FC57 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC5C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FC61 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FC66 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC6B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC70 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC76 00                         		even
0001FC76 00                         		even
0001FC76                            
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            ; Add points subroutine
0001FC76                            ; ---------------------------------------------------------------------------
0001FC76                            
0001FC76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC76                            
0001FC76                            
0001FC76                            AddPoints:
0001FC76 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FC7C                            
0001FC7C                            
0001FC7C 47F8 FE26                  			lea     (v_score).w,a3
0001FC80 D193                       			add.l   d0,(a3)
0001FC82 223C 000F 423F             			move.l  #999999,d1
0001FC88 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FC8A 6200                       			bhi.s   @belowmax ; if yes, branch
0001FC8C 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FC8E                            		@belowmax:
0001FC8E 2013                       			move.l  (a3),d0
0001FC90 B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FC94 6500                       			blo.s   @noextralife ; if not, branch
0001FC96                            
0001FC96 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FC9E 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FCA2 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FCA4 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FCA8 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FCB6                            
0001FCB6                            @locret_1C6B6:
0001FCB6                            @noextralife:
0001FCB6 4E75                       		rts	
0001FCB8                            ; End of function AddPoints
0001FCB8                            
0001FCB8                            		include	"_inc\HUD_Update.asm"
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8                            ; Subroutine to	update the HUD
0001FCB8                            ; ---------------------------------------------------------------------------
0001FCB8                            
0001FCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FCB8                            
0001FCB8                            hudVRAM:	macro loc
0001FCB8                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FCB8                            		endm
0001FCB8                            
0001FCB8                            
0001FCB8                            HUD_Update:
0001FCB8 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FCBC 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FCC0 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FCC4 6700                       		beq.s	@chkrings	; if not, branch
0001FCC6                            
0001FCC6 4238 FE1F                  		clr.b	(f_scorecount).w
0001FCCA 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FCD0 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FCD4 6100 0000                  		bsr.w	Hud_Score
0001FCD8                            
0001FCD8                            	@chkrings:
0001FCD8 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FCDC 6700                       		beq.s	@chktime	; if not, branch
0001FCDE 6A00                       		bpl.s	@notzero
0001FCE0 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FCE4                            
0001FCE4                            	@notzero:
0001FCE4 4238 FE1D                  		clr.b	(f_ringcount).w
0001FCE8 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FCEE 7200                       		moveq	#0,d1
0001FCF0 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FCF4 6100 0000                  		bsr.w	Hud_Rings
0001FCF8                            
0001FCF8                            	@chktime:
0001FCF8 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FCFC 6700                       		beq.s	@chklives	; if not, branch
0001FCFE 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FD02 6600                       		bne.s	@chklives	; if yes, branch
0001FD04 43F8 FE22                  		lea	(v_time).w,a1
0001FD08 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FD0E 6700                       		beq.s	TimeOver	; if yes, branch
0001FD10                            
0001FD10 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FD12 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FD16 6500                       		bcs.s	@chklives
0001FD18 12BC 0000                  		move.b	#0,(a1)
0001FD1C 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FD1E 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FD22 6500                       		bcs.s	@updatetime
0001FD24 12BC 0000                  		move.b	#0,(a1)
0001FD28 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FD2A 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FD2E 6500                       		bcs.s	@updatetime
0001FD30 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FD34                            
0001FD34                            	@updatetime:
0001FD34 203C 5E40 0003             		hudVRAM	$DE40
0001FD3A 7200                       		moveq	#0,d1
0001FD3C 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FD40 6100 0000                  		bsr.w	Hud_Mins
0001FD44 203C 5EC0 0003             		hudVRAM	$DEC0
0001FD4A 7200                       		moveq	#0,d1
0001FD4C 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FD50 6100 0000                  		bsr.w	Hud_Secs
0001FD54                            
0001FD54                            	@chklives:
0001FD54 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FD58 6700                       		beq.s	@chkbonus	; if not, branch
0001FD5A 4238 FE1C                  		clr.b	(f_lifecount).w
0001FD5E 6100 0000                  		bsr.w	Hud_Lives
0001FD62                            
0001FD62                            	@chkbonus:
0001FD62 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FD66 6700                       		beq.s	@finish		; if not, branch
0001FD68 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FD76 7200                       		moveq	#0,d1
0001FD78 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FD7C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD80 7200                       		moveq	#0,d1
0001FD82 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FD86 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD8A                            
0001FD8A                            	@finish:
0001FD8A 4E75                       		rts	
0001FD8C                            ; ===========================================================================
0001FD8C                            
0001FD8C                            TimeOver:
0001FD8C 4238 FE1E                  		clr.b	(f_timecount).w
0001FD90 41F8 D000                  		lea	(v_player).w,a0
0001FD94 2448                       		movea.l	a0,a2
0001FD96 6100 E82E                  		bsr.w	KillSonic
0001FD9A 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FDA0 4E75                       		rts	
0001FDA2                            ; ===========================================================================
0001FDA2                            
0001FDA2                            HudDebug:
0001FDA2 6100 0000                  		bsr.w	HudDb_XY
0001FDA6 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FDAA 6700                       		beq.s	@objcounter	; if not, branch
0001FDAC 6A00                       		bpl.s	@notzero
0001FDAE 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FDB2                            
0001FDB2                            	@notzero:
0001FDB2 4238 FE1D                  		clr.b	(f_ringcount).w
0001FDB6 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FDBC 7200                       		moveq	#0,d1
0001FDBE 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FDC2 6100 0000                  		bsr.w	Hud_Rings
0001FDC6                            
0001FDC6                            	@objcounter:
0001FDC6 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FDCC 7200                       		moveq	#0,d1
0001FDCE 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FDD2 6100 0000                  		bsr.w	Hud_Secs
0001FDD6 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FDDA 6700                       		beq.s	@chkbonus	; if not, branch
0001FDDC 4238 FE1C                  		clr.b	(f_lifecount).w
0001FDE0 6100 0000                  		bsr.w	Hud_Lives
0001FDE4                            
0001FDE4                            	@chkbonus:
0001FDE4 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FDE8 6700                       		beq.s	@finish		; if not, branch
0001FDEA 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FDF8 7200                       		moveq	#0,d1
0001FDFA 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FDFE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE02 7200                       		moveq	#0,d1
0001FE04 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FE08 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE0C                            
0001FE0C                            	@finish:
0001FE0C 4E75                       		rts	
0001FE0E                            ; End of function HUD_Update
0001FE0E                            
0001FE0E                            ; ---------------------------------------------------------------------------
0001FE0E                            ; Subroutine to	load "0" on the	HUD
0001FE0E                            ; ---------------------------------------------------------------------------
0001FE0E                            
0001FE0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE0E                            
0001FE0E                            
0001FE0E                            Hud_LoadZero:
0001FE18 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FE1C 343C 0002                  		move.w	#2,d2
0001FE20 6000                       		bra.s	loc_1C83E
0001FE22                            ; End of function Hud_LoadZero
0001FE22                            
0001FE22                            ; ---------------------------------------------------------------------------
0001FE22                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FE22                            ; ---------------------------------------------------------------------------
0001FE22                            
0001FE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE22                            
0001FE22                            
0001FE22                            Hud_Base:
0001FE22 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FE28 6100 0000                  		bsr.w	Hud_Lives
0001FE36 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FE3A 343C 000E                  		move.w	#$E,d2
0001FE3E                            
0001FE3E                            loc_1C83E:
0001FE3E 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE42                            
0001FE42                            loc_1C842:
0001FE42 323C 000F                  		move.w	#$F,d1
0001FE46 101A                       		move.b	(a2)+,d0
0001FE48 6B00                       		bmi.s	loc_1C85E
0001FE4A 4880                       		ext.w	d0
0001FE4C EB48                       		lsl.w	#5,d0
0001FE4E 47F1 0000                  		lea	(a1,d0.w),a3
0001FE52                            
0001FE52                            loc_1C852:
0001FE52 2C9B                       		move.l	(a3)+,(a6)
0001FE54 51C9 FFFC                  		dbf	d1,loc_1C852
0001FE58                            
0001FE58                            loc_1C858:
0001FE58 51CA FFE8                  		dbf	d2,loc_1C842
0001FE5C                            
0001FE5C 4E75                       		rts	
0001FE5E                            ; ===========================================================================
0001FE5E                            
0001FE5E                            loc_1C85E:
0001FE5E 2CBC 0000 0000             		move.l	#0,(a6)
0001FE64 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FE68                            
0001FE68 60EE                       		bra.s	loc_1C858
0001FE6A                            ; End of function Hud_Base
0001FE6A                            
0001FE6A                            ; ===========================================================================
0001FE6A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FE76 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FE7A                            ; ---------------------------------------------------------------------------
0001FE7A                            ; Subroutine to	load debug mode	numbers	patterns
0001FE7A                            ; ---------------------------------------------------------------------------
0001FE7A                            
0001FE7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE7A                            
0001FE7A                            
0001FE7A                            HudDb_XY:
0001FE84 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FE88 4841                       		swap	d1
0001FE8A 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FE8E 6100                       		bsr.s	HudDb_XY2
0001FE90 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FE94 4841                       		swap	d1
0001FE96 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FE9A                            ; End of function HudDb_XY
0001FE9A                            
0001FE9A                            
0001FE9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE9A                            
0001FE9A                            
0001FE9A                            HudDb_XY2:
0001FE9A 7C07                       		moveq	#7,d6
0001FE9C 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FEA2                            
0001FEA2                            HudDb_XYLoop:
0001FEA2 E959                       		rol.w	#4,d1
0001FEA4 3401                       		move.w	d1,d2
0001FEA6 0242 000F                  		andi.w	#$F,d2
0001FEAA 0C42 000A                  		cmpi.w	#$A,d2
0001FEAE 6500                       		bcs.s	loc_1C8B2
0001FEB0 5E42                       		addq.w	#7,d2
0001FEB2                            
0001FEB2                            loc_1C8B2:
0001FEB2 EB4A                       		lsl.w	#5,d2
0001FEB4 47F1 2000                  		lea	(a1,d2.w),a3
0001FEB8 2C9B                       		move.l	(a3)+,(a6)
0001FEBA 2C9B                       		move.l	(a3)+,(a6)
0001FEBC 2C9B                       		move.l	(a3)+,(a6)
0001FEBE 2C9B                       		move.l	(a3)+,(a6)
0001FEC0 2C9B                       		move.l	(a3)+,(a6)
0001FEC2 2C9B                       		move.l	(a3)+,(a6)
0001FEC4 2C9B                       		move.l	(a3)+,(a6)
0001FEC6 2C9B                       		move.l	(a3)+,(a6)
0001FEC8 4841                       		swap	d1
0001FECA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FECE                            
0001FECE 4E75                       		rts	
0001FED0                            ; End of function HudDb_XY2
0001FED0                            
0001FED0                            ; ---------------------------------------------------------------------------
0001FED0                            ; Subroutine to	load rings numbers patterns
0001FED0                            ; ---------------------------------------------------------------------------
0001FED0                            
0001FED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FED0                            
0001FED0                            
0001FED0                            Hud_Rings:
0001FED0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FED6 7C02                       		moveq	#2,d6
0001FED8 6000                       		bra.s	Hud_LoadArt
0001FEDA                            ; End of function Hud_Rings
0001FEDA                            
0001FEDA                            ; ---------------------------------------------------------------------------
0001FEDA                            ; Subroutine to	load score numbers patterns
0001FEDA                            ; ---------------------------------------------------------------------------
0001FEDA                            
0001FEDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEDA                            
0001FEDA                            
0001FEDA                            Hud_Score:
0001FEDA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FEE0 7C05                       		moveq	#5,d6
0001FEE2                            
0001FEE2                            Hud_LoadArt:
0001FEE2 7800                       		moveq	#0,d4
0001FEE4 43FA 0000                  		lea	Art_Hud(pc),a1
0001FEE8                            
0001FEE8                            Hud_ScoreLoop:
0001FEE8 7400                       		moveq	#0,d2
0001FEEA 261A                       		move.l	(a2)+,d3
0001FEEC                            
0001FEEC                            loc_1C8EC:
0001FEEC 9283                       		sub.l	d3,d1
0001FEEE 6500                       		bcs.s	loc_1C8F4
0001FEF0 5242                       		addq.w	#1,d2
0001FEF2 60F8                       		bra.s	loc_1C8EC
0001FEF4                            ; ===========================================================================
0001FEF4                            
0001FEF4                            loc_1C8F4:
0001FEF4 D283                       		add.l	d3,d1
0001FEF6 4A42                       		tst.w	d2
0001FEF8 6700                       		beq.s	loc_1C8FE
0001FEFA 383C 0001                  		move.w	#1,d4
0001FEFE                            
0001FEFE                            loc_1C8FE:
0001FEFE 4A44                       		tst.w	d4
0001FF00 6700                       		beq.s	loc_1C92C
0001FF02 ED4A                       		lsl.w	#6,d2
0001FF04 2D40 0004                  		move.l	d0,4(a6)
0001FF08 47F1 2000                  		lea	(a1,d2.w),a3
0001FF0C 2C9B                       		move.l	(a3)+,(a6)
0001FF0E 2C9B                       		move.l	(a3)+,(a6)
0001FF10 2C9B                       		move.l	(a3)+,(a6)
0001FF12 2C9B                       		move.l	(a3)+,(a6)
0001FF14 2C9B                       		move.l	(a3)+,(a6)
0001FF16 2C9B                       		move.l	(a3)+,(a6)
0001FF18 2C9B                       		move.l	(a3)+,(a6)
0001FF1A 2C9B                       		move.l	(a3)+,(a6)
0001FF1C 2C9B                       		move.l	(a3)+,(a6)
0001FF1E 2C9B                       		move.l	(a3)+,(a6)
0001FF20 2C9B                       		move.l	(a3)+,(a6)
0001FF22 2C9B                       		move.l	(a3)+,(a6)
0001FF24 2C9B                       		move.l	(a3)+,(a6)
0001FF26 2C9B                       		move.l	(a3)+,(a6)
0001FF28 2C9B                       		move.l	(a3)+,(a6)
0001FF2A 2C9B                       		move.l	(a3)+,(a6)
0001FF2C                            
0001FF2C                            loc_1C92C:
0001FF2C 0680 0040 0000             		addi.l	#$400000,d0
0001FF32 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FF36                            
0001FF36 4E75                       		rts	
0001FF38                            
0001FF38                            ; End of function Hud_Score
0001FF38                            ; End of function Hud_Score
0001FF38                            
0001FF38                            ; ---------------------------------------------------------------------------
0001FF38                            ; Subroutine to	load countdown numbers on the continue screen
0001FF38                            ; ---------------------------------------------------------------------------
0001FF38                            
0001FF38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF38                            
0001FF38                            
0001FF38                            ContScrCounter:
0001FF42 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FF48 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FF4E 7C01                       		moveq	#1,d6
0001FF50 7800                       		moveq	#0,d4
0001FF52 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FF56                            
0001FF56                            ContScr_Loop:
0001FF56 7400                       		moveq	#0,d2
0001FF58 261A                       		move.l	(a2)+,d3
0001FF5A                            
0001FF5A                            loc_1C95A:
0001FF5A 9283                       		sub.l	d3,d1
0001FF5C 6500                       		blo.s	loc_1C962
0001FF5E 5242                       		addq.w	#1,d2
0001FF60 60F8                       		bra.s	loc_1C95A
0001FF62                            ; ===========================================================================
0001FF62                            
0001FF62                            loc_1C962:
0001FF62 D283                       		add.l	d3,d1
0001FF64 ED4A                       		lsl.w	#6,d2
0001FF66 47F1 2000                  		lea	(a1,d2.w),a3
0001FF6A 2C9B                       		move.l	(a3)+,(a6)
0001FF6C 2C9B                       		move.l	(a3)+,(a6)
0001FF6E 2C9B                       		move.l	(a3)+,(a6)
0001FF70 2C9B                       		move.l	(a3)+,(a6)
0001FF72 2C9B                       		move.l	(a3)+,(a6)
0001FF74 2C9B                       		move.l	(a3)+,(a6)
0001FF76 2C9B                       		move.l	(a3)+,(a6)
0001FF78 2C9B                       		move.l	(a3)+,(a6)
0001FF7A 2C9B                       		move.l	(a3)+,(a6)
0001FF7C 2C9B                       		move.l	(a3)+,(a6)
0001FF7E 2C9B                       		move.l	(a3)+,(a6)
0001FF80 2C9B                       		move.l	(a3)+,(a6)
0001FF82 2C9B                       		move.l	(a3)+,(a6)
0001FF84 2C9B                       		move.l	(a3)+,(a6)
0001FF86 2C9B                       		move.l	(a3)+,(a6)
0001FF88 2C9B                       		move.l	(a3)+,(a6)
0001FF8A 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FF8E                            
0001FF8E 4E75                       		rts	
0001FF90                            ; End of function ContScrCounter
0001FF90                            
0001FF90                            ; ===========================================================================
0001FF90                            
0001FF90                            		include	"_inc\HUD (part 2).asm"
0001FF90                            ; ---------------------------------------------------------------------------
0001FF90                            ; HUD counter sizes
0001FF90                            ; ---------------------------------------------------------------------------
0001FF90 0001 86A0                  Hud_100000:	dc.l 100000
0001FF94 0000 2710                  Hud_10000:	dc.l 10000
0001FF98 0000 03E8                  Hud_1000:	dc.l 1000
0001FF9C 0000 0064                  Hud_100:	dc.l 100
0001FFA0 0000 000A                  Hud_10:		dc.l 10
0001FFA4 0000 0001                  Hud_1:		dc.l 1
0001FFA8                            
0001FFA8                            ; ---------------------------------------------------------------------------
0001FFA8                            ; Subroutine to	load time numbers patterns
0001FFA8                            ; ---------------------------------------------------------------------------
0001FFA8                            
0001FFA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFA8                            
0001FFA8                            
0001FFA8                            Hud_Mins:
0001FFA8 45F9 0001 FFA4             		lea	(Hud_1).l,a2
0001FFAE 7C00                       		moveq	#0,d6
0001FFB0 6000                       		bra.s	loc_1C9BA
0001FFB2                            ; End of function Hud_Mins
0001FFB2                            
0001FFB2                            
0001FFB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFB2                            
0001FFB2                            
0001FFB2                            Hud_Secs:
0001FFB2 45F9 0001 FFA0             		lea	(Hud_10).l,a2
0001FFB8 7C01                       		moveq	#1,d6
0001FFBA                            
0001FFBA                            loc_1C9BA:
0001FFBA 7800                       		moveq	#0,d4
0001FFBC 43FA 0000                  		lea	Art_Hud(pc),a1
0001FFC0                            
0001FFC0                            Hud_TimeLoop:
0001FFC0 7400                       		moveq	#0,d2
0001FFC2 261A                       		move.l	(a2)+,d3
0001FFC4                            
0001FFC4                            loc_1C9C4:
0001FFC4 9283                       		sub.l	d3,d1
0001FFC6 6500                       		bcs.s	loc_1C9CC
0001FFC8 5242                       		addq.w	#1,d2
0001FFCA 60F8                       		bra.s	loc_1C9C4
0001FFCC                            ; ===========================================================================
0001FFCC                            
0001FFCC                            loc_1C9CC:
0001FFCC D283                       		add.l	d3,d1
0001FFCE 4A42                       		tst.w	d2
0001FFD0 6700                       		beq.s	loc_1C9D6
0001FFD2 383C 0001                  		move.w	#1,d4
0001FFD6                            
0001FFD6                            loc_1C9D6:
0001FFD6 ED4A                       		lsl.w	#6,d2
0001FFD8 2D40 0004                  		move.l	d0,4(a6)
0001FFDC 47F1 2000                  		lea	(a1,d2.w),a3
0001FFE0 2C9B                       		move.l	(a3)+,(a6)
0001FFE2 2C9B                       		move.l	(a3)+,(a6)
0001FFE4 2C9B                       		move.l	(a3)+,(a6)
0001FFE6 2C9B                       		move.l	(a3)+,(a6)
0001FFE8 2C9B                       		move.l	(a3)+,(a6)
0001FFEA 2C9B                       		move.l	(a3)+,(a6)
0001FFEC 2C9B                       		move.l	(a3)+,(a6)
0001FFEE 2C9B                       		move.l	(a3)+,(a6)
0001FFF0 2C9B                       		move.l	(a3)+,(a6)
0001FFF2 2C9B                       		move.l	(a3)+,(a6)
0001FFF4 2C9B                       		move.l	(a3)+,(a6)
0001FFF6 2C9B                       		move.l	(a3)+,(a6)
0001FFF8 2C9B                       		move.l	(a3)+,(a6)
0001FFFA 2C9B                       		move.l	(a3)+,(a6)
0001FFFC 2C9B                       		move.l	(a3)+,(a6)
0001FFFE 2C9B                       		move.l	(a3)+,(a6)
00020000 0680 0040 0000             		addi.l	#$400000,d0
00020006 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0002000A                            
0002000A 4E75                       		rts	
0002000C                            ; End of function Hud_Secs
0002000C                            
0002000C                            ; ---------------------------------------------------------------------------
0002000C                            ; Subroutine to	load time/ring bonus numbers patterns
0002000C                            ; ---------------------------------------------------------------------------
0002000C                            
0002000C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002000C                            
0002000C                            
0002000C                            Hud_TimeRingBonus:
0002000C 45F9 0001 FF98             		lea	(Hud_1000).l,a2
00020012 7C03                       		moveq	#3,d6
00020014 7800                       		moveq	#0,d4
00020016 43FA 0000                  		lea	Art_Hud(pc),a1
0002001A                            
0002001A                            Hud_BonusLoop:
0002001A 7400                       		moveq	#0,d2
0002001C 261A                       		move.l	(a2)+,d3
0002001E                            
0002001E                            loc_1CA1E:
0002001E 9283                       		sub.l	d3,d1
00020020 6500                       		bcs.s	loc_1CA26
00020022 5242                       		addq.w	#1,d2
00020024 60F8                       		bra.s	loc_1CA1E
00020026                            ; ===========================================================================
00020026                            
00020026                            loc_1CA26:
00020026 D283                       		add.l	d3,d1
00020028 4A42                       		tst.w	d2
0002002A 6700                       		beq.s	loc_1CA30
0002002C 383C 0001                  		move.w	#1,d4
00020030                            
00020030                            loc_1CA30:
00020030 4A44                       		tst.w	d4
00020032 6700                       		beq.s	Hud_ClrBonus
00020034 ED4A                       		lsl.w	#6,d2
00020036 47F1 2000                  		lea	(a1,d2.w),a3
0002003A 2C9B                       		move.l	(a3)+,(a6)
0002003C 2C9B                       		move.l	(a3)+,(a6)
0002003E 2C9B                       		move.l	(a3)+,(a6)
00020040 2C9B                       		move.l	(a3)+,(a6)
00020042 2C9B                       		move.l	(a3)+,(a6)
00020044 2C9B                       		move.l	(a3)+,(a6)
00020046 2C9B                       		move.l	(a3)+,(a6)
00020048 2C9B                       		move.l	(a3)+,(a6)
0002004A 2C9B                       		move.l	(a3)+,(a6)
0002004C 2C9B                       		move.l	(a3)+,(a6)
0002004E 2C9B                       		move.l	(a3)+,(a6)
00020050 2C9B                       		move.l	(a3)+,(a6)
00020052 2C9B                       		move.l	(a3)+,(a6)
00020054 2C9B                       		move.l	(a3)+,(a6)
00020056 2C9B                       		move.l	(a3)+,(a6)
00020058 2C9B                       		move.l	(a3)+,(a6)
0002005A                            
0002005A                            loc_1CA5A:
0002005A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0002005E                            
0002005E 4E75                       		rts	
00020060                            ; ===========================================================================
00020060                            
00020060                            Hud_ClrBonus:
00020060 7A0F                       		moveq	#$F,d5
00020062                            
00020062                            Hud_ClrBonusLoop:
00020062 2CBC 0000 0000             		move.l	#0,(a6)
00020068 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0002006C                            
0002006C 60EC                       		bra.s	loc_1CA5A
0002006E                            ; End of function Hud_TimeRingBonus
0002006E                            
0002006E                            ; ---------------------------------------------------------------------------
0002006E                            ; Subroutine to	load uncompressed lives	counter	patterns
0002006E                            ; ---------------------------------------------------------------------------
0002006E                            
0002006E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002006E                            
0002006E                            
0002006E                            Hud_Lives:
0002006E 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020074 7200                       		moveq	#0,d1
00020076 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0002007A 45F9 0001 FFA0             		lea	(Hud_10).l,a2
00020080 7C01                       		moveq	#1,d6
00020082 7800                       		moveq	#0,d4
00020084 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020088                            		
00020088                            
00020088                            Hud_LivesLoop:
00020088 2D40 0004                  		move.l	d0,4(a6)
0002008C 7400                       		moveq	#0,d2
0002008E 261A                       		move.l	(a2)+,d3
00020090                            
00020090                            loc_1CA90:
00020090 9283                       		sub.l	d3,d1
00020092 6500                       		bcs.s	loc_1CA98
00020094 5242                       		addq.w	#1,d2
00020096 60F8                       		bra.s	loc_1CA90
00020098                            ; ===========================================================================
00020098                            
00020098                            loc_1CA98:
00020098 D283                       		add.l	d3,d1
0002009A 4A42                       		tst.w	d2
0002009C 6700                       		beq.s	loc_1CAA2
0002009E 383C 0001                  		move.w	#1,d4
000200A2                            
000200A2                            loc_1CAA2:
000200A2 4A44                       		tst.w	d4
000200A4 6700                       		beq.s	Hud_ClrLives
000200A6                            
000200A6                            loc_1CAA6:
000200A6 EB4A                       		lsl.w	#5,d2
000200A8 47F1 2000                  		lea	(a1,d2.w),a3
000200AC 2C9B                       		move.l	(a3)+,(a6)
000200AE 2C9B                       		move.l	(a3)+,(a6)
000200B0 2C9B                       		move.l	(a3)+,(a6)
000200B2 2C9B                       		move.l	(a3)+,(a6)
000200B4 2C9B                       		move.l	(a3)+,(a6)
000200B6 2C9B                       		move.l	(a3)+,(a6)
000200B8 2C9B                       		move.l	(a3)+,(a6)
000200BA 2C9B                       		move.l	(a3)+,(a6)
000200BC                            
000200BC                            loc_1CABC:
000200BC 0680 0040 0000             		addi.l	#$400000,d0
000200C2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
000200C6                            
000200C6 4E75                       		rts	
000200C8                            ; ===========================================================================
000200C8                            
000200C8                            Hud_ClrLives:
000200C8 4A46                       		tst.w	d6
000200CA 67DA                       		beq.s	loc_1CAA6
000200CC 7A07                       		moveq	#7,d5
000200CE                            
000200CE                            Hud_ClrLivesLoop:
000200CE 2CBC 0000 0000             		move.l	#0,(a6)
000200D4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
000200D8 60E2                       		bra.s	loc_1CABC
000200DA                            ; End of function Hud_Lives
000200DA                            ; End of function Hud_Lives
000200DA                            
000200DA                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
000203DA                            		even
000203DA                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0002051A                            		even
0002051A                            
0002051A                            		include	"_incObj\DebugMode.asm"
0002051A                            ; ---------------------------------------------------------------------------
0002051A                            ; When debug mode is currently in use
0002051A                            ; ---------------------------------------------------------------------------
0002051A                            
0002051A                            DebugMode:
0002051A 7000                       		moveq	#0,d0
0002051C 1038 FE08                  		move.b	(v_debuguse).w,d0
00020520 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020524 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020528                            ; ===========================================================================
00020528 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0002052A 0000                       		dc.w Debug_Action-Debug_Index
0002052C                            ; ===========================================================================
0002052C                            
0002052C                            Debug_Main:	; Routine 0
0002052C 5438 FE08                  		addq.b	#2,(v_debuguse).w
00020530 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020536 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002053C 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020542 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020548 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002054E 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020554 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0002055A 117C 0000 001A             		move.b	#0,obFrame(a0)
00020560 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020566 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0002056C 6600                       		bne.s	@islevel	; if not, branch
0002056E                            
0002056E 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020574 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0002057A 7006                       		moveq	#6,d0		; use 6th debug	item list
0002057C 6000                       		bra.s	@selectlist
0002057E                            ; ===========================================================================
0002057E                            
0002057E                            @islevel:
0002057E 7000                       		moveq	#0,d0
00020580 1038 FE10                  		move.b	(v_zone).w,d0
00020584                            
00020584                            @selectlist:
00020584 45F9 0000 0000             		lea	(DebugList).l,a2
0002058A D040                       		add.w	d0,d0
0002058C D4F2 0000                  		adda.w	(a2,d0.w),a2
00020590 3C1A                       		move.w	(a2)+,d6
00020592 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020596 6200                       		bhi.s	@noreset	; if not, branch
00020598 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0002059E                            
0002059E                            	@noreset:
0002059E 6100 0000                  		bsr.w	Debug_ShowItem
000205A2 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000205A8 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000205AE                            
000205AE                            Debug_Action:	; Routine 2
000205AE 7006                       		moveq	#6,d0
000205B0 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
000205B6 6700                       		beq.s	@isntlevel
000205B8                            
000205B8 7000                       		moveq	#0,d0
000205BA 1038 FE10                  		move.b	(v_zone).w,d0
000205BE                            
000205BE                            	@isntlevel:
000205BE 45F9 0000 0000             		lea	(DebugList).l,a2
000205C4 D040                       		add.w	d0,d0
000205C6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000205CA 3C1A                       		move.w	(a2)+,d6
000205CC 6100 0000                  		bsr.w	Debug_Control
000205D0 4EF9 0000 F43E             		jmp	(DisplaySprite).l
000205D6                            
000205D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000205D6                            
000205D6                            
000205D6                            Debug_Control:
000205D6 7800                       		moveq	#0,d4
000205D8 323C 0001                  		move.w	#1,d1
000205DC 1838 F605                  		move.b	(v_jpadpress1).w,d4
000205E0 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
000205E4 6600                       		bne.s	@dirpressed	; if yes, branch
000205E6                            
000205E6 1038 F604                  		move.b	(v_jpadhold1).w,d0
000205EA 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
000205EE 6600                       		bne.s	@dirheld	; if yes, branch
000205F0                            
000205F0 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000205F6 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000205FC 6000 0000                  		bra.w	Debug_ChgItem
00020600                            ; ===========================================================================
00020600                            
00020600                            @dirheld:
00020600 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020604 6600                       		bne.s	loc_1D01C
00020606 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002060C 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
00020610 6600                       		bne.s	@dirpressed
00020612 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020618                            
00020618                            @dirpressed:
00020618 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002061C                            
0002061C                            loc_1D01C:
0002061C 7200                       		moveq	#0,d1
0002061E 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020622 5241                       		addq.w	#1,d1
00020624 4841                       		swap	d1
00020626 E881                       		asr.l	#4,d1
00020628 2428 000C                  		move.l	obY(a0),d2
0002062C 2628 0008                  		move.l	obX(a0),d3
00020630 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020634 6700                       		beq.s	loc_1D03C	; if not, branch
00020636 9481                       		sub.l	d1,d2
00020638 6400                       		bcc.s	loc_1D03C
0002063A 7400                       		moveq	#0,d2
0002063C                            
0002063C                            loc_1D03C:
0002063C 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
00020640 6700                       		beq.s	loc_1D052	; if not, branch
00020642 D481                       		add.l	d1,d2
00020644 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0002064A 6500                       		bcs.s	loc_1D052
0002064C 243C 07FF 0000             		move.l	#$7FF0000,d2
00020652                            
00020652                            loc_1D052:
00020652 0804 0002                  		btst	#bitL,d4
00020656 6700                       		beq.s	loc_1D05E
00020658 9681                       		sub.l	d1,d3
0002065A 6400                       		bcc.s	loc_1D05E
0002065C 7600                       		moveq	#0,d3
0002065E                            
0002065E                            loc_1D05E:
0002065E 0804 0003                  		btst	#bitR,d4
00020662 6700                       		beq.s	loc_1D066
00020664 D681                       		add.l	d1,d3
00020666                            
00020666                            loc_1D066:
00020666 2142 000C                  		move.l	d2,obY(a0)
0002066A 2143 0008                  		move.l	d3,obX(a0)
0002066E                            
0002066E                            Debug_ChgItem:
0002066E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020674 6700                       		beq.s	@createitem	; if not, branch
00020676 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0002067C 6700                       		beq.s	@nextitem	; if not, branch
0002067E 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
00020682 6400                       		bcc.s	@display
00020684 DD38 FE06                  		add.b	d6,(v_debugitem).w
00020688 6000                       		bra.s	@display
0002068A                            ; ===========================================================================
0002068A                            
0002068A                            @nextitem:
0002068A 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00020690 6700                       		beq.s	@createitem	; if not, branch
00020692 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020696 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0002069A 6200                       		bhi.s	@display
0002069C 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000206A2                            
000206A2                            	@display:
000206A2 6000 0000                  		bra.w	Debug_ShowItem
000206A6                            ; ===========================================================================
000206A6                            
000206A6                            @createitem:
000206A6 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000206AC 6700                       		beq.s	@backtonormal	; if not, branch
000206AE 4EB9 0000 F9D8             		jsr	(FindFreeObj).l
000206B4 6600                       		bne.s	@backtonormal
000206B6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000206BC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000206C2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
000206C6 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000206CC 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
000206D2 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
000206D8 7000                       		moveq	#0,d0
000206DA 1038 FE06                  		move.b	(v_debugitem).w,d0
000206DE E748                       		lsl.w	#3,d0
000206E0 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
000206E6 4E75                       		rts	
000206E8                            ; ===========================================================================
000206E8                            
000206E8                            @backtonormal:
000206E8 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
000206EE 6700                       		beq.s	@stayindebug	; if not, branch
000206F0 7000                       		moveq	#0,d0
000206F2 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
000206F6 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000206FE 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020704 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020708 3140 000A                  		move.w	d0,obX+2(a0)
0002070C 3140 000E                  		move.w	d0,obY+2(a0)
00020710 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020716 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002071C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020722 6600                       		bne.s	@stayindebug	; if not, branch
00020724                            
00020724 4278 F780                  		clr.w	(v_ssangle).w
00020728 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
0002072E 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020736 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002073C 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020742 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020748 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002074E                            
0002074E                            	@stayindebug:
0002074E 4E75                       		rts	
00020750                            ; End of function Debug_Control
00020750                            
00020750                            
00020750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020750                            
00020750                            
00020750                            Debug_ShowItem:
00020750 7000                       		moveq	#0,d0
00020752 1038 FE06                  		move.b	(v_debugitem).w,d0
00020756 E748                       		lsl.w	#3,d0
00020758 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
0002075E 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020764 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0002076A 4E75                       		rts	
0002076C                            ; End of function Debug_ShowItem
0002076C                            ; End of function Debug_ShowItem
0002076C                            		include	"_inc\DebugList.asm"
0002076C                            ; ---------------------------------------------------------------------------
0002076C                            ; Debug	mode item lists
0002076C                            ; ---------------------------------------------------------------------------
0002076C                            DebugList:
0002076C 0000                       	dc.w @GHZ-DebugList
0002076E 0000                       	dc.w @LZ-DebugList
00020770 0000                       	dc.w @MZ-DebugList
00020772 0000                       	dc.w @SLZ-DebugList
00020774 0000                       	dc.w @SYZ-DebugList
00020776 0000                       	dc.w @SBZ-DebugList
00020778 0000                       	dc.w @Ending-DebugList
0002077A                            
0002077A                            dbug:	macro map,object,subtype,frame,vram
0002077A                            	dc.l map+(object<<24)
0002077A                            	dc.b subtype,frame
0002077A                            	dc.w vram
0002077A                            	endm
0002077A                            
0002077A                            @GHZ:
0002077A 0000                       	dc.w (@GHZend-@GHZ-2)/8
0002077C                            
0002077C                            ;		mappings	object		subtype	frame	VRAM setting
0002077C 2500 BA5E 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020784 2600 C208 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002078C 1F00 AE3E 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020794 2200 B2C8 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0002079C 2B00 C9AA 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000207A4 3600 EDE8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000207AC 1800 97E4 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
000207B4 3B00 EF0E 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
000207BC 4001 15D4 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
000207C4 4100 FC6A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000207CC 4200 FE94 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
000207D4 4401 01A2 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
000207DC 7901 A262 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000207E4 4B00 BAAE 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
000207EC 7D01 A424 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
000207F4                            	@GHZend:
000207F4                            
000207F4                            @LZ:
000207F4 0000                       	dc.w (@LZend-@LZ-2)/8
000207F6                            
000207F6                            ;		mappings	object		subtype	frame	VRAM setting
000207F6 2500 BA5E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000207FE 2600 C208 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020806 4100 FC6A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002080E 2C00 CA50 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020816 2D00 CC3C 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002081E 1601 3F96 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00020826 1601 3F96 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
0002082E 3300 E0BA 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020836 3200 DC7A 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002083E 3600 EDE8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020846 5201 206C 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002084E 6101 41BE 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00020856 6101 41BE 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
0002085E 6101 41BE 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00020866 6201 4312 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
0002086E 6101 41BE 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00020876 6101 41BE 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
0002087E 6301 4674 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020886 6001 3EE0 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002088E 6401 49C2 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020896 6501 4B4A 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002089E 6501 4B4A 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000208A6 0B01 332C 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000208AE 0C01 33FC 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
000208B6 7901 A262 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000208BE                            	@LZend:
000208BE                            
000208BE                            @MZ:
000208BE 0000                       	dc.w (@MZend-@MZ-2)/8
000208C0                            
000208C0                            ;		mappings	object		subtype	frame	VRAM setting
000208C0 2500 BA5E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000208C8 2600 C208 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208D0 2200 B2C8 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000208D8 3600 EDE8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000208E0 4100 FC6A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000208E8 1300 D14A 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
000208F0 4601 0852 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
000208F8 6E01 92FE 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020900 6A01 8C78 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020908 3300 E0BA 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
00020910 1E00 A556 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020918 5101 1D92 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
00020920 5201 2016 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020928 5300 9E26 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
00020930 5401 113A 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020938 5501 220A 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
00020940 7801 9ECE 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020948 7901 A262 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020950                            	@MZend:
00020950                            
00020950                            @SLZ:
00020950 0000                       	dc.w (@SLZend-@SLZ-2)/8
00020952                            
00020952                            ;		mappings	object		subtype	frame	VRAM setting
00020952 2500 BA5E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002095A 2600 C208 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020962 5901 2D54 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0002096A 5300 9E26 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00020972 1800 9842 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0002097A 5A01 2E8E 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00020982 5B01 3046 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0002098A 5D01 361A 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020992 5E01 39AC 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0002099A 4100 FC6A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000209A2 1300 D14A 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000209AA 1C00 9F58 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
000209B2 5F01 3C2A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000209BA 6001 3EE0 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
000209C2 7901 A262 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000209CA                            	@SLZend:
000209CA                            
000209CA                            @SYZ:
000209CA 0000                       	dc.w (@SYZend-@SYZ-2)/8
000209CC                            
000209CC                            ;		mappings	object		subtype	frame	VRAM setting
000209CC 2500 BA5E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000209D4 2600 C208 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000209DC 3600 EDE8 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000209E4 4100 FC6A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000209EC 4301 00F4 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
000209F4 1201 08D0 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
000209FC 4701 0A74 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020A04 1F00 AE3E 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020A0C 2200 B2C8 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020A14 5001 1864 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020A1C 1800 9830 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020A24 5601 2714 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020A2C 3200 DC7A 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020A34 7801 9ECE 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020A3C 7901 A262 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A44                            	@SYZend:
00020A44                            
00020A44                            @SBZ:
00020A44 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020A46                            
00020A46                            ;		mappings	object		subtype	frame	VRAM setting
00020A46 2500 BA5E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A4E 2600 C208 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020A56 5F01 3C2A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020A5E 6001 3EE0 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020A66 7801 9ECE 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020A6E 1501 2AB0 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020A76 6701 8766 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020A7E 5201 2016 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020A86 3200 DC7A 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020A8E 6901 89C0 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020A96 6901 8A1A 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020A9E 6A01 8C78 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020AA6 5300 9E26 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020AAE 5201 2016 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020AB6 6B01 9048 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020ABE 2A00 A0E8 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020AC6 6B01 9048 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020ACE 6A01 8C78 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020AD6 6B01 9048 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020ADE 6A01 8C78 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020AE6 6B01 9048 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020AEE 6C01 921C 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020AF6 6D01 0544 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020AFE 6D01 0544 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020B06 6E01 92FE 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020B0E 7001 9744 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020B16 7101 34C0 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020B1E 1E00 A556 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020B26 7901 A262 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020B2E                            	@SBZend:
00020B2E                            
00020B2E                            @Ending:
00020B2E 0000                       	dc.w (@Endingend-@Ending-2)/8
00020B30                            
00020B30                            ;		mappings	object		subtype	frame	VRAM setting
00020B30 2500 BA5E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020B38 2500 BA5E 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020B40                            	@Endingend:
00020B40                            
00020B40                            	even
00020B40                            	even
00020B40                            		include	"_inc\LevelHeaders.asm"
00020B40                            ; ---------------------------------------------------------------------------
00020B40                            ; Level Headers
00020B40                            ; ---------------------------------------------------------------------------
00020B40                            
00020B40                            LevelHeaders:
00020B40                            
00020B40                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020B40                            	dc.l (plc1<<24)+lvlgfx
00020B40                            	dc.l (plc2<<24)+sixteen
00020B40                            	dc.l twofivesix
00020B40                            	dc.b 0, music, pal, pal
00020B40                            	endm
00020B40                            
00020B40                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020B40                            ; music (unused), palette (unused), palette
00020B40                            
00020B40                            ;		1st PLC				2nd PLC				256x256 data			palette
00020B40                            ;				level gfx*			16x16 data			music*
00020B40                            
00020B40 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020B50 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020B60 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020B70 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020B80 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020B90 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020BA0 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020BB0                            	even
00020BB0                            
00020BB0                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020BB0                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020BB0                            		include	"_inc\Pattern Load Cues.asm"
00020BB0                            ; ---------------------------------------------------------------------------
00020BB0                            ; Pattern load cues
00020BB0                            ; ---------------------------------------------------------------------------
00020BB0                            ArtLoadCues:
00020BB0                            
00020BB0 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020BB2 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020BB4 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020BB6 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020BB8                            PLC_Levels:
00020BB8 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020BBA 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020BBC 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020BBE 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020BC0 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020BC2 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020BC4 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020BC6 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020BC8 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020BCA 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020BCC 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020BCE 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020BD0 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020BD2 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020BD4 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020BD6 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020BD8 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020BDA                            PLC_Animals:
00020BDA 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020BDC 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020BDE 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020BE0 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020BE2 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020BE4 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020BE6 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020BE8 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020BEA 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020BEC 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020BEE 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020BF0 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020BF2 0000                       ptr_PLC_LifeIcon:		dc.w PLC_LifeIcon-ArtLoadCues
00020BF4 0000                       ptr_PLC_LifeIconF:		dc.w PLC_LifeIconF-ArtLoadCues
00020BF6                            
00020BF6                            plcm:	macro gfx,vram
00020BF6                            	dc.l gfx
00020BF6                            	dc.w vram
00020BF6                            	endm
00020BF6                            
00020BF6                            ; ---------------------------------------------------------------------------
00020BF6                            ; Pattern load cues - standard block 1
00020BF6                            ; ---------------------------------------------------------------------------
00020BF6 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020BF8 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020BFE 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020C04 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings		
00020C0A 0000 0000 ADA0             		plcm	Nem_Points, $ADA0 	; points from enemy
00020C10                            	PLC_Mainend:
00020C10                            ; ---------------------------------------------------------------------------
00020C10                            ; Pattern load cues - standard block 2
00020C10                            ; ---------------------------------------------------------------------------
00020C10 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020C12 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020C18                            	PLC_Main2end:
00020C18                            ; ---------------------------------------------------------------------------
00020C18                            ; Pattern load cues - explosion
00020C18                            ; ---------------------------------------------------------------------------
00020C18 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020C1A 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020C20                            	PLC_Explodeend:
00020C20                            ; ---------------------------------------------------------------------------
00020C20                            ; Pattern load cues - game/time	over
00020C20                            ; ---------------------------------------------------------------------------
00020C20 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020C22 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020C28                            	PLC_GameOverend:
00020C28                            ; ---------------------------------------------------------------------------
00020C28                            ; Pattern load cues - Green Hill
00020C28                            ; ---------------------------------------------------------------------------
00020C28 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020C2A 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020C30 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020C36 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020C3C 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020C42 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020C48 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020C4E 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020C54 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020C5A 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020C60 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C66 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C6C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C72                            
00020C72 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020C74 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020C7A 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020C80 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020C86 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020C8C 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020C92 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020C98                            	PLC_GHZ2end:
00020C98                            ; ---------------------------------------------------------------------------
00020C98                            ; Pattern load cues - Labyrinth
00020C98                            ; ---------------------------------------------------------------------------
00020C98 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020C9A 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020CA0 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
00020CA6                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020CA6 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020CAC 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020CB2 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020CB8 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020CBE 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020CC4 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020CCA 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020CD0                            
00020CD0 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020CD2 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020CD8 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020CDE                            		;plcm	Nem_LzWheel, $7EC0	; wheel
00020CDE                            		;plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020CDE 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020CE4 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020CEA 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020CF0 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020CF6 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020CFC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D02 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D08 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D0E                            	PLC_LZ2end:
00020D0E                            ; ---------------------------------------------------------------------------
00020D0E                            ; Pattern load cues - Marble
00020D0E                            ; ---------------------------------------------------------------------------
00020D0E 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020D10 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020D16 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
00020D1C 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020D22 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020D28                            	;	plcm	Nem_MzGlass, $71C0	; green	glassy block
00020D28 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020D2E 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020D34 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020D3A 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020D40 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020D46                            
00020D46 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020D48 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020D4E 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020D54                            		;plcm	Nem_MzSwitch, $A260	; switch
00020D54 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D5A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D60 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D66 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020D6C 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020D72                            	PLC_MZ2end:
00020D72                            ; ---------------------------------------------------------------------------
00020D72                            ; Pattern load cues - Star Light
00020D72                            ; ---------------------------------------------------------------------------
00020D72 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020D74 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020D7A 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020D80 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020D86 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020D8C 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020D92 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020D98 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020D9E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DA4 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DAA 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020DB0                            
00020DB0 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020DB2 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020DB8 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020DBE 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020DC4 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020DCA 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020DD0 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020DD6                            	PLC_SLZ2end:
00020DD6                            ; ---------------------------------------------------------------------------
00020DD6                            ; Pattern load cues - Spring Yard
00020DD6                            ; ---------------------------------------------------------------------------
00020DD6 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020DD8 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020DDE                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020DDE                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020DDE 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020DE4 0000 0000 7EA0             		plcm	Nem_Bubbles, $7EA0	; bubbles and numbers
00020DEA                            		;plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020DEA 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020DF0 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020DF6 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020DFC 0000 0000 7840             		plcm	Nem_SbzFloor, $7840	; collapsing floor
00020E02 0000 0000 8BA0             		plcm	Nem_SbzBlock, $8BA0	; vanishing block
00020E08 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020E0E                            
00020E0E 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020E10                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020E10 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020E16 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020E1C 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020E22                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020E22 0000 0000 78C0             		plcm	Nem_SbzFloor, $78C0	; collapsing floor
00020E28                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020E28 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020E2E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E34 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E3A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E40                            	PLC_SYZ2end:
00020E40                            ; ---------------------------------------------------------------------------
00020E40                            ; Pattern load cues - Scrap Brain
00020E40                            ; ---------------------------------------------------------------------------
00020E40 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020E42 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020E48                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020E48                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020E48                            		;plcm	Nem_Girder, $5E00	; girder
00020E48 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020E4E 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020E54                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020E54 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020E5A 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020E60 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020E66 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020E6C                            
00020E6C 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020E6E 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
00020E74 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020E7A 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020E80                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020E80 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020E86 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020E8C 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020E92 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020E98 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020E9E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020EA4 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020EAA 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020EB0                            	PLC_SBZ2end:
00020EB0                            ; ---------------------------------------------------------------------------
00020EB0                            ; Pattern load cues - title card
00020EB0                            ; ---------------------------------------------------------------------------
00020EB0 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020EB2 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020EB8                            	PLC_TitleCardend:
00020EB8                            ; ---------------------------------------------------------------------------
00020EB8                            ; Pattern load cues - act 3 boss
00020EB8                            ; ---------------------------------------------------------------------------
00020EB8 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020EBA 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020EC0 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020EC6 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020ECC                            		;plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020ECC                            		;plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020ECC 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020ED2 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020ED8                            	PLC_Bossend:
00020ED8                            ; ---------------------------------------------------------------------------
00020ED8                            ; Pattern load cues - act 1/2 signpost
00020ED8                            ; ---------------------------------------------------------------------------
00020ED8 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020EDA 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020EE0 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020EE6 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020EEC                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020EEC                            	PLC_Signpostend:
00020EEC                            ; ---------------------------------------------------------------------------
00020EEC                            ; Pattern load cues - beta special stage warp effect
00020EEC                            ; ---------------------------------------------------------------------------
00020EEC                            PLC_Warp:
00020EEC                            	PLC_Warpend:
00020EEC                            ; ---------------------------------------------------------------------------
00020EEC                            ; Pattern load cues - special stage
00020EEC                            ; ---------------------------------------------------------------------------
00020EEC 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020EEE 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020EF4 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020EFA 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020F00 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020F06 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020F0C 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020F12 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020F18 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020F1E 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020F24 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020F2A 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020F30 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020F36 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020F3C 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020F42                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020F42                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020F42                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020F42                            	PLC_SpeStageend:
00020F42                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020F42                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020F42                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020F42                            ; ---------------------------------------------------------------------------
00020F42                            ; Pattern load cues - GHZ animals
00020F42                            ; ---------------------------------------------------------------------------
00020F42 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020F44 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020F4A 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020F50                            	PLC_GHZAnimalsend:
00020F50                            ; ---------------------------------------------------------------------------
00020F50                            ; Pattern load cues - LZ animals
00020F50                            ; ---------------------------------------------------------------------------
00020F50 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020F52 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020F58 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020F5E                            	PLC_LZAnimalsend:
00020F5E                            ; ---------------------------------------------------------------------------
00020F5E                            ; Pattern load cues - MZ animals
00020F5E                            ; ---------------------------------------------------------------------------
00020F5E 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020F60 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020F66 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020F6C                            	PLC_MZAnimalsend:
00020F6C                            ; ---------------------------------------------------------------------------
00020F6C                            ; Pattern load cues - SLZ animals
00020F6C                            ; ---------------------------------------------------------------------------
00020F6C 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020F6E 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020F74 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020F7A                            	PLC_SLZAnimalsend:
00020F7A                            ; ---------------------------------------------------------------------------
00020F7A                            ; Pattern load cues - SYZ animals
00020F7A                            ; ---------------------------------------------------------------------------
00020F7A 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020F7C 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020F82 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020F88                            	PLC_SYZAnimalsend:
00020F88                            ; ---------------------------------------------------------------------------
00020F88                            ; Pattern load cues - SBZ animals
00020F88                            ; ---------------------------------------------------------------------------
00020F88 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020F8A 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020F90 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020F96                            	PLC_SBZAnimalsend:
00020F96                            ; ---------------------------------------------------------------------------
00020F96                            ; Pattern load cues - special stage results screen
00020F96                            ; ---------------------------------------------------------------------------
00020F96 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020F98 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020F9E 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020FA4                            	PLC_SpeStResultend:
00020FA4                            ; ---------------------------------------------------------------------------
00020FA4                            ; Pattern load cues - ending sequence
00020FA4                            ; ---------------------------------------------------------------------------
00020FA4 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020FA6 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020FAC 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020FB2 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020FB8                            		;plcm	Nem_EndFlower, $7400	; flowers
00020FB8 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020FBE 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020FC4 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020FCA 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020FD0 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020FD6 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020FDC 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020FE2 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020FE8 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020FEE 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020FF4                            	PLC_Endingend:
00020FF4                            ; ---------------------------------------------------------------------------
00020FF4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020FF4                            ; ---------------------------------------------------------------------------
00020FF4 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020FF6 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020FFC 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00021002 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00021008                            	PLC_TryAgainend:
00021008                            ; ---------------------------------------------------------------------------
00021008                            ; Pattern load cues - Eggman on SBZ 2
00021008                            ; ---------------------------------------------------------------------------
00021008 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
0002100A 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00021010 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00021016 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
0002101C                            	PLC_EggmanSBZ2end:
0002101C                            ; ---------------------------------------------------------------------------
0002101C                            ; Pattern load cues - final boss
0002101C                            ; ---------------------------------------------------------------------------
0002101C 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
0002101E 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00021024 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
0002102A 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021030 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00021036 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
0002103C                            	PLC_FZBossend:
0002103C                            ; ---------------------------------------------------------------------------
0002103C                            ; Pattern load cues - Eggman
0002103C                            ; ---------------------------------------------------------------------------
0002103C 0004                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
0002103E 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021044 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
0002104A 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021050 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021056 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002105C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021062                            	PLC_Eggend:
00021062                            		even
00021062                            ; ---------------------------------------------------------------------------
00021062                            ; Pattern load cues - Life Icon
00021062                            ; ---------------------------------------------------------------------------	
00021062 0000                       PLC_LifeIcon:	dc.w ((PLC_LifeIcon_end-PLC_LifeIcon-2)/6)-1
00021064 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter	
0002106A                            	PLC_LifeIcon_end: 
0002106A                            		even	
0002106A                            ; ---------------------------------------------------------------------------
0002106A                            ; Pattern load cues - Life Icon (Future)
0002106A                            ; ---------------------------------------------------------------------------	
0002106A 0000                       PLC_LifeIconF:	dc.w ((PLC_LifeIconF_end-PLC_LifeIconF-2)/6)-1
0002106C 0000 0000 FA80             		plcm	Nem_Future, $FA80	; lives	counter	
00021072                            	PLC_LifeIconF_end: ; nahhhhh... too far, bro
00021072                            		even			
00021072                            ; ---------------------------------------------------------------------------
00021072                            ; Pattern load cue IDs
00021072                            ; ---------------------------------------------------------------------------
00021072 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021072 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021072 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021072 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021072 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021072 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021072 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021072 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021072 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021072 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021072 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021072 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021072 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021072 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021072 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021072 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021072 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021072 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021072 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021072 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021072 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021072 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021072 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021072 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021072 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021072 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021072 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021072 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021072 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021072 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021072 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021072 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021072 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $20
00021072 =00000021                  plcid_LifeIcon:		equ (ptr_PLC_LifeIcon-ArtLoadCues)/2	; $21
00021072 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021072 =00000022                  plcid_LifeIconF:		equ (ptr_PLC_LifeIconF-ArtLoadCues)/2	; $21
00021072                            
00021200                            			dcb.b	$300,$FF
00021500                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021970                            			even
00021970                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
00021A6C                            			even
00021A6C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
00021B4C                            		even
00021B4C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022FB8                            		even
00022FB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024A98                            		even
00024A98                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024ACC                            		even
00024ACC                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024CFE 00                         		even		
00024CFE                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024DBC                            		even
00024DBC                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00025264                            		even
00025264                            
00025264                            Map_Sonic:	include	"_maps\Sonic.asm"
00025264                            ; --------------------------------------------------------------------------------
00025264                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00025264                            ; --------------------------------------------------------------------------------
00025264                            
00025264                            SME_wvX4F:	
00025264 0000 0000                  		dc.w SME_wvX4F_1EE-SME_wvX4F, SME_wvX4F_1EF-SME_wvX4F	
00025268 0000 0000                  		dc.w SME_wvX4F_204-SME_wvX4F, SME_wvX4F_232-SME_wvX4F	
0002526C 0000 0000                  		dc.w SME_wvX4F_265-SME_wvX4F, SME_wvX4F_27A-SME_wvX4F	
00025270 0000 0000                  		dc.w SME_wvX4F_28A-SME_wvX4F, SME_wvX4F_29A-SME_wvX4F	
00025274 0000 0000                  		dc.w SME_wvX4F_2AF-SME_wvX4F, SME_wvX4F_2BA-SME_wvX4F	
00025278 0000 0000                  		dc.w SME_wvX4F_2CA-SME_wvX4F, SME_wvX4F_2DA-SME_wvX4F	
0002527C 0000 0000                  		dc.w SME_wvX4F_2EA-SME_wvX4F, SME_wvX4F_2FF-SME_wvX4F	
00025280 0000 0000                  		dc.w SME_wvX4F_30F-SME_wvX4F, SME_wvX4F_333-SME_wvX4F	
00025284 0000 0000                  		dc.w SME_wvX4F_34D-SME_wvX4F, SME_wvX4F_358-SME_wvX4F	
00025288 0000 0000                  		dc.w SME_wvX4F_368-SME_wvX4F, SME_wvX4F_37D-SME_wvX4F	
0002528C 0000 0000                  		dc.w SME_wvX4F_388-SME_wvX4F, SME_wvX4F_398-SME_wvX4F	
00025290 0000 0000                  		dc.w SME_wvX4F_3B2-SME_wvX4F, SME_wvX4F_3CC-SME_wvX4F	
00025294 0000 0000                  		dc.w SME_wvX4F_3EB-SME_wvX4F, SME_wvX4F_400-SME_wvX4F	
00025298 0000 0000                  		dc.w SME_wvX4F_410-SME_wvX4F, SME_wvX4F_42A-SME_wvX4F	
0002529C 0000 0000                  		dc.w SME_wvX4F_43F-SME_wvX4F, SME_wvX4F_44F-SME_wvX4F	
000252A0 0000 0000                  		dc.w SME_wvX4F_469-SME_wvX4F, SME_wvX4F_47E-SME_wvX4F	
000252A4 0000 0000                  		dc.w SME_wvX4F_489-SME_wvX4F, SME_wvX4F_494-SME_wvX4F	
000252A8 0000 0000                  		dc.w SME_wvX4F_4AE-SME_wvX4F, SME_wvX4F_4C3-SME_wvX4F	
000252AC 0000 0000                  		dc.w SME_wvX4F_4CE-SME_wvX4F, SME_wvX4F_4DE-SME_wvX4F	
000252B0 0000 0000                  		dc.w SME_wvX4F_4EE-SME_wvX4F, SME_wvX4F_50D-SME_wvX4F	
000252B4 0000 0000                  		dc.w SME_wvX4F_52C-SME_wvX4F, SME_wvX4F_541-SME_wvX4F	
000252B8 0000 0000                  		dc.w SME_wvX4F_551-SME_wvX4F, SME_wvX4F_56B-SME_wvX4F	
000252BC 0000 0000                  		dc.w SME_wvX4F_580-SME_wvX4F, SME_wvX4F_590-SME_wvX4F	
000252C0 0000 0000                  		dc.w SME_wvX4F_5AA-SME_wvX4F, SME_wvX4F_5B5-SME_wvX4F	
000252C4 0000 0000                  		dc.w SME_wvX4F_5C0-SME_wvX4F, SME_wvX4F_5CB-SME_wvX4F	
000252C8 0000 0000                  		dc.w SME_wvX4F_5D6-SME_wvX4F, SME_wvX4F_5E1-SME_wvX4F	
000252CC 0000 0000                  		dc.w SME_wvX4F_5EC-SME_wvX4F, SME_wvX4F_5F7-SME_wvX4F	
000252D0 0000 0000                  		dc.w SME_wvX4F_602-SME_wvX4F, SME_wvX4F_617-SME_wvX4F	
000252D4 0000 0000                  		dc.w SME_wvX4F_627-SME_wvX4F, SME_wvX4F_637-SME_wvX4F	
000252D8 0000 0000                  		dc.w SME_wvX4F_647-SME_wvX4F, SME_wvX4F_65C-SME_wvX4F	
000252DC 0000 0000                  		dc.w SME_wvX4F_66C-SME_wvX4F, SME_wvX4F_67C-SME_wvX4F	
000252E0 0000 0000                  		dc.w SME_wvX4F_68C-SME_wvX4F, SME_wvX4F_697-SME_wvX4F	
000252E4 0000 0000                  		dc.w SME_wvX4F_6A2-SME_wvX4F, SME_wvX4F_6AD-SME_wvX4F	
000252E8 0000 0000                  		dc.w SME_wvX4F_6B8-SME_wvX4F, SME_wvX4F_6C3-SME_wvX4F	
000252EC 0000 0000                  		dc.w SME_wvX4F_6CE-SME_wvX4F, SME_wvX4F_6D9-SME_wvX4F	
000252F0 0000 0000                  		dc.w SME_wvX4F_6E4-SME_wvX4F, SME_wvX4F_6F9-SME_wvX4F	
000252F4 0000 0000                  		dc.w SME_wvX4F_709-SME_wvX4F, SME_wvX4F_714-SME_wvX4F	
000252F8 0000 0000                  		dc.w SME_wvX4F_724-SME_wvX4F, SME_wvX4F_739-SME_wvX4F	
000252FC 0000 0000                  		dc.w SME_wvX4F_749-SME_wvX4F, SME_wvX4F_754-SME_wvX4F	
00025300 0000 0000                  		dc.w SME_wvX4F_764-SME_wvX4F, SME_wvX4F_774-SME_wvX4F	
00025304 0000 0000                  		dc.w SME_wvX4F_784-SME_wvX4F, SME_wvX4F_7B2-SME_wvX4F	
00025308 0000 0000                  		dc.w SME_wvX4F_7E0-SME_wvX4F, SME_wvX4F_7F0-SME_wvX4F	
0002530C 0000 0000                  		dc.w SME_wvX4F_800-SME_wvX4F, SME_wvX4F_810-SME_wvX4F	
00025310 0000 0000                  		dc.w SME_wvX4F_82A-SME_wvX4F, SME_wvX4F_83A-SME_wvX4F	
00025314 0000 0000                  		dc.w SME_wvX4F_84A-SME_wvX4F, SME_wvX4F_864-SME_wvX4F	
00025318 0000 0000                  		dc.w SME_wvX4F_87E-SME_wvX4F, SME_wvX4F_893-SME_wvX4F	
0002531C 0000 0000                  		dc.w SME_wvX4F_8A8-SME_wvX4F, SME_wvX4F_8BD-SME_wvX4F	
00025320 0000 0000                  		dc.w SME_wvX4F_8D2-SME_wvX4F, SME_wvX4F_8D8-SME_wvX4F	
00025324 0000 0000                  		dc.w SME_wvX4F_8DE-SME_wvX4F, SME_wvX4F_8E4-SME_wvX4F	
00025328 0000 0000                  		dc.w SME_wvX4F_8EA-SME_wvX4F, SME_wvX4F_8F0-SME_wvX4F	
0002532C 0000 0000                  		dc.w SME_wvX4F_8F6-SME_wvX4F, SME_wvX4F_8FC-SME_wvX4F	
00025330 0000 0000                  		dc.w SME_wvX4F_90C-SME_wvX4F, SME_wvX4F_912-SME_wvX4F	
00025334 0000 0000                  		dc.w SME_wvX4F_91D-SME_wvX4F, SME_wvX4F_923-SME_wvX4F	
00025338 0000 0000                  		dc.w SME_wvX4F_92E-SME_wvX4F, SME_wvX4F_934-SME_wvX4F	
0002533C 0000 0000                  		dc.w SME_wvX4F_949-SME_wvX4F, SME_wvX4F_96D-SME_wvX4F	
00025340 0000 0000                  		dc.w SME_wvX4F_987-SME_wvX4F, SME_wvX4F_997-SME_wvX4F	
00025344 0000 0000                  		dc.w SME_wvX4F_9B1-SME_wvX4F, SME_wvX4F_9C6-SME_wvX4F	
00025348 0000 0000                  		dc.w SME_wvX4F_9DB-SME_wvX4F, SME_wvX4F_9F0-SME_wvX4F	
0002534C 0000 0000                  		dc.w SME_wvX4F_A1E-SME_wvX4F, SME_wvX4F_A2E-SME_wvX4F	
00025350 0000 0000                  		dc.w SME_wvX4F_A3E-SME_wvX4F, SME_wvX4F_A4E-SME_wvX4F	
00025354 0000 0000                  		dc.w SME_wvX4F_A4F-SME_wvX4F, SME_wvX4F_A78-SME_wvX4F	
00025358 0000 0000                  		dc.w SME_wvX4F_A9C-SME_wvX4F, SME_wvX4F_AB1-SME_wvX4F	
0002535C 0000 0000                  		dc.w SME_wvX4F_AC1-SME_wvX4F, SME_wvX4F_AD1-SME_wvX4F	
00025360 0000 0000                  		dc.w SME_wvX4F_AE1-SME_wvX4F, SME_wvX4F_AEC-SME_wvX4F	
00025364 0000 0000                  		dc.w SME_wvX4F_AFC-SME_wvX4F, SME_wvX4F_B0C-SME_wvX4F	
00025368 0000 0000                  		dc.w SME_wvX4F_B1C-SME_wvX4F, SME_wvX4F_B2C-SME_wvX4F	
0002536C 0000 0000                  		dc.w SME_wvX4F_B41-SME_wvX4F, SME_wvX4F_B6A-SME_wvX4F	
00025370 0000 0000                  		dc.w SME_wvX4F_B7F-SME_wvX4F, SME_wvX4F_B94-SME_wvX4F	
00025374 0000 0000                  		dc.w SME_wvX4F_BAE-SME_wvX4F, SME_wvX4F_BC8-SME_wvX4F	
00025378 0000 0000                  		dc.w SME_wvX4F_BD3-SME_wvX4F, SME_wvX4F_BED-SME_wvX4F	
0002537C 0000 0000                  		dc.w SME_wvX4F_BFD-SME_wvX4F, SME_wvX4F_C17-SME_wvX4F	
00025380 0000 0000                  		dc.w SME_wvX4F_C22-SME_wvX4F, SME_wvX4F_C32-SME_wvX4F	
00025384 0000 0000                  		dc.w SME_wvX4F_C42-SME_wvX4F, SME_wvX4F_C52-SME_wvX4F	
00025388 0000 0000                  		dc.w SME_wvX4F_C5D-SME_wvX4F, SME_wvX4F_C6D-SME_wvX4F	
0002538C 0000 0000                  		dc.w SME_wvX4F_CA5-SME_wvX4F, SME_wvX4F_CC4-SME_wvX4F	
00025390 0000 0000                  		dc.w SME_wvX4F_CD4-SME_wvX4F, SME_wvX4F_CF8-SME_wvX4F	
00025394 0000 0000                  		dc.w SME_wvX4F_D03-SME_wvX4F, SME_wvX4F_D18-SME_wvX4F	
00025398 0000 0000                  		dc.w SME_wvX4F_D28-SME_wvX4F, SME_wvX4F_D38-SME_wvX4F	
0002539C 0000 0000                  		dc.w SME_wvX4F_D4D-SME_wvX4F, SME_wvX4F_D53-SME_wvX4F	
000253A0 0000 0000                  		dc.w SME_wvX4F_D59-SME_wvX4F, SME_wvX4F_D5F-SME_wvX4F	
000253A4 0000 0000                  		dc.w SME_wvX4F_D65-SME_wvX4F, SME_wvX4F_D70-SME_wvX4F	
000253A8 0000 0000                  		dc.w SME_wvX4F_D76-SME_wvX4F, SME_wvX4F_D7C-SME_wvX4F	
000253AC 0000 0000                  		dc.w SME_wvX4F_D82-SME_wvX4F, SME_wvX4F_D92-SME_wvX4F	
000253B0 0000 0000                  		dc.w SME_wvX4F_DA2-SME_wvX4F, SME_wvX4F_DB2-SME_wvX4F	
000253B4 0000 0000                  		dc.w SME_wvX4F_DC2-SME_wvX4F, SME_wvX4F_DD2-SME_wvX4F	
000253B8 0000 0000                  		dc.w SME_wvX4F_DFB-SME_wvX4F, SME_wvX4F_E0B-SME_wvX4F	
000253BC 0000 0000                  		dc.w SME_wvX4F_E1B-SME_wvX4F, SME_wvX4F_E3F-SME_wvX4F	
000253C0 0000 0000                  		dc.w SME_wvX4F_E4F-SME_wvX4F, SME_wvX4F_E55-SME_wvX4F	
000253C4 0000 0000                  		dc.w SME_wvX4F_E5B-SME_wvX4F, SME_wvX4F_E7F-SME_wvX4F	
000253C8 0000 0000                  		dc.w SME_wvX4F_E8F-SME_wvX4F, SME_wvX4F_E95-SME_wvX4F	
000253CC 0000 0000                  		dc.w SME_wvX4F_EA0-SME_wvX4F, SME_wvX4F_EAB-SME_wvX4F	
000253D0 0000 0000                  		dc.w SME_wvX4F_EC5-SME_wvX4F, SME_wvX4F_EE4-SME_wvX4F	
000253D4 0000 0000                  		dc.w SME_wvX4F_EF9-SME_wvX4F, SME_wvX4F_F09-SME_wvX4F	
000253D8 0000 0000                  		dc.w SME_wvX4F_F23-SME_wvX4F, SME_wvX4F_F38-SME_wvX4F	
000253DC 0000 0000                  		dc.w SME_wvX4F_F48-SME_wvX4F, SME_wvX4F_F62-SME_wvX4F	
000253E0 0000 0000                  		dc.w SME_wvX4F_F72-SME_wvX4F, SME_wvX4F_F78-SME_wvX4F	
000253E4 0000 0000                  		dc.w SME_wvX4F_F7E-SME_wvX4F, SME_wvX4F_F8E-SME_wvX4F	
000253E8 0000 0000                  		dc.w SME_wvX4F_F9E-SME_wvX4F, SME_wvX4F_FA4-SME_wvX4F	
000253EC 0000 0000                  		dc.w SME_wvX4F_FB4-SME_wvX4F, SME_wvX4F_FBF-SME_wvX4F	
000253F0 0000 0000                  		dc.w SME_wvX4F_FDE-SME_wvX4F, SME_wvX4F_FFD-SME_wvX4F	
000253F4 0000 0000                  		dc.w SME_wvX4F_1012-SME_wvX4F, SME_wvX4F_1022-SME_wvX4F	
000253F8 0000 0000                  		dc.w SME_wvX4F_103C-SME_wvX4F, SME_wvX4F_1051-SME_wvX4F	
000253FC 0000 0000                  		dc.w SME_wvX4F_1061-SME_wvX4F, SME_wvX4F_107B-SME_wvX4F	
00025400 0000 0000                  		dc.w SME_wvX4F_108B-SME_wvX4F, SME_wvX4F_10A5-SME_wvX4F	
00025404 0000 0000                  		dc.w SME_wvX4F_10BA-SME_wvX4F, SME_wvX4F_10CF-SME_wvX4F	
00025408 0000 0000                  		dc.w SME_wvX4F_10DA-SME_wvX4F, SME_wvX4F_10E5-SME_wvX4F	
0002540C 0000 0000                  		dc.w SME_wvX4F_10F0-SME_wvX4F, SME_wvX4F_10FB-SME_wvX4F	
00025410 0000 0000                  		dc.w SME_wvX4F_1106-SME_wvX4F, SME_wvX4F_1116-SME_wvX4F	
00025414 0000 0000                  		dc.w SME_wvX4F_1126-SME_wvX4F, SME_wvX4F_114A-SME_wvX4F	
00025418 0000 0000                  		dc.w SME_wvX4F_1155-SME_wvX4F, SME_wvX4F_1160-SME_wvX4F	
0002541C 0000 0000                  		dc.w SME_wvX4F_116B-SME_wvX4F, SME_wvX4F_1176-SME_wvX4F	
00025420 0000 0000                  		dc.w SME_wvX4F_1186-SME_wvX4F, SME_wvX4F_119B-SME_wvX4F	
00025424 0000 0000                  		dc.w SME_wvX4F_119C-SME_wvX4F, SME_wvX4F_119D-SME_wvX4F	
00025428 0000 0000                  		dc.w SME_wvX4F_11AD-SME_wvX4F, SME_wvX4F_11BD-SME_wvX4F	
0002542C 0000 0000                  		dc.w SME_wvX4F_11BE-SME_wvX4F, SME_wvX4F_11BF-SME_wvX4F	
00025430 0000 0000                  		dc.w SME_wvX4F_11CA-SME_wvX4F, SME_wvX4F_11D0-SME_wvX4F	
00025434 0000 0000                  		dc.w SME_wvX4F_11DB-SME_wvX4F, SME_wvX4F_11E6-SME_wvX4F	
00025438 0000 0000                  		dc.w SME_wvX4F_11F1-SME_wvX4F, SME_wvX4F_11FC-SME_wvX4F	
0002543C 0000 0000                  		dc.w SME_wvX4F_1216-SME_wvX4F, SME_wvX4F_1230-SME_wvX4F	
00025440 0000 0000                  		dc.w SME_wvX4F_123B-SME_wvX4F, SME_wvX4F_1246-SME_wvX4F	
00025444 0000 0000                  		dc.w SME_wvX4F_1251-SME_wvX4F, SME_wvX4F_125C-SME_wvX4F	
00025448 0000 0000                  		dc.w SME_wvX4F_1267-SME_wvX4F, SME_wvX4F_1272-SME_wvX4F	
0002544C 0000 0000                  		dc.w SME_wvX4F_127D-SME_wvX4F, SME_wvX4F_1288-SME_wvX4F	
00025450 0000                       		dc.w SME_wvX4F_1293-SME_wvX4F	
00025452 00                         SME_wvX4F_1EE:	dc.b 0	
00025453 04                         SME_wvX4F_1EF:	dc.b 4	
00025454 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025459 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002545E 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
00025463 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025468 09                         SME_wvX4F_204:	dc.b 9	
00025469 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002546E 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
00025473 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025478 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
0002547D FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
00025482 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025487 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
0002548C FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
00025491 F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
00025496 0A                         SME_wvX4F_232:	dc.b $A	
00025497 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002549C 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000254A1 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000254A6 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000254AB FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000254B0 F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000254B5 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000254BA F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000254BF F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000254C4 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000254C9 04                         SME_wvX4F_265:	dc.b 4	
000254CA EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000254CF F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000254D4 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000254D9 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000254DE 03                         SME_wvX4F_27A:	dc.b 3	
000254DF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000254E4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000254E9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000254EE 03                         SME_wvX4F_28A:	dc.b 3	
000254EF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000254F4 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000254F9 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000254FE 04                         SME_wvX4F_29A:	dc.b 4	
000254FF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025504 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025509 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002550E 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
00025513 02                         SME_wvX4F_2AF:	dc.b 2	
00025514 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025519 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002551E 03                         SME_wvX4F_2BA:	dc.b 3	
0002551F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025524 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025529 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002552E 03                         SME_wvX4F_2CA:	dc.b 3	
0002552F FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025534 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025539 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002553E 03                         SME_wvX4F_2DA:	dc.b 3	
0002553F F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025544 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025549 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002554E 04                         SME_wvX4F_2EA:	dc.b 4	
0002554F 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025554 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025559 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002555E F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
00025563 03                         SME_wvX4F_2FF:	dc.b 3	
00025564 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025569 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002556E 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
00025573 07                         SME_wvX4F_30F:	dc.b 7	
00025574 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025579 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002557E 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
00025583 F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025588 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
0002558D EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
00025592 F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
00025597 05                         SME_wvX4F_333:	dc.b 5	
00025598 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
0002559D F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000255A2 EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000255A7 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000255AC F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000255B1 02                         SME_wvX4F_34D:	dc.b 2	
000255B2 FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000255B7 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000255BC 03                         SME_wvX4F_358:	dc.b 3	
000255BD F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000255C2 EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000255C7 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000255CC 04                         SME_wvX4F_368:	dc.b 4	
000255CD EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000255D2 FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000255D7 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000255DC 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000255E1 02                         SME_wvX4F_37D:	dc.b 2	
000255E2 EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000255E7 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000255EC 03                         SME_wvX4F_388:	dc.b 3	
000255ED ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000255F2 FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
000255F7 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
000255FC 05                         SME_wvX4F_398:	dc.b 5	
000255FD FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
00025602 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025607 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
0002560C ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
00025611 ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025616 05                         SME_wvX4F_3B2:	dc.b 5	
00025617 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002561C EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
00025621 FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025626 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
0002562B 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00025630 06                         SME_wvX4F_3CC:	dc.b 6	
00025631 ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025636 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
0002563B FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00025640 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025645 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
0002564A F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002564F 04                         SME_wvX4F_3EB:	dc.b 4	
00025650 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025655 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002565A FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002565F 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025664 03                         SME_wvX4F_400:	dc.b 3	
00025665 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
0002566A ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002566F 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025674 05                         SME_wvX4F_410:	dc.b 5	
00025675 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
0002567A EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002567F FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025684 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025689 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002568E 04                         SME_wvX4F_42A:	dc.b 4	
0002568F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00025694 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00025699 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002569E 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000256A3 03                         SME_wvX4F_43F:	dc.b 3	
000256A4 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000256A9 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000256AE 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000256B3 05                         SME_wvX4F_44F:	dc.b 5	
000256B4 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000256B9 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000256BE FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000256C3 FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000256C8 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000256CD 04                         SME_wvX4F_469:	dc.b 4	
000256CE F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000256D3 EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000256D8 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000256DD 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000256E2 02                         SME_wvX4F_47E:	dc.b 2	
000256E3 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000256E8 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000256ED 02                         SME_wvX4F_489:	dc.b 2	
000256EE F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000256F3 F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
000256F8 05                         SME_wvX4F_494:	dc.b 5	
000256F9 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000256FE F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
00025703 F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025708 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
0002570D F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
00025712 04                         SME_wvX4F_4AE:	dc.b 4	
00025713 F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025718 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
0002571D FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
00025722 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025727 02                         SME_wvX4F_4C3:	dc.b 2	
00025728 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
0002572D F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
00025732 03                         SME_wvX4F_4CE:	dc.b 3	
00025733 F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025738 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
0002573D FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
00025742 03                         SME_wvX4F_4DE:	dc.b 3	
00025743 F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025748 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
0002574D F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
00025752 06                         SME_wvX4F_4EE:	dc.b 6	
00025753 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025758 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002575D F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00025762 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025767 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002576C FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00025771 06                         SME_wvX4F_50D:	dc.b 6	
00025772 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025777 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002577C EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00025781 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025786 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002578B 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00025790 04                         SME_wvX4F_52C:	dc.b 4	
00025791 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025796 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002579B EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000257A0 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000257A5 03                         SME_wvX4F_541:	dc.b 3	
000257A6 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000257AB F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000257B0 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000257B5 05                         SME_wvX4F_551:	dc.b 5	
000257B6 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000257BB EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000257C0 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000257C5 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000257CA 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000257CF 04                         SME_wvX4F_56B:	dc.b 4	
000257D0 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000257D5 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000257DA EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000257DF 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000257E4 03                         SME_wvX4F_580:	dc.b 3	
000257E5 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000257EA 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000257EF EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000257F4 05                         SME_wvX4F_590:	dc.b 5	
000257F5 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000257FA EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000257FF F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025804 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025809 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002580E 02                         SME_wvX4F_5AA:	dc.b 2	
0002580F EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025814 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025819 02                         SME_wvX4F_5B5:	dc.b 2	
0002581A FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002581F EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025824 02                         SME_wvX4F_5C0:	dc.b 2	
00025825 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002582A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002582F 02                         SME_wvX4F_5CB:	dc.b 2	
00025830 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025835 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002583A 02                         SME_wvX4F_5D6:	dc.b 2	
0002583B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025840 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025845 02                         SME_wvX4F_5E1:	dc.b 2	
00025846 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002584B FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025850 02                         SME_wvX4F_5EC:	dc.b 2	
00025851 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025856 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002585B 02                         SME_wvX4F_5F7:	dc.b 2	
0002585C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025861 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025866 04                         SME_wvX4F_602:	dc.b 4	
00025867 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002586C EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025871 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025876 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
0002587B 03                         SME_wvX4F_617:	dc.b 3	
0002587C F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
00025881 EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025886 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
0002588B 03                         SME_wvX4F_627:	dc.b 3	
0002588C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025891 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025896 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
0002589B 03                         SME_wvX4F_637:	dc.b 3	
0002589C FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000258A1 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000258A6 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000258AB 04                         SME_wvX4F_647:	dc.b 4	
000258AC EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000258B1 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000258B6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000258BB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000258C0 03                         SME_wvX4F_65C:	dc.b 3	
000258C1 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000258C6 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000258CB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000258D0 03                         SME_wvX4F_66C:	dc.b 3	
000258D1 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000258D6 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000258DB FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000258E0 03                         SME_wvX4F_67C:	dc.b 3	
000258E1 EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000258E6 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000258EB FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000258F0 02                         SME_wvX4F_68C:	dc.b 2	
000258F1 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
000258F6 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
000258FB 02                         SME_wvX4F_697:	dc.b 2	
000258FC F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025901 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025906 02                         SME_wvX4F_6A2:	dc.b 2	
00025907 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002590C F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025911 02                         SME_wvX4F_6AD:	dc.b 2	
00025912 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025917 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002591C 02                         SME_wvX4F_6B8:	dc.b 2	
0002591D F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025922 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025927 02                         SME_wvX4F_6C3:	dc.b 2	
00025928 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002592D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025932 02                         SME_wvX4F_6CE:	dc.b 2	
00025933 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025938 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002593D 02                         SME_wvX4F_6D9:	dc.b 2	
0002593E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025943 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025948 04                         SME_wvX4F_6E4:	dc.b 4	
00025949 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002594E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00025953 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025958 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002595D 03                         SME_wvX4F_6F9:	dc.b 3	
0002595E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
00025963 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025968 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
0002596D 02                         SME_wvX4F_709:	dc.b 2	
0002596E F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
00025973 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025978 03                         SME_wvX4F_714:	dc.b 3	
00025979 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002597E 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025983 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025988 04                         SME_wvX4F_724:	dc.b 4	
00025989 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002598E F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
00025993 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025998 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
0002599D 03                         SME_wvX4F_739:	dc.b 3	
0002599E EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000259A3 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000259A8 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000259AD 02                         SME_wvX4F_749:	dc.b 2	
000259AE F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000259B3 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000259B8 03                         SME_wvX4F_754:	dc.b 3	
000259B9 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000259BE 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000259C3 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000259C8 03                         SME_wvX4F_764:	dc.b 3	
000259C9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000259CE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000259D3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000259D8 03                         SME_wvX4F_774:	dc.b 3	
000259D9 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000259DE 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000259E3 F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000259E8 09                         SME_wvX4F_784:	dc.b 9	
000259E9 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000259EE F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000259F3 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
000259F8 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
000259FD 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00025A02 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025A07 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025A0C F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00025A11 F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025A16 09                         SME_wvX4F_7B2:	dc.b 9	
00025A17 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025A1C F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
00025A21 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025A26 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025A2B 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
00025A30 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025A35 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025A3A F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
00025A3F F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025A44 03                         SME_wvX4F_7E0:	dc.b 3	
00025A45 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025A4A 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
00025A4F EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025A54 03                         SME_wvX4F_7F0:	dc.b 3	
00025A55 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025A5A EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
00025A5F EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025A64 03                         SME_wvX4F_800:	dc.b 3	
00025A65 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025A6A EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
00025A6F 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025A74 05                         SME_wvX4F_810:	dc.b 5	
00025A75 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025A7A 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
00025A7F F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025A84 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025A89 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
00025A8E 03                         SME_wvX4F_82A:	dc.b 3	
00025A8F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025A94 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025A99 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
00025A9E 03                         SME_wvX4F_83A:	dc.b 3	
00025A9F ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
00025AA4 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
00025AA9 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
00025AAE 05                         SME_wvX4F_84A:	dc.b 5	
00025AAF 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
00025AB4 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
00025AB9 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
00025ABE ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
00025AC3 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
00025AC8 05                         SME_wvX4F_864:	dc.b 5	
00025AC9 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
00025ACE 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
00025AD3 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
00025AD8 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
00025ADD ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
00025AE2 04                         SME_wvX4F_87E:	dc.b 4	
00025AE3 F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
00025AE8 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
00025AED E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
00025AF2 F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025AF7 04                         SME_wvX4F_893:	dc.b 4	
00025AF8 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025AFD 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00025B02 F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025B07 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025B0C 04                         SME_wvX4F_8A8:	dc.b 4	
00025B0D EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00025B12 F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025B17 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025B1C 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00025B21 04                         SME_wvX4F_8BD:	dc.b 4	
00025B22 E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025B27 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025B2C F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00025B31 F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025B36 01                         SME_wvX4F_8D2:	dc.b 1	
00025B37 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B3C 01                         SME_wvX4F_8D8:	dc.b 1	
00025B3D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B42 01                         SME_wvX4F_8DE:	dc.b 1	
00025B43 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B48 01                         SME_wvX4F_8E4:	dc.b 1	
00025B49 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B4E 01                         SME_wvX4F_8EA:	dc.b 1	
00025B4F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B54 01                         SME_wvX4F_8F0:	dc.b 1	
00025B55 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B5A 01                         SME_wvX4F_8F6:	dc.b 1	
00025B5B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B60 03                         SME_wvX4F_8FC:	dc.b 3	
00025B61 F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025B66 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025B6B F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00025B70 01                         SME_wvX4F_90C:	dc.b 1	
00025B71 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B76 02                         SME_wvX4F_912:	dc.b 2	
00025B77 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025B7C F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00025B81 01                         SME_wvX4F_91D:	dc.b 1	
00025B82 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B87 02                         SME_wvX4F_923:	dc.b 2	
00025B88 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025B8D 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00025B92 01                         SME_wvX4F_92E:	dc.b 1	
00025B93 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025B98 04                         SME_wvX4F_934:	dc.b 4	
00025B99 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025B9E FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00025BA3 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025BA8 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025BAD 07                         SME_wvX4F_949:	dc.b 7	
00025BAE ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025BB3 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025BB8 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025BBD F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
00025BC2 F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
00025BC7 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
00025BCC FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
00025BD1 05                         SME_wvX4F_96D:	dc.b 5	
00025BD2 F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
00025BD7 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
00025BDC ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
00025BE1 F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025BE6 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
00025BEB 03                         SME_wvX4F_987:	dc.b 3	
00025BEC F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
00025BF1 ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025BF6 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025BFB 05                         SME_wvX4F_997:	dc.b 5	
00025BFC F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4	
00025C01 E80C 000C F4               		dc.b $E8, $C, 0, $C, $F4	
00025C06 1004 0010 F4               		dc.b $10, 4, 0, $10, $F4	
00025C0B 0000 0012 EC               		dc.b 0, 0, 0, $12, $EC	
00025C10 F000 0013 0C               		dc.b $F0, 0, 0, $13, $C	
00025C15 04                         SME_wvX4F_9B1:	dc.b 4	
00025C16 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025C1B F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00025C20 F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025C25 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025C2A 04                         SME_wvX4F_9C6:	dc.b 4	
00025C2B F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00025C30 FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025C35 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025C3A 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
00025C3F 04                         SME_wvX4F_9DB:	dc.b 4	
00025C40 EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025C45 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025C4A F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00025C4F EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025C54 09                         SME_wvX4F_9F0:	dc.b 9	
00025C55 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025C5A EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
00025C5F F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025C64 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025C69 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
00025C6E F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025C73 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025C78 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
00025C7D FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00025C82 03                         SME_wvX4F_A1E:	dc.b 3	
00025C83 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025C88 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
00025C8D 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00025C92 03                         SME_wvX4F_A2E:	dc.b 3	
00025C93 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025C98 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
00025C9D EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
00025CA2 03                         SME_wvX4F_A3E:	dc.b 3	
00025CA3 F30F 0000 EC               		dc.b $F3, $F, 0, 0, $EC	
00025CA8 EB0C 0010 EC               		dc.b $EB, $C, 0, $10, $EC	
00025CAD F303 0014 0C               		dc.b $F3, 3, 0, $14, $C	
00025CB2 00                         SME_wvX4F_A4E:	dc.b 0	
00025CB3 08                         SME_wvX4F_A4F:	dc.b 8	
00025CB4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025CB9 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025CBE F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025CC3 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025CC8 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025CCD 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025CD2 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
00025CD7 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
00025CDC 07                         SME_wvX4F_A78:	dc.b 7	
00025CDD E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025CE2 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025CE7 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025CEC F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025CF1 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025CF6 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025CFB 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00025D00 04                         SME_wvX4F_A9C:	dc.b 4	
00025D01 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025D06 F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025D0B E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025D10 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025D15 03                         SME_wvX4F_AB1:	dc.b 3	
00025D16 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025D1B FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025D20 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025D25 03                         SME_wvX4F_AC1:	dc.b 3	
00025D26 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025D2B FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025D30 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025D35 03                         SME_wvX4F_AD1:	dc.b 3	
00025D36 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025D3B 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025D40 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025D45 02                         SME_wvX4F_AE1:	dc.b 2	
00025D46 F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025D4B F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025D50 03                         SME_wvX4F_AEC:	dc.b 3	
00025D51 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025D56 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025D5B FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025D60 03                         SME_wvX4F_AFC:	dc.b 3	
00025D61 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025D66 FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025D6B 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025D70 03                         SME_wvX4F_B0C:	dc.b 3	
00025D71 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025D76 FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025D7B 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025D80 03                         SME_wvX4F_B1C:	dc.b 3	
00025D81 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025D86 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025D8B 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025D90 04                         SME_wvX4F_B2C:	dc.b 4	
00025D91 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025D96 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025D9B 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025DA0 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025DA5 08                         SME_wvX4F_B41:	dc.b 8	
00025DA6 E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025DAB F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025DB0 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025DB5 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025DBA F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025DBF F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025DC4 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025DC9 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025DCE 04                         SME_wvX4F_B6A:	dc.b 4	
00025DCF F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025DD4 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025DD9 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025DDE F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025DE3 04                         SME_wvX4F_B7F:	dc.b 4	
00025DE4 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025DE9 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025DEE F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025DF3 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025DF8 05                         SME_wvX4F_B94:	dc.b 5	
00025DF9 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025DFE F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025E03 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025E08 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025E0D 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025E12 05                         SME_wvX4F_BAE:	dc.b 5	
00025E13 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025E18 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025E1D 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025E22 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025E27 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025E2C 02                         SME_wvX4F_BC8:	dc.b 2	
00025E2D ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025E32 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025E37 05                         SME_wvX4F_BD3:	dc.b 5	
00025E38 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025E3D ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025E42 F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025E47 ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025E4C ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025E51 03                         SME_wvX4F_BED:	dc.b 3	
00025E52 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025E57 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025E5C 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025E61 05                         SME_wvX4F_BFD:	dc.b 5	
00025E62 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025E67 F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025E6C F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025E71 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025E76 ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025E7B 02                         SME_wvX4F_C17:	dc.b 2	
00025E7C ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025E81 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025E86 03                         SME_wvX4F_C22:	dc.b 3	
00025E87 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025E8C 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025E91 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025E96 03                         SME_wvX4F_C32:	dc.b 3	
00025E97 EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025E9C 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025EA1 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025EA6 03                         SME_wvX4F_C42:	dc.b 3	
00025EA7 F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025EAC 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025EB1 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025EB6 02                         SME_wvX4F_C52:	dc.b 2	
00025EB7 EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025EBC FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025EC1 03                         SME_wvX4F_C5D:	dc.b 3	
00025EC2 E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025EC7 E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025ECC F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025ED1 0B                         SME_wvX4F_C6D:	dc.b $B	
00025ED2 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025ED7 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025EDC 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025EE1 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025EE6 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025EEB F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025EF0 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025EF5 F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025EFA 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025EFF 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025F04 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025F09 06                         SME_wvX4F_CA5:	dc.b 6	
00025F0A E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025F0F E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025F14 F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025F19 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025F1E 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025F23 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025F28 03                         SME_wvX4F_CC4:	dc.b 3	
00025F29 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025F2E FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025F33 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025F38 07                         SME_wvX4F_CD4:	dc.b 7	
00025F39 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025F3E 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025F43 F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025F48 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025F4D F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025F52 F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025F57 F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025F5C 02                         SME_wvX4F_CF8:	dc.b 2	
00025F5D F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025F62 F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025F67 04                         SME_wvX4F_D03:	dc.b 4	
00025F68 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025F6D F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025F72 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025F77 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025F7C 03                         SME_wvX4F_D18:	dc.b 3	
00025F7D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025F82 F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025F87 F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025F8C 03                         SME_wvX4F_D28:	dc.b 3	
00025F8D F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025F92 F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025F97 F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025F9C 04                         SME_wvX4F_D38:	dc.b 4	
00025F9D 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025FA2 F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025FA7 F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025FAC F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025FB1 01                         SME_wvX4F_D4D:	dc.b 1	
00025FB2 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025FB7 01                         SME_wvX4F_D53:	dc.b 1	
00025FB8 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025FBD 01                         SME_wvX4F_D59:	dc.b 1	
00025FBE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025FC3 01                         SME_wvX4F_D5F:	dc.b 1	
00025FC4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025FC9 02                         SME_wvX4F_D65:	dc.b 2	
00025FCA F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025FCF F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025FD4 01                         SME_wvX4F_D70:	dc.b 1	
00025FD5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025FDA 01                         SME_wvX4F_D76:	dc.b 1	
00025FDB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025FE0 01                         SME_wvX4F_D7C:	dc.b 1	
00025FE1 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
00025FE6 03                         SME_wvX4F_D82:	dc.b 3	
00025FE7 E80F 0000 F1               		dc.b $E8, $F, 0, 0, $F1	
00025FEC 0805 0010 F1               		dc.b 8, 5, 0, $10, $F1	
00025FF1 0801 0014 01               		dc.b 8, 1, 0, $14, 1	
00025FF6 03                         SME_wvX4F_D92:	dc.b 3	
00025FF7 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
00025FFC E80B 0006 F1               		dc.b $E8, $B, 0, 6, $F1	
00026001 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026006 03                         SME_wvX4F_DA2:	dc.b 3	
00026007 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
0002600C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026011 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026016 03                         SME_wvX4F_DB2:	dc.b 3	
00026017 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
0002601C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026021 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026026 03                         SME_wvX4F_DC2:	dc.b 3	
00026027 E80B 0000 F1               		dc.b $E8, $B, 0, 0, $F1	
0002602C 0809 000C F1               		dc.b 8, 9, 0, $C, $F1	
00026031 0000 0012 09               		dc.b 0, 0, 0, $12, 9	
00026036 08                         SME_wvX4F_DD2:	dc.b 8	
00026037 0809 0000 F1               		dc.b 8, 9, 0, 0, $F1	
0002603C 0000 0006 09               		dc.b 0, 0, 0, 6, 9	
00026041 F002 0007 F9               		dc.b $F0, 2, 0, 7, $F9	
00026046 F001 000A 01               		dc.b $F0, 1, 0, $A, 1	
0002604B 0000 000C F1               		dc.b 0, 0, 0, $C, $F1	
00026050 0000 000D 01               		dc.b 0, 0, 0, $D, 1	
00026055 E802 000E F1               		dc.b $E8, 2, 0, $E, $F1	
0002605A E804 0011 F9               		dc.b $E8, 4, 0, $11, $F9	
0002605F 03                         SME_wvX4F_DFB:	dc.b 3	
00026060 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026065 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
0002606A E40C 0013 EF               		dc.b $E4, $C, 0, $13, $EF	
0002606F 03                         SME_wvX4F_E0B:	dc.b 3	
00026070 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026075 EC0F 0003 EF               		dc.b $EC, $F, 0, 3, $EF	
0002607A E408 0013 EF               		dc.b $E4, 8, 0, $13, $EF	
0002607F 07                         SME_wvX4F_E1B:	dc.b 7	
00026080 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00026085 F402 0003 F7               		dc.b $F4, 2, 0, 3, $F7	
0002608A F402 0006 FF               		dc.b $F4, 2, 0, 6, $FF	
0002608F EC02 0009 07               		dc.b $EC, 2, 0, 9, 7	
00026094 0400 000C EF               		dc.b 4, 0, 0, $C, $EF	
00026099 E403 000D EF               		dc.b $E4, 3, 0, $D, $EF	
0002609E E405 0011 F7               		dc.b $E4, 5, 0, $11, $F7	
000260A3 03                         SME_wvX4F_E3F:	dc.b 3	
000260A4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
000260A9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
000260AE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
000260B3 01                         SME_wvX4F_E4F:	dc.b 1	
000260B4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000260B9 01                         SME_wvX4F_E55:	dc.b 1	
000260BA FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000260BF 07                         SME_wvX4F_E5B:	dc.b 7	
000260C0 0500 0000 10               		dc.b 5, 0, 0, 0, $10	
000260C5 0301 0001 F0               		dc.b 3, 1, 0, 1, $F0	
000260CA 0301 0003 F8               		dc.b 3, 1, 0, 3, $F8	
000260CF FB02 0005 00               		dc.b $FB, 2, 0, 5, 0	
000260D4 FB00 0008 F8               		dc.b $FB, 0, 0, 8, $F8	
000260D9 FB00 0009 F0               		dc.b $FB, 0, 0, 9, $F0	
000260DE FB02 000A 08               		dc.b $FB, 2, 0, $A, 8	
000260E3 03                         SME_wvX4F_E7F:	dc.b 3	
000260E4 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
000260E9 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
000260EE 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
000260F3 01                         SME_wvX4F_E8F:	dc.b 1	
000260F4 FC0E 0000 EE               		dc.b $FC, $E, 0, 0, $EE	
000260F9 02                         SME_wvX4F_E95:	dc.b 2	
000260FA FD06 0000 F6               		dc.b $FD, 6, 0, 0, $F6	
000260FF FD00 0006 06               		dc.b $FD, 0, 0, 6, 6	
00026104 02                         SME_wvX4F_EA0:	dc.b 2	
00026105 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002610A 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
0002610F 05                         SME_wvX4F_EAB:	dc.b 5	
00026110 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026115 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002611A FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
0002611F 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00026124 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
00026129 06                         SME_wvX4F_EC5:	dc.b 6	
0002612A ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
0002612F ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00026134 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
00026139 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
0002613E FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00026143 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
00026148 04                         SME_wvX4F_EE4:	dc.b 4	
00026149 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002614E EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00026153 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
00026158 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
0002615D 03                         SME_wvX4F_EF9:	dc.b 3	
0002615E ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00026163 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
00026168 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
0002616D 05                         SME_wvX4F_F09:	dc.b 5	
0002616E EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00026173 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
00026178 FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
0002617D 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00026182 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
00026187 04                         SME_wvX4F_F23:	dc.b 4	
00026188 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
0002618D EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00026192 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00026197 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
0002619C 03                         SME_wvX4F_F38:	dc.b 3	
0002619D ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000261A2 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000261A7 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000261AC 05                         SME_wvX4F_F48:	dc.b 5	
000261AD ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000261B2 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000261B7 FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000261BC FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000261C1 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000261C6 03                         SME_wvX4F_F62:	dc.b 3	
000261C7 EB09 0000 FD               		dc.b $EB, 9, 0, 0, $FD	
000261CC FB04 0006 FD               		dc.b $FB, 4, 0, 6, $FD	
000261D1 0309 0008 FD               		dc.b 3, 9, 0, 8, $FD	
000261D6 01                         SME_wvX4F_F72:	dc.b 1	
000261D7 EC0B 0000 FD               		dc.b $EC, $B, 0, 0, $FD	
000261DC 01                         SME_wvX4F_F78:	dc.b 1	
000261DD F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000261E2 03                         SME_wvX4F_F7E:	dc.b 3	
000261E3 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
000261E8 F90A 0001 FC               		dc.b $F9, $A, 0, 1, $FC	
000261ED F108 000A FC               		dc.b $F1, 8, 0, $A, $FC	
000261F2 03                         SME_wvX4F_F8E:	dc.b 3	
000261F3 EB09 0000 FC               		dc.b $EB, 9, 0, 0, $FC	
000261F8 FB04 0006 FC               		dc.b $FB, 4, 0, 6, $FC	
000261FD 0309 0008 FC               		dc.b 3, 9, 0, 8, $FC	
00026202 01                         SME_wvX4F_F9E:	dc.b 1	
00026203 F30B 0000 FD               		dc.b $F3, $B, 0, 0, $FD	
00026208 03                         SME_wvX4F_FA4:	dc.b 3	
00026209 FC01 0000 0D               		dc.b $FC, 1, 0, 0, $D	
0002620E F400 0002 FD               		dc.b $F4, 0, 0, 2, $FD	
00026213 FC05 0003 FD               		dc.b $FC, 5, 0, 3, $FD	
00026218 02                         SME_wvX4F_FB4:	dc.b 2	
00026219 EC00 0000 FD               		dc.b $EC, 0, 0, 0, $FD	
0002621E F40A 0001 FD               		dc.b $F4, $A, 0, 1, $FD	
00026223 06                         SME_wvX4F_FBF:	dc.b 6	
00026224 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00026229 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
0002622E F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
00026233 F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00026238 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
0002623D FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
00026242 06                         SME_wvX4F_FDE:	dc.b 6	
00026243 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00026248 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
0002624D EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
00026252 F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00026257 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
0002625C 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
00026261 04                         SME_wvX4F_FFD:	dc.b 4	
00026262 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00026267 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
0002626C EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
00026271 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00026276 03                         SME_wvX4F_1012:	dc.b 3	
00026277 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
0002627C F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
00026281 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
00026286 05                         SME_wvX4F_1022:	dc.b 5	
00026287 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
0002628C EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
00026291 F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
00026296 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
0002629B 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000262A0 04                         SME_wvX4F_103C:	dc.b 4	
000262A1 FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000262A6 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000262AB EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000262B0 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000262B5 03                         SME_wvX4F_1051:	dc.b 3	
000262B6 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000262BB 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000262C0 EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
000262C5 05                         SME_wvX4F_1061:	dc.b 5	
000262C6 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000262CB EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
000262D0 F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
000262D5 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000262DA 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
000262DF 03                         SME_wvX4F_107B:	dc.b 3	
000262E0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
000262E5 1008 000C F0               		dc.b $10, 8, 0, $C, $F0	
000262EA 0800 000F F0               		dc.b 8, 0, 0, $F, $F0	
000262EF 05                         SME_wvX4F_108B:	dc.b 5	
000262F0 F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
000262F5 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
000262FA 1004 000E F8               		dc.b $10, 4, 0, $E, $F8	
000262FF F004 0010 F8               		dc.b $F0, 4, 0, $10, $F8	
00026304 1000 0012 08               		dc.b $10, 0, 0, $12, 8	
00026309 04                         SME_wvX4F_10A5:	dc.b 4	
0002630A F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
0002630F 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026314 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
00026319 F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
0002631E 04                         SME_wvX4F_10BA:	dc.b 4	
0002631F F80E 0000 F8               		dc.b $F8, $E, 0, 0, $F8	
00026324 0801 000C F0               		dc.b 8, 1, 0, $C, $F0	
00026329 1008 000E F8               		dc.b $10, 8, 0, $E, $F8	
0002632E F008 0011 F8               		dc.b $F0, 8, 0, $11, $F8	
00026333 02                         SME_wvX4F_10CF:	dc.b 2	
00026334 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026339 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
0002633E 02                         SME_wvX4F_10DA:	dc.b 2	
0002633F F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026344 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026349 02                         SME_wvX4F_10E5:	dc.b 2	
0002634A F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
0002634F E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
00026354 02                         SME_wvX4F_10F0:	dc.b 2	
00026355 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
0002635A E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
0002635F 02                         SME_wvX4F_10FB:	dc.b 2	
00026360 F00C 0000 F0               		dc.b $F0, $C, 0, 0, $F0	
00026365 F80F 0004 F0               		dc.b $F8, $F, 0, 4, $F0	
0002636A 03                         SME_wvX4F_1106:	dc.b 3	
0002636B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026370 F00C 0010 F0               		dc.b $F0, $C, 0, $10, $F0	
00026375 F002 0014 E8               		dc.b $F0, 2, 0, $14, $E8	
0002637A 03                         SME_wvX4F_1116:	dc.b 3	
0002637B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
00026380 F008 0010 F0               		dc.b $F0, 8, 0, $10, $F0	
00026385 F002 0013 E8               		dc.b $F0, 2, 0, $13, $E8	
0002638A 07                         SME_wvX4F_1126:	dc.b 7	
0002638B F00A 0000 E8               		dc.b $F0, $A, 0, 0, $E8	
00026390 F000 0009 00               		dc.b $F0, 0, 0, 9, 0	
00026395 F803 000A 00               		dc.b $F8, 3, 0, $A, 0	
0002639A 0800 000E 08               		dc.b 8, 0, 0, $E, 8	
0002639F 0000 000F 08               		dc.b 0, 0, 0, $F, 8	
000263A4 1000 0010 08               		dc.b $10, 0, 0, $10, 8	
000263A9 0804 0011 F0               		dc.b 8, 4, 0, $11, $F0	
000263AE 02                         SME_wvX4F_114A:	dc.b 2	
000263AF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
000263B4 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
000263B9 02                         SME_wvX4F_1155:	dc.b 2	
000263BA F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
000263BF E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
000263C4 02                         SME_wvX4F_1160:	dc.b 2	
000263C5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
000263CA E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
000263CF 02                         SME_wvX4F_116B:	dc.b 2	
000263D0 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0	
000263D5 E80D 0010 F0               		dc.b $E8, $D, 0, $10, $F0	
000263DA 03                         SME_wvX4F_1176:	dc.b 3	
000263DB F802 0000 10               		dc.b $F8, 2, 0, 0, $10	
000263E0 F80F 0003 F0               		dc.b $F8, $F, 0, 3, $F0	
000263E5 F008 0013 00               		dc.b $F0, 8, 0, $13, 0	
000263EA 04                         SME_wvX4F_1186:	dc.b 4	
000263EB F00F 0000 F8               		dc.b $F0, $F, 0, 0, $F8	
000263F0 100C 0010 F0               		dc.b $10, $C, 0, $10, $F0	
000263F5 0001 0014 F0               		dc.b 0, 1, 0, $14, $F0	
000263FA F800 0016 F0               		dc.b $F8, 0, 0, $16, $F0	
000263FF 00                         SME_wvX4F_119B:	dc.b 0	
00026400 00                         SME_wvX4F_119C:	dc.b 0	
00026401 03                         SME_wvX4F_119D:	dc.b 3	
00026402 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026407 F803 000C 08               		dc.b $F8, 3, 0, $C, 8	
0002640C 0809 0010 F0               		dc.b 8, 9, 0, $10, $F0	
00026411 03                         SME_wvX4F_11AD:	dc.b 3	
00026412 F00E 0000 E8               		dc.b $F0, $E, 0, 0, $E8	
00026417 080D 000C F0               		dc.b 8, $D, 0, $C, $F0	
0002641C F801 0014 08               		dc.b $F8, 1, 0, $14, 8	
00026421 00                         SME_wvX4F_11BD:	dc.b 0	
00026422 00                         SME_wvX4F_11BE:	dc.b 0	
00026423 02                         SME_wvX4F_11BF:	dc.b 2	
00026424 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0	
00026429 F40F 0004 F0               		dc.b $F4, $F, 0, 4, $F0	
0002642E 01                         SME_wvX4F_11CA:	dc.b 1	
0002642F F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
00026434 02                         SME_wvX4F_11D0:	dc.b 2	
00026435 F40F 0000 F0               		dc.b $F4, $F, 0, 0, $F0	
0002643A E40D 0010 F0               		dc.b $E4, $D, 0, $10, $F0	
0002643F 02                         SME_wvX4F_11DB:	dc.b 2	
00026440 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026445 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
0002644A 02                         SME_wvX4F_11E6:	dc.b 2	
0002644B E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
00026450 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026455 02                         SME_wvX4F_11F1:	dc.b 2	
00026456 E40F 0000 F0               		dc.b $E4, $F, 0, 0, $F0	
0002645B 040D 0010 F0               		dc.b 4, $D, 0, $10, $F0	
00026460 05                         SME_wvX4F_11FC:	dc.b 5	
00026461 0209 0000 00               		dc.b 2, 9, 0, 0, 0	
00026466 E207 0006 F0               		dc.b $E2, 7, 0, 6, $F0	
0002646B EA06 000E 00               		dc.b $EA, 6, 0, $E, 0	
00026470 E200 0014 00               		dc.b $E2, 0, 0, $14, 0	
00026475 0200 0015 F8               		dc.b 2, 0, 0, $15, $F8	
0002647A 05                         SME_wvX4F_1216:	dc.b 5	
0002647B E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
00026480 020C 000C F0               		dc.b 2, $C, 0, $C, $F0	
00026485 0201 0010 10               		dc.b 2, 1, 0, $10, $10	
0002648A 0A04 0012 00               		dc.b $A, 4, 0, $12, 0	
0002648F EA02 0014 08               		dc.b $EA, 2, 0, $14, 8	
00026494 02                         SME_wvX4F_1230:	dc.b 2	
00026495 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
0002649A 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
0002649F 02                         SME_wvX4F_123B:	dc.b 2	
000264A0 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264A5 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264AA 02                         SME_wvX4F_1246:	dc.b 2	
000264AB E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264B0 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264B5 02                         SME_wvX4F_1251:	dc.b 2	
000264B6 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264BB 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264C0 02                         SME_wvX4F_125C:	dc.b 2	
000264C1 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264C6 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264CB 02                         SME_wvX4F_1267:	dc.b 2	
000264CC E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264D1 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264D6 02                         SME_wvX4F_1272:	dc.b 2	
000264D7 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264DC 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264E1 02                         SME_wvX4F_127D:	dc.b 2	
000264E2 E20B 0000 F0               		dc.b $E2, $B, 0, 0, $F0	
000264E7 0209 000C F0               		dc.b 2, 9, 0, $C, $F0	
000264EC 02                         SME_wvX4F_1288:	dc.b 2	
000264ED E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
000264F2 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
000264F7 02                         SME_wvX4F_1293:	dc.b 2	
000264F8 E20F 0000 F0               		dc.b $E2, $F, 0, 0, $F0	
000264FD 020D 0010 F0               		dc.b 2, $D, 0, $10, $F0	
00026502                            		even
00026502                            		even
00026502                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00026502                            ; --------------------------------------------------------------------------------
00026502                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00026502                            
00026502                            SME_I2OLA:	
00026502 0000 0000                  		dc.w SME_I2OLA_1EE-SME_I2OLA, SME_I2OLA_1EF-SME_I2OLA	
00026506 0000 0000                  		dc.w SME_I2OLA_1F8-SME_I2OLA, SME_I2OLA_20B-SME_I2OLA	
0002650A 0000 0000                  		dc.w SME_I2OLA_220-SME_I2OLA, SME_I2OLA_229-SME_I2OLA	
0002650E 0000 0000                  		dc.w SME_I2OLA_230-SME_I2OLA, SME_I2OLA_237-SME_I2OLA	
00026512 0000 0000                  		dc.w SME_I2OLA_240-SME_I2OLA, SME_I2OLA_245-SME_I2OLA	
00026516 0000 0000                  		dc.w SME_I2OLA_24C-SME_I2OLA, SME_I2OLA_253-SME_I2OLA	
0002651A 0000 0000                  		dc.w SME_I2OLA_25A-SME_I2OLA, SME_I2OLA_263-SME_I2OLA	
0002651E 0000 0000                  		dc.w SME_I2OLA_26A-SME_I2OLA, SME_I2OLA_279-SME_I2OLA	
00026522 0000 0000                  		dc.w SME_I2OLA_284-SME_I2OLA, SME_I2OLA_28B-SME_I2OLA	
00026526 0000 0000                  		dc.w SME_I2OLA_292-SME_I2OLA, SME_I2OLA_29B-SME_I2OLA	
0002652A 0000 0000                  		dc.w SME_I2OLA_2A0-SME_I2OLA, SME_I2OLA_2A7-SME_I2OLA	
0002652E 0000 0000                  		dc.w SME_I2OLA_2B2-SME_I2OLA, SME_I2OLA_2BD-SME_I2OLA	
00026532 0000 0000                  		dc.w SME_I2OLA_2CA-SME_I2OLA, SME_I2OLA_2D3-SME_I2OLA	
00026536 0000 0000                  		dc.w SME_I2OLA_2DA-SME_I2OLA, SME_I2OLA_2E5-SME_I2OLA	
0002653A 0000 0000                  		dc.w SME_I2OLA_2EE-SME_I2OLA, SME_I2OLA_2F5-SME_I2OLA	
0002653E 0000 0000                  		dc.w SME_I2OLA_300-SME_I2OLA, SME_I2OLA_309-SME_I2OLA	
00026542 0000 0000                  		dc.w SME_I2OLA_30E-SME_I2OLA, SME_I2OLA_313-SME_I2OLA	
00026546 0000 0000                  		dc.w SME_I2OLA_31E-SME_I2OLA, SME_I2OLA_327-SME_I2OLA	
0002654A 0000 0000                  		dc.w SME_I2OLA_32C-SME_I2OLA, SME_I2OLA_333-SME_I2OLA	
0002654E 0000 0000                  		dc.w SME_I2OLA_33A-SME_I2OLA, SME_I2OLA_347-SME_I2OLA	
00026552 0000 0000                  		dc.w SME_I2OLA_354-SME_I2OLA, SME_I2OLA_35D-SME_I2OLA	
00026556 0000 0000                  		dc.w SME_I2OLA_364-SME_I2OLA, SME_I2OLA_36F-SME_I2OLA	
0002655A 0000 0000                  		dc.w SME_I2OLA_378-SME_I2OLA, SME_I2OLA_37F-SME_I2OLA	
0002655E 0000 0000                  		dc.w SME_I2OLA_38A-SME_I2OLA, SME_I2OLA_38F-SME_I2OLA	
00026562 0000 0000                  		dc.w SME_I2OLA_394-SME_I2OLA, SME_I2OLA_399-SME_I2OLA	
00026566 0000 0000                  		dc.w SME_I2OLA_39E-SME_I2OLA, SME_I2OLA_3A3-SME_I2OLA	
0002656A 0000 0000                  		dc.w SME_I2OLA_3A8-SME_I2OLA, SME_I2OLA_3AD-SME_I2OLA	
0002656E 0000 0000                  		dc.w SME_I2OLA_3B2-SME_I2OLA, SME_I2OLA_3BB-SME_I2OLA	
00026572 0000 0000                  		dc.w SME_I2OLA_3C2-SME_I2OLA, SME_I2OLA_3C9-SME_I2OLA	
00026576 0000 0000                  		dc.w SME_I2OLA_3D0-SME_I2OLA, SME_I2OLA_3D9-SME_I2OLA	
0002657A 0000 0000                  		dc.w SME_I2OLA_3E0-SME_I2OLA, SME_I2OLA_3E7-SME_I2OLA	
0002657E 0000 0000                  		dc.w SME_I2OLA_3EE-SME_I2OLA, SME_I2OLA_3F3-SME_I2OLA	
00026582 0000 0000                  		dc.w SME_I2OLA_3F8-SME_I2OLA, SME_I2OLA_3FD-SME_I2OLA	
00026586 0000 0000                  		dc.w SME_I2OLA_402-SME_I2OLA, SME_I2OLA_407-SME_I2OLA	
0002658A 0000 0000                  		dc.w SME_I2OLA_40C-SME_I2OLA, SME_I2OLA_411-SME_I2OLA	
0002658E 0000 0000                  		dc.w SME_I2OLA_416-SME_I2OLA, SME_I2OLA_41F-SME_I2OLA	
00026592 0000 0000                  		dc.w SME_I2OLA_426-SME_I2OLA, SME_I2OLA_42B-SME_I2OLA	
00026596 0000 0000                  		dc.w SME_I2OLA_432-SME_I2OLA, SME_I2OLA_43B-SME_I2OLA	
0002659A 0000 0000                  		dc.w SME_I2OLA_442-SME_I2OLA, SME_I2OLA_447-SME_I2OLA	
0002659E 0000 0000                  		dc.w SME_I2OLA_44E-SME_I2OLA, SME_I2OLA_455-SME_I2OLA	
000265A2 0000 0000                  		dc.w SME_I2OLA_45C-SME_I2OLA, SME_I2OLA_46F-SME_I2OLA	
000265A6 0000 0000                  		dc.w SME_I2OLA_482-SME_I2OLA, SME_I2OLA_489-SME_I2OLA	
000265AA 0000 0000                  		dc.w SME_I2OLA_490-SME_I2OLA, SME_I2OLA_497-SME_I2OLA	
000265AE 0000 0000                  		dc.w SME_I2OLA_4A2-SME_I2OLA, SME_I2OLA_4A9-SME_I2OLA	
000265B2 0000 0000                  		dc.w SME_I2OLA_4B0-SME_I2OLA, SME_I2OLA_4BB-SME_I2OLA	
000265B6 0000 0000                  		dc.w SME_I2OLA_4C6-SME_I2OLA, SME_I2OLA_4CF-SME_I2OLA	
000265BA 0000 0000                  		dc.w SME_I2OLA_4D8-SME_I2OLA, SME_I2OLA_4E1-SME_I2OLA	
000265BE 0000 0000                  		dc.w SME_I2OLA_4EA-SME_I2OLA, SME_I2OLA_4ED-SME_I2OLA	
000265C2 0000 0000                  		dc.w SME_I2OLA_4F0-SME_I2OLA, SME_I2OLA_4F3-SME_I2OLA	
000265C6 0000 0000                  		dc.w SME_I2OLA_4F6-SME_I2OLA, SME_I2OLA_4F9-SME_I2OLA	
000265CA 0000 0000                  		dc.w SME_I2OLA_4FC-SME_I2OLA, SME_I2OLA_4FF-SME_I2OLA	
000265CE 0000 0000                  		dc.w SME_I2OLA_506-SME_I2OLA, SME_I2OLA_509-SME_I2OLA	
000265D2 0000 0000                  		dc.w SME_I2OLA_50E-SME_I2OLA, SME_I2OLA_511-SME_I2OLA	
000265D6 0000 0000                  		dc.w SME_I2OLA_516-SME_I2OLA, SME_I2OLA_519-SME_I2OLA	
000265DA 0000 0000                  		dc.w SME_I2OLA_522-SME_I2OLA, SME_I2OLA_531-SME_I2OLA	
000265DE 0000 0000                  		dc.w SME_I2OLA_53C-SME_I2OLA, SME_I2OLA_543-SME_I2OLA	
000265E2 0000 0000                  		dc.w SME_I2OLA_54E-SME_I2OLA, SME_I2OLA_557-SME_I2OLA	
000265E6 0000 0000                  		dc.w SME_I2OLA_560-SME_I2OLA, SME_I2OLA_569-SME_I2OLA	
000265EA 0000 0000                  		dc.w SME_I2OLA_57C-SME_I2OLA, SME_I2OLA_583-SME_I2OLA	
000265EE 0000 0000                  		dc.w SME_I2OLA_58A-SME_I2OLA, SME_I2OLA_591-SME_I2OLA	
000265F2 0000 0000                  		dc.w SME_I2OLA_592-SME_I2OLA, SME_I2OLA_5A3-SME_I2OLA	
000265F6 0000 0000                  		dc.w SME_I2OLA_5B2-SME_I2OLA, SME_I2OLA_5BB-SME_I2OLA	
000265FA 0000 0000                  		dc.w SME_I2OLA_5C2-SME_I2OLA, SME_I2OLA_5C9-SME_I2OLA	
000265FE 0000 0000                  		dc.w SME_I2OLA_5D0-SME_I2OLA, SME_I2OLA_5D3-SME_I2OLA	
00026602 0000 0000                  		dc.w SME_I2OLA_5DA-SME_I2OLA, SME_I2OLA_5E1-SME_I2OLA	
00026606 0000 0000                  		dc.w SME_I2OLA_5E8-SME_I2OLA, SME_I2OLA_5EF-SME_I2OLA	
0002660A 0000 0000                  		dc.w SME_I2OLA_5F8-SME_I2OLA, SME_I2OLA_609-SME_I2OLA	
0002660E 0000 0000                  		dc.w SME_I2OLA_612-SME_I2OLA, SME_I2OLA_61B-SME_I2OLA	
00026612 0000 0000                  		dc.w SME_I2OLA_626-SME_I2OLA, SME_I2OLA_631-SME_I2OLA	
00026616 0000 0000                  		dc.w SME_I2OLA_636-SME_I2OLA, SME_I2OLA_641-SME_I2OLA	
0002661A 0000 0000                  		dc.w SME_I2OLA_648-SME_I2OLA, SME_I2OLA_653-SME_I2OLA	
0002661E 0000 0000                  		dc.w SME_I2OLA_658-SME_I2OLA, SME_I2OLA_65F-SME_I2OLA	
00026622 0000 0000                  		dc.w SME_I2OLA_666-SME_I2OLA, SME_I2OLA_66D-SME_I2OLA	
00026626 0000 0000                  		dc.w SME_I2OLA_672-SME_I2OLA, SME_I2OLA_679-SME_I2OLA	
0002662A 0000 0000                  		dc.w SME_I2OLA_690-SME_I2OLA, SME_I2OLA_69D-SME_I2OLA	
0002662E 0000 0000                  		dc.w SME_I2OLA_6A4-SME_I2OLA, SME_I2OLA_6B3-SME_I2OLA	
00026632 0000 0000                  		dc.w SME_I2OLA_6B8-SME_I2OLA, SME_I2OLA_6C1-SME_I2OLA	
00026636 0000 0000                  		dc.w SME_I2OLA_6C8-SME_I2OLA, SME_I2OLA_6CF-SME_I2OLA	
0002663A 0000 0000                  		dc.w SME_I2OLA_6D8-SME_I2OLA, SME_I2OLA_6DB-SME_I2OLA	
0002663E 0000 0000                  		dc.w SME_I2OLA_6DE-SME_I2OLA, SME_I2OLA_6E1-SME_I2OLA	
00026642 0000 0000                  		dc.w SME_I2OLA_6E4-SME_I2OLA, SME_I2OLA_6E7-SME_I2OLA	
00026646 0000 0000                  		dc.w SME_I2OLA_6EA-SME_I2OLA, SME_I2OLA_6ED-SME_I2OLA	
0002664A 0000 0000                  		dc.w SME_I2OLA_6F0-SME_I2OLA, SME_I2OLA_6F7-SME_I2OLA	
0002664E 0000 0000                  		dc.w SME_I2OLA_6FE-SME_I2OLA, SME_I2OLA_705-SME_I2OLA	
00026652 0000 0000                  		dc.w SME_I2OLA_70C-SME_I2OLA, SME_I2OLA_713-SME_I2OLA	
00026656 0000 0000                  		dc.w SME_I2OLA_724-SME_I2OLA, SME_I2OLA_72B-SME_I2OLA	
0002665A 0000 0000                  		dc.w SME_I2OLA_732-SME_I2OLA, SME_I2OLA_741-SME_I2OLA	
0002665E 0000 0000                  		dc.w SME_I2OLA_748-SME_I2OLA, SME_I2OLA_74B-SME_I2OLA	
00026662 0000 0000                  		dc.w SME_I2OLA_750-SME_I2OLA, SME_I2OLA_75F-SME_I2OLA	
00026666 0000 0000                  		dc.w SME_I2OLA_766-SME_I2OLA, SME_I2OLA_769-SME_I2OLA	
0002666A 0000 0000                  		dc.w SME_I2OLA_76E-SME_I2OLA, SME_I2OLA_773-SME_I2OLA	
0002666E 0000 0000                  		dc.w SME_I2OLA_77E-SME_I2OLA, SME_I2OLA_78B-SME_I2OLA	
00026672 0000 0000                  		dc.w SME_I2OLA_794-SME_I2OLA, SME_I2OLA_79B-SME_I2OLA	
00026676 0000 0000                  		dc.w SME_I2OLA_7A6-SME_I2OLA, SME_I2OLA_7AF-SME_I2OLA	
0002667A 0000 0000                  		dc.w SME_I2OLA_7B6-SME_I2OLA, SME_I2OLA_7C1-SME_I2OLA	
0002667E 0000 0000                  		dc.w SME_I2OLA_7C8-SME_I2OLA, SME_I2OLA_7CB-SME_I2OLA	
00026682 0000 0000                  		dc.w SME_I2OLA_7CE-SME_I2OLA, SME_I2OLA_7D5-SME_I2OLA	
00026686 0000 0000                  		dc.w SME_I2OLA_7DC-SME_I2OLA, SME_I2OLA_7DF-SME_I2OLA	
0002668A 0000 0000                  		dc.w SME_I2OLA_7E6-SME_I2OLA, SME_I2OLA_7EB-SME_I2OLA	
0002668E 0000 0000                  		dc.w SME_I2OLA_7F8-SME_I2OLA, SME_I2OLA_805-SME_I2OLA	
00026692 0000 0000                  		dc.w SME_I2OLA_80E-SME_I2OLA, SME_I2OLA_815-SME_I2OLA	
00026696 0000 0000                  		dc.w SME_I2OLA_820-SME_I2OLA, SME_I2OLA_829-SME_I2OLA	
0002669A 0000 0000                  		dc.w SME_I2OLA_830-SME_I2OLA, SME_I2OLA_83B-SME_I2OLA	
0002669E 0000 0000                  		dc.w SME_I2OLA_842-SME_I2OLA, SME_I2OLA_84D-SME_I2OLA	
000266A2 0000 0000                  		dc.w SME_I2OLA_856-SME_I2OLA, SME_I2OLA_85F-SME_I2OLA	
000266A6 0000 0000                  		dc.w SME_I2OLA_864-SME_I2OLA, SME_I2OLA_869-SME_I2OLA	
000266AA 0000 0000                  		dc.w SME_I2OLA_86E-SME_I2OLA, SME_I2OLA_873-SME_I2OLA	
000266AE 0000 0000                  		dc.w SME_I2OLA_878-SME_I2OLA, SME_I2OLA_87F-SME_I2OLA	
000266B2 0000 0000                  		dc.w SME_I2OLA_886-SME_I2OLA, SME_I2OLA_895-SME_I2OLA	
000266B6 0000 0000                  		dc.w SME_I2OLA_89A-SME_I2OLA, SME_I2OLA_89F-SME_I2OLA	
000266BA 0000 0000                  		dc.w SME_I2OLA_8A4-SME_I2OLA, SME_I2OLA_8A9-SME_I2OLA	
000266BE 0000 0000                  		dc.w SME_I2OLA_8B0-SME_I2OLA, SME_I2OLA_8B9-SME_I2OLA	
000266C2 0000 0000                  		dc.w SME_I2OLA_8BA-SME_I2OLA, SME_I2OLA_8BB-SME_I2OLA	
000266C6 0000 0000                  		dc.w SME_I2OLA_8C2-SME_I2OLA, SME_I2OLA_8C9-SME_I2OLA	
000266CA 0000 0000                  		dc.w SME_I2OLA_8CA-SME_I2OLA, SME_I2OLA_8CB-SME_I2OLA	
000266CE 0000 0000                  		dc.w SME_I2OLA_8D0-SME_I2OLA, SME_I2OLA_8D3-SME_I2OLA	
000266D2 0000 0000                  		dc.w SME_I2OLA_8D8-SME_I2OLA, SME_I2OLA_8DD-SME_I2OLA	
000266D6 0000 0000                  		dc.w SME_I2OLA_8E2-SME_I2OLA, SME_I2OLA_8E7-SME_I2OLA	
000266DA 0000 0000                  		dc.w SME_I2OLA_8F2-SME_I2OLA, SME_I2OLA_8FD-SME_I2OLA	
000266DE 0000 0000                  		dc.w SME_I2OLA_902-SME_I2OLA, SME_I2OLA_907-SME_I2OLA	
000266E2 0000 0000                  		dc.w SME_I2OLA_90C-SME_I2OLA, SME_I2OLA_911-SME_I2OLA	
000266E6 0000 0000                  		dc.w SME_I2OLA_916-SME_I2OLA, SME_I2OLA_91B-SME_I2OLA	
000266EA 0000 0000                  		dc.w SME_I2OLA_920-SME_I2OLA, SME_I2OLA_925-SME_I2OLA	
000266EE 0000                       		dc.w SME_I2OLA_92A-SME_I2OLA	
000266F0 00                         SME_I2OLA_1EE:	dc.b 0	
000266F1 0420 0070 0320 0B20 0E     SME_I2OLA_1EF:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
000266FA 0920 0020 0B20 0E10 0300+  SME_I2OLA_1F8:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
0002670D 0A20 0020 0B20 0E10 0300+  SME_I2OLA_20B:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00026722 04B6 C606 D200 0920 0E     SME_I2OLA_220:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
0002672B 0350 1150 1720 0E          SME_I2OLA_229:	dc.b 3, $50, $11, $50, $17, $20, $E	
00026732 0350 2050 1720 0E          SME_I2OLA_230:	dc.b 3, $50, $20, $50, $17, $20, $E	
00026739 0450 2050 1710 2700 0E     SME_I2OLA_237:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00026742 02B6 D316 DF               SME_I2OLA_240:	dc.b 2, $B6, $D3, $16, $DF	
00026747 0356 E126 E736 EA          SME_I2OLA_245:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002674E 0356 E126 E736 EE          SME_I2OLA_24C:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00026755 03B6 F226 FE27 01          SME_I2OLA_253:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
0002675C 0420 0B20 0E87 0A07 13     SME_I2OLA_25A:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00026765 0380 2920 0B20 0E          SME_I2OLA_263:	dc.b 3, $80, $29, $20, $B, $20, $E	
0002676C 0750 3A50 4010 4600 3530+  SME_I2OLA_26A:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
0002677B 05B0 4800 3530 3600 3400+  SME_I2OLA_279:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00026786 0380 5A57 0400 09          SME_I2OLA_284:	dc.b 3, $80, $5A, $57, 4, 0, 9	
0002678D 03F7 1437 2407 28          SME_I2OLA_28B:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00026794 0450 5450 6350 6910 6F     SME_I2OLA_292:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
0002679D 0250 54B0 71               SME_I2OLA_29B:	dc.b 2, $50, $54, $B0, $71	
000267A2 0357 0457 2907 2F          SME_I2OLA_2A0:	dc.b 3, $57, 4, $57, $29, 7, $2F	
000267A9 0530 7D50 8100 3310 3430+  SME_I2OLA_2A7:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
000267B4 0550 8750 8D20 9350 9600+  SME_I2OLA_2B2:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
000267BF 0650 8710 9D30 9F50 A330+  SME_I2OLA_2BD:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000267CC 0450 AE10 B470 B620 BE     SME_I2OLA_2CA:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000267D5 03F9 7539 8539 89          SME_I2OLA_2D3:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000267DC 0550 C130 C770 CB20 D310+  SME_I2OLA_2DA:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
000267E7 0450 C110 D870 DA20 E2     SME_I2OLA_2E5:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
000267F0 03F9 8D39 9D39 A1          SME_I2OLA_2EE:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
000267F7 0550 8710 9D00 9370 E520+  SME_I2OLA_2F5:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00026802 0470 F050 F810 FE51 00     SME_I2OLA_300:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
0002680B 0270 F0B1 06               SME_I2OLA_309:	dc.b 2, $70, $F0, $B1, 6	
00026810 0281 1858 F9               SME_I2OLA_30E:	dc.b 2, $81, $18, $58, $F9	
00026815 0508 FF39 0009 04B9 0529+  SME_I2OLA_313:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00026820 0451 1251 2111 2751 29     SME_I2OLA_31E:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00026829 0251 12B1 2F               SME_I2OLA_327:	dc.b 2, $51, $12, $B1, $2F	
0002682E 0329 1479 1719 1F          SME_I2OLA_32C:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00026835 0370 F001 0681 3B          SME_I2OLA_333:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002683C 0651 4411 4A11 4C81 4E01+  SME_I2OLA_33A:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00026849 0651 4421 5911 5C11 5E81+  SME_I2OLA_347:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00026856 0451 6911 6F81 7111 7A     SME_I2OLA_354:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002685F 03F9 A529 B529 B8          SME_I2OLA_35D:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00026866 0551 7C21 8211 8571 8721+  SME_I2OLA_364:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00026871 0451 7C11 9281 9411 9D     SME_I2OLA_36F:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
0002687A 03F9 BB29 CB19 CE          SME_I2OLA_378:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00026881 0551 4481 9F11 5E11 A801+  SME_I2OLA_37F:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
0002688C 0251 AAB1 B0               SME_I2OLA_38A:	dc.b 2, $51, $AA, $B1, $B0	
00026891 02B7 3057 3C               SME_I2OLA_38F:	dc.b 2, $B7, $30, $57, $3C	
00026896 0250 54B1 BC               SME_I2OLA_394:	dc.b 2, $50, $54, $B1, $BC	
0002689B 0257 3CB7 42               SME_I2OLA_399:	dc.b 2, $57, $3C, $B7, $42	
000268A0 0251 AAB1 C8               SME_I2OLA_39E:	dc.b 2, $51, $AA, $B1, $C8	
000268A5 0257 3CB7 4E               SME_I2OLA_3A3:	dc.b 2, $57, $3C, $B7, $4E	
000268AA 0250 54B1 D4               SME_I2OLA_3A8:	dc.b 2, $50, $54, $B1, $D4	
000268AF 0257 3CB7 5A               SME_I2OLA_3AD:	dc.b 2, $57, $3C, $B7, $5A	
000268B4 0451 E011 E6B1 E801 F4     SME_I2OLA_3B2:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
000268BD 03F8 7128 8128 84          SME_I2OLA_3BB:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000268C4 0351 F511 FBB1 FD          SME_I2OLA_3C2:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000268CB 03B8 BD78 C901 F4          SME_I2OLA_3C9:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000268D2 0451 E012 09B2 0B01 F4     SME_I2OLA_3D0:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000268DB 03B8 D178 DD01 F4          SME_I2OLA_3D9:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
000268E2 0351 F511 FBB2 17          SME_I2OLA_3E0:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
000268E9 0378 E5B8 ED01 F4          SME_I2OLA_3E7:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
000268F0 0252 23B2 29               SME_I2OLA_3EE:	dc.b 2, $52, $23, $B2, $29	
000268F5 0258 87B8 8D               SME_I2OLA_3F3:	dc.b 2, $58, $87, $B8, $8D	
000268FA 0251 12B2 35               SME_I2OLA_3F8:	dc.b 2, $51, $12, $B2, $35	
000268FF 0258 87B8 99               SME_I2OLA_3FD:	dc.b 2, $58, $87, $B8, $99	
00026904 0252 23B2 41               SME_I2OLA_402:	dc.b 2, $52, $23, $B2, $41	
00026909 0258 87B8 A5               SME_I2OLA_407:	dc.b 2, $58, $87, $B8, $A5	
0002690E 0251 12B2 4D               SME_I2OLA_40C:	dc.b 2, $51, $12, $B2, $4D	
00026913 0258 87B8 B1               SME_I2OLA_411:	dc.b 2, $58, $87, $B8, $B1	
00026918 0452 5912 5FB2 6102 6D     SME_I2OLA_416:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
00026921 03B9 2129 2D59 30          SME_I2OLA_41F:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026928 0272 6EB2 76               SME_I2OLA_426:	dc.b 2, $72, $6E, $B2, $76	
0002692D 03B9 3629 4259 45          SME_I2OLA_42B:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026934 0452 5912 82B2 8402 6D     SME_I2OLA_432:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002693D 03B9 4B29 5759 5A          SME_I2OLA_43B:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026944 0272 6EB2 90               SME_I2OLA_442:	dc.b 2, $72, $6E, $B2, $90	
00026949 03B9 6029 6C59 6F          SME_I2OLA_447:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
00026950 03B4 EE24 FA54 FD          SME_I2OLA_44E:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026957 03B5 0325 0F55 12          SME_I2OLA_455:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002695E 0925 1E55 2105 3715 1815+  SME_I2OLA_45C:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
00026971 0925 2D55 3005 3615 2715+  SME_I2OLA_46F:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
00026984 03F6 6416 7436 76          SME_I2OLA_482:	dc.b 3, $F6, $64, $16, $74, $36, $76	
0002698B 03B6 8176 8D16 95          SME_I2OLA_489:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
00026992 03F5 3835 4805 4C          SME_I2OLA_490:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
00026999 05B5 4D35 5915 5D15 5F25+  SME_I2OLA_497:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000269A4 03B5 6425 7055 73          SME_I2OLA_4A2:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000269AB 03B5 7925 8555 88          SME_I2OLA_4A9:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000269B2 0555 9425 9A05 AD55 8E55+  SME_I2OLA_4B0:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000269BD 0525 A355 A605 AC55 9D55+  SME_I2OLA_4BB:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000269C8 04B5 BA25 C625 C925 CC     SME_I2OLA_4C6:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000269D1 04B5 AE25 CF25 D225 D5     SME_I2OLA_4CF:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000269DA 04F5 D825 E805 EB05 EC     SME_I2OLA_4D8:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
000269E3 04F5 ED25 FD16 0016 02     SME_I2OLA_4E1:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
000269EC 01F2 9C                    SME_I2OLA_4EA:	dc.b 1, $F2, $9C	
000269EF 01F6 2B                    SME_I2OLA_4ED:	dc.b 1, $F6, $2B	
000269F2 01F2 AC                    SME_I2OLA_4F0:	dc.b 1, $F2, $AC	
000269F5 01F6 3B                    SME_I2OLA_4F3:	dc.b 1, $F6, $3B	
000269F8 01F2 BC                    SME_I2OLA_4F6:	dc.b 1, $F2, $BC	
000269FB 01F6 4B                    SME_I2OLA_4F9:	dc.b 1, $F6, $4B	
000269FE 01F2 CC                    SME_I2OLA_4FC:	dc.b 1, $F2, $CC	
00026A01 0386 5B36 7A26 7E          SME_I2OLA_4FF:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026A08 01F2 DC                    SME_I2OLA_506:	dc.b 1, $F2, $DC	
00026A0B 02B2 EC22 F8               SME_I2OLA_509:	dc.b 2, $B2, $EC, $22, $F8	
00026A10 01F2 FB                    SME_I2OLA_50E:	dc.b 1, $F2, $FB	
00026A13 02B3 0B23 17               SME_I2OLA_511:	dc.b 2, $B3, $B, $23, $17	
00026A18 01F3 1A                    SME_I2OLA_516:	dc.b 1, $F3, $1A	
00026A1B 0453 2AB3 3018 1508 17     SME_I2OLA_519:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026A24 0753 3C73 4213 4A03 4C08+  SME_I2OLA_522:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026A33 0528 1BB8 1E28 2A18 2D08+  SME_I2OLA_531:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
00026A3E 03B8 3038 3C18 40          SME_I2OLA_53C:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026A45 05B4 8834 9413 FD03 FF0A+  SME_I2OLA_543:	dc.b 5, $B4, $88, $34, $94, $13, $FD, 3, $FF, $A, $CD	
00026A50 0427 6627 6927 6C20 0E     SME_I2OLA_54E:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026A59 0413 4D73 4F23 5703 5A     SME_I2OLA_557:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
00026A62 0423 5B23 5EF3 6108 42     SME_I2OLA_560:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026A6B 0928 5338 5678 4303 6408+  SME_I2OLA_569:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026A7E 03B3 7173 7D00 71          SME_I2OLA_57C:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
00026A85 03F8 5B18 6B38 6D          SME_I2OLA_583:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
00026A8C 03F8 0138 113A CE          SME_I2OLA_58A:	dc.b 3, $F8, 1, $38, $11, $3A, $CE	
00026A93 00                         SME_I2OLA_591:	dc.b 0	
00026A94 0839 E219 EF29 E619 E919+  SME_I2OLA_592:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
00026AA5 0739 E219 EF29 E619 E919+  SME_I2OLA_5A3:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
00026AB4 0439 E289 E619 EF59 F1     SME_I2OLA_5B2:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
00026ABD 0373 9D03 A533 A6          SME_I2OLA_5BB:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026AC4 0373 8533 8D23 91          SME_I2OLA_5C2:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00026ACB 0376 9736 9F06 A3          SME_I2OLA_5C9:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00026AD2 0183 94                    SME_I2OLA_5D0:	dc.b 1, $83, $94	
00026AD5 0376 9736 9F06 A3          SME_I2OLA_5D3:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
00026ADC 0373 8533 8D23 91          SME_I2OLA_5DA:	dc.b 3, $73, $85, $33, $8D, $23, $91	
00026AE3 0373 9D03 A533 A6          SME_I2OLA_5E1:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026AEA 0373 AA33 B223 B6          SME_I2OLA_5E8:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026AF1 04B3 B903 C603 C503 C7     SME_I2OLA_5EF:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026AFA 0856 1113 C303 C503 C613+  SME_I2OLA_5F8:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026B0B 04B3 DA33 E603 EA03 EB     SME_I2OLA_609:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
00026B14 04B3 C833 D403 D803 D9     SME_I2OLA_612:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026B1D 0583 EC13 F553 F713 FD03+  SME_I2OLA_61B:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
00026B28 0584 0014 0953 F713 FD03+  SME_I2OLA_626:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026B33 0284 0B74 14               SME_I2OLA_631:	dc.b 2, $84, $B, $74, $14	
00026B38 0534 9824 9C34 9F34 A304+  SME_I2OLA_636:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026B43 0384 1C24 2514 28          SME_I2OLA_641:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026B4A 0504 A834 A934 AD34 B124+  SME_I2OLA_648:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
00026B55 0284 2A74 33               SME_I2OLA_653:	dc.b 2, $84, $2A, $74, $33	
00026B5A 03B7 DF17 EB27 ED          SME_I2OLA_658:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026B61 0384 1C24 3B14 3E          SME_I2OLA_65F:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
00026B68 03B7 F017 FC27 FE          SME_I2OLA_666:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026B6F 0254 40B4 46               SME_I2OLA_66D:	dc.b 2, $54, $40, $B4, $46	
00026B74 0374 5214 5AB4 5C          SME_I2OLA_672:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026B7B 0B74 6814 7004 7924 7504+  SME_I2OLA_679:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
00026B92 0674 7A14 7054 8204 7924+  SME_I2OLA_690:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
00026B9F 0354 C9B4 CF10 6D          SME_I2OLA_69D:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
00026BA6 0714 C334 C514 BE04 BD14+  SME_I2OLA_6A4:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
00026BB5 02F4 DB24 EB               SME_I2OLA_6B3:	dc.b 2, $F4, $DB, $24, $EB	
00026BBA 04B6 A416 B026 B206 B1     SME_I2OLA_6B8:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
00026BC3 03B6 B516 C126 C3          SME_I2OLA_6C1:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
00026BCA 03B9 D129 DD19 E0          SME_I2OLA_6C8:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
00026BD1 0427 6F37 7237 7627 7A     SME_I2OLA_6CF:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
00026BDA 01F7 7E                    SME_I2OLA_6D8:	dc.b 1, $F7, $7E	
00026BDD 01F7 8E                    SME_I2OLA_6DB:	dc.b 1, $F7, $8E	
00026BE0 01F7 9E                    SME_I2OLA_6DE:	dc.b 1, $F7, $9E	
00026BE3 01F7 AE                    SME_I2OLA_6E1:	dc.b 1, $F7, $AE	
00026BE6 01F7 BE                    SME_I2OLA_6E4:	dc.b 1, $F7, $BE	
00026BE9 01FA 08                    SME_I2OLA_6E7:	dc.b 1, $FA, 8	
00026BEC 01FA BD                    SME_I2OLA_6EA:	dc.b 1, $FA, $BD	
00026BEF 01BA 18                    SME_I2OLA_6ED:	dc.b 1, $BA, $18	
00026BF2 03FA 243A 341A 38          SME_I2OLA_6F0:	dc.b 3, $FA, $24, $3A, $34, $1A, $38	
00026BF9 035A 46BA 3A0A 4C          SME_I2OLA_6F7:	dc.b 3, $5A, $46, $BA, $3A, $A, $4C	
00026C00 03BA 4D5A 590A 5F          SME_I2OLA_6FE:	dc.b 3, $BA, $4D, $5A, $59, $A, $5F	
00026C07 03BA 605A 6C0A 72          SME_I2OLA_705:	dc.b 3, $BA, $60, $5A, $6C, $A, $72	
00026C0E 03BA 735A 7F0A 85          SME_I2OLA_70C:	dc.b 3, $BA, $73, $5A, $7F, $A, $85	
00026C15 085A 7F0A 852A 781A 7C0A+  SME_I2OLA_713:	dc.b 8, $5A, $7F, $A, $85, $2A, $78, $1A, $7C, $A, $76, $A, $86, $2A, $87, $1A, $8A	
00026C26 0320 0EFA 8C3A 9C          SME_I2OLA_724:	dc.b 3, $20, $E, $FA, $8C, $3A, $9C	
00026C2D 0320 0EFA A02A B0          SME_I2OLA_72B:	dc.b 3, $20, $E, $FA, $A0, $2A, $B0	
00026C34 0720 0E2A 912A 952A 980A+  SME_I2OLA_732:	dc.b 7, $20, $E, $2A, $91, $2A, $95, $2A, $98, $A, $8F, $3A, $B5, $3A, $B9	
00026C43 0350 3A50 4010 46          SME_I2OLA_741:	dc.b 3, $50, $3A, $50, $40, $10, $46	
00026C4A 01B0 48                    SME_I2OLA_748:	dc.b 1, $B0, $48	
00026C4D 0280 5A00 09               SME_I2OLA_74B:	dc.b 2, $80, $5A, 0, 9	
00026C52 0707 2817 1617 1A27 1D07+  SME_I2OLA_750:	dc.b 7, 7, $28, $17, $16, $17, $1A, $27, $1D, 7, $19, 7, $15, $27, $21	
00026C61 0350 6350 6910 6F          SME_I2OLA_75F:	dc.b 3, $50, $63, $50, $69, $10, $6F	
00026C68 01B0 71                    SME_I2OLA_766:	dc.b 1, $B0, $71	
00026C6B 0257 2907 2F               SME_I2OLA_769:	dc.b 2, $57, $29, 7, $2F	
00026C70 0230 7D50 81               SME_I2OLA_76E:	dc.b 2, $30, $7D, $50, $81	
00026C75 0550 8750 8D20 9350 9600+  SME_I2OLA_773:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00026C80 0650 8710 9D30 9F50 A330+  SME_I2OLA_77E:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00026C8D 0450 AE10 B470 B620 BE     SME_I2OLA_78B:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00026C96 03F9 7539 8539 89          SME_I2OLA_794:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00026C9D 0550 C130 C770 CB20 D310+  SME_I2OLA_79B:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00026CA8 0450 C110 D870 DA20 E2     SME_I2OLA_7A6:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00026CB1 03F9 8D39 9D39 A1          SME_I2OLA_7AF:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00026CB8 0550 8710 9D00 9370 E520+  SME_I2OLA_7B6:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00026CC3 0350 F810 FE51 00          SME_I2OLA_7C1:	dc.b 3, $50, $F8, $10, $FE, $51, 0	
00026CCA 01B1 06                    SME_I2OLA_7C8:	dc.b 1, $B1, 6	
00026CCD 0181 18                    SME_I2OLA_7CB:	dc.b 1, $81, $18	
00026CD0 0308 FF89 0B29 01          SME_I2OLA_7CE:	dc.b 3, 8, $FF, $89, $B, $29, 1	
00026CD7 0351 2111 2751 29          SME_I2OLA_7D5:	dc.b 3, $51, $21, $11, $27, $51, $29	
00026CDE 01B1 2F                    SME_I2OLA_7DC:	dc.b 1, $B1, $2F	
00026CE1 0319 1F09 1639 1B          SME_I2OLA_7DF:	dc.b 3, $19, $1F, 9, $16, $39, $1B	
00026CE8 0201 0681 3B               SME_I2OLA_7E6:	dc.b 2, 1, 6, $81, $3B	
00026CED 0651 4411 4A11 4C81 4E01+  SME_I2OLA_7EB:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00026CFA 0651 4421 5911 5C11 5E81+  SME_I2OLA_7F8:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00026D07 0451 6911 6F81 7111 7A     SME_I2OLA_805:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00026D10 03F9 A529 B529 B8          SME_I2OLA_80E:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00026D17 0551 7C21 8211 8571 8721+  SME_I2OLA_815:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00026D22 0451 7C11 9281 9411 9D     SME_I2OLA_820:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00026D2B 03F9 BB29 CB19 CE          SME_I2OLA_829:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00026D32 0551 4481 9F11 5E11 A801+  SME_I2OLA_830:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00026D3D 03BA D32A DF0A E2          SME_I2OLA_83B:	dc.b 3, $BA, $D3, $2A, $DF, $A, $E2	
00026D44 05BA E31A EF1A F11A F30A+  SME_I2OLA_842:	dc.b 5, $BA, $E3, $1A, $EF, $1A, $F1, $1A, $F3, $A, $F5	
00026D4F 04BA F61B 022B 042B 07     SME_I2OLA_84D:	dc.b 4, $BA, $F6, $1B, 2, $2B, 4, $2B, 7	
00026D58 04BB 0A1B 162B 182B 1B     SME_I2OLA_856:	dc.b 4, $BB, $A, $1B, $16, $2B, $18, $2B, $1B	
00026D61 02FB 1E7B 2E               SME_I2OLA_85F:	dc.b 2, $FB, $1E, $7B, $2E	
00026D66 02FB 367B 46               SME_I2OLA_864:	dc.b 2, $FB, $36, $7B, $46	
00026D6B 02FB 1E7B 2E               SME_I2OLA_869:	dc.b 2, $FB, $1E, $7B, $2E	
00026D70 02FB 367B 46               SME_I2OLA_86E:	dc.b 2, $FB, $36, $7B, $46	
00026D75 023B 4EFB 52               SME_I2OLA_873:	dc.b 2, $3B, $4E, $FB, $52	
00026D7A 03FB 623B 722B 76          SME_I2OLA_878:	dc.b 3, $FB, $62, $3B, $72, $2B, $76	
00026D81 03FB 792B 892B 8C          SME_I2OLA_87F:	dc.b 3, $FB, $79, $2B, $89, $2B, $8C	
00026D88 078B 970B 8F3B 900B 960B+  SME_I2OLA_886:	dc.b 7, $8B, $97, $B, $8F, $3B, $90, $B, $96, $B, $95, $B, $94, $1B, $A0	
00026D97 02FB 1E7B 2E               SME_I2OLA_895:	dc.b 2, $FB, $1E, $7B, $2E	
00026D9C 02FB 367B 46               SME_I2OLA_89A:	dc.b 2, $FB, $36, $7B, $46	
00026DA1 02FB 1E7B 2E               SME_I2OLA_89F:	dc.b 2, $FB, $1E, $7B, $2E	
00026DA6 02FB 367B 46               SME_I2OLA_8A4:	dc.b 2, $FB, $36, $7B, $46	
00026DAB 032D 23FD 132D 26          SME_I2OLA_8A9:	dc.b 3, $2D, $23, $FD, $13, $2D, $26	
00026DB2 04FD 293D 391D 3D0D 3F     SME_I2OLA_8B0:	dc.b 4, $FD, $29, $3D, $39, $1D, $3D, $D, $3F	
00026DBB 00                         SME_I2OLA_8B9:	dc.b 0	
00026DBC 00                         SME_I2OLA_8BA:	dc.b 0	
00026DBD 03BD 403D 4C5D 50          SME_I2OLA_8BB:	dc.b 3, $BD, $40, $3D, $4C, $5D, $50	
00026DC4 03BD 567D 621D 6A          SME_I2OLA_8C2:	dc.b 3, $BD, $56, $7D, $62, $1D, $6A	
00026DCB 00                         SME_I2OLA_8C9:	dc.b 0	
00026DCC 00                         SME_I2OLA_8CA:	dc.b 0	
00026DCD 023B A2FB A6               SME_I2OLA_8CB:	dc.b 2, $3B, $A2, $FB, $A6	
00026DD2 01FB B6                    SME_I2OLA_8D0:	dc.b 1, $FB, $B6	
00026DD5 02FB C67B D6               SME_I2OLA_8D3:	dc.b 2, $FB, $C6, $7B, $D6	
00026DDA 02FB DE7B EE               SME_I2OLA_8D8:	dc.b 2, $FB, $DE, $7B, $EE	
00026DDF 02FB F67C 06               SME_I2OLA_8DD:	dc.b 2, $FB, $F6, $7C, 6	
00026DE4 02FC 0E7C 1E               SME_I2OLA_8E2:	dc.b 2, $FC, $E, $7C, $1E	
00026DE9 055C 267C 2C5C 340C 3A0C+  SME_I2OLA_8E7:	dc.b 5, $5C, $26, $7C, $2C, $5C, $34, $C, $3A, $C, $3B	
00026DF4 05BC 3C3C 481C 4C1C 4E2C+  SME_I2OLA_8F2:	dc.b 5, $BC, $3C, $3C, $48, $1C, $4C, $1C, $4E, $2C, $50	
00026DFF 02BC 535C 5F               SME_I2OLA_8FD:	dc.b 2, $BC, $53, $5C, $5F	
00026E04 02BC 655C 71               SME_I2OLA_902:	dc.b 2, $BC, $65, $5C, $71	
00026E09 02BC 775C 83               SME_I2OLA_907:	dc.b 2, $BC, $77, $5C, $83	
00026E0E 02BC 895C 95               SME_I2OLA_90C:	dc.b 2, $BC, $89, $5C, $95	
00026E13 02BC 9B5C A7               SME_I2OLA_911:	dc.b 2, $BC, $9B, $5C, $A7	
00026E18 02BC AD5C B9               SME_I2OLA_916:	dc.b 2, $BC, $AD, $5C, $B9	
00026E1D 02BC BF5C CB               SME_I2OLA_91B:	dc.b 2, $BC, $BF, $5C, $CB	
00026E22 02BC D15C DD               SME_I2OLA_920:	dc.b 2, $BC, $D1, $5C, $DD	
00026E27 02FC E37C F3               SME_I2OLA_925:	dc.b 2, $FC, $E3, $7C, $F3	
00026E2C 02FC FB7D 0B               SME_I2OLA_92A:	dc.b 2, $FC, $FB, $7D, $B	
00026E32 00                         		even
00026E32 00                         		even
00026E32                            
00026E32                            ; ---------------------------------------------------------------------------
00026E32                            ; Uncompressed graphics	- Sonic
00026E32                            ; ---------------------------------------------------------------------------
00026E32                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0004E5D2                            		even
0004E5D2                            ; ---------------------------------------------------------------------------
0004E5D2                            ; Compressed graphics - various
0004E5D2                            ; ---------------------------------------------------------------------------
0004E5D2                            Art_GShield:	incbin	"artunc\Gold Shield.bin"
0004F292                            		even
0004F292                            Art_RedShield:	incbin	"artunc\Red Shield.bin"
0004FF52                            		even
0004FF52                            Art_SpShield:	incbin	"artunc\Gray Shield.bin"
00050C12                            		even
00050C12                            Art_Shield:	incbin	"artunc\Shield.bin"
000518D2                            		even
000518D2                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
00051CD2                            		even
00051CD2                            
00051CD2                            Map_SSWalls:	include	"_maps\SS Walls.asm"
00051CD2                            ; ---------------------------------------------------------------------------
00051CD2                            ; Sprite mappings - walls of the special stage
00051CD2                            ; ---------------------------------------------------------------------------
00051CD2                            Map_SSWalls_internal:
00051CD2 0000                       		dc.w byte_2C584-Map_SSWalls_internal
00051CD4 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
00051CD6 0000                       		dc.w byte_2C590-Map_SSWalls_internal
00051CD8 0000                       		dc.w byte_2C596-Map_SSWalls_internal
00051CDA 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
00051CDC 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
00051CDE 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
00051CE0 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
00051CE2 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
00051CE4 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
00051CE6 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
00051CE8 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
00051CEA 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
00051CEC 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
00051CEE 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
00051CF0 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
00051CF2 01                         byte_2C584:	dc.b 1
00051CF3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00051CF8 01                         byte_2C58A:	dc.b 1
00051CF9 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00051CFE 01                         byte_2C590:	dc.b 1
00051CFF F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00051D04 01                         byte_2C596:	dc.b 1
00051D05 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00051D0A 01                         byte_2C59C:	dc.b 1
00051D0B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00051D10 01                         byte_2C5A2:	dc.b 1
00051D11 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00051D16 01                         byte_2C5A8:	dc.b 1
00051D17 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00051D1C 01                         byte_2C5AE:	dc.b 1
00051D1D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00051D22 01                         byte_2C5B4:	dc.b 1
00051D23 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00051D28 01                         byte_2C5BA:	dc.b 1
00051D29 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00051D2E 01                         byte_2C5C0:	dc.b 1
00051D2F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00051D34 01                         byte_2C5C6:	dc.b 1
00051D35 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00051D3A 01                         byte_2C5CC:	dc.b 1
00051D3B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00051D40 01                         byte_2C5D2:	dc.b 1
00051D41 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00051D46 01                         byte_2C5D8:	dc.b 1
00051D47 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00051D4C 01                         byte_2C5DE:	dc.b 1
00051D4D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00051D52                            		even
00051D52                            		even
00051D52                            
00051D52                            ; ---------------------------------------------------------------------------
00051D52                            ; Compressed graphics - special stage
00051D52                            ; ---------------------------------------------------------------------------
00051D52                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0005268A                            		even
0005268A                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
000527BE                            		even
000527BE                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0005344E                            		even
0005344E                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0005374E                            		even
0005374E                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
00053C42                            		even
00053C42                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
00053D30                            		even
00053D30                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
00053E00                            		even
00053E00                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
00053EF6                            		even
00053EF6                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
00053F54                            		even
00053F54                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
00053FE6                            		even
00053FE6                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
000540A8                            		even
000540A8                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
00054176                            		even
00054176                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00054242                            		even
00054242                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0005430A                            		even
0005430A                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
000543D4                            		even
000543D4                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000544A4                            		even
000544A4                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
00054698                            		even
00054698                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
00054800                            		even
00054800                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000548B0                            		even
000548B0                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0005498A                            		even
0005498A                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
00054A0E                            		even
00054A0E                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
00054B8C                            		even
00054B8C                            ; ---------------------------------------------------------------------------
00054B8C                            ; Compressed graphics - GHZ stuff
00054B8C                            ; ---------------------------------------------------------------------------
00054B8C                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00054BEE                            		even
00054BEE                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00054D08                            		even
00054D08                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00054E26                            		even
00054E26                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00054E6E                            		even
00054E6E                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
0005500C                            		even
0005500C                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00055088                            		even
00055088                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
0005529C                            		even
0005529C                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000553C8                            		even
000553C8                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0005551C                            		even
0005551C                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000555CC                            		even
000555CC                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0005562C                            		even
0005562C                            ; ---------------------------------------------------------------------------
0005562C                            ; Compressed graphics - LZ stuff
0005562C                            ; ---------------------------------------------------------------------------
0005562C                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00055704                            		even
00055704                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00055EF8                            		even
00055EF8                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
0005608A 00                         		even
0005608A                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
000561F4                            		even
000561F4                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00056834 00                         		even
00056834                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000568D6 00                         		even
000568D6                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00056950 00                         		even
00056950                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00056AB6 00                         		even
00056AB6                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
00056B3C 00                         		even
00056B3C                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00056CA8                            		even
00056CA8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
0005718A                            		even
0005718A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
000572FA                            		even
000572FA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000575B2                            		even
000575B2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000576F8                            		even
000576F8                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00057822                            		even
00057822                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000579A2 00                         		even
000579A2                            ; ---------------------------------------------------------------------------
000579A2                            ; Compressed graphics - MZ stuff
000579A2                            ; ---------------------------------------------------------------------------
000579A2                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00057C30                            		even
00057C30                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00057CEE                            		even
00057CEE                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00057DC6                            		even
00057DC6                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00057E1A                            		even
00057E1A                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00058138 00                         		even
00058138                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00058A4E                            		even
00058A4E                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00058BBC                            		even
00058BBC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00058C44                            		even
00058C44                            ; ---------------------------------------------------------------------------
00058C44                            ; Compressed graphics - SLZ stuff
00058C44                            ; ---------------------------------------------------------------------------
00058C44                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00058E80                            		even
00058E80                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00058FC6                            		even
00058FC6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
0005920A                            		even
0005920A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
000592A6 00                         		even
000592A6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00059388                            		even
00059388                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
0005956A                            		even
0005956A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00059676                            		even
00059676                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0005971A                            		even
0005971A                            ; ---------------------------------------------------------------------------
0005971A                            ; Compressed graphics - SYZ stuff
0005971A                            ; ---------------------------------------------------------------------------
0005971A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000598AA                            		even
000598AA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0005990C                            		even
0005990C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
00059A28 00                         		even
00059A28                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00059CB6                            		even
00059CB6                            ; ---------------------------------------------------------------------------
00059CB6                            ; Compressed graphics - SBZ stuff
00059CB6                            ; ---------------------------------------------------------------------------
00059CB6                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00059D0A                            		even
00059D0A                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00059FA6                            		even
00059FA6                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0005A196                            		even
0005A196                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
0005A334                            		even
0005A334                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
0005A664                            		even
0005A664                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
0005A842                            		even
0005A842                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0005A89A                            		even
0005A89A                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0005AA4C 00                         		even
0005AA4C                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0005AB68                            		even
0005AB68                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
0005ACF6                            		even
0005ACF6                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
0005AD90                            		even
0005AD90                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
0005ADE8                            		even
0005ADE8                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
0005AEE4                            		even
0005AEE4                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
0005AFFA                            		even
0005AFFA                            ; ---------------------------------------------------------------------------
0005AFFA                            ; Compressed graphics - enemies
0005AFFA                            ; ---------------------------------------------------------------------------
0005AFFA                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
0005B442 00                         		even
0005B442                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0005B932 00                         		even
0005B932                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
0005BC16 00                         		even
0005BC16                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
0005BFD6                            		even
0005BFD6                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0005C1BE                            		even
0005C1BE                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
0005C8EC 00                         		even
0005C8EC                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0005CB74 00                         		even
0005CB74                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
0005CE10 00                         		even
0005CE10                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0005D3E4                            		even
0005D3E4                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0005D676                            		even
0005D676                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
0005DCC0 00                         		even
0005DCC0                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0005E0FC                            		even
0005E0FC                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0005E40A 00                         		even
0005E40A                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0005E66A                            		even
0005E66A                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0005E968                            		even
0005E968                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0005EB94 00                         		even
0005EB94                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0005ED22                            		even
0005ED22                            ; ---------------------------------------------------------------------------
0005ED22                            ; Compressed graphics - various
0005ED22                            ; ---------------------------------------------------------------------------
0005ED22                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0005F370 00                         		even
0005F370                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0005F4E8 00                         		even
0005F4E8                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0005F60A 00                         		even
0005F60A                            Nem_Future:	incbin	"artnem\HUD - Life Counter Icon Future.bin"
0005F712 00                         		even
0005F712                            Nem_Ring:	incbin	"artnem\Rings.bin"
0005F866 00                         		even
0005F866                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0005FCF4                            		even
0005FCF4                            Nem_Explode:	incbin	"artnem\Explosion.bin"
00060368                            		even
00060368                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
00060402 00                         		even
00060402                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
00060594                            		even
00060594                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
000606B2 00                         		even
000606B2                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0006079E                            		even
0006079E                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
00060D16                            		even
00060D16                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
00060E00                            		even
00060E00                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
00060F74                            		even
00060F74                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
000612FC 00                         		even
000612FC                            ; ---------------------------------------------------------------------------
000612FC                            ; Compressed graphics - continue screen
000612FC                            ; ---------------------------------------------------------------------------
000612FC                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
000615D0 00                         		even
000615D0                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0006186A 00                         		even
0006186A                            ; ---------------------------------------------------------------------------
0006186A                            ; Compressed graphics - animals
0006186A                            ; ---------------------------------------------------------------------------
0006186A                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
000619C2                            		even
000619C2                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
00061B1E                            		even
00061B1E                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
00061C9A                            		even
00061C9A                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
00061DB6                            		even
00061DB6                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
00061F30                            		even
00061F30                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0006206A                            		even
0006206A                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
000621C6                            		even
000621C6                            ; ---------------------------------------------------------------------------
000621C6                            ; Compressed graphics - primary patterns and block mappings
000621C6                            ; ---------------------------------------------------------------------------
000621C6                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
00062BA2                            		even
00062BA2                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000644F2                            		even
000644F2                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
00065A74                            		even
00065A74                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00067E6E                            		even
00067E6E                            Blk16_TS:	incbin	"map16\TS.bin"
000680F2                            		even
000680F2                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00069230                            		even
00069230                            Blk256_TS:	incbin	"map256\TS.bin"
00069DDE                            		even
00069DDE                            Blk16_LZ:	incbin	"map16\LZ.bin"
0006AF7C                            		even
0006AF7C                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0006E424                            		even
0006E424                            Blk256_LZ:	incbin	"map256\LZ.bin"
00071946                            		even
00071946                            Blk16_MZ:	incbin	"map16\MZ.bin"
00072134                            		even
00072134                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00074BC4                            		even
00074BC4                            		incbin	"map256\MZ (JP1).bin"
00076CFE                            		even
00076CFE                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00077380                            		even
00077380                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0007ADEA                            		even
0007ADEA                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
0007D1F4                            		even
0007D1F4                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0007D698                            		even
0007D698                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0007EE70                            		even
0007EE70                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0007F1DA                            		even
0007F1DA                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0007FDD4                            		even
0007FDD4                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00082616                            		even
00082616                            		incbin	"map256\SBZ (JP1).bin"
000831A2                            		even
000831A2                            ; ---------------------------------------------------------------------------
000831A2                            ; Compressed graphics - bosses and ending sequence
000831A2                            ; ---------------------------------------------------------------------------
000831A2                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00083A0A                            		even
00083A0A                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00083CF4                            		even
00083CF4                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00084578                            		even
00084578                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00084DB6 00                         		even
00084DB6                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00085584 00                         		even
00085584                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00085AAC                            		even
00085AAC                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00085BCC                            		even
00085BCC                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00085DD4 00                         		even
00085DD4                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
000870BE 00                         		even
000870BE                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00087A02                            		even
00087A02                            		even
00087A02                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00087F92                            		even
00087F92                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
0008821A                            		even
0008821A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0008889E                            		even
0008889E                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00088C02                            		even
00088C02                            
00088C02 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00088C42                            ; ---------------------------------------------------------------------------
00088C42                            ; Collision data
00088C42                            ; ---------------------------------------------------------------------------
00088C42                            AngleMap:	incbin	"collide\Angle Map.bin"
00088D42                            		even
00088D42                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00089D42                            		even
00089D42                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
0008AD42                            		even
0008AD42                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
0008AEF0 00                         		even
0008AEF0                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0008B194                            		even
0008B194                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0008B338 00                         		even
0008B338                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0008B52C                            		even
0008B52C                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0008B606                            		even
0008B606                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0008B7D6                            		even
0008B7D6                            ; ---------------------------------------------------------------------------
0008B7D6                            ; Special Stage layouts
0008B7D6                            ; ---------------------------------------------------------------------------
0008B7D6                            SS_1:		incbin	"sslayout\1.bin"
0008BA50                            		even
0008BA50                            SS_2:		incbin	"sslayout\2.bin"
0008BE62                            		even
0008BE62                            SS_3:		incbin	"sslayout\3.bin"
0008C1BE                            		even
0008C1BE                            SS_4:		incbin	"sslayout\4.bin"
0008C698                            		even
0008C698                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0008CB48                            			even
0008CB48                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0008CE3A                            		even
0008CE3A                            ; ---------------------------------------------------------------------------
0008CE3A                            ; Animated uncompressed graphics
0008CE3A                            ; ---------------------------------------------------------------------------
0008CE3A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0008D03A                            		even
0008D03A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0008D43A                            		even
0008D43A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0008D8BA                            		even
0008D8BA                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0008DBBA                            		even
0008DBBA                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0008E1BA                            		even
0008E1BA                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0008E4BA                            		even
0008E4BA                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0008EF3A                            		even
0008EF3A                            
0008EF3A                            ; ---------------------------------------------------------------------------
0008EF3A                            ; Level	layout index
0008EF3A                            ; ---------------------------------------------------------------------------
0008EF3A                            Level_Index:
0008EF3A                            		; GHZ
0008EF3A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0008EF40 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0008EF46 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0008EF4C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0008EF52                            		; LZ
0008EF52 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0008EF58 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0008EF5E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0008EF64 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0008EF6A                            		; MZ
0008EF6A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0008EF70 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0008EF76 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0008EF7C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0008EF82                            		; SLZ
0008EF82 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008EF88 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008EF8E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0008EF94 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0008EF9A                            		; SYZ
0008EF9A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0008EFA0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0008EFA6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0008EFAC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0008EFB2                            		; SBZ
0008EFB2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0008EFB8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0008EFBE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0008EFC4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0008EFCA                            		; Ending
0008EFCA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008EFD0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0008EFD6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008EFDC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0008EFE2                            
0008EFE2                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0008F214                            		even
0008F214 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0008F218                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0008F352                            		even
0008F352 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0008F356                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0008F478                            		even
0008F478                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0008F4B6                            		even
0008F4B6 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0008F4BA 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0008F4BE                            
0008F4BE                            Level_LZ1:	incbin	"levels\lz1.bin"
0008F580                            		even
0008F580                            Level_LZbg:	incbin	"levels\lzbg.bin"
0008F682                            		even
0008F682 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0008F686                            Level_LZ2:	incbin	"levels\lz2.bin"
0008F720                            		even
0008F720 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0008F724                            Level_LZ3:	incbin	"levels\lz3.bin"
0008F83E                            		even
0008F83E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0008F842                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0008F8FC                            		even
0008F8FC 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0008F900                            
0008F900                            Level_MZ1:	incbin	"levels\mz1.bin"
0008F9F2                            		even
0008F9F2                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0008FB14                            		even
0008FB14                            Level_MZ2:	incbin	"levels\mz2.bin"
0008FC36                            		even
0008FC36                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0008FD58                            		even
0008FD58 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0008FD5C                            Level_MZ3:	incbin	"levels\mz3.bin"
0008FDF6                            		even
0008FDF6                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0008FF18                            		even
0008FF18 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0008FF1C 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0008FF20                            
0008FF20                            Level_SLZ1:	incbin	"levels\slz1.bin"
00090032                            		even
00090032                            Level_SLZbg:	incbin	"levels\slzbg.bin"
000900AC                            		even
000900AC                            Level_SLZ2:	incbin	"levels\slz2.bin"
0009019C                            		even
0009019C                            Level_SLZ3:	incbin	"levels\slz3.bin"
000902B6                            		even
000902B6 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
000902BA                            
000902BA                            Level_SYZ1:	incbin	"levels\syz1.bin"
000903BE                            		even
000903BE                            		incbin	"levels\syzbg (JP1).bin"
000903F8                            		even
000903F8 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
000903FC                            Level_SYZ2:	incbin	"levels\syz2.bin"
00090500                            		even
00090500 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00090504                            Level_SYZ3:	incbin	"levels\syz3.bin"
0009065E 00                         		even
0009065E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00090662 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00090666                            
00090666                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00090788                            		even
00090788                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
000907C6                            		even
000907C6                            Level_SBZ2:	incbin	"levels\sbz2.bin"
00090908                            		even
00090908                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
00090A72                            		even
00090A72 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00090A76 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00090A7A                            Level_End:	incbin	"levels\ending.bin"
00090AAA 00                         		even
00090AAA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00090AAE                            
00090AAE                            
00090AAE                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000916EE                            		even
000916EE                            
00091700                            
00091700                            ; ---------------------------------------------------------------------------
00091700                            ; Sprite locations index
00091700                            ; ---------------------------------------------------------------------------
00091700                            ObjPos_Index:
00091700                            		; GHZ
00091700 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091704 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091708 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009170C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091710                            		; LZ
00091710 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091714 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091718 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009171C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091720                            		; MZ
00091720 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091724 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091728 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009172C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091730                            		; SLZ
00091730 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091734 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091738 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009173C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091740                            		; SYZ
00091740 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091744 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091748 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009174C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091750                            		; SBZ
00091750 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091754 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091758 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009175C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091760                            		; Ending
00091760 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091764 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091768 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0009176C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00091770                            		; --- Put extra object data here. ---
00091770                            ObjPosLZPlatform_Index:
00091770 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00091774 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00091778 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0009177C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00091780                            ObjPosSBZPlatform_Index:
00091780 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00091784 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00091788 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0009178C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00091790 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00091796                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00091E3E                            		even
00091E3E                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
0009245C                            		even
0009245C                            		incbin	"objpos\ghz3 (JP1).bin"
00092A6E                            		even
00092A6E                            		incbin	"objpos\lz1 (JP1).bin"
00092AA4                            		even
00092AA4                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
00092DE6                            		even
00092DE6                            		incbin	"objpos\lz3 (JP1).bin"
000933AA                            		even
000933AA                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00093914                            		even
00093914                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00093946                            		even
00093946                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00093978                            		even
00093978                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000939AA                            		even
000939AA                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000939DC                            		even
000939DC                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00093A26                            		even
00093A26                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00093A64                            		even
00093A64                            		incbin	"objpos\mz1 (JP1).bin"
0009405E                            		even
0009405E                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00094688                            		even
00094688                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00094976                            		even
00094976                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00094EAA                            		even
00094EAA                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00095318                            		even
00095318                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
000958FA                            		even
000958FA                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00095B46                            		even
00095B46                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00095DA4                            		even
00095DA4                            		incbin	"objpos\syz3 (JP1).bin"
00095DD4                            		even
00095DD4                            		incbin	"objpos\sbz1 (JP1).bin"
00095E1C                            		even
00095E1C                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00095E46                            		even
00095E46                            ObjPos_FZ:	incbin	"objpos\fz.bin"
00095E82                            		even
00095E82                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00095EB4                            		even
00095EB4                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00095EE6                            		even
00095EE6                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00095F18                            		even
00095F18                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00095F4A                            		even
00095F4A                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00095F7C                            		even
00095F7C                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00095FB4                            		even
00095FB4                            ObjPos_End:	incbin	"objpos\ending.bin"
00096110                            		even
00096110 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00096116                            
00096116                            		dcb.b $63C,$FF
00096752                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00096752                            
00096752                            SoundDriver:	include "s1.sounddriver.asm"
00096752                            ; ---------------------------------------------------------------------------
00096752                            ; Modified (early?) SMPS 68k Type 1b
00096752                            ; ---------------------------------------------------------------------------
00096752                            ; Go_SoundTypes:
00096752 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00096756                            ; Go_SoundD0:
00096756 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
0009675A 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0009675E 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00096762                            ; off_719A0:
00096762 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00096766 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
0009676A                            ; ---------------------------------------------------------------------------
0009676A                            ; PSG instruments used in music
0009676A                            ; ---------------------------------------------------------------------------
0009676A                            PSG_Index:
0009676A 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00096776 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00096782 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0009678E                            PSG1:		incbin	"sound/psg/psg1.bin"
000967A5                            PSG2:		incbin	"sound/psg/psg2.bin"
000967AC                            PSG3:		incbin	"sound/psg/psg3.bin"
000967BD                            PSG4:		incbin	"sound/psg/psg4.bin"
000967C8                            PSG6:		incbin	"sound/psg/psg6.bin"
000967D7                            PSG5:		incbin	"sound/psg/psg5.bin"
00096801                            PSG7:		incbin	"sound/psg/psg7.bin"
0009681D                            PSG8:		incbin	"sound/psg/psg8.bin"
00096845                            PSG9:		incbin	"sound/psg/psg9.bin"
00096856                            ; ---------------------------------------------------------------------------
00096856                            ; New tempos for songs during speed shoes
00096856                            ; ---------------------------------------------------------------------------
00096856                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00096856                            ; tempos while speed shoes are active. If you don't want that, you should add
00096856                            ; their "correct" sped-up main tempos to the list.
00096856                            ; byte_71A94:
00096856                            SpeedUpIndex:
00096856 07                         		dc.b 7		; GHZ
00096857 72                         		dc.b $72	; LZ
00096858 73                         		dc.b $73	; MZ
00096859 26                         		dc.b $26	; SLZ
0009685A 15                         		dc.b $15	; SYZ
0009685B 08                         		dc.b 8		; SBZ
0009685C FF                         		dc.b $FF	; Invincibility
0009685D 05                         		dc.b 5		; Extra Life
0009685E                            		;dc.b ?		; Special Stage
0009685E                            		;dc.b ?		; Title Screen
0009685E                            		;dc.b ?		; Ending
0009685E                            		;dc.b ?		; Boss
0009685E                            		;dc.b ?		; FZ
0009685E                            		;dc.b ?		; Sonic Got Through
0009685E                            		;dc.b ?		; Game Over
0009685E                            		;dc.b ?		; Continue Screen
0009685E                            		;dc.b ?		; Credits
0009685E                            		;dc.b ?		; Drowning
0009685E                            		;dc.b ?		; Get Emerald
0009685E                            
0009685E                            ; ---------------------------------------------------------------------------
0009685E                            ; Music	Pointers
0009685E                            ; ---------------------------------------------------------------------------
0009685E                            MusicIndex:
0009685E 0000 0000                  ptr_mus81:	dc.l Music81
00096862 0000 0000                  ptr_mus82:	dc.l Music82
00096866 0000 0000                  ptr_mus83:	dc.l Music83
0009686A 0000 0000                  ptr_mus84:	dc.l Music84
0009686E 0000 0000                  ptr_mus85:	dc.l Music85
00096872 0000 0000                  ptr_mus86:	dc.l Music86
00096876 0000 0000                  ptr_mus87:	dc.l Music87
0009687A 0000 0000                  ptr_mus88:	dc.l Music88
0009687E 0000 0000                  ptr_mus89:	dc.l Music89
00096882 0000 0000                  ptr_mus8A:	dc.l Music8A
00096886 0000 0000                  ptr_mus8B:	dc.l Music8B
0009688A 0000 0000                  ptr_mus8C:	dc.l Music8C
0009688E 0000 0000                  ptr_mus8D:	dc.l Music8D
00096892 0000 0000                  ptr_mus8E:	dc.l Music8E
00096896 0000 0000                  ptr_mus8F:	dc.l Music8F
0009689A 0000 0000                  ptr_mus90:	dc.l Music90
0009689E 0000 0000                  ptr_mus91:	dc.l Music91
000968A2 0000 0000                  ptr_mus92:	dc.l Music92
000968A6 0000 0000                  ptr_mus93:	dc.l Music93
000968AA 0000 0000                  ptr_mus94:	dc.l Music94
000968AE 0000 0000                  ptr_mus95:	dc.l Music95
000968B2 0000 0000                  ptr_mus96:	dc.l Music96
000968B6 0000 0000                  ptr_mus97:	dc.l Music97
000968BA 0000 0000                  ptr_mus98:	dc.l Music98
000968BE 0000 0000                  ptr_mus99:	dc.l Music99
000968C2 0000 0000                  ptr_mus9A:	dc.l Music9A
000968C6 0000 0000                  ptr_mus9B:	dc.l Music9B
000968CA 0000 0000                  ptr_mus9C:	dc.l Music9C
000968CE                            ptr_musend
000968CE                            ; ---------------------------------------------------------------------------
000968CE                            ; Priority of sound. New music or SFX must have a priority higher than or equal
000968CE                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
000968CE                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
000968CE                            ; any music or SFX can override it (as long as it can override whatever was
000968CE                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
000968CE                            ; will only override special SFX and music will only override music.
000968CE                            ; ---------------------------------------------------------------------------
000968CE                            ; SoundTypes:
000968CE                            SoundPriorities:
000968CE 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
000968DD 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000968ED 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000968FD 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0009690D 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0009691D 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
0009692D 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00096932                            
00096932                            ; ---------------------------------------------------------------------------
00096932                            ; Subroutine to update music more than once per frame
00096932                            ; (Called by horizontal & vert. interrupts)
00096932                            ; ---------------------------------------------------------------------------
00096932                            
00096932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096932                            
00096932                            ; sub_71B4C:
00096932                            UpdateMusic:
00096932 33FC 0100 00A1 1100        		stopZ80
0009693A 4E71                       		nop	
0009693C 4E71                       		nop	
0009693E 4E71                       		nop	
00096940                            ; loc_71B5A:
00096940                            @updateloop:
00096940 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00096948 66F6                       		bne.s	@updateloop			; If so, wait
0009694A                            
0009694A 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00096952 6700                       		beq.s	@driverinput			; Branch if yes
00096954 33FC 0000 00A1 1100        		startZ80
0009695C 4E71                       		nop	
0009695E 4E71                       		nop	
00096960 4E71                       		nop	
00096962 4E71                       		nop	
00096964 4E71                       		nop	
00096966 60CA                       		bra.s	UpdateMusic
00096968                            ; ===========================================================================
00096968                            ; loc_71B82:
00096968                            @driverinput:
00096968 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
0009696E 422E 000E                  		clr.b	f_voice_selector(a6)
00096972 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00096976 6600 0000                  		bne.w	PauseMusic			; if yes, branch
0009697A 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
0009697E 6600                       		bne.s	@skipdelay
00096980 4EBA 0000                  		jsr	TempoWait(pc)
00096984                            ; loc_71B9E:
00096984                            @skipdelay:
00096984 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00096988 6700                       		beq.s	@skipfadeout
0009698A 4EBA 0000                  		jsr	DoFadeOut(pc)
0009698E                            ; loc_71BA8:
0009698E                            @skipfadeout:
0009698E 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00096992 6700                       		beq.s	@skipfadein
00096994 4EBA 0000                  		jsr	DoFadeIn(pc)
00096998                            ; loc_71BB2:
00096998                            @skipfadein:
00096998                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00096998 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
0009699C 6700                       		beq.s	@nosndinput		; if not, branch
0009699E 4EBA 0000                  		jsr	CycleSoundQueue(pc)
000969A2                            ; loc_71BBC:
000969A2                            @nosndinput:
000969A2 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
000969A8 6700                       		beq.s	@nonewsound		; If yes, branch
000969AA 4EBA 0000                  		jsr	PlaySoundID(pc)
000969AE                            ; loc_71BC8:
000969AE                            @nonewsound:
000969AE 4A38 C901                  		tst.b	($FFFFC901).w
000969B2 6700                       		beq.s	@cont
000969B4 5338 C901                  		subq.b	#1,($FFFFC901).w
000969B8                            		
000969B8                            @cont:
000969B8 4BEE 0040                  		lea	v_music_dac_track(a6),a5
000969BC 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
000969BE 6A00                       		bpl.s	@dacdone		; Branch if not
000969C0 4EBA 0000                  		jsr	DACUpdateTrack(pc)
000969C4                            ; loc_71BD4:
000969C4                            @dacdone:
000969C4 422E 0008                  		clr.b	f_updating_dac(a6)
000969C8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000969CA                            ; loc_71BDA:
000969CA                            @bgmfmloop:
000969CA DAFC 0030                  		adda.w	#TrackSz,a5
000969CE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000969D0 6A00                       		bpl.s	@bgmfmnext		; Branch if not
000969D2 4EBA 0000                  		jsr	FMUpdateTrack(pc)
000969D6                            ; loc_71BE6:
000969D6                            @bgmfmnext:
000969D6 51CF FFF2                  		dbf	d7,@bgmfmloop
000969DA                            
000969DA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
000969DC                            ; loc_71BEC:
000969DC                            @bgmpsgloop:
000969DC DAFC 0030                  		adda.w	#TrackSz,a5
000969E0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000969E2 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
000969E4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
000969E8                            ; loc_71BF8:
000969E8                            @bgmpsgnext:
000969E8 51CF FFF2                  		dbf	d7,@bgmpsgloop
000969EC                            
000969EC 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
000969F2 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
000969F4                            ; loc_71C04:
000969F4                            @sfxfmloop:
000969F4 DAFC 0030                  		adda.w	#TrackSz,a5
000969F8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000969FA 6A00                       		bpl.s	@sfxfmnext		; Branch if not
000969FC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00096A00                            ; loc_71C10:
00096A00                            @sfxfmnext:
00096A00 51CF FFF2                  		dbf	d7,@sfxfmloop
00096A04                            
00096A04 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00096A06                            ; loc_71C16:
00096A06                            @sfxpsgloop:
00096A06 DAFC 0030                  		adda.w	#TrackSz,a5
00096A0A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096A0C 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00096A0E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00096A12                            ; loc_71C22:
00096A12                            @sfxpsgnext:
00096A12 51CF FFF2                  		dbf	d7,@sfxpsgloop
00096A16                            		
00096A16 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00096A1C DAFC 0030                  		adda.w	#TrackSz,a5
00096A20 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00096A22 6A00                       		bpl.s	@specfmdone		; Branch if not
00096A24 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00096A28                            ; loc_71C38:
00096A28                            @specfmdone:
00096A28 DAFC 0030                  		adda.w	#TrackSz,a5
00096A2C 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00096A2E 6A00                       		bpl.s	DoStartZ80		; Branch if not
00096A30 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00096A34                            ; loc_71C44:
00096A34                            DoStartZ80:
00096A34 33FC 0000 00A1 1100        		startZ80
00096A3C 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00096A42 6700                       		beq.s @end ; if not, branch
00096A44 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00096A4A 6600                       		bne.s @end ; if not, branch
00096A4C 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00096A52 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00096A56                            
00096A56                            	@end:
00096A56 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00096A5A 4E75                       		rts
00096A5C                            ; End of function UpdateMusic
00096A5C                            
00096A5C                            
00096A5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096A5C                            
00096A5C                            ; sub_71C4E: UpdateDAC:
00096A5C                            DACUpdateTrack:
00096A5C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00096A60 6600                       		bne.s	@locret				; Return if not
00096A62 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00096A68                            ;DACDoNext:
00096A68 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00096A6C                            ; loc_71C5E:
00096A6C                            @sampleloop:
00096A6C 7A00                       		moveq	#0,d5
00096A6E 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00096A70 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00096A74 6500                       		blo.s	@notcoord	; Branch if not
00096A76 4EBA 0000                  		jsr	CoordFlag(pc)
00096A7A 60F0                       		bra.s	@sampleloop
00096A7C                            ; ===========================================================================
00096A7C                            ; loc_71C6E:
00096A7C                            @notcoord:
00096A7C 4A05                       		tst.b	d5			; Is it a sample?
00096A7E 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00096A80 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00096A84 1A1C                       		move.b	(a4)+,d5		; Get another byte
00096A86 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00096A88 534C                       		subq.w	#1,a4			; Put byte back
00096A8A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00096A90 6000                       		bra.s	@gotsampleduration
00096A92                            ; ===========================================================================
00096A92                            ; loc_71C84:
00096A92                            @gotduration:
00096A92 4EBA 0000                  		jsr	SetDuration(pc)
00096A96                            ; loc_71C88:
00096A96                            @gotsampleduration:
00096A96 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00096A9A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096A9E 6600                       		bne.s	@locret			; Return if yes
00096AA0 7000                       		moveq	#0,d0
00096AA2 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00096AA6 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00096AAA 6700                       		beq.s	@locret			; Return if yes
00096AAC 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00096AB0 6600                       		bne.s	@timpani		; Various timpani
00096AB2 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00096AB8                            ; locret_71CAA:
00096AB8                            @locret:
00096AB8 4E75                       		rts	
00096ABA                            ; ===========================================================================
00096ABA                            ; loc_71CAC:
00096ABA                            @timpani:
00096ABA 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00096ABE 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00096AC2                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00096AC2                            		; use this value from then on.
00096AC2 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00096AC8 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00096AD0 4E75                       		rts	
00096AD2                            ; End of function DACUpdateTrack
00096AD2                            
00096AD2                            ; ===========================================================================
00096AD2                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00096AD2                            ; Also, $8C-$8D are so slow you may want to skip them.
00096AD2                            ; byte_71CC4:
00096AD2 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00096AD8                            
00096AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096AD8                            
00096AD8                            ; sub_71CCA:
00096AD8                            FMUpdateTrack:
00096AD8 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00096ADC 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00096ADE 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00096AE2 4EBA 0000                  		jsr	FMDoNext(pc)
00096AE6 4EBA 0000                  		jsr	FMPrepareNote(pc)
00096AEA 6000 0000                  		bra.w	FMNoteOn
00096AEE                            ; ===========================================================================
00096AEE                            ; loc_71CE0:
00096AEE                            @notegoing:
00096AEE 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00096AF2 4EBA 0000                  		jsr	DoModulation(pc)
00096AF6 6000 0000                  		bra.w	FMUpdateFreq
00096AFA                            ; End of function FMUpdateTrack
00096AFA                            
00096AFA                            
00096AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096AFA                            
00096AFA                            ; sub_71CEC:
00096AFA                            FMDoNext:
00096AFA 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00096AFE 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00096B02                            ; loc_71CF4:
00096B02                            @noteloop:
00096B02 7A00                       		moveq	#0,d5
00096B04 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00096B06 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00096B0A 6500                       		blo.s	@gotnote	; Branch if not
00096B0C 4EBA 0000                  		jsr	CoordFlag(pc)
00096B10 60F0                       		bra.s	@noteloop
00096B12                            ; ===========================================================================
00096B12                            ; loc_71D04:
00096B12                            @gotnote:
00096B12 4EBA 0000                  		jsr	FMNoteOff(pc)
00096B16 4A05                       		tst.b	d5		; Is this a note?
00096B18 6A00                       		bpl.s	@gotduration	; Branch if not
00096B1A 4EBA 0000                  		jsr	FMSetFreq(pc)
00096B1E 1A1C                       		move.b	(a4)+,d5	; Get another byte
00096B20 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00096B22 534C                       		subq.w	#1,a4		; Otherwise, put it back
00096B24 6000 0000                  		bra.w	FinishTrackUpdate
00096B28                            ; ===========================================================================
00096B28                            ; loc_71D1A:
00096B28                            @gotduration:
00096B28 4EBA 0000                  		jsr	SetDuration(pc)
00096B2C 6000 0000                  		bra.w	FinishTrackUpdate
00096B30                            ; End of function FMDoNext
00096B30                            
00096B30                            
00096B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096B30                            
00096B30                            ; sub_71D22:
00096B30                            FMSetFreq:
00096B30 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00096B34 6700                       		beq.s	TrackSetRest
00096B36 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00096B3A 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00096B3E E34D                       		lsl.w	#1,d5
00096B40 41FA 0000                  		lea	FMFrequencies(pc),a0
00096B44 3C30 5000                  		move.w	(a0,d5.w),d6
00096B48 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00096B4C 4E75                       		rts	
00096B4E                            ; End of function FMSetFreq
00096B4E                            
00096B4E                            
00096B4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096B4E                            
00096B4E                            ; sub_71D40:
00096B4E                            SetDuration:
00096B4E 1005                       		move.b	d5,d0
00096B50 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00096B54                            ; loc_71D46:
00096B54                            @multloop:
00096B54 5301                       		subq.b	#1,d1
00096B56 6700                       		beq.s	@donemult
00096B58 D005                       		add.b	d5,d0
00096B5A 60F8                       		bra.s	@multloop
00096B5C                            ; ===========================================================================
00096B5C                            ; loc_71D4E:
00096B5C                            @donemult:
00096B5C 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00096B60 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00096B64 4E75                       		rts	
00096B66                            ; End of function SetDuration
00096B66                            
00096B66                            ; ===========================================================================
00096B66                            ; loc_71D58:
00096B66                            TrackSetRest:
00096B66 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00096B6A 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00096B6E                            
00096B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096B6E                            
00096B6E                            ; sub_71D60:
00096B6E                            FinishTrackUpdate:
00096B6E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00096B72 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00096B78 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00096B7C 6600                       		bne.s	@locret				; If so, branch
00096B7E 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00096B84 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00096B88 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00096B8C 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00096B8E 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00096B92 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00096B96 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00096B9A 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00096B9E 1018                       		move.b	(a0)+,d0			; Get steps
00096BA0 E208                       		lsr.b	#1,d0				; Halve them
00096BA2 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00096BA6 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00096BAA                            ; locret_71D9C:
00096BAA                            @locret:
00096BAA 4E75                       		rts	
00096BAC                            ; End of function FinishTrackUpdate
00096BAC                            
00096BAC                            
00096BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096BAC                            
00096BAC                            ; sub_71D9E: NoteFillUpdate
00096BAC                            NoteTimeoutUpdate:
00096BAC 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00096BB0 6700                       		beq.s	@locret
00096BB2 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00096BB6 6600                       		bne.s	@locret				; Return if it hasn't expired
00096BB8 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00096BBC 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00096BC0 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00096BC4 4EBA 0000                  		jsr	FMNoteOff(pc)
00096BC8 584F                       		addq.w	#4,sp				; Do not return to caller
00096BCA 4E75                       		rts	
00096BCC                            ; ===========================================================================
00096BCC                            ; loc_71DBE:
00096BCC                            @psgnoteoff:
00096BCC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00096BD0 584F                       		addq.w	#4,sp		; Do not return to caller
00096BD2                            ; locret_71DC4:
00096BD2                            @locret:
00096BD2 4E75                       		rts	
00096BD4                            ; End of function NoteTimeoutUpdate
00096BD4                            
00096BD4                            
00096BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096BD4                            
00096BD4                            ; sub_71DC6:
00096BD4                            DoModulation:
00096BD4 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00096BD6 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00096BDA 6700                       		beq.s	@locret				; Return if not
00096BDC 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00096BE0 6700                       		beq.s	@waitdone			; If yes, branch
00096BE2 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00096BE6 4E75                       		rts	
00096BE8                            ; ===========================================================================
00096BE8                            ; loc_71DDA:
00096BE8                            @waitdone:
00096BE8 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00096BEC 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00096BEE 4E75                       		rts	
00096BF0                            ; ===========================================================================
00096BF0                            ; loc_71DE2:
00096BF0                            @updatemodulation:
00096BF0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00096BF4 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00096BFA 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00096BFE 6600                       		bne.s	@calcfreq			; If nonzero, branch
00096C00 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00096C06 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00096C0A 4E75                       		rts	
00096C0C                            ; ===========================================================================
00096C0C                            ; loc_71DFE:
00096C0C                            @calcfreq:
00096C0C 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00096C10 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00096C14 4886                       		ext.w	d6
00096C16 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00096C1A 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00096C1E DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00096C22 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00096C24                            ; locret_71E16:
00096C24                            @locret:
00096C24 4E75                       		rts	
00096C26                            ; End of function DoModulation
00096C26                            
00096C26                            
00096C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096C26                            
00096C26                            ; sub_71E18:
00096C26                            FMPrepareNote:
00096C26 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00096C2A 6600                       		bne.s	locret_71E48		; Return if so
00096C2C 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00096C30 6700                       		beq.s	FMSetRest		; Branch if zero
00096C32                            ; loc_71E24:
00096C32                            FMUpdateFreq:
00096C32 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00096C36 4880                       		ext.w	d0
00096C38 DC40                       		add.w	d0,d6			; Add note frequency
00096C3A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096C3E 6600                       		bne.s	locret_71E48		; Return if so
00096C40 3206                       		move.w	d6,d1
00096C42 E049                       		lsr.w	#8,d1
00096C44 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00096C48 4EBA 0000                  		jsr	WriteFMIorII(pc)
00096C4C 1206                       		move.b	d6,d1
00096C4E 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00096C52 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00096C56                            ; locret_71E48:
00096C56                            locret_71E48:
00096C56 4E75                       		rts	
00096C58                            ; ===========================================================================
00096C58                            ; loc_71E4A:
00096C58                            FMSetRest:
00096C58 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00096C5C 4E75                       		rts	
00096C5E                            ; End of function FMPrepareNote
00096C5E                            
00096C5E                            ; ===========================================================================
00096C5E                            ; loc_71E50:
00096C5E                            PauseMusic:
00096C5E 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00096C60 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00096C66 6700 0000                  		beq.w	@unpausedallfm
00096C6A 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00096C70 7602                       		moveq	#2,d3
00096C72 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00096C76 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00096C78                            ; loc_71E6A:
00096C78                            @killpanloop:
00096C78 4EBA 0000                  		jsr	WriteFMI(pc)
00096C7C 4EBA 0000                  		jsr	WriteFMII(pc)
00096C80 5200                       		addq.b	#1,d0
00096C82 51CB FFF4                  		dbf	d3,@killpanloop
00096C86                            
00096C86 7602                       		moveq	#2,d3
00096C88 7028                       		moveq	#$28,d0		; Key on/off register
00096C8A                            ; loc_71E7C:
00096C8A                            @noteoffloop:
00096C8A 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00096C8C 4EBA 0000                  		jsr	WriteFMI(pc)
00096C90 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00096C92 4EBA 0000                  		jsr	WriteFMI(pc)
00096C96 51CB FFF2                  		dbf	d3,@noteoffloop
00096C9A                            
00096C9A 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00096C9E 6000 FD94                  		bra.w	DoStartZ80
00096CA2                            ; ===========================================================================
00096CA2                            ; loc_71E94:
00096CA2                            @unpausemusic:
00096CA2 422E 0003                  		clr.b	f_pausemusic(a6)
00096CA6 7630                       		moveq	#TrackSz,d3
00096CA8 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00096CAC 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00096CAE                            ; loc_71EA0:
00096CAE                            @bgmfmloop:
00096CAE 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00096CB2 6700                       		beq.s	@bgmfmnext		; Branch if not
00096CB4 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096CB8 6600                       		bne.s	@bgmfmnext		; Branch if yes
00096CBA 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00096CBE 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00096CC2 4EBA 0000                  		jsr	WriteFMIorII(pc)
00096CC6                            ; loc_71EB8:
00096CC6                            @bgmfmnext:
00096CC6 DAC3                       		adda.w	d3,a5
00096CC8 51CC FFE4                  		dbf	d4,@bgmfmloop
00096CCC                            
00096CCC 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00096CD0 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00096CD2                            ; loc_71EC4:
00096CD2                            @sfxfmloop:
00096CD2 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00096CD6 6700                       		beq.s	@sfxfmnext		; Branch if not
00096CD8 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096CDC 6600                       		bne.s	@sfxfmnext		; Branch if yes
00096CDE 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00096CE2 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00096CE6 4EBA 0000                  		jsr	WriteFMIorII(pc)
00096CEA                            ; loc_71EDC:
00096CEA                            @sfxfmnext:
00096CEA DAC3                       		adda.w	d3,a5
00096CEC 51CC FFE4                  		dbf	d4,@sfxfmloop
00096CF0                            
00096CF0 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00096CF4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00096CF8 6700                       		beq.s	@unpausedallfm		; Branch if not
00096CFA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00096CFE 6600                       		bne.s	@unpausedallfm		; Branch if yes
00096D00 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00096D04 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00096D08 4EBA 0000                  		jsr	WriteFMIorII(pc)
00096D0C                            ; loc_71EFE:
00096D0C                            @unpausedallfm:
00096D0C 6000 FD26                  		bra.w	DoStartZ80
00096D10                            
00096D10                            ; ---------------------------------------------------------------------------
00096D10                            ; Subroutine to	play a sound or	music track
00096D10                            ; ---------------------------------------------------------------------------
00096D10                            
00096D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096D10                            
00096D10                            ; Sound_Play:
00096D10                            CycleSoundQueue:
00096D10 2079 0009 6752             		movea.l	(Go_SoundPriorities).l,a0
00096D16 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00096D1A 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00096D1C 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00096D1E                            ; loc_71F12:
00096D1E                            @inputloop:
00096D1E 1011                       		move.b	(a1),d0			; move track number to d0
00096D20 1200                       		move.b	d0,d1
00096D22 4219                       		clr.b	(a1)+			; Clear entry
00096D24 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00096D28 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00096D2A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00096D30 6700                       		beq.s	@havesound		; If yes, branch
00096D32 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00096D36 6000                       		bra.s	@nextinput
00096D38                            ; ===========================================================================
00096D38                            ; loc_71F2C:
00096D38                            @havesound:
00096D38 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00096D3C 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00096D40 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00096D42 6500                       		blo.s	@nextinput		; Branch if yes
00096D44 1602                       		move.b	d2,d3			; Store new priority
00096D46 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00096D4A                            ; loc_71F3E:
00096D4A                            @nextinput:
00096D4A 51CC FFD2                  		dbf	d4,@inputloop
00096D4E                            
00096D4E 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00096D50 6B00                       		bmi.s	@locret
00096D52 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00096D54                            ; locret_71F4A:
00096D54                            @locret:
00096D54 4E75                       		rts	
00096D56                            ; End of function CycleSoundQueue
00096D56                            
00096D56                            
00096D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00096D56                            
00096D56                            ; Sound_ChkValue:
00096D56                            PlaySoundID:
00096D56 7E00                       		moveq	#0,d7
00096D58 1E2E 0009                  		move.b	v_sound_id(a6),d7
00096D5C 6700 0000                  		beq.w	StopAllSound
00096D60 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00096D62 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00096D68                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00096D68                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00096D68                            		; See LevSel_NoCheat for more.
00096D68 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00096D6C 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00096D70 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00096D74 6500 0000                  		blo.w	@locret			; Return if yes
00096D78 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00096D7C 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00096D80 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00096D84 6500 0000                  		blo.w	@locret			; Return if yes
00096D88 0C07 00D1                  		cmpi.b	#$D1,d7
00096D8C 6500 0000                  		bcs.w	Sound_PlaySpecial
00096D90 0C07 00DF                  		cmp.b	#$DF,d7
00096D94 6F00 0000                  		ble.w	Sound_D1toDF
00096D98 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00096D9C 6500 0000                  		blo.w	@locret			; Return if yes
00096DA0 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00096DA4 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00096DA6                            ; locret_71F8C:
00096DA6                            @locret:
00096DA6 4E75                       		rts	
00096DA8                            ; ===========================================================================
00096DA8                            
00096DA8                            Sound_E0toE4:
00096DA8 0407 00E0                  		subi.b	#flg__First,d7
00096DAC E54F                       		lsl.w	#2,d7
00096DAE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00096DB2                            ; ===========================================================================
00096DB2                            
00096DB2                            Sound_ExIndex:
00096DB2 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00096DB6 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00096DBA 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00096DBE 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00096DC2 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00096DC6                            ptr_flgend
00096DC6                            ; ===========================================================================
00096DC6                            ; ---------------------------------------------------------------------------
00096DC6                            ; Play "Say-gaa" PCM sound
00096DC6                            ; ---------------------------------------------------------------------------
00096DC6                            ; Sound_E1: PlaySega:
00096DC6                            PlaySegaSound:
00096DC6 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00096DCE 33FC 0000 00A1 1100        		startZ80
00096DD6 323C 0011                  		move.w	#$11,d1
00096DDA                            ; loc_71FC0:
00096DDA                            @busyloop_outer:
00096DDA 303C FFFF                  		move.w	#-1,d0
00096DDE                            ; loc_71FC4:
00096DDE                            @busyloop:
00096DDE 4E71                       		nop	
00096DE0 51C8 FFFC                  		dbf	d0,@busyloop
00096DE4                            
00096DE4 51C9 FFF4                  		dbf	d1,@busyloop_outer
00096DE8                            
00096DE8 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00096DEA 4E75                       		rts	
00096DEC                            ; ===========================================================================
00096DEC                            ; ---------------------------------------------------------------------------
00096DEC                            ; Play music track $81-$9F
00096DEC                            ; ---------------------------------------------------------------------------
00096DEC                            ; Sound_81to9F:
00096DEC                            Sound_PlayBGM:
00096DEC 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00096DF0 6600                       		bne.s	@bgmnot1up		; if not, branch
00096DF2 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00096DF6 6600 0000                  		bne.w	@locdblret		; if yes, branch
00096DFA 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00096DFE 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00096E00                            ; loc_71FE6:
00096E00                            @clearsfxloop:
00096E00 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00096E04 DAFC 0030                  		adda.w	#TrackSz,a5
00096E08 51C8 FFF6                  		dbf	d0,@clearsfxloop
00096E0C                            
00096E0C 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00096E10 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00096E12                            ; loc_71FF8:
00096E12                            @cleartrackplayloop:
00096E12 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00096E16 DAFC 0030                  		adda.w	#TrackSz,a5
00096E1A 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00096E1E                            
00096E1E 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00096E20 204E                       		movea.l	a6,a0
00096E22 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00096E26 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00096E2A                            ; loc_72012:
00096E2A                            @backupramloop:
00096E2A 22D8                       		move.l	(a0)+,(a1)+
00096E2C 51C8 FFFC                  		dbf	d0,@backupramloop
00096E30                            
00096E30 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00096E36 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00096E38 6000                       		bra.s	@bgm_loadMusic
00096E3A                            ; ===========================================================================
00096E3A                            ; loc_72024:
00096E3A                            @bgmnot1up:
00096E3A 422E 0027                  		clr.b	f_1up_playing(a6)
00096E3E 422E 0026                  		clr.b	v_fadein_counter(a6)
00096E42                            ; loc_7202C:
00096E42                            @bgm_loadMusic:
00096E42 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00096E46 2879 0009 6762             		movea.l	(Go_SpeedUpIndex).l,a4
00096E4C 0407 0081                  		subi.b	#bgm__First,d7
00096E50 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00096E56 2879 0009 675A             		movea.l	(Go_MusicIndex).l,a4
00096E5C E54F                       		lsl.w	#2,d7
00096E5E 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
00096E62 7000                       		moveq	#0,d0
00096E64 3014                       		move.w	(a4),d0			; load voice pointer
00096E66 D08C                       		add.l	a4,d0			; It is a relative pointer
00096E68 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00096E6C 102C 0005                  		move.b	5(a4),d0		; load tempo
00096E70 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
00096E74                            		;tst.b	f_speedup(a6)
00096E74                            		;beq.s	@nospeedshoes
00096E74                            		;move.b	v_speeduptempo(a6),d0
00096E74                            ; loc_72068:
00096E74                            ;@nospeedshoes:
00096E74 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00096E78 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00096E7C 7200                       		moveq	#0,d1
00096E7E 264C                       		movea.l	a4,a3
00096E80 5C4C                       		addq.w	#6,a4			; Point past header
00096E82 7E00                       		moveq	#0,d7
00096E84 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00096E88 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00096E8C 5307                       		subq.b	#1,d7
00096E8E 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00096E92 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
00096E96 7C30                       		moveq	#TrackSz,d6
00096E98 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00096E9C 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00096EA0 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00096EA4                            ; loc_72098:
00096EA4                            @bmg_fmloadloop:
00096EA4 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00096EA8 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00096EAC 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00096EB0 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00096EB4 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00096EB8 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00096EBC 7000                       		moveq	#0,d0
00096EBE 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00096EC0 D08B                       		add.l	a3,d0				; Relative pointer
00096EC2 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00096EC6 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
00096ECA D2C6                       		adda.w	d6,a1
00096ECC 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00096ED0                            		
00096ED0 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00096ED6 6600                       		bne.s	@silencefm6
00096ED8 702B                       		moveq	#$2B,d0		; DAC enable/disable register
00096EDA 7200                       		moveq	#0,d1		; Disable DAC
00096EDC 4EBA 0000                  		jsr	WriteFMI(pc)
00096EE0 6000 0000                  		bra.w	@bgm_fmdone
00096EE4                            ; ===========================================================================
00096EE4                            ; loc_720D8:
00096EE4                            @silencefm6:
00096EE4 7028                       		moveq	#$28,d0		; Key on/off register
00096EE6 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
00096EE8 4EBA 0000                  		jsr	WriteFMI(pc)
00096EEC 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00096EF0 727F                       		moveq	#$7F,d1		; Total silence
00096EF2 4EBA 0000                  		jsr	WriteFMII(pc)
00096EF6 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
00096EFA 727F                       		moveq	#$7F,d1		; Total silence
00096EFC 4EBA 0000                  		jsr	WriteFMII(pc)
00096F00 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00096F04 727F                       		moveq	#$7F,d1		; Total silence
00096F06 4EBA 0000                  		jsr	WriteFMII(pc)
00096F0A 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00096F0E 727F                       		moveq	#$7F,d1		; Total silence
00096F10 4EBA 0000                  		jsr	WriteFMII(pc)
00096F14 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
00096F18 123C 00C0                  		move.b	#$C0,d1		; Stereo
00096F1C 4EBA 0000                  		jsr	WriteFMII(pc)
00096F20                            ; loc_72114:
00096F20                            @bgm_fmdone:
00096F20 7E00                       		moveq	#0,d7
00096F22 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00096F26 6700                       		beq.s	@bgm_psgdone	; branch if zero
00096F28 5307                       		subq.b	#1,d7
00096F2A 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00096F2E 45FA 0000                  		lea	PSGInitBytes(pc),a2
00096F32                            ; loc_72126:
00096F32                            @bgm_psgloadloop:
00096F32 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00096F36 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00096F3A 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00096F3E 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00096F42 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00096F46 7000                       		moveq	#0,d0
00096F48 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00096F4A D08B                       		add.l	a3,d0				; Relative pointer
00096F4C 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00096F50 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00096F54 101C                       		move.b	(a4)+,d0			; load redundant byte
00096F56 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00096F5A D2C6                       		adda.w	d6,a1
00096F5C 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00096F60                            ; loc_72154:
00096F60                            @bgm_psgdone:
00096F60 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00096F64 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
00096F66                            ; loc_7215A:
00096F66                            @sfxstoploop:
00096F66 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00096F68 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00096F6C 7000                       		moveq	#0,d0
00096F6E 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00096F72 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00096F74 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
00096F76 E508                       		lsl.b	#2,d0			; Convert to index
00096F78 6000                       		bra.s	@gotchannelindex
00096F7A                            ; ===========================================================================
00096F7A                            ; loc_7216E:
00096F7A                            @sfxpsgchannel:
00096F7A E608                       		lsr.b	#3,d0		; Convert to index
00096F7C                            ; loc_72170:
00096F7C                            @gotchannelindex:
00096F7C 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00096F80 2070 0000                  		movea.l	(a0,d0.w),a0
00096F84 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00096F88                            ; loc_7217C:
00096F88                            @sfxnext:
00096F88 D2C6                       		adda.w	d6,a1
00096F8A 51CF FFDA                  		dbf	d7,@sfxstoploop
00096F8E                            
00096F8E 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00096F92 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00096F94 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096F9A                            ; loc_7218E:
00096F9A                            @checkspecialpsg:
00096F9A 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00096F9E 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00096FA0 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00096FA6                            ; loc_7219A:
00096FA6                            @sendfmnoteoff:
00096FA6 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00096FAA 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00096FAC                            ; loc_721A0:
00096FAC                            @fmnoteoffloop:
00096FAC 4EBA 0000                  		jsr	FMNoteOff(pc)
00096FB0 DAC6                       		adda.w	d6,a5
00096FB2 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
00096FB6 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00096FB8                            ; loc_721AC:
00096FB8                            @psgnoteoffloop:
00096FB8 4EBA 0000                  		jsr	PSGNoteOff(pc)
00096FBC DAC6                       		adda.w	d6,a5
00096FBE 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00096FC2                            ; loc_721B6:
00096FC2                            @locdblret:
00096FC2 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00096FC4 4E75                       		rts	
00096FC6                            ; ===========================================================================
00096FC6                            ; byte_721BA:
00096FC6 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00096FCE 00                         		even
00096FCE                            ; byte_721C2:
00096FCE 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00096FD2 00                         		even
00096FD2                            ; ===========================================================================
00096FD2                            ; ---------------------------------------------------------------------------
00096FD2                            ; Play Spin Dash sound effect
00096FD2                            ; ---------------------------------------------------------------------------
00096FD2                            Sound_D1toDF:
00096FD2 4A2E 0027                  		tst.b	$27(a6)
00096FD6 6600 0000                  		bne.w	loc_722C6
00096FDA 4A2E 0004                  		tst.b	4(a6)
00096FDE 6600 0000                  		bne.w	loc_722C6
00096FE2 4A2E 0024                  		tst.b	$24(a6)
00096FE6 6600 0000                  		bne.w	loc_722C6
00096FEA 4238 C900                  		clr.b	($FFFFC900).w
00096FEE 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00096FF2 6600                       		bne.s	@cont3	; if not, branch
00096FF4 3F00                       		move.w	d0,-(sp)
00096FF6 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00096FFA 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00096FFE 6600                       		bne.s	@cont1		; if it is, branch
00097000 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00097004                            		
00097004                            @cont1:
00097004 5200                       		addq.b	#1,d0
00097006 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0009700A 6400                       		bcc.s	@cont2		; if it has, branch
0009700C 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00097010                            		
00097010                            @cont2:
00097010 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00097016 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0009701C 301F                       		move.w	(sp)+,d0
0009701E                            		
0009701E                            @cont3:	
0009701E 2079 0009 675E             		movea.l	(Go_SoundIndex).l,a0
00097024 0407 00A0                  		sub.b	#$A0,d7
00097028 6000                       		bra.s	SoundEffects_Common
0009702A                            ; ---------------------------------------------------------------------------
0009702A                            ; Play normal sound effect
0009702A                            ; ---------------------------------------------------------------------------
0009702A                            ; Sound_A0toCF:
0009702A                            Sound_PlaySFX:
0009702A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0009702E 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00097032 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097036 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0009703A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0009703E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00097042 4238 C900                  		clr.b	($FFFFC900).w
00097046 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
0009704A 6600                       		bne.s	Sound_notB5		; if not, branch
0009704C 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00097050 6600                       		bne.s	loc_721EE		; Branch if not
00097052 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00097056                            
00097056                            loc_721EE:
00097056 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
0009705C                            
0009705C                            Sound_notB5:
0009705C 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00097060 6600                       		bne.s	Sound_notA7		; if not, branch
00097062 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
00097066 6600 0000                  		bne.w	locret_722C4			; Return if not
0009706A 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00097070                            		
00097070                            Sound_notA7:
00097070 2079 0009 675E             		movea.l	(Go_SoundIndex).l,a0
00097076 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
0009707A                            
0009707A                            SoundEffects_Common:		
0009707A E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
0009707C 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00097080 224B                       		movea.l	a3,a1
00097082 7200                       		moveq	#0,d1
00097084 3219                       		move.w	(a1)+,d1		; Voice pointer
00097086 D28B                       		add.l	a3,d1			; Relative pointer
00097088 1A19                       		move.b	(a1)+,d5		; Dividing timing	
0009708A                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
0009708A                            		; index entry is above $3F will cause a crash. This is actually the same way that
0009708A                            		; this bug is fixed in Ristar's driver.
0009708A 7E00                       		moveq	#0,d7	
0009708C 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
0009708E 5307                       		subq.b	#1,d7
00097090 7C30                       		moveq	#TrackSz,d6
00097092                            
00097092                            loc_72228:
00097092 7600                       		moveq	#0,d3
00097094 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00097098 1803                       		move.b	d3,d4
0009709A 6B00                       		bmi.s	loc_72244	; Branch if PSG
0009709C 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
0009709E E54B                       		lsl.w	#2,d3
000970A0 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000970A4 2A75 3000                  		movea.l	(a5,d3.w),a5
000970A8 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000970AC 6000                       		bra.s	loc_7226E
000970AE                            ; ===========================================================================
000970AE                            
000970AE                            loc_72244:
000970AE E64B                       		lsr.w	#3,d3
000970B0 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000970B4 2A75 3000                  		movea.l	(a5,d3.w),a5
000970B8 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000970BC 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
000970C0 6600                       		bne.s	loc_7226E	; Branch if not
000970C2 1004                       		move.b	d4,d0
000970C4 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000970C8 13C0 00C0 0011             		move.b	d0,(psg_input).l
000970CE 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000970D2 13C0 00C0 0011             		move.b	d0,(psg_input).l
000970D8                            
000970D8                            loc_7226E:
000970D8 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000970DC 2A75 3000                  		movea.l	(a5,d3.w),a5
000970E0 244D                       		movea.l	a5,a2
000970E2 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000970E4                            
000970E4                            loc_72276:
000970E4 429A                       		clr.l	(a2)+
000970E6 51C8 FFFC                  		dbf	d0,loc_72276
000970EA                            
000970EA 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000970EC 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000970F0 7000                       		moveq	#0,d0
000970F2 3019                       		move.w	(a1)+,d0			; Track data pointer
000970F4 D08B                       		add.l	a3,d0				; Relative pointer
000970F6 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000970FA 3B59 0008                  		move.w	(a1)+,8(a5)
000970FE 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00097102 6700                       		beq.s	@cont		; if not, branch
00097104 3F00                       		move.w	d0,-(sp)
00097106 1038 C902                  		move.b	($FFFFC902).w,d0
0009710A D12D 0008                  		add.b	d0,8(a5)
0009710E 301F                       		move.w	(sp)+,d0
00097110                            		
00097110                            @cont:
00097110 1B7C 0001 000E             		move.b	#1,$E(a5)
00097116 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0009711A 4A04                       		tst.b	d4				; Is this a PSG channel?
0009711C 6B00                       		bmi.s	loc_722A8		; Branch if yes
0009711E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097124 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00097128                            
00097128                            loc_722A8:
00097128 51CF FF68                  		dbf	d7,loc_72228
0009712C                            
0009712C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00097130 6A00                       		bpl.s	loc_722B8				; Branch if not
00097132 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097138                            
00097138                            loc_722B8:
00097138 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0009713C 6A00                       		bpl.s	locret_722C4						; Branch if not
0009713E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097144                            
00097144                            locret_722C4:
00097144 4E75                       		rts	
00097146                            ; ===========================================================================
00097146                            
00097146                            loc_722C6:
00097146 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00097148 4E75                       		rts	
0009714A                            ; ===========================================================================
0009714A                            ; ---------------------------------------------------------------------------
0009714A                            ; RAM addresses for FM and PSG channel variables used by the SFX
0009714A                            ; ---------------------------------------------------------------------------
0009714A                            ; dword_722CC: BGMChannelRAM:
0009714A                            SFX_BGMChannelRAM:
0009714A 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
0009714E 0000 0000                  		dc.l 0
00097152 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00097156 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0009715A 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
0009715E 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
00097162 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
00097166 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
0009716A                            ; dword_722EC: SFXChannelRAM:
0009716A                            SFX_SFXChannelRAM:
0009716A 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
0009716E 0000 0000                  		dc.l 0
00097172 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097176 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
0009717A 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
0009717E 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00097182 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00097186 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
0009718A                            ; ===========================================================================
0009718A                            ; ---------------------------------------------------------------------------
0009718A                            ; Play GHZ waterfall sound
0009718A                            ; ---------------------------------------------------------------------------
0009718A                            ; Sound_D0toDF:
0009718A                            Sound_PlaySpecial:
0009718A 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
0009718E 6600 0000                  		bne.w	@locret			; Return if so
00097192 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00097196 6600 0000                  		bne.w	@locret			; Exit if it is
0009719A 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
0009719E 6600 0000                  		bne.w	@locret			; Exit if it is
000971A2 2079 0009 6756             		movea.l	(Go_SpecSoundIndex).l,a0
000971A8 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000971AC E54F                       		lsl.w	#2,d7
000971AE 2670 7000                  		movea.l	(a0,d7.w),a3
000971B2 224B                       		movea.l	a3,a1
000971B4 7000                       		moveq	#0,d0
000971B6 3019                       		move.w	(a1)+,d0			; Voice pointer
000971B8 D08B                       		add.l	a3,d0				; Relative pointer
000971BA 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
000971BE 1A19                       		move.b	(a1)+,d5			; Dividing timing
000971C0                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
000971C0                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
000971C0 7E00                       		moveq	#0,d7	
000971C2 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
000971C4 5307                       		subq.b	#1,d7
000971C6 7C30                       		moveq	#TrackSz,d6
000971C8                            ; loc_72348:
000971C8                            @sfxloadloop:
000971C8 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000971CC 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000971CE 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000971D4 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000971D8 6000                       		bra.s	@sfxinitpsg
000971DA                            ; ===========================================================================
000971DA                            ; loc_7235A:
000971DA                            @sfxoverridepsg:
000971DA 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000971E0 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000971E4                            ; loc_72364:
000971E4                            @sfxinitpsg:
000971E4 244D                       		movea.l	a5,a2
000971E6 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000971E8                            ; loc_72368:
000971E8                            @clearsfxtrackram:
000971E8 429A                       		clr.l	(a2)+
000971EA 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000971EE                            
000971EE 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000971F0 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000971F4 7000                       		moveq	#0,d0
000971F6 3019                       		move.w	(a1)+,d0			; Track data pointer
000971F8 D08B                       		add.l	a3,d0				; Relative pointer
000971FA 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000971FE 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00097202 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00097208 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0009720C 4A04                       		tst.b	d4				; Is this a PSG channel?
0009720E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00097210 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00097216                            ; loc_72396:
00097216                            @sfxpsginitdone:
00097216 51CF FFB0                  		dbf	d7,@sfxloadloop
0009721A                            
0009721A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0009721E 6A00                       		bpl.s	@doneoverride					; Branch if not
00097220 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097226                            ; loc_723A6:
00097226                            @doneoverride:
00097226 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
0009722A 6A00                       		bpl.s	@locret						; Branch if not
0009722C 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00097232 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00097236 13C4 00C0 0011             		move.b	d4,(psg_input).l
0009723C 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00097240 13C4 00C0 0011             		move.b	d4,(psg_input).l
00097246                            ; locret_723C6:
00097246                            @locret:
00097246 4E75                       		rts	
00097248                            ; End of function PlaySoundID
00097248                            
00097248                            ; ===========================================================================
00097248                            ; ---------------------------------------------------------------------------
00097248                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00097248                            ; ---------------------------------------------------------------------------
00097248                            ; The first block would have been used for overriding the music tracks
00097248                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00097248                            ; The third block would be used to set up the Special SFX
00097248                            ; The second block, however, is for the SFX tracks, which have a higher priority
00097248                            ; and would be checked for if they're currently playing
00097248                            ; If they are, then the third block would be used again, this time to mark
00097248                            ; the new tracks as 'currently playing'
00097248                            
00097248                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00097248                            
00097248                            ; BGMFM4PSG3RAM:
00097248                            ;SpecSFX_BGMChannelRAM:
00097248 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0009724C 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00097250                            ; SFXFM4PSG3RAM:
00097250                            ;SpecSFX_SFXChannelRAM:
00097250 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00097254 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00097258                            ; SpecialSFXFM4PSG3RAM:
00097258                            ;SpecSFX_SpecSFXChannelRAM:
00097258 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0009725C 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00097260                            
00097260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097260                            
00097260                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00097260                            StopSFX:
00097260 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097262 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00097266 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00097268                            ; loc_723EA:
00097268                            @trackloop:
00097268 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
0009726A 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
0009726E 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00097272 7600                       		moveq	#0,d3
00097274 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00097278 6B00                       		bmi.s	@trackpsg			; Branch if PSG
0009727A 4EBA 0000                  		jsr	FMNoteOff(pc)
0009727E 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00097282 6600                       		bne.s	@getfmpointer					; Branch if not
00097284 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00097288 6A00                       		bpl.s	@getfmpointer					; Branch if not
0009728A                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
0009728A                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
0009728A                            		; is playing its sound!
0009728A 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0009728E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00097292 6000                       		bra.s	@gotfmpointer
00097294                            ; ===========================================================================
00097294                            ; loc_72416:
00097294                            @getfmpointer:
00097294 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00097296 E50B                       		lsl.b	#2,d3
00097298 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
0009729C 264D                       		movea.l	a5,a3
0009729E 2A70 3000                  		movea.l	(a0,d3.w),a5
000972A2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000972A6                            ; loc_72428:
000972A6                            @gotfmpointer:
000972A6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000972AA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000972AE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000972B2 4EBA 0000                  		jsr	SetVoice(pc)
000972B6 2A4B                       		movea.l	a3,a5
000972B8 6000                       		bra.s	@nexttrack
000972BA                            ; ===========================================================================
000972BA                            ; loc_7243C:
000972BA                            @trackpsg:
000972BA 4EBA 0000                  		jsr	PSGNoteOff(pc)
000972BE 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
000972C2 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
000972C6 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000972C8 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000972CC 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000972CE E60B                       		lsr.b	#3,d3
000972D0 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
000972D4 2070 3000                  		movea.l	(a0,d3.w),a0
000972D8                            ; loc_7245A:
000972D8                            @gotpsgpointer:
000972D8 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000972DC 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000972E0 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000972E6 6600                       		bne.s	@nexttrack			; Branch if not
000972E8 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000972F0                            ; loc_72472:
000972F0                            @nexttrack:
000972F0 DAFC 0030                  		adda.w	#TrackSz,a5
000972F4 51CF FF72                  		dbf	d7,@trackloop
000972F8                            
000972F8 4E75                       		rts	
000972FA                            ; End of function StopSFX
000972FA                            
000972FA                            
000972FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000972FA                            
000972FA                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000972FA                            StopSpecialSFX:
000972FA 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000972FE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097300 6A00                       		bpl.s	@fadedfm		; Branch if not
00097302 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097306 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0009730A 6600                       		bne.s	@fadedfm		; Branch if not
0009730C 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00097310 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00097314 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097318 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009731C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009731E 6A00                       		bpl.s	@fadedfm		; Branch if not
00097320 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097324 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097328 4EBA 0000                  		jsr	SetVoice(pc)
0009732C                            ; loc_724AE:
0009732C                            @fadedfm:
0009732C 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00097330 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097332 6A00                       		bpl.s	@fadedpsg		; Branch if not
00097334 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097338 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0009733C 6600                       		bne.s	@fadedpsg		; Return if not
0009733E 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00097342 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00097346 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0009734A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0009734E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097350 6A00                       		bpl.s	@fadedpsg		; Return if not
00097352 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00097358 6600                       		bne.s	@fadedpsg			; Return if not
0009735A 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
00097362                            ; locret_724E4:
00097362                            @fadedpsg:
00097362 4E75                       		rts	
00097364                            ; End of function StopSpecialSFX
00097364                            
00097364                            ; ===========================================================================
00097364                            ; ---------------------------------------------------------------------------
00097364                            ; Fade out music
00097364                            ; ---------------------------------------------------------------------------
00097364                            ; Sound_E0:
00097364                            FadeOutMusic:
00097364 4EBA FEFA                  		jsr	StopSFX(pc)
00097368 4EBA FF90                  		jsr	StopSpecialSFX(pc)
0009736C 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
00097372 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00097378 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
0009737C 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00097380 4E75                       		rts	
00097382                            
00097382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097382                            
00097382                            ; sub_72504:
00097382                            DoFadeOut:
00097382 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00097386 6700                       		beq.s	@continuefade		; Branch if yes
00097388 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
0009738C 4E75                       		rts	
0009738E                            ; ===========================================================================
0009738E                            ; loc_72510:
0009738E                            @continuefade:
0009738E 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00097392 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00097396 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
0009739C 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000973A0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000973A2                            ; loc_72524:
000973A2                            @fmloop:
000973A2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000973A4 6A00                       		bpl.s	@nextfm			; Branch if not
000973A6 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000973AA 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
000973AC 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000973B0 6000                       		bra.s	@nextfm
000973B2                            ; ===========================================================================
000973B2                            ; loc_72534:
000973B2                            @sendfmtl:
000973B2 4EBA 0000                  		jsr	SendVoiceTL(pc)
000973B6                            ; loc_72538:
000973B6                            @nextfm:
000973B6 DAFC 0030                  		adda.w	#TrackSz,a5
000973BA 51CF FFE6                  		dbf	d7,@fmloop
000973BE                            
000973BE 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000973C0                            ; loc_72542:
000973C0                            @psgloop:
000973C0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000973C2 6A00                       		bpl.s	@nextpsg		; branch if not
000973C4 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000973C8 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000973CE 6500                       		blo.s	@sendpsgvol		; Branch if not
000973D0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000973D4 6000                       		bra.s	@nextpsg
000973D6                            ; ===========================================================================
000973D6                            ; loc_72558:
000973D6                            @sendpsgvol:
000973D6 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
000973DA 4EBA 0000                  		jsr	SetPSGVolume(pc)
000973DE                            ; loc_72560:
000973DE                            @nextpsg:
000973DE DAFC 0030                  		adda.w	#TrackSz,a5
000973E2 51CF FFDC                  		dbf	d7,@psgloop
000973E6                            
000973E6 4E75                       		rts	
000973E8                            ; End of function DoFadeOut
000973E8                            
000973E8                            
000973E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000973E8                            
000973E8                            ; sub_7256A:
000973E8                            FMSilenceAll:
000973E8 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
000973EA 7028                       		moveq	#$28,d0		; FM key on/off register
000973EC                            ; loc_7256E:
000973EC                            @noteoffloop:
000973EC 1203                       		move.b	d3,d1
000973EE 4EBA 0000                  		jsr	WriteFMI(pc)
000973F2 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
000973F4 4EBA 0000                  		jsr	WriteFMI(pc)
000973F8 51CB FFF2                  		dbf	d3,@noteoffloop
000973FC                            
000973FC 7040                       		moveq	#$40,d0		; Set TL on FM channels...
000973FE 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00097400 7802                       		moveq	#2,d4		; ... for all 3 channels...
00097402                            ; loc_72584:
00097402                            @channelloop:
00097402 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00097404                            ; loc_72586:
00097404                            @channeltlloop:
00097404 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
00097408 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
0009740C 5840                       		addq.w	#4,d0		; Next TL operator
0009740E 51CB FFF4                  		dbf	d3,@channeltlloop
00097412                            
00097412 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00097416 51CC FFEA                  		dbf	d4,@channelloop
0009741A                            
0009741A 4E75                       		rts	
0009741C                            ; End of function FMSilenceAll
0009741C                            
0009741C                            ; ===========================================================================
0009741C                            ; ---------------------------------------------------------------------------
0009741C                            ; Stop music
0009741C                            ; ---------------------------------------------------------------------------
0009741C                            ; Sound_E4: StopSoundAndMusic:
0009741C                            StopAllSound:
0009741C 702B                       		moveq	#$2B,d0		; Enable/disable DAC
0009741E 123C 0080                  		move.b	#$80,d1		; Enable DAC
00097422 4EBA 0000                  		jsr	WriteFMI(pc)
00097426 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00097428 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
0009742A 4EBA 0000                  		jsr	WriteFMI(pc)
0009742E 204E                       		movea.l	a6,a0
00097430                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00097430                            		; Remove the '-$10' to fix this.
00097430 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00097434                            ; loc_725B6:
00097434                            @clearramloop:
00097434 4298                       		clr.l	(a0)+
00097436 51C8 FFFC                  		dbf	d0,@clearramloop
0009743A                            
0009743A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00097440 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00097444 6000 0000                  		bra.w	PSGSilenceAll
00097448                            
00097448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097448                            
00097448                            ; sub_725CA:
00097448                            InitMusicPlayback:
00097448 204E                       		movea.l	a6,a0
0009744A                            		; Save several values
0009744A 1216                       		move.b	v_sndprio(a6),d1
0009744C 142E 0027                  		move.b	f_1up_playing(a6),d2
00097450 162E 002A                  		move.b	f_speedup(a6),d3
00097454 182E 0026                  		move.b	v_fadein_counter(a6),d4
00097458                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00097458 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
0009745C 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00097460                            ; loc_725E4:
00097460                            @clearramloop:
00097460 4298                       		clr.l	(a0)+
00097462 51C8 FFFC                  		dbf	d0,@clearramloop
00097466                            
00097466                            		; Restore the values saved above
00097466 1C81                       		move.b	d1,v_sndprio(a6)
00097468 1D42 0027                  		move.b	d2,f_1up_playing(a6)
0009746C 1D43 002A                  		move.b	d3,f_speedup(a6)
00097470 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
00097474 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00097478 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
0009747E                            		; DANGER! This silences ALL channels, even the ones being used
0009747E                            		; by SFX, and not music! @sendfmnoteoff does this already, and
0009747E                            		; doesn't affect SFX channels, either.
0009747E                            		; This should be replaced with an 'rts'.
0009747E 4EBA FF68                  		jsr	FMSilenceAll(pc)
00097482 6000 0000                  		bra.w	PSGSilenceAll
00097486                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
00097486                            		; don't do a very good job of setting up the music tracks.
00097486                            		; Tracks that aren't defined in a music file's header don't have
00097486                            		; their channels defined, meaning @sendfmnoteoff won't silence
00097486                            		; hardware properly. In combination with removing the above
00097486                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
00097486                            		; notes.
00097486                            		; To fix this, I suggest using this code, instead of an 'rts':
00097486                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
00097486                            		;lea	FMDACInitBytes(pc),a2
00097486                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
00097486                            		;bsr.s	@writeloop
00097486                            		;lea	PSGInitBytes(pc),a2
00097486                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
00097486                            
00097486                            ;@writeloop:
00097486                            		;move.b	(a2)+,(a1)		; Write track's channel byte
00097486                            		;lea	TrackSz(a1),a1		; Next track
00097486                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
00097486                            
00097486                            		;rts
00097486                            	
00097486                            ; End of function InitMusicPlayback
00097486                            
00097486                            
00097486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097486                            
00097486                            ; sub_7260C:
00097486                            TempoWait:
00097486 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
0009748C 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00097490 7030                       		moveq	#TrackSz,d0
00097492 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
00097494                            ; loc_7261A:
00097494                            @tempoloop:
00097494 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
00097496 D0C0                       		adda.w	d0,a0	; Advance to next track
00097498 51C9 FFFA                  		dbf	d1,@tempoloop
0009749C                            
0009749C 4E75                       		rts	
0009749E                            ; End of function TempoWait
0009749E                            
0009749E                            ; ===========================================================================
0009749E                            ; ---------------------------------------------------------------------------
0009749E                            ; Speed	up music
0009749E                            ; ---------------------------------------------------------------------------
0009749E                            ; Sound_E2:
0009749E                            SpeedUpMusic:
0009749E 4A2E 0027                  		tst.b	f_1up_playing(a6)
000974A2 6600                       		bne.s	@speedup_1up
000974A4 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
000974AA 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
000974B0 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
000974B6 4E75                       		rts	
000974B8                            ; ===========================================================================
000974B8                            ; loc_7263E:
000974B8                            @speedup_1up:
000974B8 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
000974BE 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000974C4 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000974CA 4E75                       		rts	
000974CC                            ; ===========================================================================
000974CC                            ; ---------------------------------------------------------------------------
000974CC                            ; Change music back to normal speed
000974CC                            ; ---------------------------------------------------------------------------
000974CC                            ; Sound_E3:
000974CC                            SlowDownMusic:
000974CC 4A2E 0027                  		tst.b	f_1up_playing(a6)
000974D0 6600                       		bne.s	@slowdown_1up
000974D2 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000974D8 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000974DE 422E 002A                  		clr.b	f_speedup(a6)
000974E2 4E75                       		rts	
000974E4                            ; ===========================================================================
000974E4                            ; loc_7266A:
000974E4                            @slowdown_1up:
000974E4 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000974EA 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000974F0 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
000974F4 4E75                       		rts	
000974F6                            
000974F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000974F6                            
000974F6                            ; sub_7267C:
000974F6                            DoFadeIn:
000974F6 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000974FA 6700                       		beq.s	@continuefade		; Branch if yes
000974FC 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00097500 4E75                       		rts	
00097502                            ; ===========================================================================
00097502                            ; loc_72688:
00097502                            @continuefade:
00097502 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00097506 6700                       		beq.s	@fadedone		; Branch if yes
00097508 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
0009750C 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00097512 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00097516 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00097518                            ; loc_7269E:
00097518                            @fmloop:
00097518 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0009751A 6A00                       		bpl.s	@nextfm			; Branch if not
0009751C 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097520 4EBA 0000                  		jsr	SendVoiceTL(pc)
00097524                            ; loc_726AA:
00097524                            @nextfm:
00097524 DAFC 0030                  		adda.w	#TrackSz,a5
00097528 51CF FFEE                  		dbf	d7,@fmloop
0009752C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
0009752E                            ; loc_726B4:
0009752E                            @psgloop:
0009752E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097530 6A00                       		bpl.s	@nextpsg		; Branch if not
00097532 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00097536 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
0009753A 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
0009753E 6500                       		blo.s	@sendpsgvol		; Branch if yes
00097540 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00097542                            ; loc_726C8:
00097542                            @sendpsgvol:
00097542 4EBA 0000                  		jsr	SetPSGVolume(pc)
00097546                            ; loc_726CC:
00097546                            @nextpsg:
00097546 DAFC 0030                  		adda.w	#TrackSz,a5
0009754A 51CF FFE2                  		dbf	d7,@psgloop
0009754E 4E75                       		rts	
00097550                            ; ===========================================================================
00097550                            ; loc_726D6:
00097550                            @fadedone:
00097550 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00097556 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0009755A 4E75                       		rts	
0009755C                            ; End of function DoFadeIn
0009755C                            
0009755C                            ; ===========================================================================
0009755C                            ; loc_726E2:
0009755C                            FMNoteOn:
0009755C 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00097560 6600                       		bne.s	@locret		; Return if so
00097562 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00097566 6600                       		bne.s	@locret		; Return if so
00097568 7028                       		moveq	#$28,d0		; Note on/off register
0009756A 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
0009756E 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
00097572 6000 0000                  		bra.w	WriteFMI
00097576                            ; ===========================================================================
00097576                            ; locret_726FC:
00097576                            @locret:
00097576 4E75                       		rts	
00097578                            
00097578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097578                            
00097578                            ; sub_726FE:
00097578                            FMNoteOff:
00097578 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
0009757C 6600                       		bne.s	locret_72714	; Return if yes
0009757E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097582 6600                       		bne.s	locret_72714	; Return if yes
00097584                            ; loc_7270A:
00097584                            SendFMNoteOff:
00097584 7028                       		moveq	#$28,d0		; Note on/off register
00097586 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
0009758A 6000 0000                  		bra.w	WriteFMI
0009758E                            ; ===========================================================================
0009758E                            
0009758E                            locret_72714:
0009758E 4E75                       		rts	
00097590                            ; End of function FMNoteOff
00097590                            
00097590                            ; ===========================================================================
00097590                            ; loc_72716:
00097590                            WriteFMIorIIMain:
00097590 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
00097594 6600                       		bne.s	@locret		; Return if yes
00097596 6000 0000                  		bra.w	WriteFMIorII
0009759A                            ; ===========================================================================
0009759A                            ; locret_72720:
0009759A                            @locret:
0009759A 4E75                       		rts	
0009759C                            
0009759C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009759C                            
0009759C                            ; sub_72722:
0009759C                            WriteFMIorII:
0009759C 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
000975A2 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
000975A4 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
000975A8                            ; End of function WriteFMIorII
000975A8                            
000975A8                            
000975A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000975A8                            
000975A8                            ; The reason I think this is an *early* SMPS 68k Type 1b
000975A8                            ; is because this subroutine is the one from Type 1a:
000975A8                            ; other Type 1b drivers have a newer, optimised version.
000975A8                            ; The driver itself is Type 1b, with this odd exception.
000975A8                            
000975A8                            ; sub_7272E:
000975A8                            WriteFMI:
000975A8 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000975AE 0802 0007                  		btst	#7,d2		; Is FM busy?
000975B2 66F4                       		bne.s	WriteFMI	; Loop if so
000975B4 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
000975BA 4E71                       		nop	
000975BC 4E71                       		nop	
000975BE 4E71                       		nop	
000975C0                            ; loc_72746:
000975C0                            @waitloop:
000975C0 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000975C6 0802 0007                  		btst	#7,d2		; Is FM busy?
000975CA 66F4                       		bne.s	@waitloop	; Loop if so
000975CC                            
000975CC 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000975D2 4E75                       		rts	
000975D4                            ; End of function WriteFMI
000975D4                            
000975D4                            ; ===========================================================================
000975D4                            ; loc_7275A:
000975D4                            WriteFMIIPart:
000975D4 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000975D8 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000975DC D002                       		add.b	d2,d0			; Add in to destination register
000975DE                            
000975DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000975DE                            
000975DE                            ; sub_72764:
000975DE                            WriteFMII:
000975DE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000975E4 0802 0007                  		btst	#7,d2		; Is FM busy?
000975E8 66F4                       		bne.s	WriteFMII	; Loop if so
000975EA 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000975F0 4E71                       		nop	
000975F2 4E71                       		nop	
000975F4 4E71                       		nop	
000975F6                            ; loc_7277C:
000975F6                            @waitloop:
000975F6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000975FC 0802 0007                  		btst	#7,d2		; Is FM busy?
00097600 66F4                       		bne.s	@waitloop	; Loop if so
00097602                            
00097602 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00097608 4E75                       		rts	
0009760A                            ; End of function WriteFMII
0009760A                            
0009760A                            ; ===========================================================================
0009760A                            ; ---------------------------------------------------------------------------
0009760A                            ; FM Note Values: b-0 to a#8
0009760A                            ; ---------------------------------------------------------------------------
0009760A                            ; word_72790: FM_Notes:
0009760A                            FMFrequencies:
0009760A 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00097622 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
0009763A 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00097652 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
0009766A 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00097682 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
0009769A 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
000976B2 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000976CA                            
000976CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000976CA                            
000976CA                            ; sub_72850:
000976CA                            PSGUpdateTrack:
000976CA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000976CE 6600                       		bne.s	@notegoing
000976D0 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000976D4 4EBA 0000                  		jsr	PSGDoNext(pc)
000976D8 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000976DC 6000 0000                  		bra.w	PSGDoVolFX
000976E0                            ; ===========================================================================
000976E0                            ; loc_72866:
000976E0                            @notegoing:
000976E0 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000976E4 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000976E8 4EBA F4EA                  		jsr	DoModulation(pc)
000976EC 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000976F0 4E75                       		rts
000976F2                            ; End of function PSGUpdateTrack
000976F2                            
000976F2                            
000976F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000976F2                            
000976F2                            ; sub_72878:
000976F2                            PSGDoNext:
000976F2 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000976F6 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000976FA                            ; loc_72880:
000976FA                            @noteloop:
000976FA 7A00                       		moveq	#0,d5
000976FC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000976FE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00097702 6500                       		blo.s	@gotnote	; Branch if not
00097704 4EBA 0000                  		jsr	CoordFlag(pc)
00097708 60F0                       		bra.s	@noteloop
0009770A                            ; ===========================================================================
0009770A                            ; loc_72890:
0009770A                            @gotnote:
0009770A 4A05                       		tst.b	d5		; Is it a note?
0009770C 6A00                       		bpl.s	@gotduration	; Branch if not
0009770E 4EBA 0000                  		jsr	PSGSetFreq(pc)
00097712 1A1C                       		move.b	(a4)+,d5	; Get another byte
00097714 4A05                       		tst.b	d5		; Is it a duration?
00097716 6A00                       		bpl.s	@gotduration	; Branch if yes
00097718 534C                       		subq.w	#1,a4		; Put byte back
0009771A 6000 F452                  		bra.w	FinishTrackUpdate
0009771E                            ; ===========================================================================
0009771E                            ; loc_728A4:
0009771E                            @gotduration:
0009771E 4EBA F42E                  		jsr	SetDuration(pc)
00097722 6000 F44A                  		bra.w	FinishTrackUpdate
00097726                            ; End of function PSGDoNext
00097726                            
00097726                            
00097726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097726                            
00097726                            ; sub_728AC:
00097726                            PSGSetFreq:
00097726 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
0009772A 6500                       		bcs.s	@restpsg	; If $80, put track at rest
0009772C DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00097730 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00097734 E34D                       		lsl.w	#1,d5
00097736 41FA 0000                  		lea	PSGFrequencies(pc),a0
0009773A 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00097740 6000 F42C                  		bra.w	FinishTrackUpdate
00097744                            ; ===========================================================================
00097744                            ; loc_728CA:
00097744                            @restpsg:
00097744 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097748 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
0009774E 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00097752 6000 0000                  		bra.w	PSGNoteOff
00097756                            ; End of function PSGSetFreq
00097756                            
00097756                            
00097756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097756                            
00097756                            ; sub_728DC:
00097756                            PSGDoNoteOn:
00097756 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
0009775A 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
0009775C                            ; End of function PSGDoNoteOn
0009775C                            
0009775C                            
0009775C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009775C                            
0009775C                            ; sub_728E2:
0009775C                            PSGUpdateFreq:
0009775C 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00097760 4880                       		ext.w	d0
00097762 DC40                       		add.w	d0,d6		; Add to frequency
00097764 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00097768 6600                       		bne.s	@locret		; Return if yes
0009776A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0009776E 6600                       		bne.s	@locret		; Return if yes
00097770 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00097774 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00097778 6600                       		bne.s	@notnoise	; Branch if not
0009777A 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
0009777E                            ; loc_72904:
0009777E                            @notnoise:
0009777E 3206                       		move.w	d6,d1
00097780 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00097784 8001                       		or.b	d1,d0		; Latch tone data to channel
00097786 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00097788 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
0009778C 13C0 00C0 0011             		move.b	d0,(psg_input).l
00097792 13C6 00C0 0011             		move.b	d6,(psg_input).l
00097798                            ; locret_7291E:
00097798                            @locret:
00097798 4E75                       		rts	
0009779A                            ; End of function PSGUpdateFreq
0009779A                            
0009779A                            ; ===========================================================================
0009779A                            ; loc_72920:
0009779A                            PSGSetRest:
0009779A 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
0009779E 4E75                       		rts	
000977A0                            
000977A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000977A0                            
000977A0                            ; sub_72926:
000977A0                            PSGUpdateVolFX:
000977A0 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
000977A4 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
000977A8                            ; loc_7292E:
000977A8                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
000977A8 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
000977AC 7000                       		moveq	#0,d0
000977AE 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
000977B2 6700                       		beq.s	SetPSGVolume
000977B4 2079 0009 6766             		movea.l	(Go_PSGIndex).l,a0
000977BA 5340                       		subq.w	#1,d0
000977BC E548                       		lsl.w	#2,d0
000977BE 2070 0000                  		movea.l	(a0,d0.w),a0
000977C2 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
000977C6 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000977CA 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000977CE 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000977D2 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000977D4 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000977D8 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000977DA                            ; loc_72960:
000977DA                            @gotflutter:
000977DA DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000977DC 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000977E0 6500                       		blo.s	SetPSGVolume	; Branch if not
000977E2 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000977E4                            ; End of function PSGUpdateVolFX
000977E4                            
000977E4                            
000977E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000977E4                            
000977E4                            ; sub_7296A:
000977E4                            SetPSGVolume:
000977E4 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000977E8 6600                       		bne.s	locret_7298A	; Return if so
000977EA 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000977EE 6600                       		bne.s	locret_7298A	; Return if so
000977F0 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000977F4 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000977F6                            ; loc_7297C:
000977F6                            PSGSendVolume:
000977F6 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000977FA 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000977FE 13C6 00C0 0011             		move.b	d6,(psg_input).l
00097804                            
00097804                            locret_7298A:
00097804 4E75                       		rts	
00097806                            ; ===========================================================================
00097806                            ; loc_7298C: PSGCheckNoteFill:
00097806                            PSGCheckNoteTimeout:
00097806 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
0009780A 67EA                       		beq.s	PSGSendVolume			; Branch if not
0009780C 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00097810 66E4                       		bne.s	PSGSendVolume			; Branch if not
00097812 4E75                       		rts	
00097814                            ; End of function SetPSGVolume
00097814                            
00097814                            ; ===========================================================================
00097814                            ; loc_7299A: FlutterDone:
00097814                            VolEnvHold:
00097814 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00097818 4E75                       		rts	
0009781A                            
0009781A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009781A                            
0009781A                            ; sub_729A0:
0009781A                            PSGNoteOff:
0009781A 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0009781E 6600                       		bne.s	locret_729B4	; Return if so
00097820                            ; loc_729A6:
00097820                            SendPSGNoteOff:
00097820 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00097824 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00097828 13C0 00C0 0011             		move.b	d0,(psg_input).l
0009782E                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
0009782E                            		; risk of music accidentally playing noise because it can't detect if
0009782E                            		; the PSG4/noise channel needs muting on track initialisation.
0009782E                            		; S&K's driver fixes it by doing this:
0009782E 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00097832 6600                       		bne.s	locret_729B4
00097834 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
0009783C                            
0009783C                            locret_729B4:
0009783C 4E75                       		rts	
0009783E                            ; End of function PSGNoteOff
0009783E                            
0009783E                            
0009783E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0009783E                            
0009783E                            ; sub_729B6:
0009783E                            PSGSilenceAll:
0009783E 41F9 00C0 0011             		lea	(psg_input).l,a0
00097844 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00097848 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
0009784C 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00097850 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00097854 4E75                       		rts	
00097856                            ; End of function PSGSilenceAll
00097856                            
00097856                            ; ===========================================================================
00097856                            ; word_729CE:
00097856                            PSGFrequencies:
00097856 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00097866 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00097876 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00097886 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00097896 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
000978A6 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000978B6 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
000978C6 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
000978D6 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
000978E2                            
000978E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000978E2                            
000978E2                            ; sub_72A5A:
000978E2                            CoordFlag:
000978E2 0445 00E0                  		subi.w	#$E0,d5
000978E6 E54D                       		lsl.w	#2,d5
000978E8 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
000978EC                            ; End of function CoordFlag
000978EC                            
000978EC                            ; ===========================================================================
000978EC                            ; loc_72A64:
000978EC                            coordflagLookup:
000978EC 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
000978F0                            ; ===========================================================================
000978F0 6000 0000                  		bra.w	cfDetune		; $E1
000978F4                            ; ===========================================================================
000978F4 6000 0000                  		bra.w	cfSetCommunication	; $E2
000978F8                            ; ===========================================================================
000978F8 6000 0000                  		bra.w	cfJumpReturn		; $E3
000978FC                            ; ===========================================================================
000978FC 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00097900                            ; ===========================================================================
00097900 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00097904                            ; ===========================================================================
00097904 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00097908                            ; ===========================================================================
00097908 6000 0000                  		bra.w	cfHoldNote		; $E7
0009790C                            ; ===========================================================================
0009790C 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00097910                            ; ===========================================================================
00097910 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00097914                            ; ===========================================================================
00097914 6000 0000                  		bra.w	cfSetTempo		; $EA
00097918                            ; ===========================================================================
00097918 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
0009791C                            ; ===========================================================================
0009791C 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00097920                            ; ===========================================================================
00097920 6000 0000                  		bra.w	cfClearPush		; $ED
00097924                            ; ===========================================================================
00097924 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00097928                            ; ===========================================================================
00097928 6000 0000                  		bra.w	cfSetVoice		; $EF
0009792C                            ; ===========================================================================
0009792C 6000 0000                  		bra.w	cfModulation		; $F0
00097930                            ; ===========================================================================
00097930 6000 0000                  		bra.w	cfEnableModulation	; $F1
00097934                            ; ===========================================================================
00097934 6000 0000                  		bra.w	cfStopTrack		; $F2
00097938                            ; ===========================================================================
00097938 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
0009793C                            ; ===========================================================================
0009793C 6000 0000                  		bra.w	cfDisableModulation	; $F4
00097940                            ; ===========================================================================
00097940 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00097944                            ; ===========================================================================
00097944 6000 0000                  		bra.w	cfJumpTo		; $F6
00097948                            ; ===========================================================================
00097948 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
0009794C                            ; ===========================================================================
0009794C 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00097950                            ; ===========================================================================
00097950 6000 0000                  		bra.w	cfOpF9			; $F9
00097954                            ; ===========================================================================
00097954                            ; loc_72ACC:
00097954                            cfPanningAMSFMS:
00097954 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00097956 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0009795A 6B00                       		bmi.s	locret_72AEA		; Return if yes
0009795C 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00097960 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00097964 8200                       		or.b	d0,d1			; Mask in new value
00097966 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
0009796A 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
0009796E 6000 FC20                  		bra.w	WriteFMIorIIMain
00097972                            ; ===========================================================================
00097972                            
00097972                            locret_72AEA:
00097972 4E75                       		rts	
00097974                            ; ===========================================================================
00097974                            ; loc_72AEC: cfAlterNotes:
00097974                            cfDetune:
00097974 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00097978 4E75                       		rts	
0009797A                            ; ===========================================================================
0009797A                            ; loc_72AF2: cfUnknown1:
0009797A                            cfSetCommunication:
0009797A 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
0009797E 4E75                       		rts	
00097980                            ; ===========================================================================
00097980                            ; loc_72AF8:
00097980                            cfJumpReturn:
00097980 7000                       		moveq	#0,d0
00097982 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00097986 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
0009798A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00097992 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00097994 5800                       		addq.b	#4,d0			; Actually 'pop' value
00097996 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
0009799A 4E75                       		rts	
0009799C                            ; ===========================================================================
0009799C                            ; loc_72B14:
0009799C                            cfFadeInToPrevious:
0009799C 204E                       		movea.l	a6,a0
0009799E 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
000979A2 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
000979A6                            ; loc_72B1E:
000979A6                            @restoreramloop:
000979A6 20D9                       		move.l	(a1)+,(a0)+
000979A8 51C8 FFFC                  		dbf	d0,@restoreramloop
000979AC                            
000979AC 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
000979B2 264D                       		movea.l	a5,a3
000979B4 1C3C 0028                  		move.b	#$28,d6
000979B8 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
000979BC 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000979BE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000979C2                            ; loc_72B3A:
000979C2                            @fmloop:
000979C2 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000979C6 6700                       		beq.s	@nextfm		; Branch if not
000979C8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000979CC DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
000979D0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000979D4 6600                       		bne.s	@nextfm		; Branch if yes
000979D6 7000                       		moveq	#0,d0
000979D8 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
000979DC 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000979E0 4EBA 0000                  		jsr	SetVoice(pc)
000979E4                            ; loc_72B5C:
000979E4                            @nextfm:
000979E4 DAFC 0030                  		adda.w	#TrackSz,a5
000979E8 51CF FFD8                  		dbf	d7,@fmloop
000979EC                            
000979EC 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
000979EE                            ; loc_72B66:
000979EE                            @psgloop:
000979EE 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
000979F2 6700                       		beq.s	@nextpsg	; Branch if not
000979F4 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
000979F8 4EBA FE20                  		jsr	PSGNoteOff(pc)
000979FC DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00097A00                            ; loc_72B78:
00097A00                            @nextpsg:
00097A00 DAFC 0030                  		adda.w	#TrackSz,a5
00097A04 51CF FFE8                  		dbf	d7,@psgloop
00097A08                            		
00097A08 2A4B                       		movea.l	a3,a5
00097A0A 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00097A10 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00097A16 422E 0027                  		clr.b	f_1up_playing(a6)
00097A1A 33FC 0000 00A1 1100        		startZ80
00097A22 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00097A24 4E75                       		rts	
00097A26                            ; ===========================================================================
00097A26                            ; loc_72B9E:
00097A26                            cfSetTempoDivider:
00097A26 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00097A2A 4E75                       		rts	
00097A2C                            ; ===========================================================================
00097A2C                            ; loc_72BA4: cfSetVolume:
00097A2C                            cfChangeFMVolume:
00097A2C 101C                       		move.b	(a4)+,d0		; Get parameter
00097A2E D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00097A32 6000 0000                  		bra.w	SendVoiceTL
00097A36                            ; ===========================================================================
00097A36                            ; loc_72BAE: cfPreventAttack:
00097A36                            cfHoldNote:
00097A36 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00097A3A 4E75                       		rts	
00097A3C                            ; ===========================================================================
00097A3C                            ; loc_72BB4: cfNoteFill
00097A3C                            cfNoteTimeout:
00097A3C 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00097A40 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00097A44 4E75                       		rts	
00097A46                            ; ===========================================================================
00097A46                            ; loc_72BBE: cfAddKey:
00097A46                            cfChangeTransposition:
00097A46 101C                       		move.b	(a4)+,d0		; Get parameter
00097A48 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00097A4C 4E75                       		rts	
00097A4E                            ; ===========================================================================
00097A4E                            ; loc_72BC6:
00097A4E                            cfSetTempo:
00097A4E 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00097A52 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00097A56 4E75                       		rts	
00097A58                            ; ===========================================================================
00097A58                            ; loc_72BD0: cfSetTempoMod:
00097A58                            cfSetTempoDividerAll:
00097A58 41EE 0040                  		lea	v_music_track_ram(a6),a0
00097A5C 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00097A5E 7230                       		moveq	#TrackSz,d1
00097A60 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00097A62                            ; loc_72BDA:
00097A62                            @trackloop:
00097A62 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00097A66 D0C1                       		adda.w	d1,a0
00097A68 51CA FFF8                  		dbf	d2,@trackloop
00097A6C                            
00097A6C 4E75                       		rts	
00097A6E                            ; ===========================================================================
00097A6E                            ; loc_72BE6: cfChangeVolume:
00097A6E                            cfChangePSGVolume:
00097A6E 101C                       		move.b	(a4)+,d0		; Get volume change
00097A70 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00097A74 4E75                       		rts	
00097A76                            ; ===========================================================================
00097A76                            ; loc_72BEE:
00097A76                            cfClearPush:
00097A76 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00097A7A 4E75                       		rts	
00097A7C                            ; ===========================================================================
00097A7C                            ; loc_72BF4:
00097A7C                            cfStopSpecialFM4:
00097A7C 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00097A80 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00097A84 4EBA FAF2                  		jsr	FMNoteOff(pc)
00097A88 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00097A8C 6B00                       		bmi.s	@locexit					; Branch if yes
00097A8E 264D                       		movea.l	a5,a3
00097A90 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00097A94 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097A98 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00097A9C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097AA0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097AA4 4EBA 0000                  		jsr	SetVoice(pc)
00097AA8 2A4B                       		movea.l	a3,a5
00097AAA                            ; loc_72C22:
00097AAA                            @locexit:
00097AAA 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00097AAC 4E75                       		rts	
00097AAE                            ; ===========================================================================
00097AAE                            ; loc_72C26:
00097AAE                            cfSetVoice:
00097AAE 7000                       		moveq	#0,d0
00097AB0 101C                       		move.b	(a4)+,d0		; Get new voice
00097AB2 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00097AB6 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00097ABA 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00097ABE 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00097AC2 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00097AC6 6700                       		beq.s	SetVoice		; If yes, branch
00097AC8 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00097ACC 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00097AD0 6B00                       		bmi.s	SetVoice		; If yes, branch
00097AD2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00097AD6                            
00097AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097AD6                            
00097AD6                            ; sub_72C4E:
00097AD6                            SetVoice:
00097AD6 5340                       		subq.w	#1,d0
00097AD8 6B00                       		bmi.s	@havevoiceptr
00097ADA 323C 0019                  		move.w	#25,d1
00097ADE                            ; loc_72C56:
00097ADE                            @voicemultiply:
00097ADE D2C1                       		adda.w	d1,a1
00097AE0 51C8 FFFC                  		dbf	d0,@voicemultiply
00097AE4                            ; loc_72C5C:
00097AE4                            @havevoiceptr:
00097AE4 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00097AE6 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00097AEA 1801                       		move.b	d1,d4
00097AEC 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00097AF0 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00097AF4 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00097AF8 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00097AFA                            ; loc_72C72:
00097AFA                            @sendvoiceloop:
00097AFA 101A                       		move.b	(a2)+,d0
00097AFC 1219                       		move.b	(a1)+,d1
00097AFE 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00097B02 51CB FFF6                  		dbf	d3,@sendvoiceloop
00097B06                            
00097B06 7A03                       		moveq	#3,d5
00097B08 0244 0007                  		andi.w	#7,d4			; Get algorithm
00097B0C 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00097B10 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00097B14                            ; loc_72C8C:
00097B14                            @sendtlloop:
00097B14 101A                       		move.b	(a2)+,d0
00097B16 1219                       		move.b	(a1)+,d1
00097B18 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00097B1A 6400                       		bcc.s	@sendtl		; Branch if not
00097B1C D203                       		add.b	d3,d1		; Include additional attenuation
00097B1E                            ; loc_72C96:
00097B1E                            @sendtl:
00097B1E 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00097B22 51CD FFF0                  		dbf	d5,@sendtlloop
00097B26                            		
00097B26 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00097B2A 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00097B2E 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00097B32                            
00097B32                            locret_72CAA:
00097B32 4E75                       		rts	
00097B34                            ; End of function SetVoice
00097B34                            
00097B34                            ; ===========================================================================
00097B34                            ; byte_72CAC:
00097B34 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00097B3C                            
00097B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00097B3C                            
00097B3C                            ; sub_72CB4:
00097B3C                            SendVoiceTL:
00097B3C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00097B40 6600                       		bne.s	@locret		; Return if so
00097B42 7000                       		moveq	#0,d0
00097B44 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097B48 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00097B4C 4A2E 000E                  		tst.b	f_voice_selector(a6)
00097B50 6700                       		beq.s	@gotvoiceptr
00097B52                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00097B52                            		; of a6!
00097B52 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00097B56 4A2E 000E                  		tst.b	f_voice_selector(a6)
00097B5A 6B00                       		bmi.s	@gotvoiceptr
00097B5C 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00097B60                            ; loc_72CD8:
00097B60                            @gotvoiceptr:
00097B60 5340                       		subq.w	#1,d0
00097B62 6B00                       		bmi.s	@gotvoice
00097B64 323C 0019                  		move.w	#25,d1
00097B68                            ; loc_72CE0:
00097B68                            @voicemultiply:
00097B68 D2C1                       		adda.w	d1,a1
00097B6A 51C8 FFFC                  		dbf	d0,@voicemultiply
00097B6E                            ; loc_72CE6:
00097B6E                            @gotvoice:
00097B6E D2FC 0015                  		adda.w	#21,a1				; Want TL
00097B72 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00097B76 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00097B7A 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00097B7E 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00097B82 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00097B86 6B00                       		bmi.s	@locret				; If negative, stop
00097B88 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00097B8A                            ; loc_72D02:
00097B8A                            @sendtlloop:
00097B8A 101A                       		move.b	(a2)+,d0
00097B8C 1219                       		move.b	(a1)+,d1
00097B8E E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00097B90 6400                       		bcc.s	@senttl		; Branch if not
00097B92 D203                       		add.b	d3,d1		; Include additional attenuation
00097B94 6500                       		bcs.s	@senttl		; Branch on overflow
00097B96 4EBA FA04                  		jsr	WriteFMIorII(pc)
00097B9A                            ; loc_72D12:
00097B9A                            @senttl:
00097B9A 51CD FFEE                  		dbf	d5,@sendtlloop
00097B9E                            ; locret_72D16:
00097B9E                            @locret:
00097B9E 4E75                       		rts	
00097BA0                            ; End of function SendVoiceTL
00097BA0                            
00097BA0                            ; ===========================================================================
00097BA0                            ; byte_72D18:
00097BA0                            FMInstrumentOperatorTable:
00097BA0 30                         		dc.b  $30		; Detune/multiple operator 1
00097BA1 38                         		dc.b  $38		; Detune/multiple operator 3
00097BA2 34                         		dc.b  $34		; Detune/multiple operator 2
00097BA3 3C                         		dc.b  $3C		; Detune/multiple operator 4
00097BA4 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00097BA5 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00097BA6 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00097BA7 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00097BA8 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00097BA9 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00097BAA 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00097BAB 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00097BAC 70                         		dc.b  $70		; Secondary decay rate operator 1
00097BAD 78                         		dc.b  $78		; Secondary decay rate operator 3
00097BAE 74                         		dc.b  $74		; Secondary decay rate operator 2
00097BAF 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00097BB0 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00097BB1 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00097BB2 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00097BB3 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00097BB4                            FMInstrumentOperatorTable_End
00097BB4                            ; byte_72D2C:
00097BB4                            FMInstrumentTLTable:
00097BB4 40                         		dc.b  $40		; Total level operator 1
00097BB5 48                         		dc.b  $48		; Total level operator 3
00097BB6 44                         		dc.b  $44		; Total level operator 2
00097BB7 4C                         		dc.b  $4C		; Total level operator 4
00097BB8                            FMInstrumentTLTable_End
00097BB8                            ; ===========================================================================
00097BB8                            ; loc_72D30:
00097BB8                            cfModulation:
00097BB8 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00097BBC 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00097BC0 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00097BC4 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00097BC8 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00097BCC 101C                       		move.b	(a4)+,d0			; Modulation steps...
00097BCE E208                       		lsr.b	#1,d0				; ... divided by 2...
00097BD0 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00097BD4 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00097BD8 4E75                       		rts	
00097BDA                            ; ===========================================================================
00097BDA                            ; loc_72D52:
00097BDA                            cfEnableModulation:
00097BDA 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00097BDE 4E75                       		rts	
00097BE0                            ; ===========================================================================
00097BE0                            ; loc_72D58:
00097BE0                            cfStopTrack:
00097BE0 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00097BE4 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00097BE8 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00097BEC 6B00                       		bmi.s	@stoppsg		; Branch if yes
00097BEE 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00097BF2 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00097BF6 4EBA F980                  		jsr	FMNoteOff(pc)
00097BFA 6000                       		bra.s	@stoppedchannel
00097BFC                            ; ===========================================================================
00097BFC                            ; loc_72D74:
00097BFC                            @stoppsg:
00097BFC 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00097C00                            ; loc_72D78:
00097C00                            @stoppedchannel:
00097C00 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00097C04 6A00 0000                  		bpl.w	@locexit		; Exit if not
00097C08 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00097C0A 7000                       		moveq	#0,d0
00097C0C 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00097C10 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00097C12 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00097C16 264D                       		movea.l	a5,a3
00097C18 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00097C1C 6600                       		bne.s	@getpointer		; Branch if not
00097C1E 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00097C22 6A00                       		bpl.s	@getpointer		; Branch if not
00097C24 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00097C28 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00097C2C 6000                       		bra.s	@gotpointer
00097C2E                            ; ===========================================================================
00097C2E                            ; loc_72DA8:
00097C2E                            @getpointer:
00097C2E 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00097C30 E508                       		lsl.b	#2,d0
00097C32 2A70 0000                  		movea.l	(a0,d0.w),a5
00097C36 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00097C38 6A00                       		bpl.s	@novoiceupd		; Branch if not
00097C3A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00097C3E                            ; loc_72DB8:
00097C3E                            @gotpointer:
00097C3E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00097C42 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00097C46 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00097C4A 4EBA FE8A                  		jsr	SetVoice(pc)
00097C4E                            ; loc_72DC8:
00097C4E                            @novoiceupd:
00097C4E 2A4B                       		movea.l	a3,a5
00097C50 6000                       		bra.s	@locexit
00097C52                            ; ===========================================================================
00097C52                            ; loc_72DCC:
00097C52                            @getpsgptr:
00097C52 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00097C56 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00097C58 6A00                       		bpl.s	@getchannelptr	; Branch if not
00097C5A 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00097C5E 6700                       		beq.s	@gotchannelptr	; Branch if yes
00097C60 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00097C64 6700                       		beq.s	@gotchannelptr	; Branch if yes
00097C66                            ; loc_72DE0:
00097C66                            @getchannelptr:
00097C66 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00097C6A E608                       		lsr.b	#3,d0
00097C6C 2070 0000                  		movea.l	(a0,d0.w),a0
00097C70                            ; loc_72DEA:
00097C70                            @gotchannelptr:
00097C70 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00097C74 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00097C78 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00097C7E 6600                       		bne.s	@locexit			; Branch if not
00097C80 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00097C88                            ; loc_72E02:
00097C88                            @locexit:
00097C88 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00097C8A 4E75                       		rts	
00097C8C                            ; ===========================================================================
00097C8C                            ; loc_72E06:
00097C8C                            cfSetPSGNoise:
00097C8C 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00097C92 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00097C96 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00097C9A 6600                       		bne.s	@locret				; Return if yes
00097C9C 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00097CA4                            ; locret_72E1E:
00097CA4                            @locret:
00097CA4 4E75                       		rts	
00097CA6                            ; ===========================================================================
00097CA6                            ; loc_72E20:
00097CA6                            cfDisableModulation:
00097CA6 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00097CAA 4E75                       		rts	
00097CAC                            ; ===========================================================================
00097CAC                            ; loc_72E26:
00097CAC                            cfSetPSGTone:
00097CAC 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00097CB0 4E75                       		rts	
00097CB2                            ; ===========================================================================
00097CB2                            ; loc_72E2C:
00097CB2                            cfJumpTo:
00097CB2 101C                       		move.b	(a4)+,d0	; High byte of offset
00097CB4 E148                       		lsl.w	#8,d0		; Shift it into place
00097CB6 101C                       		move.b	(a4)+,d0	; Low byte of offset
00097CB8 D8C0                       		adda.w	d0,a4		; Add to current position
00097CBA 534C                       		subq.w	#1,a4		; Put back one byte
00097CBC 4E75                       		rts	
00097CBE                            ; ===========================================================================
00097CBE                            ; loc_72E38:
00097CBE                            cfRepeatAtPos:
00097CBE 7000                       		moveq	#0,d0
00097CC0 101C                       		move.b	(a4)+,d0			; Loop index
00097CC2 121C                       		move.b	(a4)+,d1			; Repeat count
00097CC4 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00097CC8 6600                       		bne.s	@loopexists			; Branch if yes
00097CCA 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00097CCE                            ; loc_72E48:
00097CCE                            @loopexists:
00097CCE 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00097CD2 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00097CD4 544C                       		addq.w	#2,a4				; Skip target address
00097CD6 4E75                       		rts	
00097CD8                            ; ===========================================================================
00097CD8                            ; loc_72E52:
00097CD8                            cfJumpToGosub:
00097CD8 7000                       		moveq	#0,d0
00097CDA 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00097CDE 5900                       		subq.b	#4,d0				; Add space for another target
00097CE0 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00097CE4 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00097CE8 60C8                       		bra.s	cfJumpTo
00097CEA                            ; ===========================================================================
00097CEA                            ; loc_72E64:
00097CEA                            cfOpF9:
00097CEA 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00097CEE 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00097CF2 4EBA F8B4                  		jsr	WriteFMI(pc)
00097CF6 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00097CFA 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00097CFE 6000 F8A8                  		bra.w	WriteFMI
00097D02                            ; ===========================================================================
00097D02                            
00097D02                            Kos_Z80:
00097D02                            		incbin	"sound\z80.bin", 0, $15
00097D17 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00097D18                            		incbin	"sound\z80.bin", $16, 6
00097D1E 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00097D1F                            		incbin	"sound\z80.bin", $1D, $93
00097DB2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00097DB4                            		incbin	"sound\z80.bin", $B2, 1
00097DB5 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00097DB7                            		incbin	"sound\z80.bin", $B5, $16AB
00099458                            		even
00099458                            
00099458                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
0009A77C 00                         		even
0009A77C                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0009C004                            		even
0009C004                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000A3984 00                         		even
000A3984                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000A5198 00                         		even
000A5198                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
000A5F3E                            		even
000A5F3E                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000A72F6                            		even
000A72F6                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000A7BEE 00                         		even
000A7BEE                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
000A7BEE                            extralifejingle_Header:
000A7BEE                            	smpsHeaderStartSong 1
000A7BF0 0703                       	smpsHeaderChan      $07, $03
000A7BF2 0100                       	smpsHeaderTempo     $01, $00
000A7BF4                            
000A7BF8 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
000A7BFC 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
000A7C00 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
000A7C04 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
000A7C08 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
000A7C0C 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
000A7C22                            
000A7C22                            ; DAC Data
000A7C22                            extralifejingle_DAC:
000A7C22 807F 55                    	dc.b	nRst, $7F, $55
000A7C25 E4                         	smpsFade
000A7C26                            ; PSG1 Data
000A7C26                            extralifejingle_PSG1:
000A7C26                            ; PSG2 Data
000A7C26                            extralifejingle_PSG2:
000A7C26                            ; PSG3 Data
000A7C26                            extralifejingle_PSG3:
000A7C26 F2                         	smpsStop
000A7C27                            
000A7C27                            ; FM1 Data
000A7C27                            extralifejingle_FM1:
000A7C27 EF00                       	smpsSetvoice        $00
000A7C29 E616                       	smpsAlterVol        $16
000A7C2B E0C0                       	smpsPan             panCenter, $00
000A7C2D A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
000A7C39 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
000A7C3D F2                         	smpsStop
000A7C3E                            
000A7C3E                            ; FM2 Data
000A7C3E                            extralifejingle_FM2:
000A7C3E EF01                       	smpsSetvoice        $01
000A7C40 E616                       	smpsAlterVol        $16
000A7C42 E0C0                       	smpsPan             panCenter, $00
000A7C44 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
000A7C50 A206 800C                  	dc.b	nA2, $06, nRst, $0C
000A7C54 F2                         	smpsStop
000A7C55                            
000A7C55                            ; FM3 Data
000A7C55                            extralifejingle_FM3:
000A7C55 EF01                       	smpsSetvoice        $01
000A7C57 E616                       	smpsAlterVol        $16
000A7C59 E0C0                       	smpsPan             panCenter, $00
000A7C5B AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000A7C67 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000A7C6B F2                         	smpsStop
000A7C6C                            
000A7C6C                            ; FM4 Data
000A7C6C                            extralifejingle_FM4:
000A7C6C EF02                       	smpsSetvoice        $02
000A7C6E E0C0                       	smpsPan             panCenter, $00
000A7C70 8001                       	dc.b	nRst, $01
000A7C72 E616                       	smpsAlterVol        $16
000A7C74 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000A7C80 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000A7C84 F2                         	smpsStop
000A7C85                            
000A7C85                            ; FM5 Data
000A7C85                            extralifejingle_FM5:
000A7C85 EF03                       	smpsSetvoice        $03
000A7C87 E602                       	smpsAlterVol        $02
000A7C89 E0C0                       	smpsPan             panCenter, $00
000A7C8B 8001                       	dc.b	nRst, $01
000A7C8D EF05                       	smpsSetvoice        $05
000A7C8F E60A                       	smpsAlterVol        $0A
000A7C91 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000A7C9D B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000A7CA9 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000A7CB5 C1C4 80                    	dc.b	nE5, nG5, nRst
000A7CB8 F2                         	smpsStop
000A7CB9                            
000A7CB9                            ; FM6 Data
000A7CB9                            extralifejingle_FM6:
000A7CB9 EF04                       	smpsSetvoice        $04
000A7CBB E607                       	smpsAlterVol        $07
000A7CBD E0C0                       	smpsPan             panCenter, $00
000A7CBF 8001                       	dc.b	nRst, $01
000A7CC1 EF06                       	smpsSetvoice        $06
000A7CC3 E6F9                       	smpsAlterVol        $F9
000A7CC5 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
000A7CCC F2                         	smpsStop
000A7CCD                            
000A7CCD                            extralifejingle_Voices:
000A7CCD                            ;	Voice $00
000A7CCD                            ;	$3A
000A7CCD                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A7CCD                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A7CCD                            	smpsVcAlgorithm     $02
000A7CCD                            	smpsVcFeedback      $07
000A7CCD                            	smpsVcUnusedBits    $00
000A7CCD                            	smpsVcDetune        $03, $07, $07, $03
000A7CCD                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A7CCD                            	smpsVcRateScale     $00, $00, $00, $00
000A7CCD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A7CCD                            	smpsVcAmpMod        $00, $00, $00, $00
000A7CCD                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A7CCD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A7CCD                            	smpsVcDecayLevel    $00, $00, $00, $00
000A7CCD                            	smpsVcReleaseRate   $05, $03, $03, $03
000A7CE6                            
000A7CE6                            ;	Voice $01
000A7CE6                            ;	$3A
000A7CE6                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A7CE6                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A7CE6                            	smpsVcAlgorithm     $02
000A7CE6                            	smpsVcFeedback      $07
000A7CE6                            	smpsVcUnusedBits    $00
000A7CE6                            	smpsVcDetune        $03, $07, $07, $03
000A7CE6                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A7CE6                            	smpsVcRateScale     $00, $00, $00, $00
000A7CE6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A7CE6                            	smpsVcAmpMod        $00, $00, $00, $00
000A7CE6                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A7CE6                            	smpsVcDecayRate2    $00, $00, $00, $00
000A7CE6                            	smpsVcDecayLevel    $00, $00, $00, $00
000A7CE6                            	smpsVcReleaseRate   $05, $03, $03, $03
000A7CFF                            
000A7CFF                            ;	Voice $02
000A7CFF                            ;	$3A
000A7CFF                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
000A7CFF                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
000A7CFF                            	smpsVcAlgorithm     $02
000A7CFF                            	smpsVcFeedback      $07
000A7CFF                            	smpsVcUnusedBits    $00
000A7CFF                            	smpsVcDetune        $03, $07, $07, $03
000A7CFF                            	smpsVcCoarseFreq    $01, $04, $03, $04
000A7CFF                            	smpsVcRateScale     $00, $00, $00, $00
000A7CFF                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A7CFF                            	smpsVcAmpMod        $00, $00, $00, $00
000A7CFF                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
000A7CFF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A7CFF                            	smpsVcDecayLevel    $00, $00, $00, $00
000A7CFF                            	smpsVcReleaseRate   $05, $03, $03, $03
000A7D18                            
000A7D18                            ;	Voice $03
000A7D18                            ;	$00
000A7D18                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
000A7D18                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
000A7D18                            	smpsVcAlgorithm     $00
000A7D18                            	smpsVcFeedback      $00
000A7D18                            	smpsVcUnusedBits    $00
000A7D18                            	smpsVcDetune        $00, $00, $00, $00
000A7D18                            	smpsVcCoarseFreq    $00, $00, $0E, $01
000A7D18                            	smpsVcRateScale     $00, $00, $00, $00
000A7D18                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
000A7D18                            	smpsVcAmpMod        $00, $00, $00, $00
000A7D18                            	smpsVcDecayRate1    $10, $10, $1C, $1A
000A7D18                            	smpsVcDecayRate2    $00, $00, $00, $00
000A7D18                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A7D18                            	smpsVcReleaseRate   $08, $08, $0E, $0D
000A7D31                            
000A7D31                            ;	Voice $04
000A7D31                            ;	$03
000A7D31                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
000A7D31                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
000A7D31                            	smpsVcAlgorithm     $03
000A7D31                            	smpsVcFeedback      $00
000A7D31                            	smpsVcUnusedBits    $00
000A7D31                            	smpsVcDetune        $03, $04, $04, $06
000A7D31                            	smpsVcCoarseFreq    $01, $00, $00, $06
000A7D31                            	smpsVcRateScale     $00, $00, $00, $00
000A7D31                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A7D31                            	smpsVcAmpMod        $00, $00, $00, $00
000A7D31                            	smpsVcDecayRate1    $01, $02, $05, $0E
000A7D31                            	smpsVcDecayRate2    $06, $04, $00, $01
000A7D31                            	smpsVcDecayLevel    $01, $01, $06, $0A
000A7D31                            	smpsVcReleaseRate   $08, $06, $0A, $0A
000A7D4A                            
000A7D4A                            ;	Voice $05
000A7D4A                            ;	$34
000A7D4A                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
000A7D4A                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
000A7D4A                            	smpsVcAlgorithm     $04
000A7D4A                            	smpsVcFeedback      $06
000A7D4A                            	smpsVcUnusedBits    $00
000A7D4A                            	smpsVcDetune        $07, $00, $07, $03
000A7D4A                            	smpsVcCoarseFreq    $04, $01, $0E, $03
000A7D4A                            	smpsVcRateScale     $00, $01, $00, $02
000A7D4A                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000A7D4A                            	smpsVcAmpMod        $00, $00, $00, $00
000A7D4A                            	smpsVcDecayRate1    $08, $07, $07, $14
000A7D4A                            	smpsVcDecayRate2    $00, $00, $00, $00
000A7D4A                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
000A7D4A                            	smpsVcReleaseRate   $07, $07, $04, $06
000A7D63                            
000A7D63                            ;	Voice $06
000A7D63                            ;	$30
000A7D63                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000A7D63                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000A7D63                            	smpsVcAlgorithm     $00
000A7D63                            	smpsVcFeedback      $06
000A7D63                            	smpsVcUnusedBits    $00
000A7D63                            	smpsVcDetune        $00, $00, $00, $00
000A7D63                            	smpsVcCoarseFreq    $01, $00, $00, $01
000A7D63                            	smpsVcRateScale     $01, $00, $00, $02
000A7D63                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000A7D63                            	smpsVcAmpMod        $00, $00, $00, $00
000A7D63                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000A7D63                            	smpsVcDecayRate2    $08, $05, $18, $08
000A7D63                            	smpsVcDecayLevel    $01, $00, $00, $06
000A7D63                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000A7D7C                            
000A7D7C                            
000A7D7C                            		even
000A7D7C                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000A85D4 00                         		even
000A85D4                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
000A8AF4                            		even
000A8AF4                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000A8DB6 00                         		even
000A8DB6                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
000A9C0E                            		even
000A9C0E                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
000A9E5A 00                         		even
000A9E5A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000AA190 00                         		even
000AA190                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
000AA33C 00                         		even
000AA33C                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
000AA54A 00                         		even
000AA54A                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
000AA82E 00                         		even
000AA82E                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000AAF5E 00                         		even
000AAF5E                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
000AB02C                            		even
000AB02C                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000AB49A 00                         		even
000AB49A                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
000ABF90                            		even
000ABF90                            Music96:		incbin	"sound/music/Mus96 - Big Water.bin"
000ACAE6                            		even
000ACAE6                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
000ADDEC 00                         		even
000ADDEC                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
000ADDEC                            PasswordEntry_Header:
000ADDEC                            	smpsHeaderStartSong 3
000ADDEE 0603                       	smpsHeaderChan      $06, $03
000ADDF0 0105                       	smpsHeaderTempo     $01, $05
000ADDF2                            
000ADDF6 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
000ADDFA 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
000ADDFE 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
000ADE02 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
000ADE06 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
000ADE1C                            
000ADE1C                            ; FM1 Data
000ADE1C                            PasswordEntry_FM1:
000ADE1C EF00                       	smpsSetvoice        $00
000ADE23                            
000ADE23                            PasswordEntry_Jump00:
000ADE23 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
000ADE2F C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
000ADE3B C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
000ADE47 C918 CB                    	dc.b	nC6, $18, nD6
000ADE4A F6FF D7                    	smpsJump            PasswordEntry_Jump00
000ADE4D                            
000ADE4D                            ; FM2 Data
000ADE4D                            PasswordEntry_FM2:
000ADE4D EF01                       	smpsSetvoice        $01
000ADE4F                            
000ADE4F                            PasswordEntry_Jump03:
000ADE4F B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
000ADE5B AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
000ADE67 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
000ADE73 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
000ADE7D F6FF D0                    	smpsJump            PasswordEntry_Jump03
000ADE80                            
000ADE80                            ; FM3 Data
000ADE80                            PasswordEntry_FM3:
000ADE80 E080                       	smpsPan             panLeft, $00
000ADE82 EF02                       	smpsSetvoice        $02
000ADE84                            
000ADE84                            PasswordEntry_Jump02:
000ADE84 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
000ADE90 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
000ADE9C C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
000ADEA8 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
000ADEB4 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
000ADEC0 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
000ADECC BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
000ADED8 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
000ADEE4 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
000ADEF0 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000ADEFC BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
000ADF04 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
000ADF07                            
000ADF07                            ; FM4 Data
000ADF07                            PasswordEntry_FM4:
000ADF07 E040                       	smpsPan             panRight, $00
000ADF09 EF02                       	smpsSetvoice        $02
000ADF0B                            
000ADF0B                            PasswordEntry_Jump01:
000ADF0B C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
000ADF17 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
000ADF23 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
000ADF2F C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
000ADF3B BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
000ADF47 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
000ADF53 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
000ADF5F BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
000ADF6B BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
000ADF77 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
000ADF83 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
000ADF8B F6FF 7E                    	smpsJump            PasswordEntry_Jump01
000ADF8E                            
000ADF8E                            ; FM5 Data
000ADF8E                            PasswordEntry_FM5:
000ADF8E EF00                       	smpsSetvoice        $00
000ADF90 E1FB                       	smpsAlterNote       $FB
000ADF92 800C                       	dc.b	nRst, $0C
000ADF94 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
000ADF97                            
000ADF97                            ; PSG1 Data
000ADF97                            PasswordEntry_PSG1:
000ADF97 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000ADFA3 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
000ADFAF C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
000ADFBB CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
000ADFC7 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
000ADFD3 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
000ADFDF C810 C408                  	dc.b	nB5, $10, nG5, $08
000ADFE3 F6FF B2                    	smpsJump            PasswordEntry_PSG1
000ADFE6                            
000ADFE6                            ; PSG2 Data
000ADFE6                            PasswordEntry_PSG2:
000ADFE6 E1FF                       	smpsAlterNote       $FF
000ADFE8 800C                       	dc.b	nRst, $0C
000ADFEA F6FF AB                    	smpsJump            PasswordEntry_PSG1
000ADFED                            
000ADFED                            ; PSG3 Data
000ADFED                            PasswordEntry_PSG3:
000ADFED F502                       	smpsPSGvoice        fTone_02
000ADFEF F3E7                       	smpsPSGform         $E7
000ADFF1 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000ADFFD C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
000AE009 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
000AE010 F503                       	smpsPSGvoice        fTone_03
000AE012 C5                         	dc.b	nAb5
000AE013 F6FF D8                    	smpsJump            PasswordEntry_PSG3
000AE016                            
000AE016                            ; DAC Data
000AE016                            PasswordEntry_DAC:
000AE016 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AE022 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AE02A F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
000AE02F 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AE03B 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
000AE043                            
000AE043                            PasswordEntry_Loop00:
000AE043 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
000AE04F 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
000AE057 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
000AE05C 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
000AE068 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
000AE072 F6FF A2                    	smpsJump            PasswordEntry_DAC
000AE075                            
000AE075                            PasswordEntry_Voices:
000AE075                            ;	Voice $00
000AE075                            ;	$04
000AE075                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
000AE075                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
000AE075                            	smpsVcAlgorithm     $04
000AE075                            	smpsVcFeedback      $00
000AE075                            	smpsVcUnusedBits    $00
000AE075                            	smpsVcDetune        $00, $00, $00, $00
000AE075                            	smpsVcCoarseFreq    $00, $01, $01, $02
000AE075                            	smpsVcRateScale     $00, $00, $00, $00
000AE075                            	smpsVcAttackRate    $12, $1F, $10, $1F
000AE075                            	smpsVcAmpMod        $00, $00, $00, $00
000AE075                            	smpsVcDecayRate1    $04, $0B, $03, $09
000AE075                            	smpsVcDecayRate2    $05, $00, $00, $03
000AE075                            	smpsVcDecayLevel    $00, $02, $0F, $0E
000AE075                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AE08E                            
000AE08E                            ;	Voice $01
000AE08E                            ;	$39
000AE08E                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
000AE08E                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
000AE08E                            	smpsVcAlgorithm     $01
000AE08E                            	smpsVcFeedback      $07
000AE08E                            	smpsVcUnusedBits    $00
000AE08E                            	smpsVcDetune        $00, $04, $06, $00
000AE08E                            	smpsVcCoarseFreq    $00, $00, $01, $03
000AE08E                            	smpsVcRateScale     $01, $01, $01, $00
000AE08E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AE08E                            	smpsVcAmpMod        $00, $00, $00, $00
000AE08E                            	smpsVcDecayRate1    $09, $09, $11, $10
000AE08E                            	smpsVcDecayRate2    $00, $00, $00, $06
000AE08E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
000AE08E                            	smpsVcReleaseRate   $08, $08, $08, $08
000AE0A7                            
000AE0A7                            ;	Voice $02
000AE0A7                            ;	$2C
000AE0A7                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
000AE0A7                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
000AE0A7                            	smpsVcAlgorithm     $04
000AE0A7                            	smpsVcFeedback      $05
000AE0A7                            	smpsVcUnusedBits    $00
000AE0A7                            	smpsVcDetune        $00, $02, $00, $04
000AE0A7                            	smpsVcCoarseFreq    $00, $03, $00, $01
000AE0A7                            	smpsVcRateScale     $00, $00, $00, $00
000AE0A7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AE0A7                            	smpsVcAmpMod        $00, $00, $00, $00
000AE0A7                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
000AE0A7                            	smpsVcDecayRate2    $05, $00, $05, $04
000AE0A7                            	smpsVcDecayLevel    $08, $08, $05, $04
000AE0A7                            	smpsVcReleaseRate   $06, $05, $06, $05
000AE0C0                            
000AE0C0                            
000AE0C0                            		even	
000AE0C0                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
000AE0C0                            ToxicLandfill_Header:
000AE0C0                            	smpsHeaderStartSong 1
000AE0C2 0603                       	smpsHeaderChan      $06, $03
000AE0C4 0208                       	smpsHeaderTempo     $02, $08
000AE0C6                            
000AE0CA 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
000AE0CE 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
000AE0D2 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
000AE0D6 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
000AE0DA 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
000AE0F0                            
000AE0F0                            ; DAC Data
000AE0F0                            ToxicLandfill_DAC:
000AE0F0 E0C0                       	smpsPan             panCenter, $00
000AE0F2 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
000AE0FE 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
000AE109                            
000AE109                            ToxicLandfill_Loop00:
000AE109 82                         	dc.b	dSnare
000AE10A                            
000AE10A                            ToxicLandfill_Loop01:
000AE10A 82                         	dc.b	dSnare
000AE10B                            
000AE10B                            ToxicLandfill_Jump00:
000AE10B 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AE117 0381 0603                  	dc.b	$03, dKick, $06, $03
000AE11B F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
000AE120 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
000AE12C 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
000AE134 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
000AE139                            
000AE139                            ToxicLandfill_Loop06:
000AE139 82                         	dc.b	dSnare
000AE13A                            
000AE13A                            ToxicLandfill_Loop02:
000AE13A 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AE13E F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
000AE143                            
000AE143                            ToxicLandfill_Loop03:
000AE143 8281 81                    	dc.b	dSnare, dKick, dKick
000AE146 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
000AE14B                            
000AE14B                            ToxicLandfill_Loop04:
000AE14B 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AE14F F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
000AE154 8182 81                    	dc.b	dKick, dSnare, dKick
000AE157                            
000AE157                            ToxicLandfill_Loop05:
000AE157 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AE15C F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
000AE161 0303 03                    	dc.b	$03, $03, $03
000AE164 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
000AE169                            
000AE169                            ToxicLandfill_Loop08:
000AE169 03                         	dc.b	$03
000AE16A                            
000AE16A                            ToxicLandfill_Loop07:
000AE16A 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AE173 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
000AE178 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
000AE17F F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
000AE184                            
000AE184                            ToxicLandfill_Loop0D:
000AE184 82                         	dc.b	dSnare
000AE185                            
000AE185                            ToxicLandfill_Loop09:
000AE185 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
000AE189 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
000AE18E                            
000AE18E                            ToxicLandfill_Loop0A:
000AE18E 8281 81                    	dc.b	dSnare, dKick, dKick
000AE191 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
000AE196                            
000AE196                            ToxicLandfill_Loop0B:
000AE196 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
000AE19A F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
000AE19F 8182 81                    	dc.b	dKick, dSnare, dKick
000AE1A2                            
000AE1A2                            ToxicLandfill_Loop0C:
000AE1A2 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
000AE1A7 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
000AE1AC 0303 03                    	dc.b	$03, $03, $03
000AE1AF F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
000AE1B4                            
000AE1B4                            ToxicLandfill_Loop0E:
000AE1B4 03                         	dc.b	$03
000AE1B5                            
000AE1B5                            ToxicLandfill_Loop0F:
000AE1B5 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
000AE1C1 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
000AE1C6 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
000AE1CB 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
000AE1D7 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
000AE1DF F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
000AE1E4                            
000AE1E4                            ToxicLandfill_Loop10:
000AE1E4 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
000AE1ED F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
000AE1F2 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
000AE1FA F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
000AE1FF F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
000AE202                            
000AE202                            ; FM1 Data
000AE202                            ToxicLandfill_FM1:
000AE202 E0C0                       	smpsPan             panCenter, $00
000AE204 EF00                       	smpsSetvoice        $00
000AE206 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AE212 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AE21A                            
000AE21A                            ToxicLandfill_Loop44:
000AE21A AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AE226 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AE232 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AE23E A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AE242 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
000AE247                            
000AE247                            ToxicLandfill_Loop46:
000AE247 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AE253 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AE25F 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AE26B AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AE273                            
000AE273                            ToxicLandfill_Loop45:
000AE273 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AE277 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
000AE27C AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AE283 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
000AE288                            
000AE288                            ToxicLandfill_Loop47:
000AE288 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AE294 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
000AE299                            
000AE299                            ToxicLandfill_Loop48:
000AE299 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AE2A4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
000AE2A9 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
000AE2AE                            
000AE2AE                            ToxicLandfill_Loop4A:
000AE2AE B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AE2BA B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AE2C6 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AE2D2 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AE2DA                            
000AE2DA                            ToxicLandfill_Loop49:
000AE2DA B602 B501                  	dc.b	nF4, $02, nE4, $01
000AE2DE F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
000AE2E3 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AE2EA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
000AE2EF                            
000AE2EF                            ToxicLandfill_Loop4B:
000AE2EF B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AE2FB 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AE307 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AE313 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AE317 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
000AE31C                            
000AE31C                            ToxicLandfill_Loop4C:
000AE31C BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE327 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
000AE32C                            
000AE32C                            ToxicLandfill_Loop4D:
000AE32C BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AE337 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
000AE33C F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
000AE341 F6FE D7                    	smpsJump            ToxicLandfill_Loop44
000AE344                            
000AE344                            ; FM2 Data
000AE344                            ToxicLandfill_FM2:
000AE344 E0C0                       	smpsPan             panCenter, $00
000AE346 EF00                       	smpsSetvoice        $00
000AE348 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AE354 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
000AE35C                            
000AE35C                            ToxicLandfill_Loop3A:
000AE35C B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
000AE368 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
000AE374 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
000AE380 AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
000AE384 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
000AE389                            
000AE389                            ToxicLandfill_Loop3C:
000AE389 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AE395 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
000AE3A1 A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
000AE3AD B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
000AE3B5                            
000AE3B5                            ToxicLandfill_Loop3B:
000AE3B5 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
000AE3B9 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
000AE3BE AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
000AE3C5 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
000AE3CA                            
000AE3CA                            ToxicLandfill_Loop3D:
000AE3CA AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
000AE3D6 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
000AE3DB                            
000AE3DB                            ToxicLandfill_Loop3E:
000AE3DB ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
000AE3E6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
000AE3EB F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
000AE3F0                            
000AE3F0                            ToxicLandfill_Loop40:
000AE3F0 BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
000AE3FC B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
000AE408 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
000AE414 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
000AE41C                            
000AE41C                            ToxicLandfill_Loop3F:
000AE41C BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
000AE420 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
000AE425 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
000AE42C F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
000AE431                            
000AE431                            ToxicLandfill_Loop41:
000AE431 BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
000AE43D 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
000AE449 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
000AE455 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
000AE459 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
000AE45E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
000AE46A B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
000AE476 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
000AE482 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
000AE48E 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
000AE49A 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
000AE4A0                            
000AE4A0                            ToxicLandfill_Loop42:
000AE4A0 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
000AE4AB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
000AE4B0                            
000AE4B0                            ToxicLandfill_Loop43:
000AE4B0 B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
000AE4BB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
000AE4C0 F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
000AE4C5 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
000AE4D1 B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
000AE4DB F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
000AE4DE                            
000AE4DE                            ; FM3 Data
000AE4DE                            ToxicLandfill_FM3:
000AE4DE E0C0                       	smpsPan             panCenter, $00
000AE4E0 EF01                       	smpsSetvoice        $01
000AE4E2                            
000AE4E2                            ToxicLandfill_Loop2D:
000AE4E2 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
000AE4EE 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
000AE4FA 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
000AE503 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
000AE508 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
000AE514 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
000AE520 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
000AE52C A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
000AE534                            
000AE534                            ToxicLandfill_Loop2E:
000AE534 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE540 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
000AE545 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AE551 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AE557 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
000AE55C                            
000AE55C                            ToxicLandfill_Loop31:
000AE55C A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AE561                            
000AE561                            ToxicLandfill_Loop2F:
000AE561 9999 A3                    	dc.b	nC2, nC2, nBb2
000AE564 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
000AE569 99A3                       	dc.b	nC2, nBb2
000AE56B                            
000AE56B                            ToxicLandfill_Loop30:
000AE56B 99A3 99                    	dc.b	nC2, nBb2, nC2
000AE56E F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
000AE573 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AE578 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
000AE57D                            
000AE57D                            ToxicLandfill_Loop32:
000AE57D A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AE589 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
000AE58E                            
000AE58E                            ToxicLandfill_Loop33:
000AE58E A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AE598 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
000AE59D F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
000AE5A2                            
000AE5A2                            ToxicLandfill_Loop36:
000AE5A2 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
000AE5A7                            
000AE5A7                            ToxicLandfill_Loop34:
000AE5A7 9999 A3                    	dc.b	nC2, nC2, nBb2
000AE5AA F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
000AE5AF 99A3                       	dc.b	nC2, nBb2
000AE5B1                            
000AE5B1                            ToxicLandfill_Loop35:
000AE5B1 99A3 99                    	dc.b	nC2, nBb2, nC2
000AE5B4 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
000AE5B9 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
000AE5BE F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
000AE5C3                            
000AE5C3                            ToxicLandfill_Loop37:
000AE5C3 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE5CF F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
000AE5D4 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
000AE5E0 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
000AE5E6 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
000AE5EB                            
000AE5EB                            ToxicLandfill_Loop38:
000AE5EB A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
000AE5F6 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
000AE5FB                            
000AE5FB                            ToxicLandfill_Loop39:
000AE5FB A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
000AE605 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
000AE60A F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
000AE60F F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
000AE612                            
000AE612                            ; FM4 Data
000AE612                            ToxicLandfill_FM4:
000AE612 E0C0                       	smpsPan             panCenter, $00
000AE614 EF01                       	smpsSetvoice        $01
000AE616                            
000AE616                            ToxicLandfill_Loop20:
000AE616 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
000AE622 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
000AE62E 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
000AE637 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
000AE63C 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
000AE648 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
000AE654 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
000AE660 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
000AE665                            
000AE665                            ToxicLandfill_Loop21:
000AE665 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AE671 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
000AE676 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AE682 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AE688 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
000AE68D                            
000AE68D                            ToxicLandfill_Loop24:
000AE68D 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AE692                            
000AE692                            ToxicLandfill_Loop22:
000AE692 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AE695 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
000AE69A 8D97                       	dc.b	nC1, nBb1
000AE69C                            
000AE69C                            ToxicLandfill_Loop23:
000AE69C 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AE69F F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
000AE6A4 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AE6A9 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
000AE6AE                            
000AE6AE                            ToxicLandfill_Loop25:
000AE6AE 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AE6BA F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
000AE6BF                            
000AE6BF                            ToxicLandfill_Loop26:
000AE6BF 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AE6C9 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
000AE6CE F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
000AE6D3                            
000AE6D3                            ToxicLandfill_Loop29:
000AE6D3 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
000AE6D8                            
000AE6D8                            ToxicLandfill_Loop27:
000AE6D8 8D8D 97                    	dc.b	nC1, nC1, nBb1
000AE6DB F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
000AE6E0 8D97                       	dc.b	nC1, nBb1
000AE6E2                            
000AE6E2                            ToxicLandfill_Loop28:
000AE6E2 8D97 8D                    	dc.b	nC1, nBb1, nC1
000AE6E5 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
000AE6EA 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
000AE6EF F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
000AE6F4                            
000AE6F4                            ToxicLandfill_Loop2A:
000AE6F4 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
000AE700 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
000AE705 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
000AE711 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
000AE717 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
000AE71C                            
000AE71C                            ToxicLandfill_Loop2B:
000AE71C 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
000AE727 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
000AE72C                            
000AE72C                            ToxicLandfill_Loop2C:
000AE72C 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
000AE736 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
000AE73B F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
000AE740 F6FF 23                    	smpsJump            ToxicLandfill_Loop21
000AE743                            
000AE743                            ; FM5 Data
000AE743                            ToxicLandfill_FM5:
000AE743 E0C0                       	smpsPan             panCenter, $00
000AE745 E6FA                       	smpsAlterVol			-$06		
000AE747 E102                       	smpsDetune			$02	
000AE749 EF00                       	smpsSetvoice        $00
000AE74B 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
000AE757 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
000AE75C                            
000AE75C                            ToxicLandfill_Jump01:
000AE75C E701 B0                    	dc.b	smpsNoAttack, $01, nB3
000AE75F                            
000AE75F                            ToxicLandfill_Loop11:
000AE75F AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
000AE76B 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
000AE777 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
000AE783 A706 06AA                  	dc.b	nD3, $06, $06, nF3
000AE787 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
000AE78C                            
000AE78C                            ToxicLandfill_Loop13:
000AE78C AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AE798 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
000AE7A4 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
000AE7B0 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
000AE7B8                            
000AE7B8                            ToxicLandfill_Loop12:
000AE7B8 AA02 A901                  	dc.b	nF3, $02, nE3, $01
000AE7BC F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
000AE7C1 AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
000AE7C8 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
000AE7CD                            
000AE7CD                            ToxicLandfill_Loop14:
000AE7CD B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
000AE7D9 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
000AE7DE                            
000AE7DE                            ToxicLandfill_Loop15:
000AE7DE B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AE7E9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
000AE7EE F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
000AE7F3                            
000AE7F3                            ToxicLandfill_Loop17:
000AE7F3 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
000AE7FF B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
000AE80B AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
000AE817 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
000AE81F                            
000AE81F                            ToxicLandfill_Loop16:
000AE81F B602 B501                  	dc.b	nF4, $02, nE4, $01
000AE823 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
000AE828 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
000AE82F F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
000AE834                            
000AE834                            ToxicLandfill_Loop18:
000AE834 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
000AE840 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
000AE84C B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
000AE858 B306 06B6                  	dc.b	nD4, $06, $06, nF4
000AE85C F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
000AE861                            
000AE861                            ToxicLandfill_Loop19:
000AE861 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE86C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
000AE871                            
000AE871                            ToxicLandfill_Loop1A:
000AE871 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AE87C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
000AE881                            
000AE881                            ToxicLandfill_Loop1B:
000AE881 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE88C F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
000AE891 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
000AE89D B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
000AE8A9 EF02                       	smpsSetvoice        $02
000AE8AB E1FE                       	smpsDetune			-$02
000AE8AD E606                       	smpsAlterVol		$06
000AE8AF                            	
000AE8AF                            ToxicLandfill_Loop1C:
000AE8AF B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
000AE8BB F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
000AE8C0                            
000AE8C0                            ToxicLandfill_Loop1D:
000AE8C0 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
000AE8CB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
000AE8D0                            
000AE8D0                            ToxicLandfill_Loop1E:
000AE8D0 BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
000AE8DB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
000AE8E0                            
000AE8E0                            ToxicLandfill_Loop1F:
000AE8E0 BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
000AE8EB F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
000AE8F0 EF00                       	smpsSetvoice        $00
000AE8F2 E102                       	smpsDetune			$02
000AE8F4 E6FA                       	smpsAlterVol		-$06	
000AE8F6 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
000AE8F9                            
000AE8F9                            ; PSG1 Data
000AE8F9                            ToxicLandfill_PSG1:
000AE8F9 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AE8FE                            
000AE8FE                            ToxicLandfill_Jump04:
000AE8FE 80                         	dc.b	nRst
000AE8FF                            
000AE8FF                            ToxicLandfill_Loop57:
000AE8FF 60                         	dc.b	$60
000AE900 F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
000AE905                            
000AE905                            ToxicLandfill_Loop58:
000AE905 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE911 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
000AE916                            
000AE916                            ToxicLandfill_Loop59:
000AE916 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AE921 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
000AE926                            
000AE926                            ToxicLandfill_Loop5A:
000AE926 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE931 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
000AE936 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AE942 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
000AE94E                            
000AE94E                            ToxicLandfill_Loop5B:
000AE94E 6E                         	dc.b	$6E
000AE94F F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
000AE954                            
000AE954                            ToxicLandfill_Loop5C:
000AE954 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE960 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
000AE965                            
000AE965                            ToxicLandfill_Loop5D:
000AE965 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
000AE970 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
000AE975 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
000AE97A                            
000AE97A                            ToxicLandfill_Loop5E:
000AE97A A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
000AE985 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
000AE98A A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
000AE996 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
000AE9A2 01                         	dc.b	$01
000AE9A3 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
000AE9A6                            
000AE9A6                            ; PSG2 Data
000AE9A6                            ToxicLandfill_PSG2:
000AE9A6 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
000AE9AB                            
000AE9AB                            ToxicLandfill_Jump03:
000AE9AB 80                         	dc.b	nRst
000AE9AC                            
000AE9AC                            ToxicLandfill_Loop50:
000AE9AC 60                         	dc.b	$60
000AE9AD F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
000AE9B2 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE9BE A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AE9CA 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AE9D6 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AE9E2 9E                         	dc.b	nF2
000AE9E3                            
000AE9E3                            ToxicLandfill_Loop51:
000AE9E3 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AE9EE F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
000AE9F3 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AE9FF 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
000AEA0B 0580                       	dc.b	$05, nRst
000AEA0D                            
000AEA0D                            ToxicLandfill_Loop52:
000AEA0D 60                         	dc.b	$60
000AEA0E F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
000AEA13 01                         	dc.b	$01
000AEA14                            
000AEA14                            ToxicLandfill_Loop53:
000AEA14 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AEA20 A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
000AEA2C 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AEA38 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
000AEA44 9E                         	dc.b	nF2
000AEA45 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
000AEA4A                            
000AEA4A                            ToxicLandfill_Loop54:
000AEA4A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AEA55 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
000AEA5A                            
000AEA5A                            ToxicLandfill_Loop55:
000AEA5A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
000AEA65 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
000AEA6A                            
000AEA6A                            ToxicLandfill_Loop56:
000AEA6A A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
000AEA75 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
000AEA7A A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
000AEA86 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
000AEA92 01                         	dc.b	$01
000AEA93 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
000AEA96                            
000AEA96                            ; PSG3 Data
000AEA96                            ToxicLandfill_PSG3:
000AEA96 F3E7                       	smpsPSGform         $E7
000AEA98 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
000AEAA0                            
000AEAA0                            ToxicLandfill_Loop4E:
000AEAA0 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
000AEAA5 F501                       	smpsPSGvoice        fTone_01
000AEAA7 0C                         	dc.b	$0C
000AEAA8 F502                       	smpsPSGvoice        fTone_02
000AEAAA F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
000AEAAF 0603 03                    	dc.b	$06, $03, $03
000AEAB2 F501                       	smpsPSGvoice        fTone_01
000AEAB4 06                         	dc.b	$06
000AEAB5 F502                       	smpsPSGvoice        fTone_02
000AEAB7 03                         	dc.b	$03
000AEAB8 F501                       	smpsPSGvoice        fTone_01
000AEABA 0906 0606                  	dc.b	$09, $06, $06, $06
000AEABE                            
000AEABE                            ToxicLandfill_Jump02:
000AEABE E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
000AEAC6 F502                       	smpsPSGvoice        fTone_02
000AEAC8 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
000AEACC F501                       	smpsPSGvoice        fTone_01
000AEACE 18                         	dc.b	$18
000AEACF F502                       	smpsPSGvoice        fTone_02
000AEAD1 1806                       	dc.b	$18, $06
000AEAD3 F501                       	smpsPSGvoice        fTone_01
000AEAD5 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AEADB F502                       	smpsPSGvoice        fTone_02
000AEADD 1818 18                    	dc.b	$18, $18, $18
000AEAE0 F501                       	smpsPSGvoice        fTone_01
000AEAE2 18                         	dc.b	$18
000AEAE3 F502                       	smpsPSGvoice        fTone_02
000AEAE5 1806                       	dc.b	$18, $06
000AEAE7 F501                       	smpsPSGvoice        fTone_01
000AEAE9 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
000AEAF5 F502                       	smpsPSGvoice        fTone_02
000AEAF7 1818 18                    	dc.b	$18, $18, $18
000AEAFA F501                       	smpsPSGvoice        fTone_01
000AEAFC 18                         	dc.b	$18
000AEAFD F502                       	smpsPSGvoice        fTone_02
000AEAFF 1806                       	dc.b	$18, $06
000AEB01 F501                       	smpsPSGvoice        fTone_01
000AEB03 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
000AEB09 F502                       	smpsPSGvoice        fTone_02
000AEB0B 1818 18                    	dc.b	$18, $18, $18
000AEB0E F501                       	smpsPSGvoice        fTone_01
000AEB10 18                         	dc.b	$18
000AEB11 F502                       	smpsPSGvoice        fTone_02
000AEB13 1806                       	dc.b	$18, $06
000AEB15 F501                       	smpsPSGvoice        fTone_01
000AEB17 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
000AEB1C                            
000AEB1C                            ToxicLandfill_Loop4F:
000AEB1C 59E7                       	dc.b	$59, smpsNoAttack
000AEB1E F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
000AEB23 5A                         	dc.b	$5A
000AEB24 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
000AEB27                            
000AEB27                            
000AEB27                            ToxicLandfill_Voices:
000AEB27                            ;	Voice $00
000AEB27                            ;	$29
000AEB27                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
000AEB27                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
000AEB27                            	smpsVcAlgorithm     $01
000AEB27                            	smpsVcFeedback      $05
000AEB27                            	smpsVcUnusedBits    $00
000AEB27                            	smpsVcDetune        $00, $00, $00, $03
000AEB27                            	smpsVcCoarseFreq    $01, $02, $02, $03
000AEB27                            	smpsVcRateScale     $00, $00, $00, $00
000AEB27                            	smpsVcAttackRate    $19, $1F, $1F, $1F
000AEB27                            	smpsVcAmpMod        $00, $00, $00, $00
000AEB27                            	smpsVcDecayRate1    $0B, $00, $02, $00
000AEB27                            	smpsVcDecayRate2    $03, $00, $02, $03
000AEB27                            	smpsVcDecayLevel    $01, $00, $01, $00
000AEB27                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
000AEB40                            	
000AEB40                            ;	Voice $01
000AEB40                            ;	$18
000AEB40                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000AEB40                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
000AEB40                            	smpsVcAlgorithm     $00
000AEB40                            	smpsVcFeedback      $03
000AEB40                            	smpsVcUnusedBits    $00
000AEB40                            	smpsVcDetune        $03, $03, $03, $03
000AEB40                            	smpsVcCoarseFreq    $01, $00, $00, $07
000AEB40                            	smpsVcRateScale     $02, $00, $03, $02
000AEB40                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000AEB40                            	smpsVcAmpMod        $00, $00, $00, $00
000AEB40                            	smpsVcDecayRate1    $01, $04, $06, $0D
000AEB40                            	smpsVcDecayRate2    $05, $03, $0A, $08
000AEB40                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000AEB40                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AEB59                            
000AEB59                            ;	Voice $02
000AEB59                            ;	$2C
000AEB59                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000AEB59                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
000AEB59                            	smpsVcAlgorithm     $04
000AEB59                            	smpsVcFeedback      $05
000AEB59                            	smpsVcUnusedBits    $00
000AEB59                            	smpsVcDetune        $03, $03, $07, $07
000AEB59                            	smpsVcCoarseFreq    $04, $04, $08, $02
000AEB59                            	smpsVcRateScale     $00, $00, $00, $00
000AEB59                            	smpsVcAttackRate    $12, $1F, $12, $1F
000AEB59                            	smpsVcAmpMod        $00, $00, $00, $00
000AEB59                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000AEB59                            	smpsVcDecayRate2    $00, $00, $00, $00
000AEB59                            	smpsVcDecayLevel    $01, $00, $01, $00
000AEB59                            	smpsVcReleaseRate   $06, $00, $06, $00
000AEB72                            		even			
000AEB72                            Music9A:		include	"sound/music/Mus9A - RRZ2.asm"
000AEB72                            RRZ2_Header:
000AEB72                            	smpsHeaderStartSong 1
000AEB74 0603                       	smpsHeaderChan      $06, $03
000AEB76 0104                       	smpsHeaderTempo     $01, $04
000AEB78                            
000AEB7C 0000 0010                  	smpsHeaderFM        RRZ2_FM1,	$00, $10
000AEB80 0000 0C0D                  	smpsHeaderFM        RRZ2_FM2,	$0C, $0D
000AEB84 0000 0019                  	smpsHeaderFM        RRZ2_FM3,	$00, $19
000AEB88 0000 0019                  	smpsHeaderFM        RRZ2_FM4,	$00, $19
000AEB8C 0000 0019                  	smpsHeaderFM        RRZ2_FM5,	$00, $19
000AEBA2                            
000AEBA2                            ; FM1 Data
000AEBA2                            RRZ2_FM1:
000AEBA2 E0C0                       	smpsPan             panCenter, $00
000AEBA9 EF03                       	smpsSetvoice        $03
000AEBAB B160 BD18 B8BB 12B4 AF0C+  	dc.b	nC4, $60, nC5, $18, nG4, nBb4, $12, nEb4, nBb3, $0C, nC4, $60
000AEBB7 BD18 B8BB 12B4 C00C B160+  	dc.b	nC5, $18, nG4, nBb4, $12, nEb4, nEb5, $0C, nC4, $60, $18, nG4
000AEBC3 BD12 C0C4 0C30 C2C0 B804+  	dc.b	nC5, $12, nEb5, nG5, $0C, $30, nF5, nEb5, nG4, $04, nF4, nEb4
000AEBCF B6B4 B3B4 B3B1 AFAC AFB1+  	dc.b	nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3, nG3, nBb3, nC4, $60, nRst
000AEBDB 8080                       	dc.b	nRst, nRst
000AEBDD EF00                       	smpsSetvoice        $00
000AEBDF B848 0CB1 B430 0CB3 B4BB+  	dc.b	nG4, $48, $0C, nC4, nEb4, $30, $0C, nD4, nEb4, nBb4, nA4, $30
000AEBEB B8E7 B82E 8032 B860 B130+  	dc.b	nG4, smpsNoAttack, nG4, $2E, nRst, $32, nG4, $60, nC4, $30, $18, nG4
000AEBF7 0CB4 BB30 BDBA 60B8 30B1+  	dc.b	$0C, nEb4, nBb4, $30, nC5, nA4, $60, nG4, $30, nC4, nEb4, $18
000AEC03 B3AF AE0C AFB1 30B8 E7B8+  	dc.b	nD4, nBb3, nA3, $0C, nBb3, nC4, $30, nG4, smpsNoAttack, nG4, $2E, nRst
000AEC0F 32B4 600C B3B4 B8BB 18BA+  	dc.b	$32, nEb4, $60, $0C, nD4, nEb4, nG4, nBb4, $18, nA4, $0C, nF4
000AEC1B B818 B630 BB12 BA06 E760+  	dc.b	nG4, $18, nF4, $30, nBb4, $12, nA4, $06, smpsNoAttack, $60, nA4, $60
000AEC27 C918 C4C7 14C6 10BD 0CC0+  	dc.b	nC6, $18, nG5, nBb5, $14, nA5, $10, nC5, $0C, nEb5, $2E, nRst
000AEC33 3280 60                    	dc.b	$32, nRst, $60
000AEC36 EF05                       	smpsSetvoice        $05
000AEC38 E9F4                       	smpsAlterPitch      $F4
000AEC3A B930 BDB4 60B7 30AF B260+  	dc.b	nAb4, $30, nC5, nEb4, $60, nFs4, $30, nBb3, nCs4, $60, nAb4, $30
000AEC46 B4B9 C0C3 B7E7 B760        	dc.b	nEb4, nAb4, nEb5, nFs5, nFs4, smpsNoAttack, nFs4, $60
000AEC4E E90C                       	smpsAlterPitch      $0C
000AEC50 B160 A5B1 30AC B860 B430+  	dc.b	nC4, $60, nC3, nC4, $30, nG3, nG4, $60, nEb4, $30, nBb4, nG4
000AEC5C 60B1 30AC B8B6 B460 B630+  	dc.b	$60, nC4, $30, nG3, nG4, nF4, nEb4, $60, nF4, $30, nD4, nG4
000AEC68 60E7 30C0 18BF             	dc.b	$60, smpsNoAttack, $30, nEb5, $18, nD5
000AEC6E F6FF 32                    	smpsJump            RRZ2_FM1
000AEC71                            
000AEC71                            ; FM2 Data
000AEC71                            RRZ2_FM2:
000AEC71 E0C0                       	smpsPan             panCenter, $00
000AEC78 EF01                       	smpsSetvoice        $01
000AEC7A                            
000AEC7A                            RRZ2_Jump02:
000AEC7A 9960 E748 0C9B 9C60 E79C+  	dc.b	nC2, $60, smpsNoAttack, $48, $0C, nD2, nEb2, $60, smpsNoAttack, nEb2, nF2, nF2
000AEC86 480C 9FA0 6030 049E 9C9E+  	dc.b	$48, $0C, nFs2, nG2, $60, $30, $04, nF2, nEb2, nF2, nEb2, nD2
000AEC92 9C9B 9997 9497 9908 0494+  	dc.b	nEb2, nD2, nC2, nBb1, nG1, nBb1, nC2, $08, $04, nG1, $0C, nBb1
000AEC9E 9908 0480 3080 0899 0480+  	dc.b	nC2, $08, $04, nRst, $30, nRst, $08, nC2, $04, nRst, $0C, nC2
000AECAA 8097 0480 0897 8004 970C+  	dc.b	nRst, nBb1, $04, nRst, $08, nBb1, nRst, $04, nBb1, $0C, nG1, $08
000AECB6 9704 9908 0494 0C97 9908+  	dc.b	nBb1, $04, nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst
000AECC2 3080 0899 0480 0C99 8097+  	dc.b	$30, nRst, $08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst
000AECCE 0897 8004 9480 9410        	dc.b	$08, nBb1, nRst, $04, nG1, nRst, nG1, $10
000AECD6                            
000AECD6                            RRZ2_Loop07:
000AECD6 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AECE2 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AECEE 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AECF6 F700 08FF DC               	smpsLoop            $00, $08, RRZ2_Loop07
000AECFB                            
000AECFB                            RRZ2_Loop08:
000AECFB 9908 0494 0C97 9908 0480+  	dc.b	nC2, $08, $04, nG1, $0C, nBb1, nC2, $08, $04, nRst, $30, nRst
000AED07 0899 0480 0C99 8097 0480+  	dc.b	$08, nC2, $04, nRst, $0C, nC2, nRst, nBb1, $04, nRst, $08, nBb1
000AED13 8004 970C 9408 9704        	dc.b	nRst, $04, nBb1, $0C, nG1, $08, nBb1, $04
000AED1B F700 02FF DC               	smpsLoop            $00, $02, RRZ2_Loop08
000AED20 9508 9C04 A108 9C04 9508+  	dc.b	nAb1, $08, nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst
000AED2C 0895 2680 0A95 04A1 1680+  	dc.b	$08, nAb1, $26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2
000AED38 049C A1A6 0CA5 A19C 08A1+  	dc.b	$04, nEb2, nAb2, nCs3, $0C, nC3, nAb2, nEb2, $08, nAb2, $04, nFs1
000AED44 089A 049F 089A 0493 0804+  	dc.b	$08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04, nRst, $08
000AED50 9304 2280 0A93 049F 8093+  	dc.b	nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1, nRst, $08
000AED5C 9304 0C92 0893 0480 0893+  	dc.b	nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1, $04, nFs1
000AED68 9A9F A408 A304 A408 A304+  	dc.b	nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04, nAb1, $08
000AED74 9C04 A108 9C04 9508 0480+  	dc.b	nEb2, $04, nAb2, $08, nEb2, $04, nAb1, $08, $04, nRst, $08, nAb1
000AED80 2680 0A95 04A1 1680 0EA1+  	dc.b	$26, nRst, $0A, nAb1, $04, nAb2, $16, nRst, $0E, nAb2, $04, nEb2
000AED8C A1A6 A5A6 ADA8 A39F 9E9F+  	dc.b	nAb2, nCs3, nC3, nCs3, nAb3, nEb3, nBb2, nFs2, nF2, nFs2, nEb2, nBb2
000AED98 9C93 089A 049F 089A 0493+  	dc.b	nEb2, nFs1, $08, nCs2, $04, nFs2, $08, nCs2, $04, nFs1, $08, $04
000AEDA4 8008 9304 2280 0A93 049F+  	dc.b	nRst, $08, nFs1, $04, $22, nRst, $0A, nFs1, $04, nFs2, nRst, nFs1
000AEDB0 8008 9304 0C92 0893 0480+  	dc.b	nRst, $08, nFs1, $04, $0C, nF1, $08, nFs1, $04, nRst, $08, nFs1
000AEDBC 0493 9A9F A408 A304 A408+  	dc.b	$04, nFs1, nCs2, nFs2, nB2, $08, nBb2, $04, nB2, $08, nBb2, $04
000AEDC8 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AEDD4 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AEDE0 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AEDEC 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AEDF8 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AEE04 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AEE10 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AEE1C 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AEE28 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AEE34 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AEE40 9004 8008 8D0C 0408 8F04+  	dc.b	nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C
000AEE4C 8D08 048D 8008 8D0C 8F08+  	dc.b	nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04
000AEE58 8008 8D0C 0408 8F04 900C+  	dc.b	nRst, $08, nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08
000AEE64 048D 8008 8D0C 8F08 9004+  	dc.b	$04, nC1, nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08
000AEE70 8D0C 0408 8F04 900C 8D08+  	dc.b	nC1, $0C, $04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1
000AEE7C 8008 8D0C 8F08 9004 8008+  	dc.b	nRst, $08, nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C
000AEE88 0408 8F04 900C 8D08 048D+  	dc.b	$04, $08, nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08
000AEE94 8D0C 8F08 9004 8008 8D0C+  	dc.b	nC1, $0C, nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08
000AEEA0 8F04 900C 8D08 048D 8008+  	dc.b	nD1, $04, nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C
000AEEAC 8F08 9004 8008 8D0C 0408+  	dc.b	nD1, $08, nEb1, $04, nRst, $08, nC1, $0C, $04, $08, nD1, $04
000AEEB8 900C 8D08 048D 8008 8D0C+  	dc.b	nEb1, $0C, nC1, $08, $04, nC1, nRst, $08, nC1, $0C, nD1, $08
000AEEC4 9004 940C 8094 18          	dc.b	nEb1, $04, nG1, $0C, nRst, nG1, $18
000AEECB F6FD AD                    	smpsJump            RRZ2_Jump02
000AEECE                            
000AEECE                            ; FM3 Data
000AEECE                            RRZ2_FM3:
000AEECE E080                       	smpsPan             panLeft, $00
000AEED5                            
000AEED5                            RRZ2_Jump01:
000AEED5 EF02                       	smpsSetvoice        $02
000AEED7                            
000AEED7                            RRZ2_Loop05:
000AEED7 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AEEE3 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AEEEF 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AEEFB 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AEF07 ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AEF0D F700 03FF C6               	smpsLoop            $00, $03, RRZ2_Loop05
000AEF12 B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AEF1E 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AEF2A 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AEF36 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AEF42 B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AEF4A                            
000AEF4A                            RRZ2_Loop06:
000AEF4A AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AEF56 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AEF62 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AEF6E 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AEF7A 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AEF86 B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AEF92 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AEF9E B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AEFA9 F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop06
000AEFAE AC0C B8AC 08B6 0CAC 04B4+  	dc.b	nG3, $0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3
000AEFBA 08B3 0CAC 04B4 8008 AC04+  	dc.b	$08, nD4, $0C, nG3, $04, nEb4, nRst, $08, nG3, $04, nRst, $08
000AEFC6 B1B3 04B4 08B8 0480 08AC+  	dc.b	nC4, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nG3, $04, nC4
000AEFD2 08B3 04B4 08B8 0480 08BB+  	dc.b	$08, nD4, $04, nEb4, $08, nG4, $04, nRst, $08, nBb4, $10, nG3
000AEFDE 0CB8 AC08 B60C AC04 B40C+  	dc.b	$0C, nG4, nG3, $08, nF4, $0C, nG3, $04, nEb4, $0C, nG3, $08
000AEFEA B30C AC04 B480 08B1 AC04+  	dc.b	nD4, $0C, nG3, $04, nEb4, nRst, $08, nC4, nG3, $04, nG4, $08
000AEFF6 B604 B408 B304 8008 B404+  	dc.b	nF4, $04, nEb4, $08, nD4, $04, nRst, $08, nEb4, $04, nF4, $08
000AF002 B404 B680 08B8 BB04 B880+  	dc.b	nEb4, $04, nF4, nRst, $08, nG4, nBb4, $04, nG4, nRst, $08
000AF00D EF05                       	smpsSetvoice        $05
000AF00F 8060 8018 BD04 B9B4 B9B4+  	dc.b	nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4
000AF01B B1AD B1AD A8A1 1880 60B7+  	dc.b	nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60, nFs4, $04, nCs4
000AF027 AFAB AFB2 B7AF ABA6 ABAF+  	dc.b	nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3, nCs3
000AF033 A39F 2480 6080 18BD 04B9+  	dc.b	nBb2, nFs2, $24, nRst, $60, nRst, $18, nC5, $04, nAb4, nEb4, nAb4
000AF03F B4B1 B4B1 ADB1 ADA8 A118+  	dc.b	nEb4, nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $18, nRst, $60
000AF04B B704 B2AF ABAF B2B7 AFAB+  	dc.b	nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3
000AF057 AFAB A6A3 9F24             	dc.b	nBb3, nFs3, nCs3, nBb2, nFs2, $24
000AF05D E6FA                       	smpsAlterVol        $FA
000AF05F A560 E7A5 B148 0804 8008+  	dc.b	nC3, $60, smpsNoAttack, nC3, nC4, $48, $08, $04, nRst, $08, nC4, $04
000AF06B 8008 AF04 22E7 1A08 0480+  	dc.b	nRst, $08, nBb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nBb3
000AF077 0480 08AD 0422 E71A 0804+  	dc.b	$04, nRst, $08, nAb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AF083 AD04 8008 AC04 240C AAA8+  	dc.b	nAb3, $04, nRst, $08, nG3, $04, $24, $0C, nF3, nEb3, nD3, nC4
000AF08F 4808 0408 0480 08B3 0422+  	dc.b	$48, $08, $04, $08, $04, nRst, $08, nD4, $04, $22, smpsNoAttack, $1A
000AF09B 0804 8008 B304 8008 B404+  	dc.b	$08, $04, nRst, $08, nD4, $04, nRst, $08, nEb4, $04, $2E, smpsNoAttack
000AF0A7 0E08 0480 08B4 0480 08B6+  	dc.b	$0E, $08, $04, nRst, $08, nEb4, $04, nRst, $08, nF4, $04, $24
000AF0B3 BB30 B860 B118 B1B4 18B3   	dc.b	nBb4, $30, nG4, $60, nC4, $18, nC4, nEb4, $18, nD4
000AF0BD E606                       	smpsAlterVol        $06
000AF0BF F6FE 14                    	smpsJump            RRZ2_Jump01
000AF0C2                            
000AF0C2                            ; FM4 Data
000AF0C2                            RRZ2_FM4:
000AF0C2 E040                       	smpsPan             panRight, $00
000AF0C9                            
000AF0C9                            RRZ2_Jump00:
000AF0C9 EF02                       	smpsSetvoice        $02
000AF0CB                            
000AF0CB                            RRZ2_Loop03:
000AF0CB AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF0D7 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF0E3 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF0EF AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AF0FB ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AF100 F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop03
000AF105 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF111 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF11D 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF129 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AF135 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AF13B                            
000AF13B                            RRZ2_Loop04:
000AF13B A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AF147 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AF153 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AF15F 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AF16B 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AF177 A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AF183 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AF18F A804 AA80 08AC AF04 AC80+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, nRst, $08
000AF19A F700 05FF 9D               	smpsLoop            $00, $05, RRZ2_Loop04
000AF19F A00C ACA0 08AA 0CA0 04A8+  	dc.b	nG2, $0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2
000AF1AB 08A7 0CA0 04A8 8008 A004+  	dc.b	$08, nD3, $0C, nG2, $04, nEb3, nRst, $08, nG2, $04, nRst, $08
000AF1B7 A5A7 04A8 08AC 0480 08A0+  	dc.b	nC3, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nG2, $04, nC3
000AF1C3 08A7 04A8 08AC 0480 08AF+  	dc.b	$08, nD3, $04, nEb3, $08, nG3, $04, nRst, $08, nBb3, $10, nG2
000AF1CF 0CAC A008 AA0C A004 A80C+  	dc.b	$0C, nG3, nG2, $08, nF3, $0C, nG2, $04, nEb3, $0C, nG2, $08
000AF1DB A70C A004 A880 08A5 A004+  	dc.b	nD3, $0C, nG2, $04, nEb3, nRst, $08, nC3, nG2, $04, nG3, $08
000AF1E7 AA04 A808 A704 8008 A804+  	dc.b	nF3, $04, nEb3, $08, nD3, $04, nRst, $08, nEb3, $04, nF3, $08
000AF1F3 A804 AA80 08AC AF04 AC08+  	dc.b	nEb3, $04, nF3, nRst, $08, nG3, nBb3, $04, nG3, $08, nRst, $04
000AF1FF EF05                       	smpsSetvoice        $05
000AF201 8060 8018 800C BD04 B9B4+  	dc.b	nRst, $60, nRst, $18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4
000AF20D B1B4 B1AD B1AD A8A1 0C80+  	dc.b	nC4, nEb4, nC4, nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst
000AF219 0CB7 04B2 AFAB AFB2 B7AF+  	dc.b	$0C, nFs4, $04, nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3
000AF225 ABAF ABA6 E7A3 1CE7 0880+  	dc.b	nFs3, nBb3, nFs3, nCs3, smpsNoAttack, nBb2, $1C, smpsNoAttack, $08, nRst, $58, nRst
000AF231 1880 0CBD 04B9 B4B9 B4B1+  	dc.b	$18, nRst, $0C, nC5, $04, nAb4, nEb4, nAb4, nEb4, nC4, nEb4, nC4
000AF23D ADB1 ADA8 A10C 8060 800C+  	dc.b	nAb3, nC4, nAb3, nEb3, nAb2, $0C, nRst, $60, nRst, $0C, nFs4, $04
000AF249 B2AF ABAF B2B7 AFAB A6AB+  	dc.b	nCs4, nBb3, nFs3, nBb3, nCs4, nFs4, nBb3, nFs3, nCs3, nFs3, nBb3, nFs3
000AF255 A6E7 A31C                  	dc.b	nCs3, smpsNoAttack, nBb2, $1C
000AF259 E6FA                       	smpsAlterVol        $FA
000AF25B A060 E7A0 AC48 0804 8008+  	dc.b	nG2, $60, smpsNoAttack, nG2, nG3, $48, $08, $04, nRst, $08, nG3, $04
000AF267 8008 AC04 22E7 1A08 0480+  	dc.b	nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08, nG3
000AF273 0480 08A8 0422 E71A 0804+  	dc.b	$04, nRst, $08, nEb3, $04, $22, smpsNoAttack, $1A, $08, $04, nRst, $08
000AF27F A804 8008 A704 2418 A0AC+  	dc.b	nEb3, $04, nRst, $08, nD3, $04, $24, $18, nG2, nG3, $48, $08
000AF28B 0408 0480 08AC 0422 E71A+  	dc.b	$04, $08, $04, nRst, $08, nG3, $04, $22, smpsNoAttack, $1A, $08, $04
000AF297 8008 AC04 8008 AC04 2EE7+  	dc.b	nRst, $08, nG3, $04, nRst, $08, nG3, $04, $2E, smpsNoAttack, $0E, $08
000AF2A3 0480 08AC 0480 08AF 0424+  	dc.b	$04, nRst, $08, nG3, $04, nRst, $08, nBb3, $04, $24, nD4, $30
000AF2AF B160 AC18 ACAC 18AC        	dc.b	nC4, $60, nG3, $18, nG3, nG3, $18, nG3
000AF2B7 E606                       	smpsAlterVol        $06
000AF2B9 F6FE 0E                    	smpsJump            RRZ2_Jump00
000AF2BC                            
000AF2BC                            ; FM5 Data
000AF2BC                            RRZ2_FM5:
000AF2C1 8010                       	dc.b	nRst, $10
000AF2C3 E101                       	smpsAlterNote       $01
000AF2C5 F6F8 DB                    	smpsJump            RRZ2_FM1
000AF2C8                            
000AF2C8                            ; PSG1 Data
000AF2C8                            RRZ2_PSG1:
000AF2CD F507                       	smpsPSGvoice        stone_1D
000AF2CF B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF2DB 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF2E7 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF2F3 8008 B104 AF08 B104 8008+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04
000AF2FF ACAF B1B8 0810             	dc.b	nG3, nBb3, nC4, nG4, $08, $10
000AF305 F700 03FF BF               	smpsLoop            $00, $03, RRZ2_PSG1
000AF30A B108 04AF 08B1 0480 08B1+  	dc.b	nC4, $08, $04, nBb3, $08, nC4, $04, nRst, $08, nC4, $04, nBb3
000AF316 08B1 0480 08B1 04AC AFB1+  	dc.b	$08, nC4, $04, nRst, $08, nC4, $04, nG3, nBb3, nC4, nEb4, $08
000AF322 04B3 08AF 04B1 0804 AF08+  	dc.b	$04, nD4, $08, nBb3, $04, nC4, $08, $04, nBb3, $08, nC4, $04
000AF32E 8008 B104 AF08 B104 B8B6+  	dc.b	nRst, $08, nC4, $04, nBb3, $08, nC4, $04, nG4, nF4, nG4, nF4
000AF33A B4B6 B4B3 B4B3 B1AF        	dc.b	nEb4, nF4, nEb4, nD4, nEb4, nD4, nC4, nBb3
000AF342 F507                       	smpsPSGvoice        stone_26
000AF344 B860 E7B8 1680 4AB8 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AF350 804A                       	dc.b	nRst, $4A
000AF352                            
000AF352                            RRZ2_Loop0D:
000AF352 B860 E7B8 1680 4ABB 60E7+  	dc.b	nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack, nBb4, $16
000AF35E 804A                       	dc.b	nRst, $4A
000AF360 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0D
000AF365 BA60 E7BA 1680 4AB8 60E7+  	dc.b	nA4, $60, smpsNoAttack, nA4, $16, nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16
000AF371 804A B860 E7B8 1680 4ABB+  	dc.b	nRst, $4A, nG4, $60, smpsNoAttack, nG4, $16, nRst, $4A, nBb4, $60, smpsNoAttack
000AF37D BB16 804A                  	dc.b	nBb4, $16, nRst, $4A
000AF381                            
000AF381                            RRZ2_Loop0E:
000AF381 F507                       	smpsPSGvoice        stone_23
000AF383 B808 04B8 8008 B8B6 0480+  	dc.b	nG4, $08, $04, nG4, nRst, $08, nG4, nF4, $04, nRst, $08, nG4
000AF38F 0480 08B8 04B6 8008 B8BB+  	dc.b	$04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4, $04, nRst
000AF39B 08B8 0480 08B8 04B6 8008+  	dc.b	$08, nG4, $04, nRst, $08, nG4, $04, nF4, nRst, $08, nG4, nBb4
000AF3A7 0480 08B6 0680 2E          	dc.b	$04, nRst, $08, nF4, $06, nRst, $2E
000AF3AE F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0E
000AF3B3                            
000AF3B3                            RRZ2_Loop0F:
000AF3B3 F507                       	smpsPSGvoice        stone_1D
000AF3B5 B908 0480 08B9 0480 08B9+  	dc.b	nAb4, $08, $04, nRst, $08, nAb4, $04, nRst, $08, nAb4, $04, nRst
000AF3C1 08B9 0430 E760 B708 0480+  	dc.b	$08, nAb4, $04, $30, smpsNoAttack, $60, nFs4, $08, $04, nRst, $08, nFs4
000AF3CD 0480 08B7 0480 08B7 0430+  	dc.b	$04, nRst, $08, nFs4, $04, nRst, $08, nFs4, $04, $30, smpsNoAttack, $60
000AF3D9 F700 02FF D6               	smpsLoop            $00, $02, RRZ2_Loop0F
000AF3DE 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AF3EA B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AF3F6 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AF402 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AF40E B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AF41A B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AF426 30AC A518 ACB4 BB          	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4
000AF42D F6FE 99                    	smpsJump            RRZ2_PSG1
000AF430                            
000AF430                            ; PSG2 Data
000AF430                            RRZ2_PSG2:
000AF435 F507                       	smpsPSGvoice        stone_1D
000AF437                            
000AF437                            RRZ2_Loop09:
000AF437 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF443 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF44F 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF45B AC04 AA08 AC04 8008 AC04+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3
000AF467 ACAF 08B3 10               	dc.b	nG3, nBb3, $08, nD4, $10
000AF46C F700 03FF C7               	smpsLoop            $00, $03, RRZ2_Loop09
000AF471 AC08 04AA 08AC 0480 08AC+  	dc.b	nG3, $08, $04, nF3, $08, nG3, $04, nRst, $08, nG3, $04, nF3
000AF47D 08AC 0480 08AC 04A8 AAAC+  	dc.b	$08, nG3, $04, nRst, $08, nG3, $04, nEb3, nF3, nG3, nBb3, $08
000AF489 04AC 0804 0804 AA08 AC04+  	dc.b	$04, nG3, $08, $04, $08, $04, nF3, $08, nG3, $04, nRst, $08
000AF495 AC04 AA08 AC04 B4B3 B4B3+  	dc.b	nG3, $04, nF3, $08, nG3, $04, nEb4, nD4, nEb4, nD4, nC4, nD4
000AF4A1 B1AF B1AF ACAA             	dc.b	nC4, nBb3, nC4, nBb3, nG3, nF3
000AF4A7 F507                       	smpsPSGvoice        stone_26
000AF4A9 B160 E7B1 1680 4AB1 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16
000AF4B5 804A                       	dc.b	nRst, $4A
000AF4B7                            
000AF4B7                            RRZ2_Loop0A:
000AF4B7 B160 E7B1 1680 4AB4 60E7+  	dc.b	nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AF4C3 804A                       	dc.b	nRst, $4A
000AF4C5 F700 02FF EE               	smpsLoop            $00, $02, RRZ2_Loop0A
000AF4CA B660 E7B6 1680 4AB4 60E7+  	dc.b	nF4, $60, smpsNoAttack, nF4, $16, nRst, $4A, nEb4, $60, smpsNoAttack, nEb4, $16
000AF4D6 804A B160 E7B1 1680 4AB4+  	dc.b	nRst, $4A, nC4, $60, smpsNoAttack, nC4, $16, nRst, $4A, nEb4, $60, smpsNoAttack
000AF4E2 B416 804A                  	dc.b	nEb4, $16, nRst, $4A
000AF4E6                            
000AF4E6                            RRZ2_Loop0B:
000AF4E6 F507                       	smpsPSGvoice        stone_23
000AF4E8 B408 04B4 8008 B4B3 0480+  	dc.b	nEb4, $08, $04, nEb4, nRst, $08, nEb4, nD4, $04, nRst, $08, nEb4
000AF4F4 0480 08B4 04B3 8008 B4B8+  	dc.b	$04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4, $04, nRst
000AF500 08B4 0480 08B4 04B3 8008+  	dc.b	$08, nEb4, $04, nRst, $08, nEb4, $04, nD4, nRst, $08, nEb4, nG4
000AF50C 0480 08B3 0680 2E          	dc.b	$04, nRst, $08, nD4, $06, nRst, $2E
000AF513 F700 02FF CF               	smpsLoop            $00, $02, RRZ2_Loop0B
000AF518                            
000AF518                            RRZ2_Loop0C:
000AF518 F507                       	smpsPSGvoice        stone_1D
000AF51A B208 0480 08B2 0480 08B2+  	dc.b	nCs4, $08, $04, nRst, $08, nCs4, $04, nRst, $08, nCs4, $04, nRst
000AF526 08B2 04B1 30E7 60B0 0804+  	dc.b	$08, nCs4, $04, nC4, $30, smpsNoAttack, $60, nB3, $08, $04, nRst, $08
000AF532 B004 8008 B004 8008 B004+  	dc.b	nB3, $04, nRst, $08, nB3, $04, nRst, $08, nB3, $04, nBb3, $30
000AF53E E760                       	dc.b	smpsNoAttack, $60
000AF540 F700 02FF D4               	smpsLoop            $00, $02, RRZ2_Loop0C
000AF545 800D                       	dc.b	nRst, $0D
000AF547 EC02                       	smpsPSGAlterVol     $02
000AF549 8060 8030 B804 B1B8 BDB8+  	dc.b	nRst, $60, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AF555 B1B8 B10C 8030 B804 B1B8+  	dc.b	nC4, nG4, nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4
000AF561 BDB8 B1B8 B10C 8060 8060+  	dc.b	nC5, nG4, nC4, nG4, nC4, $0C, nRst, $60, nRst, $60, nRst, $60
000AF56D 8030 B804 B1B8 BDB8 BDB8+  	dc.b	nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4, nC4, nG4
000AF579 B10C 8030 B804 B1B8 BDB8+  	dc.b	nC4, $0C, nRst, $30, nG4, $04, nC4, nG4, nC5, nG4, nC5, nG4
000AF585 B1B8 B10C 8060 B618 B3AF+  	dc.b	nC4, nG4, nC4, $0C, nRst, $60, nF4, $18, nD4, nBb3, nG3, nC3
000AF591 30AC A518 ACB4 BB0B        	dc.b	$30, nG3, nC3, $18, nG3, nEb4, nBb4, $0B
000AF599 ECFE                       	smpsPSGAlterVol     $FE
000AF59B F6FE 93                    	smpsJump            RRZ2_PSG2
000AF59E                            
000AF59E                            ; PSG3 Data
000AF59E                            RRZ2_PSG3:
000AF59E F3E7                       	smpsPSGform         $E7
000AF5A0 8060 80                    	dc.b	nRst, $60, nRst
000AF5A3 F800 00                    	smpsCall            RRZ2_Call00
000AF5A6 F800 00                    	smpsCall            RRZ2_Call00
000AF5A9 F800 00                    	smpsCall            RRZ2_Call01
000AF5AC                            
000AF5AC                            RRZ2_Jump03:
000AF5AC F800 00                    	smpsCall            RRZ2_Call00
000AF5AF F6FF FB                    	smpsJump            RRZ2_Jump03
000AF5B2                            
000AF5B2                            RRZ2_Call00:
000AF5B2 F502                       	smpsPSGvoice        stone_0F
000AF5B4 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AF5BB F700 10FF F3               	smpsLoop            $00, $10, RRZ2_Call00
000AF5C0 E3                         	smpsReturn
000AF5C1                            
000AF5C1                            RRZ2_Call01:
000AF5C1 F502                       	smpsPSGvoice        stone_0F
000AF5C3 B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AF5CA F502                       	smpsPSGvoice        stone_0F
000AF5CC B104 8080 B180 B1          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nC4
000AF5D3 F502                       	smpsPSGvoice        stone_0F
000AF5D5 B104 8080 B180 80          	dc.b	nC4, $04, nRst, nRst, nC4, nRst, nRst
000AF5DC F503                       	smpsPSGvoice        stone_04
000AF5DE B10C                       	dc.b	nC4, $0C
000AF5E0 F502                       	smpsPSGvoice        stone_0F
000AF5E2 B104 8080                  	dc.b	nC4, $04, nRst, nRst
000AF5E6 E3                         	smpsReturn
000AF5E7                            
000AF5E7                            ; DAC Data
000AF5E7                            RRZ2_DAC:
000AF5E7 8160 8048 810C 8181 6080+  	dc.b	dKick, $60, nRst, $48, dKick, $0C, dKick, dKick, $60, nRst, $48, dHiTimpani
000AF5F3 0488 8A8B 8B8B 8160 8048+  	dc.b	$04, dHiTimpani, dLowTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $60, nRst, $48, dKick, $0C
000AF5FF 8181 6080 0882 0480 8080+  	dc.b	dKick, dKick, $60, nRst, $08, dSnare, $04, nRst, nRst, nRst, dSnare, nRst
000AF60B 8080 8080 8280 8082 8080+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, dSnare, nRst, nRst, dFloorTimpani, $04
000AF617 8B8B 8B8B 8B81 0480 8080+  	dc.b	dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dFloorTimpani, dKick, $04, nRst, nRst, nRst, nRst, nRst
000AF623 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000AF62F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, dKick
000AF63B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000AF647 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000AF653 8280 8080 8080 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, dKick, nRst, nRst
000AF65F 8280 8080 8080 8180 8080+  	dc.b	dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst, nRst, nRst, nRst
000AF66B 8280 8080 8081 8180 8081+  	dc.b	dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst, dKick, nRst, nRst
000AF677 8280 8082 8282             	dc.b	dSnare, nRst, nRst, dSnare, dSnare, dSnare
000AF67D                            
000AF67D                            RRZ2_Loop00:
000AF67D 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF689 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF695 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF6A1 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AF6AD 80                         	dc.b	nRst
000AF6AE F700 07FF CB               	smpsLoop            $00, $07, RRZ2_Loop00
000AF6B3 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF6BF 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF6CB 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF6D7 8081 8181 8180 8082 8080+  	dc.b	nRst, dKick, dKick, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare
000AF6E3 82                         	dc.b	dSnare
000AF6E4                            
000AF6E4                            RRZ2_Loop01:
000AF6E4 8104 8080 8080 8182 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF6F0 8181 8080 8180 8082 8080+  	dc.b	dKick, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF6FC 8081 8080 8080 8182 8080+  	dc.b	nRst, dKick, nRst, nRst, nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst
000AF708 8081 8080 8180 8082 8080+  	dc.b	nRst, dKick, nRst, nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AF714 80                         	dc.b	nRst
000AF715 F700 02FF CB               	smpsLoop            $00, $02, RRZ2_Loop01
000AF71A 8104 8080 8180 8180 8082+  	dc.b	dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst, dSnare, nRst, nRst
000AF726 8181 3081 0480 8081 8081+  	dc.b	dKick, dKick, $30, dKick, $04, nRst, nRst, dKick, nRst, dKick, nRst, nRst
000AF732 8180 8081 8118 8181 0480+  	dc.b	dKick, nRst, nRst, dKick, dKick, $18, dKick, dKick, $04, nRst, nRst, dKick
000AF73E 8081 8080 8280 8081 8180+  	dc.b	nRst, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, dKick, nRst, nRst, nRst
000AF74A 8081 8280 8080 8080 8180+  	dc.b	nRst, dKick, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dSnare, nRst
000AF756 8080 8280 8080 8080 8180+  	dc.b	nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, dKick, dSnare
000AF762 8080 8180 8182 8080 8104+  	dc.b	nRst, nRst, dKick, nRst, dKick, dSnare, nRst, nRst, dKick, $04, nRst, nRst
000AF76E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF77A 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF786 8080 8182 8080 8080 8181+  	dc.b	nRst, nRst, dKick, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000AF792 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF79E 8080 8082 8080 8080 8081+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF7AA 8180 8082 8080 8080 8081+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF7B6 8080 8082 8080 8080 8181+  	dc.b	nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, dKick, nRst, nRst
000AF7C2 8180 8082 8080 8282 8281+  	dc.b	dKick, nRst, nRst, dSnare, nRst, nRst, dSnare, dSnare, dSnare, dKick, $04, nRst
000AF7CE 8080 8080 8280 8080 8081+  	dc.b	nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst, nRst
000AF7DA 8181 8080 8280 8080 8080+  	dc.b	dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst, dKick, $04
000AF7E6 8080 8080 8082 8080 8080+  	dc.b	nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick, nRst
000AF7F2 8081 8180 8082 8080 8A8B+  	dc.b	nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dLowTimpani, dFloorTimpani, dFloorTimpani, dKick
000AF7FE 0480 8080 8080 8280 8080+  	dc.b	$04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, dKick
000AF80A 8080 8181 8080 8280 8080+  	dc.b	nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst, nRst
000AF816                            
000AF816                            RRZ2_Loop02:
000AF816 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF822 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF82E 80                         	dc.b	nRst
000AF82F F700 07FF E3               	smpsLoop            $00, $07, RRZ2_Loop02
000AF834 8104 8080 8080 8082 8080+  	dc.b	dKick, $04, nRst, nRst, nRst, nRst, nRst, dSnare, nRst, nRst, nRst, nRst
000AF840 8180 8081 8180 8082 8080+  	dc.b	dKick, nRst, nRst, dKick, dKick, nRst, nRst, dSnare, nRst, nRst, dKick, nRst
000AF84C 8181 1818 8204 0404 0404+  	dc.b	dKick, dKick, $18, $18, dSnare, $04, $04, $04, $04, $04, $04, $04
000AF858 0404 0404 04               	dc.b	$04, $04, $04, $04, $04
000AF85D F6FD 88                    	smpsJump            RRZ2_DAC
000AF860                            
000AF860                            RRZ2_Voices:
000AF860                            ;	Voice $00
000AF860                            ;	$3A
000AF860                            ;	$3F, $73, $73, $31, 	$9F, $5F, $54, $17, 	$03, $14, $0A, $05
000AF860                            ;	$01, $05, $01, $01, 	$FF, $EF, $8F, $FF, 	$29, $39, $23, $00
000AF860                            	smpsVcAlgorithm     $02
000AF860                            	smpsVcFeedback      $07
000AF860                            	smpsVcUnusedBits    $00
000AF860                            	smpsVcDetune        $03, $07, $07, $03
000AF860                            	smpsVcCoarseFreq    $01, $03, $03, $0F
000AF860                            	smpsVcRateScale     $00, $01, $01, $02
000AF860                            	smpsVcAttackRate    $17, $14, $1F, $1F
000AF860                            	smpsVcAmpMod        $00, $00, $00, $00
000AF860                            	smpsVcDecayRate1    $05, $0A, $14, $03
000AF860                            	smpsVcDecayRate2    $01, $01, $05, $01
000AF860                            	smpsVcDecayLevel    $0F, $08, $0E, $0F
000AF860                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF879                            
000AF879                            ;	Voice $01
000AF879                            ;	$3C
000AF879                            ;	$01, $00, $00, $00, 	$1F, $1F, $15, $1F, 	$11, $03, $12, $05
000AF879                            ;	$07, $04, $09, $02, 	$55, $3A, $25, $1A, 	$1A, $00, $07, $00
000AF879                            	smpsVcAlgorithm     $04
000AF879                            	smpsVcFeedback      $07
000AF879                            	smpsVcUnusedBits    $00
000AF879                            	smpsVcDetune        $00, $00, $00, $00
000AF879                            	smpsVcCoarseFreq    $00, $00, $00, $01
000AF879                            	smpsVcRateScale     $00, $00, $00, $00
000AF879                            	smpsVcAttackRate    $1F, $15, $1F, $1F
000AF879                            	smpsVcAmpMod        $00, $00, $00, $00
000AF879                            	smpsVcDecayRate1    $05, $12, $03, $11
000AF879                            	smpsVcDecayRate2    $02, $09, $04, $07
000AF879                            	smpsVcDecayLevel    $01, $02, $03, $05
000AF879                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000AF892                            
000AF892                            ;	Voice $02
000AF892                            ;	$3A
000AF892                            ;	$73, $04, $11, $31, 	$9F, $DF, $9F, $9F, 	$05, $05, $03, $0A
000AF892                            ;	$03, $02, $03, $02, 	$6F, $6F, $5F, $7F, 	$1C, $20, $1E, $00
000AF892                            	smpsVcAlgorithm     $02
000AF892                            	smpsVcFeedback      $07
000AF892                            	smpsVcUnusedBits    $00
000AF892                            	smpsVcDetune        $03, $01, $00, $07
000AF892                            	smpsVcCoarseFreq    $01, $01, $04, $03
000AF892                            	smpsVcRateScale     $02, $02, $03, $02
000AF892                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF892                            	smpsVcAmpMod        $00, $00, $00, $00
000AF892                            	smpsVcDecayRate1    $0A, $03, $05, $05
000AF892                            	smpsVcDecayRate2    $02, $03, $02, $03
000AF892                            	smpsVcDecayLevel    $07, $05, $06, $06
000AF892                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF8AB                            
000AF8AB                            ;	Voice $03
000AF8AB                            ;	$3E
000AF8AB                            ;	$07, $01, $02, $0A, 	$1F, $1F, $1F, $1F, 	$03, $06, $00, $00
000AF8AB                            ;	$08, $06, $07, $0C, 	$15, $0A, $0A, $0A, 	$20, $05, $06, $08
000AF8AB                            	smpsVcAlgorithm     $06
000AF8AB                            	smpsVcFeedback      $07
000AF8AB                            	smpsVcUnusedBits    $00
000AF8AB                            	smpsVcDetune        $00, $00, $00, $00
000AF8AB                            	smpsVcCoarseFreq    $0A, $02, $01, $07
000AF8AB                            	smpsVcRateScale     $00, $00, $00, $00
000AF8AB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF8AB                            	smpsVcAmpMod        $00, $00, $00, $00
000AF8AB                            	smpsVcDecayRate1    $00, $00, $06, $03
000AF8AB                            	smpsVcDecayRate2    $0C, $07, $06, $08
000AF8AB                            	smpsVcDecayLevel    $00, $00, $00, $01
000AF8AB                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000AF8C4                            
000AF8C4                            ;	Voice $04
000AF8C4                            ;	$3C
000AF8C4                            ;	$71, $71, $11, $11, 	$17, $1E, $19, $1E, 	$04, $01, $07, $01
000AF8C4                            ;	$00, $00, $00, $00, 	$F7, $F8, $F7, $F8, 	$1E, $00, $14, $00
000AF8C4                            	smpsVcAlgorithm     $04
000AF8C4                            	smpsVcFeedback      $07
000AF8C4                            	smpsVcUnusedBits    $00
000AF8C4                            	smpsVcDetune        $01, $01, $07, $07
000AF8C4                            	smpsVcCoarseFreq    $01, $01, $01, $01
000AF8C4                            	smpsVcRateScale     $00, $00, $00, $00
000AF8C4                            	smpsVcAttackRate    $1E, $19, $1E, $17
000AF8C4                            	smpsVcAmpMod        $00, $00, $00, $00
000AF8C4                            	smpsVcDecayRate1    $01, $07, $01, $04
000AF8C4                            	smpsVcDecayRate2    $00, $00, $00, $00
000AF8C4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000AF8C4                            	smpsVcReleaseRate   $08, $07, $08, $07
000AF8DD                            
000AF8DD                            ;	Voice $05
000AF8DD                            ;	$16
000AF8DD                            ;	$7A, $74, $3C, $31, 	$1F, $1F, $1F, $1F, 	$0A, $08, $0C, $0A
000AF8DD                            ;	$07, $0A, $07, $05, 	$2F, $AF, $AF, $5F, 	$14, $05, $0A, $00
000AF8DD                            	smpsVcAlgorithm     $06
000AF8DD                            	smpsVcFeedback      $02
000AF8DD                            	smpsVcUnusedBits    $00
000AF8DD                            	smpsVcDetune        $03, $03, $07, $07
000AF8DD                            	smpsVcCoarseFreq    $01, $0C, $04, $0A
000AF8DD                            	smpsVcRateScale     $00, $00, $00, $00
000AF8DD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AF8DD                            	smpsVcAmpMod        $00, $00, $00, $00
000AF8DD                            	smpsVcDecayRate1    $0A, $0C, $08, $0A
000AF8DD                            	smpsVcDecayRate2    $05, $07, $0A, $07
000AF8DD                            	smpsVcDecayLevel    $05, $0A, $0A, $02
000AF8DD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AF8F6                            
000AF8F6                            
000AF8F6                            		even				
000AF8F6                            Music9B:		incbin	"sound/music/Mus9B - TTZ BF US.bin"
000B04D8                            		even
000B04D8                            Music9C:		include	"sound/music/Mus9C - Tribute.asm"
000B04D8                            Tribute_Header:
000B04D8                            	smpsHeaderStartSong 3
000B04DA 0603                       	smpsHeaderChan      $06, $03
000B04DC 0106                       	smpsHeaderTempo     $01, $06
000B04DE                            
000B04E2 0000 000D                  	smpsHeaderFM        Tribute_FM1,	$00, $0D
000B04E6 0000 0016                  	smpsHeaderFM        Tribute_FM2,	$00, $16
000B04EA 0000 0016                  	smpsHeaderFM        Tribute_FM3,	$00, $16
000B04EE 0000 0016                  	smpsHeaderFM        Tribute_FM4,	$00, $16
000B04F2 0000 0C15                  	smpsHeaderFM        Tribute_FM5,	$0C, $15
000B04F6                            ;	smpsHeaderFM        Tribute_FM6,	$0C, $17
000B0508                            
000B0508                            ; FM1 Data
000B0508                            Tribute_FM1:
000B0508 EF00                       	smpsSetvoice        $00
000B050A F800 00                    	smpsCall            Tribute_Call05
000B050D E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B0519 9BE7 069B 06A7 9BA7 9B80+  	dc.b	nD2, smpsNoAttack, $06, nD2, $06, nD3, nD2, nD3, nD2, nRst, nD2, $0C
000B0525 06A7 9B99 9A9B 9E          	dc.b	$06, nD3, nD2, nC2, nCs2, nD2, nF2
000B052C F800 00                    	smpsCall            Tribute_Call05
000B052F E712 9B06 8024 9B06 8080+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst
000B053B 94                         	dc.b	nG1
000B053C EA09                       	smpsSetTempoMod     $09
000B053E E760 E748 8018             	dc.b	smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0544                            
000B0544                            Tribute_Loop05:
000B0544 9918 0C0C 1206 80A5 8098+  	dc.b	nC2, $18, $0C, $0C, $12, $06, nRst, nC3, nRst, nB1, smpsNoAttack, $18
000B0550 0C0C 120C A006 940C 9618+  	dc.b	$0C, $0C, $12, $0C, nG2, $06, nG1, $0C, nA1, $18, $0C, $0C
000B055C 1206 80A2 8094 E70C 0C0C+  	dc.b	$12, $06, nRst, nA2, nRst, nG1, smpsNoAttack, $0C, $0C, $0C, $0C, $0C
000B0568 0C0C 999B 180C 0C12 0680+  	dc.b	$0C, $0C, nC2, nD2, $18, $0C, $0C, $12, $06, nRst, nD3, nRst
000B0574 97E7 0C0C 0C0C 1212 A306+  	dc.b	nBb1, smpsNoAttack, $0C, $0C, $0C, $0C, $12, $12, nBb2, $06, nRst, nA1
000B0580 180C 0C12 0680 A280 92E7+  	dc.b	$18, $0C, $0C, $12, $06, nRst, nA2, nRst, nF1, smpsNoAttack, $0C, $0C
000B058C 0C0C 910C 0C0C 9B          	dc.b	$0C, $0C, nE1, $0C, $0C, $0C, nD2
000B0593 F700 02FF AD               	smpsLoop            $00, $02, Tribute_Loop05
000B0598 9624 9530 940C E724 9330+  	dc.b	nA1, $24, nAb1, $30, nG1, $0C, smpsNoAttack, $24, nFs1, $30, nF1, $0C
000B05A4 E74E 8006 940C E760        	dc.b	smpsNoAttack, $4E, nRst, $06, nG1, $0C, smpsNoAttack, $60
000B05AC F800 00                    	smpsCall            Tribute_Call00
000B05AF F2                         	smpsStop
000B05B0                            
000B05B0                            Tribute_Call05:
000B05B0 9B12 0680 249B 0680 809B+  	dc.b	nD2, $12, $06, nRst, $24, nD2, $06, nRst, nRst, nD2, nRst, nD2
000B05BC E712 9B06 801E A706 9B80+  	dc.b	smpsNoAttack, $12, nD2, $06, nRst, $1E, nD3, $06, nD2, nRst, nRst, nD2
000B05C8 809B                       	dc.b	nRst, nD2
000B05CA E3                         	smpsReturn
000B05CB                            
000B05CB                            Tribute_Call00:
000B05CB 8006 999B A09E 9D94 99E7+  	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2, smpsNoAttack, $06, nG2
000B05D7 9EA5 A0A5 A7AC E706 9E9D+  	dc.b	nF2, nC3, nG2, nC3, nD3, nG3, smpsNoAttack, $06, nF2, nE2, nC2, nF1
000B05E3 9496 99E7 06               	dc.b	nG1, nA1, nC2, smpsNoAttack, $06
000B05E8 E3                         	smpsReturn
000B05E9                            
000B05E9                            ; FM2 Data
000B05E9                            Tribute_FM2:
000B05E9 EF01                       	smpsSetvoice        $01
000B05EB B512 B306                  	dc.b	nE4, $12, nD4, $06
000B05EF E60A                       	smpsFMAlterVol      $0A
000B05F1 0680                       	dc.b	$06, nRst
000B05F3 E6F6                       	smpsFMAlterVol      $F6
000B05F5 B8                         	dc.b	nG4
000B05F6 E60A                       	smpsFMAlterVol      $0A
000B05F8 0680                       	dc.b	$06, nRst
000B05FA E6F6                       	smpsFMAlterVol      $F6
000B05FC B6B5                       	dc.b	nF4, nE4
000B05FE E60A                       	smpsFMAlterVol      $0A
000B0600 06                         	dc.b	$06
000B0601 E6F6                       	smpsFMAlterVol      $F6
000B0603 B1                         	dc.b	nC4
000B0604 E60A                       	smpsFMAlterVol      $0A
000B0606 06                         	dc.b	$06
000B0607 E6F6                       	smpsFMAlterVol      $F6
000B0609 B3                         	dc.b	nD4
000B060A EF02                       	smpsSetvoice        $02
000B060C E918                       	smpsAlterPitch      $18
000B060E F800 00                    	smpsCall            Tribute_Call04
000B0611 EF01                       	smpsSetvoice        $01
000B0613 E9E8                       	smpsAlterPitch      $E8
000B0615 F800 00                    	smpsCall            Tribute_Call04
000B0618 B406 E712 18B6 1818        	dc.b	nEb4, $06, smpsNoAttack, $12, $18, nF4, $18, $18
000B0620 E60A                       	smpsFMAlterVol      $0A
000B0622 06                         	dc.b	$06
000B0623 E6F6                       	smpsFMAlterVol      $F6
000B0625 B512 B306                  	dc.b	nE4, $12, nD4, $06
000B0629 E60A                       	smpsFMAlterVol      $0A
000B062B 0680                       	dc.b	$06, nRst
000B062D E6F6                       	smpsFMAlterVol      $F6
000B062F B8                         	dc.b	nG4
000B0630 E60A                       	smpsFMAlterVol      $0A
000B0632 0680                       	dc.b	$06, nRst
000B0634 E6F6                       	smpsFMAlterVol      $F6
000B0636 B6B5                       	dc.b	nF4, nE4
000B0638 E60A                       	smpsFMAlterVol      $0A
000B063A 06                         	dc.b	$06
000B063B E6F6                       	smpsFMAlterVol      $F6
000B063D B1                         	dc.b	nC4
000B063E E60A                       	smpsFMAlterVol      $0A
000B0640 06                         	dc.b	$06
000B0641 E6F6                       	smpsFMAlterVol      $F6
000B0643 B3                         	dc.b	nD4
000B0644 EF02                       	smpsSetvoice        $02
000B0646 E918                       	smpsAlterPitch      $18
000B0648 F800 00                    	smpsCall            Tribute_Call04
000B064B EF01                       	smpsSetvoice        $01
000B064D E9E8                       	smpsAlterPitch      $E8
000B064F F800 00                    	smpsCall            Tribute_Call04
000B0652 B106 E760 E748 8018        	dc.b	nC4, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B065A                            
000B065A                            Tribute_Loop04:
000B065A 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B065E E60A                       	smpsFMAlterVol      $0A
000B0660 06                         	dc.b	$06
000B0661 E6F6                       	smpsFMAlterVol      $F6
000B0663 B50C                       	dc.b	nE4, $0C
000B0665 E60A                       	smpsFMAlterVol      $0A
000B0667 06                         	dc.b	$06
000B0668 E6F6                       	smpsFMAlterVol      $F6
000B066A 06                         	dc.b	$06
000B066B E60A                       	smpsFMAlterVol      $0A
000B066D 06                         	dc.b	$06
000B066E E6F6                       	smpsFMAlterVol      $F6
000B0670 06                         	dc.b	$06
000B0671 E60A                       	smpsFMAlterVol      $0A
000B0673 06                         	dc.b	$06
000B0674 E6F6                       	smpsFMAlterVol      $F6
000B0676 B3E7 60                    	dc.b	nD4, smpsNoAttack, $60
000B0679 F700 03FF DD               	smpsLoop            $00, $03, Tribute_Loop04
000B067E 8018 B512                  	dc.b	nRst, $18, nE4, $12
000B0682 E60A                       	smpsFMAlterVol      $0A
000B0684 06                         	dc.b	$06
000B0685 E6F6                       	smpsFMAlterVol      $F6
000B0687 B50C                       	dc.b	nE4, $0C
000B0689 E60A                       	smpsFMAlterVol      $0A
000B068B 06                         	dc.b	$06
000B068C E6F6                       	smpsFMAlterVol      $F6
000B068E 06                         	dc.b	$06
000B068F E60A                       	smpsFMAlterVol      $0A
000B0691 06                         	dc.b	$06
000B0692 E6F6                       	smpsFMAlterVol      $F6
000B0694 06                         	dc.b	$06
000B0695 E60A                       	smpsFMAlterVol      $0A
000B0697 06                         	dc.b	$06
000B0698 E6F6                       	smpsFMAlterVol      $F6
000B069A B5E7 30B3 18B8             	dc.b	nE4, smpsNoAttack, $30, nD4, $18, nG4
000B06A0 F701 02FF B6               	smpsLoop            $01, $02, Tribute_Loop04
000B06A5 B51E                       	dc.b	nE4, $1E
000B06A7 E60A                       	smpsFMAlterVol      $0A
000B06A9 06                         	dc.b	$06
000B06AA E6F6                       	smpsFMAlterVol      $F6
000B06AC B62A                       	dc.b	nF4, $2A
000B06AE E60A                       	smpsFMAlterVol      $0A
000B06B0 06                         	dc.b	$06
000B06B1 E6F6                       	smpsFMAlterVol      $F6
000B06B3 B52A                       	dc.b	nE4, $2A
000B06B5 E60A                       	smpsFMAlterVol      $0A
000B06B7 06                         	dc.b	$06
000B06B8 E6F6                       	smpsFMAlterVol      $F6
000B06BA B52A                       	dc.b	nE4, $2A
000B06BC E60A                       	smpsFMAlterVol      $0A
000B06BE 06                         	dc.b	$06
000B06BF E6F6                       	smpsFMAlterVol      $F6
000B06C1 B50C E74E                  	dc.b	nE4, $0C, smpsNoAttack, $4E
000B06C5 E60A                       	smpsFMAlterVol      $0A
000B06C7 06                         	dc.b	$06
000B06C8 E6F6                       	smpsFMAlterVol      $F6
000B06CA B30C E760                  	dc.b	nD4, $0C, smpsNoAttack, $60
000B06CE F800 00                    	smpsCall            Tribute_Call03
000B06D1 F2                         	smpsStop
000B06D2                            
000B06D2                            Tribute_Call04:
000B06D2 B506 E712 B306             	dc.b	nE4, $06, smpsNoAttack, $12, nD4, $06
000B06D8 E60A                       	smpsFMAlterVol      $0A
000B06DA 0680                       	dc.b	$06, nRst
000B06DC E6F6                       	smpsFMAlterVol      $F6
000B06DE B8                         	dc.b	nG4
000B06DF E60A                       	smpsFMAlterVol      $0A
000B06E1 0680                       	dc.b	$06, nRst
000B06E3 E6F6                       	smpsFMAlterVol      $F6
000B06E5 B6B5                       	dc.b	nF4, nE4
000B06E7 E60A                       	smpsFMAlterVol      $0A
000B06E9 06                         	dc.b	$06
000B06EA E6F6                       	smpsFMAlterVol      $F6
000B06EC B1                         	dc.b	nC4
000B06ED E60A                       	smpsFMAlterVol      $0A
000B06EF 06                         	dc.b	$06
000B06F0 E6F6                       	smpsFMAlterVol      $F6
000B06F2 B3                         	dc.b	nD4
000B06F3 E3                         	smpsReturn
000B06F4                            
000B06F4                            Tribute_Call03:
000B06F4 E918                       	smpsAlterPitch      $18
000B06F6 8006 999B A09E 9D94 99     	dc.b	nRst, $06, nC2, nD2, nG2, nF2, nE2, nG1, nC2
000B06FF E60A                       	smpsFMAlterVol      $0A
000B0701 06                         	dc.b	$06
000B0702 E6F6                       	smpsFMAlterVol      $F6
000B0704 A09E A5A0 A5A7 AC          	dc.b	nG2, nF2, nC3, nG2, nC3, nD3, nG3
000B070B E60A                       	smpsFMAlterVol      $0A
000B070D 06                         	dc.b	$06
000B070E E6F6                       	smpsFMAlterVol      $F6
000B0710 9E9D 9992 9496 99          	dc.b	nF2, nE2, nC2, nF1, nG1, nA1, nC2
000B0717 E60A                       	smpsFMAlterVol      $0A
000B0719 06                         	dc.b	$06
000B071A E6F6                       	smpsFMAlterVol      $F6
000B071C E9E8                       	smpsAlterPitch      $E8
000B071E E3                         	smpsReturn
000B071F                            
000B071F                            ; FM3 Data
000B071F                            Tribute_FM3:
000B071F EF01                       	smpsSetvoice        $01
000B0721 B112 B006                  	dc.b	nC4, $12, nB3, $06
000B0725 E60A                       	smpsFMAlterVol      $0A
000B0727 0680                       	dc.b	$06, nRst
000B0729 E6F6                       	smpsFMAlterVol      $F6
000B072B B3                         	dc.b	nD4
000B072C E60A                       	smpsFMAlterVol      $0A
000B072E 0680                       	dc.b	$06, nRst
000B0730 E6F6                       	smpsFMAlterVol      $F6
000B0732 B1B1                       	dc.b	nC4, nC4
000B0734 E60A                       	smpsFMAlterVol      $0A
000B0736 06                         	dc.b	$06
000B0737 E6F6                       	smpsFMAlterVol      $F6
000B0739 AE                         	dc.b	nA3
000B073A E60A                       	smpsFMAlterVol      $0A
000B073C 06                         	dc.b	$06
000B073D E6F6                       	smpsFMAlterVol      $F6
000B073F B0                         	dc.b	nB3
000B0740 EF02                       	smpsSetvoice        $02
000B0742 E918                       	smpsAlterPitch      $18
000B0744 E080                       	smpsPan             panLeft, $00
000B0746 F800 00                    	smpsCall            Tribute_Call02
000B0749 EF01                       	smpsSetvoice        $01
000B074B E9E8                       	smpsAlterPitch      $E8
000B074D E0C0                       	smpsPan             panCenter, $00
000B074F F800 00                    	smpsCall            Tribute_Call02
000B0752 AF06 E712 18B1 1818        	dc.b	nBb3, $06, smpsNoAttack, $12, $18, nC4, $18, $18
000B075A E60A                       	smpsFMAlterVol      $0A
000B075C 06                         	dc.b	$06
000B075D E6F6                       	smpsFMAlterVol      $F6
000B075F B112 B006                  	dc.b	nC4, $12, nB3, $06
000B0763 E60A                       	smpsFMAlterVol      $0A
000B0765 0680                       	dc.b	$06, nRst
000B0767 E6F6                       	smpsFMAlterVol      $F6
000B0769 B3                         	dc.b	nD4
000B076A E60A                       	smpsFMAlterVol      $0A
000B076C 0680                       	dc.b	$06, nRst
000B076E E6F6                       	smpsFMAlterVol      $F6
000B0770 B1B1                       	dc.b	nC4, nC4
000B0772 E60A                       	smpsFMAlterVol      $0A
000B0774 06                         	dc.b	$06
000B0775 E6F6                       	smpsFMAlterVol      $F6
000B0777 AE                         	dc.b	nA3
000B0778 E60A                       	smpsFMAlterVol      $0A
000B077A 06                         	dc.b	$06
000B077B E6F6                       	smpsFMAlterVol      $F6
000B077D B0                         	dc.b	nB3
000B077E EF02                       	smpsSetvoice        $02
000B0780 E918                       	smpsAlterPitch      $18
000B0782 E080                       	smpsPan             panLeft, $00
000B0784 F800 00                    	smpsCall            Tribute_Call02
000B0787 EF01                       	smpsSetvoice        $01
000B0789 E9E8                       	smpsAlterPitch      $E8
000B078B E0C0                       	smpsPan             panCenter, $00
000B078D F800 00                    	smpsCall            Tribute_Call02
000B0790 AE06 E760 E748 8018        	dc.b	nA3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0798                            
000B0798                            Tribute_Loop03:
000B0798 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B079C E60A                       	smpsFMAlterVol      $0A
000B079E 06                         	dc.b	$06
000B079F E6F6                       	smpsFMAlterVol      $F6
000B07A1 0C                         	dc.b	$0C
000B07A2 E60A                       	smpsFMAlterVol      $0A
000B07A4 06                         	dc.b	$06
000B07A5 E6F6                       	smpsFMAlterVol      $F6
000B07A7 06                         	dc.b	$06
000B07A8 E60A                       	smpsFMAlterVol      $0A
000B07AA 06                         	dc.b	$06
000B07AB E6F6                       	smpsFMAlterVol      $F6
000B07AD 06                         	dc.b	$06
000B07AE E60A                       	smpsFMAlterVol      $0A
000B07B0 06                         	dc.b	$06
000B07B1 E6F6                       	smpsFMAlterVol      $F6
000B07B3 B0E7 60                    	dc.b	nB3, smpsNoAttack, $60
000B07B6 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop03
000B07BB 8018 B112                  	dc.b	nRst, $18, nC4, $12
000B07BF E60A                       	smpsFMAlterVol      $0A
000B07C1 06                         	dc.b	$06
000B07C2 E6F6                       	smpsFMAlterVol      $F6
000B07C4 0C                         	dc.b	$0C
000B07C5 E60A                       	smpsFMAlterVol      $0A
000B07C7 06                         	dc.b	$06
000B07C8 E6F6                       	smpsFMAlterVol      $F6
000B07CA 06                         	dc.b	$06
000B07CB E60A                       	smpsFMAlterVol      $0A
000B07CD 06                         	dc.b	$06
000B07CE E6F6                       	smpsFMAlterVol      $F6
000B07D0 06                         	dc.b	$06
000B07D1 E60A                       	smpsFMAlterVol      $0A
000B07D3 06                         	dc.b	$06
000B07D4 E6F6                       	smpsFMAlterVol      $F6
000B07D6 AFE7 6080 18B1 12          	dc.b	nBb3, smpsNoAttack, $60, nRst, $18, nC4, $12
000B07DD E60A                       	smpsFMAlterVol      $0A
000B07DF 06                         	dc.b	$06
000B07E0 E6F6                       	smpsFMAlterVol      $F6
000B07E2 0C                         	dc.b	$0C
000B07E3 E60A                       	smpsFMAlterVol      $0A
000B07E5 06                         	dc.b	$06
000B07E6 E6F6                       	smpsFMAlterVol      $F6
000B07E8 06                         	dc.b	$06
000B07E9 E60A                       	smpsFMAlterVol      $0A
000B07EB 06                         	dc.b	$06
000B07EC E6F6                       	smpsFMAlterVol      $F6
000B07EE 06                         	dc.b	$06
000B07EF E60A                       	smpsFMAlterVol      $0A
000B07F1 06                         	dc.b	$06
000B07F2 E6F6                       	smpsFMAlterVol      $F6
000B07F4 B1E7 30B0 18B3             	dc.b	nC4, smpsNoAttack, $30, nB3, $18, nD4
000B07FA F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop03
000B07FF B11E                       	dc.b	nC4, $1E
000B0801 E60A                       	smpsFMAlterVol      $0A
000B0803 06                         	dc.b	$06
000B0804 E6F6                       	smpsFMAlterVol      $F6
000B0806 B12A                       	dc.b	nC4, $2A
000B0808 E60A                       	smpsFMAlterVol      $0A
000B080A 06                         	dc.b	$06
000B080B E6F6                       	smpsFMAlterVol      $F6
000B080D B12A                       	dc.b	nC4, $2A
000B080F E60A                       	smpsFMAlterVol      $0A
000B0811 06                         	dc.b	$06
000B0812 E6F6                       	smpsFMAlterVol      $F6
000B0814 B12A                       	dc.b	nC4, $2A
000B0816 E60A                       	smpsFMAlterVol      $0A
000B0818 06                         	dc.b	$06
000B0819 E6F6                       	smpsFMAlterVol      $F6
000B081B B10C E74E                  	dc.b	nC4, $0C, smpsNoAttack, $4E
000B081F E60A                       	smpsFMAlterVol      $0A
000B0821 06                         	dc.b	$06
000B0822 E6F6                       	smpsFMAlterVol      $F6
000B0824 B00C E760                  	dc.b	nB3, $0C, smpsNoAttack, $60
000B0828 E9F4                       	smpsAlterPitch      $F4
000B082A F8FE C8                    	smpsCall            Tribute_Call03
000B082D E90C                       	smpsAlterPitch      $0C
000B082F F2                         	smpsStop
000B0830                            
000B0830                            Tribute_Call02:
000B0830 B106 E712 B006             	dc.b	nC4, $06, smpsNoAttack, $12, nB3, $06
000B0836 E60A                       	smpsFMAlterVol      $0A
000B0838 0680                       	dc.b	$06, nRst
000B083A E6F6                       	smpsFMAlterVol      $F6
000B083C B3                         	dc.b	nD4
000B083D E60A                       	smpsFMAlterVol      $0A
000B083F 0680                       	dc.b	$06, nRst
000B0841 E6F6                       	smpsFMAlterVol      $F6
000B0843 B1B1                       	dc.b	nC4, nC4
000B0845 E60A                       	smpsFMAlterVol      $0A
000B0847 06                         	dc.b	$06
000B0848 E6F6                       	smpsFMAlterVol      $F6
000B084A AE                         	dc.b	nA3
000B084B E60A                       	smpsFMAlterVol      $0A
000B084D 06                         	dc.b	$06
000B084E E6F6                       	smpsFMAlterVol      $F6
000B0850 B0                         	dc.b	nB3
000B0851 E3                         	smpsReturn
000B0852                            
000B0852                            ; FM4 Data
000B0852                            Tribute_FM4:
000B0852 EF01                       	smpsSetvoice        $01
000B0854 AC12 06                    	dc.b	nG3, $12, $06
000B0857 E60A                       	smpsFMAlterVol      $0A
000B0859 0680                       	dc.b	$06, nRst
000B085B E6F6                       	smpsFMAlterVol      $F6
000B085D AF                         	dc.b	nBb3
000B085E E60A                       	smpsFMAlterVol      $0A
000B0860 0680                       	dc.b	$06, nRst
000B0862 E6F6                       	smpsFMAlterVol      $F6
000B0864 ACAC                       	dc.b	nG3, nG3
000B0866 E60A                       	smpsFMAlterVol      $0A
000B0868 06                         	dc.b	$06
000B0869 E6F6                       	smpsFMAlterVol      $F6
000B086B AA                         	dc.b	nF3
000B086C E60A                       	smpsFMAlterVol      $0A
000B086E 06                         	dc.b	$06
000B086F E6F6                       	smpsFMAlterVol      $F6
000B0871 AC                         	dc.b	nG3
000B0872 EF02                       	smpsSetvoice        $02
000B0874 E918                       	smpsAlterPitch      $18
000B0876 E040                       	smpsPan             panRight, $00
000B0878 F800 00                    	smpsCall            Tribute_Call01
000B087B EF01                       	smpsSetvoice        $01
000B087D E9E8                       	smpsAlterPitch      $E8
000B087F E0C0                       	smpsPan             panCenter, $00
000B0881 F800 00                    	smpsCall            Tribute_Call01
000B0884 AC06 E712 18AE 1818        	dc.b	nG3, $06, smpsNoAttack, $12, $18, nA3, $18, $18
000B088C E60A                       	smpsFMAlterVol      $0A
000B088E 06                         	dc.b	$06
000B088F E6F6                       	smpsFMAlterVol      $F6
000B0891 AC12 06                    	dc.b	nG3, $12, $06
000B0894 E60A                       	smpsFMAlterVol      $0A
000B0896 0680                       	dc.b	$06, nRst
000B0898 E6F6                       	smpsFMAlterVol      $F6
000B089A AF                         	dc.b	nBb3
000B089B E60A                       	smpsFMAlterVol      $0A
000B089D 0680                       	dc.b	$06, nRst
000B089F E6F6                       	smpsFMAlterVol      $F6
000B08A1 ACAC                       	dc.b	nG3, nG3
000B08A3 E60A                       	smpsFMAlterVol      $0A
000B08A5 06                         	dc.b	$06
000B08A6 E6F6                       	smpsFMAlterVol      $F6
000B08A8 AA                         	dc.b	nF3
000B08A9 E60A                       	smpsFMAlterVol      $0A
000B08AB 06                         	dc.b	$06
000B08AC E6F6                       	smpsFMAlterVol      $F6
000B08AE AC                         	dc.b	nG3
000B08AF EF02                       	smpsSetvoice        $02
000B08B1 E918                       	smpsAlterPitch      $18
000B08B3 E040                       	smpsPan             panRight, $00
000B08B5 F800 00                    	smpsCall            Tribute_Call01
000B08B8 EF01                       	smpsSetvoice        $01
000B08BA E9E8                       	smpsAlterPitch      $E8
000B08BC E0C0                       	smpsPan             panCenter, $00
000B08BE F800 00                    	smpsCall            Tribute_Call01
000B08C1 AA06 E760 E748 8018        	dc.b	nF3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B08C9                            
000B08C9                            Tribute_Loop02:
000B08C9 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B08CD E60A                       	smpsFMAlterVol      $0A
000B08CF 06                         	dc.b	$06
000B08D0 E6F6                       	smpsFMAlterVol      $F6
000B08D2 0C                         	dc.b	$0C
000B08D3 E60A                       	smpsFMAlterVol      $0A
000B08D5 06                         	dc.b	$06
000B08D6 E6F6                       	smpsFMAlterVol      $F6
000B08D8 06                         	dc.b	$06
000B08D9 E60A                       	smpsFMAlterVol      $0A
000B08DB 06                         	dc.b	$06
000B08DC E6F6                       	smpsFMAlterVol      $F6
000B08DE 06                         	dc.b	$06
000B08DF E60A                       	smpsFMAlterVol      $0A
000B08E1 06                         	dc.b	$06
000B08E2 E6F6                       	smpsFMAlterVol      $F6
000B08E4 ACE7 60                    	dc.b	nG3, smpsNoAttack, $60
000B08E7 F700 02FF DE               	smpsLoop            $00, $02, Tribute_Loop02
000B08EC 8018 AC12                  	dc.b	nRst, $18, nG3, $12
000B08F0 E60A                       	smpsFMAlterVol      $0A
000B08F2 06                         	dc.b	$06
000B08F3 E6F6                       	smpsFMAlterVol      $F6
000B08F5 0C                         	dc.b	$0C
000B08F6 E60A                       	smpsFMAlterVol      $0A
000B08F8 06                         	dc.b	$06
000B08F9 E6F6                       	smpsFMAlterVol      $F6
000B08FB 06                         	dc.b	$06
000B08FC E60A                       	smpsFMAlterVol      $0A
000B08FE 06                         	dc.b	$06
000B08FF E6F6                       	smpsFMAlterVol      $F6
000B0901 06                         	dc.b	$06
000B0902 E60A                       	smpsFMAlterVol      $0A
000B0904 06                         	dc.b	$06
000B0905 E6F6                       	smpsFMAlterVol      $F6
000B0907 AAE7 6080 18AC 12          	dc.b	nF3, smpsNoAttack, $60, nRst, $18, nG3, $12
000B090E E60A                       	smpsFMAlterVol      $0A
000B0910 06                         	dc.b	$06
000B0911 E6F6                       	smpsFMAlterVol      $F6
000B0913 0C                         	dc.b	$0C
000B0914 E60A                       	smpsFMAlterVol      $0A
000B0916 06                         	dc.b	$06
000B0917 E6F6                       	smpsFMAlterVol      $F6
000B0919 06                         	dc.b	$06
000B091A E60A                       	smpsFMAlterVol      $0A
000B091C 06                         	dc.b	$06
000B091D E6F6                       	smpsFMAlterVol      $F6
000B091F 06                         	dc.b	$06
000B0920 E60A                       	smpsFMAlterVol      $0A
000B0922 06                         	dc.b	$06
000B0923 E6F6                       	smpsFMAlterVol      $F6
000B0925 AEE7 30AD 18B0             	dc.b	nA3, smpsNoAttack, $30, nAb3, $18, nB3
000B092B F701 02FF 9A               	smpsLoop            $01, $02, Tribute_Loop02
000B0930 AC1E                       	dc.b	nG3, $1E
000B0932 E60A                       	smpsFMAlterVol      $0A
000B0934 06                         	dc.b	$06
000B0935 E6F6                       	smpsFMAlterVol      $F6
000B0937 AD2A                       	dc.b	nAb3, $2A
000B0939 E60A                       	smpsFMAlterVol      $0A
000B093B 06                         	dc.b	$06
000B093C E6F6                       	smpsFMAlterVol      $F6
000B093E AC2A                       	dc.b	nG3, $2A
000B0940 E60A                       	smpsFMAlterVol      $0A
000B0942 06                         	dc.b	$06
000B0943 E6F6                       	smpsFMAlterVol      $F6
000B0945 AE2A                       	dc.b	nA3, $2A
000B0947 E60A                       	smpsFMAlterVol      $0A
000B0949 06                         	dc.b	$06
000B094A E6F6                       	smpsFMAlterVol      $F6
000B094C AE0C E74E                  	dc.b	nA3, $0C, smpsNoAttack, $4E
000B0950 E60A                       	smpsFMAlterVol      $0A
000B0952 06                         	dc.b	$06
000B0953 E6F6                       	smpsFMAlterVol      $F6
000B0955 AC0C E760 8060             	dc.b	nG3, $0C, smpsNoAttack, $60, nRst, $60
000B095B F2                         	smpsStop
000B095C                            
000B095C                            Tribute_Call01:
000B095C AC06 E712 AC06             	dc.b	nG3, $06, smpsNoAttack, $12, nG3, $06
000B0962 E60A                       	smpsFMAlterVol      $0A
000B0964 0680                       	dc.b	$06, nRst
000B0966 E6F6                       	smpsFMAlterVol      $F6
000B0968 AF                         	dc.b	nBb3
000B0969 E60A                       	smpsFMAlterVol      $0A
000B096B 0680                       	dc.b	$06, nRst
000B096D E6F6                       	smpsFMAlterVol      $F6
000B096F ACAC                       	dc.b	nG3, nG3
000B0971 E60A                       	smpsFMAlterVol      $0A
000B0973 06                         	dc.b	$06
000B0974 E6F6                       	smpsFMAlterVol      $F6
000B0976 AA                         	dc.b	nF3
000B0977 E60A                       	smpsFMAlterVol      $0A
000B0979 06                         	dc.b	$06
000B097A E6F6                       	smpsFMAlterVol      $F6
000B097C AC                         	dc.b	nG3
000B097D E3                         	smpsReturn
000B097E                            
000B097E                            ; FM5 Data
000B097E                            Tribute_FM5:
000B097E EF02                       	smpsSetvoice        $02
000B0980                            
000B0980                            Tribute_Jump00:
000B0980 8060 8080 800C B406 B6B8+  	dc.b	nRst, $60, nRst, nRst, nRst, $0C, nEb4, $06, nF4, nG4, nD5, $12
000B098C 800C B606 B8BA C412 8060+  	dc.b	nRst, $0C, nF4, $06, nG4, nA4, nG5, $12, nRst, $60, nRst, $60
000B0998 805A D706 CECD C9C4 CECD+  	dc.b	nRst, $5A, nD7, $06, nF6, nE6, nC6, nG5, nF6, nE6, nC6, nG5
000B09A4 C2C1 BDB8 B6B5 B1AC AA48+  	dc.b	nF5, nE5, nC5, nG4, nF4, nE4, nC4, nG3, nF3, $48, nRst, $18
000B09B0                            
000B09B0                            Tribute_Loop01:
000B09B0 8060 800C B106 B3B8 BDBF+  	dc.b	nRst, $60, nRst, $0C, nC4, $06, nD4, nG4, nC5, nD5, nG5, nC5
000B09BC BFC4 BFC4 C9C4 BF80 6080+  	dc.b	nD5, nG5, nD5, nG5, nC6, nG5, nD5, nRst, $60, nRst, $0C, nC5
000B09C8 06C4 BDBF C4C6 BDB8 BDBF+  	dc.b	$06, nG5, nC5, nD5, nG5, nA5, nC5, nG4, nC5, nD5, nG5, nC5
000B09D4 BFC4 8060 800C B806 BABD+  	dc.b	nD5, nG5, nRst, $60, nRst, $0C, nG4, $06, nA4, nC5, nA4, nC5
000B09E0 BFC4 C2BD BFB8 B3BD BF80+  	dc.b	nD5, nG5, nF5, nC5, nD5, nG4, nD4, nC5, nD5, nRst, $60, nG5
000B09EC 06C2 BDBA C4C2 BDBA C4C2+  	dc.b	$06, nF5, nC5, nA4, nG5, nF5, nC5, nA4, nG5, nF5, nD5, nB4
000B09F8 B9BA BCBF                  	dc.b	nAb4, nA4, nB4, nD5
000B09FC F700 02FF B0               	smpsLoop            $00, $02, Tribute_Loop01
000B0A01 800C B806 BDBF C1C2 0C80+  	dc.b	nRst, $0C, nG4, $06, nC5, nD5, nE5, nF5, $0C, nRst, $30, nRst
000B0A0D 0CB8 06BD BFC1 C60C 8030+  	dc.b	$0C, nG4, $06, nC5, nD5, nE5, nA5, $0C, nRst, $30, nRst, $0C
000B0A19 C6C4 C2C1 18BD 0CBF E70C+  	dc.b	nA5, nG5, nF5, nE5, $18, nC5, $0C, nD5, smpsNoAttack, $0C, nB4, nC5
000B0A25 BFB3 06B8 BABF B8BA BFC4   	dc.b	nD5, nD4, $06, nG4, nA4, nD5, nG4, nA4, nD5, nG5
000B0A2F E918                       	smpsAlterPitch      $18
000B0A31 F8FB 98                    	smpsCall            Tribute_Call00
000B0A34 E9E8                       	smpsAlterPitch      $E8
000B0A36 F2                         	smpsStop
000B0A37                            
000B0A37                            ; FM6 Data
000B0A37                            Tribute_FM6:
000B0A37 EF02                       	smpsSetvoice        $02
000B0A39 E040                       	smpsPan             panRight, $00
000B0A40 E104                       	smpsAlterNote       $04
000B0A42 8006                       	dc.b	nRst, $06
000B0A44 F6FF 3A                    	smpsJump            Tribute_Jump00
000B0A47                            
000B0A47                            ; PSG1 Data
000B0A47                            Tribute_PSG1:
000B0A47 F505                       	smpsPSGvoice        sTone_09
000B0A4E A760 E760 E760 E760 A760+  	dc.b	nD3, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD3, $60, smpsNoAttack, $60
000B0A5A E75A AC06 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG3, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0A69 ECFD                       	smpsPSGAlterVol     $FD
000B0A6B                            
000B0A6B                            Tribute_Jump01:
000B0A6B F505                       	smpsPSGvoice        sTone_09
000B0A6D F800 00                    	smpsCall            Tribute_Call07
000B0A70 E706 AAAC AEB0 02B1 B0AC+  	dc.b	smpsNoAttack, $06, nF3, nG3, nA3, nB3, $02, nC4, nB3, nG3, $06, nA3
000B0A7C B0B1 AEB0 B1B3 B5B6 BA     	dc.b	nB3, nC4, nA3, nB3, nC4, nD4, nE4, nF4, nA4
000B0A85 F800 00                    	smpsCall            Tribute_Call07
000B0A88 E70C AEB0 B106 80B3 0CB5+  	dc.b	smpsNoAttack, $0C, nA3, nB3, nC4, $06, nRst, nD4, $0C, nE4, $06, nRst
000B0A94 B60C B306 80B8 1E80 06B9+  	dc.b	nF4, $0C, nD4, $06, nRst, nG4, $1E, nRst, $06, nAb4, $18, nG4
000B0AA0 0680 B680 B50C E70C B3B1+  	dc.b	$06, nRst, nF4, nRst, nE4, $0C, smpsNoAttack, $0C, nD4, nC4, $06, nRst
000B0AAC B318 AE0C B006 80B1 0CE7+  	dc.b	nD4, $18, nA3, $0C, nB3, $06, nRst, nC4, $0C, smpsNoAttack, $3C, nB3
000B0AB8 0CB1 0680 B30C E73C B80C+  	dc.b	$0C, nC4, $06, nRst, nD4, $0C, smpsNoAttack, $3C, nG4, $0C, nD5, nG5
000B0AC4 E918                       	smpsAlterPitch      $18
000B0AC6 F8FB 03                    	smpsCall            Tribute_Call00
000B0AC9 E9E8                       	smpsAlterPitch      $E8
000B0ACB F2                         	smpsStop
000B0ACC                            
000B0ACC                            Tribute_Call07:
000B0ACC B703 B833 8006 BC80 BDBF+  	dc.b	nFs4, $03, nG4, $33, nRst, $06, nB4, nRst, nC5, nD5, nRst, nFs4
000B0AD8 03B8 03E7 3680 06B5 80B3+  	dc.b	$03, nG4, $03, smpsNoAttack, $36, nRst, $06, nE4, nRst, nD4, nC4, nRst
000B0AE4 B702 B804 E736 8006 BC80+  	dc.b	nFs4, $02, nG4, $04, smpsNoAttack, $36, nRst, $06, nB4, nRst, nC5, nD5
000B0AF0 80B8 E712 8006 B512 8006+  	dc.b	nRst, nG4, smpsNoAttack, $12, nRst, $06, nE4, $12, nRst, $06, nD4, $12
000B0AFC 8006 B50C 8006 B1E7 3680+  	dc.b	nRst, $06, nE4, $0C, nRst, $06, nC4, smpsNoAttack, $36, nRst, $06, nC5
000B0B08 80BC BD80 B1E7 3680 06BD+  	dc.b	nRst, nB4, nC5, nRst, nC4, smpsNoAttack, $36, nRst, $06, nC5, nRst, nB4
000B0B14 BD80 B1E7 3CB5 0CB3 B1     	dc.b	nC5, nRst, nC4, smpsNoAttack, $3C, nE4, $0C, nD4, nC4
000B0B1D E3                         	smpsReturn
000B0B1E                            
000B0B1E                            ; PSG2 Data
000B0B1E                            Tribute_PSG2:
000B0B1E F505                       	smpsPSGvoice        sTone_09
000B0B25 9B60 E760 E760 E760 9B60+  	dc.b	nD2, $60, smpsNoAttack, $60, smpsNoAttack, $60, smpsNoAttack, $60, nD2, $60, smpsNoAttack, $60
000B0B31 E75A A006 E760 E748 8018   	dc.b	smpsNoAttack, $5A, nG2, $06, smpsNoAttack, $60, smpsNoAttack, $48, nRst, $18
000B0B3B ECFF                       	smpsPSGAlterVol     $FF
000B0B42 8006                       	dc.b	nRst, $06
000B0B44 F6FF 25                    	smpsJump            Tribute_Jump01
000B0B47                            
000B0B47                            ; PSG3 Data
000B0B47                            Tribute_PSG3:
000B0B47 F3E7                       	smpsPSGform         $E7
000B0B49 F502                       	smpsPSGvoice        sTone_02
000B0B4B AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B0B52 F501                       	smpsPSGvoice        sTone_05
000B0B54 0680 18                    	dc.b	$06, nRst, $18
000B0B57 F502                       	smpsPSGvoice        sTone_02
000B0B59 AF18 1806                  	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $06
000B0B5D F501                       	smpsPSGvoice        sTone_05
000B0B5F 06                         	dc.b	$06
000B0B60 F502                       	smpsPSGvoice        sTone_02
000B0B62 06                         	dc.b	$06
000B0B63 F501                       	smpsPSGvoice        sTone_05
000B0B65 06                         	dc.b	$06
000B0B66 F502                       	smpsPSGvoice        sTone_02
000B0B68 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B0B70 F501                       	smpsPSGvoice        sTone_05
000B0B72 0680 12AF 06               	dc.b	$06, nRst, $12, (nMaxPSG2-$23)&$FF, $06
000B0B77 F502                       	smpsPSGvoice        sTone_02
000B0B79 06                         	dc.b	$06
000B0B7A F501                       	smpsPSGvoice        sTone_05
000B0B7C 06                         	dc.b	$06
000B0B7D F502                       	smpsPSGvoice        sTone_02
000B0B7F 06                         	dc.b	$06
000B0B80 F501                       	smpsPSGvoice        sTone_05
000B0B82 06                         	dc.b	$06
000B0B83 F502                       	smpsPSGvoice        sTone_02
000B0B85 800C AF06                  	dc.b	nRst, $0C, (nMaxPSG2-$23)&$FF, $06
000B0B89 F501                       	smpsPSGvoice        sTone_05
000B0B8B 06                         	dc.b	$06
000B0B8C F502                       	smpsPSGvoice        sTone_02
000B0B8E 06                         	dc.b	$06
000B0B8F F501                       	smpsPSGvoice        sTone_05
000B0B91 06                         	dc.b	$06
000B0B92 F502                       	smpsPSGvoice        sTone_02
000B0B94 0C                         	dc.b	$0C
000B0B95 F502                       	smpsPSGvoice        sTone_02
000B0B97 AF18 1818 0606 06          	dc.b	(nMaxPSG2-$23)&$FF, $18, $18, $18, $06, $06, $06
000B0B9E F501                       	smpsPSGvoice        sTone_05
000B0BA0 06                         	dc.b	$06
000B0BA1 F502                       	smpsPSGvoice        sTone_02
000B0BA3 8018 AF18 1806             	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06
000B0BA9 F501                       	smpsPSGvoice        sTone_05
000B0BAB 06                         	dc.b	$06
000B0BAC F502                       	smpsPSGvoice        sTone_02
000B0BAE 06                         	dc.b	$06
000B0BAF F501                       	smpsPSGvoice        sTone_05
000B0BB1 06                         	dc.b	$06
000B0BB2 F502                       	smpsPSGvoice        sTone_02
000B0BB4 8018 AF18 1806 0606        	dc.b	nRst, $18, (nMaxPSG2-$23)&$FF, $18, $18, $06, $06, $06
000B0BBC F501                       	smpsPSGvoice        sTone_05
000B0BBE 0680 6080                  	dc.b	$06, nRst, $60, nRst
000B0BC2                            
000B0BC2                            Tribute_Loop06:
000B0BC2 F800 00                    	smpsCall            Tribute_Call06
000B0BC5 800C                       	dc.b	nRst, $0C
000B0BC7 F502                       	smpsPSGvoice        sTone_02
000B0BC9 AF0C 0C0C 0C0C 8018        	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, nRst, $18
000B0BD1 F800 00                    	smpsCall            Tribute_Call06
000B0BD4 800C                       	dc.b	nRst, $0C
000B0BD6 F502                       	smpsPSGvoice        sTone_02
000B0BD8 AF0C 0C0C 8030             	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, nRst, $30
000B0BDE F700 02FF E0               	smpsLoop            $00, $02, Tribute_Loop06
000B0BE3 E718                       	dc.b	smpsNoAttack, $18
000B0BE5 F502                       	smpsPSGvoice        sTone_02
000B0BE7 AF80 AF80 AF80 AF80 AF80+  	dc.b	(nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst, (nMaxPSG2-$23)&$FF, nRst
000B0BF3 AF                         	dc.b	(nMaxPSG2-$23)&$FF
000B0BF4 F2                         	smpsStop
000B0BF5                            
000B0BF5                            Tribute_Call06:
000B0BF5 F502                       	smpsPSGvoice        sTone_02
000B0BF7 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B0BFF F501                       	smpsPSGvoice        sTone_05
000B0C01 06                         	dc.b	$06
000B0C02 F502                       	smpsPSGvoice        sTone_02
000B0C04 06                         	dc.b	$06
000B0C05 F501                       	smpsPSGvoice        sTone_05
000B0C07 0680 0C                    	dc.b	$06, nRst, $0C
000B0C0A F502                       	smpsPSGvoice        sTone_02
000B0C0C AF0C 0C0C 0C0C 0C06 06     	dc.b	(nMaxPSG2-$23)&$FF, $0C, $0C, $0C, $0C, $0C, $0C, $06, $06
000B0C15 F502                       	smpsPSGvoice        sTone_02
000B0C17 0C0C 0C0C 0C06 0606        	dc.b	$0C, $0C, $0C, $0C, $0C, $06, $06, $06
000B0C1F F501                       	smpsPSGvoice        sTone_05
000B0C21 06                         	dc.b	$06
000B0C22 F502                       	smpsPSGvoice        sTone_02
000B0C24 06                         	dc.b	$06
000B0C25 F501                       	smpsPSGvoice        sTone_05
000B0C27 06                         	dc.b	$06
000B0C28 E3                         	smpsReturn
000B0C29                            
000B0C29                            ; DAC Data
000B0C29                            Tribute_DAC:
000B0C29 8148 8218 8148 8206 8906   	dc.b	dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani, $06
000B0C33 E690                       	smpsFMAlterVol      $90
000B0C35 8A0C                       	dc.b	dLowTimpani, $0C
000B0C37 E670                       	smpsFMAlterVol      $70
000B0C39 8148 8218 8130 8206        	dc.b	dKick, $48, dSnare, $18, dKick, $30, dSnare, $06
000B0C41 E6F9                       	smpsFMAlterVol      $F9
000B0C43 88                         	dc.b	dHiTimpani
000B0C44 E607                       	smpsFMAlterVol      $07
000B0C46 8982                       	dc.b	dMidTimpani, dSnare
000B0C48 E690                       	smpsFMAlterVol      $90
000B0C4A 8A                         	dc.b	dLowTimpani
000B0C4B E670                       	smpsFMAlterVol      $70
000B0C4D 8282 8281 4882 1881 4882+  	dc.b	dSnare, dSnare, dSnare, dKick, $48, dSnare, $18, dKick, $48, dSnare, $06, dMidTimpani
000B0C59 06                         	dc.b	$06
000B0C5A E690                       	smpsFMAlterVol      $90
000B0C5C 8A0C                       	dc.b	dLowTimpani, $0C
000B0C5E E670                       	smpsFMAlterVol      $70
000B0C60 8148 8218 8160 8148 8218   	dc.b	dKick, $48, dSnare, $18, dKick, $60, dKick, $48, dSnare, $18
000B0C6A                            
000B0C6A                            Tribute_Loop00:
000B0C6A 8118 8281 8281 8281 8281+  	dc.b	dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B0C76 8281 8281 8206             	dc.b	dSnare, dKick, dSnare, dKick, dSnare, $06
000B0C7C E6F9                       	smpsFMAlterVol      $F9
000B0C7E 88                         	dc.b	dHiTimpani
000B0C7F E607                       	smpsFMAlterVol      $07
000B0C81 8982 8118 8281 8281 8281+  	dc.b	dMidTimpani, dSnare, dKick, $18, dSnare, dKick, dSnare, dKick, dSnare, dKick, dSnare, dKick
000B0C8D 8281 8281 8281 06          	dc.b	dSnare, dKick, dSnare, dKick, dSnare, dKick, $06
000B0C94 E607                       	smpsFMAlterVol      $07
000B0C96 88                         	dc.b	dHiTimpani
000B0C97 E6F9                       	smpsFMAlterVol      $F9
000B0C99 8982 8182 8282             	dc.b	dMidTimpani, dSnare, dKick, dSnare, dSnare, dSnare
000B0C9F F700 02FF C7               	smpsLoop            $00, $02, Tribute_Loop00
000B0CA4 813C 820C                  	dc.b	dKick, $3C, dSnare, $0C
000B0CA8 E6F9                       	smpsFMAlterVol      $F9
000B0CAA 8804                       	dc.b	dHiTimpani, $04
000B0CAC E607                       	smpsFMAlterVol      $07
000B0CAE 89                         	dc.b	dMidTimpani
000B0CAF E690                       	smpsFMAlterVol      $90
000B0CB1 8A                         	dc.b	dLowTimpani
000B0CB2 E670                       	smpsFMAlterVol      $70
000B0CB4 810C 813C 8206 8282 8281+  	dc.b	dKick, $0C, dKick, $3C, dSnare, $06, dSnare, dSnare, dSnare, dKick, $0C, dKick
000B0CC0 6081 36                    	dc.b	$60, dKick, $36
000B0CC3 E6F9                       	smpsFMAlterVol      $F9
000B0CC5 8806                       	dc.b	dHiTimpani, $06
000B0CC7 E607                       	smpsFMAlterVol      $07
000B0CC9 89                         	dc.b	dMidTimpani
000B0CCA E690                       	smpsFMAlterVol      $90
000B0CCC 8A                         	dc.b	dLowTimpani
000B0CCD E670                       	smpsFMAlterVol      $70
000B0CCF 8282 8282 8182 8282 8282+  	dc.b	dSnare, dSnare, dSnare, dSnare, dKick, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dKick
000B0CDB 8182                       	dc.b	dKick, dSnare
000B0CDD E6F9                       	smpsFMAlterVol      $F9
000B0CDF 88                         	dc.b	dHiTimpani
000B0CE0 E607                       	smpsFMAlterVol      $07
000B0CE2 8982                       	dc.b	dMidTimpani, dSnare
000B0CE4 E690                       	smpsFMAlterVol      $90
000B0CE6 8A                         	dc.b	dLowTimpani
000B0CE7 E670                       	smpsFMAlterVol      $70
000B0CE9 8281 8182 8289 82          	dc.b	dSnare, dKick, dKick, dSnare, dSnare, dMidTimpani, dSnare
000B0CF0 E690                       	smpsFMAlterVol      $90
000B0CF2 8A                         	dc.b	dLowTimpani
000B0CF3 E670                       	smpsFMAlterVol      $70
000B0CF5 8281                       	dc.b	dSnare, dKick
000B0CF7 F2                         	smpsStop
000B0CF8                            
000B0CF8                            Tribute_Voices:
000B0CF8                            ;	Voice $00
000B0CF8                            ;	$3B
000B0CF8                            ;	$53, $31, $02, $03, 	$DF, $9F, $5F, $9F, 	$17, $08, $0E, $07
000B0CF8                            ;	$0F, $0E, $0D, $02, 	$5F, $7F, $3F, $5F, 	$0C, $16, $1F, $80
000B0CF8                            	smpsVcAlgorithm     $03
000B0CF8                            	smpsVcFeedback      $07
000B0CF8                            	smpsVcUnusedBits    $00
000B0CF8                            	smpsVcDetune        $00, $00, $03, $05
000B0CF8                            	smpsVcCoarseFreq    $03, $02, $01, $03
000B0CF8                            	smpsVcRateScale     $02, $01, $02, $03
000B0CF8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0CF8                            	smpsVcAmpMod        $00, $00, $00, $00
000B0CF8                            	smpsVcDecayRate1    $07, $0E, $08, $17
000B0CF8                            	smpsVcDecayRate2    $02, $0D, $0E, $0F
000B0CF8                            	smpsVcDecayLevel    $05, $03, $07, $05
000B0CF8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0D11                            
000B0D11                            ;	Voice $01
000B0D11                            ;	$3D
000B0D11                            ;	$52, $02, $04, $01, 	$94, $19, $19, $19, 	$11, $0D, $0D, $0D
000B0D11                            ;	$07, $04, $04, $04, 	$35, $1A, $1A, $1A, 	$0D, $80, $80, $80
000B0D11                            	smpsVcAlgorithm     $05
000B0D11                            	smpsVcFeedback      $07
000B0D11                            	smpsVcUnusedBits    $00
000B0D11                            	smpsVcDetune        $00, $00, $00, $05
000B0D11                            	smpsVcCoarseFreq    $01, $04, $02, $02
000B0D11                            	smpsVcRateScale     $00, $00, $00, $02
000B0D11                            	smpsVcAttackRate    $19, $19, $19, $14
000B0D11                            	smpsVcAmpMod        $00, $00, $00, $00
000B0D11                            	smpsVcDecayRate1    $0D, $0D, $0D, $11
000B0D11                            	smpsVcDecayRate2    $04, $04, $04, $07
000B0D11                            	smpsVcDecayLevel    $01, $01, $01, $03
000B0D11                            	smpsVcReleaseRate   $0A, $0A, $0A, $05
000B0D2A                            
000B0D2A                            ;	Voice $02
000B0D2A                            ;	$1F
000B0D2A                            ;	$26, $32, $07, $11, 	$9F, $9F, $9F, $9F, 	$06, $07, $09, $07
000B0D2A                            ;	$0D, $0F, $0D, $11, 	$9C, $9C, $9C, $9C, 	$80, $80, $80, $80
000B0D2A                            	smpsVcAlgorithm     $07
000B0D2A                            	smpsVcFeedback      $03
000B0D2A                            	smpsVcUnusedBits    $00
000B0D2A                            	smpsVcDetune        $01, $00, $03, $02
000B0D2A                            	smpsVcCoarseFreq    $01, $07, $02, $06
000B0D2A                            	smpsVcRateScale     $02, $02, $02, $02
000B0D2A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0D2A                            	smpsVcAmpMod        $00, $00, $00, $00
000B0D2A                            	smpsVcDecayRate1    $07, $09, $07, $06
000B0D2A                            	smpsVcDecayRate2    $11, $0D, $0F, $0D
000B0D2A                            	smpsVcDecayLevel    $09, $09, $09, $09
000B0D2A                            	smpsVcReleaseRate   $0C, $0C, $0C, $0C
000B0D43                            
000B0D43                            
000B0D44 00                         		even		
000B0D44                            ; ---------------------------------------------------------------------------
000B0D44                            ; Sound	effect pointers
000B0D44                            ; ---------------------------------------------------------------------------
000B0D44                            SoundIndex:
000B0D44 0000 0000                  ptr_sndA0:	dc.l SoundA0
000B0D48 0000 0000                  ptr_sndA1:	dc.l SoundA1
000B0D4C 0000 0000                  ptr_sndA2:	dc.l SoundA2
000B0D50 0000 0000                  ptr_sndA3:	dc.l SoundA3
000B0D54 0000 0000                  ptr_sndA4:	dc.l SoundA4
000B0D58 0000 0000                  ptr_sndA5:	dc.l SoundA5
000B0D5C 0000 0000                  ptr_sndA6:	dc.l SoundA6
000B0D60 0000 0000                  ptr_sndA7:	dc.l SoundA7
000B0D64 0000 0000                  ptr_sndA8:	dc.l SoundA8
000B0D68 0000 0000                  ptr_sndA9:	dc.l SoundA9
000B0D6C 0000 0000                  ptr_sndAA:	dc.l SoundAA
000B0D70 0000 0000                  ptr_FireShield:	dc.l SoundAB
000B0D74 0000 0000                  ptr_sndAC:	dc.l SoundAC
000B0D78 0000 0000                  ptr_sndAD:	dc.l SoundAD
000B0D7C 0000 0000                  ptr_sndAE:	dc.l SoundAE
000B0D80 0000 0000                  ptr_sndAF:	dc.l SoundAF
000B0D84 0000 0000                  ptr_sndB0:	dc.l SoundB0
000B0D88 0000 0000                  ptr_sndB1:	dc.l SoundB1
000B0D8C 0000 0000                  ptr_sndB2:	dc.l SoundB2
000B0D90 0000 0000                  ptr_sndB3:	dc.l SoundB3
000B0D94 0000 0000                  ptr_sndB4:	dc.l SoundB4
000B0D98 0000 0000                  ptr_sndB5:	dc.l SoundB5
000B0D9C 0000 0000                  ptr_sndB6:	dc.l SoundB6
000B0DA0 0000 0000                  ptr_sndB7:	dc.l SoundB7
000B0DA4 0000 0000                  ptr_sndB8:	dc.l SoundB8
000B0DA8 0000 0000                  ptr_sndB9:	dc.l SoundB9
000B0DAC 0000 0000                  ptr_sndBA:	dc.l SoundBA
000B0DB0 0000 0000                  ptr_sndBB:	dc.l SoundBB
000B0DB4 0000 0000                  ptr_sndBC:	dc.l SoundBC
000B0DB8 0000 0000                  ptr_sndBD:	dc.l SoundBD
000B0DBC 0000 0000                  ptr_sndBE:	dc.l SoundBE
000B0DC0 0000 0000                  ptr_sndBF:	dc.l SoundBF
000B0DC4 0000 0000                  ptr_sndC0:	dc.l SoundC0
000B0DC8 0000 0000                  ptr_sndC1:	dc.l SoundC1
000B0DCC 0000 0000                  ptr_sndC2:	dc.l SoundC2
000B0DD0 0000 0000                  ptr_sndC3:	dc.l SoundC3
000B0DD4 0000 0000                  ptr_sndC4:	dc.l SoundC4
000B0DD8 0000 0000                  ptr_sndC5:	dc.l SoundC5
000B0DDC 0000 0000                  ptr_sndC6:	dc.l SoundC6
000B0DE0 0000 0000                  ptr_sndC7:	dc.l SoundC7
000B0DE4 0000 0000                  ptr_sndC8:	dc.l SoundC8
000B0DE8 0000 0000                  ptr_sndC9:	dc.l SoundC9
000B0DEC 0000 0000                  ptr_sndCA:	dc.l SoundCA
000B0DF0 0000 0000                  ptr_sndCB:	dc.l SoundCB
000B0DF4 0000 0000                  ptr_sndCC:	dc.l SoundCC
000B0DF8 0000 0000                  ptr_sndCD:	dc.l SoundCD
000B0DFC 0000 0000                  ptr_sndCE:	dc.l SoundCE
000B0E00 0000 0000                  ptr_sndCF:	dc.l SoundCF
000B0E04                            ptr_sndend
000B0E04                            ; ---------------------------------------------------------------------------
000B0E04                            ; Special sound effect pointers
000B0E04                            ; ---------------------------------------------------------------------------
000B0E04                            SpecSoundIndex:
000B0E04 0000 0000                  ptr_sndD0:	dc.l SoundD0
000B0E08 0000 0000                  ptr_sndD1:	dc.l SoundD1
000B0E0C 0000 0000                  ptr_sndD2:	dc.l SoundD2
000B0E10 0000 0000                  ptr_sndD3:	dc.l SoundD3
000B0E14 0000 0000                  ptr_sndD4:	dc.l SoundD4
000B0E18 0000 0000                  ptr_sndD5:	dc.l SoundD5
000B0E1C                            ptr_specend
000B0E1C                            SoundA0:	include	"sound/sfx/Jump.asm"
000B0E1C                            SndA0_Jump_Header:
000B0E1C                            	smpsHeaderStartSong 1
000B0E1E 01                         	smpsHeaderTempoSFX  $01
000B0E1F 01                         	smpsHeaderChanSFX   $01
000B0E20                            
000B0E26                            
000B0E26                            ; PSG2 Data
000B0E26                            SndA0_Jump_PSG2:
000B0E26 F500                       	smpsPSGvoice        $00
000B0E28 9E05                       	dc.b	nF2, $05
000B0E2F A315                       	dc.b	nBb2, $15
000B0E31 F2                         	smpsStop
000B0E32                            
000B0E32                            ; Song seems to not use any FM voices
000B0E32                            SndA0_Jump_Voices:
000B0E32                            SndA0_Jump_Voices:
000B0E32                            		even
000B0E32                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
000B0E5C                            		even
000B0E5C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
000B0E5C                            SndDF_Header:
000B0E5C                            	smpsHeaderStartSong 3
000B0E5E 01                         	smpsHeaderTempoSFX  $01
000B0E5F 01                         	smpsHeaderChanSFX   $01
000B0E60                            
000B0E66                            
000B0E66                            ; FM5 Data
000B0E66                            SndDF_FM5:
000B0E66 EF00                       	smpsSetvoice        $00
000B0E68                            
000B0E68                            SndDF_Loop00:
000B0E68 F800 00                    	smpsCall            SndDF_Call00
000B0E6B E905                       	smpsAlterPitch $05
000B0E6D E608                       	smpsFMAlterVol      $08
000B0E6F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
000B0E74 E9EC                       	smpsAlterPitch $EC
000B0E76 E6E0                       	smpsFMAlterVol      $E0
000B0E78 F2                         	smpsStop
000B0E79                            
000B0E79                            SndDF_Call00:
000B0E79 9902                       	dc.b	nC2, $02
000B0E7B E901                       	smpsAlterPitch $01
000B0E7D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
000B0E82 E9F6                       	smpsAlterPitch $F6
000B0E84 E3                         	smpsReturn
000B0E85                            
000B0E85                            SndDF_Voices:
000B0E85                            ;	Voice $00
000B0E85                            ;	$07
000B0E85                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
000B0E85                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
000B0E85                            	smpsVcAlgorithm     $07
000B0E85                            	smpsVcFeedback      $00
000B0E85                            	smpsVcUnusedBits    $00
000B0E85                            	smpsVcDetune        $00, $00, $00, $00
000B0E85                            	smpsVcCoarseFreq    $04, $05, $04, $04
000B0E85                            	smpsVcRateScale     $00, $00, $00, $00
000B0E85                            	smpsVcAttackRate    $15, $15, $1F, $1F
000B0E85                            	smpsVcAmpMod        $00, $00, $00, $00
000B0E85                            	smpsVcDecayRate1    $00, $00, $00, $00
000B0E85                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0E85                            	smpsVcDecayLevel    $01, $01, $01, $01
000B0E85                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0E9E                            		even
000B0E9E                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
000B0ED0                            		even
000B0ED0                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
000B0F14 00                         		even
000B0F14                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
000B0F14                            SndD2_Header:
000B0F14                            	smpsHeaderStartSong 3
000B0F16 01                         	smpsHeaderTempoSFX  $01
000B0F17 01                         	smpsHeaderChanSFX   $01
000B0F18                            
000B0F1E                            
000B0F1E                            ; FM4 Data
000B0F1E                            SndD2_FM4:
000B0F1E EF00                       	smpsSetvoice        $00
000B0F25 C645                       	dc.b	nA5, $45
000B0F27 F2                         	smpsStop
000B0F28                            
000B0F28                            SndD2_Voices:
000B0F28                            ;	Voice $00
000B0F28                            ;	$04
000B0F28                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B0F28                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
000B0F28                            	smpsVcAlgorithm     $04
000B0F28                            	smpsVcFeedback      $00
000B0F28                            	smpsVcUnusedBits    $00
000B0F28                            	smpsVcDetune        $04, $00, $00, $02
000B0F28                            	smpsVcCoarseFreq    $07, $07, $02, $07
000B0F28                            	smpsVcRateScale     $00, $00, $00, $00
000B0F28                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0F28                            	smpsVcAmpMod        $00, $00, $00, $00
000B0F28                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B0F28                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B0F28                            	smpsVcDecayLevel    $00, $01, $00, $01
000B0F28                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0F42 00                         		even
000B0F42                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
000B0F72                            		even
000B0F72                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
000B0FA2                            		even
000B0FA2                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
000B0FD6                            		even
000B0FD6                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
000B0FE8                            		even
000B0FE8                            SoundAA:	include	"sound/sfx/Splash.asm"
000B0FE8                            SndA2_Header:
000B0FE8                            	smpsHeaderStartSong 3
000B0FEA 01                         	smpsHeaderTempoSFX  $01
000B0FEB 02                         	smpsHeaderChanSFX   $02
000B0FEC                            
000B0FF8                            
000B0FF8                            ; FM3 Data
000B0FF8                            SndA2_FM3:
000B0FF8 EF00                       	smpsSetvoice        $00
000B0FFF 8106                       	dc.b	nC0, $06
000B1001                            
000B1001                            SndA2_Loop00:
000B1001 810E                       	dc.b	nC0, $0E
000B1003 E60E                       	smpsAlterVol      $0E
000B1005 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
000B100A F2                         	smpsStop
000B100B                            
000B100B                            ; FM4 Data
000B100B                            SndA2_FM4:
000B100B EF01                       	smpsSetvoice        $01
000B100D A606 14                    	dc.b	nCs3, $06, $14
000B1010 F2                         	smpsStop
000B1011                            
000B1011                            SndA2_Voices:
000B1011                            ;	Voice $00
000B1011                            ;	$F9
000B1011                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
000B1011                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
000B1011                            	smpsVcAlgorithm     $01
000B1011                            	smpsVcFeedback      $07
000B1011                            	smpsVcUnusedBits    $03
000B1011                            	smpsVcDetune        $03, $01, $03, $02
000B1011                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B1011                            	smpsVcRateScale     $00, $00, $00, $00
000B1011                            	smpsVcAttackRate    $10, $1F, $1F, $1C
000B1011                            	smpsVcAmpMod        $00, $00, $00, $00
000B1011                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1011                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1011                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1011                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B102A                            
000B102A                            ;	Voice $01
000B102A                            ;	$00
000B102A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
000B102A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
000B102A                            	smpsVcAlgorithm     $00
000B102A                            	smpsVcFeedback      $00
000B102A                            	smpsVcUnusedBits    $00
000B102A                            	smpsVcDetune        $00, $00, $00, $00
000B102A                            	smpsVcCoarseFreq    $00, $02, $03, $00
000B102A                            	smpsVcRateScale     $00, $00, $03, $03
000B102A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
000B102A                            	smpsVcAmpMod        $00, $00, $00, $00
000B102A                            	smpsVcDecayRate1    $0F, $14, $11, $12
000B102A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
000B102A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B102A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1044 00                         		even
000B1044                            SoundAB:	include	"sound/sfx/FireShield.asm"
000B1044                            Sound_3E_Header:
000B1044                            	smpsHeaderStartSong 3
000B1046 01                         	smpsHeaderTempoSFX  $01
000B1047 01                         	smpsHeaderChanSFX   $01
000B1048                            
000B104E                            
000B104E                            ; FM5 Data
000B104E                            Sound_3E_3F_40_41_FM5:
000B104E EF00                       	smpsSetvoice        $00
000B1050 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B1055 F2                         	smpsStop
000B1056                            
000B1056                            Sound_3E_Voices:
000B1056                            ;	Voice $00
000B1056                            ;	$0C
000B1056                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
000B1056                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
000B1056                            	smpsVcAlgorithm     $04
000B1056                            	smpsVcFeedback      $01
000B1056                            	smpsVcUnusedBits    $00
000B1056                            	smpsVcDetune        $03, $03, $02, $00
000B1056                            	smpsVcCoarseFreq    $01, $01, $01, $01
000B1056                            	smpsVcRateScale     $00, $00, $00, $00
000B1056                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
000B1056                            	smpsVcAmpMod        $00, $00, $00, $00
000B1056                            	smpsVcDecayRate1    $00, $04, $00, $0A
000B1056                            	smpsVcDecayRate2    $0C, $08, $12, $08
000B1056                            	smpsVcDecayLevel    $00, $0B, $00, $0F
000B1056                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B106F                            
000B106F                            
000B1070 00                         		even
000B1070                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
000B10A4                            		even
000B10A4                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
000B10DA                            		even
000B10DA                            SoundAE:	include	"sound/sfx/Fireball.asm"
000B10DA                            Sound_70_Header:
000B10DA                            	smpsHeaderStartSong 3
000B10DC 01                         	smpsHeaderTempoSFX  $01
000B10DD 02                         	smpsHeaderChanSFX   $02
000B10DE                            
000B10EA                            
000B10EA                            ; FM5 Data
000B10EA                            Sound_70_FM5:
000B10EA EF00                       	smpsSetvoice        $00
000B10EC 8001                       	dc.b	nRst, $01
000B10F3 8306 8502                  	dc.b	nD0, $06, nE0, $02
000B10F7 F2                         	smpsStop
000B10F8                            
000B10F8                            ; PSG3 Data
000B10F8                            Sound_70_PSG3:
000B10F8 F500                       	smpsPSGvoice        sTone_0D
000B10FA 800B                       	dc.b	nRst, $0B
000B10FC F3E7                       	smpsPSGform         $E7
000B10FE C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
000B1101                            
000B1101                            Sound_70_Loop00:
000B1101 02                         	dc.b	$02
000B1102 EC01                       	smpsPSGAlterVol     $01
000B1104 E7                         	dc.b	smpsNoAttack
000B1105 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
000B110A F2                         	smpsStop
000B110B                            
000B110B                            Sound_70_Voices:
000B110B                            ;	Voice $00
000B110B                            ;	$FA
000B110B                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
000B110B                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
000B110B                            	smpsVcAlgorithm     $02
000B110B                            	smpsVcFeedback      $07
000B110B                            	smpsVcUnusedBits    $03
000B110B                            	smpsVcDetune        $00, $00, $00, $00
000B110B                            	smpsVcCoarseFreq    $05, $00, $03, $02
000B110B                            	smpsVcRateScale     $00, $00, $00, $00
000B110B                            	smpsVcAttackRate    $13, $0F, $11, $12
000B110B                            	smpsVcAmpMod        $00, $00, $00, $00
000B110B                            	smpsVcDecayRate1    $02, $09, $18, $05
000B110B                            	smpsVcDecayRate2    $02, $06, $0F, $06
000B110B                            	smpsVcDecayLevel    $02, $04, $02, $01
000B110B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1124                            
000B1124                            
000B1124                            		even
000B1124                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
000B1152                            		even
000B1152                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
000B1184                            		even
000B1184                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
000B11B0                            		even
000B11B0                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
000B1200                            		even
000B1200                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
000B124A                            		even
000B124A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
000B12A6                            		even
000B12A6                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
000B12D4                            		even
000B12D4                            SoundB6:	include	"sound/sfx/Spikes.asm"
000B12D4                            SpikesSFX_Header:
000B12D4                            	smpsHeaderStartSong 3
000B12D6 01                         	smpsHeaderTempoSFX  $01
000B12D7 02                         	smpsHeaderChanSFX   $02
000B12D8                            
000B12E4                            
000B12E4                            ; FM6 Data
000B12E4                            SndB7_FM3:
000B12E4 EF01                       	smpsSetvoice        $01
000B12EB B105                       	dc.b	nC4, $05
000B12ED F1                         	smpsModOn
000B12EE E10A                       	smpsAlterNote       $0A
000B12F0 E601                       	smpsAlterVol        $01
000B12F2 F2                         	smpsStop
000B12F3                            
000B12F3                            ; FM5 Data
000B12F3                            SndB7_FM5:
000B12F3 8005                       	dc.b	nRst, $05			 
000B12F5 EF00                       	smpsSetvoice        $00
000B12F7 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
000B12FD F2                         	smpsStop
000B12FE                            
000B12FE                            SndB7_Voices:
000B12FE                            ;	Voice $00
000B12FE                            ;	$34
000B12FE                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
000B12FE                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
000B12FE                            	smpsVcAlgorithm     $04
000B12FE                            	smpsVcFeedback      $06
000B12FE                            	smpsVcUnusedBits    $00
000B12FE                            	smpsVcDetune        $0D, $00, $00, $00
000B12FE                            	smpsVcCoarseFreq    $07, $01, $0F, $09
000B12FE                            	smpsVcRateScale     $00, $00, $00, $00
000B12FE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B12FE                            	smpsVcAmpMod        $00, $00, $00, $00
000B12FE                            	smpsVcDecayRate1    $0F, $09, $11, $0C
000B12FE                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
000B12FE                            	smpsVcDecayLevel    $03, $05, $01, $03
000B12FE                            	smpsVcReleaseRate   $0A, $05, $0A, $05
000B1317                            
000B1317                            ;	Voice $01
000B1317                            ;	$FA
000B1317                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B1317                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B1317                            	smpsVcAlgorithm     $02
000B1317                            	smpsVcFeedback      $07
000B1317                            	smpsVcUnusedBits    $03
000B1317                            	smpsVcDetune        $03, $01, $03, $02
000B1317                            	smpsVcCoarseFreq    $00, $09, $0A, $01
000B1317                            	smpsVcRateScale     $00, $00, $00, $00
000B1317                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1317                            	smpsVcAmpMod        $00, $00, $00, $00
000B1317                            	smpsVcDecayRate1    $02, $09, $18, $05
000B1317                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1317                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1317                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1330                            		even
000B1330                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000B136C                            		even
000B136C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
000B136C                            SndBD_Header:
000B136C                            	smpsHeaderStartSong 3
000B136E 01                         	smpsHeaderTempoSFX  $01
000B136F 01                         	smpsHeaderChanSFX   $01
000B1370                            
000B1376                            
000B1376                            ; FM6 Data
000B1376                            SndBD_FM3:
000B1376 EF00                       	smpsSetvoice        $00
000B1378                            
000B1378                            SndBD_Loop00:
000B1378 C009                       	dc.b	nEb5, $09
000B137A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
000B137F F2                         	smpsStop
000B1380                            
000B1380                            SndBD_Voices:
000B1380                            ;	Voice $00
000B1380                            ;	$02
000B1380                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
000B1380                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
000B1380                            	smpsVcAlgorithm     $02
000B1380                            	smpsVcFeedback      $00
000B1380                            	smpsVcUnusedBits    $00
000B1380                            	smpsVcDetune        $00, $02, $05, $00
000B1380                            	smpsVcCoarseFreq    $01, $00, $01, $02
000B1380                            	smpsVcRateScale     $00, $00, $00, $00
000B1380                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000B1380                            	smpsVcAmpMod        $00, $00, $00, $00
000B1380                            	smpsVcDecayRate1    $13, $14, $0A, $10
000B1380                            	smpsVcDecayRate2    $00, $00, $00, $01
000B1380                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1380                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B139A 00                         		even
000B139A                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
000B139A                            Sound_59_Header:
000B139A                            	smpsHeaderStartSong 3
000B139C 01                         	smpsHeaderTempoSFX  $01
000B139D 04                         	smpsHeaderChanSFX   $04
000B139E                            
000B13B6                            
000B13B6                            ; FM3 Data
000B13B6                            Sound_59_FM3:
000B13B6 E040                       	smpsPan             panRight, $00
000B13B8 8002                       	dc.b	nRst, $02
000B13BA F600 00                    	smpsJump            Sound_59_FM4
000B13BD                            
000B13BD                            ; FM5 Data
000B13BD                            Sound_59_FM5:
000B13BD E080                       	smpsPan             panLeft, $00
000B13BF 8001                       	dc.b	nRst, $01
000B13C1                            
000B13C1                            ; FM4 Data
000B13C1                            Sound_59_FM4:
000B13C1 EF00                       	smpsSetvoice        $00
000B13C8 8110                       	dc.b	nC0, $10
000B13CA F2                         	smpsStop
000B13CB                            
000B13CB                            ; PSG3 Data
000B13CB                            Sound_59_PSG3:
000B13D0 F3E7                       	smpsPSGform         $E7
000B13D2                            
000B13D2                            Sound_59_Loop00:
000B13D2 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
000B13D5 EC03                       	smpsPSGAlterVol     $03
000B13D7 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
000B13DC F2                         	smpsStop
000B13DD                            
000B13DD                            Sound_59_Voices:
000B13DD                            ;	Voice $00
000B13DD                            ;	$F9
000B13DD                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
000B13DD                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
000B13DD                            	smpsVcAlgorithm     $01
000B13DD                            	smpsVcFeedback      $07
000B13DD                            	smpsVcUnusedBits    $03
000B13DD                            	smpsVcDetune        $03, $01, $03, $02
000B13DD                            	smpsVcCoarseFreq    $02, $00, $00, $01
000B13DD                            	smpsVcRateScale     $00, $00, $00, $00
000B13DD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B13DD                            	smpsVcAmpMod        $00, $00, $00, $00
000B13DD                            	smpsVcDecayRate1    $02, $09, $18, $05
000B13DD                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B13DD                            	smpsVcDecayLevel    $02, $04, $02, $01
000B13DD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B13F6                            
000B13F6                            
000B13F6                            		even
000B13F6                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
000B141E                            		even
000B141E                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
000B144A                            		even
000B144A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
000B144A                            Sound_B6_Header:
000B144A                            	smpsHeaderStartSong 3
000B144C 01                         	smpsHeaderTempoSFX  $01
000B144D 02                         	smpsHeaderChanSFX   $02
000B144E                            
000B145A                            
000B145A                            ; FM5 Data
000B145A                            Sound_B6_FM5:
000B145A EF00                       	smpsSetvoice        $00
000B1461 CD0F                       	dc.b	nE6, $0F
000B1463 F2                         	smpsStop
000B1464                            
000B1464                            ; PSG3 Data
000B1464                            Sound_B6_PSG3:
000B1464 F507                       	smpsPSGvoice        sTone_1D
000B1466 8006                       	dc.b	nRst, $06
000B146D F3E7                       	smpsPSGform         $E7
000B146F CD4F                       	dc.b	nE6, $4F
000B1471 F2                         	smpsStop
000B1472                            
000B1472                            Sound_B6_Voices:
000B1472                            ;	Voice $00
000B1472                            ;	$3D
000B1472                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
000B1472                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
000B1472                            	smpsVcAlgorithm     $05
000B1472                            	smpsVcFeedback      $07
000B1472                            	smpsVcUnusedBits    $00
000B1472                            	smpsVcDetune        $00, $00, $00, $00
000B1472                            	smpsVcCoarseFreq    $00, $00, $03, $09
000B1472                            	smpsVcRateScale     $00, $00, $00, $00
000B1472                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1472                            	smpsVcAmpMod        $00, $00, $00, $00
000B1472                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
000B1472                            	smpsVcDecayRate2    $05, $10, $1F, $0B
000B1472                            	smpsVcDecayLevel    $02, $04, $02, $01
000B1472                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B148B                            
000B148B                            
000B148C 00                         		even
000B148C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
000B14E0                            		even
000B14E0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
000B151A                            		even
000B151A                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000B158C                            		even
000B158C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
000B15BA                            		even
000B15BA                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
000B15F4                            		even
000B15F4                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
000B15F4                            SndC1_Header:
000B15F4                            	smpsHeaderStartSong 3
000B15F6 01                         	smpsHeaderTempoSFX  $01
000B15F7 01                         	smpsHeaderChanSFX   $01
000B15F8                            
000B15FE                            
000B15FE                            ; FM4 Data
000B15FE                            SndC1_FM4:
000B15FE EF00                       	smpsSetvoice        $00
000B1600 D506 40                    	dc.b	nC7, $06, $40
000B1603 F2                         	smpsStop
000B1604                            
000B1604                            SndC1_Voices:
000B1604                            ;	Voice $00
000B1604                            ;	$38
000B1604                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
000B1604                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
000B1604                            	smpsVcAlgorithm     $00
000B1604                            	smpsVcFeedback      $07
000B1604                            	smpsVcUnusedBits    $00
000B1604                            	smpsVcDetune        $00, $00, $00, $00
000B1604                            	smpsVcCoarseFreq    $00, $00, $00, $01
000B1604                            	smpsVcRateScale     $00, $00, $00, $00
000B1604                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1604                            	smpsVcAmpMod        $00, $00, $00, $00
000B1604                            	smpsVcDecayRate1    $0B, $09, $09, $09
000B1604                            	smpsVcDecayRate2    $00, $00, $00, $00
000B1604                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B1604                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B161E 00                         		even
000B161E                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000B1698                            		even
000B1698                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
000B16C0                            		even
000B16C0                            SoundC5:	include	"sound/sfx/Cash Register.asm"
000B16C0                            Sound_B0_Header:
000B16C0                            	smpsHeaderStartSong 3
000B16C2 01                         	smpsHeaderTempoSFX  $01
000B16C3 03                         	smpsHeaderChanSFX   $03
000B16C4                            
000B16D6                            
000B16D6                            ; FM5 Data
000B16D6                            Sound_B0_FM5:
000B16D6 EF00                       	smpsSetvoice        $00
000B16D8 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
000B16DE F2                         	smpsStop
000B16DF                            
000B16DF                            ; FM4 Data
000B16DF                            Sound_B0_FM4:
000B16DF EF01                       	smpsSetvoice        $01
000B16E1 8012 C655                  	dc.b	nRst, $12, nA5, $55
000B16E5 F2                         	smpsStop
000B16E6                            
000B16E6                            ; FM3 Data
000B16E6                            Sound_B0_FM3:
000B16E6 EF02                       	smpsSetvoice        $02
000B16E8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
000B16EF F2                         	smpsStop
000B16F0                            
000B16F0                            Sound_B0_Voices:
000B16F0                            ;	Voice $00
000B16F0                            ;	$3B
000B16F0                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
000B16F0                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
000B16F0                            	smpsVcAlgorithm     $03
000B16F0                            	smpsVcFeedback      $07
000B16F0                            	smpsVcUnusedBits    $00
000B16F0                            	smpsVcDetune        $00, $00, $00, $00
000B16F0                            	smpsVcCoarseFreq    $06, $03, $02, $03
000B16F0                            	smpsVcRateScale     $02, $00, $00, $00
000B16F0                            	smpsVcAttackRate    $16, $1A, $1A, $18
000B16F0                            	smpsVcAmpMod        $00, $00, $00, $00
000B16F0                            	smpsVcDecayRate1    $10, $0A, $0E, $17
000B16F0                            	smpsVcDecayRate2    $00, $00, $00, $00
000B16F0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B16F0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1709                            
000B1709                            ;	Voice $01
000B1709                            ;	$04
000B1709                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000B1709                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
000B1709                            	smpsVcAlgorithm     $04
000B1709                            	smpsVcFeedback      $00
000B1709                            	smpsVcUnusedBits    $00
000B1709                            	smpsVcDetune        $04, $07, $07, $03
000B1709                            	smpsVcCoarseFreq    $09, $07, $02, $07
000B1709                            	smpsVcRateScale     $00, $00, $00, $00
000B1709                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1709                            	smpsVcAmpMod        $00, $00, $00, $00
000B1709                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000B1709                            	smpsVcDecayRate2    $0B, $00, $0B, $00
000B1709                            	smpsVcDecayLevel    $00, $01, $00, $01
000B1709                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B1722                            
000B1722                            ;	Voice $02
000B1722                            ;	$3C
000B1722                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
000B1722                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
000B1722                            	smpsVcAlgorithm     $04
000B1722                            	smpsVcFeedback      $07
000B1722                            	smpsVcUnusedBits    $00
000B1722                            	smpsVcDetune        $00, $00, $00, $00
000B1722                            	smpsVcCoarseFreq    $00, $00, $00, $0F
000B1722                            	smpsVcRateScale     $00, $00, $00, $00
000B1722                            	smpsVcAttackRate    $1C, $18, $1A, $1F
000B1722                            	smpsVcAmpMod        $00, $00, $00, $00
000B1722                            	smpsVcDecayRate1    $0E, $1A, $11, $17
000B1722                            	smpsVcDecayRate2    $10, $14, $0F, $00
000B1722                            	smpsVcDecayLevel    $02, $09, $09, $01
000B1722                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B173B                            
000B173B                            
000B173C 00                         		even
000B173C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000B177E                            		even
000B177E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000B17AC                            		even
000B17AC                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000B17BE                            		even
000B17BE                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
000B17EC                            		even
000B17EC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
000B181A                            		even
000B181A                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000B1866                            		even
000B1866                            SoundCC:	include	"sound/sfx/Spring.asm"
000B1866                            Spring_Header:
000B1866                            	smpsHeaderStartSong 1
000B1868 01                         	smpsHeaderTempoSFX  $01
000B1869 01                         	smpsHeaderChanSFX   $01
000B186A                            
000B1870                            
000B1870                            ; FM6 Data
000B1870                            Spring_FM6:
000B1870 EF00                       	smpsSetvoice        $00
000B1872 8001                       	dc.b	nRst, $01
000B1879 B006                       	dc.b	nB3, $06
000B187B F4                         	smpsModOff
000B187C EF01                       	smpsSetvoice        $01
000B187E                            
000B187E                            Spring_Loop00:
000B187E BD02                       	dc.b	nC5, $02
000B1880 E601                       	smpsAlterVol      $01
000B1882 E7                         	dc.b	smpsNoAttack
000B1883 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
000B1888 F2                         	smpsStop
000B1889                            
000B1889                            Spring_Voices:
000B1889                            ;	Voice $00
000B1889                            ;	$20
000B1889                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000B1889                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
000B1889                            	smpsVcAlgorithm     $00
000B1889                            	smpsVcFeedback      $04
000B1889                            	smpsVcUnusedBits    $00
000B1889                            	smpsVcDetune        $03, $03, $03, $03
000B1889                            	smpsVcCoarseFreq    $01, $00, $05, $06
000B1889                            	smpsVcRateScale     $02, $02, $03, $03
000B1889                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1889                            	smpsVcAmpMod        $00, $00, $00, $00
000B1889                            	smpsVcDecayRate1    $06, $09, $06, $07
000B1889                            	smpsVcDecayRate2    $08, $06, $06, $07
000B1889                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B1889                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B18A2                            
000B18A2                            ;	Voice $01
000B18A2                            ;	$20
000B18A2                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
000B18A2                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
000B18A2                            	smpsVcAlgorithm     $00
000B18A2                            	smpsVcFeedback      $04
000B18A2                            	smpsVcUnusedBits    $00
000B18A2                            	smpsVcDetune        $03, $03, $03, $03
000B18A2                            	smpsVcCoarseFreq    $01, $00, $03, $01
000B18A2                            	smpsVcRateScale     $02, $02, $02, $02
000B18A2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B18A2                            	smpsVcAmpMod        $00, $00, $00, $00
000B18A2                            	smpsVcDecayRate1    $06, $09, $06, $07
000B18A2                            	smpsVcDecayRate2    $08, $06, $06, $07
000B18A2                            	smpsVcDecayLevel    $0F, $01, $01, $02
000B18A2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B18BC 00                         		even
000B18BC                            SoundCD:	include	"sound/sfx/Beep.asm"
000B18BC                            Snd99_Header:
000B18BC                            	smpsHeaderStartSong 3
000B18BE 01                         	smpsHeaderTempoSFX  $01
000B18BF 01                         	smpsHeaderChanSFX   $01
000B18C0                            
000B18C6                            
000B18C6                            ; FM4 Data
000B18C6                            Snd99_FM4:
000B18C6 EF00                       	smpsSetvoice        $00
000B18C8 B502                       	dc.b	nE4, $02
000B18CA F2                         	smpsStop
000B18CB                            
000B18CB                            Snd99_Voices:
000B18CB                            ;	Voice $00
000B18CB                            ;	$07
000B18CB                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B18CB                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
000B18CB                            	smpsVcAlgorithm     $07
000B18CB                            	smpsVcFeedback      $00
000B18CB                            	smpsVcUnusedBits    $00
000B18CB                            	smpsVcDetune        $00, $00, $00, $00
000B18CB                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
000B18CB                            	smpsVcRateScale     $00, $00, $00, $00
000B18CB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B18CB                            	smpsVcAmpMod        $00, $00, $00, $00
000B18CB                            	smpsVcDecayRate1    $00, $00, $00, $00
000B18CB                            	smpsVcDecayRate2    $00, $00, $00, $00
000B18CB                            	smpsVcDecayLevel    $00, $00, $00, $00
000B18CB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B18E4                            		even
000B18E4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
000B1912                            		even
000B1912                            SoundCF:	include	"sound/sfx/Signpost.asm"
000B1912                            SignpostCD_Header:
000B1912                            	smpsHeaderStartSong 3
000B1914 01                         	smpsHeaderTempoSFX  $01
000B1915 02                         	smpsHeaderChanSFX   $02
000B1916                            
000B1922                            
000B1922                            ; FM5 Data
000B1922                            Snd9D_FM5:
000B1922 8004                       	dc.b	nRst, $04
000B1924                            
000B1924                            ; FM4 Data
000B1924                            Snd9D_FM4:
000B1924 EF00                       	smpsSetvoice        $00
000B1926                            
000B1926                            Snd9D_Loop00:
000B1926 B405                       	dc.b	nEb4, $05
000B1928 E604                       	smpsFMAlterVol      $04
000B192A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
000B192F F2                         	smpsStop
000B1930                            
000B1930                            Snd9D_Voices:
000B1930                            ;	Voice $00
000B1930                            ;	$F4
000B1930                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000B1930                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
000B1930                            	smpsVcAlgorithm     $04
000B1930                            	smpsVcFeedback      $06
000B1930                            	smpsVcUnusedBits    $03
000B1930                            	smpsVcDetune        $00, $00, $00, $00
000B1930                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000B1930                            	smpsVcRateScale     $00, $00, $00, $00
000B1930                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1930                            	smpsVcAmpMod        $00, $00, $00, $00
000B1930                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000B1930                            	smpsVcDecayRate2    $08, $05, $00, $00
000B1930                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000B1930                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B194A 00                         		even
000B194A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
000B1984                            		even
000B1984                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
000B1984                            Sound_41_Header:
000B1984                            	smpsHeaderStartSong 3
000B1986 01                         	smpsHeaderTempoSFX  $01
000B1987 01                         	smpsHeaderChanSFX   $01
000B1988                            
000B198E                            	
000B198E                            Sound41_FM5:
000B198E EF00                       	smpsSetvoice        $00
000B1990 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
000B1995 F2                         	smpsStop
000B1996                            
000B1996                            Sound_41_Voices:
000B1996                            ;	Voice $00
000B1996                            ;	$36
000B1996                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000B1996                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
000B1996                            	smpsVcAlgorithm     $06
000B1996                            	smpsVcFeedback      $06
000B1996                            	smpsVcUnusedBits    $00
000B1996                            	smpsVcDetune        $00, $00, $01, $00
000B1996                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
000B1996                            	smpsVcRateScale     $00, $00, $00, $00
000B1996                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B1996                            	smpsVcAmpMod        $00, $00, $00, $00
000B1996                            	smpsVcDecayRate1    $00, $00, $00, $00
000B1996                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
000B1996                            	smpsVcDecayLevel    $00, $00, $00, $00
000B1996                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B19AF                            
000B19AF                            
000B19B0 00                         		even
000B19B0                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
000B19B0                            Snd9B_Header:
000B19B0                            	smpsHeaderStartSong 3
000B19B2 01                         	smpsHeaderTempoSFX  $01
000B19B3 01                         	smpsHeaderChanSFX   $01
000B19B4                            
000B19BA                            
000B19BA                            ; FM5 Data
000B19BA                            Snd9B_FM5:
000B19BA EF00                       	smpsSetvoice        $00
000B19BC 8001                       	dc.b	nRst, $01
000B19C3 CA25                       	dc.b	nCs6, $25
000B19C5 F4                         	smpsModOff
000B19C6                            
000B19C6                            Snd9B_Loop00:
000B19C6 E7                         	dc.b	smpsNoAttack
000B19C7 E601                       	smpsFMAlterVol      $01
000B19C9 D102                       	dc.b	nAb6, $02
000B19CB F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
000B19D0 F2                         	smpsStop
000B19D1                            
000B19D1                            Snd9B_Voices:
000B19D1                            ;	Voice $00
000B19D1                            ;	$3C
000B19D1                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
000B19D1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
000B19D1                            	smpsVcAlgorithm     $04
000B19D1                            	smpsVcFeedback      $07
000B19D1                            	smpsVcUnusedBits    $00
000B19D1                            	smpsVcDetune        $00, $00, $04, $00
000B19D1                            	smpsVcCoarseFreq    $02, $02, $04, $00
000B19D1                            	smpsVcRateScale     $00, $00, $00, $00
000B19D1                            	smpsVcAttackRate    $15, $1F, $1F, $1F
000B19D1                            	smpsVcAmpMod        $00, $00, $00, $00
000B19D1                            	smpsVcDecayRate1    $00, $00, $1F, $00
000B19D1                            	smpsVcDecayRate2    $00, $00, $00, $00
000B19D1                            	smpsVcDecayLevel    $00, $00, $00, $00
000B19D1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B19EA                            
000B19EA                            
000B19EA                            		even		
000B19EA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
000B1A82                            		even
000B1A82                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
000B1A8E                            		even				
000B1A8E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
000B1ACA                            		even			
000B1ACA                            		; Don't let Sega sample cross $8000-byte boundary
000B1ACA                            		; (DAC driver doesn't switch banks automatically)
000B8000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000BE978                            SegaPCM_End
000BE978                            		even
000BE978                            
000BE978                            
000BE978                            
000BE978                            
000BE978                            			include "_inc\Sonic 2 Options.asm"
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            ; Common menu screen subroutine for transferring text to RAM
000BE978                            
000BE978                            ; ARGUMENTS:
000BE978                            ; d0 = starting art tile
000BE978                            ; a1 = data source
000BE978                            ; a2 = destination
000BE978                            ;
000BE978                            ; ---------------------------------------------------------------------------
000BE978                            MenuScreen:
000BE978 103C 0000                  		move.b	#bgm_Fade,d0
000BE97C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000BE980 4EB8 2232                  		jsr	PaletteFadeOut
000BE984 46FC 2700                  		move	#$2700,sr
000BE988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000BE98C 0200 00BF                  		andi.b	#-$41,d0
000BE990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000BE996 4EB8 11D0                  		jsr	ClearScreen
000BE99A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000BE9A0 3CBC 8004                  		move.w	#$8004,(a6)
000BE9A4 3CBC 8230                  		move.w	#$8230,(a6)
000BE9A8 3CBC 8407                  		move.w	#$8407,(a6)
000BE9AC 3CBC 8230                  		move.w	#$8230,(a6)
000BE9B0 3CBC 8700                  		move.w	#$8700,(a6)
000BE9B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000BE9B8 3CBC 9001                  		move.w	#$9001,(a6)
000BE9BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000BE9C0 7000                       		moveq	#0,d0
000BE9C2 323C 00FF                  		move.w	#$FF,d1
000BE9C6                            
000BE9C6                            MenuScreen_ClrObjRam:
000BE9C6 22C0                       		move.l	d0,(a1)+
000BE9C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000BE9CC                            
000BE9CC                            ; ===========================================================================
000BE9CC                            
000BE9CC 31FC C800 C8FC             		ResetDMAQueue
000BE9D2                            
000BE9DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000BE9E2 4EB8 134E                  		jsr	NemDec
000BE9F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000BE9F6 4EB8 134E                  		jsr	NemDec
000BE9FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000BEA00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000BEA06 303C 6000                  		move.w	#$6000,d0
000BEA0A 4EB8 18D8                  		jsr	EniDec
000BEA0E                            
000BEA0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000BEA22                            
000BEA22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000BEA26                            
000BEA26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEA26                            
000BEA26                            ; sub_8FBE:
000BEA26                            MenuScreenTextToRAM:
000BEA26 7200                       		moveq	#0,d1
000BEA28 1219                       		move.b	(a1)+,d1
000BEA2A                            
000BEA2A                            MenuScreenTextToRAM_Cont:
000BEA2A 1019                       		move.b	(a1)+,d0
000BEA2C 34C0                       		move.w	d0,(a2)+
000BEA2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000BEA32 4E75                       		rts
000BEA34                            ; End of function MenuScreenTextToRAM
000BEA34                            
000BEA34                            ; ===========================================================================
000BEA34                            ; loc_8FCC:
000BEA34                            MenuScreen_Options:
000BEA34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEA3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA40 303C 0070                  		move.w	#$70,d0
000BEA44 4EB8 18D8                  		jsr	EniDec
000BEA48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000BEA4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000BEA54 303C 2070                  		move.w	#$2070,d0
000BEA58 4EB8 18D8                  		jsr	EniDec
000BEA5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEA64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000BEA70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEA74 4238 FF8C                  		clr.b	(Options_menu_box).w
000BEA78 4238 F711                  		clr.b	($FFFFF711).w		
000BEA7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000BEA80                            ;-------------------------------------------------------------------------------
000BEA80 4278 F5B8                  		clr.w	($FFFFF5B8).w
000BEA84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000BEA8A 6100 0000                  		bsr.w	Dynamic_Menu
000BEA8E                            ;-------------------------------------------------------------------------------
000BEA8E 7013                       		moveq	#palid_Options,d0
000BEA90 4EB8 24DC                  		jsr		PalLoad1
000BEA94 103C 0091                  		move.b	#$91,d0
000BEA98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000BEA9C 42B8 F700                  		clr.l	(v_screenposx).w
000BEAA0 42B8 F704                  		clr.l	(v_screenposy).w
000BEAA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAAA 4EB8 3B70                  		jsr	WaitForVBla
000BEAAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000BEAB2 0000 0040                  		ori.b	#$40,d0
000BEAB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000BEABC 4EB8 218C                  		jsr	PaletteFadeIn
000BEAC0                            ; loc_9060:
000BEAC0                            OptionScreen_Main:
000BEAC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000BEAC6 4EB8 3B70                  		jsr	WaitForVBla				
000BEACA 46FC 2700                  		move	#$2700,sr
000BEACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000BEAD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000BEAD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000BEADA 46FC 2300                  		move	#$2300,sr
000BEADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000BEAE4 6100 0000                  		bsr.w	Dynamic_Menu		
000BEAE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000BEAEE                            
000BEAEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000BEAF0 60CE                       		bra.s	OptionScreen_Main
000BEAF2                            ; ===========================================================================
000BEAF2                            ; loc_909A:
000BEAF2                            OptionScreen_Select:
000BEAF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000BEAF6 6600                       		bne.s	OptionScreen_Select_Not1P
000BEAF8 7000                       		moveq	#0,d0
000BEAFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB00 4E75                       		rts
000BEB02                            ; ===========================================================================
000BEB02                            ; loc_90B6:
000BEB02                            OptionScreen_Select_Not1P:
000BEB02 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000BEB08 4E75                       		rts
000BEB0A                            ; ===========================================================================
000BEB0A                            
000BEB0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB0A                            
000BEB0A                            ;sub_90E0:
000BEB0A                            OptionScreen_Controls:
000BEB0A 7400                       		moveq	#0,d2
000BEB0C 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000BEB10 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000BEB14 0800 0000                  		btst	#0,d0			; is up pressed?
000BEB18 6700                       		beq.s	Option_Controls_Down	; if not, branch
000BEB1A 5302                       		subq.b	#1,d2					; move up 1 selection
000BEB1C 6400                       		bcc.s	Option_Controls_Down
000BEB1E 143C 0001                  		move.b	#1,d2
000BEB22                            
000BEB22                            Option_Controls_Down:
000BEB22 0800 0001                  		btst	#1,d0			; is down pressed?
000BEB26 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000BEB28 5202                       		addq.b	#1,d2					; move down 1 selection
000BEB2A 0C02 0002                  		cmpi.b	#2,d2
000BEB2E 6500                       		blo.s	Option_Controls_Refresh
000BEB30 7400                       		moveq	#0,d2
000BEB32                            
000BEB32                            Option_Controls_Refresh:
000BEB32 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000BEB36 E54A                       		lsl.w	#2,d2
000BEB38 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000BEB3C 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000BEB40 3411                       		move.w	(a1),d2
000BEB42 0800 0002                  		btst	#2,d0				; is left pressed?
000BEB46 6700                       		beq.s	Option_Controls_Right		; if not, branch
000BEB48 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000BEB4A 6400                       		bcc.s	Option_Controls_Right
000BEB4C 1403                       		move.b	d3,d2
000BEB4E                            
000BEB4E                            Option_Controls_Right:
000BEB4E 0800 0003                  		btst	#3,d0			; is right pressed?
000BEB52 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000BEB54 5202                       		addq.b	#1,d2						; add 1 to sound test
000BEB56 B403                       		cmp.b	d3,d2
000BEB58 6300                       		bls.s	Option_Controls_Button_A
000BEB5A 7400                       		moveq	#0,d2
000BEB5C                            
000BEB5C                            Option_Controls_Button_A:
000BEB5C 0800 0006                  		btst	#6,d0				; is button A pressed?
000BEB60 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000BEB62 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000BEB66 B403                       		cmp.b	d3,d2
000BEB68 6300                       		bls.s	Option_Controls_Refresh2
000BEB6A 7400                       		moveq	#0,d2
000BEB6C                            
000BEB6C                            Option_Controls_Refresh2:
000BEB6C 3282                       		move.w	d2,(a1)
000BEB6E                            
000BEB6E                            Option_Controls_NoMove:
000BEB6E 4E75                       		rts
000BEB70                            ; End of function OptionScreen_Controls
000BEB70                            
000BEB70                            ; ===========================================================================
000BEB70                            ; word_917A:
000BEB70                            OptionScreen_Choices:
000BEB70 0AFF FFBE                  		dc.l ($B-1)<<24|($FFFFBE&$FFFFFF)
000BEB74 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000BEB78                            		even
000BEB78                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000BEB78                            
000BEB78                            
000BEB78                            OptionScreen_DrawSelected:
000BEB78 6100 0000                  		bsr.w	loc_9268
000BEB7C 7200                       		moveq	#0,d1
000BEB7E 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEB82 E749                       		lsl.w	#3,d1
000BEB84 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEB8A 47F3 1000                  		lea	(a3,d1.w),a3
000BEB8E 303C 6000                  		move.w	#$6000,d0
000BEB92 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000BEB98 225B                       		movea.l	(a3)+,a1
000BEB9A 6100 FE8A                  		bsr.w	MenuScreenTextToRAM
000BEB9E 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000BEBA4 7200                       		moveq	#0,d1
000BEBA6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBAA E549                       		lsl.w	#2,d1
000BEBAC 43FA FFC2                  		lea	OptionScreen_Choices(pc),a1
000BEBB0 2271 1000                  		movea.l	(a1,d1.w),a1
000BEBB4 3211                       		move.w	(a1),d1
000BEBB6 E549                       		lsl.w	#2,d1
000BEBB8                            
000BEBB8                            loc_9186:		
000BEBB8 2274 1000                  		movea.l	(a4,d1.w),a1
000BEBBC 6100 FE68                  		bsr.w	MenuScreenTextToRAM
000BEBC0                            		;cmpi.b	#2,(Options_menu_box).w
000BEBC0                            		;bne.s	loc2_9186
000BEBC0                            		;lea	($FFFF00C2).l,a2
000BEBC0                            		;bsr.w	loc_9296
000BEBC0                            
000BEBC0                            loc2_9186:		
000BEBC0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000BEBC6 201B                       		move.l	(a3)+,d0
000BEBC8 7215                       		moveq	#$15,d1
000BEBCA 7407                       		moveq	#7,d2
000BEBCC 4EF8 1324                  		jmp	TilemapToVRAM
000BEBD0                            ; ===========================================================================
000BEBD0                            
000BEBD0                            OptionScreen_DrawUnselected:
000BEBD0 6100 0000                  		bsr.w	loc_9268
000BEBD4 7200                       		moveq	#0,d1
000BEBD6 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEBDA E749                       		lsl.w	#3,d1
000BEBDC 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000BEBE2 47F3 1000                  		lea	(a3,d1.w),a3
000BEBE6 7000                       		moveq	#0,d0
000BEBE8 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000BEBEE 225B                       		movea.l	(a3)+,a1
000BEBF0 6100 FE34                  		bsr.w	MenuScreenTextToRAM
000BEBF4 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000BEBFA 7200                       		moveq	#0,d1
000BEBFC                            		;cmpi.b	#2,(Options_menu_box).w
000BEBFC                            		;beq.s	loc2_91F8
000BEBFC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000BEC00 E549                       		lsl.w	#2,d1
000BEC02 43FA FF6C                  		lea	OptionScreen_Choices(pc),a1
000BEC06 2271 1000                  		movea.l	(a1,d1.w),a1
000BEC0A 3211                       		move.w	(a1),d1
000BEC0C E549                       		lsl.w	#2,d1
000BEC0E                            
000BEC0E                            loc2_91F8		
000BEC0E 2274 1000                  		movea.l	(a4,d1.w),a1
000BEC12 6100 FE12                  		bsr.w	MenuScreenTextToRAM
000BEC16                            		;cmpi.b	#2,(Options_menu_box).w
000BEC16                            		;bne.s	loc3_91F8
000BEC16                            		;lea	($FFFF0222).l,a2
000BEC16                            		;bsr.w	loc_9296
000BEC16                            
000BEC16                            loc3_91F8		
000BEC16 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000BEC1C 201B                       		move.l	(a3)+,d0
000BEC1E 7215                       		moveq	#$15,d1
000BEC20 7407                       		moveq	#7,d2
000BEC22 4EF8 1324                  		jmp	TilemapToVRAM
000BEC26                            ; ===========================================================================
000BEC26                            
000BEC26                            loc_9268:
000BEC26 49F9 0000 0000             		lea	(off_92D2).l,a4
000BEC2C 4A38 FFF8                  		tst.b	(v_megadrive).w
000BEC30 6A00                       		bpl.s	loc2_9268
000BEC32 49F9 0000 0000             		lea	(off_92DE).l,a4
000BEC38                            
000BEC38                            loc2_9268:
000BEC38 4A38 FF8C                  		tst.b	(Options_menu_box).w
000BEC3C 6700                       		beq.s	loc4_9268
000BEC3E 49F9 0000 0000             		lea	(off_92EA).l,a4
000BEC44                            
000BEC44                            loc4_9268:
000BEC44 4E75                       		rts
000BEC46                            ; ===========================================================================
000BEC46                            
000BEC46                            loc_9296:
000BEC46 4E75                       		rts
000BEC48                            
000BEC48                            Dynamic_Menu:
000BEC48 5338 F5B9                                  subq.b  #$01, ($FFFFF5B9).w          ; remove 1 from frame count
000BEC4C 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000BEC4E 11FC 0007 F5B9                             move.b  #$07, ($FFFFF5B9).w          ; Set time for frame display
000BEC54 1038 F5B8                                  move.b  ($FFFFF5B8).w, D0            ; Current Frame D0
000BEC58 5238 F5B8                                  addq.b  #$01, ($FFFFF5B8).w          ; Advance frame $FFFFFFB8
000BEC5C 0240 001F                                  andi.w  #$001F, D0
000BEC60 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000BEC64                                          ; muls.w  #$0140, D0                   ; as above
000BEC64 ED48                                       lsl.w   #$06, D0
000BEC66 4DF9 00C0 0000                             lea     ($00C00000), A6
000BEC6C 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000BEC74 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000BEC7A 43F1 0000                                  lea     $00(A1, D0), A1
000BEC7E 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000BEC82                                            
000BEC82                            Menu_Loop_Load_Tiles:
000BEC82 2C99                                       move.l  (A1)+, (A6)
000BEC84 2C99                                       move.l  (A1)+, (A6)     
000BEC86 2C99                                       move.l  (A1)+, (A6)     
000BEC88 2C99                                       move.l  (A1)+, (A6)     
000BEC8A 2C99                                       move.l  (A1)+, (A6)     
000BEC8C 2C99                                       move.l  (A1)+, (A6)
000BEC8E 2C99                                       move.l  (A1)+, (A6)
000BEC90 2C99                                       move.l  (A1)+, (A6)
000BEC92 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000BEC96                            Exit_Dinamic_Menu:                
000BEC96                                           
000BEC96 4E75                                       rts      
000BEC98                                                    
000BEC98                            Sonic_Miles_Frame_Select:     
000BEC98 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000BECA6 050A                                       dc.b    $05, $0A
000BECA8 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000BECB6 0A05                                       dc.b    $0A, $05   
000BECB8                            ; ===========================================================================
000BECB8                            ; off_92BA:
000BECB8                            OptScrBoxData:
000BECB8                            
000BECB8 0000 0000                  		dc.l TextOptScr_PlayerSelect
000BECBC 4192                       		dc.w $4192
000BECBE 0003                       		dc.w 3
000BECC0 0000 0000                  		dc.l TextOptScr_LivesSystem
000BECC4 4592                       		dc.w $4592
000BECC6 0003                       		dc.w 3
000BECC8                            
000BECC8                            off_92D2:
000BECC8 0000 0000                  		dc.l TextOptScr_Default
000BECCC 0000 0000                  		dc.l TextOptScr_Original
000BECD0 0000 0000                  		dc.l TextOptScr_Beta
000BECD4 0000 0000                  		dc.l TextOptScr_Midnight
000BECD8 0000 0000                  		dc.l TextOptScr_C2
000BECDC 0000 0000                  		dc.l TextOptScr_Clackers
000BECE0 0000 0000                  		dc.l TextOptScr_RHS
000BECE4 0000 0000                  		dc.l TextOptScr_Socket
000BECE8 0000 0000                  		dc.l TextOptScr_Cringe
000BECEC 0000 0000                  		dc.l TextOptScr_Dark	
000BECF0 0000 0000                  		dc.l TextOptScr_DeltaWooloo			
000BECF4                            off_92DE:
000BECF4 0000 0000                  		dc.l TextOptScr_Default
000BECF8 0000 0000                  		dc.l TextOptScr_Original
000BECFC 0000 0000                  		dc.l TextOptScr_Beta
000BED00 0000 0000                  		dc.l TextOptScr_Midnight
000BED04 0000 0000                  		dc.l TextOptScr_C2
000BED08 0000 0000                  		dc.l TextOptScr_Clackers
000BED0C 0000 0000                  		dc.l TextOptScr_RHS
000BED10 0000 0000                  		dc.l TextOptScr_Socket
000BED14 0000 0000                  		dc.l TextOptScr_Cringe
000BED18 0000 0000                  		dc.l TextOptScr_Dark
000BED1C 0000 0000                  		dc.l TextOptScr_DeltaWooloo		
000BED20                            off_92EA:
000BED20 0000 0000                  		dc.l TextOptScr_On
000BED24 0000 0000                  		dc.l TextOptScr_Off
000BED28                            ; ===========================================================================
000BED28                            
000BEE20                            ; ============================================================================
000BEE20                            		even
000BEE20                            Sonic_Miles_Spr:	incbin  "artunc/Sonic and Miles text.bin"
000BF320                            		even
000BF320                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000BF4D0                            		even
000BF4D0                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000BFA3A                            		even
000BFA3A                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000BFABA                            		even
000BFABA                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000BFAE6                            		even
000BFAE6                            		even
000BFAE6                            
000BFAE6                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
0013D36A                                        even
0013D36A                            
0013D36A                            Art_Dust:	incbin	artunc\spindust.bin
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ==============================================================
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            ; Debugging modules
0013ECAA                            ; --------------------------------------------------------------
0013ECAA                            
0013ECAA                               include   "ErrorHandler.asm"
0013ECAA                            
0013ECAA                            ; ===============================================================
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handling and debugging modules
0013ECAA                            ; 2016-2017, Vladikcomper
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler functions and calls
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Error handler control flags
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Screen appearence flags
0013ECAA =00000001                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
0013ECAA =00000002                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
0013ECAA =00000010                  _eh_disassemble		equ	$10		; disassembles the instruction where the error happened + vint and hint handlers
0013ECAA                            
0013ECAA                            ; Advanced execution flags
0013ECAA                            ; WARNING! For experts only, DO NOT USES them unless you know what you're doing
0013ECAA =00000020                  _eh_return		equ	$20
0013ECAA =00000040                  _eh_enter_console	equ	$40
0013ECAA =00000080                  _eh_align_offset	equ	$80
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            ; Errors vector table
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            ; Default screen configuration
0013ECAA =00000000                  _eh_default			equ	0 ;_eh_show_sr_usp
0013ECAA                            
0013ECAA                            ; ---------------------------------------------------------------
0013ECAA                            
0013ECAA                            BusError:
0013ECAA 4EB9 0000 0000 4255 5320+  	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECBC                            
0013ECBC                            AddressError:
0013ECBC 4EB9 0000 0000 4144 4452+  	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error|_eh_disassemble
0013ECD2                            
0013ECD2                            IllegalInstr:
0013ECD2 4EB9 0000 0000 494C 4C45+  	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default|_eh_disassemble
0013ECEE                            
0013ECEE                            ZeroDivide:
0013ECEE 4EB9 0000 0000 5A45 524F+  	__ErrorMessage "ZERO DIVIDE", _eh_default|_eh_disassemble
0013ED02                            
0013ED02                            ChkInstr:
0013ED02 4EB9 0000 0000 4348 4B20+  	__ErrorMessage "CHK INSTRUCTION", _eh_default|_eh_disassemble
0013ED1A                            
0013ED1A                            TrapvInstr:
0013ED1A 4EB9 0000 0000 5452 4150+  	__ErrorMessage "TRAPV INSTRUCTION", _eh_default|_eh_disassemble
0013ED34                            
0013ED34                            PrivilegeViol:
0013ED34 4EB9 0000 0000 5052 4956+  	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default|_eh_disassemble
0013ED50                            
0013ED50                            Trace:
0013ED50 4EB9 0000 0000 5452 4143+  	__ErrorMessage "TRACE", _eh_default|_eh_disassemble
0013ED5E                            
0013ED5E                            Line1010Emu:
0013ED5E 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE A EMULATOR", _eh_default|_eh_disassemble
0013ED76                            
0013ED76                            Line1111Emu:
0013ED76 4EB9 0000 0000 4C49 4E45+  	__ErrorMessage "LINE F EMULATOR", _eh_default|_eh_disassemble
0013ED8E                            
0013ED8E                            ErrorExcept:
0013ED8E 4EB9 0000 0000 4552 524F+  	__ErrorMessage "ERROR EXCEPTION", _eh_default|_eh_disassemble
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Import error handler global functions
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler.__global__error_initconsole equ ErrorHandler+$158
0013EDA6                            ErrorHandler.__global__errorhandler_setupvdp equ ErrorHandler+$25C
0013EDA6                            ErrorHandler.__global__console_loadpalette equ ErrorHandler+$AE2
0013EDA6                            ErrorHandler.__global__console_setposasxy_stack equ ErrorHandler+$B1E
0013EDA6                            ErrorHandler.__global__console_setposasxy equ ErrorHandler+$B24
0013EDA6                            ErrorHandler.__global__console_getposasxy equ ErrorHandler+$B50
0013EDA6                            ErrorHandler.__global__console_startnewline equ ErrorHandler+$B72
0013EDA6                            ErrorHandler.__global__console_setbasepattern equ ErrorHandler+$B9A
0013EDA6                            ErrorHandler.__global__console_setwidth equ ErrorHandler+$BAE
0013EDA6                            ErrorHandler.__global__console_writeline_withpattern equ ErrorHandler+$BC4
0013EDA6                            ErrorHandler.__global__console_writeline equ ErrorHandler+$BC6
0013EDA6                            ErrorHandler.__global__console_write equ ErrorHandler+$BCA
0013EDA6                            ErrorHandler.__global__console_writeline_formatted equ ErrorHandler+$C76
0013EDA6                            ErrorHandler.__global__console_write_formatted equ ErrorHandler+$C7A
0013EDA6                            ErrorHandler.__global__decode68k equ ErrorHandler+$CE6
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Error handler external functions (compiled only when used)
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            ; Include error handler binary module
0013EDA6                            ; ---------------------------------------------------------------
0013EDA6                            
0013EDA6                            ErrorHandler:
0013EDA6                            	incbin	ErrorHandler.bin
001407BA                            
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; WARNING!
001407BA                            ;	DO NOT put any data from now on! DO NOT use ROM padding!
001407BA                            ;	Symbol data should be appended here after ROM is compiled
001407BA                            ;	by ConvSym utility, otherwise debugger modules won't be able
001407BA                            ;	to resolve symbol names.
001407BA                            ; ---------------------------------------------------------------
001407BA                            ; ---------------------------------------------------------------
001407BA                            
001407BA                            ; end of 'ROM'
001407BA                            		even
001407BA                            EndOfRom:
001407BA                            
001407BA                            
